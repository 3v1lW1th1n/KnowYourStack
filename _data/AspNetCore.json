{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core in Visual Studio for Mac – Help us build the best experience","PublishedOn":"2018-09-17T20:26:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are working to improve the experience for ASP.NET Core developers in Visual Studio for Mac. If you are working on ASP.NET Core apps in Visual Studio for Mac, we would love to hear you feedback....","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/17/asp-net-core-in-visual-studio-for-mac-help-us-build-the-best-experience/","RawContent":null},{"Title":"The future of ASP.NET SignalR","PublishedOn":"2018-09-17T18:03:57+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"In ASP.NET Core 2.1, we brought SignalR into the ASP.NET Core family. Many of our users have asked what this means for the previous version of SignalR: ASP.NET SignalR. As a reminder, ASP.NET SignalR...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/17/the-future-of-asp-net-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview2 now available","PublishedOn":"2018-09-12T16:00:01+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today we’re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We’ve been working hard on this release over the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/12/asp-net-core-2-2-0-preview2-now-available/","RawContent":null},{"Title":"How to get started with Azure and .NET","PublishedOn":"2018-09-04T19:05:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Azure is a big cloud with lots of services, and for even the most experienced user it can be intimidating to know which service will best meet your needs. This blog post is intended to provide a short...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/04/how-to-get-started-with-azure-and-net/","RawContent":null},{"Title":"Library Manager Released in 15.8","PublishedOn":"2018-08-31T07:47:55+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Microsoft Library Manager (LibMan) is now available in the general release of Visual Studio 2017 as of v15.8. LibMan first previewed earlier this year, and now, after a much-anticipated wait, LibMan...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/31/library-manager-release-in-15-8/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Endpoint Routing","PublishedOn":"2018-08-27T21:25:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Endpoint Routing in 2.2 What is it? We&#8217;re making a big investment in routing starting in 2.2 to make it interoperate more seamlessly with middleware. For 2.2 this will start with us making a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/27/asp-net-core-2-2-0-preview1-endpoint-routing/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: SignalR Java Client","PublishedOn":"2018-08-23T20:41:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was authored by Mikael Mengistu. In ASP.NET Core 2.2 we are introducing a Java Client for SignalR. The first preview of this new client is available now. This client supports connecting to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-2-0-preview1-signalr-java-client/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Open API Analyzers & Conventions","PublishedOn":"2018-08-23T18:18:16+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"What is it? Open API (alternatively known as Swagger) is a language-agnostic specification for describing REST APIs. The Open API ecosystem has tools that allows for discovering, testing and producing...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-20-preview1-open-api-analyzers-conventions/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Healthchecks","PublishedOn":"2018-08-23T05:28:22+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"What is it? We&#8217;re adding a health checks service and middleware in 2.2.0 to make it easy to use ASP.NET Core in environments that require health checks &#8211; such as Kubernetes. The new...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/22/asp-net-core-2-2-0-preview1-healthcheck/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: HTTP/2 in Kestrel","PublishedOn":"2018-08-23T00:26:16+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As part of the 2.2.0-preview1 release, we’ve added support for HTTP/2 in Kestrel. What is HTTP/2? HTTP/2 is a major revision of the HTTP protocol. Some of the notable features of HTTP/2 are support...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/22/asp-net-core-2-2-0-preview1-http-2-in-kestrel/","RawContent":null}],"ResultType":"Feed"},"Home-Issues":{"Issues":[{"Id":"362357213","IsPullRequest":false,"CreatedAt":"2018-09-25T23:54:49","Actor":"aspnet-hello","Number":"3544","RawContent":null,"Title":"Test failure: StringSegment_ImplicitConvertToSpan","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=557737&buildTypeId=XPlat_Windows_Win8_Universe) occasionally with the following error:\r\n```\r\nSystem.IO.FileLoadException : Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at System.MemoryExtensions.AsSpan(String text, Int32 start, Int32 length)\r\n   at Microsoft.Extensions.Primitives.StringSegmentTest.StringSegment_ImplicitConvertToSpan() in /_/test/Microsoft.Extensions.Primitives.Tests/StringSegmentTest.cs:line 48\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3544","RelatedDescription":"Closed issue \"Test failure: StringSegment_ImplicitConvertToSpan\" (#3544)"},{"Id":"363803276","IsPullRequest":false,"CreatedAt":"2018-09-25T23:30:28","Actor":"Eilon","Number":"3557","RawContent":null,"Title":"Cookie policy and localization","State":"open","Body":"_From @clintm90 on Friday, 21 September 2018 18:22:36_\r\n\r\nHello,\r\n\r\nWhen the user does not had agree cookie using, it's not possible to save the localization cookie so the user cannot change the language, i think it's a little issue, or just a mindless\r\n\r\nThank you\r\n\r\n_Copied from original issue: dotnet/core#1956_","Url":"https://github.com/aspnet/Home/issues/3557","RelatedDescription":"Open issue \"Cookie policy and localization\" (#3557)"},{"Id":"363366895","IsPullRequest":false,"CreatedAt":"2018-09-25T23:02:14","Actor":"aspnet-hello","Number":"3553","RawContent":null,"Title":"Test failure: PostAsyncThrowsForErrorResponse","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=560348&buildTypeId=Releases_22xPublic_OsxUniverse) occasionally with the following error:\r\n```\r\nSystem.Net.HttpListenerException : Address already in use\r\n   at System.Net.HttpEndPointManager.GetEPListener(String host, Int32 port, HttpListener listener, Boolean secure)\r\n   at System.Net.HttpEndPointManager.AddPrefixInternal(String p, HttpListener listener)\r\n   at System.Net.HttpEndPointManager.AddListener(HttpListener listener)\r\n   at System.Net.HttpListener.Start()\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlimTest.StartHost(String& address, Int32 statusCode, Func`2 handler) in /_/test/Microsoft.AspNetCore.Testing.Tests/HttpClientSlimTest.cs:line 77\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlimTest.PostAsyncThrowsForErrorResponse() in /_/test/Microsoft.AspNetCore.Testing.Tests/HttpClientSlimTest.cs:line 48\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3553","RelatedDescription":"Closed issue \"Test failure: PostAsyncThrowsForErrorResponse\" (#3553)"},{"Id":"363578719","IsPullRequest":false,"CreatedAt":"2018-09-25T21:28:34","Actor":"TanvirArjel","Number":"3555","RawContent":null,"Title":"app.UseExceptionHandler(\"/Error\"); doesn't work on POST methods.","State":"closed","Body":"I have configured ASP.NET Core default Exception Handler as follows:\r\n\r\n```\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n{\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseBrowserLink();\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n            else\r\n            {\r\n                app.UseExceptionHandler(\"/Error\");\r\n                //app.UseHsts();\r\n            }\r\n}\r\n```\r\n\r\nWhenever any error occurs  in the `GET` methods, it is working as expected that is it is being caught and redirected to the `Error()` method.\r\n\r\nProblem is that whenever any error occurs  in the `POST` methods, it is not working as expected that is it is not being caught and redirected to the `Error()` method.\r\n\r\nHere is sample code:\r\n\r\n```\r\npublic class HomeController : Controller\r\n{\r\n       // GET: ContactInfo/Create\r\n        public async Task<IActionResult> Create()\r\n        {\r\n           Convert.ToInt32(\"Hello\");  // Intentional error\r\n            return View();\r\n        }\r\n\r\n        // POST: ContactInfo/Create\r\n        \r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Create(ContactInfo contactInfo)\r\n        {\r\n            Convert.ToInt32(\"Hello\"); // Intentional error\r\n            if (ModelState.IsValid)\r\n            {\r\n                return RedirectToAction(nameof(Index));\r\n            }\r\n            \r\n            return View(contactInfo);\r\n        }\r\n\r\n         [HttpGet]\r\n        [Route(\"/Error/{id?}\")]\r\n        public IActionResult Error(int? id)\r\n        {\r\n            if (id == 404)\r\n            {\r\n                return View(\"PageNotFound\");\r\n            }\r\n\r\n            var feature = HttpContext.Features.Get<IExceptionHandlerPathFeature>();\r\n           // Necessary staffs here\r\n\r\n            return View();\r\n        }\r\n}\r\n```","Url":"https://github.com/aspnet/Home/issues/3555","RelatedDescription":"Closed issue \"app.UseExceptionHandler(\"/Error\"); doesn't work on POST methods.\" (#3555)"},{"Id":"363619655","IsPullRequest":false,"CreatedAt":"2018-09-25T14:52:23","Actor":"JNickVA1","Number":"3556","RawContent":null,"Title":"Localization works on Edge but fails on IE and Chrome using sample code","State":"open","Body":"I have an ASP.NET Core Razor web app, non-MVC, that I am trying to localize using the code sample, Localization, referenced in the \"Globalization and localization in ASP.NET Core\" docs (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization?view=aspnetcore-2.1) I needed to make a few adjustments due to the fact that I am writing a Razor web app and the sample is written for MVC.\r\n\r\nAfter adding what I believe are the necessary ServiceCollection and ApplicationBuilder configurations, my app can change languages without any problem, but only in the Edge browser. When I run in both IE and Chrome, the language change fails. \r\n\r\nI have a repo at https://github.com/JNickVA1/CoreMasterTemplate that contains the code used. I suspect that I am either configuring the ServiceCollection or the ApplicationBuilder incorrectly or in the wrong order OR my _SelectLanguagePartial.cshtml is not browser independent. In either case I am not able to localize my app on all browsers I mentioned.","Url":"https://github.com/aspnet/Home/issues/3556","RelatedDescription":"Open issue \"Localization works on Edge but fails on IE and Chrome using sample code\" (#3556)"},{"Id":"363195697","IsPullRequest":false,"CreatedAt":"2018-09-25T12:45:57","Actor":"JackSteel97","Number":"3550","RawContent":null,"Title":"System.FormatException on every Request","State":"closed","Body":"### Problem\r\nThis exception occurs, as far as I can tell, every time the server receives a request to any of the endpoints. It does not fall out to any of my `catch`s and the program does not crash, the only way I know it happens is the Event log in visual studio shows the below:\r\n![1](https://user-images.githubusercontent.com/13905557/45960957-548a5c00-c015-11e8-8240-c35370e00ad0.png)\r\n\r\nClicking through to Historical Debugging does not provide much useful info either:\r\n![2](https://user-images.githubusercontent.com/13905557/45961001-72f05780-c015-11e8-8237-46fc2f2edc34.png)\r\n\r\nThe only thing resembling a call stack I can find is in the debug output:\r\n![3](https://user-images.githubusercontent.com/13905557/45961031-83a0cd80-c015-11e8-8718-f43e00fa5f6a.png)\r\n\r\nSince it is not breaking anything in my program it isn't a major issue, but it would be nice to know why it's happening; if it's something obscure I've done wrong or a bug in ASP.NET.\r\n\r\nIf anyone has any troubleshooting suggestions please let me know, if not I will try and get a repo with a repro project up at some point.\r\n\r\n### `dotnet --info` output\r\n\r\n>.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\n>Runtime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\n>Host (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n>.NET Core SDKs installed:\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n>.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]","Url":"https://github.com/aspnet/Home/issues/3550","RelatedDescription":"Closed issue \"System.FormatException on every Request\" (#3550)"},{"Id":"363532588","IsPullRequest":false,"CreatedAt":"2018-09-25T11:32:04","Actor":"oliverjanik","Number":"3554","RawContent":null,"Title":"[Feature Request]: Please update nuget for Microsoft.AspNetCore.Proxy","State":"open","Body":"Reopening: #2794\r\n\r\n\r\n`<rant>`\r\nWhat's with the bloody bots running around closing long standing feature requests? The issue is open because it has not been resolved yet. Seems every repo has a bot you have to fight, lately.\r\nThis one is special because not only it closes discussion it locks it as well, just in case you wanted to respond.\r\n`</rant>`","Url":"https://github.com/aspnet/Home/issues/3554","RelatedDescription":"Open issue \"[Feature Request]: Please update nuget for Microsoft.AspNetCore.Proxy\" (#3554)"},{"Id":"363327846","IsPullRequest":false,"CreatedAt":"2018-09-24T21:29:20","Actor":"blowdart","Number":"3552","RawContent":null,"Title":"Asp.Net Core takes too long to run the web application","State":"open","Body":"_From @josejmoran on September 23, 2018 15:2_\n\nWhen I run the application the build process takes about 45 seconds, the majority of that time is spent on some tasks that do not send any message to the Output window so I have no idea what is going on. The development loop cycle is affected by this. Usually we change a file or two and click run again, so it feels like forever every time. Is there a way to improve this, maybe keeping a list of files modified and just compiling only the changed files? If VS is only compiling the files I have created and having a Core I7 with 16GB of RAM it seems too slow to run the application.\r\n\r\nIt may be helpful to add some logging messages during the build process that show the time spent in each task so if we have a slow build we can pinpoint the task or tasks delaying the build process as well as providing this log to you guys for  a deeper analysis.\n\n_Copied from original issue: aspnet/Identity#1977_","Url":"https://github.com/aspnet/Home/issues/3552","RelatedDescription":"Open issue \"Asp.Net Core takes too long to run the web application\" (#3552)"},{"Id":"363011740","IsPullRequest":false,"CreatedAt":"2018-09-24T18:16:41","Actor":"sandorfr","Number":"3548","RawContent":null,"Title":"Async DataProtection","State":"closed","Body":"@davidfowl [gave me the courage](https://twitter.com/davidfowl/status/1042620776585748480) to \r\nRe-request : https://github.com/aspnet/DataProtection/issues/124\r\n\r\n> *from @sunsided*\r\n> Apart from the documentation being a bit thin on IXmlRepository, the methods really should be async.\r\n> \r\n> Considering it's a repository that very likely has something to do with physical storage - which usually blocks - there should be a \"native\" way to use await within the implementation. I'm currently working on a MongoDB storage and have to resort to use blocking calls just to be able to use it as a repo.\r\nI'm pretty sure other implementations would benefit from that as well.\r\n\r\nAnd\r\n\r\n> *from @niemyjski*\r\n> This should be revisited. The only data store that isn't async is an in memory implementation...\r\n\r\nAnd also this excellent feedback (also from @niemyjski)\r\n\r\n> I'm thinking the underlying implementation should take care of it and it should be really easy to implement. I've looked at many implementations while implementing a Foundatio IFileStorage version... They all do crazy things and are not uniform on how they:\r\n> \r\n> Are executed (sync, async, configureawait(false) / Blocking with .Result, or even exponential backoffs...).\r\n> Should XElements be stored in a single file or multiple on disk.\r\n> Should the friendlyName be the file path (when isn't it set to a unique value..)\r\n> Should the element be loaded from a stream or string and with what validation methods or apis.\r\n> Should Gets and Saves be retried.\r\n> Concurrency options, should I be locking?\r\n> How are saved files cleaned up in case of disk storage..\r\n> It's really not intuitive.\r\n\r\nSo I implore you to revisit it :). I'd be happy to actually contribute if it has any chances to go through.\r\n","Url":"https://github.com/aspnet/Home/issues/3548","RelatedDescription":"Closed issue \"Async DataProtection\" (#3548)"},{"Id":"363229144","IsPullRequest":false,"CreatedAt":"2018-09-24T16:49:16","Actor":"hrnsky","Number":"3551","RawContent":null,"Title":"Using hubs inside Hostedservice with kestrel on prod environment","State":"closed","Body":"Hello all, I don't know where to open this issue weather is an issue or not, hope you will help me. I have a background service, running good, I'm running a project with asp.net core 2.1.4 on ubuntu 18 with nginx 1.14 as proxy with kestrel. Inside this background service, I'm using SignalR hub to send some messages to clients. In this background service, some action happens and pushes the json response to the client with clientID. This scenario runs good while debugging on windows 10 with vs 2017, but doesn't work on prod environment. I'm publishing the project with linux-64 option, then run on ubuntu with systemd service. What should i do ? Is it a good practice to use Hubs inside IHostedService ? Also I'm using this hub inside controllers, nothing going bad. How can i log this situation and how to get the log ? I'm tracking with journalctl, there is no exception and also logging my \"hub sent\" log message. Thanks","Url":"https://github.com/aspnet/Home/issues/3551","RelatedDescription":"Closed issue \"Using hubs inside Hostedservice with kestrel on prod environment\" (#3551)"},{"Id":"363091672","IsPullRequest":false,"CreatedAt":"2018-09-24T10:37:51","Actor":"licypal","Number":"3549","RawContent":null,"Title":"CORS issue ","State":"open","Body":"   1. Description of the problem:\r\n\r\nGetting CORs issue when calling APIs:\r\n\r\n![inkedupload a submission 403 error_li](https://user-images.githubusercontent.com/6519992/45947735-30ddfc00-bfaa-11e8-8661-1a0434ac799f.jpg)\r\n\r\n   2. Steps to reproduce (preferrably a link to a GitHub repo with a repro project)\r\n\r\nhttps://microsoftit.visualstudio.com/OneITVSO/OneITVSO%20Team/_git/EUS-Col-ColPub-PublishAppsService\r\n\r\nOn running webpart with 'gulp serve --nobrowser', all api calls fail with CORS error.\r\n\r\n   3. The version of `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\n.NET Core 2.1.402\r\n\r\n   4. The output of `dotnet --info`\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\ncc: @guardrex","Url":"https://github.com/aspnet/Home/issues/3549","RelatedDescription":"Open issue \"CORS issue \" (#3549)"},{"Id":"362916451","IsPullRequest":false,"CreatedAt":"2018-09-23T05:56:25","Actor":"Chrissx","Number":"3547","RawContent":null,"Title":"[Question] Hosting .NET Core app from normal ASP .NET Application","State":"open","Body":"Hi,\r\n\r\nIs is possible to boostrap ( host ) a .NET Core Application ( ASP .NET Core WebApi mostly ) from a non-core enviroment? Boostrap from the startup but different port? Is there any drawback/problems with this approach?","Url":"https://github.com/aspnet/Home/issues/3547","RelatedDescription":"Open issue \"[Question] Hosting .NET Core app from normal ASP .NET Application\" (#3547)"},{"Id":"360101054","IsPullRequest":false,"CreatedAt":"2018-09-22T23:44:51","Actor":"aspnet-hello","Number":"3534","RawContent":null,"Title":"Test failure: Factory_CleanupCycle_DisposesEligibleHandler","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=553687&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nCleanup entry disposable\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.Extensions.Http.DefaultHttpClientFactoryTest.Factory_CleanupCycle_DisposesEligibleHandler() in /_/test/Microsoft.Extensions.Http.Test/DefaultHttpClientFactoryTest.cs:line 382\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3534","RelatedDescription":"Closed issue \"Test failure: Factory_CleanupCycle_DisposesEligibleHandler\" (#3534)"},{"Id":"362643282","IsPullRequest":false,"CreatedAt":"2018-09-21T14:35:11","Actor":"DmitriyKulagin","Number":"3546","RawContent":null,"Title":"Minification HTML out of the box","State":"open","Body":"It would be good to get minification HTML functionality without the need for third-party extensions. Do you plan the implementation of this functionality in the near future?","Url":"https://github.com/aspnet/Home/issues/3546","RelatedDescription":"Open issue \"Minification HTML out of the box\" (#3546)"},{"Id":"362400625","IsPullRequest":false,"CreatedAt":"2018-09-20T23:11:51","Actor":"aspnet-hello","Number":"3545","RawContent":null,"Title":"Test failure: StringSegment_ImplicitConvertToSpan","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=557885&buildTypeId=XPlat_Windows_Win8_Universe) occasionally with the following error:\r\n```\r\nSystem.IO.FileLoadException : Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at System.MemoryExtensions.AsSpan(String text, Int32 start, Int32 length)\r\n   at Microsoft.Extensions.Primitives.StringSegmentTest.StringSegment_ImplicitConvertToSpan() in /_/test/Microsoft.Extensions.Primitives.Tests/StringSegmentTest.cs:line 48\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3545","RelatedDescription":"Open issue \"Test failure: StringSegment_ImplicitConvertToSpan\" (#3545)"},{"Id":"360409773","IsPullRequest":false,"CreatedAt":"2018-09-20T15:22:42","Actor":"livarcocc","Number":"3537","RawContent":null,"Title":"SuppressStatusMessages(true) \"block\" ASP.NET Core Web App (Model-View-Controller) start","State":"closed","Body":"_From @BroderPeters on September 14, 2018 16:34_\n\n## Steps to reproduce\r\n\r\n1. Run `dotnet new mvc`.\r\n2. Add `.SuppressStatusMessages(true)` after `WebHost.CreateDefaultBuilder(args)` in Program.cs.\r\n3. Run `dotnet run`.\r\n\r\n## Expected  behavior\r\n\r\nDemo MVC project start without StatusMessage.\r\n\r\n## Actual behavior\r\n\r\n(First sentence says: The start settings from {filepath} are beeing used)\r\n```\r\nDie Starteinstellungen von C:\\Users\\user\\Desktop\\testweb\\Properties\\launchSettings.json werden verwendet.\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using 'C:\\Users\\user\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.\r\n```\r\nAfter this output nothing else happens.\r\n\r\nIf I open and start the project in Visual Studio, everthing works fine.\r\nIf I set `.SuppressStatusMessages(false)` `dotnet run` works as expected.\r\n\r\n## Environment data\r\n```\r\nPS C:\\Users\\user\\Desktop\\testweb> dotnet --info\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\n\n_Copied from original issue: dotnet/cli#10005_","Url":"https://github.com/aspnet/Home/issues/3537","RelatedDescription":"Closed issue \"SuppressStatusMessages(true) \"block\" ASP.NET Core Web App (Model-View-Controller) start\" (#3537)"},{"Id":"362135853","IsPullRequest":false,"CreatedAt":"2018-09-20T11:05:08","Actor":"kugarliyifan","Number":"3543","RawContent":null,"Title":"How can I get the Controller instance from HttpContext in asp.net core","State":"open","Body":"I want to get the Controller instance from HttpContext or HttpRequest in the Extension Methods like\r\n\r\npublic static returntype Getitem(this HttpRequest request,string name)\r\nor\r\npublic static returntype Getitem(this HttpContext request,string name)\r\n\r\nhow can I get it?","Url":"https://github.com/aspnet/Home/issues/3543","RelatedDescription":"Open issue \"How can I get the Controller instance from HttpContext in asp.net core\" (#3543)"},{"Id":"361954674","IsPullRequest":false,"CreatedAt":"2018-09-19T22:42:06","Actor":"muratg","Number":"3542","RawContent":null,"Title":"FlushAsync doesn't actually write data to the client?","State":"open","Body":"_From @drauch on Tuesday, 11 September 2018 10:39:35_\r\n\r\nI have a Razor view which (as a minimal repro sample) looks like this:\r\n\r\n    @{ var longStr = new string('x', 100 * 1024); /* more than 64KB */ }\r\n    ...\r\n    @functions { string Throw () { throw new Exception(); } }\r\n    ...\r\n    <p>@longStr</p>\r\n    @await FlushAsync()\r\n    <p>@Throw()</p>\r\n\r\nI expected to see many x on the client, instead I see a proper error page. How is this possible if `FlushAsync` already sent `longStr` to the client? Is the data still buffered somewhere on the server?\r\n\r\n_Copied from original issue: aspnet/KestrelHttpServer#2912_","Url":"https://github.com/aspnet/Home/issues/3542","RelatedDescription":"Open issue \"FlushAsync doesn't actually write data to the client?\" (#3542)"},{"Id":"361855923","IsPullRequest":false,"CreatedAt":"2018-09-19T17:44:50","Actor":"FastTracOnline","Number":"3541","RawContent":null,"Title":"Not an Issue, First Post.  Want to discuss AOP in Core","State":"open","Body":"Willing to contribute to discussion and/or maturation (coding) of Aspect Oriented Programming support in .Net Core.  Not sure what repository this would work best.\r\n\r\n40+ years developing software, coming out of my isolation :)","Url":"https://github.com/aspnet/Home/issues/3541","RelatedDescription":"Open issue \"Not an Issue, First Post.  Want to discuss AOP in Core\" (#3541)"},{"Id":"361831434","IsPullRequest":false,"CreatedAt":"2018-09-19T16:35:11","Actor":"Eilon","Number":"3540","RawContent":null,"Title":"Random: The antiforgery token could not be decrypted. ","State":"open","Body":"_From @zulander1 on Tuesday, 18 September 2018 23:44:52_\r\n\r\n# Issue Title\r\nHello,\r\n\r\nWe are getting random: The antiforgery token could not be decrypted. \r\n\r\nSite is running on IIS on Windows 2016, the authentication is Azure AD, Application in running on NET CORE 2.1.4.  No error generated on the development site.\r\n\r\nI am not too sure where to start... \r\nThank's\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgery[7]\r\n      An exception was thrown while deserializing the token.\r\nMicrosoft.AspNetCore.Antiforgery.AntiforgeryValidationException: The antiforgery token could not be decrypted. ---> System.Security.Cryptography.CryptographicException: The key {9009f561-0974-426e-8d3a-00fb5ce76e95} was not found in the key ring.\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)\r\n   at Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgeryTokenSerializer.Deserialize(String serializedToken)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgeryTokenSerializer.Deserialize(String serializedToken)\r\n   at Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgery.GetCookieTokenDoesNotThrow(HttpContext httpContext)\r\n ```\r\n\r\n\r\n_Copied from original issue: dotnet/core#1947_","Url":"https://github.com/aspnet/Home/issues/3540","RelatedDescription":"Open issue \"Random: The antiforgery token could not be decrypted. \" (#3540)"},{"Id":"361550042","IsPullRequest":false,"CreatedAt":"2018-09-19T16:21:53","Actor":"jjxtra","Number":"3539","RawContent":null,"Title":"IIS web socket broken with asp.net core","State":"closed","Body":"Let me preface by saying that bypassing IIS and connecting directly to Kestrel works fine.\r\n\r\nI am using IIS with asp.net core. This is Windows Server 2012 x64 r2 and .NET core 2.1.402 self contained x64 application. I am using Microsoft.AspNetCore.WebSockets (https://github.com/aspnet/WebSockets). I've cloned the source from github and added logging for retrieving the Sec-WebSocket-Key header. I've also set IIS up to log the Sec-WebSocket-Key header as well.\r\n\r\nIn my IIS logs, I see the correct Sec-WebSocket-Key value for each request, even when using cloud flare or other proxies. In my kestrel logs, the Sec-WebSocket-Key has been changed to a completely different value. Is there a way to prevent IIS from changing this header that it sends to the asp.net core module? I have the IIS web socket module installed in the server roles setup. Or is this a bug in IIS? ws and wss have same behavior.\r\n\r\nHere is my logging, changed by modifying https://github.com/aspnet/WebSockets/blob/master/src/Microsoft.AspNetCore.WebSockets/Internal/HandshakeHelpers.cs.\r\n\r\n```\r\n        public static string CreateResponseKey(string requestKey)\r\n        {\r\n            // \"The value of this header field is constructed by concatenating /key/, defined above in step 4\r\n            // in Section 4.2.2, with the string \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\", taking the SHA-1 hash of\r\n            // this concatenated value to obtain a 20-byte value and base64-encoding\"\r\n            // https://tools.ietf.org/html/rfc6455#section-4.2.2\r\n\r\n            if (requestKey == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(requestKey));\r\n            }\r\n            requestKey = requestKey.Trim();\r\n            using (var algorithm = SHA1.Create())\r\n            {\r\n                string merged = requestKey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\r\n                byte[] mergedBytes = Encoding.UTF8.GetBytes(merged);\r\n                byte[] hashedBytes = algorithm.ComputeHash(mergedBytes);\r\n                string hashedKey = Convert.ToBase64String(hashedBytes);\r\n\r\n                // This is where the key differs from the correct key logged in the IIS logger settings\r\n                Logger.Write(LogLevel.Warn, \"Web socket: {0}, {1}\", requestKey, hashedKey);\r\n                return hashedKey;\r\n            }\r\n        }\r\n```","Url":"https://github.com/aspnet/Home/issues/3539","RelatedDescription":"Closed issue \"IIS web socket broken with asp.net core\" (#3539)"},{"Id":"360789915","IsPullRequest":false,"CreatedAt":"2018-09-17T18:38:04","Actor":"jatingandhi28","Number":"3538","RawContent":null,"Title":"ClientId is used by default instead of Audience Id in file AzureAdAuthenticationBuilderExtensions.cs in .Net core 2.0","State":"closed","Body":"\r\nFile name - AzureAdAuthenticationBuilderExtensions.cs\r\n\r\n            public void Configure(string name, JwtBearerOptions options)\r\n            {\r\n                options.Audience = _azureOptions.ClientId;\r\n                options.Authority = $\"{_azureOptions.Instance}{_azureOptions.TenantId}\";\r\n            }\r\n\r\nHowever It should be \r\n\r\n            public void Configure(string name, JwtBearerOptions options)\r\n            {\r\n                options.Audience = _azureOptions.AudienceId;\r\n                options.Authority = $\"{_azureOptions.Instance}{_azureOptions.TenantId}\";\r\n            }","Url":"https://github.com/aspnet/Home/issues/3538","RelatedDescription":"Closed issue \"ClientId is used by default instead of Audience Id in file AzureAdAuthenticationBuilderExtensions.cs in .Net core 2.0\" (#3538)"},{"Id":"360158447","IsPullRequest":false,"CreatedAt":"2018-09-16T00:14:53","Actor":"muzzammilhussain","Number":"3535","RawContent":null,"Title":"DateTime.Now.UTC Bug","State":"closed","Body":"On Windows Based Machine , When i am using DateTime.Now.UTC it gives me UTC time as soon as I use this on Ubuntu Machine it gives Ubuntu Time instead of UTC time.\r\n\r\nOn ubuntu the behavior of DateTime.Now= DateTime.UtcNow\r\n\r\nInt32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;\r\n","Url":"https://github.com/aspnet/Home/issues/3535","RelatedDescription":"Closed issue \"DateTime.Now.UTC Bug\" (#3535)"},{"Id":"360236251","IsPullRequest":false,"CreatedAt":"2018-09-14T09:53:43","Actor":"oerodriguezn","Number":"3536","RawContent":null,"Title":"Upgrade Microsoft.AspNetCore.DataProtection.Redis to use Redis.StackExchange 2.0","State":"open","Body":"Please update Microsoft.AspNetCore.DataProtection.Redis to use Redis.StackExchange 2.0 where there is no more a StackExchange.Redis.StrongName. \r\n\r\nhttps://stackexchange.github.io/StackExchange.Redis/ReleaseNotes","Url":"https://github.com/aspnet/Home/issues/3536","RelatedDescription":"Open issue \"Upgrade Microsoft.AspNetCore.DataProtection.Redis to use Redis.StackExchange 2.0\" (#3536)"},{"Id":"359391258","IsPullRequest":false,"CreatedAt":"2018-09-13T19:07:09","Actor":"ld0614","Number":"3531","RawContent":null,"Title":"Azure App Service fails to load .net Core application after upgrade to 2.1.4","State":"closed","Body":"After upgrading the .net Core nuget packages last night from 2.1.3 to 2.1.4 to mitigate the published security issues, I attempted to push these to an Azure App Service.  \r\n\r\nHowever I get the following error:\r\n![image](https://user-images.githubusercontent.com/20439950/45415325-51868780-b675-11e8-89c4-e574bcbeed7e.png)\r\n\r\ndotnet --info of Azure App Service\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x86\r\n Base Path:   D:\\Program Files (x86)\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  1.1.10 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  2.1.101 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  2.1.301 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  2.1.401 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\ndotnet --info of development machine (where it works)\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nThe packaged deployed is using the standard Azure DevOps (VSTS) Build and publish tasks.  My guess is that Azure App Service requires the latest patches to support the updated nuget packages, is this correct?\r\n\r\nIs it possible to use a dedicated version of .net core on an Azure app service by using portable binary compliation?\r\n\r\nIs there a clear guide on application lifecycles in respect to .net core packages and versions?  I've had a look but wasn't able to find anything describing when nuget packages should be updated vs the runtime they run on etc.  \r\n","Url":"https://github.com/aspnet/Home/issues/3531","RelatedDescription":"Closed issue \"Azure App Service fails to load .net Core application after upgrade to 2.1.4\" (#3531)"},{"Id":"359469476","IsPullRequest":false,"CreatedAt":"2018-09-12T16:46:29","Actor":"lblima","Number":"3532","RawContent":null,"Title":"Scaffold identity into an MVC project with authorization using SDK 2.1.4 fail","State":"closed","Body":"Hi, after install SDK 2.1.4 I cannot run scafolding identity (instructions here: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.1&tabs=visual-studio)\r\n\r\nAfter run: dotnet tool install -g dotnet-aspnet-codegenerator\r\n\r\nAnd: \r\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design\r\ndotnet restore\r\n\r\nI've tried to run this: \r\n\r\ndotnet aspnet-codegenerator identity -dc MyWeb.Data.ApplicationDbContext --files \"Account.Register;Account.Login;Account.Logout\"\r\n\r\nBut it doesn't work, I got this message:\r\n\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.4' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      C:\\Program Files\\dotnet\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n  - The following versions are installed:\r\n      1.0.5 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n      1.1.2 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n      2.0.9 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n      2.1.3 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n----------------------------------------\r\n\r\n**dotnet --info:**\r\n\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download","Url":"https://github.com/aspnet/Home/issues/3532","RelatedDescription":"Closed issue \"Scaffold identity into an MVC project with authorization using SDK 2.1.4 fail\" (#3532)"},{"Id":"359556933","IsPullRequest":false,"CreatedAt":"2018-09-12T16:45:14","Actor":"karelz","Number":"3533","RawContent":null,"Title":"IFormFile is always null when using [ApiController] Attribute in .Net Core 2.1","State":"closed","Body":"_From @skamal-dev on September 12, 2018 13:36_\n\nNot sure why this has not been documented or its a bug but whenever we use ApiController attribute in .Net Core 2.1 version, and use the api method signature as ;\r\n```c#\r\n[Route(\"api/[controller]\")]\r\n [ApiController]\r\n public class UploadFileController : ControllerBase\r\n {\r\n    [HttpPost]\r\n    public async Task<IActionResult> Post([FromForm] IFormFile file)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nWhenever we send request from client the parameter \"file\" is always null, though the Request.Form.Files do contain the parameter details.\r\n\r\nMoment I removed [ApiControlller] and send request from the client, I can see the \"file\" parameter having values.\n\n_Copied from original issue: dotnet/corefx#32256_","Url":"https://github.com/aspnet/Home/issues/3533","RelatedDescription":"Closed issue \"IFormFile is always null when using [ApiController] Attribute in .Net Core 2.1\" (#3533)"},{"Id":"359165121","IsPullRequest":false,"CreatedAt":"2018-09-11T23:21:26","Actor":"aspnet-hello","Number":"3530","RawContent":null,"Title":"Test failure: CanValidateMixDataAnnotations","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=550828&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nExpected: DataAnnotation validation failed for members Dep1, Dep2 with the error 'Dep1 != Dep2'.\r\nDataAnnotation validation failed for members Required with the error 'The Required field is required.'.\r\nDataAnnotation validation failed for members StringLength with the error 'Too long.'.\r\nDataAnnotation validation failed for members IntRange with the error 'Out of range.'.\r\nDataAnnotation validation failed for members Custom with the error 'The field Custom is invalid.'. - I don't want to go to nowhere!\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.Extensions.Options.Tests.OptionsBuilderTest.ValidateFailure[TOptions](OptionsValidationException e, String name, String[] errors) in /_/test/Microsoft.Extensions.Options.Test/OptionsBuilderTest.cs:line 399\r\n   at Microsoft.Extensions.Options.Tests.OptionsBuilderTest.CanValidateMixDataAnnotations() in /_/test/Microsoft.Extensions.Options.Test/OptionsBuilderTest.cs:line 616\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3530","RelatedDescription":"Closed issue \"Test failure: CanValidateMixDataAnnotations\" (#3530)"},{"Id":"359109489","IsPullRequest":false,"CreatedAt":"2018-09-11T15:49:51","Actor":"jimmy3912msncom","Number":"3529","RawContent":null,"Title":"EnableRewind for HttpResponse similar to HttpRequest","State":"open","Body":"   1. Description of the problem: EnableRewind for HttpResponse similar to HttpRequest\r\nThis is more of a feature request than anything. I have need to log the response body but this requires the need for a rewindable response stream. HttpRequest has the extension method defined: BufferingHelper.EnableRewind for HttpRequest. The ask is for a similar extension method for HttpResponse so we don't have to swap out the streams manually ourselves.\r\n   2. The version of `Microsoft.AspNetCore.All`: 2.1.2\r\n   3. The output of `dotnet --info`\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.302\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download","Url":"https://github.com/aspnet/Home/issues/3529","RelatedDescription":"Open issue \"EnableRewind for HttpResponse similar to HttpRequest\" (#3529)"},{"Id":"359079542","IsPullRequest":false,"CreatedAt":"2018-09-11T14:42:00","Actor":"SolalPirelli","Number":"3528","RawContent":null,"Title":"IFormFileCollection has no documentation","State":"open","Body":"There is no XML doc for `IFormFileCollection`, so I had to look up the source code to check whether the indexer returns `null` or throws an exception when the file doesn't exist. Not a huge deal, just a small annoyance. :-)","Url":"https://github.com/aspnet/Home/issues/3528","RelatedDescription":"Open issue \"IFormFileCollection has no documentation\" (#3528)"}],"ResultType":"GitHubIssue"},"Mvc-Issues":{"Issues":[{"Id":"363402628","IsPullRequest":true,"CreatedAt":"2018-09-25T04:09:00","Actor":"rynowak","Number":"8500","RawContent":null,"Title":"Add LinkGenerator extensions for MVC","State":"open","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8500","RelatedDescription":"Open PR \"Add LinkGenerator extensions for MVC\" (#8500)"},{"Id":"363394297","IsPullRequest":false,"CreatedAt":"2018-09-25T03:14:27","Actor":"saibaskaran57","Number":"8499","RawContent":null,"Title":"XML Model State Validation","State":"open","Body":"#### Feature Request\r\n\r\n#### Description of the problem:\r\nOn JSON content-negotiation formatting, all exception are wrapped into a ModelState validation which provides flexibility for each controllers to decide the handling on the bad input models. \r\n\r\n#### Steps to reproduce\r\n1) Configure XML Formatters for content-negotiation on .NET Core Web API\r\n```\r\nbuilder.AddMvcOptions(options =>\r\n{\r\n       options.InputFormatters.Add(new XmlSerializerInputFormatter(options));\r\n       options.OutputFormatters.Add(new XmlSerializerOutputFormatter());\r\n});\r\n```\r\n\r\n2) Submit an invalid XML input(e.g. invalid XML root)\r\n\r\n**C# Model**\r\n```\r\n[DataContract(Namespace = \"\")]\r\n[XmlRoot(\"Request\")]\r\npublic class Request\r\n{\r\n        [Required]\r\n        [DataMember]\r\n        public string Attribute{ get; set; }\r\n}\r\n```\r\n**Client Input(take note on XML root)**\r\n```\r\n<Request1>\r\n <Attribute>attribute1</Attribute>\t\r\n<Request1>\r\n```\r\n3) XML formatter will throw **InvalidOperationException** which does not propagate down to filters/controllers and Exception Middlewares will catch the exceptions with a message - _There is an error in XML document_\r\n\r\n#### Question:\r\nAre there any plans in roadmap to have the similar handling for ModelState wrapping on XML Serialization?\r\n\r\n\r\n","Url":"https://github.com/aspnet/Mvc/issues/8499","RelatedDescription":"Open issue \"XML Model State Validation\" (#8499)"},{"Id":"363309712","IsPullRequest":true,"CreatedAt":"2018-09-24T20:34:32","Actor":"dotnet-maestro-bot","Number":"8498","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @pranavkm\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8498","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8498)"},{"Id":"363253075","IsPullRequest":true,"CreatedAt":"2018-09-24T20:01:48","Actor":"pranavkm","Number":"8497","RawContent":null,"Title":"Invoke FlushAsync before disposing the HttpResponseWriter in JsonResultExecutor","State":"closed","Body":"Fixes #8486","Url":"https://github.com/aspnet/Mvc/pull/8497","RelatedDescription":"Closed or merged PR \"Invoke FlushAsync before disposing the HttpResponseWriter in JsonResultExecutor\" (#8497)"},{"Id":"362277608","IsPullRequest":false,"CreatedAt":"2018-09-24T20:01:13","Actor":"Tratcher","Number":"8486","RawContent":null,"Title":"JsonResult causes thread pool exhaustion via synchronous flushes","State":"closed","Body":"_From @lorenzos70 on September 16, 2018 11:35_\n\nHello,\r\n\r\nI have a .net 4.6.2 project (for my web apis) that is referencing, among other libraries, Microsoft.AspNetCore 2.1.3. I recently upgraded it from version 1.1. Since the upgrade I experienced the following issues on my production win 2016 server:\r\n \r\n- my api logs often show the following messages: \r\n    1. Connection id \"\"xxxxxx\"\", Request id \"\"yyyyyy\"\": the connection was closed because the response was not read by the client at the specified minimum data rate\r\n            \r\n   2. the request timed out because it was not sent by the client at a minimum of 240 bytes/second\".\r\n           \r\n   3. [Warning] Connection processing ended abnormally.\r\n            Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted\r\n            at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n           at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n           at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n           at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n           at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol. \r\n           <ProcessRequests>d__188`1.MoveNext()--- End of stack trace from previous location where \r\n          exception was thrown ---   at \r\n         System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at \r\n         System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task \r\n         task)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol. \r\n        <ProcessRequestsAsync>d__187`1.MoveNext()\r\n\r\n- The apis become unresponsive (they are hosted on iis 10 on a windows 2016 server)\r\n- IIS logs show, at the same time, 502 errors while trying to call the api endoints \r\n- I also noticed heavy peaks of the CPU.\r\n\r\nRemarks: the web api load has not increased and there haven't been any other major changes, apart from the upgrade of the  Microsoft.AspNetCore that I mentioned above, so I am still trying to figure out what the problem could be. Any advice that could point me to the right direction?\r\nThanks\r\nLorenzo\n\n_Copied from original issue: aspnet/KestrelHttpServer#2936_","Url":"https://github.com/aspnet/Mvc/issues/8486","RelatedDescription":"Closed issue \"JsonResult causes thread pool exhaustion via synchronous flushes\" (#8486)"},{"Id":"363229186","IsPullRequest":false,"CreatedAt":"2018-09-24T16:46:22","Actor":"joetherod","Number":"8496","RawContent":null,"Title":"Memory Cache Limits","State":"open","Body":"In .NET 4.0 we have the ability to set memory limits as below.\r\n```xml\r\n<system.runtime.caching>\r\n        <memoryCache>\r\n            <namedCaches>\r\n                <add name=\"Default\" cacheMemoryLimitMegabytes=\"0\" physicalMemoryLimitPercentage=\"50\" />\r\n            </namedCaches>\r\n        </memoryCache>\r\n    </system.runtime.caching>\r\n```\r\n\r\nIn core, in order to do limits, you have to set the size of the object you are inserting, then you can set the SizeLimit. But, how are you suppose to get the size of each entry that is fast and efficient? In 4.0 it would manage the available memory for the app and for the cache based on a percentage of the available memory on the server. Can this be done for core when you have containers running on windows and linux. There are also other features that were not ported over, like getting all keys of the objects in memory. This limits the use of using In Memory Cache in core. Can it be extended? The use of in memory cache is the speed since it is by reference. Using other stores requires serialization, and for my case that is too expensive on the cpu. ","Url":"https://github.com/aspnet/Mvc/issues/8496","RelatedDescription":"Open issue \"Memory Cache Limits\" (#8496)"},{"Id":"362801457","IsPullRequest":false,"CreatedAt":"2018-09-24T16:44:33","Actor":"joetherod","Number":"8492","RawContent":null,"Title":"Batch Process - Sql Connection Failures","State":"closed","Body":"I ported over a .NET Windows Service to MVC Core using HostedService. It is a batch process that runs daily and does a lot of reads against SQL and MongoDB. SQL is the painstaken issue. Declared service that does the sql calls as singletons, container scoped, thread local with no avail. The process also spins off about 500 threads. I had no issues with in .NET 4.5 running on windows. Now, it consumes all the memory and high CPU and I cant around the SQL connection issues. Its able to connect many times and then it just dies on 2 issues,\r\n\r\n\"BeginExecuteReader requires an open and available Connection. The connection's current state: Broken.\"\r\nor\r\nUnable to connect to sql server. (Connection pool exhausted)\r\n\r\nThe sql calls are Dapper based, wrapper around ADO.NET.\r\nCore seems to issues with managing sql connections and memory leaks.\r\nTried so many combinations of registrations and limiting the number of uses of the service that has the sql connection. No luck.\r\n\r\nI am using the latest .NET Core 2.1.","Url":"https://github.com/aspnet/Mvc/issues/8492","RelatedDescription":"Closed issue \"Batch Process - Sql Connection Failures\" (#8492)"},{"Id":"362898635","IsPullRequest":true,"CreatedAt":"2018-09-22T23:37:17","Actor":"dotnet-maestro-bot","Number":"8495","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @rynowak\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8495","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8495)"},{"Id":"362896242","IsPullRequest":true,"CreatedAt":"2018-09-22T22:47:39","Actor":"rynowak","Number":"8494","RawContent":null,"Title":"React to Routing LinkGenerator changes","State":"closed","Body":"FYI only","Url":"https://github.com/aspnet/Mvc/pull/8494","RelatedDescription":"Closed or merged PR \"React to Routing LinkGenerator changes\" (#8494)"},{"Id":"362824293","IsPullRequest":false,"CreatedAt":"2018-09-22T04:04:16","Actor":"wangpengxpy","Number":"8493","RawContent":null,"Title":"Unable to load css/js when created razor page web application","State":"open","Body":"Is this a Bug?I'm not sure :\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n\r\nhttps://github.com/wangpengxpy/RazorPageDemo-UnknownBug\r\n\r\n#### Description of the problem:\r\n（1）After I created razor page web application,start it. the follow\r\n\r\n![image](https://user-images.githubusercontent.com/12961992/45913027-d20b6c00-be5d-11e8-85eb-5f47d01ac5ce.png)\r\n\r\n（2）I found project file【RazorPageDemo.csproj】,the follow\r\n\r\n![image](https://user-images.githubusercontent.com/12961992/45913087-ea2fbb00-be5e-11e8-92b1-d06f31a7543f.png)\r\n\r\nIt didn't  add version the aboved Microsoft.AspNetCore.App，after I added version.it's work\r\n\r\n![image](https://user-images.githubusercontent.com/12961992/45913098-ff0c4e80-be5e-11e8-81d9-07889e426b96.png)\r\n![image](https://user-images.githubusercontent.com/12961992/45913102-1cd9b380-be5f-11e8-9d45-1f95d2033c1f.png)\r\n\r\nI'm  not sure why when adding a  razor page project,the Microsoft.AspNetCore.App did't add version in the project file.It caused the failure to load css/js。\r\n\r\n#### Version  Microsoft.AspNetCore.App: 2.1.1\r\n","Url":"https://github.com/aspnet/Mvc/issues/8493","RelatedDescription":"Open issue \"Unable to load css/js when created razor page web application\" (#8493)"},{"Id":"362792275","IsPullRequest":true,"CreatedAt":"2018-09-21T22:40:50","Actor":"dotnet-maestro-bot","Number":"8491","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @dougbu\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8491","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8491)"},{"Id":"362721927","IsPullRequest":true,"CreatedAt":"2018-09-21T21:49:26","Actor":"dougbu","Number":"8489","RawContent":null,"Title":"Change `CollectionModelBinder` and `ComplexTypeModelBinder` to enforce `[BindRequired]`","State":"closed","Body":"- #8180\r\n- add an error when binding fails for top-level model\r\n  - same case as when MVC creates \"default\" / empty model i.e. `ParameterBinder` can't detect this\r\n- update `CollectionModelBinder` subclasses and the various providers as well\r\n- controlled by existing `MvcOptions.AllowValidatingTopLevelNodes` option\r\n\r\nsmaller issue:\r\n- change `ModelBinding_MissingBindRequiredMember` resource to mention parameters too","Url":"https://github.com/aspnet/Mvc/pull/8489","RelatedDescription":"Closed or merged PR \"Change `CollectionModelBinder` and `ComplexTypeModelBinder` to enforce `[BindRequired]`\" (#8489)"},{"Id":"362755016","IsPullRequest":true,"CreatedAt":"2018-09-21T19:59:24","Actor":"pranavkm","Number":"8490","RawContent":null,"Title":"Include the response type in ProducesResponseType for client errors","State":"open","Body":"* Refactor ActualApiResponseMetadata discovery in to a separate more manageable type\r\n* Annotate action result ctors and helper methods that specify the \"object\" value with attribute\r\n* Modify the discovery of parameters to match ActionResultObjectValueAttribute and ActionResultStatusCodeAttribute by name\r\n  to allow users to write and annotate custom helper methods and action results, a la NotNullAttribute.\r\n\r\nFixes #8345","Url":"https://github.com/aspnet/Mvc/pull/8490","RelatedDescription":"Open PR \"Include the response type in ProducesResponseType for client errors\" (#8490)"},{"Id":"362584610","IsPullRequest":false,"CreatedAt":"2018-09-21T18:41:06","Actor":"aspnet-hello","Number":"8487","RawContent":null,"Title":"Test failure: DisplayTextFor_ReturnsSimpleDisplayText_IfSetAndValueNonNull","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=558257&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.BadImageFormatException : Index not found. (Exception from HRESULT: 0x80131124)\r\n   at System.RuntimeTypeHandle.ConstructName(RuntimeTypeHandle handle, TypeNameFormatFlags formatFlags, StringHandleOnStack retString)\r\n   at System.RuntimeType.RuntimeTypeCache.ConstructName(String& name, TypeNameFormatFlags formatFlags)\r\n   at Castle.DynamicProxy.Generators.BaseProxyGenerator.ObtainProxyType(CacheKey cacheKey, Func`3 factory)\r\n   at Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(Type[] interfaces, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, Object[] constructorArguments, IInterceptor[] interceptors)\r\n   at Moq.Proxy.CastleProxyFactory.CreateProxy(Type mockType, ICallInterceptor interceptor, Type[] interfaces, Object[] arguments)\r\n   at Moq.Mock`1.<InitializeInstance>b__20_0()\r\n   at Moq.PexProtector.Invoke(Action action)\r\n   at Moq.Mock`1.InitializeInstance()\r\n   at Moq.Mock`1.OnGetObject()\r\n   at Moq.Mock.GetObject()\r\n   at Moq.Mock.get_Object()\r\n   at Moq.Mock`1.get_Object()\r\n   at Moq.Mocks.CreateMocks[T]()+MoveNext()\r\n   at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Boolean& found)\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n   at System.Linq.EnumerableExecutor`1.Execute()\r\n   at System.Linq.EnumerableQuery`1.System.Linq.IQueryProvider.Execute[TElement](Expression expression)\r\n   at System.Linq.Queryable.First[TSource](IQueryable`1 source)\r\n   at Moq.Linq.MockQueryable`1.Execute[TResult](Expression expression)\r\n   at System.Linq.Queryable.First[TSource](IQueryable`1 source)\r\n   at Moq.Mock.Of[T]()\r\n   at Microsoft.AspNetCore.Mvc.Rendering.DefaultTemplatesUtilities.GetHtmlHelper[TModel](ViewDataDictionary`1 viewData, IUrlHelper urlHelper, ICompositeViewEngine viewEngine, IModelMetadataProvider provider, IStringLocalizerFactory localizerFactory, Func`2 innerHelperWrapper, IHtmlGenerator htmlGenerator, String idAttributeDotReplacement) in /_/test/Microsoft.AspNetCore.Mvc.ViewFeatures.Test/Rendering/DefaultTemplatesUtilities.cs:line 296\r\n   at Microsoft.AspNetCore.Mvc.Rendering.DefaultTemplatesUtilities.GetHtmlHelper[TModel](TModel model, IUrlHelper urlHelper, ICompositeViewEngine viewEngine, IModelMetadataProvider provider, IStringLocalizerFactory localizerFactory, Func`2 innerHelperWrapper) in /_/test/Microsoft.AspNetCore.Mvc.ViewFeatures.Test/Rendering/DefaultTemplatesUtilities.cs:line 213\r\n   at Microsoft.AspNetCore.Mvc.Rendering.DefaultTemplatesUtilities.GetHtmlHelper[TModel](TModel model, IUrlHelper urlHelper, ICompositeViewEngine viewEngine, IModelMetadataProvider provider, IStringLocalizerFactory localizerFactory) in /_/test/Microsoft.AspNetCore.Mvc.ViewFeatures.Test/Rendering/DefaultTemplatesUtilities.cs:line 199\r\n   at Microsoft.AspNetCore.Mvc.Rendering.DefaultTemplatesUtilities.GetHtmlHelper[TModel](TModel model, IModelMetadataProvider provider) in /_/test/Microsoft.AspNetCore.Mvc.ViewFeatures.Test/Rendering/DefaultTemplatesUtilities.cs:line 162\r\n   at Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayTextTest.DisplayTextFor_ReturnsSimpleDisplayText_IfSetAndValueNonNull() in /_/test/Microsoft.AspNetCore.Mvc.ViewFeatures.Test/Rendering/HtmlHelperDisplayTextTest.cs:line 163\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Mvc/issues/8487","RelatedDescription":"Closed issue \"Test failure: DisplayTextFor_ReturnsSimpleDisplayText_IfSetAndValueNonNull\" (#8487)"},{"Id":"361868598","IsPullRequest":true,"CreatedAt":"2018-09-21T18:14:43","Actor":"dougbu","Number":"8476","RawContent":null,"Title":"Remove batching requirements placed on code and document generator providers","State":"closed","Body":"- #8419\r\n- perform batching and `@(ServiceFileReference)` and `@(Compile)` additions in common code\r\n  - take advantage of new simplicity in `DefaultDocumentGenerator` target\r\n- add metadata serialization / deserialization in support of passing items into `<MSBuild />`\r\n  - also ensure metadata values are escaped before calling `ITaskItem.SetMetadata(...)`\r\n- correct typos in Microsoft.Extensions.ApiDescription.Client.* e.g. in comments and metadata names\r\n- move last remaining `GenerationTasks` file\r\n\r\nnits:\r\n- combine `_ServiceProjectReferenceGenerator_Restore` and `_ServiceProjectReferenceGenerator_Build` targets\r\n- remove unused `buildMultiTargeting` targets\r\n- remove qualification of metadata listed in an `<ItemDefinitionGroup />`; will always exist\r\n- add / remove a few `Condition`s that were missing / redundant\r\n- move properties users won't normally set to Microsoft.Extensions.ApiDescription.Client.targets\r\n- shorten lines in MSBuild files","Url":"https://github.com/aspnet/Mvc/pull/8476","RelatedDescription":"Closed or merged PR \"Remove batching requirements placed on code and document generator providers\" (#8476)"},{"Id":"362693911","IsPullRequest":false,"CreatedAt":"2018-09-21T16:48:48","Actor":"AlseinX","Number":"8488","RawContent":null,"Title":"Move Microsoft.AspNetCore.Mvc.ApplicationParts to Microsoft.Extensions.somewhere","State":"closed","Body":"When I am writing my projects, things that I have met are like these:\r\nI need type scanning and attribute based configuration for modules.\r\nThere is an application part manager in Microsoft.AspNetCore.Mvc.ApplicationParts which is well featured for the requirement.\r\nIt is only in Mvc so I cannot simply use it for other scenes.\r\nI have to create my own for a unified module management of my projects.\r\nI am using Mvc so I need to create an integration from my own implementation to `Microsoft.AspNetCore.Mvc.ApplicationParts`\r\nWhat a bad practice.\r\n\r\nThe type scanning things are compatible with most projects that are managed by IoC containers. It is reasonable to move it elsewhere out of `AspNetCore`, making it a mainstream standard implementation of type scanning things, just like `System.IServiceProvider` and `Microsoft.Extensions.DependencyInjection` for dependency injection things.\r\nThus there would be a unified way for type scanning no matter Mvc is used.\r\nFor example, the SignalR hubs would be able to be scanned and the routing would be configured by attributes, just like Mvc controllers, and the user customized services that matches a certain convention would be auto registered, without any other external redundant scanning.","Url":"https://github.com/aspnet/Mvc/issues/8488","RelatedDescription":"Closed issue \"Move Microsoft.AspNetCore.Mvc.ApplicationParts to Microsoft.Extensions.somewhere\" (#8488)"},{"Id":"362210204","IsPullRequest":false,"CreatedAt":"2018-09-20T21:03:33","Actor":"YZahringer","Number":"8485","RawContent":null,"Title":"Different JsonSerializerSettings per Controller","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\nFeature request\r\n\r\n#### Description of the problem:\r\nHow to use a different JsonSerializerSettings on different controllers? Or how to overwrite the default settings for a Controller?\r\n\r\nI have a Controller that is more \"strict\":\r\n````cs\r\nTypeNameHandling = TypeNameHandling.All;\r\nNullValueHandling = NullValueHandling.Include;\r\nDefaultValueHandling = DefaultValueHandling.Include;\r\nMissingMemberHandling = MissingMemberHandling.Error;\r\n````\r\n\r\nOther controllers are not \"strict\" and work with the default settings.\r\n\r\nThe only solution is to create a custom JsonInputFormatter/JsonOutputFormatter and put it a specific SupportedMediaType?","Url":"https://github.com/aspnet/Mvc/issues/8485","RelatedDescription":"Closed issue \"Different JsonSerializerSettings per Controller\" (#8485)"},{"Id":"361934949","IsPullRequest":true,"CreatedAt":"2018-09-20T18:15:19","Actor":"dotnet-maestro-bot","Number":"8480","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @pranavkm\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8480","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8480)"},{"Id":"362018583","IsPullRequest":true,"CreatedAt":"2018-09-20T17:15:51","Actor":"rynowak","Number":"8482","RawContent":null,"Title":"Reaction PR from routing rename","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8482","RelatedDescription":"Closed or merged PR \"Reaction PR from routing rename\" (#8482)"},{"Id":"361960142","IsPullRequest":true,"CreatedAt":"2018-09-20T16:42:54","Actor":"pranavkm","Number":"8481","RawContent":null,"Title":"Move IClientErrorActionResult to 4xx status code results","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8481","RelatedDescription":"Closed or merged PR \"Move IClientErrorActionResult to 4xx status code results\" (#8481)"},{"Id":"362151239","IsPullRequest":false,"CreatedAt":"2018-09-20T11:51:00","Actor":"KLuuKer","Number":"8484","RawContent":null,"Title":"Querystring with empty key will fill every parameter with the specified value","State":"open","Body":"#### Is this a Bug or Feature request?: BUG\r\n\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\nusing the query with a empty key (\"?=bug\") will result in all* parameters being filled with the value (\"bug\") specified\r\n[https://github.com/KLuuKer/bug-url-query-param](https://github.com/KLuuKer/bug-url-query-param)\r\n\r\n#### Description of the problem:\r\nwhen sending the following url **?=bug** every parameter will get filled with the string \"bug\" (except those with the FromQuery attribute that has the Name= property specified)\r\n\r\n![bug example](https://github.com/KLuuKer/bug-url-query-param/raw/master/example-bug.png)\r\n\r\n#### Version of `Microsoft.AspNetCore.App`: \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n<TargetFramework>netcoreapp2.1</TargetFramework>\r\n<PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n```\r\nhappening on production box with 'hosting runtime bundle v2.1.4'\r\nand when running debug with visual studio 15.9.0 preview 2\r\n","Url":"https://github.com/aspnet/Mvc/issues/8484","RelatedDescription":"Open issue \"Querystring with empty key will fill every parameter with the specified value\" (#8484)"},{"Id":"362081582","IsPullRequest":false,"CreatedAt":"2018-09-20T08:48:09","Actor":"drauch","Number":"8483","RawContent":null,"Title":"Verbose messages in build log about System.ComponentModel.Annotations","State":"open","Body":"One of our dependencies references System.ComponentModel.Annotations. ASP.NET Core references it too (via a NuGet package). Therefore we receive a LOT of the following build messages when executing our build:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets(41,5): message NETSDK1041: Encountered conflict between 'Platform:System.ComponentModel.Annotations.dll' and 'CopyLocal:C:\\Users\\<myuser>\\.nuget\\packages\\system.componentmodel.annotations\\4.5.0\\lib\\net461\\System.ComponentModel.Annotations.dll'.  NETSDK1033: Choosing 'CopyLocal:C:\\Users\\<myuser>\\.nuget\\packages\\system.componentmodel.annotations\\4.5.0\\lib\\net461\\System.ComponentModel.Annotations.dll' because AssemblyVersion '4.2.1.0' is greater than '4.0.10.0'. [C:\\Development\\<ourrepo>\\src\\<ourproj>\\<ourproj>.csproj]\r\n\r\nAre those ok? Can we safely ignore them? Why are they printed out in non-verbose mode? Should this be moved to verbose mode? It's irritating ;-)","Url":"https://github.com/aspnet/Mvc/issues/8483","RelatedDescription":"Open issue \"Verbose messages in build log about System.ComponentModel.Annotations\" (#8483)"},{"Id":"361438738","IsPullRequest":true,"CreatedAt":"2018-09-19T19:51:14","Actor":"pranavkm","Number":"8473","RawContent":null,"Title":"Allow Implicit 200 status codes to match Ok result","State":"closed","Body":"Fixes https://github.com/aspnet/Mvc/issues/8472","Url":"https://github.com/aspnet/Mvc/pull/8473","RelatedDescription":"Closed or merged PR \"Allow Implicit 200 status codes to match Ok result\" (#8473)"},{"Id":"361436078","IsPullRequest":false,"CreatedAt":"2018-09-19T19:51:14","Actor":"pranavkm","Number":"8472","RawContent":null,"Title":"ApiConventionAnalyzer warns when Ok Action result is returned from action with implicit 200 status code","State":"closed","Body":"![1](https://user-images.githubusercontent.com/174281/45709642-55188380-bb39-11e8-9179-b8edb2341aaf.jpg)\r\n","Url":"https://github.com/aspnet/Mvc/issues/8472","RelatedDescription":"Closed issue \"ApiConventionAnalyzer warns when Ok Action result is returned from action with implicit 200 status code\" (#8472)"},{"Id":"361885248","IsPullRequest":false,"CreatedAt":"2018-09-19T19:02:01","Actor":"dougbu","Number":"8479","RawContent":null,"Title":"Remove need for users to special-case second and later clients","State":"open","Body":"#### Is this a Bug or Feature request?\r\nEnhancement that's part of #7947\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project)\r\nSee https://github.com/dougbu/CodeGeneration repo and its [`ClientConsole` project](https://github.com/dougbu/CodeGeneration/blob/fbc0e82aa186f4d8de2ba7ece21f87d550be1817/ClientConsole/ClientConsole.csproj). Lines of particular interest are https://github.com/dougbu/CodeGeneration/blob/fbc0e82aa186f4d8de2ba7ece21f87d550be1817/ClientConsole/ClientConsole.csproj#L23-L26\r\n\r\n#### Description of the problem\r\nNSwag code generation creates `Exception` classes by default. Unfortunately, these classes are not nested and do not have unique names. So, when multiple generated clients are included in a project, compilation errors ensue.\r\n\r\nThis is not mandatory for the Preview3 milestone because multiple generated clients per project is a grow-up scenario and users _can_ provide the necessary `%(NSwagCSharpCodeGeneratorOptions)` metadata to avoid problems.\r\n\r\nMost likely fix is to update the [`GetProjectReferenceMetadata`](https://github.com/aspnet/Mvc/blob/792d5b49a27f5d4d99b3238019deaed5ba9eca0f/src/Microsoft.Extensions.ApiDescription.Client/GetFileReferenceMetadata.cs) task to add `FirstForGenerator` metadata to the relevant items.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\nSee the features/client.code.generation branch branch. That work is intended for the 2.2 Preview 3 milestone.","Url":"https://github.com/aspnet/Mvc/issues/8479","RelatedDescription":"Open issue \"Remove need for users to special-case second and later clients\" (#8479)"},{"Id":"361881514","IsPullRequest":false,"CreatedAt":"2018-09-19T18:52:07","Actor":"dougbu","Number":"8478","RawContent":null,"Title":"Address problems loading `System.Threading` in dotnet-getdocument inside man","State":"open","Body":"#### Is this a Bug or Feature request?\r\nBug that's part of #7947\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project)\r\n1. download https://github.com/dougbu/CodeGeneration repo\r\n2. install relevant tools and packages locally\r\n3. `dotnet build` in repo's ClientConsole folder\r\n\r\n##### Expected\r\nSmooth build\r\n\r\n##### Actual\r\n```\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Threading, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n     at System.Console.get_IsOutputRedirected()\r\n     at Microsoft.Extensions.ApiDescription.Client.Program.Main(String[] args)\r\n```\r\n\r\n#### Description of the problem\r\nSince builds from the root of the project work much better, it appears something goes awry when the ClientConsole project builds the p2p references. Need to see if, for example, the build from root builds the web site projects differently.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\nSee the features/client.code.generation branch branch. That work is intended for the 2.2 Preview 3 milestone.","Url":"https://github.com/aspnet/Mvc/issues/8478","RelatedDescription":"Open issue \"Address problems loading `System.Threading` in dotnet-getdocument inside man\" (#8478)"},{"Id":"361871334","IsPullRequest":true,"CreatedAt":"2018-09-19T18:25:49","Actor":"dougbu","Number":"8477","RawContent":null,"Title":"Correct metadata additions and add errors about metadata","State":"open","Body":"- add errors for missing required metadata\r\n- add errors for duplicate `%(DocumentPath)` and `%(OutputPath)` metadata\r\n- remove `[Required]` for task inputs that may be `null` or empty\r\n- correct `%(DocumentPath)`s generated in `GetProjectReferenceMetadata` task\r\n  - use this task","Url":"https://github.com/aspnet/Mvc/pull/8477","RelatedDescription":"Open PR \"Correct metadata additions and add errors about metadata\" (#8477)"},{"Id":"361868131","IsPullRequest":true,"CreatedAt":"2018-09-19T18:16:39","Actor":"dougbu","Number":"8475","RawContent":null,"Title":"Add .NET Core App 2.1 and 2.2 versions of GetDocumentInsider","State":"open","Body":"- should make tool more compatible with various web sites\r\n\r\nnit: fix casing of `_MSBuildProjectExtensionsPath` field","Url":"https://github.com/aspnet/Mvc/pull/8475","RelatedDescription":"Open PR \"Add .NET Core App 2.1 and 2.2 versions of GetDocumentInsider\" (#8475)"},{"Id":"361446376","IsPullRequest":true,"CreatedAt":"2018-09-18T19:38:45","Actor":"dotnet-maestro-bot","Number":"8474","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @dougbu\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8474","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8474)"},{"Id":"361374586","IsPullRequest":true,"CreatedAt":"2018-09-18T18:49:40","Actor":"dougbu","Number":"8471","RawContent":null,"Title":"Create model in `ComplexTypeModelBinder` if ANY property has a greedy binding source","State":"closed","Body":"- #7562\r\n- see other commits for additional detail","Url":"https://github.com/aspnet/Mvc/pull/8471","RelatedDescription":"Closed or merged PR \"Create model in `ComplexTypeModelBinder` if ANY property has a greedy binding source\" (#8471)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"363826101","IsPullRequest":false,"CreatedAt":"2018-09-26T01:42:02","Actor":"mikaelm12","Number":"3013","RawContent":null,"Title":"Java Client Not Tracking Cookies","State":"open","Body":"We need to keep track of cookies in the Java client. The can cause issues when using the SignalR Service. ","Url":"https://github.com/aspnet/SignalR/issues/3013","RelatedDescription":"Open issue \"Java Client Not Tracking Cookies\" (#3013)"},{"Id":"363825581","IsPullRequest":true,"CreatedAt":"2018-09-26T01:38:47","Actor":"mikaelm12","Number":"3012","RawContent":null,"Title":"[WIP] Change websockets library","State":"open","Body":"Still early and hacky but just want to leave this out here.Started hacking on changing the websocket library to Square's OkHttp WebSocket implementation. \r\nThe motivation for doing this now is that we aren't keeping track of cookies which is causing problems and this library provides an easier way to do that. Still need to verify that behavior\r\n\r\nOne issue I have now is I'm a little unsure how to deal with errors during connection with these websockets. \r\n\r\nIssue: https://github.com/aspnet/SignalR/issues/2792\r\nIssue: https://github.com/aspnet/SignalR/issues/3013\r\n","Url":"https://github.com/aspnet/SignalR/pull/3012","RelatedDescription":"Open PR \"[WIP] Change websockets library\" (#3012)"},{"Id":"363696246","IsPullRequest":true,"CreatedAt":"2018-09-25T17:47:45","Actor":"BrennanConroy","Number":"3011","RawContent":null,"Title":"[Java] [WIP] Add HttpClient support for testing","State":"open","Body":"https://github.com/aspnet/SignalR/issues/2915\r\n\r\nWrote a single test for proof-of-concept. Will leave more tests to a later PR, want this change to be focused on getting the HttpClient code in.\r\n\r\nThe main part to focus on is the negotiate stuff, it seems a little hacky right now.","Url":"https://github.com/aspnet/SignalR/pull/3011","RelatedDescription":"Open PR \"[Java] [WIP] Add HttpClient support for testing\" (#3011)"},{"Id":"363653787","IsPullRequest":true,"CreatedAt":"2018-09-25T16:01:42","Actor":"BrennanConroy","Number":"3010","RawContent":null,"Title":"[Java] Throw useful error on incorrect argument length","State":"open","Body":"","Url":"https://github.com/aspnet/SignalR/pull/3010","RelatedDescription":"Open PR \"[Java] Throw useful error on incorrect argument length\" (#3010)"},{"Id":"363501366","IsPullRequest":false,"CreatedAt":"2018-09-25T14:48:12","Actor":"jinek","Number":"3008","RawContent":null,"Title":"System.Web.HttpException: The remote host closed the connection. The error code is 0x800704CD","State":"closed","Body":"* Versions of Server-Side NuGet Packages: 2.3.0\r\n* Versions of Client-Side NuGet/NPM Packages: 2.3.0\r\n* C# client\r\n* Azure Web App\r\n* Windows on server and client\r\n\r\nException happening during server deployment\r\n[SignalRStackTrace.txt](https://github.com/aspnet/SignalR/files/2414737/SignalRStackTrace.txt)\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/3008","RelatedDescription":"Closed issue \"System.Web.HttpException: The remote host closed the connection. The error code is 0x800704CD\" (#3008)"},{"Id":"363597083","IsPullRequest":false,"CreatedAt":"2018-09-25T14:06:44","Actor":"farlock85","Number":"3009","RawContent":null,"Title":"Getting exception from server on C# client","State":"open","Body":"I have an ASP.NET SignalR server on .NET Core 2.1 and a .NET 4.6.2 C# Client on Microsoft.AspNetCore.SignalR.Client 1.0.3.\r\n\r\nThis is my hub:\r\n\r\n```\r\npublic class MyHub : Hub\r\n{\r\n\tpublic async Task<Boolean> Connect(String identifier)\r\n\t{\r\n\t\tif (identifier == null)\r\n\t\t{\r\n\t\t\tthrow new Exception(\"Identifier null\");\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n```\r\n\r\nAnd my client:\r\n\r\n```\r\ntry\r\n{\r\n\tvar response = await _hubConnection.InvokeCoreAsync<boolean>(\"connect\", new Object[] { null });\r\n}\r\ncatch (Exception ex)\r\n{\r\n\r\n}\r\n```\r\n\r\nWhen I send the request the server throws a custom Exception (identifier null), but the exception on the client is `An unexpected error occurred invoking 'connect' on the server.` and the actual exception cannot be accessed.","Url":"https://github.com/aspnet/SignalR/issues/3009","RelatedDescription":"Open issue \"Getting exception from server on C# client\" (#3009)"},{"Id":"363439059","IsPullRequest":false,"CreatedAt":"2018-09-25T07:10:45","Actor":"davidfowl","Number":"3007","RawContent":null,"Title":"Add ability to send pre-serialized data for efficiency","State":"open","Body":"There's a pattern where you're sending data that's already serialized from another system (like a message bus) to the clients without first de-serializing and re-serializing. Here's an example:\r\n\r\nhttps://github.com/gcsuk/Achievements/blob/f54479ca595bcf62fa17177b0ec101a7b918d8a5/src/Achievements/Achievements/EventListener.cs#L66-L76\r\n\r\nThe above code gets a utf8 JSON encoded message from the queue, turns it into a string, then turns that string into a `UserAchievement<string>` object. Then it calls IHubContext.User(...).SendAsync which turns that object back into a utf8 byte[] payload to send on the wire.\r\n\r\nWe should introduce a new type that encodes this information that IHubProtocols have native support for. Some considerations:\r\n- If connected clients are various protocols, what do we do? Do we store type information so that we can de-serialize in the original format and re-serialize in the correct format?\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/3007","RelatedDescription":"Open issue \"Add ability to send pre-serialized data for efficiency\" (#3007)"},{"Id":"363391966","IsPullRequest":false,"CreatedAt":"2018-09-25T03:00:22","Actor":"newETA","Number":"3006","RawContent":null,"Title":"Distinct Message display format in between sender and receiver.","State":"open","Body":"Thank you so much for helping.  So far I am new for SignalR and trying to implement a fully functional real-time chat conversation module. \r\n\r\nSo far I am able to make a conversation and working nice as expected.  Except for newly send message distinct between users. \r\n\r\nWhen I load the existing message for the first time that load as expected.   Which is showing below.\r\n<img width=\"228\" alt=\"signalr\" src=\"https://user-images.githubusercontent.com/42071761/45990088-03de2780-c044-11e8-8f94-693ff4bd550e.PNG\">\r\n\r\nBut when I try to send a new message it's not formatting well since in both clients having the same CSS class name both will have the same type of display format like below.\r\n\r\n<img width=\"232\" alt=\"secondmessage\" src=\"https://user-images.githubusercontent.com/42071761/45990118-3720b680-c044-11e8-8984-34fb2f6c8656.PNG\">\r\n\r\nNow When I sent a message to another client that should be displayed like the first image shown above. \r\n\r\nI tried to check the condition because of Class both are displaying in same please suggest me how can be accomplished this. \r\n\r\nRequirement:\r\nSender should always start from Right in Screen.\r\nThe receiver should receive a message in right hand side with the avatar.  \r\n\r\nBasically like skype messaging system. \r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/3006","RelatedDescription":"Open issue \"Distinct Message display format in between sender and receiver.\" (#3006)"},{"Id":"363385994","IsPullRequest":true,"CreatedAt":"2018-09-25T02:23:59","Actor":"mikaelm12","Number":"3005","RawContent":null,"Title":"Spotless add rule for Do While","State":"open","Body":"","Url":"https://github.com/aspnet/SignalR/pull/3005","RelatedDescription":"Open PR \"Spotless add rule for Do While\" (#3005)"},{"Id":"363246036","IsPullRequest":false,"CreatedAt":"2018-09-24T17:30:23","Actor":"anurse","Number":"3004","RawContent":null,"Title":"Consider moving Redis tests out to separate test pass","State":"open","Body":"The Redis tests have been weirdly flaky and it's difficult to get them to run successfully in the main test pass. It's still essential that we get coverage here though. We could consider moving the Redis tests out to a separate test pass (like the SauceLabs tests) that runs nightly and doesn't block the main build.","Url":"https://github.com/aspnet/SignalR/issues/3004","RelatedDescription":"Open issue \"Consider moving Redis tests out to separate test pass\" (#3004)"},{"Id":"363243268","IsPullRequest":false,"CreatedAt":"2018-09-24T17:22:13","Actor":"anurse","Number":"3003","RawContent":null,"Title":"Consider changing client ping to client pong","State":"open","Body":"Instead of having the client ping the server, we could have the client respond to server pings with a \"Pong\" message.\r\n\r\nThings to consider:\r\n* [ ] Protocol change needed to add Pong message\r\n* [ ] Server only sends Ping messages when using SSE or WS (no pings are sent for LP, but then maybe the LP itself is sufficient for both?)\r\n* [ ] How does a Server know the difference between the Client not ponging because it's a 2.1 Client, vs not ponging because it's disconnected?\r\n* [ ] How does the 2.1 Server respond when the 2.2 client sends a Pong message in response to it's Ping?\r\n\r\ncc @davidfowl @BrennanConroy ","Url":"https://github.com/aspnet/SignalR/issues/3003","RelatedDescription":"Open issue \"Consider changing client ping to client pong\" (#3003)"},{"Id":"363241711","IsPullRequest":false,"CreatedAt":"2018-09-24T17:17:50","Actor":"anurse","Number":"3002","RawContent":null,"Title":"Consider RTM versioning for Java Client","State":"open","Body":"Right now the Java Client is versioned at 0.1.0. We need to decide what to ship for the final version number. There are some things that we might not get to in 2.2 (Streaming, MessagePack, other transports, for example). Should we wait until those land before setting the version to 1.0? Or should set it now and simply document that those features are coming in later releases?","Url":"https://github.com/aspnet/SignalR/issues/3002","RelatedDescription":"Open issue \"Consider RTM versioning for Java Client\" (#3002)"},{"Id":"362241156","IsPullRequest":false,"CreatedAt":"2018-09-24T16:55:12","Actor":"Moolie","Number":"2987","RawContent":null,"Title":"Firewall blocking SignalR requests","State":"closed","Body":"Recently, I notice clients behind 'corporate' firewalls have trouble using pages on my site that use SignalR. I have seen Barracuda firewalls rejecting calls to /signalr/hub and /signalr/negotiate with a 406 status code (the latter after replacing /signalr/hub with a physical file).\r\n\r\nThere might be other firewall manufacturers as well that have updated their filters, and block SignalR functionality.\r\n\r\nHas anyone else experienced this?\r\nWe now tell these clients to update the firewall settings (whitelisting our domain or whitelist SignalR in general), not much else I can do about it AFAIK.","Url":"https://github.com/aspnet/SignalR/issues/2987","RelatedDescription":"Closed issue \"Firewall blocking SignalR requests\" (#2987)"},{"Id":"363230288","IsPullRequest":false,"CreatedAt":"2018-09-24T16:49:14","Actor":"Tratcher","Number":"3001","RawContent":null,"Title":"Using hubs inside Hostedservice with kestrel on prod environment","State":"open","Body":"_From @hrnsky on September 24, 2018 16:46_\n\nHello all, I don't know where to open this issue weather is an issue or not, hope you will help me. I have a background service, running good, I'm running a project with asp.net core 2.1.4 on ubuntu 18 with nginx 1.14 as proxy with kestrel. Inside this background service, I'm using SignalR hub to send some messages to clients. In this background service, some action happens and pushes the json response to the client with clientID. This scenario runs good while debugging on windows 10 with vs 2017, but doesn't work on prod environment. I'm publishing the project with linux-64 option, then run on ubuntu with systemd service. What should i do ? Is it a good practice to use Hubs inside IHostedService ? Also I'm using this hub inside controllers, nothing going bad. How can i log this situation and how to get the log ? I'm tracking with journalctl, there is no exception and also logging my \"hub sent\" log message. Thanks\n\n_Copied from original issue: aspnet/Home#3551_","Url":"https://github.com/aspnet/SignalR/issues/3001","RelatedDescription":"Open issue \"Using hubs inside Hostedservice with kestrel on prod environment\" (#3001)"},{"Id":"362753078","IsPullRequest":true,"CreatedAt":"2018-09-21T19:52:43","Actor":"BrennanConroy","Number":"3000","RawContent":null,"Title":"[TS] Reject handshake if connection closes before response","State":"open","Body":"Updated Jest reference because I was finding it impossible to debug a test failure and found similar issues filed against Jest that have been fixed in 23.X.X. Side-effect is rejects.toThrow no longer works in some of our tests because of another bug https://github.com/facebook/jest/issues/6675. I can revert the Jest change if we want now that I fixed the test.","Url":"https://github.com/aspnet/SignalR/pull/3000","RelatedDescription":"Open PR \"[TS] Reject handshake if connection closes before response\" (#3000)"},{"Id":"362146983","IsPullRequest":false,"CreatedAt":"2018-09-21T15:59:48","Actor":"balkarov","Number":"2986","RawContent":null,"Title":"IE 11: Invalid operand to ‘instanceof’: Function expected","State":"closed","Body":"Hello. Thank you for your library!\r\n\r\nI have problem in Internet Explorer 11. \r\nI have web application 1 which has signalR. And I have another application2 (without signalR) which has iframe with application 1. \r\nWhen I close iframe (remove from dom) in application 2 I get error: `Invalid operand to ‘instanceof’: Function expected` every ~10-15 seconds. \r\nAfter debug I saw that after close iframe ArrayBuffer is undefined in signalR. But I open iframe with app 1 ArrayBuffer is defined.\r\n![123123123](https://user-images.githubusercontent.com/6030335/45815722-31447180-bce2-11e8-8eb9-e9f28eec68b2.png)\r\n\r\n\r\n\r\n### Info\r\n\r\n* \"@aspnet/signalr\": \"1.0.3\"\r\n* Microsoft.AspNetCore.SignalR 1.0.3\r\n* npm 6.1.0\r\n* The JavaScript client\r\n* IIS Express\r\n* Windows 10\r\n* IE 11\r\n","Url":"https://github.com/aspnet/SignalR/issues/2986","RelatedDescription":"Closed issue \"IE 11: Invalid operand to ‘instanceof’: Function expected\" (#2986)"},{"Id":"362296821","IsPullRequest":true,"CreatedAt":"2018-09-21T15:58:54","Actor":"BrennanConroy","Number":"2989","RawContent":null,"Title":"[TS] Change websocket library in Node","State":"closed","Body":"https://github.com/aspnet/SignalR/issues/2973\r\nAlso, #2986\r\n\r\nInverted a couple `instanceof ArrayBuffer` checks because the `ArrayBuffer` returned from `ws` isn't an ArrayBuffer or something super odd, so checking for string instead and assuming buffer otherwise works.\r\n\r\nSee https://github.com/nodejs/node/issues/20978 for some context maybe? @anurse maybe you'll understand it better.","Url":"https://github.com/aspnet/SignalR/pull/2989","RelatedDescription":"Closed or merged PR \"[TS] Change websocket library in Node\" (#2989)"},{"Id":"362403574","IsPullRequest":true,"CreatedAt":"2018-09-20T23:27:33","Actor":"mikaelm12","Number":"2999","RawContent":null,"Title":"Wait for the Handshake Response Java","State":"open","Body":"Waiting for the `Handshake Response` in the Java client before entering the `CONNECTED` state. I added an intermediate `CONNECTING` state as well.","Url":"https://github.com/aspnet/SignalR/pull/2999","RelatedDescription":"Open PR \"Wait for the Handshake Response Java\" (#2999)"},{"Id":"362373178","IsPullRequest":false,"CreatedAt":"2018-09-20T22:38:22","Actor":"andreatosato","Number":"2996","RawContent":null,"Title":"Insert List of SignalR Client link in docs","State":"closed","Body":"Hi, I would like to suggest that you add all the links and references to SignlaR Client developments in the SignalR Core documentation.\r\n\r\nCurrent list:\r\nASP .NET Core: 'Microsoft.AspNetCore.SignalR.Client' on NuGet (https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR/)\r\nJava: 'com.microsoft.aspnet:signalr' on Maven (https://search.maven.org/artifact/com.microsoft.aspnet/signalr)\r\nJavaScript (including NodeJS): '@aspnet/signalr' on NPM (https://www.npmjs.com/package/@aspnet/signalr)\r\nC++: (Prototype) https://github.com/aspnet/SignalR/tree/master/clients/cpp (no official release planned yet)\r\nSwift: (Unofficial) SwiftSignalRClient on CocoaPods (https://github.com/moozzyk/SignalR-Client-Swift)\r\n\r\nSource: @anurse in gitter conversation.\r\n\r\nThanks a lot!","Url":"https://github.com/aspnet/SignalR/issues/2996","RelatedDescription":"Closed issue \"Insert List of SignalR Client link in docs\" (#2996)"},{"Id":"362391295","IsPullRequest":true,"CreatedAt":"2018-09-20T22:30:20","Actor":"BrennanConroy","Number":"2998","RawContent":null,"Title":"Add error to negotiate","State":"open","Body":"https://github.com/aspnet/SignalR/issues/2988\r\n\r\nNo httpclient testability in Java yet.","Url":"https://github.com/aspnet/SignalR/pull/2998","RelatedDescription":"Open PR \"Add error to negotiate\" (#2998)"},{"Id":"362383142","IsPullRequest":true,"CreatedAt":"2018-09-20T21:57:25","Actor":"dotnet-maestro-bot","Number":"2997","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @BrennanConroy\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2997","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2997)"},{"Id":"362369479","IsPullRequest":true,"CreatedAt":"2018-09-20T21:16:23","Actor":"dotnet-maestro-bot","Number":"2995","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @BrennanConroy\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2995","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2995)"},{"Id":"362363326","IsPullRequest":true,"CreatedAt":"2018-09-20T21:16:22","Actor":"mikaelm12","Number":"2994","RawContent":null,"Title":"Merge rel/2.2","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2994","RelatedDescription":"Closed or merged PR \"Merge rel/2.2\" (#2994)"},{"Id":"362338462","IsPullRequest":true,"CreatedAt":"2018-09-20T20:58:09","Actor":"mikaelm12","Number":"2993","RawContent":null,"Title":"Merge release/2.2","State":"closed","Body":"Make tests classes and HubMessageType enum package private in the Java client(#2992)","Url":"https://github.com/aspnet/SignalR/pull/2993","RelatedDescription":"Closed or merged PR \"Merge release/2.2\" (#2993)"},{"Id":"361959799","IsPullRequest":true,"CreatedAt":"2018-09-20T20:39:25","Actor":"BrennanConroy","Number":"2985","RawContent":null,"Title":"Clone Windows Identity in LongPolling connections","State":"closed","Body":"https://github.com/aspnet/SignalR/issues/2948","Url":"https://github.com/aspnet/SignalR/pull/2985","RelatedDescription":"Closed or merged PR \"Clone Windows Identity in LongPolling connections\" (#2985)"},{"Id":"362330702","IsPullRequest":true,"CreatedAt":"2018-09-20T19:44:20","Actor":"mikaelm12","Number":"2992","RawContent":null,"Title":"Make tests classes and HubMessageType enum package private","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2992","RelatedDescription":"Closed or merged PR \"Make tests classes and HubMessageType enum package private\" (#2992)"},{"Id":"362307689","IsPullRequest":false,"CreatedAt":"2018-09-20T19:20:34","Actor":"oising","Number":"2990","RawContent":null,"Title":"WebSockets failing with 500 during negotiation, always falling back to SSE","State":"closed","Body":"\r\n\r\nLogs:\r\n\r\n[aspnet_core_web_server.txt](https://github.com/aspnet/SignalR/files/2402528/aspnet_core_web_server.txt)\r\n[signalr-client-console-trace.txt](https://github.com/aspnet/SignalR/files/2402529/signalr-client-console-trace.txt)\r\n\r\n* Versions of Server-Side NuGet Packages:\r\n\r\n```\r\nPM> get-package\r\n\r\nId                                  Versions\r\n--                                  --------\r\nMicrosoft.AspNetCore.App            {2.1.4}\r\nmediatR                             {5.1.0}\r\nMediatR.Extensions.Microsoft.Dep... {5.1.0}\r\nMicrosoft.NETCore.App               {2.1}\r\nMicrosoft.AspNetCore.SpaServices    {2.1.1}\r\n```\r\n* Versions of Client-Side NuGet/NPM Packages:\r\n```\r\nPS> yarn list --depth 0 --pattern @aspnet*\r\nyarn list v1.9.4\r\n└─ @aspnet/signalr@1.0.3\r\n```\r\n* Are you using the C# client or the JavaScript client:\r\n\r\nJS\r\n\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): \r\n\r\nIIS Express 10\r\n\r\n* The Operating System on the Server (Windows/Linux/macOS):\r\n\r\nWindows 10/1803 (also tested on Windows 10/rs5)\r\n\r\n* The Operating System on the Client (Windows/Linux/macOS):\r\n\r\nAs above.\r\n\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.):\r\n\r\nChrome 69/x64\r\n\r\n* Please use the Diagnostics Guide at https://github.com/aspnet/SignalR/wiki/Diagnostics-Guide to collect server-side and client-side logs and network traces if possible. Please **do not** put the traces and logs in the Issue text as they are quite large. The Diagnostics Guide describes how to attach them to the issue.\r\n\r\nAttached.\r\n\r\nWhen in doubt, feel free to file the issue, we're happy to help answer questions. We also suggest using the `asp.net-core-signalr` tag on StackOverflow to ask questions.\r\n","Url":"https://github.com/aspnet/SignalR/issues/2990","RelatedDescription":"Closed issue \"WebSockets failing with 500 during negotiation, always falling back to SSE\" (#2990)"},{"Id":"362314642","IsPullRequest":true,"CreatedAt":"2018-09-20T18:46:06","Actor":"mikaelm12","Number":"2991","RawContent":null,"Title":"Java Client HubConnectionBuilder API Review","State":"open","Body":"Changes from the `HubConnectionBuilder `API Review.  \r\nDoing some argument validation in the HubConnectionBuilder and adding an `HttpConnectionOptions` type. Also removing some `HubConnection` constructors. \r\n","Url":"https://github.com/aspnet/SignalR/pull/2991","RelatedDescription":"Open PR \"Java Client HubConnectionBuilder API Review\" (#2991)"},{"Id":"362287528","IsPullRequest":false,"CreatedAt":"2018-09-20T17:26:47","Actor":"anurse","Number":"2988","RawContent":null,"Title":"Add \"error\" property to Negotiate response","State":"open","Body":"To make it easier to for older clients to report errors due to incompatibilities, we should allow the `/negotiate` response to include an `error` property. If present, the client will **always** cancel the connection and report the string provided as the error message.\r\n\r\nIn the JavaScript client, this error should be wrapped in an `Error` instance and the `HubConnection.start` promise should be rejected with that `Error`.\r\n\r\nIn the .NET and Java clients, this error should be wrapped in an `Exception` (or `HubException`?) and used to fault the `Task`/`CompletableFuture` returned by `HubConnection.Start`","Url":"https://github.com/aspnet/SignalR/issues/2988","RelatedDescription":"Open issue \"Add \"error\" property to Negotiate response\" (#2988)"},{"Id":"361894315","IsPullRequest":true,"CreatedAt":"2018-09-20T01:15:09","Actor":"mikaelm12","Number":"2984","RawContent":null,"Title":"[Ignore] Test Branch","State":"closed","Body":"Because of https://github.com/aspnet/SignalR/issues/2973","Url":"https://github.com/aspnet/SignalR/pull/2984","RelatedDescription":"Closed or merged PR \"[Ignore] Test Branch\" (#2984)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"362513343","IsPullRequest":false,"CreatedAt":"2018-09-25T13:18:46","Actor":"dragankae","Number":"1973","RawContent":null,"Title":"Can't use GUID identifier on IdentityRoleClaim and IdentityUserClaim","State":"closed","Body":"I'm not able to use GUID identifier on IdentityRoleClaim and IdentityUserClaim classes. TKey is not set on the Id.\r\n\r\n![capture](https://user-images.githubusercontent.com/10271448/45870178-918eee00-bd8a-11e8-9af7-34d06918e2e8.JPG)\r\n","Url":"https://github.com/aspnet/Identity/issues/1973","RelatedDescription":"Closed issue \"Can't use GUID identifier on IdentityRoleClaim and IdentityUserClaim\" (#1973)"},{"Id":"362949630","IsPullRequest":false,"CreatedAt":"2018-09-24T21:29:23","Actor":"josejmoran","Number":"1977","RawContent":null,"Title":"Asp.Net Core takes too long to run the web application","State":"closed","Body":"When I run the application the build process takes about 45 seconds, the majority of that time is spent on some tasks that do not send any message to the Output window so I have no idea what is going on. The development loop cycle is affected by this. Usually we change a file or two and click run again, so it feels like forever every time. Is there a way to improve this, maybe keeping a list of files modified and just compiling only the changed files? If VS is only compiling the files I have created and having a Core I7 with 16GB of RAM it seems too slow to run the application.\r\n\r\nIt may be helpful to add some logging messages during the build process that show the time spent in each task so if we have a slow build we can pinpoint the task or tasks delaying the build process as well as providing this log to you guys for  a deeper analysis.","Url":"https://github.com/aspnet/Identity/issues/1977","RelatedDescription":"Closed issue \"Asp.Net Core takes too long to run the web application\" (#1977)"},{"Id":"356520791","IsPullRequest":false,"CreatedAt":"2018-09-24T21:28:51","Actor":"IlyaSolovyov","Number":"1954","RawContent":null,"Title":"Manage/_Layout.cshtml doesn't load without \"AddDefaultUI\"","State":"closed","Body":"### Title\r\nReplacing \".AddDefaultIdentity\" with \".AddIdentity\" without using \".AddDefaultUI\" command means that even after scaffolding all pages Manage section doesn't load its layout file.\r\n\r\n### Minimal repro steps\r\n1. Create new application with Identity\r\n2. Disable default UI.\r\n3. Scaffold all the pages.\r\n4. Sign in and navigate to /Identity/Manage.\r\n\r\n### Expected result\r\n![image](https://user-images.githubusercontent.com/23297756/44991006-8458bd80-af9b-11e8-9c1e-e383f8892a85.png)\r\n\r\n### Actual result\r\n![image](https://user-images.githubusercontent.com/23297756/44991056-a0f4f580-af9b-11e8-969e-d9b1f73baa19.png)\r\n\r\n\r\n### Further technical details\r\nScaffolded file \"Identity/Pages/Account/Manage/_Layout.csthml\" has a \"Layout = \"/Areas/Identity/Pages/_Layout.cshtml\";\" line that points to a non-existing file. There are no _Layout pages in Identity area other than the one in Manage section. Pointing it to global one doesn't change anything. Removing _Layout file doesn't help either","Url":"https://github.com/aspnet/Identity/issues/1954","RelatedDescription":"Closed issue \"Manage/_Layout.cshtml doesn't load without \"AddDefaultUI\"\" (#1954)"},{"Id":"360688047","IsPullRequest":false,"CreatedAt":"2018-09-24T21:24:36","Actor":"josejmoran","Number":"1967","RawContent":null,"Title":"_Layout file for Identity not scaffolded","State":"closed","Body":"When I scaffold the UI for Identity everything works fine. But the file: Areas/Identity/Pages/Account/Manage/_Layout.cshtml include a line referencing a file that I look for it in the directory it says it should be but is not generated when I scaffold.\r\n\r\n@{ \r\n    Layout = \"/Areas/Identity/Pages/_Layout.cshtml\";\r\n}\r\n\r\nIf I comment the line I get an error, which means Identity is using this file. It seems it did not get generated when I scaffold the Identity files. Where is this file located?","Url":"https://github.com/aspnet/Identity/issues/1967","RelatedDescription":"Closed issue \"_Layout file for Identity not scaffolded\" (#1967)"},{"Id":"361054763","IsPullRequest":false,"CreatedAt":"2018-09-24T21:23:37","Actor":"bhosale-ajay","Number":"1969","RawContent":null,"Title":"Updating Email fails with Unexpected Error","State":"closed","Body":"Framework Version - .Net Core 2.1\r\n\r\nProject Creation\r\n1. Create a Asp .Net Core Web project with Authentication\r\n2. Run Migrations\r\n\r\nStart Application\r\n1. Register a user with email - abc@abc.com\r\n2. Register a user with email - abc@xyz.com\r\n3. Try to update the second user profile and change the email to abc@abc.com. On submit the code throws an unexpected error. The DB query shows email has updated.\r\n\r\n\r\nStackTrace -\r\n\r\n```\r\nInvalidOperationException: Unexpected error occurred setting name for user with ID '56172fdd-bb5c-48eb-89b7-3beeff546f92'.\r\nMicrosoft.AspNetCore.Identity.UI.Pages.Account.Manage.Internal.IndexModel<TUser>.OnPostAsync()\r\n```\r\n\r\nOverall Email and UserName are confusing, Updating UserName on updating email is very specific implementation.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1969","RelatedDescription":"Closed issue \"Updating Email fails with Unexpected Error\" (#1969)"},{"Id":"362243280","IsPullRequest":false,"CreatedAt":"2018-09-24T21:20:09","Actor":"nicklundin08","Number":"1971","RawContent":null,"Title":"Inconsistent server response when using JWT bearer tokens to authenticate","State":"closed","Body":"I have been noticing inconsistent behavior with my web api ever since upgrading it to asp.net core. The relevant components of the project are\r\n\r\n- An asp.net core authentication server (implemented via identity server 4)\r\n- A web api (recently migrated from .net framework 4.5.1 to asp.net core)\r\n\r\nUse Case 1\r\n- Client sends an unauthenticated request to the resource server without a token\r\n- Server responds with a 401 and no content\r\n\r\nUse Case 2\r\n- Client retrieves a valid token using the client credentials grant flow from the auth server\r\n- Client sends an authenticated request to the resource server with the token\r\n- Server responds with a 200 and access to the protected resource\r\n\r\nThis worked consistently when the web api was on .net framework. However since the switch to .net core, the behavior is as follows\r\n\r\n- Client sends an unauthenticated request to the resource server without a token\r\n- Server responds with either:\r\n\t1. 200 and no content\r\n\t2. 401 and no content\r\n\t\r\n- Client retrieves token using the client credentials grant flow from the auth server\r\n- Client sends an authenticated request to the resource server with the token\r\n- Server responds with either:\r\n\t1. 200 and access to the protected resource\r\n\t2. 401 and no content\r\n\t3. 200 and no content (odd because the api would never return no content)\r\n\r\nThere doesn't seem to be any sort of pattern to the server responses.\r\n\r\nThe startup is posted below. I have tried replacing the .AddIdentityServerAuthentication with \r\n.AddJwtBearer, but the behavior was not affected.\r\n\r\nI do not believe this is an issue with the authentication server project because no code was changed and the exact same steps to obtain a token were used on the .net framework and the asp.net core versions of the web api project.\r\n\r\nI do not believe this is an environmental issue as I have seen it in a dev environment, UAT environment, and on my local machine.\r\n\r\nThe only logs I have been able to grab so far has been from our transaction log because I don't believe any exception gets thrown\r\n\r\nI realize this a very generic issue, but I am having a hard time debugging it because it appears most of this is happening in the middleware. If there is any other info I can provide please let me know. Thank you in advance for your time.\r\n\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n//                     LOGS                                  //\r\n\r\n**no token 200**\r\n\r\n\r\n2018-09-20 10:24:24.954 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:24:24.954 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:24:24.955 -05:00 [INF] Authorization failed.\r\n2018-09-20 10:24:24.955 -05:00 [INF] Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n2018-09-20 10:24:24.955 -05:00 [INF] Executing ChallengeResult with authentication schemes ([]).\r\n2018-09-20 10:24:24.955 -05:00 [INF] AuthenticationScheme: Bearer was challenged.\r\n2018-09-20 10:24:24.955 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 0.5895ms\r\n2018-09-20 10:24:24.955 -05:00 [INF] Request finished in 1.17ms 200 \r\n\r\n**no token 401**\r\n\r\n2018-09-20 10:24:23.478 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:24:23.532 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:24:23.544 -05:00 [INF] Authorization failed.\r\n2018-09-20 10:24:23.545 -05:00 [INF] Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n2018-09-20 10:24:23.548 -05:00 [INF] Executing ChallengeResult with authentication schemes ([]).\r\n2018-09-20 10:24:23.912 -05:00 [INF] AuthenticationScheme: BearerIdentityServerAuthenticationJwt was challenged.\r\n2018-09-20 10:24:23.912 -05:00 [INF] AuthenticationScheme: Bearer was challenged.\r\n2018-09-20 10:24:23.915 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 380.02320000000003ms\r\n2018-09-20 10:24:23.917 -05:00 [INF] Request finished in 439.4776ms 401 \r\n\r\n\r\n**with token 401**\r\n\r\n2018-09-20 10:25:20.177 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:25:20.178 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:25:20.178 -05:00 [INF] Authorization failed.\r\n2018-09-20 10:25:20.178 -05:00 [INF] Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n2018-09-20 10:25:20.178 -05:00 [INF] Executing ChallengeResult with authentication schemes ([]).\r\n2018-09-20 10:25:20.178 -05:00 [INF] AuthenticationScheme: Bearer was challenged.\r\n2018-09-20 10:25:20.178 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 0.4509ms\r\n2018-09-20 10:25:20.178 -05:00 [INF] Request finished in 0.773ms 401 \r\n\r\n**with token 200 with content**\r\n\r\n2018-09-20 10:25:53.738 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:25:54.203 -05:00 [INF] Successfully validated the token.\r\n2018-09-20 10:25:54.211 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:25:54.212 -05:00 [INF] Authorization was successful.\r\n2018-09-20 10:25:54.267 -05:00 [INF] Executing action method Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) - Validation state: \"Valid\"\r\n2018-09-20 10:25:54.346 -05:00 [INF] Executed action method Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 74.5571ms.\r\n2018-09-20 10:25:54.357 -05:00 [INF] Executing ObjectResult, writing value of type 'System.Linq.Enumerable+SelectArrayIterator`2[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Clarity.Api.v4.Category_v4, Clarity.Api, Version=3.19.0.0, Culture=neutral, PublicKeyToken=null]]'.\r\n2018-09-20 10:25:54.394 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 183.63160000000002ms\r\n2018-09-20 10:25:54.396 -05:00 [INF] Request finished in 658.2099ms 200 application/json; charset=utf-8\r\n\r\n//                   STARTUP                                     //\r\n\r\n\r\nStartup\r\npublic class Startup\r\n{\r\n\tpublic IConfiguration Configuration { get; }\r\n\r\n\tpublic IConfigSettings ConfigSettings { get; set; }\r\n\r\n\tpublic Startup(IConfiguration configuration)\r\n\t{\r\n\t\tConfiguration = configuration;\r\n\r\n\t\tConfigSettings = configuration.BuildClarityConfigSettings();\r\n\t}\r\n\r\n\t// This method gets called by the runtime. Use this method to add services to the container.\r\n\tpublic virtual IServiceProvider ConfigureServices(IServiceCollection services)\r\n\t{\r\n\t\tservices.AddAuthentication(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.DefaultScheme = IdentityServerAuthenticationDefaults.AuthenticationScheme;\r\n\t\t\t\toptions.DefaultAuthenticateScheme = IdentityServerAuthenticationDefaults.AuthenticationScheme;\r\n\t\t\t\toptions.DefaultChallengeScheme = IdentityServerAuthenticationDefaults.AuthenticationScheme;\r\n\r\n\t\t\t})\r\n\t\t\t.AddIdentityServerAuthentication(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.Authority = ConfigSettings.AuthServerAddress;\r\n\t\t\t\toptions.RequireHttpsMetadata = false;\r\n\t\t\t\t//options.ApiName = \"clarity-stock\";\r\n\t\t\t});\r\n\r\n\t\tservices\r\n\t\t\t.AddMvc();\r\n\r\n\t\treturn services.BuildClarityServiceProvider(ConfigSettings);\r\n\t}\r\n\r\n\t// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n\tpublic virtual void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n\t{\r\n\t\tapp.UseAuthentication();\r\n\r\n\t\tapp.UseMvc();\r\n\r\n\t\t//initialize static stuff that depends on service registration\r\n\t\tif (app.ApplicationServices.GetService<WorkerConfig>().ChannelFactoryType == typeof(DirectChannelFactory))\r\n\t\t{\r\n\t\t\tapp.ApplicationServices.GetService<IWorkerServer>().Start();\r\n\t\t}\r\n\r\n\t\tEventDispatcher.Raise(new ApplicationStartedEvent(app.ApplicationServices)).GetAwaiter().GetResult();\r\n\t}\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Identity/issues/1971","RelatedDescription":"Closed issue \"Inconsistent server response when using JWT bearer tokens to authenticate\" (#1971)"},{"Id":"359622892","IsPullRequest":true,"CreatedAt":"2018-09-24T17:04:37","Actor":"dotnet-maestro-bot","Number":"1965","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @HaoK\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1965","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1965)"},{"Id":"362808608","IsPullRequest":true,"CreatedAt":"2018-09-22T00:14:59","Actor":"HaoK","Number":"1976","RawContent":null,"Title":"[Design] Add UI user factory","State":"open","Body":"Exploring fixes for https://github.com/aspnet/Identity/issues/1722\r\n\r\nNot sure if this might be more appropriate for 3.0 as its will be hard to do this in a non breaking change way in 2.2, basically moves away from Activator.CreateInstance infavor of a dedicated DefaultUIUserFactory which will be used to create new user instances. \r\n\r\nWe provide a default one that works for identity user based classes that have a default constructor, custom users can add their own factory implementation that implements:\r\n `TUser Create(string userName, string email)`\r\n\r\nor they can just register it inline like so with a sugar method:\r\n```\r\n            services.AddDefaultIdentity<PocoUser>()\r\n                .AddUserManager<UserManager<PocoUser>>()\r\n                .AddDefaultUIUserFactory<PocoUser>((userName,email) =>\r\n                    new PocoUser()\r\n                    {\r\n                        UserName = userName,\r\n                        Email = email\r\n                    });\r\n```\r\n\r\nThoughts @ajcvickers @javiercn @blowdart ","Url":"https://github.com/aspnet/Identity/pull/1976","RelatedDescription":"Open PR \"[Design] Add UI user factory\" (#1976)"},{"Id":"362788242","IsPullRequest":true,"CreatedAt":"2018-09-21T22:02:18","Actor":"pranavkm","Number":"1975","RawContent":null,"Title":"Prkrishn/update master","State":"open","Body":"","Url":"https://github.com/aspnet/Identity/pull/1975","RelatedDescription":"Open PR \"Prkrishn/update master\" (#1975)"},{"Id":"362680135","IsPullRequest":true,"CreatedAt":"2018-09-21T16:02:34","Actor":"huysentruitw","Number":"1974","RawContent":null,"Title":"Use the correct logging category inside RegisterModel","State":"open","Body":"","Url":"https://github.com/aspnet/Identity/pull/1974","RelatedDescription":"Open PR \"Use the correct logging category inside RegisterModel\" (#1974)"},{"Id":"362431510","IsPullRequest":false,"CreatedAt":"2018-09-21T02:16:38","Actor":"jamiewest","Number":"1972","RawContent":null,"Title":"Improve UserManager accessibility","State":"open","Body":"I was trying to override the `CreateAsync` method [here ](https://github.com/aspnet/Identity/blob/ed28df1236db01d75463f40bcf58d9e960a206a9/src/Core/UserManager.cs#L466-L483) but I lose access to `UpdateSecurityStampInternal(TUser user)` and `GetUserLockoutStore()`. It would be helpful to make the stores as well as the updating of the security stamp accessible on derived classes.","Url":"https://github.com/aspnet/Identity/issues/1972","RelatedDescription":"Open issue \"Improve UserManager accessibility\" (#1972)"},{"Id":"360409662","IsPullRequest":true,"CreatedAt":"2018-09-20T21:51:42","Actor":"ryanbrandenburg","Number":"1966","RawContent":null,"Title":"Titles in h1","State":"closed","Body":"Part of aspnet/templating#67.","Url":"https://github.com/aspnet/Identity/pull/1966","RelatedDescription":"Closed or merged PR \"Titles in h1\" (#1966)"},{"Id":"361931683","IsPullRequest":false,"CreatedAt":"2018-09-19T21:18:38","Actor":"eriksendc","Number":"1970","RawContent":null,"Title":"Second Facebook or Google sign in returns to /account/login after iOS 12 upgrade","State":"open","Body":"_NOTE: See my second comment on this issue. This isn't just an issue with my app (getyourpet.com). It can be reproduced with a \"File New Project\" web app. Someone needs to tell Apple what they broke fast!_\r\n\r\nHi All,\r\n\r\nI upgraded my iPhone 6s to iOS 12.0 yesterday (I was on 11.x), and I found that after the upgrade I couldn't sign in to getyourpet.com (my production site) using the Facebook button on the sign in page (/account/login) when using the Safari app. Tapping the Facebook button displayed the spinner on that button for a brief moment, but then you're just back at /account/login (though some amount of redirecting seemed to be happening behind the scenes). That led me to do a lot of experimenting. Here are some other findings:\r\n\r\n1. I had a colleague who was still on iOS 11x try signing in with Facebook. She could sign in over and over using Facebook without any issue. I then had her upgrade to iOS 12 and now both of our experiences are identical. Tapping the Facebook button displays the spinner, there's some redirecting going on, but when the spinner stops spinning you're at /account/login.\r\n\r\n2. Signing in with Facebook or Google on Chrome, Firefox, Edge and Opera are fine on my laptop.\r\n\r\n3. I tried signing in with the Google Chrome and Firefox apps. In both cases the behavior was the same as with Safari. I'm just back at /account/login.\r\n\r\n4. If I clear browser history and cookies for any of the browser apps, then signing with Facebook or Google works once. You're redirected to either the Facebook or Google authentication pages, then you're redirected back to getyourpet.com and you're signed in. But if you sign out and try signing in again, you're back at 3: tapping Facebook or Google the second time after clearing history and cookies you're just left at /account/signin.\r\n\r\n5. If I sign in using email / password then go and manage my login providers (on getyourpet.com this is in the user menu as Sign In With...) and then select to enable signing in with Facebook or Google on an account, if I've just cleared browser cache / cookies, then the user is brought to Facebook or Google to authenticate, and returned to getyourpet.com's Sign In With... page successfully. If you try enabling signing in with Facebook or Google and there's already a cookie, then you're signed out!\r\n\r\n6. I've reproduce this in all of our environments (local development on my laptop and in our QA environment).\r\n\r\nI'm trying to dig up another iPhone to reproduce this on. I won't have this until later tonight, but I did feel this is such a potentially giant issue that I thought I'd raise it quickly. Unfortunately I'm not a mobile developer, and don't have any clue as to how to get started with using some kind of tool like Fiddler to watch the traffic to/from the browser apps on my phone.\r\n\r\nAnyways, it seems like once there is an authentication cookie, somehow that's not correctly being sent to getyourpet.com?\r\n\r\nI'm sure this is the kind of issue where it's like \"oh boy, this probably isn't even real, and there's not enough to go on\". If there are things I can provide that would make further investigation possible let me know.\r\n\r\nWe're running a fairly basic ASP.NET web app that's been migrated all the way from pre-1.0 through to the latest version of 2.1 (2.1.4). I've included the relevant parts of our project file below. We run on servers running Windows 2012 R2 with the latest patches, and we run using IIS 8.5 (not native kestrel). Nothing has changed in our environment for over a week. The variable seems to be iOS 12.\r\n\r\nI know y'all don't own iOS 12, but if there was some way of knowing what's going on then there would be something concrete that could be sent to Apple. I'm afraid it's going to be a lot of trouble for a lot of sites like getyourpet.com as folks upgrade to iOS 12.\r\n\r\n-Brian Eriksen\r\n\r\n    PackageReference Include=\"angularjs\" Version=\"1.4.7\" \r\n    PackageReference Include=\"AngularJS.Messages\" Version=\"1.4.8\" \r\n    PackageReference Include=\"bootstrap\" Version=\"3.3.5\" \r\n    PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" \r\n    PackageReference Include=\"EntityFramework\" Version=\"6.2.0\" \r\n    PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.1.3\" PrivateAssets=\"All\" \r\n    PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.1.3\" \r\n    PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.1.3\" PrivateAssets=\"All\" \r\n    PackageReference Include=\"KendoUICore\" Version=\"2015.3.1111\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Antiforgery\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.1.3\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Mvc.TagHelpers\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Caching.Abstractions\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.FileExtensions\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging.Configuration\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.PlatformAbstractions\" Version=\"1.1.0\" \r\n    PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.4\" PrivateAssets=\"All\" \r\n    PackageReference Include=\"Sendgrid\" Version=\"9.9.0\" \r\n    PackageReference Include=\"Twilio\" Version=\"5.16.4\" \r\n    PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.6.0\" \r\n    PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.2.1\" \r\n    PackageReference Include=\"NLog\" Version=\"4.5.9\" \r\n    PackageReference Include=\"Hangfire\" Version=\"1.6.20\" \r\n    PackageReference Include=\"Hangfire.AspNetCore\" Version=\"1.6.20\" \r\n    PackageReference Include=\"Microsoft.SqlServer.Types\" Version=\"14.0.314.76\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Http.Features\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.1.1\" \r\n    PackageReference Include=\"MaxMind.GeoIP2\" Version=\"3.0.0\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Owin\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNet.SignalR.Owin\" Version=\"1.2.2\" \r\n    PackageReference Include=\"Microsoft.AspNet.SignalR\" Version=\"2.3.0\" \r\n    PackageReference Include=\"Microsoft.AspNet.SignalR.Redis\" Version=\"2.3.0\" \r\n    PackageReference Include=\"LinqKit.Microsoft.EntityFrameworkCore\" Version=\"1.1.15\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Mvc.Razor.ViewCompilation\" Version=\"2.1.1\" PrivateAssets=\"All\" \r\n","Url":"https://github.com/aspnet/Identity/issues/1970","RelatedDescription":"Open issue \"Second Facebook or Google sign in returns to /account/login after iOS 12 upgrade\" (#1970)"},{"Id":"360937194","IsPullRequest":false,"CreatedAt":"2018-09-18T08:16:31","Actor":"AndyCJ","Number":"1968","RawContent":null,"Title":"AntiForgeryTokens in Single Page Applications with ASP.Net Core Identity","State":"closed","Body":"Apologies if this isn't the right repository for this.\r\n\r\nI'm trying to get AntiForgeryTokens working in a SPA (Single Page Application), and I'm ending up fighting with Identity.\r\n\r\nI'm roughly following the instructions for configuring a Cookie with the AntiForgeryToken for use with Angular: https://github.com/aspnet/Docs/blob/master/aspnetcore/security/anti-request-forgery/sample/AngularSample/Startup.cs#L27\r\n\r\n    app.Use(next => context =>\r\n    {\r\n  \t  var tokens = antiforgery.GetAndStoreTokens(context);\r\n  \t  context.Response.Cookies.Append(\"XSRF-TOKEN\", tokens.RequestToken, new CookieOptions() { HttpOnly = false });\r\n    \r\n  \t  return next(context);\r\n    });\r\n\r\nI'm not actually using Angular, but I'm using Axios as a HTTP Client and it supports the same approach where the cookie value is read in and added as a header to the HTTP Request.\r\n\r\nAsp.Net Core is configured to read that header using:\r\n\r\n    services.AddAntiforgery(options =>\r\n    {\r\n    \toptions.HeaderName = \"X-XSRF-TOKEN\";\r\n    });\r\n\r\nThis works fine most of the time, except for two situations.\r\n\r\nThe first issue is with Controller Actions that call `signInManager.PasswordSignInAsync` and `signInManager.SignOutAsync`.\r\n\r\nThese two methods make changes to the HttpContext.User, but those changes are only available for the next request, not the current request.\r\n\r\nThe second problem is that the tokens are generated before the Controller Actions are called.\r\n\r\nThis means that even if HttpContext.User was being set, it wouldn't have been set before the tokens are generated.\r\n\r\nI tried changing the `app.Use` to set the cookie after `next(context);` but at that point the `context.Response` is already being sent to the user and cannot be modified.\r\n\r\nI tried to have the `Login` action modify the cookie value, but `HttpContext.Response.Cookies` doesn't allow for modifying existing cookies.","Url":"https://github.com/aspnet/Identity/issues/1968","RelatedDescription":"Closed issue \"AntiForgeryTokens in Single Page Applications with ASP.Net Core Identity\" (#1968)"},{"Id":"358850098","IsPullRequest":true,"CreatedAt":"2018-09-12T19:04:29","Actor":"Rick-Anderson","Number":"1962","RawContent":null,"Title":"Update IdentityServiceCollectionExtensions.cs","State":"closed","Body":"Fix Copy/paste error from `AddIdentity<TUser, TRole>`","Url":"https://github.com/aspnet/Identity/pull/1962","RelatedDescription":"Closed or merged PR \"Update IdentityServiceCollectionExtensions.cs\" (#1962)"},{"Id":"359285371","IsPullRequest":false,"CreatedAt":"2018-09-12T01:51:31","Actor":"swaghost","Number":"1964","RawContent":null,"Title":"Does this package have a hard dependency on Microsoft.EntityFrameworkCore 2.1.1?","State":"open","Body":"\r\n[reproduce.instructions.pdf](https://github.com/aspnet/Identity/files/2385719/reproduce.instructions.pdf)\r\n[Error Message.txt](https://github.com/aspnet/Identity/files/2385720/Error.Message.txt)\r\n[qs.site.zip](https://github.com/aspnet/Identity/files/2385721/qs.site.zip)\r\n\r\n\r\nHave upgraded entire project to 2.1.3. or 2.1.2 where necessary.  I've got some typescript-generating T4 template code (a forked version of TypeLite https://www.nuget.org/packages/TypeLite/1.8.4, but the original would suffice) that when run is saying (even though I have everything upgraded to 2.1.3, or 2.1.2 where that's the latest) that it can't load Microsoft.EntityFrameworkCore 2.1.1, even though I have Microsoft.EntityFrameworkCore 2.1.3 installed. The whole project works unchanged with 2.1.2 (or previous versions). Updating to 2.1.3 jacks it up.  Will try and post a bare-bones sample project shortly.\r\n[Upgrade Error Info.0.txt](https://github.com/aspnet/Identity/files/2373282/Upgrade.Error.Info.0.txt)\r\n\r\nI've updated with files and instructions to reproduce. \r\n","Url":"https://github.com/aspnet/Identity/issues/1964","RelatedDescription":"Open issue \"Does this package have a hard dependency on Microsoft.EntityFrameworkCore 2.1.1?\" (#1964)"},{"Id":"358236425","IsPullRequest":true,"CreatedAt":"2018-09-11T09:24:42","Actor":"Rick-Anderson","Number":"1959","RawContent":null,"Title":"Update IdentityServiceCollectionExtensions.cs","State":"closed","Body":"Fix Copy/paste error from `AddIdentity<TUser, TRole>`","Url":"https://github.com/aspnet/Identity/pull/1959","RelatedDescription":"Closed or merged PR \"Update IdentityServiceCollectionExtensions.cs\" (#1959)"},{"Id":"358865254","IsPullRequest":false,"CreatedAt":"2018-09-11T02:42:53","Actor":"alonstar","Number":"1963","RawContent":null,"Title":"SignInManager.PasswordSignInAsync will cause redirect (302) When 2FA is enabled.","State":"open","Body":"Identity 2.1.3 & AspNetCore.App 2.1.3\r\n\r\nI need to verify 2FA but signInManager.PasswordSignInAsync will cause Response.StatusCode = 302.\r\nIt will redirect to home index.\r\n\r\nHow can I prevent it to do this?\r\n\r\nNow I added HttpContext.Response.StatusCode = (int)HttpStatusCode.OK  after PasswordSignInAsync to prevent it redirect.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1963","RelatedDescription":"Open issue \"SignInManager.PasswordSignInAsync will cause redirect (302) When 2FA is enabled.\" (#1963)"},{"Id":"358278364","IsPullRequest":false,"CreatedAt":"2018-09-08T09:04:53","Actor":"pekspro","Number":"1961","RawContent":null,"Title":"Identities aren’t stored when using an in-memory database","State":"open","Body":"\r\n\r\n* Create a new ASP.NET Core Web Application.\r\n* Select ASP.NET Core 2.1, Web Application and change authentication to Individual User Accounts.\r\n* In startup.cs replace:\r\n\r\n\r\n      services.AddDbContext<ApplicationDbContext>(options =>\r\n        options.UseSqlServer(\r\n        Configuration.GetConnectionString(\"DefaultConnection\")));\r\n\r\nwith\r\n\r\n    services.AddDbContext<ApplicationDbContext>(options =>\r\n        options.UseInMemoryDatabase(Guid.NewGuid().ToString()));\r\n\r\nRun the application and register an account. Logout and try to login with the created account. This will fail.\r\n\r\nIt looks like nothing is written in the Users-table when an account is registered.\r\n\r\nI know there are [some limitations](https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory) when using an in-memory database, but shouldn’t this work? If it’s not supported I would prefer an exception than the current behavior.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1961","RelatedDescription":"Open issue \"Identities aren’t stored when using an in-memory database\" (#1961)"},{"Id":"358252848","IsPullRequest":false,"CreatedAt":"2018-09-08T01:36:05","Actor":"aspnet-hello","Number":"1960","RawContent":null,"Title":"Test failure: IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=548856&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nSystem.Net.Http.HttpRequestException : The SSL connection could not be established, see inner exception.\r\n---- System.IO.IOException : Authentication failed because the remote party has closed the transport stream.\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at System.Net.Http.HttpClient.GetStringAsyncCore(Task`1 getTask)\r\n   at Microsoft.AspNetCore.Identity.Test.IdentityUIScriptsTest.IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent(ScriptTag scriptTag) in /_/test/Identity.Test/IdentityUIScriptsTest.cs:line 71\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions, CancellationToken cancellationToken, AsyncCallback asyncCallback, Object asyncState)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__47_0(SslClientAuthenticationOptions arg1, CancellationToken arg2, AsyncCallback callback, Object state)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2](Func`5 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Identity/issues/1960","RelatedDescription":"Open issue \"Test failure: IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent\" (#1960)"},{"Id":"358218618","IsPullRequest":false,"CreatedAt":"2018-09-07T21:35:07","Actor":"mkArtakMSFT","Number":"1958","RawContent":null,"Title":"Include docXML content in the published package for IdentityUI","State":"open","Body":"","Url":"https://github.com/aspnet/Identity/issues/1958","RelatedDescription":"Open issue \"Include docXML content in the published package for IdentityUI\" (#1958)"},{"Id":"357806358","IsPullRequest":false,"CreatedAt":"2018-09-06T20:05:41","Actor":"feldrim","Number":"1957","RawContent":null,"Title":"Usage of IdentityRole","State":"open","Body":"I know claims are the best practice here but there are some cases where Roles are needed. And I have checked out issues, yet couldn't find any answer. It might be my mistake though.\r\n\r\nAlthough Identity namespace has IdentityRole class, \r\n\r\n1. `Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder` does only have `RequireRole(IEnumerable<string> roles)` and `RequireRole(params string[] roles)`, which obviously accepts string as parameter.\r\n2. `System.Security.Claims.ClaimsPrincipal` does only have `IsInRole(string role)`, which also accepts string as parameter.\r\n\r\nI have added my own IdentityRole class where some audit properties like CreatedAt, CreatedBy etc. and had to inherit those two classess implementing my own IdentityRole. But at some points it had lead me to reimplement whole Identity assembly, which is a totally bad idea.\r\n\r\nWhile there is IdentityRole class, why we use string as roles?","Url":"https://github.com/aspnet/Identity/issues/1957","RelatedDescription":"Open issue \"Usage of IdentityRole\" (#1957)"},{"Id":"357506199","IsPullRequest":false,"CreatedAt":"2018-09-06T05:56:52","Actor":"yucelakpinar","Number":"1956","RawContent":null,"Title":"OpenIdConnect doesn't sign-in user if Individual accounts is also configured.","State":"open","Body":"Hello,\r\n\r\nI'm new on asp.net core & asp.net identity, so that couldn't undestand what is happening on my app.\r\nI configured individual accounts on my app with adding `services.AddIdentity<IdentityUser, IdentityRole>()` on StartUp file and it works well.\r\nOn another code branch I also configured Azure AD login with adding `services.AddAuthentication().AddOpenIdConnect()` on StartUp file (in this branch individual account is not added) and it works well too.\r\nThen I merge both branches which means that I want to use both authentications on my app, individual accounts still working, but Azure AD login doesn't working.\r\n\r\nHere is my StartUp file.\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n        services\r\n            .AddDbContext<ApplicationDataContext>(options =>\r\n            {\r\n                options.UseInMemoryDatabase(\"testdb\");\r\n            });\r\n\r\n        services\r\n            .AddIdentity<IdentityUser, IdentityRole>()\r\n            .AddEntityFrameworkStores<ApplicationDataContext>();\r\n\r\n        services\r\n            .AddAuthentication(sharedOptions =>\r\n            {\r\n                sharedOptions.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n            })\r\n            .AddOpenIdConnect(\"myAzureAD\", options =>\r\n            {\r\n                options.ClientId = \"xxx\";\r\n                options.Authority = \"https://login.microsoftonline.com/xxx\";\r\n                options.CallbackPath = \"/signin-oidc\";\r\n                options.RequireHttpsMetadata = false;\r\n            })\r\n            .AddCookie();\r\n\r\n        services.AddMvc();\r\n}\r\n```\r\n\r\n\r\nFailed Case: After returning back to my web app from authentication on azure website, on /signin-oidc page 'Identity.External' cookie is added to the response, then this page make a 302 redirect to the my return-url, but on my return-url when I check the User.Identity.IsAuthenticated property, its value is False (which was True when individual account not configured on StartUp file)\r\n\r\nSteps:\r\n\r\n1.Forward client to azure authentication website with following code: \r\n`public IActionResult LoginWithOpenId(string returnUrl)\r\n{\r\nreturn Challenge(\"myAzureAD\");\r\n}\r\n`\r\n2.Login on azure website.\r\n3.Return back to callback path(/signin-oidc).\r\n3.Callback page set the required cookies.('Identity.External')\r\n4.Forwarded to return-url by 302 redirect from callback page.\r\n5.Check User.Identity.IsAuthenticated is False.\r\n\r\n\r\nNote:I hope someone can help me, I ask this question to stackoverflow.com but no give any answer :(.\r\n\r\nBest Regards\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1956","RelatedDescription":"Open issue \"OpenIdConnect doesn't sign-in user if Individual accounts is also configured.\" (#1956)"},{"Id":"356516824","IsPullRequest":false,"CreatedAt":"2018-09-04T20:07:19","Actor":"stardocs-services","Number":"1953","RawContent":null,"Title":"Adding roles with same names for different applications","State":"closed","Body":"I have just extended my IdentityRole like this:\r\n\r\n```\r\npublic class AspApplicationRoles : IdentityRole\r\n{\r\n    public AspApplicationRoles() : base() { }\r\n    public AspApplicationRoles(String Name) : base(Name) { }\r\n    [Required]\r\n    public String ApplicationId { get; set; }\r\n    public AspNetApplications Application { get; set; }\r\n}\r\n```\r\nThen, in order to add the same role names but have a different ApplicationId, I created a custom rolevalidator like this:\r\n\r\n```\r\npublic class ApplicationRoleValidator<TRole> : RoleValidator<TRole> where TRole : AspApplicationRoles\r\n    {\r\n        private RoleManager<TRole, string> Manager { get; set; }\r\n        private AspApplicationRoles data = new AspApplicationRoles();\r\n        private ApplicationDbContext dbContext = new ApplicationDbContext();\r\n\r\n        public ApplicationRoleValidator(RoleManager<TRole, string> manager) : base(manager)\r\n        {\r\n            Manager = manager;\r\n        }\r\n\r\n        public override async Task<IdentityResult> ValidateAsync(TRole Input)\r\n        {\r\n            data = dbContext.AspApplicationRoles.Where(ar => ar.ApplicationId == Input.ApplicationId && ar.Name == Input.Name).SingleOrDefault();\r\n            if (data == null)\r\n            {\r\n                return IdentityResult.Success;\r\n            }\r\n            else\r\n            {\r\n                return IdentityResult.Failed(\"Role already exists\");\r\n            }\r\n        }\r\n    }\r\n```\r\nI then had to change my applicationRoleManagers like this:\r\n\r\n```\r\npublic class ApplicationRoleManager : RoleManager<AspApplicationRoles>\r\n{\r\n    public ApplicationRoleManager(IRoleStore<AspApplicationRoles, string> roleStore)\r\n        : base(roleStore)\r\n    {\r\n        RoleValidator = new ApplicationRoleValidator<AspApplicationRoles>(this);\r\n    }\r\n    public static ApplicationRoleManager Create(IdentityFactoryOptions<ApplicationRoleManager> options, IOwinContext context)\r\n    {\r\n        var manager = new ApplicationRoleManager(new ApplicationRoleStore(context.Get<ApplicationDbContext>()));\r\n        return manager;\r\n    }\r\n}\r\n```\r\nI have also removed the unique key on the database tables like this:\r\n\r\n```\r\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n    {\r\n        base.OnModelCreating(modelBuilder);\r\n\r\n        var role = modelBuilder.Entity<IdentityRole>()\r\n            .ToTable(\"AspNetRoles\");\r\n        role.Property(r => r.Name)\r\n            .IsRequired()\r\n            .HasMaxLength(256)\r\n            .HasColumnAnnotation(\"Index\", new IndexAnnotation(\r\n                new IndexAttribute(\"RoleNameIndex\")\r\n                { IsUnique = false }));\r\n    }\r\n```\r\n\r\nHowever, I still can't have the same role names and I still get EntityValidationError \"Role Manager already exists. I have tried to search for a solution but I can't seem to find it or see it.","Url":"https://github.com/aspnet/Identity/issues/1953","RelatedDescription":"Closed issue \"Adding roles with same names for different applications\" (#1953)"},{"Id":"356845718","IsPullRequest":false,"CreatedAt":"2018-09-04T15:06:56","Actor":"sintetico82","Number":"1955","RawContent":null,"Title":"AS.NET Core 2.1 - Password forgot: Invalid Token","State":"closed","Body":"Hello,\r\nI have the **invalid code** on the forgot password procedure. In the razor pages scaffolding template i have:\r\n\r\nthe `ForgotPassword` razor page\r\n```\r\n                // For more information on how to enable account confirmation and password reset please \r\n                // visit https://go.microsoft.com/fwlink/?LinkID=532713\r\n                var code = await _userManager.GeneratePasswordResetTokenAsync(user);\r\n                var callbackUrl = Url.Page(\r\n                    \"/Account/ResetPassword\",\r\n                    pageHandler: null,\r\n                    values: new { code },\r\n                    protocol: Request.Scheme);\r\n                await _emailSender.SendEmailAsync(\r\n                    Input.Email,\r\n                    \"Reset Password\",\r\n                    $\"PEr eseguire il reset della password <a href='{ HtmlEncoder.Default.Encode(callbackUrl)}'>seguire questo link</a>.\");\r\n\r\n                return RedirectToPage(\"./ForgotPasswordConfirmation\");\r\n```\r\n\r\nIt encode the token but when the token arrive on the `ResetPassword` razor page it dosent decode as well:\r\n\r\n```\r\n public IActionResult OnGet(string code = null)\r\n        {\r\n            if (code == null)\r\n            {\r\n                return BadRequest(\"A code must be supplied for password reset.\");\r\n            }\r\n            else\r\n            {\r\n                Input = new InputModel\r\n                {\r\n                    Code = code\r\n                };\r\n                return Page();\r\n            }\r\n        }\r\n```\r\n\r\nSo they are different.\r\n","Url":"https://github.com/aspnet/Identity/issues/1955","RelatedDescription":"Closed issue \"AS.NET Core 2.1 - Password forgot: Invalid Token\" (#1955)"},{"Id":"356125543","IsPullRequest":false,"CreatedAt":"2018-08-31T21:14:36","Actor":"layinka","Number":"1952","RawContent":null,"Title":"Login not working on Firefox private mode","State":"open","Body":"Hi,\r\nI am experiencing something  very weird, I am currently using  the asp.net core identity 2.1.1. I noticed that the login works well on chrome(both normal and incognito mode) and works well on firefox, but when i tried it in Firefox private mode, the login form redirected to the homepage without login me in\r\n\r\nAnyone else experience this?\r\nI am using Firfox 60.0.1","Url":"https://github.com/aspnet/Identity/issues/1952","RelatedDescription":"Open issue \"Login not working on Firefox private mode\" (#1952)"},{"Id":"356052944","IsPullRequest":false,"CreatedAt":"2018-08-31T16:48:20","Actor":"natemcmaster","Number":"1951","RawContent":null,"Title":"Compiler error CS0433 caused by duplicate types: IdentityServiceCollectionExtensions","State":"open","Body":"We have two types in the different assemblies with the same name. This can lead to unresolvable compiler errors when referencing Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions\r\n\r\n> error CS0433: The type 'IdentityServiceCollectionExtensions' exists in both 'Microsoft.AspNetCore.Identity, Version=2.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' and 'Microsoft.Extensions.Identity.Core, Version=2.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'\r\n\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/Identity/IdentityServiceCollectionExtensions.cs\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/Core/IdentityServiceCollectionExtensions.cs\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1951","RelatedDescription":"Open issue \"Compiler error CS0433 caused by duplicate types: IdentityServiceCollectionExtensions\" (#1951)"},{"Id":"355782929","IsPullRequest":true,"CreatedAt":"2018-08-31T02:03:30","Actor":"dotnet-maestro-bot","Number":"1950","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1950","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1950)"},{"Id":"355522577","IsPullRequest":false,"CreatedAt":"2018-08-30T22:23:56","Actor":"A51UK","Number":"1949","RawContent":null,"Title":"Can ASP.NET Identity 2.1 be made to use MVC UI not Web Pages?","State":"closed","Body":"I just try out the ASP.NET Identity 2.1, and was think of upgrade a project from Identity 2.0 to Identity 2.1 but found that it have been turn to the Web Pages Modal not the MVC one, is there a way to pick which ASP.NET Identity 2.1 UI modal to use (e.g. MVC not Web Pages)?  If not it would be a good think to added in the next update. ","Url":"https://github.com/aspnet/Identity/issues/1949","RelatedDescription":"Closed issue \"Can ASP.NET Identity 2.1 be made to use MVC UI not Web Pages?\" (#1949)"},{"Id":"355483965","IsPullRequest":false,"CreatedAt":"2018-08-30T08:44:19","Actor":"GuidoNeele","Number":"1948","RawContent":null,"Title":"User signed out after requesting /Identity/Account/Manage/TwoFactorAuthentication","State":"open","Body":"ASP.NET Core 2.1.1\r\n\r\nI've configured an asp.net core mvc project with Identity. I'm using the default UI but have scaffolded it because had to translate it to Dutch. When I navigate to the Manage pages everything works well until /Identity/Account/Manage/TwoFactorAuthentication is requested. The page is shown but the user has been signed out. After navigating away the user is redirected to the login page. The issue is triggered by \r\nhttps://github.com/aspnet/Identity/blob/fcc02103aa10dcdd8759e0463cac2717114f3c1e/src/UI/Areas/Identity/Pages/V3/Account/Manage/TwoFactorAuthentication.cshtml.cs#L58\r\n\r\n```\r\nStartup.cs\r\n...\r\nservices.AddDbContext<ApplicationDbContext>(options =>\r\n        options\r\n          .UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\r\n\r\nservices\r\n    .AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n    {\r\n        options.Password.RequiredLength = 10;\r\n        options.Password.RequireDigit = false;\r\n        options.Password.RequiredUniqueChars = 0;\r\n        options.Password.RequireLowercase = false;\r\n        options.Password.RequireNonAlphanumeric = false;\r\n        options.Password.RequireUppercase = false;\r\n    })\r\n    .AddDefaultUI()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    options.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n    options.SlidingExpiration = true;\r\n});\r\n\r\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme);\r\n...\r\n```\r\n\r\n```\r\nDebug output\r\n...\r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request starting HTTP/1.1 GET http://localhost:44308/Identity/Account/Manage/TwoFactorAuthentication  \r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker:Information: Route matched with {page = \"/Account/Manage/TwoFactorAuthentication\", area = \"Identity\", action = \"\", controller = \"\"}. Executing action /Account/Manage/TwoFactorAuthentication\r\nMicrosoft.AspNetCore.Authorization.DefaultAuthorizationService:Information: Authorization was successful.\r\nMicrosoft.AspNetCore.Authorization.DefaultAuthorizationService:Information: Authorization was successful.\r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker:Information: Executing handler method OnGet with arguments ((null)) - ModelState is Valid\r\nMicrosoft.EntityFrameworkCore.Infrastructure:Information: Entity Framework Core 2.1.1-rtm-30846 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[Id], [e].[AccessFailedCount], [e].[ConcurrencyStamp], [e].[Email], [e].[EmailConfirmed], [e].[FirstName], [e].[FullName], [e].[InviteSecret], [e].[IsInvited], [e].[LastLogin], [e].[LastName], [e].[LockoutEnabled], [e].[LockoutEnd], [e].[NormalizedEmail], [e].[NormalizedUserName], [e].[PasswordHash], [e].[PhoneNumber], [e].[PhoneNumberConfirmed], [e].[SecurityStamp], [e].[TwoFactorEnabled], [e].[UserName]\r\nFROM [AspNetUsers] AS [e]\r\nWHERE [e].[Id] = @__get_Item_0\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450), @__get_Item_1='?' (Size = 450), @__get_Item_2='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[UserId], [e].[LoginProvider], [e].[Name], [e].[Value]\r\nFROM [AspNetUserTokens] AS [e]\r\nWHERE (([e].[UserId] = @__get_Item_0) AND ([e].[LoginProvider] = @__get_Item_1)) AND ([e].[Name] = @__get_Item_2)\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[Id], [e].[AccessFailedCount], [e].[ConcurrencyStamp], [e].[Email], [e].[EmailConfirmed], [e].[FirstName], [e].[FullName], [e].[InviteSecret], [e].[IsInvited], [e].[LastLogin], [e].[LastName], [e].[LockoutEnabled], [e].[LockoutEnd], [e].[NormalizedEmail], [e].[NormalizedUserName], [e].[PasswordHash], [e].[PhoneNumber], [e].[PhoneNumberConfirmed], [e].[SecurityStamp], [e].[TwoFactorEnabled], [e].[UserName]\r\nFROM [AspNetUsers] AS [e]\r\nWHERE [e].[Id] = @__get_Item_0\r\n**Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: AuthenticationScheme: Identity.Application signed out.\r\nMicrosoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: AuthenticationScheme: Identity.External signed out.\r\nMicrosoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: AuthenticationScheme: Identity.TwoFactorUserId signed out.\r\nMicrosoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: Identity.TwoFactorRememberMe was not authenticated. Failure message: No principal.**\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450), @__get_Item_1='?' (Size = 450), @__get_Item_2='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[UserId], [e].[LoginProvider], [e].[Name], [e].[Value]\r\nFROM [AspNetUserTokens] AS [e]\r\nWHERE (([e].[UserId] = @__get_Item_0) AND ([e].[LoginProvider] = @__get_Item_1)) AND ([e].[Name] = @__get_Item_2)\r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker:Information: Executed action /Account/Manage/TwoFactorAuthentication in 17174.327ms\r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 17189.4446ms 200 text/html; charset=utf-8\r\n...\r\n```\r\n\r\n```\r\n.csproj\r\n...\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.DataProtection.AzureStorage\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Proxies\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.1.1\" />\r\n</ItemGroup>\r\n...\r\n```\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1948","RelatedDescription":"Open issue \"User signed out after requesting /Identity/Account/Manage/TwoFactorAuthentication\" (#1948)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"363822844","IsPullRequest":false,"CreatedAt":"2018-09-26T01:22:04","Actor":"slav","Number":"2957","RawContent":null,"Title":".NET core app hangs on exit and on failed to bind on consecutive restart","State":"open","Body":"We have a .NET Core 2.1 app running on Windows Server in Azure VM. It's using default ManagedSocket, but we think the issue was there with libuv too.\r\n\r\nAfter the application has been running for a while (days), when we try to shut it down, it hangs for several (5-10) minutes. When we look at it in ProcessExplorer to look at managed threads, there're non. There's single non-managed, empty thread. After a while the app exits (or gets shut down by windows? But nothing in event log). When we try to restart it again we're getting the following error.\r\n\r\nWe're launching the app as a service through NSSM, which launches cmd batch file with command to launch the application.\r\n\r\nNeither netstat nor netsh http show urlacl show that port 8080 is used. It's as if the socket is bound to, but no one is listening on it so port doesn't show up in use anywhere.\r\n\r\nThe only solution is to restart the machine.\r\n\r\nI'm at a loss at why the app hangs on shut down or why we can't restart it on the same port again. It launches fine on the other ports. If it hasn't been running for a while, but a short time period it shuts down fine.\r\n\r\nThe app is being pinged either by Azure LB for health check, so maybe some connection remain opens.\r\n\r\nI'm at a loss at how to even begin to diagnose this situation? This started when we switched the app from .NET Framework to .NET Core. It worked fine in .NET Framework, never had a situation with shutdown hanging with no managed threads and then address being already in use while netstat not showing the port being used by any process.\r\n\r\n```\r\n      Unable to start Kestrel.\r\nSystem.IO.IOException: Failed to bind to address http://0.0.0.0:8080: address already in use. ---> Microsoft.AspNetCore.Connections.Add\r\nressInUseException: Only one usage of each socket address (protocol/network address/port) is normally permitted ---> System.Net.Sockets\r\n.SocketException: Only one usage of each socket address (protocol/network address/port) is normally permitted\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext cont\r\next)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext cont\r\next)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions.BindAsync(AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.BindAsync(AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions\r\n serverOptions, ILogger logger, Func`2 createBinding)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken can\r\ncellationToken)\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2957","RelatedDescription":"Open issue \".NET core app hangs on exit and on failed to bind on consecutive restart\" (#2957)"},{"Id":"363808984","IsPullRequest":true,"CreatedAt":"2018-09-25T23:58:05","Actor":"halter73","Number":"2956","RawContent":null,"Title":"Add HTTP/2 response draining timeout","State":"open","Body":"- Add TimeoutControl class\r\n- Add HTTP/2 response draining timeout\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2956","RelatedDescription":"Open PR \"Add HTTP/2 response draining timeout\" (#2956)"},{"Id":"363423773","IsPullRequest":false,"CreatedAt":"2018-09-25T14:59:00","Actor":"mattiasw2","Number":"2955","RawContent":null,"Title":"Add support for syslog compatible priority numbers to our console logger.","State":"closed","Body":"An important part of journalctl is priorities. The standard logger should do this, since this is the way you will run kestrel on Linux.\r\n\r\nAdd support for syslog compatible priority numbers to our console logger.\r\n\r\nFor more info, see https://github.com/aspnet/KestrelHttpServer/issues/2679","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2955","RelatedDescription":"Closed issue \"Add support for syslog compatible priority numbers to our console logger.\" (#2955)"},{"Id":"363412660","IsPullRequest":false,"CreatedAt":"2018-09-25T05:12:53","Actor":"aspnet-hello","Number":"2954","RawContent":null,"Title":"Test failure: ResponseBodyWriteAsyncCanBeCancelled","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=560679&buildTypeId=Releases_22xPublic_Win2012) occasionally with the following error:\r\n```\r\nAssert.Throws() Failure\r\nExpected: typeof(System.OperationCanceledException)\r\nActual:   typeof(Xunit.Sdk.FalseException): Assert.False() Failure\r\nExpected: False\r\nActual:   True\r\n   at Microsoft.AspNetCore.Server.Kestrel.InMemory.FunctionalTests.ResponseTests.<>c__DisplayClass2_0.<<ResponseBodyWriteAsyncCanBeCancelled>b__0>d.MoveNext() in /_/test/Kestrel.InMemory.FunctionalTests/ResponseTests.cs:line 121\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.000s] TestLifetime Information: Starting test ResponseBodyWriteAsyncCanBeCancelled at 2018-09-25T04:28:27\r\n| [0.003s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly testhost\r\n| [0.004s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH2JT9V6KCA\" started.\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  \r\n| [0.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH2JT9V6KCA\" completed keep alive response.\r\n| [0.011s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 7.1016ms 200 \r\n| [0.017s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH2JT9V6KCA\" disconnecting.\r\n| [0.017s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.018s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH2JT9V6KCA\" stopped.\r\n| [0.020s] TestLifetime Information: Finished test ResponseBodyWriteAsyncCanBeCancelled in 0.0195806s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2954","RelatedDescription":"Open issue \"Test failure: ResponseBodyWriteAsyncCanBeCancelled\" (#2954)"},{"Id":"363354805","IsPullRequest":true,"CreatedAt":"2018-09-25T00:31:53","Actor":"dotnet-maestro-bot","Number":"2952","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2952","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2952)"},{"Id":"363355771","IsPullRequest":true,"CreatedAt":"2018-09-24T23:24:25","Actor":"JunTaoLuo","Number":"2953","RawContent":null,"Title":"Impose limits on decoded integers via HPACK","State":"open","Body":"Addresses: https://github.com/aspnet/KestrelHttpServer/issues/2922. Setting the limit to Int32.MaxValue for now since that's also the limit for request header field size. ","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2953","RelatedDescription":"Open PR \"Impose limits on decoded integers via HPACK\" (#2953)"},{"Id":"362396320","IsPullRequest":true,"CreatedAt":"2018-09-24T22:45:58","Actor":"Tratcher","Number":"2945","RawContent":null,"Title":"Make HTTP/2 connection and stream windows configurable","State":"closed","Body":" #2814  Allowing the window size to be set larger than the protocol default of 64kb is easy and I think I've got that covered. I picked a kestrel default only modestly larger than the protocol default for two reasons:\r\n1) For maximum interop testing for non-protocol defaults, especially sending that initial window update when the connection is first negotiated.\r\n2) We don't want it to be too large because it directly correlates to server side buffer sizes.\r\n\r\nAllowing the value to be set lower than the protocol default has some challenges and is the reason this is still WIP. I have a commented out test case covering this (SETTINGS_ServerInitialWindowSizeLowerThanDefault). The root of the problem is that the client is allowed to send frames immediately after opening the connection using the default limits. They don't have to wait for the server's settings frame that may lower the limits. This means the server can't enforce a limit lower than the protocol default until it gets a settings ack.\r\n\r\nThere are ways to deal with this:\r\nA) Do nothing, disallow setting the initial window size to a value lower than the protocol default.\r\nB) Use the lower limit, allow input flow control to go negative so long as it doesn't go past what the protocol default would have been, but leave the pipe limits at the protocol default size. This is almost the same as A in practice, the lower limits are not really enforced.\r\nC) Use the protocol defaults for the window size and pipe buffers until we get a settings ack, then lower them (possibly negative). This would require implementing a settings ack timeout #2901, implementing temporary negative flow control, and optionally re-adjusting the pipe thresholds ([not currently possible](https://github.com/dotnet/corefx/issues/30689)). \r\n\r\nOption C has some value in letting you reduce your limit enforcement, but it's quite complicated. Option A is by far the simplest and easiest for the short term. @shirhatti @halter73 I'll check with you on this tomorrow.\r\n\r\n[Edit: clarifications on pipes]","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2945","RelatedDescription":"Closed or merged PR \"Make HTTP/2 connection and stream windows configurable\" (#2945)"},{"Id":"362800251","IsPullRequest":true,"CreatedAt":"2018-09-24T18:21:13","Actor":"JunTaoLuo","Number":"2949","RawContent":null,"Title":"Add configurability for max header field size in HPACK","State":"closed","Body":"Addresses https://github.com/aspnet/KestrelHttpServer/issues/2872","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2949","RelatedDescription":"Closed or merged PR \"Add configurability for max header field size in HPACK\" (#2949)"},{"Id":"362904150","IsPullRequest":false,"CreatedAt":"2018-09-23T01:19:57","Actor":"Tratcher","Number":"2951","RawContent":null,"Title":"Implement HPack dynamic compression","State":"open","Body":"Today Kestrel does not use any of the HPack compression features when serializing response headers. Dynamic compression is an advanced option we could look into.\r\n\r\nLikely candidates:\r\n- Server: Kestrel\r\n- Content-Encoding: gzip\r\n- Content-Encoding: brotli \r\n- Content-Type (and a dozen common values)\r\n- strict-transport-security\r\n\r\nNote the client gets more benefits from dynamic compression, especially browsers, they send a lot of repetitive headers. HttpClient would get some benefit for things like :authority, :method, :scheme, accept-encoding, \r\n\r\nRelated work:\r\n- Static compression #2950\r\n- Huffman encoding #2683","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2951","RelatedDescription":"Open issue \"Implement HPack dynamic compression\" (#2951)"},{"Id":"362903516","IsPullRequest":false,"CreatedAt":"2018-09-23T01:07:55","Actor":"Tratcher","Number":"2950","RawContent":null,"Title":"Implement HPack static compression","State":"open","Body":"Today Kestrel does not use any of the HPack compression features when serializing response headers. Static compression looks like the easiest place to start.\r\n\r\nDesign notes:\r\n- The static table is here: https://tools.ietf.org/html/rfc7541#appendix-A\r\n- Make an enum that maps to the static header names. Associate this with the known headers in the response header collection.\r\n- Rather than passing in an enumeration of `<string, string>` to the encoder, come up with another structure that allows passing in either the enum values or the strings.\r\n- Stretch: the :status pseudo header has 7 static entries that include common values. All of the other static header values are request headers (though shared code with HttpClient would want to take advantage of those).\r\n\r\nRelated work:\r\n- Dynamic compression #2951\r\n- Huffman encoding https://github.com/aspnet/KestrelHttpServer/issues/2683","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2950","RelatedDescription":"Open issue \"Implement HPack static compression\" (#2950)"},{"Id":"362706039","IsPullRequest":false,"CreatedAt":"2018-09-21T17:18:42","Actor":"Tratcher","Number":"2948","RawContent":null,"Title":"Allow setting InitialWindowSize lower than the protocol default","State":"open","Body":"This is a spinoff of https://github.com/aspnet/KestrelHttpServer/issues/2814. Setting the initial window size to any value larger than the protocol default is easy and was implemented in the first PR. However small servers may want lower values to save memory. Setting the window size to a value lower than the default requires some additional juggling that we weren't prepared for yet. \r\n\r\nThe root of the problem is that the client is allowed to send frames immediately after opening the connection using the default limits. They don't have to wait for the server's settings frame that may lower the limits. This means the server can't enforce a limit lower than the protocol default until it gets a settings ack.\r\n\r\nProposal:\r\n- Implement the settings ack timeout #2901 to make sure we can eventually enforce the limits.\r\n- Use the protocol default values for the pipe and stream window size initially. See the note about connection windows below.\r\n- Lowering the window size for the connection is trickier. The settings frame only applies to streams, there's no way to send a negative connection window update to the client. We have to start with the default value and then lower it by skipping/shrinking normal window updates that would have restored the window to the original size. At least this isn't dependent on the settings ack.\r\n- When we get the settings ack we can lower the window size for streams accordingly. This may temporarily make them go negative, but that's OK so long as the client doesn't send any more data in the meantime.\r\n- Pipes don't have a way to lower their limits [yet](https://github.com/dotnet/corefx/issues/30689), but that's not required here, it's only a safety mechanism. The flow control window should prevent too much data from being written to the pipe. There's an Assert if we ever hit back pressure from the stream pipes.\r\n\r\nNote InitialWindowSize was split into InitialConnectionWindowSize and InitialStreamWindowSize ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2948","RelatedDescription":"Open issue \"Allow setting InitialWindowSize lower than the protocol default\" (#2948)"},{"Id":"362597561","IsPullRequest":false,"CreatedAt":"2018-09-21T13:20:34","Actor":"grzesiek-galezowski","Number":"2947","RawContent":null,"Title":"Any way to provide custom body for HTTP errors returned from Kestrel?","State":"closed","Body":"Hi,\r\n\r\nI run an ASP.NET Core 2.0 app on top of kestrel and when I send it an HTTP request without Content-Length set, I get (as expected) the following error:\r\n\r\n```\r\nHTTP/1.1 411 Length Required\r\nConnection: close\r\nDate: Fri, 21 Sep 2018 12:38:10 GMT\r\nServer: Kestrel\r\nContent-Length: 0\r\n```\r\n\r\nMy question is: is it possible to add custom body to this error? I tried doing it through ASP.NET Core features like middleware, error handlers, exception handlers and filters, but it appears the error is being returned from the Kestrel code before hitting any of these places.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2947","RelatedDescription":"Closed issue \"Any way to provide custom body for HTTP errors returned from Kestrel?\" (#2947)"},{"Id":"362482498","IsPullRequest":false,"CreatedAt":"2018-09-21T07:03:26","Actor":"dustinmoris","Number":"2946","RawContent":null,"Title":"Route arguments are weirdly decoded","State":"open","Body":"Hi,\r\n\r\nSo currently Kestrel seems to have made an odd choice to weirdly decode route arguments.\r\n\r\nAn ASP.NET Core web application doesn't get to see the real route arguments which a client has sent, but equally doesn't get presented with properly URL decoded arguments either. It doesn't follow any standard decoding algorithm and sort of returns an unexpected result.\r\n\r\nFor example, a route argument would decode `%3A`, but wouldn't decode `%2F`. This is extremely annoying, because code which works with route arguments doesn't really know what is going on. Is the string already decoded or not? There is also no function in the standard library which would help to correctly decode the remaining encoded parts of a route argument. If the string value would be passed into `WebUtility.UrlDecode` then it would create bugs, because the `+` sign would get decoded twice.\r\n\r\nI would like to propose that Kestrel, the web server, shouldn't take the decision to decode any route arguments and leave that responsibility up to the actual framework on top of it (MVC, NancyFx, Giraffe, etc.). As a framework author it would make more sense to give this control to the web framework which might want to see the original URL which a client has actually called.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2946","RelatedDescription":"Open issue \"Route arguments are weirdly decoded\" (#2946)"},{"Id":"360630669","IsPullRequest":false,"CreatedAt":"2018-09-20T16:59:38","Actor":"lorenzos70","Number":"2936","RawContent":null,"Title":"The connection was closed because the response was not read by the client at the specified minimum data rate","State":"closed","Body":"Hello,\r\n\r\nI have a .net 4.6.2 project (for my web apis) that is referencing, among other libraries, Microsoft.AspNetCore 2.1.3. I recently upgraded it from version 1.1. Since the upgrade I experienced the following issues on my production win 2016 server:\r\n \r\n- my api logs often show the following messages: \r\n    1. Connection id \"\"xxxxxx\"\", Request id \"\"yyyyyy\"\": the connection was closed because the response was not read by the client at the specified minimum data rate\r\n            \r\n   2. the request timed out because it was not sent by the client at a minimum of 240 bytes/second\".\r\n           \r\n   3. [Warning] Connection processing ended abnormally.\r\n            Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted\r\n            at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n           at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n           at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n           at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n           at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol. \r\n           <ProcessRequests>d__188`1.MoveNext()--- End of stack trace from previous location where \r\n          exception was thrown ---   at \r\n         System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at \r\n         System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task \r\n         task)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol. \r\n        <ProcessRequestsAsync>d__187`1.MoveNext()\r\n\r\n- The apis become unresponsive (they are hosted on iis 10 on a windows 2016 server)\r\n- IIS logs show, at the same time, 502 errors while trying to call the api endoints \r\n- I also noticed heavy peaks of the CPU.\r\n\r\nRemarks: the web api load has not increased and there haven't been any other major changes, apart from the upgrade of the  Microsoft.AspNetCore that I mentioned above, so I am still trying to figure out what the problem could be. Any advice that could point me to the right direction?\r\nThanks\r\nLorenzo","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2936","RelatedDescription":"Closed issue \"The connection was closed because the response was not read by the client at the specified minimum data rate\" (#2936)"},{"Id":"361521245","IsPullRequest":true,"CreatedAt":"2018-09-18T23:28:55","Actor":"Tratcher","Number":"2944","RawContent":null,"Title":"Do not inherit socket handles","State":"open","Body":" #2789 If the accept socket's handle gets inherited by child processes, then it's not fully closed until all of the child processes are closed.\r\n\r\nConnected sockets don't seem to be affected.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2944","RelatedDescription":"Open PR \"Do not inherit socket handles\" (#2944)"},{"Id":"361066404","IsPullRequest":true,"CreatedAt":"2018-09-18T22:25:32","Actor":"dotnet-maestro-bot","Number":"2940","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @davidfowl\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2940","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2940)"},{"Id":"361486837","IsPullRequest":true,"CreatedAt":"2018-09-18T21:16:07","Actor":"dotnet-maestro-bot","Number":"2943","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @halter73\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2943","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#2943)"},{"Id":"361427383","IsPullRequest":true,"CreatedAt":"2018-09-18T21:11:29","Actor":"halter73","Number":"2942","RawContent":null,"Title":"Skip connection reset tests on macOS in 2.1","State":"closed","Body":"#2885","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2942","RelatedDescription":"Closed or merged PR \"Skip connection reset tests on macOS in 2.1\" (#2942)"},{"Id":"360405931","IsPullRequest":false,"CreatedAt":"2018-09-18T00:07:26","Actor":"tiago-soczek","Number":"2929","RawContent":null,"Title":"Category of some loggers are wrong - Name of Type instead Namespace+Type","State":"closed","Body":"Hi,\r\n\r\nWhile I was filtering log entries by category/source, I found these 2 loggers using just the Type name for the category of logging:\r\n\r\n----\r\n\r\nhttps://github.com/aspnet/KestrelHttpServer/blob/release/2.2/src/Kestrel.Core/Internal/HttpsConnectionAdapter.cs#L64\r\n\r\n----\r\n\r\nhttps://github.com/aspnet/KestrelHttpServer/blob/6fde01a825cffc09998d3f8a49464f7fbe40f9c4/src/Kestrel.Core/Adapter/ListenOptionsConnectionLoggingExtensions.cs#L33\r\n\r\n----\r\n\r\nIn this case, would be better to use the full type name (Namespace+Type), right?\r\n\r\nIf needed, I'm available to work on this issue.\r\n\r\nThanks.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2929","RelatedDescription":"Closed issue \"Category of some loggers are wrong - Name of Type instead Namespace+Type\" (#2929)"},{"Id":"361087755","IsPullRequest":false,"CreatedAt":"2018-09-18T00:04:58","Actor":"halter73","Number":"2941","RawContent":null,"Title":"[Discussion] Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2941","RelatedDescription":"Open issue \"[Discussion] Kestrel Connection Adapter Logging Namespace Changes\" (#2941)"},{"Id":"361026563","IsPullRequest":true,"CreatedAt":"2018-09-17T23:43:31","Actor":"halter73","Number":"2939","RawContent":null,"Title":"Initialize Heartbeat in KestrelServer.StartAsync","State":"closed","Body":"Fixes #2850 hopefully for good this time","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2939","RelatedDescription":"Closed or merged PR \"Initialize Heartbeat in KestrelServer.StartAsync\" (#2939)"},{"Id":"360605386","IsPullRequest":true,"CreatedAt":"2018-09-17T23:01:15","Actor":"tiago-soczek","Number":"2935","RawContent":null,"Title":"Fix category logger for HttpsConnectionAdapter and LoggingConnectionAdapter","State":"closed","Body":"Addresses: #2929.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2935","RelatedDescription":"Closed or merged PR \"Fix category logger for HttpsConnectionAdapter and LoggingConnectionAdapter\" (#2935)"},{"Id":"360548734","IsPullRequest":true,"CreatedAt":"2018-09-17T21:47:04","Actor":"davidfowl","Number":"2931","RawContent":null,"Title":"Remove calls to MemoryMarshal.GetReference","State":"closed","Body":"- Spans can be pinned natively in C# 7.3\r\n\r\ncc @jkotas @jaredpar (This is the moral equivalent right?)","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2931","RelatedDescription":"Closed or merged PR \"Remove calls to MemoryMarshal.GetReference\" (#2931)"},{"Id":"360489904","IsPullRequest":true,"CreatedAt":"2018-09-17T19:41:56","Actor":"JunTaoLuo","Number":"2930","RawContent":null,"Title":"Port long Huffman encoding bug fix","State":"closed","Body":"Addresses: https://github.com/aspnet/KestrelHttpServer/issues/2911","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2930","RelatedDescription":"Closed or merged PR \"Port long Huffman encoding bug fix\" (#2930)"},{"Id":"360972465","IsPullRequest":false,"CreatedAt":"2018-09-17T17:41:15","Actor":"aspnet-hello","Number":"2938","RawContent":null,"Title":"Test failure: RegisterAddresses_HostName_Success","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=555473&buildTypeId=Releases_22xPublic_OsxUniverse) occasionally with the following error:\r\n```\r\nSystem.Net.Sockets.SocketException : Operation timed out\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetSocket(Uri requestUri)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStream(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(String requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_Success(String addressInput, String[] testUrls, Int32 testPort) in /_/test/Kestrel.Transport.BindTests/AddressRegistrationTests.cs:line 191\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_HostName_Success() in /_/test/Kestrel.Transport.BindTests/AddressRegistrationTests.cs:line 40\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test RegisterAddresses_HostName_Success at 2018-09-17T17:21:36\r\n| [0.002s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.BindTests\r\n| [75.120s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [75.126s] TestLifetime Information: Finished test RegisterAddresses_HostName_Success in 75.1275877s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2938","RelatedDescription":"Open issue \"Test failure: RegisterAddresses_HostName_Success\" (#2938)"},{"Id":"360742185","IsPullRequest":false,"CreatedAt":"2018-09-17T06:52:40","Actor":"goldeneyezhang","Number":"2937","RawContent":null,"Title":"ASP.NET Core MVC，CPUs  Become  Higher Slowly","State":"open","Body":"We deploy Asp.net Core MVC on Linux,CPUs become higher slowly\r\nFrom Zabbix,we can see \r\n![cpu](https://user-images.githubusercontent.com/24731109/45608891-dca5ba00-ba87-11e8-9814-937e41e80cb6.png)\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.402/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.402 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\nWe use perf to collect info ,but have no idea.\r\n[sampleTrace.trace.zip](https://github.com/aspnet/KestrelHttpServer/files/2387535/sampleTrace.trace.zip)\r\nAny ideas on a possible cause?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2937","RelatedDescription":"Open issue \"ASP.NET Core MVC，CPUs  Become  Higher Slowly\" (#2937)"},{"Id":"360567805","IsPullRequest":false,"CreatedAt":"2018-09-15T19:16:11","Actor":"davidfowl","Number":"2934","RawContent":null,"Title":"Flaky test: ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure","State":"closed","Body":"```\r\nConnectionClosedWhenBothRequestAndResponseExperienceBackPressure [FAIL]\r\n17:27:20   Failed   ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure\r\n17:27:20   Error Message:\r\n17:27:20    System.TimeoutException : The operation at /_/test/shared/TaskTimeoutExtensions.cs:12 timed out after reaching the limit of 30000ms.\r\n17:27:20   Stack Trace:\r\n17:27:20      at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task`1 task, TimeSpan timeout, String filePath, Int32 lineNumber)\r\n17:27:20      at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure() in /_/test/Kestrel.Transport.FunctionalTests/ResponseTests.cs:line 711\r\n17:27:20   --- End of stack trace from previous location where exception was thrown ---\r\n17:27:20   Standard Output Messages:\r\n17:27:20    | [0.000s] TestLifetime Information: Starting test ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure at 2018-09-15T00:26:49\r\n17:27:20    | [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n17:27:20    | [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n17:27:20    | [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n17:27:20    | [0.008s] Microsoft.AspNetCore.Server.Kestrel Debug: TestServer is listening on port 42767\r\n17:27:20    | [0.008s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\" started.\r\n17:27:20    | [0.009s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 POST http:///  6553600\r\n17:27:20    | [0.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": started reading request body.\r\n17:27:20    | [0.893s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" paused.\r\n17:27:20    | [4.009s] Microsoft.AspNetCore.Server.Kestrel Information: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": the connection was closed because the response was not read by the client at the specified minimum data rate.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" aborted.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" sending FIN.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\" disconnecting.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" resumed.\r\n17:27:20    | [4.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": done reading request body.\r\n17:27:20    | [4.011s] Microsoft.AspNetCore.Server.Kestrel Error: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": An unhandled exception was thrown by the application.\r\n17:27:20    | System.Threading.Tasks.TaskCanceledException: The request was aborted ---> Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\r\n17:27:20    |    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n17:27:20    |    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.PumpAsync() in /_/src/Kestrel.Core/Internal/Http/Http1MessageBody.cs:line 118\r\n17:27:20    |    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n17:27:20    |    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.CopyToAsync(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/MessageBody.cs:line 86\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 157\r\n17:27:20    |    --- End of inner exception stack trace ---\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 161\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<>c__DisplayClass11_0.<<ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure>g__App|4>d.MoveNext() in /_/test/Kestrel.Transport.FunctionalTests/ResponseTests.cs:line 679\r\n17:27:20    | --- End of stack trace from previous location where exception was thrown ---\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 540\r\n17:27:20    | [4.013s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 4003.7238ms 200 \r\n17:27:20    | [4.013s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\" stopped.\r\n17:27:20    | [30.009s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n17:27:20    | [30.010s] TestLifetime Information: Finished test ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure in 30.0100938s\r\n17:27:20   \r\n17:27:20   \r\n17:27:38   Results File: /mnt/j/workspace/aspnet_KestrelHttpServer/release_2.2/linux-Configuration_Debug_prtest/artifacts/logs/Sockets.FunctionalTests-netcoreapp2.2-224.trx\r\n17:27:38   \r\n17:27:38   Total tests: 364. Passed: 355. Failed: 1. Skipped: 8.\r\n17:27:38   Test Run Failed.\r\n17:27:38   Test execution time: 1.2875 Minutes\r\n\r\n```\r\n\r\nI think this is the same thing causing this bug https://github.com/aspnet/KestrelHttpServer/issues/2897\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2934","RelatedDescription":"Closed issue \"Flaky test: ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure\" (#2934)"},{"Id":"360567596","IsPullRequest":false,"CreatedAt":"2018-09-15T19:13:41","Actor":"davidfowl","Number":"2933","RawContent":null,"Title":"Flaky test: ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure","State":"open","Body":"```\r\nConnectionClosedWhenBothRequestAndResponseExperienceBackPressure [FAIL]\r\n17:27:20   Failed   ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure\r\n17:27:20   Error Message:\r\n17:27:20    System.TimeoutException : The operation at /_/test/shared/TaskTimeoutExtensions.cs:12 timed out after reaching the limit of 30000ms.\r\n17:27:20   Stack Trace:\r\n17:27:20      at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task`1 task, TimeSpan timeout, String filePath, Int32 lineNumber)\r\n17:27:20      at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure() in /_/test/Kestrel.Transport.FunctionalTests/ResponseTests.cs:line 711\r\n17:27:20   --- End of stack trace from previous location where exception was thrown ---\r\n17:27:20   Standard Output Messages:\r\n17:27:20    | [0.000s] TestLifetime Information: Starting test ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure at 2018-09-15T00:26:49\r\n17:27:20    | [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n17:27:20    | [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n17:27:20    | [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n17:27:20    | [0.008s] Microsoft.AspNetCore.Server.Kestrel Debug: TestServer is listening on port 42767\r\n17:27:20    | [0.008s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\" started.\r\n17:27:20    | [0.009s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 POST http:///  6553600\r\n17:27:20    | [0.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": started reading request body.\r\n17:27:20    | [0.893s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" paused.\r\n17:27:20    | [4.009s] Microsoft.AspNetCore.Server.Kestrel Information: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": the connection was closed because the response was not read by the client at the specified minimum data rate.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" aborted.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" sending FIN.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\" disconnecting.\r\n17:27:20    | [4.010s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLGQK7DRLOS7\" resumed.\r\n17:27:20    | [4.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": done reading request body.\r\n17:27:20    | [4.011s] Microsoft.AspNetCore.Server.Kestrel Error: Connection id \"0HLGQK7DRLOS7\", Request id \"0HLGQK7DRLOS7:00000001\": An unhandled exception was thrown by the application.\r\n17:27:20    | System.Threading.Tasks.TaskCanceledException: The request was aborted ---> Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\r\n17:27:20    |    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n17:27:20    |    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.PumpAsync() in /_/src/Kestrel.Core/Internal/Http/Http1MessageBody.cs:line 118\r\n17:27:20    |    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n17:27:20    |    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n17:27:20    |    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.CopyToAsync(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/MessageBody.cs:line 86\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 157\r\n17:27:20    |    --- End of inner exception stack trace ---\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 161\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<>c__DisplayClass11_0.<<ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure>g__App|4>d.MoveNext() in /_/test/Kestrel.Transport.FunctionalTests/ResponseTests.cs:line 679\r\n17:27:20    | --- End of stack trace from previous location where exception was thrown ---\r\n17:27:20    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 540\r\n17:27:20    | [4.013s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 4003.7238ms 200 \r\n17:27:20    | [4.013s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGQK7DRLOS7\" stopped.\r\n17:27:20    | [30.009s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n17:27:20    | [30.010s] TestLifetime Information: Finished test ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure in 30.0100938s\r\n17:27:20   \r\n17:27:20   \r\n17:27:38   Results File: /mnt/j/workspace/aspnet_KestrelHttpServer/release_2.2/linux-Configuration_Debug_prtest/artifacts/logs/Sockets.FunctionalTests-netcoreapp2.2-224.trx\r\n17:27:38   \r\n17:27:38   Total tests: 364. Passed: 355. Failed: 1. Skipped: 8.\r\n17:27:38   Test Run Failed.\r\n17:27:38   Test execution time: 1.2875 Minutes\r\n\r\n```\r\n\r\nI think this is the same thing causing this bug https://github.com/aspnet/KestrelHttpServer/issues/2897\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2933","RelatedDescription":"Open issue \"Flaky test: ConnectionClosedWhenBothRequestAndResponseExperienceBackPressure\" (#2933)"},{"Id":"360549411","IsPullRequest":false,"CreatedAt":"2018-09-15T15:25:22","Actor":"davidfowl","Number":"2932","RawContent":null,"Title":"Remove the unsafe code from Kestrel","State":"open","Body":"This is more of an aspirational goal instead of something we would immediately do but we should have enough primitives in the BCL now that this is viable. Of course there might be a tiny performance hit but it might be worth it if we can remove all of the unsafe code.\r\n\r\ncc @DamianEdwards @blowdart @halter73 @KrzysztofCwalina @benaadams ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2932","RelatedDescription":"Open issue \"Remove the unsafe code from Kestrel\" (#2932)"},{"Id":"360185009","IsPullRequest":false,"CreatedAt":"2018-09-14T07:18:26","Actor":"westfin","Number":"2928","RawContent":null,"Title":"Add a new feature to expose the socket handle","State":"open","Body":"In my specific case I need get access to incoming connection socket.Handle from application code. If I am correct understand current working model (#1980) I need some feature that will be transfer socket.Handle from transport layer to application code.\r\n[More details](https://github.com/aspnet/KestrelHttpServer/issues/1980#issuecomment-420199729)\r\n\r\nPlease correct me if I am wrong.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2928","RelatedDescription":"Open issue \"Add a new feature to expose the socket handle\" (#2928)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"363814631","IsPullRequest":true,"CreatedAt":"2018-09-26T00:29:58","Actor":"ajaybhargavb","Number":"2610","RawContent":null,"Title":"New baselines for HtmlToCodeSwitchTest","State":"open","Body":"Mostly testing the same code paths as the previous PRs. No need to review super hard.","Url":"https://github.com/aspnet/Razor/pull/2610","RelatedDescription":"Open PR \"New baselines for HtmlToCodeSwitchTest\" (#2610)"},{"Id":"363788856","IsPullRequest":true,"CreatedAt":"2018-09-26T00:04:09","Actor":"ajaybhargavb","Number":"2609","RawContent":null,"Title":"New baselines for HtmlBlockTest","State":"closed","Body":"Most of these tests call `MarkupParser.ParseBlock()` instead of `MarkupParser.ParseDocument()`. So these test a different code path in the HtmlParser. Basically it tests the html inside a csharp block.","Url":"https://github.com/aspnet/Razor/pull/2609","RelatedDescription":"Closed or merged PR \"New baselines for HtmlBlockTest\" (#2609)"},{"Id":"363290514","IsPullRequest":false,"CreatedAt":"2018-09-25T19:20:36","Actor":"cjlapao","Number":"2608","RawContent":null,"Title":"Custom TagHelper not being discovered by razor on VisualStudio 15.8.5","State":"closed","Body":"All my custom TagHelpers stop being rendered by razor on VisualStudio and also not being rendered when the application started. This was working previously before the update.\r\n\r\n![capture](https://user-images.githubusercontent.com/17143029/45974565-9a591b80-c039-11e8-99eb-e73ba8fd42f4.PNG)\r\n","Url":"https://github.com/aspnet/Razor/issues/2608","RelatedDescription":"Closed issue \"Custom TagHelper not being discovered by razor on VisualStudio 15.8.5\" (#2608)"},{"Id":"362900161","IsPullRequest":true,"CreatedAt":"2018-09-24T17:35:19","Actor":"rynowak","Number":"2606","RawContent":null,"Title":"Fix #2054 - make TagHelperResolutionResult internal","State":"closed","Body":"This type isn't used by WTE anymore.","Url":"https://github.com/aspnet/Razor/pull/2606","RelatedDescription":"Closed or merged PR \"Fix #2054 - make TagHelperResolutionResult internal\" (#2606)"},{"Id":"363194227","IsPullRequest":false,"CreatedAt":"2018-09-24T15:19:19","Actor":"bkskomal","Number":"2607","RawContent":null,"Title":"msbuild error: Microsoft.AspNetCore.Razor.Design.CodeGeneratio n.targets(69,5):","State":"open","Body":"\r\nGetting below given error when building using msbuild command line:\r\n\r\nResolveTagHelperRazorGenerateInputs target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.de\r\nsign\\2.1.1\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneratio\r\nn.targets(69,5): error : The project xyz must provide a value for Configuration. [xyzcs.proj]\r\n\r\n\r\nProject is building successfully when building from visual studio 2017.","Url":"https://github.com/aspnet/Razor/issues/2607","RelatedDescription":"Open issue \"msbuild error: Microsoft.AspNetCore.Razor.Design.CodeGeneratio n.targets(69,5):\" (#2607)"},{"Id":"362330256","IsPullRequest":true,"CreatedAt":"2018-09-21T00:22:37","Actor":"ajaybhargavb","Number":"2604","RawContent":null,"Title":"Rewrite WhitespaceRewriter","State":"closed","Body":"I added a bunch of syntax manipulation APIs as part of https://github.com/aspnet/Razor/pull/2590/commits/623d743e31f8e7b4729227243c6ab20ecc749d2b (Didn't add that here because it might be too much noise)\r\n\r\n- Used some of those APIs to rewrite WhitespaceRewriter\r\n- The new syntax tree makes it so that we don't need `ConditionalAttributeCollapser` (Needs some changes at the IR lowering level)\r\n- Updated the test\r\n\r\nIn the future, we could also think about removing the need for WhitespaceRewriter entirely.","Url":"https://github.com/aspnet/Razor/pull/2604","RelatedDescription":"Closed or merged PR \"Rewrite WhitespaceRewriter\" (#2604)"},{"Id":"362340622","IsPullRequest":true,"CreatedAt":"2018-09-20T20:14:08","Actor":"pranavkm","Number":"2605","RawContent":null,"Title":"Print an error when using Razor build with an older version of the Sdk","State":"closed","Body":"When referencing a 2.2 version of Razor.Design but targeting an older build of Razor.Sdk, builds currently fail with:\r\n\r\n> The result \"\" of evaluating the value \"$(RazorSdkBuildTasksAssembly)\" of the \"AssemblyFile\" attribute in element <UsingTask> is not valid.\r\n\r\nSince this affects also projects that do not contain any Razor files (e.g. API only MVC projects), users may find this frustrating. The fix here is to no-op if the variable isn't set and print a more meaningful error before we use the tasks.\r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2605","RelatedDescription":"Closed or merged PR \"Print an error when using Razor build with an older version of the Sdk\" (#2605)"},{"Id":"361977466","IsPullRequest":true,"CreatedAt":"2018-09-20T17:48:11","Actor":"NTaylorMullen","Number":"2603","RawContent":null,"Title":"Make it so the RazorDirectiveCompletionProvider doesn't load extra as…","State":"closed","Body":"…semblies in C#.\r\n\r\n- Added a layer of indirection to allow for proper Lazy loading of Razor and future async completion specific assemblies.","Url":"https://github.com/aspnet/Razor/pull/2603","RelatedDescription":"Closed or merged PR \"Make it so the RazorDirectiveCompletionProvider doesn't load extra as…\" (#2603)"},{"Id":"360350205","IsPullRequest":true,"CreatedAt":"2018-09-19T17:09:57","Actor":"pranavkm","Number":"2597","RawContent":null,"Title":"Move RazorGenerate and RazorTagHelper tasks in to the Sdk","State":"closed","Body":"Loading multiple versions of a task assembly result results in MSBuild on .NET Core to fail.\r\nAddressing this by moving the tasks in to the Sdk and renaming it. This should avoid\r\nimmediate issues for a 2.1 and 2.2 project co-existing and future proofs 2.2 and later.\r\n\r\nFixes https://github.com/aspnet/Razor/issues/2553","Url":"https://github.com/aspnet/Razor/pull/2597","RelatedDescription":"Closed or merged PR \"Move RazorGenerate and RazorTagHelper tasks in to the Sdk\" (#2597)"},{"Id":"361097712","IsPullRequest":true,"CreatedAt":"2018-09-19T00:34:46","Actor":"NTaylorMullen","Number":"2601","RawContent":null,"Title":"Move RazorCompletionFactsService to CodeAnalysis.Workspaces.Razor.","State":"closed","Body":"- Also updated workspaces test project to also compile for netcoreapp2.2.","Url":"https://github.com/aspnet/Razor/pull/2601","RelatedDescription":"Closed or merged PR \"Move RazorCompletionFactsService to CodeAnalysis.Workspaces.Razor.\" (#2601)"},{"Id":"361481188","IsPullRequest":true,"CreatedAt":"2018-09-18T23:52:34","Actor":"pranavkm","Number":"2602","RawContent":null,"Title":"Check for ITagHelper in tag helper feature provider","State":"closed","Body":"Fixes #2482","Url":"https://github.com/aspnet/Razor/pull/2602","RelatedDescription":"Closed or merged PR \"Check for ITagHelper in tag helper feature provider\" (#2602)"},{"Id":"359689958","IsPullRequest":true,"CreatedAt":"2018-09-18T23:02:44","Actor":"ajaybhargavb","Number":"2591","RawContent":null,"Title":"Generate baselines for HtmlDocumentTest","State":"closed","Body":"Suggest reviewing this with w=1\r\n\r\n@NTaylorMullen @rynowak, suggest keeping a lookout for the following when reviewing this,\r\n- Inconsistencies\r\n- Node names and structure\r\n- How each node is serialized (what information to include/exclude when serializing the syntax nodes)\r\n\r\nFeedback and suggestions welcome on how to improve the diff in some way to make it more review friendly","Url":"https://github.com/aspnet/Razor/pull/2591","RelatedDescription":"Closed or merged PR \"Generate baselines for HtmlDocumentTest\" (#2591)"},{"Id":"361088175","IsPullRequest":true,"CreatedAt":"2018-09-18T20:38:49","Actor":"pranavkm","Number":"2600","RawContent":null,"Title":"Allow Invoke \\ InvokeAsync methods for a ViewComponent to be defined in base types","State":"closed","Body":"Fixes https://github.com/aspnet/Mvc/issues/8397","Url":"https://github.com/aspnet/Razor/pull/2600","RelatedDescription":"Closed or merged PR \"Allow Invoke \\ InvokeAsync methods for a ViewComponent to be defined in base types\" (#2600)"},{"Id":"361083649","IsPullRequest":false,"CreatedAt":"2018-09-18T00:04:59","Actor":"rxelizondo","Number":"2599","RawContent":null,"Title":"What is the purpose of \"<Pack>$(IncludeRazorContentInPack)</Pack>\"","State":"closed","Body":"I noticed that my project file now contains the following entry:\r\n\r\n```\r\n  <ItemGroup>\r\n    <Content Update=\"Views\\xyz\\abc.cshtml\">\r\n      <Pack>$(IncludeRazorContentInPack)</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nCould someone tell me what is the purpose for this entry?\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Razor/issues/2599","RelatedDescription":"Closed issue \"What is the purpose of \"<Pack>$(IncludeRazorContentInPack)</Pack>\"\" (#2599)"},{"Id":"360123958","IsPullRequest":true,"CreatedAt":"2018-09-17T18:08:07","Actor":"rynowak","Number":"2595","RawContent":null,"Title":"Update to use non-capturing timer","State":"closed","Body":"FYI only - replacing the code with the package that does the same thing.","Url":"https://github.com/aspnet/Razor/pull/2595","RelatedDescription":"Closed or merged PR \"Update to use non-capturing timer\" (#2595)"},{"Id":"360186096","IsPullRequest":false,"CreatedAt":"2018-09-14T21:46:30","Actor":"thiennn","Number":"2596","RawContent":null,"Title":"Razor Class Library: cannot find compiled views when dynamic loading at runtime","State":"closed","Body":"I am doing some prototype about plugin architecture and use razor class library for plugin. To be able to apply it for SimplCommerce https://github.com/simplcommerce/SimplCommerce/issues/422\r\n\r\nEverything good, except that the view engine cannot find complied views in plugins when they are loaded at runtime using AssemblyLoadContext. Although I have add it to ApplicationPartManager.\r\n\r\nYou can see my prototype add https://github.com/thiennn/dynamicLoadingRazorLib/\r\n\r\nThanks\r\n","Url":"https://github.com/aspnet/Razor/issues/2596","RelatedDescription":"Closed issue \"Razor Class Library: cannot find compiled views when dynamic loading at runtime\" (#2596)"},{"Id":"360398427","IsPullRequest":false,"CreatedAt":"2018-09-14T17:54:26","Actor":"rynowak","Number":"2598","RawContent":null,"Title":"C# 8 Readiness","State":"open","Body":"We need to evaluate and update Razor for C# 8. This will align with 3.0\r\n\r\nhttps://github.com/dotnet/csharplang/milestone/8\r\nhttps://channel9.msdn.com/Events/dotnetConf/2018/S103","Url":"https://github.com/aspnet/Razor/issues/2598","RelatedDescription":"Open issue \"C# 8 Readiness\" (#2598)"},{"Id":"360090987","IsPullRequest":false,"CreatedAt":"2018-09-13T22:34:15","Actor":"rynowak","Number":"2594","RawContent":null,"Title":"Parser computes the wrong length for C# code with an escaped transition","State":"open","Body":"The parser parses the following code into the correct C# but gets the length wrong - it includes `@@` when computing the length. \r\n\r\n```\r\n@{ @@Da }\r\n```\r\n\r\nI'm not aware of the impact of this issue. This is somewhat unlikely to occur, and would only happen when someone needs to use a verbatim identifier in C# from Razor. This could cause a variety of incorrect editor behaviors including issues with completion or crashes.\r\n\r\nFound while investigating #2266","Url":"https://github.com/aspnet/Razor/issues/2594","RelatedDescription":"Open issue \"Parser computes the wrong length for C# code with an escaped transition\" (#2594)"},{"Id":"360089692","IsPullRequest":false,"CreatedAt":"2018-09-13T22:29:04","Actor":"rynowak","Number":"2593","RawContent":null,"Title":"Parser treats the whitespace between a directive and its first token as C#","State":"open","Body":"The parser incorrectly maps the whitespace text that appears below into C# (syntax tree). Since this token isn't significant in any way, it gets thrown away harmlessly instead of mapped into the C# editor buffer. \r\n```\r\n@page \"foo\"\r\n```\r\n\r\nSo what I'm saying is that the 'space' character above is treated as C# by the buffer instead of metacode/none. Unfortunately the fix for this breaks completion for partial parsing. So it looks like we cut a corner or two when implementing this to make it easier to support completion.  \r\n\r\nFound while implementing #2266","Url":"https://github.com/aspnet/Razor/issues/2593","RelatedDescription":"Open issue \"Parser treats the whitespace between a directive and its first token as C#\" (#2593)"},{"Id":"359955735","IsPullRequest":true,"CreatedAt":"2018-09-13T21:51:47","Actor":"rynowak","Number":"2592","RawContent":null,"Title":"Check for spans that are missing from output","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2592","RelatedDescription":"Closed or merged PR \"Check for spans that are missing from output\" (#2592)"},{"Id":"359687651","IsPullRequest":true,"CreatedAt":"2018-09-12T23:24:43","Actor":"ajaybhargavb","Number":"2590","RawContent":null,"Title":"[Design] Razor parser rewrite","State":"open","Body":"- Rewrite CSharp parser\r\n- Basic rewrite of HTML parser\r\n- Define and generate syntax nodes and boilerplate\r\n- Rewrite ClassifiedSpan generation logic\r\n- Update parser test infrastructure\r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2590","RelatedDescription":"Open PR \"[Design] Razor parser rewrite\" (#2590)"},{"Id":"359608494","IsPullRequest":false,"CreatedAt":"2018-09-12T18:53:59","Actor":"ajaybhargavb","Number":"2589","RawContent":null,"Title":"Make the debugging experience of the new syntax tree better","State":"open","Body":"Right now the debugging experience for the new tree is very painful. Need to add the necessary `DebuggerDisplay()`s to the syntax nodes to make it easier to understand. This might involve updating the Syntax generator to support it.","Url":"https://github.com/aspnet/Razor/issues/2589","RelatedDescription":"Open issue \"Make the debugging experience of the new syntax tree better\" (#2589)"},{"Id":"359523106","IsPullRequest":false,"CreatedAt":"2018-09-12T16:24:11","Actor":"mattman73","Number":"2588","RawContent":null,"Title":"HttpContext is null","State":"closed","Body":"Hi all\r\nI need some help I have been working on a way to load a page from within the program.cs file but I can not work out how this is done I have look on the web to find the answer but for the life of me, I cannot find anything that will work.\r\nWhat I'm looking to do is after a lookup I need to load the page again with an added searchstring, I have all the code doing the look up and cross-checking but I'm unable to get the code to redirect to the page again with the added searchstring.\r\nI have tried to DI the Httpcontext but this keeps returning null.\r\nany pointers would be great.","Url":"https://github.com/aspnet/Razor/issues/2588","RelatedDescription":"Closed issue \"HttpContext is null\" (#2588)"},{"Id":"358937175","IsPullRequest":false,"CreatedAt":"2018-09-11T08:19:12","Actor":"ajaybhargavb","Number":"2587","RawContent":null,"Title":"Update parser test infrastructure","State":"open","Body":"Update the parser test infrastructure to support both the old and the new syntax tree","Url":"https://github.com/aspnet/Razor/issues/2587","RelatedDescription":"Open issue \"Update parser test infrastructure\" (#2587)"},{"Id":"358935289","IsPullRequest":false,"CreatedAt":"2018-09-11T08:13:18","Actor":"ajaybhargavb","Number":"2586","RawContent":null,"Title":"Add unit tests for the new syntax infrastructure","State":"open","Body":"","Url":"https://github.com/aspnet/Razor/issues/2586","RelatedDescription":"Open issue \"Add unit tests for the new syntax infrastructure\" (#2586)"},{"Id":"358934832","IsPullRequest":false,"CreatedAt":"2018-09-11T08:11:51","Actor":"ajaybhargavb","Number":"2585","RawContent":null,"Title":"Rewrite intermediate lowering phase","State":"open","Body":"- Rewrite `DefaultRazorIntermediateNodeLoweringPhase`\r\n- Rewrite any other visitors that directly operate on the syntax tree","Url":"https://github.com/aspnet/Razor/issues/2585","RelatedDescription":"Open issue \"Rewrite intermediate lowering phase\" (#2585)"},{"Id":"358934281","IsPullRequest":false,"CreatedAt":"2018-09-11T08:10:08","Actor":"ajaybhargavb","Number":"2584","RawContent":null,"Title":"Rewrite tag helper binder phase","State":"open","Body":"- Define the structure of the nodes representing tag helper constructs\r\n- Rewrite `TagHelperParseTreeRewriter` and `TagHelperBlockRewriter`","Url":"https://github.com/aspnet/Razor/issues/2584","RelatedDescription":"Open issue \"Rewrite tag helper binder phase\" (#2584)"},{"Id":"358933502","IsPullRequest":false,"CreatedAt":"2018-09-11T08:07:44","Actor":"ajaybhargavb","Number":"2583","RawContent":null,"Title":"Improve HTML syntax structure","State":"open","Body":"- Can do this only after #2580 \r\n- Define the structure for all other nodes (like separate start tag and end tag) and generate them\r\n- Rewrite the parser to incorporate these new nodes in the tree","Url":"https://github.com/aspnet/Razor/issues/2583","RelatedDescription":"Open issue \"Improve HTML syntax structure\" (#2583)"},{"Id":"358932907","IsPullRequest":false,"CreatedAt":"2018-09-11T08:05:54","Actor":"ajaybhargavb","Number":"2582","RawContent":null,"Title":"Rewrite TagHelperSpan generation logic","State":"open","Body":"The work here is to keep the existing tooling experience from breaking.","Url":"https://github.com/aspnet/Razor/issues/2582","RelatedDescription":"Open issue \"Rewrite TagHelperSpan generation logic\" (#2582)"},{"Id":"358932363","IsPullRequest":false,"CreatedAt":"2018-09-11T08:04:13","Actor":"ajaybhargavb","Number":"2581","RawContent":null,"Title":"Rewrite classified span generation logic","State":"open","Body":"The work here is to keep the existing tooling experience from breaking.","Url":"https://github.com/aspnet/Razor/issues/2581","RelatedDescription":"Open issue \"Rewrite classified span generation logic\" (#2581)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2018-09-20T20:23:28","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"closed","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Closed issue \"File new default names inconsistency.\" (#850)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2018-09-20T20:23:20","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"closed","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Closed issue \"Cannot force version of the template to install\" (#867)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2018-09-20T20:23:13","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"closed","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Closed or merged PR \"Change Lockout wording of comment\" (#870)"},{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.╔╡cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.╔╡mod([i0.╔╡mpd(512,i0.ComponentFactoryResolver,i0.╔╡CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"Andrew-MSFT","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2018-06-25T20:46:49","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"closed","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Closed issue \"Support for multi-line string values\" (#1057)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"361087870","IsPullRequest":false,"CreatedAt":"2018-09-18T00:05:36","Actor":"halter73","Number":"317","RawContent":null,"Title":"Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/Announcements/issues/317","RelatedDescription":"Open issue \"Kestrel Connection Adapter Logging Namespace Changes\" (#317)"},{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"}],"ResultType":"GitHubIssue"},"Announcements":{"Issues":[{"Id":"361087870","IsPullRequest":false,"CreatedAt":"2018-09-18T00:05:36","Actor":"halter73","Number":"317","RawContent":null,"Title":"Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/Announcements/issues/317","RelatedDescription":"Open issue \"Kestrel Connection Adapter Logging Namespace Changes\" (#317)"},{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1044720517997973505","CreatedAt":"2018-09-25T22:49:16+00:00","UserScreenname":"aspnet","Text":"Starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/SGEJxKemkG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"1044348748783005696","CreatedAt":"2018-09-24T22:11:59+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 22:45 UTC\n\nEndpoint Routing with… https://t.co/N6iBaMV8C0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null},{"Id":"1039600318093217792","CreatedAt":"2018-09-11T19:43:25+00:00","UserScreenname":"aspnet","Text":"Join us for today's #ASPNET Community Standup at 3:45 PM Pacific time with @shanselman, @DamianEdwards and… https://t.co/AADsNXNw0L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":9,"RawContent":null},{"Id":"1034573477620006913","CreatedAt":"2018-08-28T22:48:33+00:00","UserScreenname":"aspnet","Text":"We're live on https://t.co/4Ioo9jNSN2! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1034222603685179392","CreatedAt":"2018-08-27T23:34:18+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 10 UTC\n\nBenchmarks and Performan… https://t.co/0SJ32oq3iG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"1033133567704875008","CreatedAt":"2018-08-24T23:26:51+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: HTTP/2 in Kestrel\nhttps://t.co/II7wNqYPgG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":57,"RawContent":null},{"Id":"1032696620142419968","CreatedAt":"2018-08-23T18:30:35+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.20-preview1: Open API Analyzers &amp; Conventions\nhttps://t.co/17azOu2fw6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":32,"RawContent":null},{"Id":"1032668796392095745","CreatedAt":"2018-08-23T16:40:01+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: Healthchecks\nhttps://t.co/sgOqbrv2pW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":24,"RawContent":null},{"Id":"1032328487825096705","CreatedAt":"2018-08-22T18:07:45+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1 now available\nhttps://t.co/IOqvW1biUh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":192,"FavoriteCount":140,"RawContent":null},{"Id":"1031951244510691328","CreatedAt":"2018-08-21T17:08:44+00:00","UserScreenname":"aspnet","Text":"Starting now! Join us at https://t.co/4Ioo9jNSN2 https://t.co/VOVl63Ju0r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"1031945377597939714","CreatedAt":"2018-08-21T16:45:25+00:00","UserScreenname":"aspnet","Text":"Starting soon! https://t.co/VOVl63Ju0r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":2,"RawContent":null},{"Id":"1031661576607023105","CreatedAt":"2018-08-20T21:57:41+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 10 AM Pacific / 18 GMT\n\nhttps://t.co/eFOzgs22K8 Co… https://t.co/197VNX3jBa","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":31,"RawContent":null},{"Id":"1026931265377730562","CreatedAt":"2018-08-07T20:41:07+00:00","UserScreenname":"aspnet","Text":"ICYMI live, here's this week's @aspnet Community Standup with THE WHOLE MVC TEAM! https://t.co/x7PM6Dvm91","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"1026880588324593664","CreatedAt":"2018-08-07T17:19:45+00:00","UserScreenname":"aspnet","Text":"If you're waiting for the standup to start, refresh https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-09-26T05:30:19.9010569Z","RunDurationInMilliseconds":12769}