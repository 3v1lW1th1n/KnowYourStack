{"Data":{"GitHub":{"Issues":[{"Id":"452239328","IsPullRequest":true,"CreatedAt":"2019-06-06T00:32:09","Actor":"daholste","Number":"3823","RawContent":null,"Title":"[AutoML] Enable style cop rules & resolve errors","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3823","RelatedDescription":"Closed or merged PR \"[AutoML] Enable style cop rules & resolve errors\" (#3823)"},{"Id":"452731072","IsPullRequest":false,"CreatedAt":"2019-06-05T21:43:53","Actor":"shmoradims","Number":"3832","RawContent":null,"Title":"Add an example for key type's missing value","State":"open","Body":"Related to #3831. Add an in-memory example to explain key type's missing value 0.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3832","RelatedDescription":"Open issue \"Add an example for key type's missing value\" (#3832)"},{"Id":"452176125","IsPullRequest":true,"CreatedAt":"2019-06-05T19:32:07","Actor":"daholste","Number":"3821","RawContent":null,"Title":"Add AutoML as a best friend assembly to Microsoft.ML.Core","State":"closed","Body":"This resolves https://github.com/dotnet/machinelearning/issues/3813 for AutoML","Url":"https://github.com/dotnet/machinelearning/pull/3821","RelatedDescription":"Closed or merged PR \"Add AutoML as a best friend assembly to Microsoft.ML.Core\" (#3821)"},{"Id":"451719517","IsPullRequest":false,"CreatedAt":"2019-06-05T19:32:07","Actor":"daholste","Number":"3813","RawContent":null,"Title":"Can we make NeedCalibration property of TrainerInfo public?","State":"closed","Body":"Could we make the `NeedCalibration` property in `TrainerInfo` public?\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7ca768a8740c5c873c7f26f2c71e0fa3ea28ea40/src/Microsoft.ML.Core/Prediction/TrainerInfo.cs#L30\r\n\r\nThis would help AutoML know when & when not to calibrate","Url":"https://github.com/dotnet/machinelearning/issues/3813","RelatedDescription":"Closed issue \"Can we make NeedCalibration property of TrainerInfo public?\" (#3813)"},{"Id":"452666106","IsPullRequest":true,"CreatedAt":"2019-06-05T19:02:35","Actor":"shmoradims","Number":"3831","RawContent":null,"Title":"Add default and missing value definitions for ML.NET types","State":"open","Body":"Fixes #3443.\r\n\r\nThis PR has two related parts:\r\n\r\n1) Add default and missing values definitions. DataKind page, seems the best place to have all of that information in one place. The documented definitions come from [IsNa region](https://github.com/dotnet/machinelearning/blob/2960b273ee0eda1d3a285a4b46a58a4d6d7b6926/src/Microsoft.ML.Data/Data/Conversion.cs#L739) and [IsDefault region](https://github.com/dotnet/machinelearning/blob/2960b273ee0eda1d3a285a4b46a58a4d6d7b6926/src/Microsoft.ML.Data/Data/Conversion.cs#L749).\r\n\r\n2) Fix the docs of CountFeatureSelectingEstimator to include missing value in addition to default value. Previously, we incorrectly thought only non-default values matter. But digging into [the code](https://github.com/dotnet/machinelearning/blob/5163413f3cfab430e49f6fb2a690c160fde46b58/src/Microsoft.ML.Transforms/CountFeatureSelection.cs#L433), it's clear that the check is for non-default AND non-missing.","Url":"https://github.com/dotnet/machinelearning/pull/3831","RelatedDescription":"Open PR \"Add default and missing value definitions for ML.NET types\" (#3831)"},{"Id":"452659656","IsPullRequest":false,"CreatedAt":"2019-06-05T18:43:22","Actor":"Ianpwest","Number":"3830","RawContent":null,"Title":"Fit() never returns when running in an ASP.NET MVC Full .NET Framework 4.6.1 / 4.7.2","State":"open","Body":"When running the sentiment analysis sample this line never returns. No exception is thrown.\r\n`// STEP 4: Train the model fitting to the DataSet\r\n            ITransformer trainedModel = trainingPipeline.Fit(trainingData);`\r\n\r\nThis is not the case in .net core web apps or .NET Framework 4.6.1 console apps. Only MVC.\r\n\r\nYou can recreate the issue by creating a brand new ASP.NET MVC .NET Framework 4.6.1 Web Application. Changing to target x64. Installing the Microsoft.ML nuget and running the sentiment analysis code.\r\n\r\nThanks.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3830","RelatedDescription":"Open issue \"Fit() never returns when running in an ASP.NET MVC Full .NET Framework 4.6.1 / 4.7.2\" (#3830)"},{"Id":"452587012","IsPullRequest":false,"CreatedAt":"2019-06-05T16:03:50","Actor":"baruchiro","Number":"3829","RawContent":null,"Title":"Support dynamic types when working with IDataView","State":"open","Body":"### Issue\r\n\r\nI want to read my data from the `.csv` file. I think it may be done without strongly-typing my objects. In C#, we have two potential abilities: [_Anonymous Types_](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/anonymous-types) and [_Dynamic Types_](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/using-type-dynamic). \r\n\r\nI tried to check how the existing code could be adapted, but I could not fully understand the code.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3829","RelatedDescription":"Open issue \"Support dynamic types when working with IDataView\" (#3829)"},{"Id":"452399201","IsPullRequest":false,"CreatedAt":"2019-06-05T09:24:31","Actor":"modios","Number":"3828","RawContent":null,"Title":"Provide access to eigenvalues used for PCA transformation","State":"open","Body":"In PcaTransformer.cs, class TransformInfo has an eigenvectors field. I assume it stores the eigenvectors retrieved from the SVD decomposition. Can we have access to the eigenvalues that the SVD provided.\r\n\r\nI think it might be useful to store and provide the eigenvalues used during the PCA. Is this possible?\r\ni.e I see in Accord you can do something like pca.Eigenvalues. \r\nhttp://accord-framework.net/docs/html/T_Accord_Statistics_Analysis_PrincipalComponentAnalysis.htm\r\n\r\nThank you!\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3828","RelatedDescription":"Open issue \"Provide access to eigenvalues used for PCA transformation\" (#3828)"},{"Id":"452270117","IsPullRequest":true,"CreatedAt":"2019-06-05T01:01:01","Actor":"eerhardt","Number":"3827","RawContent":null,"Title":" Add Microsoft.Extensions.ML integration package.","State":"open","Body":"This package makes it easier to use ML.NET with app models that support Microsoft.Extensions - i.e. ASP.NET and Azure Functions.\r\n\r\nSpecifically it contains functionality for:\r\n\r\n- Dependency Injection\r\n- Pooling PredictionEngines\r\n- Reloading models when the file or URI has changed\r\n- Hooking ML.NET logging to Microsoft.Extensions.Logging\r\n\r\nFix #3239\r\n\r\ncc @glennc - Note that the only major change I made to your code was to remove the `IPredictionEnginePoolBuilder` interface in favor of using a simple class instead.\r\n\r\nAfter this is merged to master, we can remove the `features/IntegrationPackage` branch.","Url":"https://github.com/dotnet/machinelearning/pull/3827","RelatedDescription":"Open PR \" Add Microsoft.Extensions.ML integration package.\" (#3827)"},{"Id":"452254954","IsPullRequest":true,"CreatedAt":"2019-06-05T00:51:15","Actor":"codemzs","Number":"3825","RawContent":null,"Title":"Update readme.","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3825","RelatedDescription":"Closed or merged PR \"Update readme.\" (#3825)"},{"Id":"452259513","IsPullRequest":false,"CreatedAt":"2019-06-05T00:07:05","Actor":"Anipik","Number":"3826","RawContent":null,"Title":"String column being getting converted to int","State":"open","Body":"My dataset looks something like this\r\n\r\n```\r\nID\tArea\tTitle\tDescription\r\n\"7\"\tarea-System.Runtime.InteropServices\t\"Splitting XLinq classes into separate files, after rebasing the commits.\"\t\"\"\r\n\"12\"\tarea-System.Runtime.InteropServices\t\"Remove or cache some unnecessary allocations\"\t\"I noticed a few places where allocations were occurring unnecessary: - Across several of the immutable and XML collection types, the ICollection.CopyTo implementations were calling Array.SetValue in a loop; the second parameter to SetValue is a params array, so each iteration of the loop was resulting in allocating a new array... I've lifted that implicit allocation out to be an explicit one before the loop. - In a couple of places in the XML library and the metadata reader, string.Trim\\* was being used, either with an array of the same characters unnecessarily being allocated each time, or an implicitly allocated array of constant chars to fill a params array parameter.  I've replaced those with statically cached arrays. - In a couple of places in the XML library, a string was being constructed around a single character via creating a new char array; I've replaced that with usage of string's ctor that takes a character and a count, avoiding the unnecessary char[] allocation. \"\r\n\"13\"\tarea-System.Runtime.InteropServices\t\"Remove unnecessary unsafe code flag.\"\t\"The Immutable PCL targets platforms that include those that don't support unsafe code. Opening the solution in VS2015 results in a warning in the error list about this. But features that required unsafe code were recently removed so we don't need this flag any more. \"\r\n\"17\"\tarea-System.Xml\t\"Some XPath.XDocument tests are failing\"\t\"Some XPath.XDocument queries have different results than other XPath navigators. This might be an old behavior or newly introduced bug.  Failing tests: build /p=IncludeTraits=ActiveIssue=17 \"\r\n\"20\"\tarea-System.Xml\t\"2 XPath.XDocument tests fail because of lacking feature\"\t\"XPath.XDocument navigator doesn't support MoveToId(string).  Verify if this was ever supported. If it was, verify if we want to support it in the future. If it wasn't move the tests to a different file and remove them from XPath.XDocument.Tests project.  Failing tests: NodeSetFunctionsTest2267 MatchesTest2352  <!--- @huboard:{\"order\":20.0,\"milestone_order\":20,\"custom_state\":\"\"} --> \"\r\n\"22\"\tarea-System.Numerics\t\"Two Numerics Tests are failing only on our CI server\"\t\"Two of the tests in our System.Numerics.Vectors suite are failing only on our CI build server, and potentially only intermittently:  Vector2NormalizeTest1 Vector4NormalizeTest2  Given that these are very similar to other tests which cover a similar edge-case (especially the Vector3 normalization tests, which aren't failing), we will need to investigate why these tests in particular are failing on our build server. This may have been a point-in-time issue as we brought up our build infrastructure, and may not re-surface again. \"\r\n\"36\"\tarea-System.Numerics\t\"SIMD test failures on non-ENU configurations.\"\t\"After pulling both of @adamralph 's pull requests #31 and #32, I'm continuing to see test failures for SIMD on a DEU (German) test environment.  Here's a representative error: d:\\oss\\corefx\\src\\System.Numerics.Vectors\\tests\\GenericVectorTests.cs(545): error : System.Numerics.Tests.GenericVe ctorTests.ToStringCurrencySByte: Assert.Equal() Failure\\r\\nPosition: First difference is at position 8\\r\\nExpected:  <97,00 ?, -108,00 ?, 22,00 ?, 29,00 ?, 49,00 ?, 60,00 ?, 103,00 ?, 58,00 ?, -62,00 ?, -124,00 ?, -117,00 ?, 48,00 ?, 15,00 ?, -35,00 ?, -13,00 ?, -34,00 ?>\\r\\nActual:   <97,00 ?. -108,00 ?. 22,00 ?. 29,00 ?. 49,00 ?. 60,00 ?. 103 ,00 ?. 58,00 ?. -62,00 ?. -124,00 ?. -117,00 ?. 48,00 ?. 15,00 ?. -35,00 ?. -13,00 ?. -34,00 ?> [D:\\oss\\corefx\\bin\\ tools\\fxbuild.proj]  Observe that expected separates elements with a comma, actual separates elements with a dot. \"\r\n\"41\"\tarea-System.Numerics\t\"Quaternion operator overloads should be using the respective methods\"\t\"Quaternion declares a handful of methods to perform addition, subtraction and multiplication, and provides the respective overloads for these operations.  However, instead of re-using the `Add`, `Multiply` etc. methods, the code is re-written in the operator overloads. The operators should be using their respective methods rather than re-declaring the same code.  This is under the assumption that the JIT inlines the methods when they are used in the operator overloads. \"\r\n\"49\"\tarea-Infrastructure\t\"Add Linux/Mac build script\"\t\"A `build.sh` should be added alongside `build.cmd` to build corefx on Linux/Mac. \"\r\n```\r\n\r\n\r\nI want the auto-ml bot to consider the first column as a string but it is always converting it to float column\r\nIt would be nice to have some way of specifying the column types.\r\n\r\ncc @danmosemsft @eerhardt @daholste ","Url":"https://github.com/dotnet/machinelearning/issues/3826","RelatedDescription":"Open issue \"String column being getting converted to int\" (#3826)"},{"Id":"452253218","IsPullRequest":true,"CreatedAt":"2019-06-05T00:06:15","Actor":"codemzs","Number":"3824","RawContent":null,"Title":"Update API compat version number to 1.1.0 for stable release packages","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3824","RelatedDescription":"Closed or merged PR \"Update API compat version number to 1.1.0 for stable release packages\" (#3824)"},{"Id":"452216686","IsPullRequest":false,"CreatedAt":"2019-06-04T21:29:04","Actor":"najeeb-kazmi","Number":"3822","RawContent":null,"Title":"LightGbm default evaluation metrics in ML.NET do not conform to standalone LightGbm","State":"open","Body":"Found while investigating fix for #3761 \r\n\r\nIn ML.NET LightGbm wrapper, the default EvaluationMetric is set to EvaluateMetricType.Error for multiclass, EvaluationMetricType.LogLoss for binary, and so on. On the other hand, in standalone LightGbm, the default evaluation metric is \"\", which means that LightGbm will automatically select the default metric for the given objective function.\r\n\r\nThis leads to inconsistent behavior from the user's perspective: If a user specified EvaluationMetric = EvaluateMetricType.Default, the parameter passed to LightGbm would be the empty string \"\" but if they do not specify EvaluationMetric at all, the parameter passed to LightGbm would be Error for multiclass, LogLoss for binary, and so on.\r\n\r\nWe need to investigate whether these metrics are indeed the defaults for the respective objective functions in LightGbm, and if they are not, then change the defaults in ML.NET to conform to standalone LightGbm. Note that this would be a breaking change.","Url":"https://github.com/dotnet/machinelearning/issues/3822","RelatedDescription":"Open issue \"LightGbm default evaluation metrics in ML.NET do not conform to standalone LightGbm\" (#3822)"},{"Id":"452151777","IsPullRequest":true,"CreatedAt":"2019-06-04T20:59:39","Actor":"codemzs","Number":"3819","RawContent":null,"Title":"NativeAssemblyReference Include \"MklProxyNative\" in Samples project.","State":"closed","Body":"fixes #3818\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3819","RelatedDescription":"Closed or merged PR \"NativeAssemblyReference Include \"MklProxyNative\" in Samples project.\" (#3819)"},{"Id":"452151473","IsPullRequest":false,"CreatedAt":"2019-06-04T20:59:39","Actor":"codemzs","Number":"3818","RawContent":null,"Title":"NativeAssemblyReference Include \"MklProxyNative\" in Samples project.","State":"closed","Body":"Need to the above dependency to have some timer series samples work that use MKL ","Url":"https://github.com/dotnet/machinelearning/issues/3818","RelatedDescription":"Closed issue \"NativeAssemblyReference Include \"MklProxyNative\" in Samples project.\" (#3818)"},{"Id":"451720642","IsPullRequest":true,"CreatedAt":"2019-06-04T19:14:52","Actor":"daholste","Number":"3814","RawContent":null,"Title":"Expose NeedCalibration property of TrainerInfo","State":"closed","Body":"Closes https://github.com/dotnet/machinelearning/issues/3813","Url":"https://github.com/dotnet/machinelearning/pull/3814","RelatedDescription":"Closed or merged PR \"Expose NeedCalibration property of TrainerInfo\" (#3814)"},{"Id":"452158821","IsPullRequest":true,"CreatedAt":"2019-06-04T19:05:45","Actor":"daholste","Number":"3820","RawContent":null,"Title":"For binary classification, discard cross validation splits where there is not at least one true & one false label in the validation set","State":"open","Body":"For binary classification, discard cross validation splits where there is not at least one true & one false label in the validation set. Otherwise, scoring the dataset crashes because AUC cannot be computed like in https://github.com/dotnet/machinelearning/issues/3800","Url":"https://github.com/dotnet/machinelearning/pull/3820","RelatedDescription":"Open PR \"For binary classification, discard cross validation splits where there is not at least one true & one false label in the validation set\" (#3820)"},{"Id":"452037688","IsPullRequest":false,"CreatedAt":"2019-06-04T14:41:42","Actor":"PeterPann23","Number":"3817","RawContent":null,"Title":"how will you know this at the time of coding...","State":"open","Body":"I guess it would be appropriate to set this value at runtime as a developer can hardly know what runtime value will be in effect without knowing the data.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 8d7b6ec7-078a-9f61-3250-ceba1a3a1846\n* Version Independent ID: 13902a2a-592f-a075-a68e-b09002f8e714\n* Content: [LightGbmBinaryTrainer.Options.WeightOfPositiveExamples Field (Microsoft.ML.Trainers.LightGbm)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmbinarytrainer.options.weightofpositiveexamples?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmBinaryTrainer+Options.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmBinaryTrainer+Options.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3817","RelatedDescription":"Open issue \"how will you know this at the time of coding...\" (#3817)"},{"Id":"451946297","IsPullRequest":false,"CreatedAt":"2019-06-04T11:37:53","Actor":"cemicel","Number":"3816","RawContent":null,"Title":"System.ArgumentException: 'Length of memory  must match product of dimensions.","State":"open","Body":"- windows 10\r\n- 4.7.NET Version  \r\n- ML dotnet 1.0\r\n- Visual Studio 15.9.12\r\n\r\nIssue:\r\n\r\nI'm quite new to .net, however I'm trying to replicate CRNN model developed on keras to ML dotnet. I successfully converted the model to onnx format. But when I try to make a prediction I'm getting this:\r\n _System.ArgumentException: 'Length of memory (9600) must match product of dimensions (3200).'_\r\nI didn't find any issue or something so that is way I'm writing here.\r\n\r\nI can assume that the problem might be somewhere in image transformation. My model is built for grayscale images with the shape of (1, 1, 32, 100) and there I have this conflict between:\r\n1x32x100 = 3200 (should be)  vs  3x32x100 = 9600 (actually is)\r\n\r\nI've tried to transform images to grayscale, but it doesn't work (perhaps I do it in a wrong way).\r\n\r\nThis is my snipped code for building the pipeline:\r\n\r\n`\r\n\r\n        int imageHeight = 32;\r\n        int imageWidth = 100;\r\n        bool ChannelsLast = false;\r\n        string ModelInput = \"conv2d_1_input_01\";\r\n        string ModelOutput = \"dense_1_add_0\";\r\n\r\n\r\n        var pipeline = mLContext.Transforms.LoadImages(outputColumnName: \"conv2d_1_input_01\",\r\n                                                           imageFolder: imagesLocation,\r\n                                                           inputColumnName: nameof(ImageData.ImagePath))\r\n            .Append(mLContext.Transforms.ResizeImages(outputColumnName: \"conv2d_1_input_01\",\r\n                                                            imageWidth: imageWidth,\r\n                                                            imageHeight: imageHeight))\r\n            .Append(mLContext.Transforms.ConvertToGrayscale(outputColumnName:\r\n                                                            \"conv2d_1_input_01\"))\r\n            .Append(mLContext.Transforms.ExtractPixels(outputColumnName: \"conv2d_1_input_01\", interleavePixelColors: ImageSettings.ChannelsLast))\r\n            .Append(mLContext.Transforms.ApplyOnnxModel(modelFile: modelLocation,\r\n                                                            outputColumnNames: new[] { ModelOutput },\r\n                                                            inputColumnNames: new[] { ModelInput }));\r\n`\r\n\r\nI would appreciate any help or comments.","Url":"https://github.com/dotnet/machinelearning/issues/3816","RelatedDescription":"Open issue \"System.ArgumentException: 'Length of memory  must match product of dimensions.\" (#3816)"},{"Id":"451744537","IsPullRequest":true,"CreatedAt":"2019-06-04T00:28:35","Actor":"najeeb-kazmi","Number":"3815","RawContent":null,"Title":"Fix the treatment of LightGbm Evaluation Metric parameters in ML.NET …","State":"open","Body":"…and make them conform to LightGbm\r\n\r\nFixes #3761 plus some related issues discovered during investigation\r\n\r\n1. There was a bug in LightGbm `EvaluateMetricType` where if a user specified `EvaluateMetricType.Default`, the metric would not get added to the options Dictionary, and `LightGbmWrappedTraining` would throw because of that. \r\n\r\n2. Secondly, `EvaluateMetricType.Default` in LightGbm is supposed to be an empty string \"\" and LightGbm chooses the default metric according to the problem type when this is specified. This was not present in ML.NET parameter name mappings. `EvaluateMetricType.None` is supposed to be \"None\" in LightGbm but was \"\" in ML.NET parameter name mappings.\r\n\r\n3. [**Update: REVERTED**] Third, in ML.NET, the default `EvaluationMetric` is set to `EvaluateMetricType.Error` for multiclass, `EvaluationMetricType.LogLoss` for binary, and so on. This leads to inconsistent behavior from the user's perspective: If a user specified `EvaluationMetric = EvaluateMetricType.Default`, the parameter passed to LightGbm would be the empty string \"\" but if they do not specify `EvaluationMetric` at all, the parameter passed to LightGbm would be Error for multiclass, LogLoss for binary, and so on.\r\n\r\nThis PR does the following:\r\n- Fixes the bug in (1)\r\n- Addresses (2) by adding all the parameters to the options dictionary with the correct values (i.e. conforming to LightGbm [docs](https://lightgbm.readthedocs.io/en/latest/Parameters.html#metric-parameters)\r\n- [**Update: REVERTED**] Addresses (3) by changing the default `EvaluationMetric` in ML.NET to `EvaluationMetricType.Default`\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3815","RelatedDescription":"Open PR \"Fix the treatment of LightGbm Evaluation Metric parameters in ML.NET …\" (#3815)"},{"Id":"451649636","IsPullRequest":true,"CreatedAt":"2019-06-03T22:59:29","Actor":"abgoswam","Number":"3809","RawContent":null,"Title":"Check for number of input columns in concat transform","State":"closed","Body":"Fixes #3061 \r\n\r\nThe PR makes the following changes:\r\n- Follows Solution A mentioned in the issue\r\n- Added a unit test \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3809","RelatedDescription":"Closed or merged PR \"Check for number of input columns in concat transform\" (#3809)"},{"Id":"451712771","IsPullRequest":true,"CreatedAt":"2019-06-03T22:13:25","Actor":"wschin","Number":"3812","RawContent":null,"Title":"[WIP] Tree-based featurization","State":"open","Body":"Fix #2482. Generating features using tree structure has been a popular technique in data mining. This PR exposes this internal-only feature to the public.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3812","RelatedDescription":"Open PR \"[WIP] Tree-based featurization\" (#3812)"},{"Id":"451702484","IsPullRequest":false,"CreatedAt":"2019-06-03T22:08:12","Actor":"nicolehaugen","Number":"3811","RawContent":null,"Title":"CreateTextLoader isn't respecting the KeyType attribute","State":"closed","Body":"### System information\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n### Issue\r\n\r\nI used LoadFromTextFile to load data where the loaded poco object has the KeyType attribute applied as follows:\r\n\r\n   private class DataPoint\r\n        {\r\n            [LoadColumn(0), KeyType(5)]\r\n            public uint Label { get; set; }\r\n            [LoadColumn(1), KeyType(100)]\r\n            public uint GroupId { get; set; }\r\n            [LoadColumn(2,52), VectorType(50)]\r\n            public float[] Features { get; set; }\r\n        }\r\n\r\nWhen I call Fit using the LightGbm algorithm, I see the following exception because the KeyType attribute isn't being respected when loading from a text file:\r\n\r\nSystem.ArgumentOutOfRangeException  HResult=0x80131502\r\n  Message=Schema mismatch for label column 'Label': expected Single or Key, got UInt32\r\nParameter name: labelCol\r\n  Source=Microsoft.ML.LightGbm\r\n  StackTrace:\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer.<>c__DisplayClass9_0.<CheckLabelCompatible>b__0() in E:\\A\\_work\\449\\s\\src\\Microsoft.ML.LightGbm\\LightGbmRankingTrainer.cs:line 240\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer.CheckLabelCompatible(Column labelCol) in E:\\A\\_work\\449\\s\\src\\Microsoft.ML.LightGbm\\LightGbmRankingTrainer.cs:line 246\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.CheckInputSchema(SchemaShape inputSchema)\r\n\r\nInstead, the KeyType attribute should be respected when loading from a text file.\r\n\r\n### Source code / logs\r\nRun the attached code which uses the attached data.\r\n[SampleKeyRepro.txt](https://github.com/dotnet/machinelearning/files/3249574/SampleKeyRepro.txt)\r\n\r\n[MyTestData.txt](https://github.com/dotnet/machinelearning/files/3249578/MyTestData.txt)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3811","RelatedDescription":"Closed issue \"CreateTextLoader isn't respecting the KeyType attribute\" (#3811)"},{"Id":"451661805","IsPullRequest":false,"CreatedAt":"2019-06-03T19:57:36","Actor":"prathyusha12345","Number":"3810","RawContent":null,"Title":"why sampling key column is being added while Loading IDataView from Dataset stored Database ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n\r\n### Issue\r\n\r\n- I am trying to create a sample to load data stored in SQL Server database. while loading data from database using mlContext.Data.TrainTestSplit(dataView) method, it adds a column called **SamplingKeyColumn**.  But this column is not added while **loading data from file**. \r\n\r\nI want to understand why this **SamplingKeyColumn** column is being added while loading from **Database**  but not while loading from file.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3810","RelatedDescription":"Open issue \"why sampling key column is being added while Loading IDataView from Dataset stored Database \" (#3810)"},{"Id":"451322634","IsPullRequest":true,"CreatedAt":"2019-06-03T18:40:38","Actor":"codemzs","Number":"3805","RawContent":null,"Title":"Add overload for time series checkpoint API that takes a stream","State":"closed","Body":"fixes #3804","Url":"https://github.com/dotnet/machinelearning/pull/3805","RelatedDescription":"Closed or merged PR \"Add overload for time series checkpoint API that takes a stream\" (#3805)"},{"Id":"451322268","IsPullRequest":false,"CreatedAt":"2019-06-03T18:40:38","Actor":"codemzs","Number":"3804","RawContent":null,"Title":"Add overload for time series checkpoint API that takes a stream","State":"closed","Body":"This is needed is scenarios where the user is running the time series prediction on a blob where they don't have files but memory streams. ","Url":"https://github.com/dotnet/machinelearning/issues/3804","RelatedDescription":"Closed issue \"Add overload for time series checkpoint API that takes a stream\" (#3804)"},{"Id":"451611014","IsPullRequest":false,"CreatedAt":"2019-06-03T17:53:02","Actor":"justinormont","Number":"3808","RawContent":null,"Title":"TreeFeaturizer w/ Subsampling","State":"open","Body":"To support TB+ scale datasets, we should have a row sub-sampling parameter in the Tree Featurizer.\r\n\r\nWhy `TreeFeat`? The Tree Featurizer learns the feature interactions on a sub-set of the dataset. The `leaves` output of Tree Featurizer is then sent to a linear model (SDCA/AP/etc) which is scalable to TB scale datasets.\r\n\r\n**Gain**:\r\nThis provides an end-to-end solution for scalable learning. You get the accuracy of the Tree model plus the streamability of the linear model.\r\n\r\n**Request**:\r\n* Provide a `subsample` parameter for `TreeFeat`\r\n* Inside `TreeFeat` run the `TrainTestSplit` to get the correct subsample percent\r\n\r\n**Other solutions**:\r\n* TrainTest split to create a sub-sample of the dataset before `TreeFeat`, and train `TreeFeat` on this subsample. This fails in CV since you need a singular dataview to train on.\r\n* Shuffle + Take. This fails since our shuffle is block-wise; the 1st 4k rows are shuffled against each other, then the next 4k rows are independently shuffled against each other. This leads to the Take only receiving rows from the top of the file. Also fails in CV.\r\n* Generate + RangeFilter. We hid our Generate transform. Also fails in CV. \r\n\r\nWe would like to use the `TreeFeat` plus a streamable Linear model in AutoML to provide a good model to the user on datasets larger than RAM.","Url":"https://github.com/dotnet/machinelearning/issues/3808","RelatedDescription":"Open issue \"TreeFeaturizer w/ Subsampling\" (#3808)"},{"Id":"451595334","IsPullRequest":false,"CreatedAt":"2019-06-03T17:13:22","Actor":"Anipik","Number":"3807","RawContent":null,"Title":"csv files with colums containing commas are not splitted correctly","State":"open","Body":"I am trying to train a model on a github issue dataset. \r\n The dataset contains 4 columns ID, Title, Descriptions and label\r\n\r\n```\r\n7,\"Splitting XLinq classes into separate files, after rebasing the commits.\",\"\",area-System.Runtime.InteropServices\r\n12,\"Remove or cache some unnecessary allocations\",\"I noticed a few places where allocations were occurring unnecessary: - Across several of the immutable and XML collection types, the ICollection.CopyTo implementations were calling Array.SetValue in a loop; the second parameter to SetValue is a params array, so each iteration of the loop was resulting in allocating a new array... I've lifted that implicit allocation out to be an explicit one before the loop. - In a couple of places in the XML library and the metadata reader, string.Trim\\* was being used, either with an array of the same characters unnecessarily being allocated each time, or an implicitly allocated array of constant chars to fill a params array parameter.  I've replaced those with statically cached arrays. - In a couple of places in the XML library, a string was being constructed around a single character via creating a new char array; I've replaced that with usage of string's ctor that takes a character and a count, avoiding the unnecessary char[] allocation. \",area-System.Runtime.InteropServices\r\n13,\"Remove unnecessary unsafe code flag.\",\"The Immutable PCL targets platforms that include those that don't support unsafe code. Opening the solution in VS2015 results in a warning in the error list about this. But features that required unsafe code were recently removed so we don't need this flag any more. \",area-System.Runtime.InteropServices\r\n17,\"Some XPath.XDocument tests are failing\",\"Some XPath.XDocument queries have different results than other XPath navigators. This might be an old behavior or newly introduced bug.  Failing tests: build /p=IncludeTraits=ActiveIssue=17 \",area-System.Xml\r\n20,\"2 XPath.XDocument tests fail because of lacking feature\",\"XPath.XDocument navigator doesn't support MoveToId(string).  Verify if this was ever supported. If it was, verify if we want to support it in the future. If it wasn't move the tests to a different file and remove them from XPath.XDocument.Tests project.  Failing tests: NodeSetFunctionsTest2267 MatchesTest2352  <!--- @huboard:{\"order\":20.0,\"milestone_order\":20,\"custom_state\":\"\"} --> \",area-System.Xml\r\n22,\"Two Numerics Tests are failing only on our CI server\",\"Two of the tests in our System.Numerics.Vectors suite are failing only on our CI build server, and potentially only intermittently:  Vector2NormalizeTest1 Vector4NormalizeTest2  Given that these are very similar to other tests which cover a similar edge-case (especially the Vector3 normalization tests, which aren't failing), we will need to investigate why these tests in particular are failing on our build server. This may have been a point-in-time issue as we brought up our build infrastructure, and may not re-surface again. \",area-System.Numerics\r\n36,\"SIMD test failures on non-ENU configurations.\",\"After pulling both of @adamralph 's pull requests #31 and #32, I'm continuing to see test failures for SIMD on a DEU (German) test environment.  Here's a representative error: d:\\oss\\corefx\\src\\System.Numerics.Vectors\\tests\\GenericVectorTests.cs(545): error : System.Numerics.Tests.GenericVe ctorTests.ToStringCurrencySByte: Assert.Equal() Failure\\r\\nPosition: First difference is at position 8\\r\\nExpected:  <97,00 ?, -108,00 ?, 22,00 ?, 29,00 ?, 49,00 ?, 60,00 ?, 103,00 ?, 58,00 ?, -62,00 ?, -124,00 ?, -117,00 ?, 48,00 ?, 15,00 ?, -35,00 ?, -13,00 ?, -34,00 ?>\\r\\nActual:   <97,00 ?. -108,00 ?. 22,00 ?. 29,00 ?. 49,00 ?. 60,00 ?. 103 ,00 ?. 58,00 ?. -62,00 ?. -124,00 ?. -117,00 ?. 48,00 ?. 15,00 ?. -35,00 ?. -13,00 ?. -34,00 ?> [D:\\oss\\corefx\\bin\\ tools\\fxbuild.proj]  Observe that expected separates elements with a comma, actual separates elements with a dot. \",area-System.Numerics\r\n41,\"Quaternion operator overloads should be using the respective methods\",\"Quaternion declares a handful of methods to perform addition, subtraction and multiplication, and provides the respective overloads for these operations.  However, instead of re-using the `Add`, `Multiply` etc. methods, the code is re-written in the operator overloads. The operators should be using their respective methods rather than re-declaring the same code.  This is under the assumption that the JIT inlines the methods when they are used in the operator overloads. \",area-System.Numerics\r\n49,\"Add Linux/Mac build script\",\"A `build.sh` should be added alongside `build.cmd` to build corefx on Linux/Mac. \",area-Infrastructure\r\n50,\"Made Quarternion's operator overloads use their respective methods\",\"Operator overloads of Quaternion now utilize their respective methods, and removed redundant \"this\" qualifiers in Quaternion constructor. \",area-System.Numerics\r\n52,\"ReferenceSource repo license incorrect for individual files\",\"some of the files I looked up, it has header comment with Apache 2.0 license. which license should apply for those files? MIT or Apache 2.0 \",area-Meta\r\n54,\"Remove always true \"if\" and unreachable code in System.Xml.Linq.XObject.SkipNotify method.\",\"This: if (o.Annotations<XObjectChangeAnnotation>() != null)  is always true because the above while can finish only in two conditions: when o != null or when o.annotations == null. The first condition will be catched by \" if (o == null)\" and if the second one is true, \"o.Annotations<XObjectChangeAnnotation>() != null\" will also always be true i think. \",area-System.Xml\r\n55,\"[Issue 54] Removed always-true if and unreachable code in XObject.cs\",\"Removed always-true if and unreachable code in XObject.cs \",area-System.Xml\r\n58,\"System.Xml.sln fails to build on Mono, error CS0433\",\"**I know that cross-platform support is coming later, I just thought it might make sense to document this here in case someone else tries the same**  Building System.Xml.sln with xbuild on Mono doesn't work (the other solutions build fine), it throws the following errors:  ``` Build FAILED. Errors:  /home/alexander/dev/corefx/src/System.Xml.sln (default targets) -> (Build target) -> /home/alexander/dev/corefx/src/System.Xml.XPath.XDocument/System.Xml.XPath.XDocument.csproj (default targets) -> /usr/lib/mono/4.5/Microsoft.CSharp.targets (CoreCompile target) ->      System/Xml/XPath/XAttributeExtensions.cs(10,56): error CS0433: The imported type `System.Xml.Linq.XAttribute' is defined multiple times     System/Xml/XPath/XAttributeExtensions.cs(10,78): error CS0433: The imported type `System.Xml.Linq.XNamespace' is defined multiple times     System/Xml/XPath/XDocumentExtensions.cs(22,61): error CS0433: The imported type `System.Xml.Linq.XNode' is defined multiple times     System/Xml/XPath/XObjectExtensions.cs(10,23): error CS0433: The imported type `System.Xml.Linq.XContainer' is defined multiple times     System/Xml/XPath/XObjectExtensions.cs(10,49): error CS0433: The imported type `System.Xml.Linq.XObject' is defined multiple times     System/Xml/XPath/XNodeNavigator.cs(48,9): error CS0433: The imported type `System.Xml.Linq.XElement' is defined multiple times     System/Xml/XPath/XNodeNavigator.cs(784,35): error CS0433: The imported type `System.Xml.Linq.XText' is defined multiple times ```  It looks like it runs into a conflict with the System.Xml.Linq library in the Mono GAC. Needs further investigation. \",area-System.Xml\r\n69,\"build.cmd does not build solution on HP laptop (when Platform=MCD is pre-set)\",\"I've got HP laptop with windows 7. When I run build.cmd, I've got the error \"configuration is invalid\"  ``` C:\\Projects\\dotnet\\corefx>build.cmd C:\\Projects\\dotnet\\corefx\\src\\System.Collections.Immutable.sln.metaproj : error MSB4126: указанная конфигурация решения \"Release|MCD\" недопустима. Укажите допустимую конфигурац ию решения с помощью свойств Configuration и Platform (например, MSBuild.exe Solution.sln /p:Configuration=Debug /p:Platform=\"Any CPU\") или оставьте эти свойства пустыми, чтобы использовать конфигурацию решения по умолчанию. [C:\\Projects\\dotnet\\corefx\\src\\System.Collections.Immutable.sln] ```  The reason of this error is that environment variable `Platform` is set to `MCD` on the laptop by default. I have to change build command in the build.cmd by adding `/p:Platform=\"Any CPU\"` to compile the project.  Build script should check for allowed platforms and generate user-friendly error message, which says what to do to successfully compile the project when the platform is not supported.  \",area-Infrastructure\r\n70,\"\"Hello, World!\" sample\",\"Feature request: please add \"Hello, World!\" sample, which shows how to use .NET Core with user applications. \",area-Meta\r\n71,\"Behaviour of `Quaternion.CreateFromAxisAngle` when axis is not a unit vector\",\"The resulting quaternion depends on the length of `axis`. This does not describe a rotation and thus does not match the documentation.  There are a few ways to handle this issue: 1. Normalize `axis`, but this incurs a performance hit 2. Add a precondition that `axis.Length()` ≈ 1.        But enforcing that pre-condition is about as expensive as 1), so it'd probably need to be a documentation-only precondition. Unfortunately this means that consumers will rely on the current behaviour even if it's undocumented, so I don't think that this is a good solution. 3. Document the current behaviour  ---  Just for convenience, the relevant source code:  ``` /// <summary> /// Creates a Quaternion from a vector and an angle to rotate about the vector. /// </summary> /// <param name=\"axis\">The vector to rotate around.</param> /// <param name=\"angle\">The angle, in radians, to rotate around the vector.</param> /// <returns>The created Quaternion.</returns> public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) {     Quaternion ans;      float halfAngle = angle * 0.5f;     float s = (float)Math.Sin(halfAngle);     float c = (float)Math.Cos(halfAngle);      ans.X = axis.X * s;     ans.Y = axis.Y * s;     ans.Z = axis.Z * s;     ans.W = c;      return ans; } ``` \",area-System.Numerics\r\n72,\"`Equals` with NaN values (IEEE vs. reflexivity)\",\"The built in floating point types compare `NaN` as unequal when using `==` and `!=` (following IEEE semantics) but compare it as equal when using the `Equals` method.  Your floating point based types currently use IEEE semantics even for `Equals`. I suggest using the same behaviour as the built in types in your floating point based types like vectors or quaternions.  The  MSDN documentation of `Equals` contains an exception that allows `A.Equals(A)` to return false on floating point types, so you don't strictly violate its contract. But returning false still breaks hash tables and does not match the behaviour of the built in types, so I consider it a bad idea.  This can be avoided by calling `Equals` on the members instead of `==` in the implementation of `Equals` but not in `==` and `!=`.  For example with quaternion,  replace  ``` public bool Equals(Quaternion other) {     return (X == other.X &&             Y == other.Y &&             Z == other.Z &&             W == other.W); } ```  with  ``` public bool Equals(Quaternion other) {     return (X.Equals(other.X) &&             Y.Equals(other.Y) &&             Z.Equals(other.Z) &&             W.Equals(other.W)); } ```  You might want to add tests that check that `==` and `!=` compare all the above cases as unequal, so that they match the IEEE specification.  Replace:  ``` // Counterintuitive result - IEEE rules for NaN comparison are weird! Assert.False(a.Equals(a)); Assert.False(b.Equals(b)); Assert.False(c.Equals(c)); Assert.False(d.Equals(d)); ```  with:  ``` // Equals does not follow IEEE semantics since many consumers rely on equality being reflexive. // This includes collections like `Dictionary<K,V>` or `HashSet<T>` Assert.True(a.Equals(a)); Assert.True(b.Equals(b)); Assert.True(c.Equals(c)); Assert.True(d.Equals(d));  // Counterintuitive result - IEEE rules for NaN comparison are weird! Assert.False(a == a); Assert.False(b == b); Assert.False(c == c); Assert.False(d == d);  Assert.True(a != a); Assert.True(b != b); Assert.True(c != c); Assert.True(d != d); ``` \",area-System.Numerics\r\n77,\"Some Xml encoding tests lost their encoding\",\"Some of Xml tests were testing problematic characters in different Encoding (like Russian characters). At some point few years back the encoding was lost while moving between different repos. Tests pass because .cs files lost their encoding too. Tests need to be rewritten since there is no trace of original copy \",area-System.Xml\r\n81,\"Add test coverage for XPath and XDocument\",\"- Adding test coverage for XPath implementations (XPath.XPathDocument, XPath.XmlDocument, XPath.XDocument) - Adding some tests for XDocument (more coming later) \",area-System.Xml\r\n94,\"Necessary bits for Mono.Posix\",\"I tried to build [Mono.Posix](https://github.com/mono/mono/tree/master/mcs/class/Mono.Posix) against aspnetcore50 and found a lot of API that mono uses to be missing from .NET Core most prominently in the Interop-domain (like CustomMarshaler).  Please add Mono.Posix to your list of scenarios that can benefit from the API surface of .NET Core. \",area-Meta\r\n110,\"Add async document/element loading for XLinq.\",\"Adds XElement.LoadAsync and XDocument.LoadAsync. Code from the sync versions has been largely lifted out so they can share an implementation as much as possible. \",area-System.Xml\r\n116,\"Quaternion and public fields\",\"Is there a reason that the Quaternion struct has public exposed fields versus read only properties? Seems to be against the general guidelines for structs and immutability. Why would you want to allow X, Y, Z and W to be set outside of the ctor? \",area-System.Numerics\r\n118,\"Matrix4x4 - more useful public properties\",\"Forward, Backward, Up, Down, Left, Right public properties for Matrix4x4 \",area-System.Numerics\r\n119,\"Vector3 - more public static properties\",\"Up, Down, Left, Right, Forward, Backward vector public static properties \",area-System.Numerics\r\n121,\"Matrix4x4 - more useful public properties\",\"Added Forward, Backward, Up, Down, Left, Right vectors public properties for Matrix4x4.  Fix #118 \",area-System.Numerics\r\n129,\"Add XmlReader\",\"System.Xml.XmlReader is currently missing. \",area-System.Xml\r\n\r\n```\r\n\r\nThis Is shorter version of the dataset. The title and body are in quotes and columns are comma separated.\r\n\r\nWhen I try to use auto-ml on this \r\n```c#\r\nInferring Columns ...\r\nAn Error occured during inferring columns\r\nUnable to split the file provided into multiple, consistent columns.\r\nMicrosoft.ML.AutoML.InferenceException: Unable to split the file provided into multiple, consistent columns.\r\n   at Microsoft.ML.AutoML.ColumnInferenceApi.InferSplit(MLContext context, TextFileSample sample, Nullable`1 separatorChar, Nullable`1 allowQuotedStrings, Nullable`1 supportSparse)\r\n   at Microsoft.ML.AutoML.ColumnInferenceApi.InferColumns(MLContext context, String path, ColumnInformation columnInfo, Nullable`1 separatorChar, Nullable`1 allowQuotedStrings, Nullable`1 supportSparse, Boolean trimWhitespace, Boolean groupColumns)\r\n   at Microsoft.ML.CLI.CodeGenerator.AutoMLEngine.InferColumns(MLContext context, ColumnInformation columnInformation)\r\n   at Microsoft.ML.CLI.CodeGenerator.CodeGenerationHelper.GenerateCode()\r\n   at Microsoft.ML.CLI.Program.<>c__DisplayClass1_0.<Main>b__0(NewCommandSettings options)\r\nPlease see the log file for more info.\r\nExiting ...\r\n```\r\n\r\nMy guess is we are not respecting the quotes and just splitting the string on commas.\r\n\r\nThe dataset works if I separate the columns using tabs\r\n\r\n\r\n\r\ncc @eerhardt @danmosemsft @codemzs \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3807","RelatedDescription":"Open issue \"csv files with colums containing commas are not splitted correctly\" (#3807)"},{"Id":"451537555","IsPullRequest":false,"CreatedAt":"2019-06-03T15:08:59","Actor":"Traijan1","Number":"3806","RawContent":null,"Title":"LearningPipeline was not found","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  2.1.602\r\n### Issue\r\n\r\nHello,\r\nmy issue is that when I want to use \"var pipeline = new LearningPipeline();\" I get an error by \"LearningPipeline()\"\r\n\r\nA picture: http://prntscr.com/nx29zl\r\n\r\nThe error says: \"The type or namespace name \"LearningPipeline\" was not found\"\r\nCode: CS0246\r\n\r\n- **What did you do?**\r\nI found nothing.\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\n```csharp\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Test {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            var pipeline = new LearningPipeline(); \r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3806","RelatedDescription":"Open issue \"LearningPipeline was not found\" (#3806)"},{"Id":"451289076","IsPullRequest":false,"CreatedAt":"2019-06-03T04:35:31","Actor":"justinormont","Number":"3803","RawContent":null,"Title":"Race condition in creation of AutoML temp folders","State":"open","Body":"**tldr;** recommend a GUID based folder name: `Temp\\Microsoft.ML.AutoML\\experiment_9bdaa79e-8ceb-4103-988b-9d73aefd53c2\\...`\r\n\r\nUser reported bug by @markusmobius in https://github.com/dotnet/machinelearning/issues/3749\r\n\r\n## Bug\r\nAutoML stores the trained models from the sweeping process on disk to avoid ever growing RAM usage. We currently ensure the folder is named uniquely by checking if it exists, and if so, incrementing a counter at the end. This process has a race condition where multiple processes will test for the folder's existence, see nothing, and both create and begin to work in the same folder. \r\n\r\n## Background\r\n@markusmobius was running multiple instances of the AutoML CLI, and the various processes were clobbering each others' temporary folders. See https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495259293\r\n\r\nAs said by @daholste in https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495407319:\r\n> Re: writing models to the temp folder -- when initializing experiments one after the other on a machine, each experiment would have its own unique model folder:\r\n> ![image](https://user-images.githubusercontent.com/43974253/58290281-0c6f3500-7d6e-11e9-8790-d8a4077dab21.png)\r\n> However, when initializing many experiments in parallel on the same machine, it is definitely possible to have a race condition that causes conflict here. Thanks for pointing this out \r\n\r\nReply by @justinormont in https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495426783 / https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495448847: \r\n> I believe we used a named mutex in the word embedding's model downloader to ensure only one copy of the model is being downloaded per machine. \r\n\r\n> I found the word embedding's named mutex: https://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L237-L246\r\n> \r\n> The lock is in the downloader class (resource manager).\r\n> \r\n> Plus the `finally` unlock:\r\n> https://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L287-L291\r\n> \r\n> We could do the same for the temp folder; if I recall I thought it was race free when the storage is local, but not for network shares due to lack of a remote atomic rename. \r\n> \r\n> More simple approach is to use a GUID: `Temp\\Microsoft.ML.AutoML\\experiment_9bdaa79e-8ceb-4103-988b-9d73aefd53c2\\...`","Url":"https://github.com/dotnet/machinelearning/issues/3803","RelatedDescription":"Open issue \"Race condition in creation of AutoML temp folders\" (#3803)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-06T05:30:41.9273426Z","RunDurationInMilliseconds":1020}