{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":23,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":49,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6635971451","Type":"PullRequestEvent","CreatedAt":"2017-09-26T02:01:40","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14184","RelatedDescription":"Opened pull request \"[RyuJIT/ARM32] Fast tail call: Init LSRA to use R12 to save jump target\" (#14184) at dotnet/coreclr","RelatedBody":"To save jump target of fast tail call on ARM32, we use r12.\r\nIt is not affect to generated code on arm32 yet, because call->IsFastTailCall() is always false now."},{"Id":"6635952839","Type":"PullRequestEvent","CreatedAt":"2017-09-26T01:54:26","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14183","RelatedDescription":"Opened pull request \"[DO NOT MERGE] x86 CI test: dummy change\" (#14183) at dotnet/coreclr","RelatedBody":"do not change"},{"Id":"6635868843","Type":"PullRequestEvent","CreatedAt":"2017-09-26T01:20:24","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14170","RelatedDescription":"Merged pull request \"[CI][Linux/x86] Use Ubuntu for x86 build and test in dev/unix_test_workflow\" (#14170) at dotnet/coreclr","RelatedBody":"Fix not changed in #14169\r\n\r\ncc/ @jashook "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6635755284","Type":"IssuesEvent","CreatedAt":"2017-09-26T00:32:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7582","RelatedDescription":"Closed issue \"dotnet test is now executing from a new location\" (#7582) at dotnet/cli","RelatedBody":"I've just finished an upgrade from project.json to the new csproj format. I'm now debugging a few new xunit test failures. The gist of it seems to be that the test runner is now executing from a different location, and so things like Assembly.GetExecutingAssembly().Location no longer report the same. This wouldn't be a huge issue, except the location it's reporting appears to be siloed one folder per-DLL, so things like appconfigs are not able to be side-loaded.\r\n\r\nThis is blocking our transition to the new format, which has been unfortunately fraught with other bugs and issues. I have kept all versions the same (or as close as possible) between the project.json and test.csproj.\r\n\r\n## Steps to reproduce\r\nStart project using old toolset (dotnet core 1.0.0-preview2-003156 in this case)\r\nGrab xunit test in the debugger\r\nIn Immediate window, check: Assembly.GetExecutingAssembly().Location\r\n\r\nStart project using new toolset\r\nGrab xunit test in the debugger\r\nIn Immediate window, check: Assembly.GetExecutingAssembly().Location\r\n\r\n## Expected  behavior\r\nAssembly.GetExecutingAssembly().Location\r\n\"C:\\\\Users\\\\mbenua\\\\Documents\\\\GitHub\\\\clone-myServer\\\\myServer\\\\test\\\\MP.Test\\\\bin\\\\Debug\\\\net46\\\\win7-x64\\\\MP.dll\"\r\n\r\n## Actual behavior\r\nAssembly.GetExecutingAssembly().Location\r\n\"C:\\\\Users\\\\mbenua\\\\AppData\\\\Local\\\\Temp\\\\1705cbcd-4476-4305-8433-31d39beb0222\\\\1705cbcd-4476-4305-8433-31d39beb0222\\\\assembly\\\\dl3\\\\7a232852\\\\be8a30c0_6e23d301\\\\MP.dll\"\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n"},{"Id":"6635657823","Type":"IssuesEvent","CreatedAt":"2017-09-25T23:51:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7507","RelatedDescription":"Closed issue \"Allow failures or support conditionals for nuget.config\" (#7507) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nAdd a windows path and a linux path to Nuget.config in the project directory\r\nFrom the project directory, run `dotnet restore --configfile Nuget.config`\r\n\r\n## Expected  behavior\r\nIf a feed produces an error, the restore should be allowed to continue by trying other feeds. For example, if run on linux, the windows path will fail but the restore should succeed when it tries the linux path and vice versa.\r\n\r\n## Actual behavior\r\nThe restore fails with the following error:\r\n\r\n> \r\n> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n> Parameter name: index\r\n>    at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n>    at System.SZArrayHelper.get_Item[T](Int32 index)\r\n>    at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n>    at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.LogVerbosityForAllTopLevelCommand(ICollection`1 result, ParseResult parseResult, String topLevelCommandName)\r\n>    at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n>    at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n>    at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n>    at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n> .NET Command Line Tools (2.0.0)\r\n> \r\n> Product Information:\r\n>  Version:            2.0.0\r\n>  Commit SHA-1 hash:  cdcd1928c9\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     ubuntu\r\n>  OS Version:  17.04\r\n>  OS Platform: Linux\r\n>  RID:         linux-x64\r\n>  Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n> \r\n> Microsoft .NET Core Shared Framework Host\r\n> \r\n>   Version  : 2.0.0\r\n>   Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\nWe have development occuring on both linux and windows machines and we use local nuget feeds so that we can modify shared libraries without having to wait for a remote build to push to the remote nuget server. The issue arises when we try to restore nuget packages. If we specify both a windows path and a linux path as package sources, the restore will fail. If I'm on linux, it'll work if i remove the windows path and vice versa.\r\n\r\nOptionally, the feature to include a condition like `Condition=\"'$(OS)'=='Unix'\"` (similar to project targets) could help\r\n\r\nI'm currently working around this by creating Nuget.nix.config and specifying that on every restore done in linux and Nuget.config on every restore done in windows.\r\n\r\nAnother option might be to support a standard syntax for environment variables that work cross platform.\r\n"},{"Id":"6635642380","Type":"IssuesEvent","CreatedAt":"2017-09-25T23:45:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7404","RelatedDescription":"Closed issue \"dotnet sln add doesn't seem to work with globs\" (#7404) at dotnet/cli","RelatedBody":"Hey there! I am having an issue with the `dotnet sln [<SOLUTION_NAME>] add <GLOBBING_PATTERN>` command. While I can add individual projects to the solution by passing the individual csproj files to the add command, it will not work with a glob [as dictated in the docs](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-sln).\r\n\r\n## Steps to reproduce\r\n1. Create a sln with dotnet cli\r\n1. Create multiple sub projects using dotnet cli\r\n1. Attempt to add projects in sub directories to the CLI using the `dotnet sln CoreTestApi.sln add **/*.csproj` (as I am on Windows, I have also tried **\\\\*.csproj)\r\n\r\n## Expected  behavior\r\n\r\nProjects in sub directories should be added to the solution.\r\n\r\n## Actual behavior\r\n\r\nCli emits red error text `Project **/*.csproj does not exist`\r\n\r\n## Environment data\r\n\r\n.NET Command Line Tools (2.0.0-preview2-006497)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-006497\r\n Commit SHA-1 hash:  06a2093335\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25407-01\r\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\r\n\r\n\r\n\r\n\r\n"},{"Id":"6635626603","Type":"IssuesEvent","CreatedAt":"2017-09-25T23:39:23","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7412","RelatedDescription":"Closed issue \"Issues with .NET Native Compiler and UWP Store Ingestion\" (#7412) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nWhen compiling our application with Microsoft.NETCore.UniversalWindowsPlatform target version 5.3.3, it includes as a dependency Microsoft.Net.Native.Compiler version 1.6.3. The application compiles correctly without any issues, can also side-load the application to UWP devices and runs without issue. \r\n\r\nWhen attempting to submit the application to the store however it fails with the error 1201. If the application is build targeting Microsoft.NETCore.UniversalWindowsPlatform  version 5.2.2 however it will be accepted by the UWP store ingestion process without issue, the issue is with the native compiler version 1.6.3, as the compiler distributed with the UWP SDK allows the package to be submit without error.\r\n\r\n## Expected  behavior\r\nAbility to compile solution with package Microsoft.NETCore.UniversalWindowsPlatform (5.3.3) with dependency Microsoft.Net.Native.Compiler version 1.6.3 and submit application package to the store without encountering error 1201.\r\n\r\n## Actual behavior\r\nWhen building with the package Microsoft.NETCore.UniversalWindowsPlatform (5.3.3) with dependency Microsoft.Net.Native.Compiler version 1.6.3 and submit application package to the store it is encountering error 1201, however does not encounter this issue when compiling with 5.2.2 and the ilc compiler supplied with the SDK.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4"},{"Id":"6635616322","Type":"IssuesEvent","CreatedAt":"2017-09-25T23:35:12","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7420","RelatedDescription":"Closed issue \"package installation of dotnet-sdk-2.0.0 fails on ubuntu 16.04 with fish shell\" (#7420) at dotnet/cli","RelatedBody":"```\r\n~> grep ibqn /etc/passwd | cut -d ':' -f 7\r\n/usr/bin/fish\r\n```\r\n\r\nThe installation of \r\n`sudo apt install dotnet-sdk-2.0.0-preview2-006497`\r\n\r\nfailes with on ubuntu 16.04\r\n\r\n```\r\nSetting up dotnet-sdk-2.0.0-preview2-006497 (2.0.0-preview2-006497-1) ...\r\nThis software may collect information about you and your use of the software, and send that to Microsoft.\r\nPlease visit http://aka.ms/dotnet-cli-eula for more information.\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\r\n\r\n.NET Core Tools Telemetry\r\n--------------\r\nThe .NET Core Tools include a telemetry feature that collects usage information. It is important that the .NET Team understands how the tools are being used so that we can improve them.\r\n\r\nThe data collected is anonymous and will be published in an aggregated form for use by both Microsoft and community engineers under the Creative Commons Attribution License.\r\n\r\nThe .NET Core Tools telemetry feature is enabled by default. You can opt-out of the telemetry feature by setting an environment variable DOTNET_CLI_TELEMETRY_OPTOUT (for example, 'export' on macOS/Linux, 's\r\net' on Windows) to true (for example, 'true', 1). You can read more about .NET Core tools telemetry at https://aka.ms/dotnet-cli-telemetry.\r\nUnsupported use of '||'. In fish, please use 'COMMAND; or COMMAND'.\r\nfish: dotnet new > /dev/null 2>&1 || true\r\n                                   ^\r\n\r\ndpkg: error processing package dotnet-sdk-2.0.0-preview2-006497 (--configure):\r\n subprocess installed post-installation script returned error exit status 127\r\nProcessing triggers for libc-bin (2.23-0ubuntu9) ...\r\nErrors were encountered while processing:\r\n dotnet-sdk-2.0.0-preview2-006497\r\nE: Sub-process /usr/bin/dpkg returned an error code (1)\r\n\r\n```\r\nTherefore this package is definitely broken, if you use shell scripting you should not guess what shell users have! This is poor and dangerous...\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6635606891","Type":"IssuesEvent","CreatedAt":"2017-09-25T23:31:31","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7447","RelatedDescription":"Closed issue \"'dotnet test' in solution folder fails when non-test projects are in the solution\" (#7447) at dotnet/cli","RelatedBody":"## Description\r\nBeing able to run 'dotnet test' on a solution now is amazing! However, unless that solution contains ONLY test projects it always produces a failure result due to not finding the test sdk. In my experience it is rare for tests to be in a separate solution - they generally don't exist or are in the same solution as the code they are testing.\r\n\r\nIt seems logical to me that when running tests on a solution any projects without the test sdk should be ignored. If a project has the test sdk and no tests or is being tested in isolation and does not have the sdk that is likely an error. However if a project does not have the sdk and is being tested as part of a solution that is likely not an error.\r\n\r\nAlternatively, if that feels too much like a breaking change then adding an option to filter by patterns on the project name could suffice. Something like `dotnet test --projects \"*.Tests.*\"`. Since most test projects in my experience have some form of pattern to the name - usually involving the word 'test' - this would probably be sufficient for most cases.\r\n\r\nNote that the existing `--filter <EXPRESSION>` switch is insufficient to prevent the exception, presumably because it is processed by the underlying test framework which happens after the missing sdk error is thrown.\r\n\r\n## Steps to reproduce\r\n'''\r\ndotnet new sln -n Solution\r\ndotnet new console -n Program\r\ndotnet sln Solution.sln add Program/Program.csproj\r\ndotnet new mstest -n Tests\r\ndotnet sln Solution.sln add Tests/Tests.csproj\r\ndotnet test\r\n$?\r\n'''\r\n\r\n## Expected  behavior\r\n1) Existing tests run.\r\n2) Projects with no test sdk reference are ignored.\r\n3) Return code is zero.\r\n\r\n## Actual behavior\r\n1) Exiting tests run.\r\n2) Projects with no test sdk reference are run as test projects and fail due to an error.\r\n3) Return code is non-zero. In this case it appears to be 1 but I'm not sure if that is consistent.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\nWhat is not clear form this environment output is that I am running in bash via the WSL.\r\n\r\n\r\n\r\n\r\n"},{"Id":"6635604690","Type":"PullRequestEvent","CreatedAt":"2017-09-25T23:30:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7679","RelatedDescription":"Merged pull request \"Update Mac OS X to macOS to reflect name on site (README.md only)\" (#7679) at dotnet/cli","RelatedBody":"Most newer dotnet material refers to the Mac operating system as macOS. This pull request reflects the change.\r\n\r\nReference: https://www.microsoft.com/net/core#macos\r\n"},{"Id":"6635407632","Type":"IssuesEvent","CreatedAt":"2017-09-25T22:22:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6770","RelatedDescription":"Closed issue \"`dotnet build` fails when targeting .NET4.6\" (#6770) at dotnet/cli","RelatedBody":"I'm creating a second issue because the first one #6749 has been closed without a solution and has not been reopened.\r\n\r\n## Steps to reproduce\r\nCreate a new solution using:\r\n`dotnet new sln --name TestSolution`\r\n\r\nCreate and Add a class library project:\r\n`dotnet new classlib --name TestProject --output TestProject`\r\n`dotnet sln add ./TestProject/TestProject.csproj`\r\n\r\nIn TestProject.csproj change the TargetFramework property to net46\r\n\r\nRestore and build the project using:\r\n`dotnet restore`\r\n`dotnet build`\r\n\r\n## Expected  behavior\r\nThe project should build successfully.\r\n\r\n## Actual behavior\r\nThe project fails to build with the following error message:\r\n```\r\nE:\\Program Files\\dotnet\\sdk\\1.0.4\\Microsoft.Common.CurrentVersion.targets(1111,5): error MSB3644: The reference assemblies for framework \".NETFramework,Version=v4.6\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [E:\\Work\\TestSolution\\TestProject\\TestProject.csproj]\r\n```\r\nHowever, when using `msbuild` directly the build passes.\r\nFurthermore, the solution builds with the following:\r\n`dotnet msbuild -p:FrameworkPathOverride=\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6\"`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   E:\\Program Files\\dotnet\\sdk\\1.0.4"},{"Id":"6635342497","Type":"IssuesEvent","CreatedAt":"2017-09-25T22:02:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6805","RelatedDescription":"Closed issue \".NET Core 1.0 ASP.NET Dynamic compilation broken after installing .NET Core 2.0 SDK on Linux\" (#6805) at dotnet/cli","RelatedBody":"## Problem\r\nAfter installing .NET Core 2.0 preview 1 tooling, the nuget package cache contains lower case names:\r\n\r\n    Example: ~/.nuget/packages/microsoft.aspnetcore.antiforgery\r\n\r\nBut the ASP.NET Core 1.0 runtime expects the same casing as in the package. So if I do a 'dotnet run' on a .NET Core 1.0 app, it will no longer work.\r\n\r\n## Approximate repro steps:\r\n1. Install a new Linux box (I was using Ubuntu 16)\r\n2. Install an older CLI (I started off with 1.0)\r\n3. dotnet new mvc\r\n4. Build and run, make sure everything works\r\n5. `wget http://localhost:5000` and make sure the HTTP request succeeds\r\n6. Install the 2.0.0-preview1 build\r\n7. To be safe, nuke your nuget cache again\r\n8. dotnet restore/run your project\r\n9. wget http://localhost:5000\r\n\r\n## Actual behavior\r\nRequest fails with HTTP 500:\r\n```\r\nResolving localhost (localhost)... 127.0.0.1\r\nConnecting to localhost (localhost)|127.0.0.1|:5000... connected.\r\nHTTP request sent, awaiting response... 500 Internal Server Error\r\n2017-06-08 12:17:46 ERROR 500: Internal Server Error.\r\n```\r\nIf you have logging enabled, you will see something like this:\r\n```\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      An unhandled exception has occurred while executing the request\r\nSystem.InvalidOperationException: Can not find compilation library location for package 'Microsoft.AspNetCore.Antiforgery'\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n   at System.Linq.Enumerable.<SelectManyIterator>d__157`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n```\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0-preview1-005977)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview1-005977\r\n Commit SHA-1 hash:  414cab8a0b\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0-preview1-005977/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6635239315","Type":"IssuesEvent","CreatedAt":"2017-09-25T21:35:41","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6104","RelatedDescription":"Closed issue \"[MIGRATION] Unable to build Xamarin Forms App after project migration\" (#6104) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nReduced test case-\r\n\r\nProgram.cs:\r\n```\r\n﻿using System;\r\n\r\nnamespace ConsoleApplication\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nproject.json:\r\n```\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n  \"buildOptions\": {\r\n    \"debugType\": \"portable\",\r\n    \"platform\": \"AnyCPU\",\r\n    \"preserveCompilationContext\": true\r\n  },\r\n  \"dependencies\": { \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.0\"\r\n    },\r\n    \"Xamarin.Forms\": \"2.3.3.163-pre3\"\r\n  },\r\n  \"runtimes\": {\r\n    \"win\": {},\r\n    \"linux\": {}\r\n  },\r\n \"frameworks\": {\r\n    \"netcoreapp1.0\": {\r\n      \"imports\": [\r\n        \"portable-net45+wp80+win81+wpa81\",\r\n        \"netstandard1.6\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\n```\r\nrun dotnet migrate\r\nrun dotnet restore \r\nrun dotnet build\r\n\r\n## Expected  behavior\r\nBuild should be successful. \r\nWith old dotnet build used to succeed but after migration to .csproj build fails when we have a Xamarin.Forms dependency.\r\n\r\n## Actual behavior\r\nBuild Error Reported-\r\n\r\n> /home/karthik/.nuget/packages/xamarin.forms/2.3.3.163-pre3/build/portable-win+net45+wp80+win81+wpa81+MonoAndroid10+Xamarin.iOS10+xamarinmac20/Xamarin.Forms.targets(40,3): error MSB4062: The \"Xamarin.Forms.Build.Tasks.FixedCreateCSharpManifestResourceName\" task could not be loaded from the assembly /home/karthik/.nuget/packages/xamarin.forms/2.3.3.163-pre3/build/portable-win+net45+wp80+win81+wpa81+MonoAndroid10+Xamarin.iOS10+xamarinmac20/Xamarin.Forms.Build.Tasks.dll. Could not load file or assembly 'Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified. [/home/karthik/Desktop/dotnet-proj/sample/sample.csproj]\r\n> /home/karthik/.nuget/packages/xamarin.forms/2.3.3.163-pre3/build/portable-win+net45+wp80+win81+wpa81+MonoAndroid10+Xamarin.iOS10+xamarinmac20/Xamarin.Forms.targets(40,3): error MSB4062:  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [/home/karthik/Desktop/dotnet-proj/sample/sample.csproj]\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n> .NET Command Line Tools (2.0.0-preview1-005448)\r\n> \r\n> Product Information:\r\n>  Version:            2.0.0-preview1-005448\r\n>  Commit SHA-1 hash:  f8c3c4a030\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     ubuntu\r\n>  OS Version:  14.04\r\n>  OS Platform: Linux\r\n>  RID:         ubuntu.14.04-x64\r\n>  Base Path:   /home/karthik/Desktop/dotnet-dev-ubuntu-x64.latest/sdk/2.0.0-preview1-005448/\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6635228421","Type":"IssuesEvent","CreatedAt":"2017-09-25T21:32:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/5973","RelatedDescription":"Closed issue \"[MIGRATION]: Warnings & errors building MoreLINQ post migration\" (#5973) at dotnet/cli","RelatedBody":"## Setup\r\n\r\nI started by cloning the [MoreLINQ repo](https://github.com/morelinq/MoreLINQ):\r\n\r\n    git clone https://github.com/morelinq/MoreLINQ.git`\r\n\r\nThe default branch, `master`, was at morelinq/MoreLINQ@dbad4803bedfef69f6a27cd897d0a4b2a66ce491 at time of reporting this issue. Next I ran `dotnet --info`:\r\n\r\n```\r\n.NET Command Line Tools (1.0.0-preview2-003131)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview2-003131\r\n Commit SHA-1 hash:  635cf40e58\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n```\r\n\r\nI updated `global.json` and changed the SDK version from `1.0.0-preview2-003131` to `1.0.0`:\r\n\r\n```diff\r\ndiff --git a/global.json b/global.json\r\nindex 7d9a70b..16bbe9d 100644\r\n--- a/global.json\r\n+++ b/global.json\r\n@@ -4,6 +4,6 @@\r\n         \"MoreLinq.Test\"\r\n     ],\r\n     \"sdk\": {\r\n-        \"version\": \"1.0.0-preview2-003131\"\r\n+        \"version\": \"1.0.0\"\r\n     }\r\n }\r\n\\ No newline at end of file\r\n```\r\n\r\nI ran `dotnet --info` again to check that `dotnet` was indeed reflecting the new SDK version from `global.json` and it was:\r\n\r\n```\r\n.NET Command Line Tools (1.0.0)\r\n\r\nProduct Information:\r\n Version:            1.0.0\r\n Commit SHA-1 hash:  e53429feb4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.0\r\n```\r\n\r\n## Migration\r\n\r\nI ran the migration:\r\n\r\n    dotnet migrate\r\n\r\nAll seemed to have gone well:\r\n\r\n```\r\nProject MoreLinq migration succeeded (B:\\MoreLinq).\r\n\r\nProject MoreLinq.Test migration succeeded (B:\\MoreLinq.Test).\r\nSummary\r\nTotal Projects: 2\r\nSucceeded Projects: 2\r\nFailed Projects: 0\r\n\r\nThe project migration has finished. Please visit https://aka.ms/coremigration to report any issues you've encountered or ask for help.\r\nFiles backed up to B:\\backup\\\r\n```\r\n\r\n### Expected Behavior\r\n\r\nI expected the migration to succeed with the process touching the solution, `*.xproj` & `project.json` files.\r\n\r\n### Actual behavior\r\n\r\nThe migration deleted `global.json`:\r\n\r\n```\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nChanges not staged for commit:\r\n  (use \"git add/rm <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n\tdeleted:    MoreLinq.Test/MoreLinq.Test.xproj\r\n\tdeleted:    MoreLinq.Test/project.json\r\n\tmodified:   MoreLinq.sln\r\n\tdeleted:    MoreLinq/MoreLinq.xproj\r\n\tdeleted:    MoreLinq/project.json\r\n\tdeleted:    global.json\r\n\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\tMoreLinq.Test/MoreLinq.Test.csproj\r\n\tMoreLinq/MoreLinq.csproj\r\n\tbackup/\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n```\r\n\r\nIs that normal? How does one pin the SDK version to guard against future incompatible versions?\r\n\r\n## Restoring\r\n\r\nI ran a restore:\r\n\r\n    dotnet restore\r\n\r\n### Expected  behavior\r\n\r\nI expected packages for all projects to be restored.\r\n\r\n### Actual behavior\r\n\r\nIt failed:\r\n\r\n```\r\nMSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.\r\n```\r\n\r\nHowever [`MoreLinq.sln` was there in the same directory](https://github.com/morelinq/MoreLINQ/blob/dbad4803bedfef69f6a27cd897d0a4b2a66ce491/MoreLinq.sln) so the error was a surprise.\r\n\r\n## Restoring Take 2\r\n\r\nI ran a restore specifying the solution file explicitly:\r\n\r\n    dotnet restore MoreLinq.sln\r\n\r\n### Expected  behavior\r\n\r\nI expected packages for all projects to be restored.\r\n\r\n### Actual behavior\r\n\r\nWhile restoring succeeded, it did so with many warnings about packages being downgraded:\r\n\r\n```\r\n  Restoring packages for B:\\MoreLinq.Test\\MoreLinq.Test.csproj...\r\n  Restoring packages for B:\\MoreLinq\\MoreLinq.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Collections from 4.3.0 to 4.0.11  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Collections (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> System.Collections (>= 4.0.11) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Diagnostics.Debug from 4.3.0 to 4.0.11  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Diagnostics.Debug (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> System.Diagnostics.Debug (>= 4.0.11) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Linq from 4.3.0 to 4.1.0  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Linq (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> System.Linq (>= 4.1.0) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Resources.ResourceManager from 4.3.0 to 4.0.1  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Resources.ResourceManager (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> System.Resources.ResourceManager (>= 4.0.1) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Runtime.Extensions from 4.3.0 to 4.1.0  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Runtime.Extensions (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq (>= 2.3.0) -> System.Runtime.Extensions (>= 4.1.0) [B:\\MoreLinq.sln]\r\n  Lock file has not changed. Skipping lock file write. Path: B:\\MoreLinq\\obj\\project.assets.json\r\n  Restore completed in 208.55 ms for B:\\MoreLinq\\MoreLinq.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Collections from 4.3.0 to 4.0.11  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Collections (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> System.Collections (>= 4.0.11) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Diagnostics.Debug from 4.3.0 to 4.0.11  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Diagnostics.Debug (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> System.Diagnostics.Debug (>= 4.0.11) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Linq from 4.3.0 to 4.1.0  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Linq (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> System.Linq (>= 4.1.0) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Resources.ResourceManager from 4.3.0 to 4.0.1  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Resources.ResourceManager (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> System.Resources.ResourceManager (>= 4.0.1) [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning : Detected package downgrade: System.Runtime.Extensions from 4.3.0 to 4.1.0  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> NETStandard.Library (>= 1.6.1) -> System.Runtime.Extensions (>= 4.3.0)  [B:\\MoreLinq.sln]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\NuGet.targets(97,5): warning :  MoreLinq.Test (>= 2.0.0) -> MoreLinq (>= 2.3.0) -> System.Runtime.Extensions (>= 4.1.0) [B:\\MoreLinq.sln]\r\n  Lock file has not changed. Skipping lock file write. Path: B:\\MoreLinq.Test\\obj\\project.assets.json\r\n  Restore completed in 1.03 sec for B:\\MoreLinq.Test\\MoreLinq.Test.csproj.\r\n  \r\n  NuGet Config files used:\r\n      C:\\Users\\atif\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n  \r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n## Building\r\n\r\nI ran a build as follows (I specified the solution file explicitly because like with `dotnet restore`, `dotnet build` alone failed with the error MSB1003):\r\n\r\n    dotnet build MoreLinq.sln\r\n\r\n### Expected  behavior\r\n\r\nI expected the build to succeed with errors or warnings.\r\n\r\n### Actual behavior\r\n\r\nThe build failed with 1 warning, and more importantly, 19 errors:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.1.548.43366\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\Microsoft.Common.CurrentVersion.targets(1111,5): error MSB3644: The reference assemblies for framework \".NETFramework,Version=v3.5\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [B:\\MoreLinq\\MoreLinq.csproj]\r\n  MoreLinq -> B:\\MoreLinq\\bin\\Debug\\netstandard1.0\\MoreLinq.dll\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\Microsoft.Common.CurrentVersion.targets(1964,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(30,32): error CS0117: 'MoreEnumerable' does not contain a definition for 'AssertCount' [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(37,31): error CS1061: 'object[]' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'object[]' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(43,47): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(50,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(57,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(67,24): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(76,24): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(91,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(106,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(131,44): error CS1061: 'BreakingSequence<object>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'BreakingSequence<object>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(173,56): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(174,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(175,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(176,52): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(201,56): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(202,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(203,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(204,52): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\Microsoft.Common.CurrentVersion.targets(1964,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\1.0.0\\Microsoft.Common.CurrentVersion.targets(1111,5): error MSB3644: The reference assemblies for framework \".NETFramework,Version=v3.5\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [B:\\MoreLinq\\MoreLinq.csproj]\r\nAssertCountTest.cs(30,32): error CS0117: 'MoreEnumerable' does not contain a definition for 'AssertCount' [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(37,31): error CS1061: 'object[]' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'object[]' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(43,47): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(50,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(57,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(67,24): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(76,24): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(91,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(106,51): error CS1061: 'IEnumerable<string>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'IEnumerable<string>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nAssertCountTest.cs(131,44): error CS1061: 'BreakingSequence<object>' does not contain a definition for 'AssertCount' and no extension method 'AssertCount' accepting a first argument of type 'BreakingSequence<object>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(173,56): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(174,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(175,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nInterleaveTest.cs(176,52): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(201,56): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(202,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(203,60): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\nSortedMergeTest.cs(204,52): error CS1061: 'IEnumerable<int>' does not contain a definition for 'AsVerifiable' and no extension method 'AsVerifiable' accepting a first argument of type 'IEnumerable<int>' could be found (are you missing a using directive or an assembly reference?) [B:\\MoreLinq.Test\\MoreLinq.Test.csproj]\r\n    1 Warning(s)\r\n    19 Error(s)\r\n\r\nTime Elapsed 00:00:06.86\r\n```\r\n\r\n## Environment\r\n\r\n`dotnet --info` output supplied earlier.\r\n\r\nI also have Visual Studio 2017 Enterprise installed (output below from [`Get-VSSetupInstance`](https://github.com/microsoft/vssetup.powershell)):\r\n\r\n```\r\nInstanceId          : 86b28833\r\nDisplayName         : Visual Studio Enterprise 2017\r\nInstallationVersion : 15.0.26228.4\r\nInstallationPath    : C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\r\nInstallDate         : 08/03/2017 08:35:42\r\n```\r\n\r\n/cc @blackdwarf @livarcocc\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6635887169","Type":"PullRequestEvent","CreatedAt":"2017-09-26T01:28:06","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/511","RelatedDescription":"Merged pull request \"Update init-tools scripts to override tools directory\" (#511) at dotnet/standard","RelatedBody":"For source-build we want to share the same tools and dotnet sdk\r\nfor all the child repos. This change allows the tools directory to\r\nbe overridden.\r\n\r\ncc @eerhardt "},{"Id":"6635845753","Type":"IssuesEvent","CreatedAt":"2017-09-26T01:11:04","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/442","RelatedDescription":"Closed issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"Investigating a customer's solution which is experiencing performance issues due to slow design-time builds even with `<DefaultCompileItems>false</DefaultCompileItems>` set, 4% of a design-time build is just finding the .NET Standard refs:\r\n\r\nhttps://github.com/dotnet/standard/blob/bbbfd46d4298f0d764213256e858cc197d802208/netstandard/pkg/targets/NETStandard.Library.targets#L7-L16\r\n\r\nThis is on my SSD, on a slow disk like the customer was running this probably takes even longer. \r\n\r\nWhen I remove these includes, I go from:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303723-3275a9bc-81d2-11e7-8452-2e68cda05ef5.png)\r\n\r\nto:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303730-3c5ec0bc-81d2-11e7-9399-a53354054e83.png)\r\n\r\nTo avoid paying for this lookup over and over again when these are a fixed set of files, can we please auto-generate this?"},{"Id":"6635371861","Type":"PullRequestEvent","CreatedAt":"2017-09-25T22:11:33","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/511","RelatedDescription":"Opened pull request \"Update init-tools scripts to override tools directory\" (#511) at dotnet/standard","RelatedBody":"For source-build we want to share the same tools and dotnet sdk\r\nfor all the child repos. This change allows the tools directory to\r\nbe overridden.\r\n\r\ncc @eerhardt "},{"Id":"6634987765","Type":"PullRequestEvent","CreatedAt":"2017-09-25T20:36:31","Actor":"eerhardt","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/508","RelatedDescription":"Merged pull request \"Apply source build patches\" (#508) at dotnet/standard","RelatedBody":"Applying the patches from source-build to the dotnet/standard repo using some property names discussed on Friday.\r\n\r\nLet me know what you think of these properties/names.\r\n\r\nI still want to make one change:  on Unix, init-tools.sh will copy the tools from the root source-build\\Tools directory.  I want to port that to Windows as well (using the same Environment Variables for now).  But I haven't started on that work.  I can do that separately from this change."},{"Id":"6634137862","Type":"PullRequestEvent","CreatedAt":"2017-09-25T17:23:42","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/510","RelatedDescription":"Opened pull request \"[release/2.0.0] Use a file list rather than globbing NETStandard assemblies\" (#510) at dotnet/standard","RelatedBody":"This change minimizes the amount of work done during project evaluation by directly\r\nsetting the reference items to all the files/paths we know are part of the package.\r\n\r\nPort of https://github.com/dotnet/standard/pull/507"},{"Id":"6634092970","Type":"PullRequestEvent","CreatedAt":"2017-09-25T17:13:46","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/507","RelatedDescription":"Merged pull request \"Use a file list rather than globbing NETStandard assemblies\" (#507) at dotnet/standard","RelatedBody":"This change minimizes the amount of work done during project evaluation by directly\r\nsetting the reference items to all the files/paths we know are part of the package.\r\n\r\n/cc @weshaggard @davkean \r\n\r\n#442"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6636356664","Type":"PullRequestEvent","CreatedAt":"2017-09-26T04:50:36","Actor":"amitdash291","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24252","RelatedDescription":"Opened pull request \"Return condition directly instead of `if (condition) return true; els…\" (#24252) at dotnet/corefx","RelatedBody":"…e return false;`"},{"Id":"6636348909","Type":"IssuesEvent","CreatedAt":"2017-09-26T04:46:54","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24251","RelatedDescription":"Opened issue \"System.Console intellisense text not localized\" (#24251) at dotnet/corefx","RelatedBody":"![image](https://user-images.githubusercontent.com/8228359/30842958-e506af44-a23a-11e7-8679-de08a01ef3d2.png)\r\n"},{"Id":"6636341137","Type":"IssuesEvent","CreatedAt":"2017-09-26T04:43:15","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24250","RelatedDescription":"Opened issue \"System.IO.Directory.Delete should check for the name surrogate bit on reparse tags before deciding if it should enumerate directories with reparse points\" (#24250) at dotnet/corefx","RelatedBody":"Copied from internal bug 402782\r\n\r\nSystem.IO.Directory.Delete recursive delete will not recurse through directory placeholders as it should (directory placeholders are a feature of GvFlt and the \r\ncontainer filter). \r\n\r\nChristian Allred [callred] found that the Delete code \"will avoid trying to enumerate directories that are any kind of reparse point, rather than just name surrogates ... It should be fixed to check for the name surrogate bit on the reparse tag, same as rmdir /s does\"\r\n\r\nSee:  http://ddindex/?rightProject=mscorlib&file=system%5cio%5cdirectory.cs&line=1324)\r\n\r\nrmdir code\r\n\r\n    //\r\n    //  We now enumerate and delete children iff:\r\n    //      directory and not reparse/namesurrogate\r\n    //\r\n    if (IsDirectory( find_data.dwFileAttributes )\r\n        && !(IsReparse( find_data.dwFileAttributes ) && IsReparseTagNameSurrogate( find_data.dwReserved0 ))) {\r\n        ...\r\n        //  (Enumerate, deleting files and recursing into directories)\r\n        ...\r\n    }\r\n \r\n    return RemoveDirectoryForce(pszDirectory);\r\n\r\n...\r\n\r\nRmdir /s checks the name surrogate bit using IsReparseTagNameSurrogate, which is in ntifs.h.  It is defined as:\r\n\r\n#define IsReparseTagNameSurrogate(_tag) (          \\\r\n                           ((_tag) & 0x20000000)   \\\r\n                           )\r\n\r\nIf you're doing a FindFirst/FindNext, the _tag value is the dwReserved0 field of the WIN32_FIND_DATA structure.  That is how rmdir /s does its check:\r\n\r\n    //\r\n    //  We now enumerate and delete children iff:\r\n    //      directory and not reparse/namesurrogate\r\n    //\r\n    if (IsDirectory( find_data.dwFileAttributes )\r\n        && !(IsReparse( find_data.dwFileAttributes ) && IsReparseTagNameSurrogate( find_data.dwReserved0 ))) {\r\n        ...\r\n        //  (Enumerate, deleting files and recursing into directories)\r\n        ...\r\n    }\r\n    return RemoveDirectoryForce(pszDirectory);\r\n\r\n... \r\n\r\nForgot to mention, the name surrogate bit is set on directory junctions, symlinks, etc.  So having this check correctly identifies other types of reparse points that a recursive delete would not want to recurse in to."},{"Id":"6636185453","Type":"IssuesEvent","CreatedAt":"2017-09-26T03:30:33","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24249","RelatedDescription":"Closed issue \"Managed WebSocket implementation on Windows 7?\" (#24249) at dotnet/corefx","RelatedBody":"Recently we've stumbled upon particular issue of Windows 7 SP1 not supporting WebSockets natively, as they were introduced in Windows 8 / Server 2012. Check out https://github.com/SteamRE/SteamKit/issues/455 as a reference of original issue.\r\n\r\nSince there is managed implementation of websocket that is apparently **[already possible to be used on Windows](https://github.com/dotnet/corefx/blob/master/src/System.Net.WebSockets.Client/src/System.Net.WebSockets.Client.csproj#L7-L9)**, would it make sense to use it on Windows 7 as a platform that does not support WinSocket Windows stack natively? Or maybe it's already possible?\r\n\r\nThank you in advance."},{"Id":"6636179647","Type":"IssuesEvent","CreatedAt":"2017-09-26T03:27:53","Actor":"JustArchi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24249","RelatedDescription":"Opened issue \"Managed WebSocket implementation on Windows 7?\" (#24249) at dotnet/corefx","RelatedBody":"Recently we've stumbled upon particular issue of Windows 7 not supporting WebSockets natively, as they were introduced in Windows 8 / Server 2012. Check out https://github.com/SteamRE/SteamKit/issues/455 as a reference of original issue.\r\n\r\nSince there is managed implementation of websocket that is apparently **[already possible to be used on Windows](https://github.com/dotnet/corefx/blob/master/src/System.Net.WebSockets.Client/src/System.Net.WebSockets.Client.csproj#L7-L9)**, would it make sense to use it on Windows 7 as a platform that does not support WinSocket Windows stack natively? Or maybe it's already possible?\r\n\r\nThank you in advance."},{"Id":"6636143910","Type":"PullRequestEvent","CreatedAt":"2017-09-26T03:12:25","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24243","RelatedDescription":"Merged pull request \"Disable RecursiveDelete_DeepNesting (Issue #24242).\" (#24243) at dotnet/corefx","RelatedBody":"This disables a test which has failed on recent code coverage test runs. \r\n\r\nhttps://github.com/dotnet/corefx/issues/24240, #24242\r\n@stephentoub @JeremyKuhne "},{"Id":"6635983250","Type":"PullRequestEvent","CreatedAt":"2017-09-26T02:06:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24248","RelatedDescription":"Opened pull request \"Fix some missing ConfigureAwaits in ManagedHandler\" (#24248) at dotnet/corefx","RelatedBody":"cc: @geoffkizer "},{"Id":"6635921152","Type":"IssuesEvent","CreatedAt":"2017-09-26T01:41:44","Actor":"alewmt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24246","RelatedDescription":"Opened issue \"Add method RemoveOrUpdate to ConcurrentDictionary\" (#24246) at dotnet/corefx","RelatedBody":"It would be very useful to have the ability to conditionally remove or update `ConcurrentDictionary` entry. It already has `AddOrUpdate`. Right now I can't use `ConcurrentDictionary` in ref counting scenarios, because I can't check reference count and remove it if value is 0 and forced to use common `Dictionary` with `lock`."},{"Id":"6635686249","Type":"PullRequestEvent","CreatedAt":"2017-09-26T00:03:04","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24245","RelatedDescription":"Opened pull request \"Marking {ReadOnly}Memory as readonly structs\" (#24245) at dotnet/corefx","RelatedBody":"Fixes issue https://github.com/dotnet/corefx/issues/23809\r\n\r\nRelated PR for coreclr: https://github.com/dotnet/coreclr/pull/13886\r\n\r\ncc @KrzysztofCwalina, @VSadov "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6636032515","Type":"IssuesEvent","CreatedAt":"2017-09-26T02:26:42","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18600","RelatedDescription":"Reopened issue \"ExtractMethodCodeRefactoringProvider crash on method highlight in expression body\" (#18600) at dotnet/roslyn","RelatedBody":"**Version Used**: VS2017 (15.1 (26403.3)).\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create empty ASP.NET Web Application project (I have only testet with this project type).\r\n2. Create empty class in any namespace.\r\n3. Insert the following code:\r\n```C#\r\nprivate static string Testing() => \"\";\r\npublic static string TestError { get => Testing(); }\r\n```\r\nHighlight `Testing` in the `TestError` property.\r\n\r\nIf refactored to `... TestError => Testing() ?? \"\";` Everything is fine.\r\nThe error also happens with a setter.\r\n\r\n**Expected Behavior**: No thrown exceptions.\r\n\r\n**Actual Behavior**: Thrown exceptions and ExtractMethodCodeRefactoringProvider crashes.\r\n\r\n-----\r\nStack trace from the error:\r\n\r\n    System.InvalidOperationException : Unexpected false\r\n      at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)\r\n      at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetCallSiteContainerFromExpression()\r\n      at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetOutermostCallSiteContainerToProcess(CancellationToken cancellationToken)\r\n      at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement, TExpression, TNodeUnderContainer] (<Unknown Parameters>)\r\n      at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n      at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator, TExtractor, TResult] (<Unknown Parameters>)\r\n      at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n      at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n      at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n      at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n"},{"Id":"6635714485","Type":"IssuesEvent","CreatedAt":"2017-09-26T00:14:44","Actor":"AnthonyDGreen","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22334","RelatedDescription":"Opened issue \"Sprint Summary Notifications\" (#22334) at dotnet/roslyn","RelatedBody":"Subscribe to this issue if you want to be notified as soon as a new [Sprint Summary](https://github.com/dotnet/roslyn/issues?q=is%3Aissue+is%3Aopen+label%3A%22Sprint+Summary%22) is posted. This issue provided as a courtesy to those who don't follow every new issue in the repo and just want the summaries."},{"Id":"6635694106","Type":"IssuesEvent","CreatedAt":"2017-09-26T00:06:13","Actor":"AnthonyDGreen","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22333","RelatedDescription":"Opened issue \"Sprint 123 Summary\" (#22333) at dotnet/roslyn","RelatedBody":"# C#/VB Compiler Team\r\n@jaredpar | @MadsTorgersen | @AnthonyDGreen\r\n\r\n**C# 7.2 (15.5)**\r\n\r\n* Ref readonly, readonly struct, ref extensions\r\n* Stackalloc spans (demo)\r\n* Non-trailing named arguments (also in VB) (demo)\r\n* Private protected\r\n* Refactoring on closure conversions\r\n\r\n**C# 8.0**\r\n\r\n* Nullable reference types\r\n* Default interface implementation\r\n\r\n# F# Update\r\n@KevinRansom | @cartermp\r\n\r\n* Shipped .NET Core 2.0/.NET Standard 2.0 support!\r\n* Further work done to support .NET Core SDK-based projects in VS\r\n* Support new high contrast theme\r\n* Multiple community improvements to the tools\r\n  * Smart indentation and de-indentation\r\n  * Go to C#/VB symbols\r\n* ZBB on \"urgency-now\" bugs in the compiler\r\n* Moar bugs demolished\r\n\r\n# Infrastructure\r\n@jasonmalinowski \r\n\r\n* Switched to SDK 2.0\r\n* Upcoming Rotation\r\n  * **Mantis**: Balaji Soundrarajan\r\n  * **Grasshopper**: Omar Tawfik\r\n  * **Viper**: Brett Forsgren\r\n  * **Tiger**: Artur Spychaj\r\n  * **Crane**: Ivan Basov\r\n\r\n# Analyzer and Interactive\r\n@jinujoseph | @kuhlenh  | @AnthonyDGreen \r\n\r\n* IOperation \r\n  * Many design reviews and API changes\r\n  * Merging into master next sprint\r\n* Office Security Audit\r\n  * Analyzing FxCop failures in Office build\r\n* Local Functions EnC\r\n* Windows PDB\r\n  * deterministic writer\r\n  * embedded sources\r\n* Project System repo migrated to RepoToolset\r\n\r\n# CLI and SDK\r\n@livarcocc | @KathleenDollard\r\n\r\n* Shipped .NET Core SDK v2.0.0 RTM and v1.1.0 RTM\r\n* Shipped v2.0.2-vspre in VS 15.4 P2 (allows UWP -> NS2.0)\r\n* Working towards v1.1.4 RTM release on 9/21, 2.0.2 RTM in VS 15.4, and MSRC release in November\r\n* Planning versioning alignment story .NET Core SDK / .NET Core Runtime / VS\r\n* Planning architecture and infrastructure changes to decouple tooling concerns from .NET Core box concerns\r\n* Supporting Roslyn’s adoption of .NET Core SDK 2.0\r\n* Infrastructure Improvements\r\n  * Better output folder layout and fixed incremental builds\r\n  * Eliminated build warnings\r\n  * More reliable publishing to Debian package feeds\r\n  * CI support for localized testing (In PR)\r\n  * Single Linux build definition for all supported distros (In PR)\r\n  * Developer Guide Update + Environment Scripts (In PR)\r\n\r\n# Project\r\n@Pilchie | @morrisjoe \r\n\r\n* (Lead change – Sri 1.0 has shipped!)\r\n* Solution Explorer ordering for F# .NET Core projects\r\n* Non-CPS Project Performance, Telemetry and InfoBar\r\n  * Telemetry Dashboard\r\n  * New Design Time build tooling\r\n  * Solution load performance\r\n* Project Infrastructure Update to RepoToolset\r\n* Continued Performance Investigation of .NET Core projects\r\n* Bugs\r\n\r\n# IDE\r\n@Pilchie | @kuhlenh \r\n\r\n* Internal Lightbulb Experiment \r\n* PRs in review for 15.5\r\n  * Use Humanizer for pluralization\r\n    * `M(IEnumerable<Person> people);`\r\n  * Auto-prop to full-prop\r\n  * Editor’s new Command Handler system (perf)\r\n  * Deconstruct variable declaration\r\n* Finished Out-Of-Process work for Navigation\r\n* OutOfMemory Investigations\r\n* Began work to remove WPF dependencies from EditorFeatures so Visual Studio for Mac can use it\r\n\r\n# Managed Language Services\r\n@piotrpMSFT | @asthana86\r\n\r\nIntroducing the Managed Language Services team who shared the first preview of their first service https://try.dot.net\r\n\r\n* Preview in-browser C# learning and execution experience can be tried at https://try.dot.net\r\n* Integration in https://docs.microsoft.com demo'd at dotnetconf\r\n  * See Bill's excellent session C# Part 1 - Introduction to C#\r\n  * Interactive tutorials from Bill's session are available as C# Quick Starts\r\n* Created https://github.com/dotnet/try repo for tracking issues."},{"Id":"6635651849","Type":"IssuesEvent","CreatedAt":"2017-09-25T23:49:30","Actor":"livarcocc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22332","RelatedDescription":"Opened issue \"'dotnet build' produces no useful error messages\" (#22332) at dotnet/roslyn","RelatedBody":"_From @shinmai on August 30, 2017 10:19_\n\n## Steps to reproduce\r\ncreate a new project with `dotnet new console` \r\nbreak project by making Program.cs unbuildable \r\nexecute `dotnet build` \r\n\r\n## Expected  behavior\r\nUseful error message referencing source file names and line numbers.\r\n\r\n## Actual behavior\r\nerror message is basically \"it didn't work\"\r\n\r\n```\r\nC:\\_prj\\a1>dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.0.0\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"C:\\Program Files\\dotnet\\sdk\\2.0.0\\Roslyn\\RunCsc.cmd\" exited with code 1. [C:\\_prj\\a1\\a1.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.0.0\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"C:\\Program Files\\dotnet\\sdk\\2.0.0\\Roslyn\\RunCsc.cmd\" exited with code 1. [C:\\_prj\\a1\\a1.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.46\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n> .NET Command Line Tools (2.0.0)\r\n> \r\n> Product Information:\r\n>  Version:            2.0.0\r\n>  Commit SHA-1 hash:  cdcd1928c9\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.15063\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n> \r\n> Microsoft .NET Core Shared Framework Host\r\n> \r\n>   Version  : 2.0.0\r\n>   Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#7556_"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6636429767","Type":"PullRequestEvent","CreatedAt":"2017-09-26T05:25:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4616","RelatedDescription":"Closed pull request \"update RyuJITVersion\" (#4616) at dotnet/corert","RelatedBody":"I have some problems running Linux with the last ruyjit, so create PR to run lab tests."},{"Id":"6636427999","Type":"PullRequestEvent","CreatedAt":"2017-09-26T05:24:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4619","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#4619) at dotnet/corert","RelatedBody":""},{"Id":"6636345235","Type":"PullRequestEvent","CreatedAt":"2017-09-26T04:45:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4619","RelatedDescription":"Opened pull request \"RyuJIT update\" (#4619) at dotnet/corert","RelatedBody":""},{"Id":"6636298160","Type":"IssuesEvent","CreatedAt":"2017-09-26T04:22:10","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4514","RelatedDescription":"Closed issue \"Implement ldnull opcode\" (#4514) at dotnet/corert","RelatedBody":"Implement the ldnull opcode, which loads a pointer set to 0. Handling belongs in\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L511"},{"Id":"6636287520","Type":"PullRequestEvent","CreatedAt":"2017-09-26T04:17:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4618","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4618) at dotnet/corert","RelatedBody":""},{"Id":"6636287201","Type":"PullRequestEvent","CreatedAt":"2017-09-26T04:16:52","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4592","RelatedDescription":"Merged pull request \"Fix strings for WebAssembly\" (#4592) at dotnet/corert","RelatedBody":"Changes that allow loading a printing a frozen string. Includes:\r\n* Implement ldnull and ldind\r\n* Fix brtrue and brfalse for pointers\r\n* Fix the polarity of ceq and friends\r\n* Change functions we can't compile into traps so that they don't break LLVM\r\n* Put call arguments in the right order\r\n* Miscellaneous stack canonicalization fixes (we'll have to revisit this in a more comprehensive way soon)\r\n* Minor diagnosability improvements"},{"Id":"6636154313","Type":"PullRequestEvent","CreatedAt":"2017-09-26T03:16:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4618","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4618) at dotnet/corert","RelatedBody":""},{"Id":"6636150320","Type":"PullRequestEvent","CreatedAt":"2017-09-26T03:15:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4617","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4617) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6636129275","Type":"PullRequestEvent","CreatedAt":"2017-09-26T03:05:55","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4617","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4617) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6636091932","Type":"PullRequestEvent","CreatedAt":"2017-09-26T02:50:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4605","RelatedDescription":"Merged pull request \"Add paragraph on platform support status\" (#4605) at dotnet/corert","RelatedBody":""},{"Id":"6636085669","Type":"PullRequestEvent","CreatedAt":"2017-09-26T02:47:45","Actor":"sandreenko","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4616","RelatedDescription":"Opened pull request \"update RyuJITVersion\" (#4616) at dotnet/corert","RelatedBody":"I have some problems running Linux with the last ruyjit, so create PR to run lab tests."},{"Id":"6635835948","Type":"PullRequestEvent","CreatedAt":"2017-09-26T01:06:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4573","RelatedDescription":"Closed pull request \"Fixing up various issues in System.Math and System.MathF.\" (#4573) at dotnet/corert","RelatedBody":"This resolves https://github.com/dotnet/corert/issues/3167.\r\n\r\nThis also updates the implementation of `Math.Round(double)` to have the fix for https://github.com/dotnet/coreclr/issues/12137"},{"Id":"6635831787","Type":"PullRequestEvent","CreatedAt":"2017-09-26T01:05:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4607","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4607) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":15,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":24,"RawContent":null},{"Id":"911015945291919360","CreatedAt":"2017-09-21T23:55:01+00:00","UserScreenname":"dotnet","Text":"Last one! Happening now on .NET Fundamentals Track @ #dotNETConf: Learn how to use #FSharp to write front-end &amp; bac… https://t.co/OH8cMAcq4I","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":25,"FavoriteCount":15,"RawContent":null},{"Id":"911005750410960896","CreatedAt":"2017-09-21T23:14:31+00:00","UserScreenname":"dotnet","Text":"PSA: .NET Framework September Update - known issues published https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":11,"RawContent":null},{"Id":"911000845860458498","CreatedAt":"2017-09-21T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Get started w/ #FSharp, .NET Core &amp; #VSCode. Watch… https://t.co/VRkwBvSNPU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":29,"FavoriteCount":14,"RawContent":null},{"Id":"910988157197344768","CreatedAt":"2017-09-21T22:04:36+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 Accessibility and WPF Improvements https://t.co/eZLFQxhlLj","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":52,"RawContent":null},{"Id":"910985746386911237","CreatedAt":"2017-09-21T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Introducing Razor Pages - Join the session here:… https://t.co/NTQg6urmhQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"910970647702065152","CreatedAt":"2017-09-21T20:55:02+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: The #CSharp async await workout - a hands-on coding dem… https://t.co/JDvyBkgvww","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":49,"FavoriteCount":18,"RawContent":null},{"Id":"910955546496335873","CreatedAt":"2017-09-21T19:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Solid Design Patterns for Mere Mortals - see some… https://t.co/iFgxAVURUP","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":51,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2017-09-26T05:30:19.4820767Z","RunDurationInMilliseconds":6686}