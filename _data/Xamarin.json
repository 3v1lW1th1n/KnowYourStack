{"Data":{"Blog":{"FeedItems":[{"Title":"Publish to Azure from Visual Studio for Mac","PublishedOn":"2017-11-02T19:28:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>As a cloud first, mobile first IDE, Visual Studio for Mac is designed to work side by side with Azure. In this post, you&#8217;ll create an ASP.NET Core project, edit the site to be unique, and then deploy the project to Azure. To complete this task, make sure your setup meets the following requirements: Visual Studio [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/publish-azure-visual-studio-mac/\">Publish to Azure from Visual Studio for Mac</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/publish-azure-visual-studio-mac/","RawContent":null},{"Title":"Xamarin Developer Events in November","PublishedOn":"2017-11-02T12:55:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The Xamarin and .Net mobile developer community is growing like never before and with so many new events upcoming, there is more opportunity than ever to learn about new and exciting releases, tooling, and updates on Xamarin and related technologies. Network with your local developer community while discussing this month’s ranging topics from optimizing your [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/xamarin-developer-events-november/\">Xamarin Developer Events in November</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/xamarin-developer-events-november/","RawContent":null},{"Title":"Augmented Reality in Xamarin.Android with ARCore","PublishedOn":"2017-10-30T19:50:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Now that you&#8217;ve had a chance to augment reality in your Xamarin iOS apps with ARKit, it&#8217;s time to explore Google&#8217;s take on AR in your Xamarin Android apps. The new ARCore SDK provides APIs for Augmented Reality features, such as motion tracking, plane detection, and light estimation. These are the building blocks you will [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/augmented-reality-xamarin-android-arcore/\">Augmented Reality in Xamarin.Android with ARCore</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/augmented-reality-xamarin-android-arcore/","RawContent":null},{"Title":"Go Large with iOS 11","PublishedOn":"2017-10-26T19:36:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>One of the more obvious user interface changes in iOS 11 is the larger titles that are used across the system apps, from the App Store and Apple Music to Notes and Mail. The Health and Contact apps are shown below: The title animates off the screen and shrinks to a normal-sized navigation bar when [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/go-large-ios-11/\">Go Large with iOS 11</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/go-large-ios-11/","RawContent":null},{"Title":"Introducing the Android SDK Manager","PublishedOn":"2017-10-25T19:55:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>To make the process of managing Android SDKs as smooth as possible, we’ve revamped the Android SDK Manager in Visual Studio for Mac to create a seamless, integrated experience. Not only does this new SDK Manager offer a one-stop shop for all things Android SDK, we&#8217;re also introducing support for automatic SDK dependency resolution. So, let’s [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/introducing-android-sdk-manager/\">Introducing the Android SDK Manager</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/introducing-android-sdk-manager/","RawContent":null},{"Title":"3 Big Things To Explore in the Xamarin.Forms 2.5.0 Pre-Release","PublishedOn":"2017-10-24T19:52:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Over the past year we’ve been working on a couple of &#8220;big things&#8221; that enable you to create more performant applications on more platforms. With our latest stable release, version 2.4.0, we introduced performance optimized renderers on Android, nicknamed Fast Renderers. While faster platform renderers are a clear win, you really start to see the big [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/3-big-things-explore-xamarin-forms-2-5-0-pre-release/\">3 Big Things To Explore in the Xamarin.Forms 2.5.0 Pre-Release</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/3-big-things-explore-xamarin-forms-2-5-0-pre-release/","RawContent":null},{"Title":"Five-Star Apps with Mobile Center Test","PublishedOn":"2017-10-20T12:33:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Five-star mobile apps are all about consistent and predictable output. It&#8217;s not a good experience for users when an app suddenly crashes or doesn’t format correctly on their mobile screens. Developers can easily avoid these scenarios by testing for various scenarios on different devices, and Visual Studio Mobile Center makes it easy to test your mobile [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/five-star-apps-with-visual-studio-mobile-center-test/\">Five-Star Apps with Mobile Center Test</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/five-star-apps-with-visual-studio-mobile-center-test/","RawContent":null},{"Title":"Upcoming Webinar | Build Better Games with Unity and Microsoft Azure","PublishedOn":"2017-10-19T18:51:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Register now to join David Antognoli on Tuesday, November 7 at 9 am PT to learn how to take your Unity games to the next level with powerful cloud services. He’ll walk through how to connect your apps to Microsoft Azure, adding compelling features that users love, like leaderboards and heatmaps, and demo how new [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/upcoming-webinar-build-better-games-unity-microsoft-azure/\">Upcoming Webinar | Build Better Games with Unity and Microsoft Azure</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/upcoming-webinar-build-better-games-unity-microsoft-azure/","RawContent":null},{"Title":"Plugin and Permission Changes with iOS 11","PublishedOn":"2017-10-18T20:24:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>iOS 11 introduced some fun updates around permissions when accessing certain features on the device. I first noticed these changes when trying to access a user location with the Geolocator Plugin in a Xamarin.Forms application. To my surprise, nothing happened. Upon further investigation of the application&#8217;s Output, I noticed a message explaining exactly what I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/plugin-permission-changes-ios-11/\">Plugin and Permission Changes with iOS 11</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/plugin-permission-changes-ios-11/","RawContent":null},{"Title":"Adaptive UI with Xamarin.Forms","PublishedOn":"2017-10-16T20:58:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Xamarin.Forms has supported iOS, Android, and Windows for a long time. We&#8217;ve also added new platforms to keep up with the changing landscape, such as Tizen and macOS, with Linux and Windows WPF on the horizon. These platforms run on a wide variety of devices including phones, tablets, desktops, and TVs. This presents an interesting [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/adaptive-ui-xamarin-forms/\">Adaptive UI with Xamarin.Forms</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/adaptive-ui-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6807773611","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:21:03","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1008","RelatedDescription":"Opened pull request \"[WIP] idea to speed up Xamarin.Android.Build.Tests\" (#1008) at xamarin/xamarin-android","RelatedBody":"I wanted to send this in to discuss next week.\r\n\r\n### The current situation\r\nCurrently the Xamarin.Android.Build.Tests are doing the [following](https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.ProjectTools/Common/Builder.cs#L184):\r\n- Running msbuild w/ verbose logging to file and `/noconsolelogger`\r\n- Combining stdout and stderror into a large string named `LastBuildOutput`\r\n- Many tests are asserting against the text in `LastBuildOutput`\r\n- There is also some code that opens the log file on disk to find the MSBuild build duration\r\n\r\nSo a couple issues from this:\r\n- We use a lot of memory here, with potentially enormous strings, some of it is duplicated strings\r\n- Asserting against `LastBuildOutput` is doing a `string.Contains` on potentially massive strings\r\n- The test `BuildAMassiveApp` always fails on Windows with `OutOfMemoryException`\r\n- On Windows, our `Process.Start/WaitForExit` implementation can hang. If the stdout or stderror buffer gets full, when `WaitForExit` hangs with the 10 minute timeout. I see this happening mostly if a test fails (because the output is bigger). Link about this [here](https://stackoverflow.com/questions/139593/processstartinfo-hanging-on-waitforexit-why).\r\n\r\nI'm sure this code evolved over time--it probably wasn't planned to be implemented this way.\r\n\r\n### An idea\r\nThe \"idea\" is we could instead:\r\n- Run msbuild with verbose logging to the console (not to file at all)\r\n- Use the `OutputDataReceived` and `ErrorDataReceived` events to assert against MSBuild output as it streams through\r\n- Append this output to a file for failures later if needed\r\n\r\nThe problem with doing this, is you would have to setup assertions before running the build. Then checking if they all passed after the build. This is a bit confusing, and a juxtaposition of the Arrange, Act, Assert pattern people think about when writing tests.\r\n\r\n### The initial results\r\n\r\nI did a quick implementation of this idea, and compared the results of the following test class with 44 tests (on Mac):\r\n```\r\nmake run-nunit-tests TEST=Xamarin.Android.Build.Tests.AndroidUpdateResourcesTest\r\n```\r\n\r\nThe results on master:\r\n```\r\nTest Run Summary\r\n  Overall result: Warning\r\n  Test Count: 44, Passed: 35, Failed: 0, Warnings: 0, Inconclusive: 0, Skipped: 9\r\n    Skipped Tests - Ignored: 9, Explicit: 0, Other: 0\r\n  Start time: 2017-11-03 16:46:54Z\r\n    End time: 2017-11-03 16:54:49Z\r\n    Duration: 474.909 seconds\r\n```\r\n\r\nThe results with this PR:\r\n```\r\nTest Run Summary\r\n  Overall result: Failed\r\n  Test Count: 44, Passed: 30, Failed: 5, Warnings: 0, Inconclusive: 0, Skipped: 9\r\n    Failed Tests - Failures: 5, Errors: 0, Invalid: 0\r\n    Skipped Tests - Ignored: 9, Explicit: 0, Other: 0\r\n  Start time: 2017-11-03 20:04:41Z\r\n    End time: 2017-11-03 20:11:00Z\r\n    Duration: 379.545 seconds\r\n```\r\nThere are still some failures I'll look into fixing here. These failures seemed to be running the full test (they aren't failing and taking less than <10ms that would influence the shorter time).\r\n\r\nThis boils down to maybe a 20% speed increase of these tests. These tests are currently taking about 1 hour on Jenkins PRs.\r\n\r\n### Drawbacks\r\n\r\nThis seems like a decent amount of work--and the not very fun kind. It also seems scary that we could mistakenly change a test to make it always pass.\r\n\r\nInvesting in this, while it would improve quality & build times, doesn't bring new features to Xamarin.Android."},{"Id":"6807442952","Type":"PullRequestEvent","CreatedAt":"2017-11-03T19:55:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/920","RelatedDescription":"Merged pull request \"Generator support for api.xml style java docs for parameter names\" (#920) at xamarin/xamarin-android","RelatedBody":"Adds support to binding projects to make use of ApiXmlDocPaths as a project property for including api.xml style java docs to be used by ClassParse for resolving parameter names.\r\n\r\nThis format is used by Android Support libraries (and eventually Google Play Services / Firebase).\r\n\r\nThis requires xamarin/java.interop@61c70ece24e5e59118fe4b093c60ef2898eb2748\r\n\r\nThis PR supercedes and closes #916.\r\n"},{"Id":"6806631727","Type":"PullRequestEvent","CreatedAt":"2017-11-03T16:49:16","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1000","RelatedDescription":"Merged pull request \"[build] fix for Xamarin.Android.Build.Tasks re-build\" (#1000) at xamarin/xamarin-android","RelatedBody":"One issue here is that `obj/Debug/Profile.g.cs` is getting regenerated\r\non every build, forcing `Xamarin.Android.Build.Tasks.csproj` to rebuild\r\n*every* time. It looks like the `IncrementalClean` target was the culprit,\r\nin that it deleted this file after the build completed.\r\n\r\nThe fix here is to add to the `FileWrites` `ItemGroup`, but it only\r\nseems to work if `FileWrites` includes the absolute path to the file.\r\nIncluding `$(MSBuildThisFileDirectory)` in front of\r\n`$(_GenerateProfileClass)` makes sure it is the absolute path."},{"Id":"6806033175","Type":"PullRequestEvent","CreatedAt":"2017-11-03T14:57:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1007","RelatedDescription":"Merged pull request \"[tests] Measure end time of NUnit tests\" (#1007) at xamarin/xamarin-android","RelatedBody":"Added NUnit.results label to the default time performance definition\r\nfile. It matches NUnit line with results, which is printed out at the\r\nend of the NUnit driven test."},{"Id":"6804341099","Type":"PullRequestEvent","CreatedAt":"2017-11-03T08:08:23","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1007","RelatedDescription":"Opened pull request \"[tests] Measure end time of NUnit tests\" (#1007) at xamarin/xamarin-android","RelatedBody":"Added NUnit.results label to the default time performance definition\r\nfile. It matches NUnit line with results, which is printed out at the\r\nend of the NUnit driven test."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6807288816","Type":"PullRequestEvent","CreatedAt":"2017-11-03T19:16:18","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1226","RelatedDescription":"Merged pull request \"[Core, iOS] Allocate prototypical view for RetainElement\" (#1226) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nExpect to be able to re-init ListView content. Actually, when using RetainElement, we experience an expectation due to use of a disposed view. The view in question was disposed by logic that used it to compute an estimated row height. That logic did expect the view to be recycled as part of pooling (resetting the Element). The fix is to allocate a view that does not participate in pooling.   \r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59813\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6805898484","Type":"PullRequestEvent","CreatedAt":"2017-11-03T14:33:06","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1250","RelatedDescription":"Opened pull request \"[XamlG] do not mess with path separators\" (#1250) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nwhen the targetPath contains a `\\`, the output file name might end up wrong on Mac.\r\nthis fixes it\r\n\r\n### Bugs Fixed ###\r\n\r\n- 🐞 ask @davidortinau \r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6805987838","Type":"PullRequestEvent","CreatedAt":"2017-11-03T14:49:37","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2953","RelatedDescription":"Closed pull request \"Merge xcode9.1 into master\" (#2953) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6805888543","Type":"PullRequestEvent","CreatedAt":"2017-11-03T14:31:16","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2955","RelatedDescription":"Opened pull request \"Merge xcode9.1 into master (take 2)\" (#2955) at xamarin/xamarin-macios","RelatedBody":"Replace https://github.com/xamarin/xamarin-macios/pull/2953"},{"Id":"6803870648","Type":"PullRequestEvent","CreatedAt":"2017-11-03T04:24:38","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2954","RelatedDescription":"Opened pull request \"[Generator] BindAs attribute for smart enums of an array of nullable values generates code that doesn't compile, Fixes bug 57797\" (#2954) at xamarin/xamarin-macios","RelatedBody":"https://bugzilla.xamarin.com/show_bug.cgi?id=57797\r\n\r\nWe now correctly compile array of nullable types\r\n\r\nBuild diff: https://gist.github.com/dalexsoto/65f791ca3c0519dd7440596e3cd29490"},{"Id":"6803565257","Type":"PullRequestEvent","CreatedAt":"2017-11-03T01:59:04","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2953","RelatedDescription":"Opened pull request \"Merge xcode9.1 into master\" (#2953) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6802615088","Type":"PullRequestEvent","CreatedAt":"2017-11-02T20:50:59","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2952","RelatedDescription":"Merged pull request \"[mono] mono 5.4.99 is the maximum, compatible version to build everything. Fixes #60394\" (#2952) at xamarin/xamarin-macios","RelatedBody":"Newer mono includes a Mono.Cecil with a breaking change that break xtro [1].\nThe fix cannot be compatible with stable and newer mono so it must wait that\nwe bump/require 2017-10.\n\nThis reverts PR2928 manually (the github generated revert [3] showed other\ncommits)\n\n[1] https://bugzilla.xamarin.com/show_bug.cgi?id=60394\n[2] https://github.com/xamarin/xamarin-macios/pull/2928\n[3] https://github.com/xamarin/xamarin-macios/pull/2933"},{"Id":"6802161714","Type":"PullRequestEvent","CreatedAt":"2017-11-02T19:11:40","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2952","RelatedDescription":"Opened pull request \"[mono] mono 5.4.99 is the maximum, compatible version to build everything. Fixes #60394\" (#2952) at xamarin/xamarin-macios","RelatedBody":"Newer mono includes a Mono.Cecil with a breaking change that break xtro [1].\nThe fix cannot be compatible with stable and newer mono so it must wait that\nwe bump/require 2017-10.\n\nThis reverts PR2928 manually (the github generated revert [3] showed other\ncommits)\n\n[1] https://bugzilla.xamarin.com/show_bug.cgi?id=60394\n[2] https://github.com/xamarin/xamarin-macios/pull/2928\n[3] https://github.com/xamarin/xamarin-macios/pull/2933"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"926479834141937664","CreatedAt":"2017-11-03T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Embedding #XamarinForms in #Xamarin.iOS and https://t.co/3QxhuBuvHc: https://t.co/U3QvCAOeFf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":7,"RawContent":null},{"Id":"926171028203634688","CreatedAt":"2017-11-02T19:35:55+00:00","UserScreenname":"xamarinhq","Text":"Learn how to publish to #Azure from #VS4Mac: https://t.co/wnNmElsQrM https://t.co/8LXVjJhLNc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":13,"RawContent":null},{"Id":"926115185240178688","CreatedAt":"2017-11-02T15:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add cross-platform charts to any app the easy way with #MicroCharts: https://t.co/VeqfS1vfIL https://t.co/FC7lbCKhg8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":39,"RawContent":null},{"Id":"926072405449207809","CreatedAt":"2017-11-02T13:04:01+00:00","UserScreenname":"xamarinhq","Text":"Find a #Xamarin event near you this November! | https://t.co/doSJzuJkKi https://t.co/jrw1KqJh7p","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":11,"RawContent":null},{"Id":"925755062617608192","CreatedAt":"2017-11-01T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/ZZaItGQ29a","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":24,"RawContent":null},{"Id":"925391160755085318","CreatedAt":"2017-10-31T15:57:00+00:00","UserScreenname":"xamarinhq","Text":"Next week we're hosting a webinar on building better games with #Unity3D &amp; Microsoft #Azure—sign up now to join us: https://t.co/0c8to6tPmT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":13,"RawContent":null},{"Id":"925090534133321728","CreatedAt":"2017-10-30T20:02:25+00:00","UserScreenname":"xamarinhq","Text":"Add Augmented Reality to your #XamarinAndroid apps with #ARCore: https://t.co/TwpBAAMyUJ https://t.co/2x7nUJzpF3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":37,"RawContent":null},{"Id":"925031289010388992","CreatedAt":"2017-10-30T16:07:00+00:00","UserScreenname":"xamarinhq","Text":"Add push notifications to your iOS apps with #Azure Notification Hubs: https://t.co/GJAQDvFyAl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":14,"RawContent":null},{"Id":"924811843180392449","CreatedAt":"2017-10-30T01:35:00+00:00","UserScreenname":"xamarinhq","Text":"Easy iOS app provisioning with fastlane and #VS4Mac: https://t.co/wNcfcCJn1v","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":19,"RawContent":null},{"Id":"924464051752787968","CreatedAt":"2017-10-29T02:33:00+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @davidortinau shares his top 5 ways to boost your #XamarinForms start up time (+ a couple bonus tips!): https://t.co/OqbHBRux5G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":98,"FavoriteCount":42,"RawContent":null},{"Id":"923943119493713920","CreatedAt":"2017-10-27T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to add local notifications to a native #Xamarin.Mac app using our Pomodoro sample project: https://t.co/fmHnM8m18Z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":13,"RawContent":null},{"Id":"923637228332552193","CreatedAt":"2017-10-26T19:47:30+00:00","UserScreenname":"xamarinhq","Text":"Add large titles to your iOS 11 apps in this post from @conceptdev: https://t.co/RDyk6GDVUU https://t.co/ZOsrbAC1sc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"923566386881974272","CreatedAt":"2017-10-26T15:06:00+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's Charles Petzold shows you how to get started with #SkiaSharp for #XamarinForms: https://t.co/mlySNk9fev","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":17,"RawContent":null},{"Id":"923279245887135745","CreatedAt":"2017-10-25T20:05:00+00:00","UserScreenname":"xamarinhq","Text":"Introducing the Android SDK Manager: https://t.co/U1OxP9CeeJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":31,"RawContent":null},{"Id":"923217836167847937","CreatedAt":"2017-10-25T16:00:59+00:00","UserScreenname":"xamarinhq","Text":"Have you saved the date yet? Visit https://t.co/swPXPdFtSt and add a calendar reminder to join us live online Novem… https://t.co/uLp7HDcxD4","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":29,"FavoriteCount":18,"RawContent":null},{"Id":"923216833938935809","CreatedAt":"2017-10-25T15:57:00+00:00","UserScreenname":"xamarinhq","Text":"Try out the latest new features for #Xamarin in #VS2017 without affecting your production environment: https://t.co/6QFngIYygP","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":19,"RawContent":null},{"Id":"923005188637646853","CreatedAt":"2017-10-25T01:56:00+00:00","UserScreenname":"xamarinhq","Text":"Don't miss our 11/7 webinar on building better games with #Unity3D and Microsoft #Azure! Register now to join us: https://t.co/0c8to6tPmT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":16,"RawContent":null},{"Id":"922915335824478210","CreatedAt":"2017-10-24T19:58:57+00:00","UserScreenname":"xamarinhq","Text":"Check out 3 BIG new features to explore in the #XamarinForms 2.5.0 Pre-Release: https://t.co/Du28Gz40ru","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":75,"RawContent":null}]}},"RunOn":"2017-11-03T21:28:12.3585781Z","RunDurationInMilliseconds":3716}