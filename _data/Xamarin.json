{"Data":{"Blog":{"FeedItems":[{"Title":"Upcoming Webinars | Get the Most Out of Android 8 Oreo and iOS 11","PublishedOn":"2017-11-29T20:22:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join us on December 13 and December 14 for our newest webinar series, where we’ll show you how to make your Xamarin apps even better by adding the latest and greatest Android and iOS updates. Visual...","Href":"https://blog.xamarin.com/upcoming-webinars-get-the-most-out-of-android-8-oreo-and-ios-11-for-xamarin-developers/","RawContent":null},{"Title":"Schedule Meetings with Xamarin.Forms and the Microsoft Graph API","PublishedOn":"2017-11-28T18:07:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Meetings can be productive, provided they&#8217;re planned and scheduled properly. There are numerous tools available to schedule meetings, with Calendar for Outlook being one of the best tools in...","Href":"https://blog.xamarin.com/lets-schedule-meeting/","RawContent":null},{"Title":"Replacing Services With Jobs in Android Oreo 8.0","PublishedOn":"2017-11-27T21:04:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Before Android 8.0, Android apps would start a service that ran almost indefinitely, even when the app was in the background. This service can be handy for the app, and easy for the developer to...","Href":"https://blog.xamarin.com/replacing-services-jobs-android-oreo-8-0/","RawContent":null},{"Title":"Microsoft Connect 2017(); Xamarin Video Round-Up","PublishedOn":"2017-11-21T21:06:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Connect(); is always an exciting day for developers, with three days of exciting announcements, demos, and technical sessions. From the announcement of the General Availability of Visual...","Href":"https://blog.xamarin.com/microsoft-connect-2017-xamarin-video-round/","RawContent":null},{"Title":"Hello NuGet! a New Home for Xamarin Components","PublishedOn":"2017-11-20T22:19:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In 2013, we launched the Xamarin Component Store as a central location to find a rich ecosystem of UI controls and plugins for Xamarin developers targeting iOS and Android. Since then, the broader...","Href":"https://blog.xamarin.com/hello-nuget-new-home-xamarin-components/","RawContent":null},{"Title":"Xamarin Docs Now Available in Japanese and German","PublishedOn":"2017-11-20T18:12:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"日本語 &#124; Deutsch Earlier this year we published Spanish, Chinese, and Portuguese translations of our most useful documentation. I&#8217;m excited to announce that we&#8217;ve now added Japanese and...","Href":"https://blog.xamarin.com/xamarin-docs-now-available-japanese-german/","RawContent":null},{"Title":"Podcast: Connect(); 2017 Xamarin and App Center Recap","PublishedOn":"2017-11-17T22:08:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, I am joined by App Center program manager James White. We sit down and cover all of the amazing announcements from this years Connect(); 2017 event. Sit back,...","Href":"https://blog.xamarin.com/podcast-connect-2017-xamarin-app-center-recap/","RawContent":null},{"Title":"Xamarin Announcements from Microsoft Connect(); 2017","PublishedOn":"2017-11-15T16:42:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2017, we shared some very exciting updates related to Visual Studio and Xamarin. We invite you to join us tomorrow and Thursday to see even more during the remainder of...","Href":"https://blog.xamarin.com/xamarin-announcements-microsoft-connect-2017/","RawContent":null},{"Title":"Visual Studio App Center: The Next Generation of Xamarin Test Cloud","PublishedOn":"2017-11-15T13:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today at Microsoft Connect(); we announced the launch of Visual Studio App Center, the next generation of Xamarin Test Cloud. App Center brings the power of Xamarin Test Cloud combined with ability to...","Href":"https://blog.xamarin.com/visual-studio-app-center-next-generation-xamarin-test-cloud/","RawContent":null},{"Title":"Microsoft Connect(); 2017 Sessions for Xamarin Developers","PublishedOn":"2017-11-15T12:18:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Connect(); 2017 is underway, and there will be a ton of great content for mobile developers over the next three days. To help ensure you catch it all,  we’ve compiled a list of the sessions...","Href":"https://blog.xamarin.com/microsoft-connect-2017-sessions-xamarin-developers/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6920933090","Type":"PullRequestEvent","CreatedAt":"2017-11-29T20:12:56","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1056","RelatedDescription":"Opened pull request \"[tests] RunningMSBuild likely should be set on Windows\" (#1056) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1180513\r\n\r\nThe Xamarin.Android.Build.Tests aren't creating binary logs on Windows\r\nat the moment, due to `RunningMSBuild` not being set. This flag is\r\nprobably supposed to be set on Windows, it may fix some tests as well as\r\nenable binary logs."},{"Id":"6920482385","Type":"PullRequestEvent","CreatedAt":"2017-11-29T18:39:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1052","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Android design-time intellisense gets deleted by IncrementalClean\" (#1052) at xamarin/xamarin-android","RelatedBody":"Fixes https://bugzilla.xamarin.com/show_bug.cgi?id=60880\r\n\r\nFor some weird reason, writing the designer.cs location to the\r\nFileWrites file was not working. It was getting deleted still.\r\n\r\nSo lets add it to the Xamarin.Android.Windows.targets. This is what\r\nwe use to make sure files are NOT deleted by the IncrementalClean.\r\nAgain no idea why writing the data to the FileWrites file as NOT\r\nworking.\r\n\r\nA unit test has also been updated to make sure the designtime\r\nfile is NOT removed on the next full build after the designtime\r\none."},{"Id":"6920142437","Type":"PullRequestEvent","CreatedAt":"2017-11-29T17:29:05","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1055","RelatedDescription":"Merged pull request \"[linker] Preserve System.dll parts conditionaly\" (#1055) at xamarin/xamarin-android","RelatedBody":"Do not always preserve System.dll parts. The ProcessSystem method was\r\nported from Xamarin.MaciOS.\r\n\r\nI run across this when testing linker-analyzer tool. The\r\n`System.Net.Sockets.Socket` looked like a good candidate to check as\r\nit was big and had only few dependencies. It turned out we preserve\r\nthe whole type unconditionaly.\r\n\r\n```\r\nDistance | TypeDef:System.Net.Sockets.Socket [total deps: 4][size: 16927 total size: 16927]\r\n------------------------------------------------------------------------\r\n       1 | Other:ResolveFromXmlStep: descriptor System.xml from Xamarin.Android.Build.Tasks, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n       1 | Assembly:System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n       2 | Other:MonoDroid.Tuner.MonoDroidMarkStep\r\n```\r\n\r\nI have also found out that Xamarin.MaciOS has already better solution\r\nfor it, so I have ported the relevant parts.\r\n\r\nAfter this we have\r\n\r\n```\r\nDistance | TypeDef:System.Net.Sockets.Socket [total deps: 21][size: 5320 total size: 5320]\r\n------------------------------------------------------------------------\r\n       1 | Method:System.Boolean System.Net.Sockets.Socket::get_SupportsIPv6()\r\n       2 | Method:System.Net.IPHostEntry System.Net.Dns::hostent_to_IPHostEntry(System.String,System.String,System.String[],System.String[])\r\n       3 | Assembly:System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n       4 | Other:MonoDroid.Tuner.MonoDroidMarkStep\r\n       3 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByAddressFromString(System.String,System.Boolean)\r\n       4 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByAddress(System.Net.IPAddress)\r\n       4 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByAddress(System.String)\r\n       5 | Method:System.Net.IPHostEntry System.Net.Dns::Resolve(System.String)\r\n       6 | Method:System.IAsyncResult System.Net.Dns::BeginResolve(System.String,System.AsyncCallback,System.Object)\r\n       4 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostEntry(System.Net.IPAddress)\r\n       5 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\r\n       6 | Method:System.Threading.Tasks.Task`1<System.Net.IPHostEntry> System.Net.Dns::GetHostEntryAsync(System.Net.IPAddress)\r\n       5 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostEntry(System.String)\r\n       6 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\r\n       7 | Method:System.Threading.Tasks.Task`1<System.Net.IPHostEntry> System.Net.Dns::GetHostEntryAsync(System.String)\r\n       6 | Method:System.Net.IPAddress[] System.Net.Dns::GetHostAddresses(System.String)\r\n       7 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\r\n       8 | Method:System.Threading.Tasks.Task`1<System.Net.IPAddress[]> System.Net.Dns::GetHostAddressesAsync(System.String)\r\n       3 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByName(System.String)\r\n       4 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\r\n```\r\n\r\nWith template XA app we save 1% of apk size. Let see if it will also\r\nshow in the sizes measurement plot. Note that linker-analyzer sizes\r\nnow represent only method body sizes."},{"Id":"6916464810","Type":"PullRequestEvent","CreatedAt":"2017-11-29T02:43:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1054","RelatedDescription":"Merged pull request \"[xabuild] better NetStandard support\" (#1054) at xamarin/xamarin-android","RelatedBody":"This solves two problems with `xabuild.exe`:\r\n- `xabuild.exe /t:Restore` did not work on Windows\r\n- `xabuild.exe` only supported .NET Core 2.0.0\r\n\r\nTo fix these issues:\r\n- Set `NuGetRestoreTargets` property, this allows Windows to properly\r\nimport `NuGet.targets`, which fixes the `Restore` target\r\n- I found this property in\r\n`%VsInstallDir%\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NuGet.ImportAfter.targets`\r\n- Note that on Windows I had to use the `ProgramW6432` environment\r\nvariable, so that a 32-bit process on a 64-bit machine could find the\r\npath to `C:\\Program Files\\`\r\n- Added logic to locate the newest version of .NET Core within the\r\n`dotnet/sdk` directory. This allows `xabuild.exe` to function on\r\nmachines that have .NET Core 2.0.3, 1.0.0, etc."},{"Id":"6915566079","Type":"PullRequestEvent","CreatedAt":"2017-11-28T22:12:00","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1055","RelatedDescription":"Opened pull request \"[linker] Preserve System.dll parts conditionaly\" (#1055) at xamarin/xamarin-android","RelatedBody":"Do not always preserve System.dll parts. The ProcessSystem method was\r\nported from Xamarin.MaciOS.\r\n\r\nI run across this when testing linker-analyzer tool. The\r\n`System.Net.Sockets.Socket` looked like a good candidate to check as\r\nit was big and had only few dependencies. It turned out we preserve\r\nthe whole type unconditionaly.\r\n\r\n```\r\nDistance | TypeDef:System.Net.Sockets.Socket [total deps: 4][size: 16927 total size: 16927]\r\n------------------------------------------------------------------------\r\n       1 | Other:ResolveFromXmlStep: descriptor System.xml from Xamarin.Android.Build.Tasks, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n       1 | Assembly:System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n       2 | Other:MonoDroid.Tuner.MonoDroidMarkStep\r\n```\r\n\r\nI have also found out that Xamarin.MaciOS has already better solution\r\nfor it, so I have ported the relevant parts.\r\n\r\nAfter this we have\r\n\r\n```\r\nDistance | TypeDef:System.Net.Sockets.Socket [total deps: 21][size: 5320 total size: 5320]\r\n------------------------------------------------------------------------\r\n       1 | Method:System.Boolean System.Net.Sockets.Socket::get_SupportsIPv6()\r\n       2 | Method:System.Net.IPHostEntry System.Net.Dns::hostent_to_IPHostEntry(System.String,System.String,System.String[],System.String[])\r\n       3 | Assembly:System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n       4 | Other:MonoDroid.Tuner.MonoDroidMarkStep\r\n       3 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByAddressFromString(System.String,System.Boolean)\r\n       4 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByAddress(System.Net.IPAddress)\r\n       4 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByAddress(System.String)\r\n       5 | Method:System.Net.IPHostEntry System.Net.Dns::Resolve(System.String)\r\n       6 | Method:System.IAsyncResult System.Net.Dns::BeginResolve(System.String,System.AsyncCallback,System.Object)\r\n       4 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostEntry(System.Net.IPAddress)\r\n       5 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\r\n       6 | Method:System.Threading.Tasks.Task`1<System.Net.IPHostEntry> System.Net.Dns::GetHostEntryAsync(System.Net.IPAddress)\r\n       5 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostEntry(System.String)\r\n       6 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\r\n       7 | Method:System.Threading.Tasks.Task`1<System.Net.IPHostEntry> System.Net.Dns::GetHostEntryAsync(System.String)\r\n       6 | Method:System.Net.IPAddress[] System.Net.Dns::GetHostAddresses(System.String)\r\n       7 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\r\n       8 | Method:System.Threading.Tasks.Task`1<System.Net.IPAddress[]> System.Net.Dns::GetHostAddressesAsync(System.String)\r\n       3 | Method:System.Net.IPHostEntry System.Net.Dns::GetHostByName(System.String)\r\n       4 | Method:System.IAsyncResult System.Net.Dns::BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\r\n```\r\n\r\nWith template XA app we save 1% of apk size. Let see if it will also\r\nshow in the sizes measurement plot. Note that linker-analyzer sizes\r\nnow represent only method body sizes."},{"Id":"6915406236","Type":"PullRequestEvent","CreatedAt":"2017-11-28T21:37:30","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1054","RelatedDescription":"Opened pull request \"[xabuild] better NetStandard support\" (#1054) at xamarin/xamarin-android","RelatedBody":"This solves two problems with `xabuild.exe`:\r\n- `xabuild.exe /t:Restore` did not work on Windows\r\n- `xabuild.exe` only supported .NET Core 2.0.0\r\n\r\nTo fix these issues:\r\n- Set `NuGetRestoreTargets` property, this allows Windows to properly\r\nimport `NuGet.targets`, which fixes the `Restore` target\r\n- I found this property in\r\n`%VsInstallDir%\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NuGet.ImportAfter.targets`\r\n- Note that on Windows I had to use the `ProgramW6432` environment\r\nvariable, so that a 32-bit process on a 64-bit machine could find the\r\npath to `C:\\Program Files\\`\r\n- Added logic to locate the newest version of .NET Core within the\r\n`dotnet/sdk` directory. This allows `xabuild.exe` to function on\r\nmachines that have .NET Core 2.0.3, 1.0.0, etc."},{"Id":"6915119679","Type":"PullRequestEvent","CreatedAt":"2017-11-28T20:35:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1049","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] added filter to proguard commands\" (#1049) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=56834\r\n\r\nA default multi-dex application will print a warning to the console\r\nsuch as:\r\n```\r\nWarning: can't write resource [META-INF/MANIFEST.MF] (Duplicate zip entry [android-support-multidex.jar:META-INF/MANIFEST.MF])\r\n```\r\n\r\nThis is due to most jar files containing a `META-INF/MANIFEST.MF`,\r\nwhich really just needs to be excluded from the proguard command.\r\nWe can do this by adding a filter to the end of each jar file passed\r\nvia the `-injars` command line option.\r\n\r\nChanges:\r\n- Added a `$(_AndroidProguardInputJarFilter)` internal property, which\r\ndefaults to `(!META-INF/MANIFEST.MF)` so we ignore the most common warning\r\nby default\r\n- Added a `ProguardInputJarFilter` property to the `<Proguard />` and\r\n`<CreateMultiDexMainDexClassList />` tasks\r\n- Added assertions to multi-dex unit tests making sure we aren't getting\r\nthe warning anymore\r\n- Minor fix to clear the `ghprbPullLongDescription` environment variable during\r\ntests, otherwise my PR/commit message causes my new test assertions to fail"},{"Id":"6914252030","Type":"PullRequestEvent","CreatedAt":"2017-11-28T17:38:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1053","RelatedDescription":"Merged pull request \"Fix a subtle logic bug with null conditional operator\" (#1053) at xamarin/xamarin-android","RelatedBody":"This commit fixes one of the subtle pitfalls of the null conditional\r\noperator (and the biggest issue with it, IMO, as it introduces subtle\r\n*runtime* bugs which may be hard to find, depending on where and how\r\nthe code is used)\r\n\r\nIt is tempting to use the null conditional operator as follows:\r\n\r\n    string[] arr = null;\r\n    if (arr?.Length == 0)\r\n       Console.WriteLine (\"Array has no elements or is null\");\r\n    Console.WriteLine ($\"Array contains {arr.Length} elements\");\r\n\r\nHowever, the above code will throw a NullReferenceException in the last\r\nline. The reason is that the conditional expression preceeding it will\r\nyield `false` because the ?. operator returns a nullable type which, in\r\nthis case, will have a value of `null` - and that value is not equal to\r\n`0` obviously. Yet since the conditional expression type is `int?` and\r\nan implicit conversion to `int` exists, the compiler will NOT issue an\r\nerror (if you replace `0` with, say, `true` there will be a compilation\r\nerror) and happily generate code which will yield a false positive thus\r\nleading to the runtime exception.\r\n\r\nWhile it would be possible to modify the existing condition to the\r\nfollowing form:\r\n\r\n    if (!(arr?.Length >= 0))\r\n\r\nit looks cumbersome and unnecessarily complicates reading the code. Thus,\r\nin instances when the null conditional operator applies to nullable types\r\ninstead of reference ones, it is safer to just use the good old long equivalent\r\nto the comfortable ?. shortcut.\r\n\r\nArguably, in this case the NREX won't happen since our array is not `null`,\r\nbut I'm a big proponent of correct code, so... :)"},{"Id":"6913706589","Type":"PullRequestEvent","CreatedAt":"2017-11-28T16:01:31","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1053","RelatedDescription":"Opened pull request \"Fix a subtle logic bug with null conditional operator\" (#1053) at xamarin/xamarin-android","RelatedBody":"It is tempting to use the null conditional operator as follows:\r\n\r\n    string[] arr = null;\r\n    if (arr?.Length == 0)\r\n       Console.WriteLine (\"Array has no elements or is null\");\r\n    Console.WriteLine ($\"Array contains {arr.Length} elements\");\r\n\r\nHowever, the above code will throw a NullReferenceException in the last\r\nline. The reason is that the conditional expression preceeding it will\r\nyield `false` because the ?. operator returns a nullable type which, in\r\nthis case, will have a value of `null` - and that value is not equal to\r\n`0` obviously. Yet since the conditional expression type is `int?` and\r\nan implicit conversion to `int` exists, the compiler will NOT issue an\r\nerror (if you replace `0` with, say, `true` there will be a compilation\r\nerror) and happily generate code which will yield a false positive thus\r\nleading to the runtime exception.\r\n\r\nWhile it would be possible to modify the existing condition to the\r\nfollowing form:\r\n\r\n    if (!(arr?.Length >= 0))\r\n\r\nit looks cumbersome and unnecessarily complicates reading the code. Thus,\r\nin instances when the null conditional operator applies to nullable types\r\ninstead of reference ones, it is safer to just use the good old long equivalent\r\nto the comfortable ?. shortcut."},{"Id":"6913632440","Type":"PullRequestEvent","CreatedAt":"2017-11-28T15:49:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1050","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Android design-time intellisense doesn't process global cache AARs\" (#1050) at xamarin/xamarin-android","RelatedBody":"Fixes https://bugzilla.xamarin.com/show_bug.cgi?id=60878\r\n\r\nThe Managed Resource Parsing system was not including items downloaded\r\ninto the global resource cache. As a result intellisense for those\r\nitems did not work.\r\n\r\nThis commit fixes that by adding `_CreateAdditionalResourceCache` to the\r\n`_ManagedUpdateAndroidResgen` target. This will ensure that those\r\nitems are included. Note that we still DO NOT download files during\r\nthe designtime build. So if the required items have not been downloaded\r\nthe intellisense will still not show those items. The user will\r\nneed to do a full build to ensure those items are in place."},{"Id":"6912983518","Type":"PullRequestEvent","CreatedAt":"2017-11-28T13:57:03","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1052","RelatedDescription":"Opened pull request \"Bug60880 [WIP]\" (#1052) at xamarin/xamarin-android","RelatedBody":""}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6920870172","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:59:46","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1309","RelatedDescription":"Opened pull request \"15 5 merge\" (#1309) at xamarin/Xamarin.Forms","RelatedBody":"GETTING BUILD RESULTS ONLY, DO NOT MERGE.\r\n\r\nI know about the script that shouldn't be there, it wont affect our build results. Its fixed in the real merge."},{"Id":"6920819604","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:49:07","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1308","RelatedDescription":"Opened pull request \"[UWP] Entry alignment re-adjustment\" (#1308) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRe-target of #1286 to 15-5 branch."},{"Id":"6920693205","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:23:07","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1286","RelatedDescription":"Merged pull request \"[UWP] Entry alignment re-adjustment\" (#1286) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nOne more removal of bottom alignment re: #1220  to correctly fix placeholder.\r\n\r\n![1](https://user-images.githubusercontent.com/1251024/32958666-27f4e43a-cb8d-11e7-8f0c-c4d6869e7496.JPG)\r\n![2](https://user-images.githubusercontent.com/1251024/32958669-291c33c2-cb8d-11e7-8277-429dbebe2951.JPG)\r\n\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60041\r\n\r\n### API Changes ###\r\n\r\nN/A\r\n\r\n### Behavioral Changes ###\r\n\r\nN/A\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6920684651","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:21:19","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1307","RelatedDescription":"Merged pull request \"[iOS] ListView should not explicitly remove subviews coming from renderers\" (#1307) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#524 added logic on iOS that will remove all `Subview`s of a `ListView` from their parents to prevent memory leaks. On iOS 8, this caused a SIGSEGV for `ActivityIndicator`s. The actual fault appears to be an iOS issue whereby the `UIActivityIndicatorView` is being accessed by the OS after it has been set to `nil` by `RemoveFromSuperview`. \r\n\r\nThis change will adjust the aggressive `DisposeSubviews` method to only remove views that are not `IVisualElementRenderer`s, with the assumption that the renderers themselves should handle the disposal and removal of their own views. This effectively prevents the SIGSEGV by not calling `RemoveFromSuperview` on `ActivityIndicatorRenderer` and puts the onus on the renderers to take care of that.\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=60563\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nMay reintroduce some memory leaks if renderers inside of `ListView`s do not properly dispose themselves.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6920633682","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:10:49","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1296","RelatedDescription":"Closed pull request \"[iOS] Device.OpenUriAction can open tel URIs with spaces again\" (#1296) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#734 enabled users to open URLs on iOS while properly passing the query strings.\r\n\r\n`NSUrl` is not happy when `tel` paths have spaces, however, so it crashes when attempting to parse it. \r\n\r\nSince `tel` paths won't have query strings, using the `AbsoluteUri` to let it encode properly.\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=60691\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6920568560","Type":"PullRequestEvent","CreatedAt":"2017-11-29T18:57:33","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1300","RelatedDescription":"Merged pull request \"[Xaml[C]] avoid processing nested RD multiple times\" (#1300) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nWith changes introduced to FillRDVisitor, it can happen that nested RD are processed multiple times, hence creating duplicate keys. This prevents that.\r\n\r\n**NOTE0**: this PR is against the 2.5.0 branch. once merged, it needs to be merged back to master.\r\n**NOTE1**: should be included in next -sr\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=60788\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of ~~master~~ **15-5** at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6921719064","Type":"PullRequestEvent","CreatedAt":"2017-11-29T23:10:46","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3066","RelatedDescription":"Opened pull request \"Fix macOS 10.13 test failures\" (#3066) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6920995171","Type":"PullRequestEvent","CreatedAt":"2017-11-29T20:26:30","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3060","RelatedDescription":"Merged pull request \"[msbuild] Codesign iOS Simulator builds using the '-' key\" (#3060) at xamarin/xamarin-macios","RelatedBody":"When codesigning iOS Simulator builds, it is important to note\r\nthat the codesign command itself cannot include the entitlements,\r\nbut the mtouch command *MUST* embed the entitlements using\r\n-Xlinker."},{"Id":"6920661133","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:16:29","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3064","RelatedDescription":"Merged pull request \"[tests] Fix mac-apitest on High-Sierra\" (#3064) at xamarin/xamarin-macios","RelatedBody":"MetalPerformanceShadersLibrary is new in macOS 10.13 and only available\nfor 64bits.\n\nfrom https://wrench.internalx.com/Wrench/WebServices/Download.aspx?workfile_id=19778531\n\n    Tests run: 248, Passed: 238, Errors: 0, Failures: 1, Inconclusive: 0\n      Not run: 9, Invalid: 0, Ignored: 9, Skipped: 0\n    Elapsed time: 00:00:11.3800000\n\n    Errors and Failures:\n\n    1) ExpectedLibrariesAreLoaded (Xamarin.Mac.Tests.EveryFrameworkSmokeTests.ExpectedLibrariesAreLoaded)\n       MetalPerformanceShadersLibrary (/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders) failed to load but this was not expected\n      at Xamarin.Mac.Tests.EveryFrameworkSmokeTests.ExpectedLibrariesAreLoaded () [0x000c5] in /Users/builder/data/lanes/5665/74d2dcad/source/xamarin-macios/tests/apitest/src/EveryFrameworkSmokeTest.cs:99\n      at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n      at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /Library/Frameworks/Xamarin.Mac.framework/Versions/4.1.1.45/src/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:305"},{"Id":"6920513851","Type":"PullRequestEvent","CreatedAt":"2017-11-29T18:46:27","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3065","RelatedDescription":"Opened pull request \"Fix test failures on 10.13\" (#3065) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6919550306","Type":"PullRequestEvent","CreatedAt":"2017-11-29T15:46:40","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3064","RelatedDescription":"Opened pull request \"[tests] Fix mac-apitest on High-Sierra\" (#3064) at xamarin/xamarin-macios","RelatedBody":"MetalPerformanceShadersLibrary is new in macOS 10.13 and only available\nfor 64bits.\n\nfrom https://wrench.internalx.com/Wrench/WebServices/Download.aspx?workfile_id=19778531\n\n    Tests run: 248, Passed: 238, Errors: 0, Failures: 1, Inconclusive: 0\n      Not run: 9, Invalid: 0, Ignored: 9, Skipped: 0\n    Elapsed time: 00:00:11.3800000\n\n    Errors and Failures:\n\n    1) ExpectedLibrariesAreLoaded (Xamarin.Mac.Tests.EveryFrameworkSmokeTests.ExpectedLibrariesAreLoaded)\n       MetalPerformanceShadersLibrary (/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders) failed to load but this was not expected\n      at Xamarin.Mac.Tests.EveryFrameworkSmokeTests.ExpectedLibrariesAreLoaded () [0x000c5] in /Users/builder/data/lanes/5665/74d2dcad/source/xamarin-macios/tests/apitest/src/EveryFrameworkSmokeTest.cs:99\n      at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n      at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /Library/Frameworks/Xamarin.Mac.framework/Versions/4.1.1.45/src/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:305"},{"Id":"6919254634","Type":"PullRequestEvent","CreatedAt":"2017-11-29T14:57:16","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3062","RelatedDescription":"Merged pull request \"[xharness] Make it possible to select from the command line whether tests requiring system permissions should be executed or not. (#3053)\" (#3062) at xamarin/xamarin-macios","RelatedBody":null}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935969076786204672","CreatedAt":"2017-11-29T20:29:52+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinars on updating your #Xamarin apps to get the most out of iOS 11 and Android 8 O… https://t.co/RLOHI0RlUX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"935917018624217089","CreatedAt":"2017-11-29T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to provision a new iOS device and app in five minutes using #VS4Mac and the open source project fastlane: https://t.co/wNcfcCJn1v","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"935600034816634880","CreatedAt":"2017-11-28T20:03:25+00:00","UserScreenname":"xamarinhq","Text":"Build a meeting scheduling mobile app using #XamarinForms and the Microsoft Graph API: https://t.co/LsMgiFD20d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":18,"RawContent":null},{"Id":"935552365058560001","CreatedAt":"2017-11-28T16:54:00+00:00","UserScreenname":"xamarinhq","Text":"5 ways to boost a #XamarinForms app's start up time: https://t.co/OqbHBRux5G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":72,"FavoriteCount":34,"RawContent":null},{"Id":"935255661050585088","CreatedAt":"2017-11-27T21:15:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/TA7SMA9DLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":26,"RawContent":null},{"Id":"935193758232178688","CreatedAt":"2017-11-27T17:09:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:… https://t.co/VW73seGwWt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":24,"RawContent":null},{"Id":"935006266874847232","CreatedAt":"2017-11-27T04:44:00+00:00","UserScreenname":"xamarinhq","Text":"Add local notifications to your Xamarin.Mac applications: https://t.co/fmHnM8m18Z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":18,"RawContent":null},{"Id":"934586249125548032","CreatedAt":"2017-11-26T00:55:00+00:00","UserScreenname":"xamarinhq","Text":"Native Android Facebook Authentication with #Azure #App Service https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":38,"RawContent":null},{"Id":"934103568986066944","CreatedAt":"2017-11-24T16:57:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with ActivityTask, a helper for async/await on Android: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":20,"RawContent":null},{"Id":"933741185478332416","CreatedAt":"2017-11-23T16:57:01+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @lobrien  shows you how to add augmented reality to your #Xamarin apps with #ARKit in #iOS11:… https://t.co/HII0XqDMRj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":31,"RawContent":null},{"Id":"933432266495275008","CreatedAt":"2017-11-22T20:29:29+00:00","UserScreenname":"xamarinhq","Text":"Details on moving from Xamarin components to #NuGet as we sunset the #Xamarin Component Store: https://t.co/tYuAmSeKee","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":97,"FavoriteCount":59,"RawContent":null},{"Id":"933379799699116033","CreatedAt":"2017-11-22T17:01:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Program Manager @davidortinau shares his tips for beating the learning curve: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":25,"RawContent":null},{"Id":"933081334129614849","CreatedAt":"2017-11-21T21:15:00+00:00","UserScreenname":"xamarinhq","Text":"There was SO MUCH awesome content at #MSFTConnect last week! Whether you just couldn't get to it all, want to share… https://t.co/FJk5D8lEjH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":47,"RawContent":null},{"Id":"933017919218470912","CreatedAt":"2017-11-21T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Update your iOS apps to reflect plugin and permission changes in iOS 11: https://t.co/9DXby5Nxsn https://t.co/gIjmTghxVn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":18,"RawContent":null},{"Id":"932725992052985856","CreatedAt":"2017-11-20T21:43:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to make your #XamarinForms apps adaptive based on screen size, device type, and orientation: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":77,"FavoriteCount":34,"RawContent":null},{"Id":"932706478242320385","CreatedAt":"2017-11-20T20:25:27+00:00","UserScreenname":"xamarinhq","Text":"We’ve added Japanese and German translations of our \"Getting Started\" and \"Deployment\" documentation: https://t.co/ycX8AbvL2z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":13,"RawContent":null},{"Id":"932651214269018113","CreatedAt":"2017-11-20T16:45:51+00:00","UserScreenname":"xamarinhq","Text":"Join @JamesMontemagno and @maestersid on the @XamarinPodcast as they discuss the exciting announcements from… https://t.co/IV7GarsYVW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":12,"RawContent":null},{"Id":"932414942225010688","CreatedAt":"2017-11-20T01:07:00+00:00","UserScreenname":"xamarinhq","Text":"Ready to go mobile? @XamarinU offers 30-day free trials! Learn more: https://t.co/bVpjALvmoy","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":17,"RawContent":null},{"Id":"932048027908526080","CreatedAt":"2017-11-19T00:49:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/FDIv3uFKZF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":87,"FavoriteCount":48,"RawContent":null},{"Id":"931551005816311809","CreatedAt":"2017-11-17T15:54:01+00:00","UserScreenname":"xamarinhq","Text":"Day 3 of #MSFTConnect starts NOW! Get FREE live, online training from @XamarinU, streaming all day—join us:… https://t.co/SDurZQlgnh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2017-11-30T05:30:41.5807575Z","RunDurationInMilliseconds":4151}