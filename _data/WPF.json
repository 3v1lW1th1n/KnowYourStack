{"Data":{"GitHub":{"Issues":[{"Id":"534579050","IsPullRequest":true,"CreatedAt":"2019-12-08T18:13:54","Actor":"dotMorten","Number":"2293","RawContent":null,"Title":"Updated target framework path to 3.1","State":"open","Body":"Fixed the reference path","Url":"https://github.com/dotnet/wpf/pull/2293","RelatedDescription":"Open PR \"Updated target framework path to 3.1\" (#2293)"},{"Id":"534572314","IsPullRequest":true,"CreatedAt":"2019-12-08T17:15:59","Actor":"dotMorten","Number":"2292","RawContent":null,"Title":"Doc was still referring to 3.0 preview 1.","State":"open","Body":"Updated to refer to 3.1","Url":"https://github.com/dotnet/wpf/pull/2292","RelatedDescription":"Open PR \"Doc was still referring to 3.0 preview 1.\" (#2292)"},{"Id":"534540581","IsPullRequest":true,"CreatedAt":"2019-12-08T13:32:23","Actor":"dotnet-maestro[bot]","Number":"2291","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191207.6\r\n- **Date Produced**: 12/8/2019 1:10 AM\r\n- **Commit**: b080aa1ad0f1e26114f1f71625e84fda31f0e292\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19607.6\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2291","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2291)"},{"Id":"534486421","IsPullRequest":false,"CreatedAt":"2019-12-08T03:27:27","Actor":"lindexi","Number":"2290","RawContent":null,"Title":"How to build this project in github action","State":"open","Body":"I create a github action and call the build.cmd but build failed.\r\n\r\nThis is my action file https://github.com/dotnet-campus/wpf/pull/1/files\r\n\r\nAnd this is the build info: https://github.com/dotnet-campus/wpf/pull/1/checks?check_run_id=338492387\r\n\r\nCould you help me to build WPF project","Url":"https://github.com/dotnet/wpf/issues/2290","RelatedDescription":"Open issue \"How to build this project in github action\" (#2290)"},{"Id":"534400977","IsPullRequest":true,"CreatedAt":"2019-12-07T13:32:50","Actor":"dotnet-maestro[bot]","Number":"2289","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191206.4\r\n- **Date Produced**: 12/7/2019 1:03 AM\r\n- **Commit**: 8429f487bb3b9dcc86b211ad0b98bef9301c0c04\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19606.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2289)"},{"Id":"534286362","IsPullRequest":true,"CreatedAt":"2019-12-06T22:25:27","Actor":"rladuca","Number":"2288","RawContent":null,"Title":"Handle incremental build when XAML files are removed from the Page glob","State":"open","Body":"Ensure that we don't include XAML files that no longer exist on disk as part of the LocalMarkupPages when we load from the compiler cache.\r\n\r\nThis allows SDK style projects to react to files deleted from the glob between two incremental builds.\r\n\r\nFixes #2287 ","Url":"https://github.com/dotnet/wpf/pull/2288","RelatedDescription":"Open PR \"Handle incremental build when XAML files are removed from the Page glob\" (#2288)"},{"Id":"534161006","IsPullRequest":false,"CreatedAt":"2019-12-06T17:24:44","Actor":"rladuca","Number":"2287","RawContent":null,"Title":"Handle incremental build when XAML files are removed from the Page glob","State":"open","Body":"Related to https://github.com/microsoft/msbuild/issues/4963\r\n\r\nWPF needs to update its handling of incremental building in PBT (likely in [IncrementalCompileAnalyzer](https://github.com/dotnet/wpf/blob/f4e04b7a34f8c490b7d351b44d2825293462e8a5/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/MS/Internal/Tasks/IncrementalCompileAnalyzer.cs)) so that it detects invalid items in the cache and ignores them during markup compilation.\r\n\r\nOtherwise, we potentially attempt to compile files that are no longer present on disk and the build will fail.\r\n\r\nMSBuild has no mechanism to do this automatically as of yet (see https://github.com/microsoft/msbuild/issues/2470), so this must be handled at the WPF level.","Url":"https://github.com/dotnet/wpf/issues/2287","RelatedDescription":"Open issue \"Handle incremental build when XAML files are removed from the Page glob\" (#2287)"},{"Id":"534066599","IsPullRequest":false,"CreatedAt":"2019-12-06T15:17:41","Actor":"Proxaaa","Number":"2286","RawContent":null,"Title":"An implicit style located in merged resource dictionary is not applied to the first control of the target type if the main resource dictionary is empty","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: Version 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nHello,\r\n\r\nPlease try the following setup:\r\n\r\n```\r\n<Window.Resources>\r\n    <ResourceDictionary>\r\n        <!--<system:String x:Key=\"DummyString\">Dummy</system:String>-->\r\n        <ResourceDictionary.MergedDictionaries>\r\n            <ResourceDictionary>\r\n                <Style TargetType=\"{x:Type TextBlock}\">\r\n                    <Setter Property=\"Text\" Value=\"Test\" />\r\n                </Style>\r\n            </ResourceDictionary>\r\n        </ResourceDictionary.MergedDictionaries>\r\n    </ResourceDictionary>\r\n</Window.Resources>\r\n\r\n<StackPanel>\r\n    <TextBlock />\r\n    <TextBlock />\r\n    <TextBlock />\r\n</StackPanel>\r\n```\r\n\r\n\r\n **Actual behavior:** \r\nThe first TextBlock there does not have its Text set to \"Test\". If I uncomment the DummyString resource it works as expected.\r\n \r\n **Expected behavior:**\r\nThe first TextBlock there has its Text set to \"Test\".\r\n \r\n **Minimal repro:**\r\nSee https://github.com/Proxaaa/MergeTest/tree/master","Url":"https://github.com/dotnet/wpf/issues/2286","RelatedDescription":"Open issue \"An implicit style located in merged resource dictionary is not applied to the first control of the target type if the main resource dictionary is empty\" (#2286)"},{"Id":"533973440","IsPullRequest":true,"CreatedAt":"2019-12-06T13:27:51","Actor":"dotnet-maestro[bot]","Number":"2285","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191205.11\r\n- **Date Produced**: 12/6/2019 1:45 AM\r\n- **Commit**: 292cdbc0db71ef4d25a0f5d263e564b71f04ac46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19605.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2285","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2285)"},{"Id":"533678120","IsPullRequest":true,"CreatedAt":"2019-12-06T01:23:05","Actor":"dotnet-maestro[bot]","Number":"2284","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191205.5\r\n- **Date Produced**: 12/5/2019 10:05 PM\r\n- **Commit**: 9483a88b7764a74d71cbd449de6c56c1d5e0af21\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19605.5\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2284","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2284)"},{"Id":"533580773","IsPullRequest":true,"CreatedAt":"2019-12-05T21:36:54","Actor":"mmitche","Number":"2283","RawContent":null,"Title":"Move to 3.1.100 RTM sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/2283","RelatedDescription":"Closed or merged PR \"Move to 3.1.100 RTM sdk\" (#2283)"},{"Id":"533531729","IsPullRequest":true,"CreatedAt":"2019-12-05T18:54:17","Actor":"vatsan-madhavan","Number":"2282","RawContent":null,"Title":"Use production cpptools","State":"open","Body":"Fixes `<tbd>`\r\n\r\n### Description \r\n\r\n- Switch to use production C++ tools that are ambient to the build machine, instead of privatized C++ tools \r\n  - Dev/local builds would rely on tools from Dev16.4+ \r\n- Update tools.dotnet in global.json to 3.1.100\r\n\r\nMatching internal PR at https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/4692?_a=overview\r\n\r\nThis change is being proposed based on a plan agreed with @tgani-msft and @jamshedd to move the LTS branch away from using private tools. \r\n\r\nThis was the plan: \r\n\r\n- Starts out with privatized tools (same as 3.0) \r\n- Switches to Dev 16.4 P1 when it becomes available (timing wise, this lines up with 3.0 RTM, roughly). \r\n- (not-critical) At 3.1 RTM, it will likely switch to using 16.4 RTM (3.1 and 16.4 schedules are lined up). \r\n- Steady State: 3.1 will use shipping tools, not private tools. \r\n\r\n### Customer Impact \r\n\r\n- Ship product built using production tools\r\n- libraries etc. could have fixes/updates (incl. security updates) that are delivered seamlessly when using ambient tools supplied by the build machines. \r\n\r\n### Regression \r\nNo\r\n\r\n### Risk\r\nLow\r\n\r\n{Status: in testing }","Url":"https://github.com/dotnet/wpf/pull/2282","RelatedDescription":"Open PR \"Use production cpptools\" (#2282)"},{"Id":"533438131","IsPullRequest":false,"CreatedAt":"2019-12-05T15:54:03","Actor":"KirillOsenkov","Number":"2281","RawContent":null,"Title":"MarkupCompilePass2 shouldn't zero GeneratedInternalTypeHelper.g.cs","State":"open","Body":"This is for .NET Framework but it looks like it might be a problem for .NET Core as well.\r\n\r\nSometimes (and under circumstances unclear to me) MarkupCompilePass2 decides that the internal type helper is not necessary and it zeroes out the file:\r\n\r\nhttps://github.com/dotnet/wpf/blob/1570c84797250fcb0efa1f00d4d7c14c694a6213/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/Microsoft/Build/Tasks/Windows/MarkupCompilePass2.cs#L663-L687\r\n\r\nFrom what I can see this is a race condition with MarkupCompilePass1 and/or design-time builds which write into the file. \r\n\r\nThe problem is that the presence or absence of the `GeneratedInternalTypeHelper` class in the assembly changes its public API. In scenarios where reference assemblies are used for better incremental builds (by setting `ProduceReferenceAssembly` property to `true`) this public API change results in a different reference assembly, thus invalidating the entire dependency tree and causing all dependent projects to rebuild unnecessarily.\r\n\r\nI'm not entirely certain whether this generated type is really required and when it is actually used, and why is it generated in the first place (nothing in the file looks like it couldn't be in a framework type). But if we are generating it, we should always be generating it deterministically, such that the public API surface doesn't flip flop between having this type and not having it.\r\n\r\nSee related: \r\nhttps://github.com/microsoft/msbuild/issues/4217","Url":"https://github.com/dotnet/wpf/issues/2281","RelatedDescription":"Open issue \"MarkupCompilePass2 shouldn't zero GeneratedInternalTypeHelper.g.cs\" (#2281)"},{"Id":"533346782","IsPullRequest":true,"CreatedAt":"2019-12-05T13:34:12","Actor":"dotnet-maestro[bot]","Number":"2280","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191204.4\r\n- **Date Produced**: 12/5/2019 12:59 AM\r\n- **Commit**: 11f1a0bacb2ccee8ff2373df88c8279a05f3db7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19604.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2280","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2280)"},{"Id":"533290734","IsPullRequest":false,"CreatedAt":"2019-12-05T11:36:17","Actor":"weitzhandler","Number":"2279","RawContent":null,"Title":"Provide more information with the ValidationRule","State":"closed","Body":"The `ValidationRule` class allows attaching `ValidationRule`s to a binding in WPF. The limitation with them are that they can only operate on the constant object produced by the binding.\r\n\r\nMy suggestion is that we add another property(s) to them, that provides the current `Binding` or `BindingExpression` as well, and/or maybe additional information about the current DataContext.  \r\n  \r\nThis would allow for more advanced scenarios, such as inter-property validation, or dynamic validation using the object's data annotations attributes.  \r\n\r\nI know the immediate response is \"use `INotifyDataErrorInfo`, but sometimes you just need to bind directly to the POCO model and can't or don't want to implement that interface in the model.\r\nHaving those `ValidationRule`s provide further info, would allow creating a general `DataAnnotationsValidationRule` that will retrieve the attributes for that property, without having to contaminate the POCO models with validation logic.","Url":"https://github.com/dotnet/wpf/issues/2279","RelatedDescription":"Closed issue \"Provide more information with the ValidationRule\" (#2279)"},{"Id":"533176238","IsPullRequest":false,"CreatedAt":"2019-12-05T07:33:41","Actor":"dragmz","Number":"2278","RawContent":null,"Title":"TabControl tab get selected when a Button is pressed on a ToolBar","State":"open","Body":".NET Core Version: 3.0 (also .NET Framework 4.7.1 - 4.8 but not 4.6.2)\r\nWindows version: 1903\r\n\r\n1. Create a new WPF App and use the following XAML for the window (no extra code behind):\r\n\r\n````xaml\r\n<Window x:Class=\"WpfApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        Title=\"MainWindow\" Height=\"200\" Width=\"300\">\r\n    <Grid>\r\n        <TabControl>\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n        </TabControl>\r\n    </Grid>\r\n</Window>\r\n````\r\n\r\n2. Run the app and switch to the second Tab\r\n3. Switch back to the first Tab and press Button\r\n\r\nThe TabControl changes the currently selected tab to the second tab while it's expected to stay on the first tab:\r\n\r\n![image](https://i.stack.imgur.com/Q9sDH.gif)\r\n\r\nA workaround is to set focused element for the Window:\r\n\r\n````xaml\r\n<Window x:Class=\"WpfApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        Title=\"MainWindow\" Height=\"200\" Width=\"300\"\r\n        FocusManager.FocusedElement=\"{Binding ElementName=tabControl}\">\r\n    <Grid>\r\n        <TabControl x:Name=\"tabControl\">\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n            <TabItem Header=\"Tab\">\r\n                <ToolBarTray>\r\n                    <ToolBar>\r\n                        <Button>Button</Button>\r\n                    </ToolBar>\r\n                </ToolBarTray>\r\n            </TabItem>\r\n        </TabControl>\r\n    </Grid>\r\n</Window>\r\n````\r\n","Url":"https://github.com/dotnet/wpf/issues/2278","RelatedDescription":"Open issue \"TabControl tab get selected when a Button is pressed on a ToolBar\" (#2278)"},{"Id":"532875434","IsPullRequest":false,"CreatedAt":"2019-12-05T00:29:00","Actor":"njannink","Number":"2277","RawContent":null,"Title":"After update to VS 16.4 projects stop compiling","State":"closed","Body":"After I updated to 16.4 my wpf projects stopped compiling with the following error:\r\n\r\n_Microsoft.WinFX.targets(225,9): error MC1000: Unknown build error, 'Could not find assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'_\r\n\r\nEverything was working fine in 16.3\r\n\r\nMy project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <RootNamespace>xxx.UI</RootNamespace>\r\n    <AssemblyName>xxx.UI</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n    <PackageReference Include=\"BracketPipe\" Version=\"0.7.7232.28997\" />\r\n    <PackageReference Include=\"DynamicData\" Version=\"6.13.21\" />\r\n    <PackageReference Include=\"Markdig.Wpf\" Version=\"0.3.1\" />\r\n    <PackageReference Include=\"Microsoft.Xaml.Behaviors.Wpf\" Version=\"1.1.3\" />\r\n    <PackageReference Include=\"RtfPipe\" Version=\"1.0.7246.39337\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"Resources\\**\\*.*\" />\r\n    <Resource Include=\"Resources\\**\\*.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Update=\"Properties\\Resources.Designer.cs\">\r\n      <DesignTime>True</DesignTime>\r\n      <AutoGen>True</AutoGen>\r\n      <DependentUpon>Resources.resx</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"Properties\\Resources.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2277","RelatedDescription":"Closed issue \"After update to VS 16.4 projects stop compiling\" (#2277)"},{"Id":"532863848","IsPullRequest":false,"CreatedAt":"2019-12-04T18:39:30","Actor":"scalablecory","Number":"2276","RawContent":null,"Title":"Using a BackgroundVisualHost causes a crash in WPF (example repo available)","State":"open","Body":"_From @adscott1982 on Tuesday, December 3, 2019 5:04:20 PM_\r\n\r\nShowing / hiding UI on a non-main thread dispatcher will cause WPF to crash.\r\n\r\nThis problem is present on .NET Core 3.0, Framework 4.8, 4.7.2 and 4.7.0 and perhaps others.\r\n\r\nUsing the technique in the following blog post used to work, but will now eventually cause a crash in WPF:\r\n\r\nhttp://gettinggui.com/creating-a-busy-indicator-in-a-separate-thread-in-wpf/\r\n\r\nThis issue has only been seen since around September 2019.\r\n\r\nA repo demonstrating the issue is here, and will usually cause the issue within a couple of minutes:\r\n\r\nhttps://github.com/adscott1982/BackgroundUIThreadError\r\n\r\nMy system is:\r\n\r\nWindows 10 Professional 1909\r\nVisual Studio 2019 Professional\r\nNvidia Quadro P400\r\n\r\nThere are various different exception messages that will be shown when the issue presents itself. I will gather up as many as I can and attach them as text files.\r\n\r\n[Catastrophic failure.txt](https://github.com/dotnet/core/files/3917794/Catastrophic.failure.txt)\r\n[internal error in the dot net runtime.txt](https://github.com/dotnet/core/files/3917810/internal.error.in.the.dot.net.runtime.txt)\r\n[render thread failure.txt](https://github.com/dotnet/core/files/3917837/render.thread.failure.txt)\r\n[missing end command.txt](https://github.com/dotnet/core/files/3917839/missing.end.command.txt)\r\n\r\n\r\n_Copied from original issue: dotnet/core#3948_","Url":"https://github.com/dotnet/wpf/issues/2276","RelatedDescription":"Open issue \"Using a BackgroundVisualHost causes a crash in WPF (example repo available)\" (#2276)"},{"Id":"532679890","IsPullRequest":true,"CreatedAt":"2019-12-04T13:29:10","Actor":"dotnet-maestro[bot]","Number":"2275","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191203.4\r\n- **Date Produced**: 12/4/2019 1:04 AM\r\n- **Commit**: 9078ec67020253a103fed694528f6093ba165a8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19603.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2275","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2275)"},{"Id":"532573416","IsPullRequest":false,"CreatedAt":"2019-12-04T10:00:36","Actor":"olivegamestudio","Number":"2274","RawContent":null,"Title":"Updating to 16.4 from 16.3.x causes build issues with WPF project file.","State":"open","Body":"When building a WPF project the following error is shown, this built fine in the last 16.3.x version that was released.\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\targets\\Microsoft.WinFX.targets(225,9): error MC1000: Unknown build error, 'Could not find assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'\r\n\r\nThe project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <TargetFramework>net461</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <Platforms>x86</Platforms>\r\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\r\n    <Version>1.0.0</Version>\r\n    <Description></Description>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <ApplicationIcon />\r\n    <StartupObject />\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2274","RelatedDescription":"Open issue \"Updating to 16.4 from 16.3.x causes build issues with WPF project file.\" (#2274)"},{"Id":"532298026","IsPullRequest":false,"CreatedAt":"2019-12-03T22:06:04","Actor":"vatsan-madhavan","Number":"2273","RawContent":null,"Title":"Happy Holidays (aka Dec Update for WPF on .NET Core )","State":"open","Body":"## Happy Holidays (aka Dec Update for WPF on .NET Core )\r\n\r\nWe recently announced [.NET Core 3.0.1](https://devblogs.microsoft.com/dotnet/net-core-november-2019/). Although this is a small update, it has significant bug-fixes. We also just released [.NET Core 3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1), which will be an LTS release. \r\n\r\nSince our [last update](https://github.com/dotnet/wpf/issues/1731), the WPF team has fixed several bugs and has started work that will continue onto the next year. \r\n\r\nThematically, the work we have been doing over the past several weeks can be categorized into improvements in the following focus areas:\r\n\r\n- High DPI \r\n- Accessibility \r\n- SDK\r\n- [WPF Samples](https://github.com/Microsoft/WPF-Samples)\r\n\r\n\r\n### High DPI \r\n\r\nAll issues noted below assume that applications are [manifested for high-DPI](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/mt846517(v%3Dvs.85)). \r\n\r\n- When moving applications from one monitor to another, the insertion caret sometimes disappears. (https://github.com/dotnet/wpf/issues/1774). \r\n  - @SamBent found that the OS doesn't scale `SPI_GETCARETWIDTH` like it does with other metrics, and added a [fix](https://github.com/dotnet/wpf/pull/1949) to scale it appropriately before using it in WPF. \r\n- Sometimes, Context Menus fail to be displayed correctly, aren't displayed at all (https://github.com/dotnet/wpf/issues/2088); or seemingly lose their DataContext (https://github.com/dotnet/wpf/issues/2172). \r\n  - We found that a recent change inherited from .NET 4.8 had called into a helper method to destroy an HWND which also performed additional work and resulted in unexpected side-effects. It was [fixed](https://github.com/dotnet/wpf/pull/2097) by limiting the scope of the work done to destroy the HWND.\r\n- Applications that host native windows via `HwndHost` in a mixed-DPI context (i.e., the `HwndHost` hosted window is marked as `DPI_AWARENESS_CONTEXT_SYSTEMAWARE`, for e.g.), sometimes crash with `KeyNotFoundException` (https://github.com/dotnet/wpf/issues/2089)\r\n  - The full explanation of the root-cause and the fix can be found at https://github.com/dotnet/wpf/pull/2100. \r\n\r\n### SDK\r\n\r\n- We missed including a few important types like `ObservableCollection` in our reference-assemblies in the 3.0.100 SDK (https://github.com/dotnet/wpf/issues/1964). We appreciate the help of all the community members who brought this to our attention, and your patience with us while we worked on getting a fix out. \r\n  - @rladuca has since fixed this via https://github.com/dotnet/wpf/pull/2011 and the 3.0.101 SDK should have a complete set of API reference surface. \r\n- As part of porting WPF to .NET Core, we built an updated version of the markup compiler (which is contained in PresentationBuildTasks.dll). Although it is largely similar to the one that ships with .NET Framework, there are significant differences as well. This new version of PresentationBuildTasks.dll ships with the .NET Core SDK. In fact, there are copies of the DLL that we ship with the `Microsoft.NET.Sdk.WindowsDEsktop` SDK - `tools\\net472\\PresentationBuildTasks.dll` used by MSBuild and Visual Studio, and `tools\\netcoreapp2.1\\PresentationBuildTasks.dll` used by `dotnet` builds. @ryalanms found during internal testing that the SDK was not correctly using `tools\\net472\\PresentationBuildTasks.dll`, and was instead incorrectly utilizing the .NET Framework's copy of `PresentationBuildTasks.dll` (typically found under `%windir%\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\WPF`). https://github.com/dotnet/wpf/issues/1998\r\n  - @vatsan-madhavan fixed this via https://github.com/dotnet/wpf/issues/1998, and had much help from @rainersigwald, @nguerrera and @ryalanms . We learned that `UsingTask` in MSBuild is a 'first-one-wins' construct (https://github.com/MicrosoftDocs/visualstudio-docs/pull/4040). \r\n  - For those of you used to seeing `WinFX.targets` in your MSBuild logs, you'll start seeing a matching `WinFX.props` now! \r\n- WPF .NET Core application templates were missing `[ThemeInfoAttribute]` out of the box https://github.com/dotnet/wpf/issues/1699. \r\n  - This is now [fixed](https://github.com/dotnet/wpf/pull/2005) and will become available in the 3.1 SDK. \r\n- Sometimes, WPF projects fail to build correctly in Visual Studio, with the following error: `Error: ‘CS0103 - The name ‘InitializeComponent’ does not exist in the current context`. https://github.com/dotnet/wpf/issues/1915. \r\n  - @davidwengier contributed a fix for this (https://github.com/dotnet/wpf/pull/1895) and it will also be available in .NET Core 3.1 SDK. \r\n- .NET Core SDK is designed to reference WPF assemblies as a _set_. We either reference the 'WPF', 'WinForms' or the full profile depending on the values of *UseWpf* and *UseWindowsForms* properties in a `Microsoft.NET.WindowsDesktop.SDK` project. In any of these configurations, all WPF assemblies are referenced together, which includes WPF's *theme assemblies*:\r\n  - `PresentationFramework.Aero`\r\n  - `PresentationFramework.Aero2`\r\n  - `PresentationFramework.AeroLite`\r\n  - `PresentationFramework.Classic`\r\n  - `PresentationFramework.Luna`\r\n  - `PresentationFramework.Royale`\r\n  \r\n  These assemblies are unusual in one particular way - they contain the _same types_ in them (albeit with different theme resources). Referencing more than one of these assemblies would make it impractical to access the types within them programmatically - since the compiler would be unable to decide how to disambiguate between the referenced assemblies. \r\n  \r\n  See https://github.com/dotnet/wpf/issues/765\r\n  \r\n  We worked with the SDK team to evaluate different options, but  ultimately decided that directly solving this in the SDK was not within the scope of 3.0 or 3.1. We believe that the number of affected projects would be small, and they can leverage a workaround that we have proposed [here](https://github.com/dotnet/wpf/issues/765#issuecomment-555163388)\r\n  \r\n  We will continue to listen to customer feedback and revisit this in .NET 5 if we learn that our current recommendation is not meeting the needs of our customers. \r\n\r\n### Accessibility \r\n\r\n- When applying _High Contrast Black_ theme, button selection is not visible. (https://github.com/dotnet/wpf/issues/1458)\r\n  - @arpitmathur fixed this via https://github.com/dotnet/wpf/pull/2092. You can see the before vs. after difference. \r\n\r\n  - Before vs. After:\r\n    - ![](https://user-images.githubusercontent.com/5456126/65924723-e6ecda80-e3a2-11e9-860d-66c72212c0e0.png) \r\n    - ![](https://user-images.githubusercontent.com/5456126/65924964-c709e680-e3a3-11e9-8eab-fd1016e4c3b3.png)\r\n\r\n- Screen Reader read incorrect values for number of menu items, and calculate their positions incorrectly. This can result in incorrect announcements. https://github.com/dotnet/wpf/issues/1467\r\n  - This was also fixed by @arpitmathur in https://github.com/dotnet/wpf/pull/2090\r\n  \r\n### WPF Samples \r\n\r\n- We have archived the [.NET Framework branch](https://github.com/microsoft/WPF-Samples/tree/netframework) of the [WPF Samples](https://github.com/microsoft/WPF-Samples) repo, and have enabled the master branch to build on .NET Core 3.0 by default. \r\n- We have also now enabled PR builds on this repo, and worked through the backlog of PR's. \r\n- We [recently added](https://github.com/microsoft/WPF-Samples/pull/112) support for the *Samples Browser* at https://docs.microsoft.com/samples. \r\n  - Much thanks to _Dan Delimarschi_(@docs-product) for helping us through this process. \r\n  - Most of these samples can now be discovered from https://docs.microsoft.com/en-us/samples/browse/\r\n \r\n\r\nOver the next couple of months, the WPF team will be identifying a small set of samples that illustrate end-to-end applications, and improving them to showcase how Accessibility best-practices can be followed when building WPF apps. We hope to produce improved samples that would complement tools like [Accessiblity Insights for Windows](https://accessibilityinsights.io/docs/en/windows/overview) and our [developer guidelines](https://developer.microsoft.com/en-us/windows/accessible-apps). \r\n\r\n### Open Sourcing \r\n\r\nWe haven't forgotten about the open-sourcing of native binaries. \r\n\r\nThere has been much ongoing work to vet the sources for IP, security issues etc. - and make appropriate changes before they can be published on GitHub.  We have been working on it and we will share more in the next update. \r\n\r\n#### Happy Holidays\r\n\r\nLate November through early December is the start of holiday season in the US. Many of our colleagues start going on longer vacations around this time. We will be back with our next update in January when full attendance at work resumes. \r\n\r\n**_Happy New Year!_**\r\n\r\n_The WPF Team_ \r\n@dotnet/wpf-developers ","Url":"https://github.com/dotnet/wpf/issues/2273","RelatedDescription":"Open issue \"Happy Holidays (aka Dec Update for WPF on .NET Core )\" (#2273)"},{"Id":"531978838","IsPullRequest":true,"CreatedAt":"2019-12-03T13:29:18","Actor":"dotnet-maestro[bot]","Number":"2272","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191202.20\r\n- **Date Produced**: 12/3/2019 1:20 AM\r\n- **Commit**: 391eb59c42bd7281f04bdf87f124649aa2368a27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19602.20\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2272","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2272)"},{"Id":"531595384","IsPullRequest":true,"CreatedAt":"2019-12-02T23:01:18","Actor":"SamBent","Number":"2271","RawContent":null,"Title":"TreeView scroll hang","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nCertain scrolling operations cause TreeView to hang.  There are two causes:\r\n  1. Floating-point catastrophic cancellation while detecting an element’s position within the viewport\r\n  2. Inappropriate “offset replacement” when filling the “before” cache.   (Internal concepts, I’d need a whiteboard to explain fully.)\r\n\r\nCustomer Impact \r\n\r\nHang. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.7 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #1962\r\nWPF TreeView, virtualization, scroll, freeze ","Url":"https://github.com/dotnet/wpf/pull/2271","RelatedDescription":"Open PR \"TreeView scroll hang\" (#2271)"},{"Id":"531587559","IsPullRequest":true,"CreatedAt":"2019-12-02T22:44:36","Actor":"SamBent","Number":"2270","RawContent":null,"Title":"SharedSizeGroup loop","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nAfter every layout pass, a SharedSizeGroup re-evaluates its  shared size and updates the state of its constituent ColumnDefinitions.  The  goal is to mark the \"long-pole\" definitions (the largest ones in the group), and  to identify Grids that need to be remeasured.  The logic for this is flawed in  several ways;  both goals can fail in either direction (false positive or false  negative).   These flaws usually result in redundant layout work - the Grids get  measured twice, with the mistakes in the second pass cancelling those in in the  first - but correct layout results.  But in some cases they lead to an infinite  cycle of re-layout;  the app hangs.   In the customer's scenario this happens  when  \r\na. the Grids are within the scope of a ScrollViewer with  VerticalScrollbarVisibility=\"Auto\"  \r\nb. there are more than 157 Grids (the  threshold for coalescing pending measure tasks into one task at the root)   \r\nc. the minimum width of a non-long-pole Grid increases, away from the shared column\r\n\r\nCustomer Impact \r\n\r\nHang. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.5.2 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #2222\r\nHang during layout when using SharedSizeGroup","Url":"https://github.com/dotnet/wpf/pull/2270","RelatedDescription":"Open PR \"SharedSizeGroup loop\" (#2270)"},{"Id":"531506248","IsPullRequest":true,"CreatedAt":"2019-12-02T20:02:45","Actor":"SamBent","Number":"2269","RawContent":null,"Title":"Ribbon focus war","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nAn app that programmatically disables a RibbonMenuButton and replaces its  menu items with new ones can cause a focus war leading to infinite recursion and  StackOverflow.  This can happen if the user presses the toggle button (which  opens the menu dropdown) and drags the mouse over the dropdown, and the  programmatic disable/replace occurs before the user releases the mouse  button.\r\n\r\nCustomer Impact \r\n\r\nCrash. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.7 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #2220\r\nStackOverflow due to focus war in RibbonMenuButton","Url":"https://github.com/dotnet/wpf/pull/2269","RelatedDescription":"Open PR \"Ribbon focus war\" (#2269)"},{"Id":"531123162","IsPullRequest":true,"CreatedAt":"2019-12-02T13:40:25","Actor":"dotnet-maestro[bot]","Number":"2268","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191201.9\r\n- **Date Produced**: 12/1/2019 11:58 PM\r\n- **Commit**: 5f6057269b70d3d4eaaea18816b555bcab729d50\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19601.9\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2268","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2268)"},{"Id":"530777435","IsPullRequest":false,"CreatedAt":"2019-12-01T18:56:41","Actor":"keelerjr12","Number":"2267","RawContent":null,"Title":"Clearing Bound ObservableCollection causes System.InvalidOperationException: 'Added item does not appear at given index '0'.'","State":"open","Body":"When calling ObservableCollection.Clear() and then re-loading (i.e. adding) items back into ObservableCollection, a System.InvalidOperationException:  'Added item does not appear at given index '0'.' gets thrown. I have provided a snippet of my code below. I have indicated where the issue is.\r\n\r\n```\r\n        private void TransactionCreated(object? sender, EventArgs e)\r\n        {\r\n            if (!(sender is TransactionRowViewModel row))\r\n                return;\r\n\r\n            if (row.Account == null)\r\n                    return;\r\n\r\n            var id = _transactionService.Create(row.Date, row.Account.Id, _accountId, row.Value, row.Description);\r\n            row.TransactionId = id;\r\n\r\n            //Transactions = new ObservableCollection<TransactionRowViewModel>();\r\n            Transactions.Clear();\r\n            LoadTransactions(); \r\n\r\n            // ISSUE: After TransactionCreated returns, exception is thrown!\r\n        }\r\n```\r\n\r\nAnd here is the stack trace:\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Added item does not appear at given index '0'.\r\n   at System.Windows.Data.ListCollectionView.AdjustBefore(NotifyCollectionChangedAction action, Object item, Int32 index)\r\n   at System.Windows.Data.ListCollectionView.CommitNew()\r\n   at System.Windows.Controls.ItemCollection.System.ComponentModel.IEditableCollectionView.CommitNew()\r\n   at System.Windows.Controls.DataGrid.CommitRowItem()\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(ExecutedRoutedEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandBinding.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandManager.FindCommandBinding(Object sender, RoutedEventArgs e, ICommand command, Boolean execute)\r\n   at System.Windows.Input.CommandManager.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.UIElement.OnExecutedThunk(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.RoutedCommand.ExecuteImpl(Object parameter, IInputElement target, Boolean userInitiated)\r\n   at System.Windows.Input.RoutedCommand.Execute(Object parameter, IInputElement target)\r\n   at System.Windows.Controls.DataGrid.EndEdit(RoutedCommand command, DataGridCell cellContainer, DataGridEditingUnit editingUnit, Boolean exitEditMode)\r\n   at System.Windows.Controls.DataGrid.CommitAnyEdit()\r\n   at System.Windows.Controls.DataGrid.OnEnterKeyDown(KeyEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnKeyDown(KeyEventArgs e)\r\n   at System.Windows.UIElement.OnKeyDownThunk(Object sender, KeyEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawKeyboardActions actions, Int32 scanCode, Boolean isExtendedKey, Boolean isSystemKey, Int32 virtualKey)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.ProcessKeyAction(MSG& msg, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.CriticalTranslateAccelerator(MSG& msg, ModifierKeys modifiers)\r\n   at System.Windows.Interop.HwndSource.OnPreprocessMessage(Object param)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at System.Windows.Interop.HwndSource.OnPreprocessMessageThunk(MSG& msg, Boolean& handled)\r\n   at System.Windows.Interop.ComponentDispatcherThread.RaiseThreadMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n```","Url":"https://github.com/dotnet/wpf/issues/2267","RelatedDescription":"Open issue \"Clearing Bound ObservableCollection causes System.InvalidOperationException: 'Added item does not appear at given index '0'.'\" (#2267)"},{"Id":"530776700","IsPullRequest":true,"CreatedAt":"2019-12-01T18:52:43","Actor":"dotnet-maestro[bot]","Number":"2266","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.13\r\n- **Date Produced**: 11/28/2019 1:16 AM\r\n- **Commit**: 258bdd135d0e159a301545d53bc1c0ffb438d54c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19577.13\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2266","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2266)"},{"Id":"530776625","IsPullRequest":true,"CreatedAt":"2019-12-01T18:52:33","Actor":"dotnet-maestro[bot]","Number":"2265","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.10\r\n- **Date Produced**: 12/1/2019 6:16 PM\r\n- **Commit**: 076a69fb42b53fca7cd245ecf7c779496a79f59e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-servicing.19577.10\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2265","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#2265)"},{"Id":"530730419","IsPullRequest":true,"CreatedAt":"2019-12-01T13:38:48","Actor":"dotnet-maestro[bot]","Number":"2264","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191130.4\r\n- **Date Produced**: 12/1/2019 12:45 AM\r\n- **Commit**: 4684574d2f9c317ea56158a5c0cac4620a9b1c8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19580.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2264","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2264)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-09T05:30:56.1345669Z","RunDurationInMilliseconds":1124}