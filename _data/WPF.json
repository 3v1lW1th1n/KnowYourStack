{"Data":{"GitHub":{"Issues":[{"Id":"505032496","IsPullRequest":true,"CreatedAt":"2019-10-10T04:50:45","Actor":"dotnet-maestro[bot]","Number":"2030","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191009.11\r\n- **Date Produced**: 10/10/2019 3:31 AM\r\n- **Commit**: 971343425f4e76dfc4b8fccfb87cbca278245fdc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19509.11\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2030","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/winforms\" (#2030)"},{"Id":"505014804","IsPullRequest":true,"CreatedAt":"2019-10-10T04:50:27","Actor":"dotnet-maestro[bot]","Number":"2029","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191009.10\r\n- **Date Produced**: 10/10/2019 3:26 AM\r\n- **Commit**: 01238a98c7ff56f83742971d49273bba001330a9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19509.10\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2029","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2029)"},{"Id":"504945045","IsPullRequest":true,"CreatedAt":"2019-10-09T23:35:24","Actor":"dotnet-maestro[bot]","Number":"2028","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191009.7\r\n- **Date Produced**: 10/9/2019 11:01 PM\r\n- **Commit**: 7efb0efac5263cf3e6eec942c77cbed82f6f78cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19509.7\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2028","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2028)"},{"Id":"504819976","IsPullRequest":true,"CreatedAt":"2019-10-09T18:41:15","Actor":"dotnet-maestro[bot]","Number":"2027","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191009.2\r\n- **Date Produced**: 10/9/2019 6:01 PM\r\n- **Commit**: 6b988939f84529130e7a811598ba25237a5f2de2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19509.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.9 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2027","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2027)"},{"Id":"504810051","IsPullRequest":true,"CreatedAt":"2019-10-09T18:25:50","Actor":"dotnet-maestro[bot]","Number":"2026","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191008.10\r\n- **Date Produced**: 10/9/2019 5:52 PM\r\n- **Commit**: 69b4c34baf55d992f0a9c8888043748c73f496a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19508.10\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2026","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2026)"},{"Id":"504761373","IsPullRequest":false,"CreatedAt":"2019-10-09T16:30:39","Actor":"rladuca","Number":"2025","RawContent":null,"Title":"ClearType TextRenderingMode uses incorrect DWrite rendering mode","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: All\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nWhen rendering text, `CGlyphRunResource::GetDWriteRenderingMode` is called in order to get the appropriate rendering mode to pass to DWrite in` CGlyphRunResource::CreateRealization` for a call to `pIDWriteFactoryNoRef->CreateGlyphRunAnalysis`.\r\n\r\nThe analysis is what gives WPF the glyph bitmap(s) it uses to render to the screen.  The problem comes in some special cases in `CGlyphRunResource::GetDWriteRenderingMode`.  In this function, WPF overrides what the recommended rendering mode would be from DWrite with `DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL`. DWrite, if given the choice, would use `DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC` for this font and emsize.\r\n\r\nWhat this means is the algorithm used to render the font is not symmetric, as in the anti-aliasing algorithm is only performed in the horizontal and not the vertical direction.  Due to this, fine features in the horizontal can be sampled out if the font itself is optimized for symmetric anti-aliasing.  \r\n\r\nThis bug was originally found while investigating an issue with the rendering of `MS Mincho` after the installation of [KB4482887](https://support.microsoft.com/en-us/help/4482887/windows-10-update-kb4482887).  The application was setting `TextOptions.TextRenderingMode` to `ClearType`.  According to the [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.textrenderingmode?view=netframework-4.8):\r\n\r\n```\r\nText is rendered with the most appropriate `ClearType` rendering algorithm based on the layout mode that was used to format the text.\r\n```\r\n\r\nThis is simply not true for all fonts as described above.  WPF should, in this case, simply ask DWrite what the appropriate rendering mode is and use the closest `ClearType` equivalent to that ([see here](https://docs.microsoft.com/en-us/windows/win32/api/dwrite/ne-dwrite-dwrite_rendering_mode)).  There are other special cases that should be preserved, but this particular one needs fixing.\r\n\r\nNote that applications that do not set `TextOptions.TextRenderingMode` to `ClearType` will not see this problem as the default mode is `Auto`.  In `Auto`, WPF will ask DWrite what the appropriate mode to use is.\r\n\r\n[Original internal bug for reference](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/979556)","Url":"https://github.com/dotnet/wpf/issues/2025","RelatedDescription":"Open issue \"ClearType TextRenderingMode uses incorrect DWrite rendering mode\" (#2025)"},{"Id":"504610896","IsPullRequest":true,"CreatedAt":"2019-10-09T13:13:28","Actor":"dotnet-maestro[bot]","Number":"2023","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191008.14\r\n- **Date Produced**: 10/9/2019 6:57 AM\r\n- **Commit**: f2bc6a16a6fbf1898b1fe161e94af9e82eba383a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha1.19508.14\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2023","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2023)"},{"Id":"504617884","IsPullRequest":false,"CreatedAt":"2019-10-09T12:25:32","Actor":"zlatanov","Number":"2024","RawContent":null,"Title":"Expander control is not narrated","State":"open","Body":"* .NET Core Version: 3.0.100\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nThe problem has already been described here: #1015. What I don't understand in the solution there is why though the expander is exposed only when not in ItemsHost Panel.\r\n\r\nhttps://github.com/dotnet/wpf/blob/0166abb3a5e4ed8bbda643af98b7e1a604959c4c/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Automation/Peers/GroupItemAutomationPeer.cs#L148-L161\r\n\r\nIf I have a DataGrid with grouping, the headers of the groups are left out from the UI Automation tree and thus are practically inaccessible.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/2024","RelatedDescription":"Open issue \"Expander control is not narrated\" (#2024)"},{"Id":"504438772","IsPullRequest":false,"CreatedAt":"2019-10-09T06:15:50","Actor":"yyjdelete","Number":"2022","RawContent":null,"Title":"`System.Printing` and `DirectWriteForwarder` has reference of two different version of `netstandard` in metadata?","State":"open","Body":"* .NET Core Version: 3.0.0\r\n\r\nI don't know whether it's an bug or not. And didn't see any exception for this.\r\n\r\nBut it's strange that when you open `System.Printing` or `DirectWriteForwarder` with ILSpy or something else, you can see it reference to both `netstandard` 2.0 and 2.1 in the same Assembly, which never happen for other assemblies.","Url":"https://github.com/dotnet/wpf/issues/2022","RelatedDescription":"Open issue \"`System.Printing` and `DirectWriteForwarder` has reference of two different version of `netstandard` in metadata?\" (#2022)"},{"Id":"504364999","IsPullRequest":true,"CreatedAt":"2019-10-09T02:10:31","Actor":"dotnet-maestro[bot]","Number":"2021","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191008.9\r\n- **Date Produced**: 10/9/2019 1:38 AM\r\n- **Commit**: 239cbc36fda9dd106ebd41782aeb9172a69f826d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19508.9\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.10 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2021","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2021)"},{"Id":"504328808","IsPullRequest":true,"CreatedAt":"2019-10-08T23:35:34","Actor":"dotnet-maestro[bot]","Number":"2020","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191008.2\r\n- **Date Produced**: 10/8/2019 11:05 PM\r\n- **Commit**: 99d29f8c191a5af83dd2e2b77ea054dd3d55e3b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19508.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.5 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2020","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2020)"},{"Id":"504319859","IsPullRequest":true,"CreatedAt":"2019-10-08T23:05:28","Actor":"dotnet-maestro[bot]","Number":"2019","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191008.3\r\n- **Date Produced**: 10/8/2019 10:35 PM\r\n- **Commit**: 033547c384298903186169828c6ae59646790431\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19508.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2019","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2019)"},{"Id":"504316817","IsPullRequest":true,"CreatedAt":"2019-10-08T22:55:05","Actor":"dotnet-maestro[bot]","Number":"2018","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191008.4\r\n- **Date Produced**: 10/8/2019 10:28 PM\r\n- **Commit**: afa6ca4da2ad451010b8fdeb4c8bad751d53c88f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19508.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.10 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2018","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2018)"},{"Id":"504296085","IsPullRequest":true,"CreatedAt":"2019-10-08T22:00:35","Actor":"dotnet-maestro[bot]","Number":"2017","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 9:25 PM\r\n- **Commit**: acecf2cfbeb5412ac3bd38b6ecbacd4c552c04c6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2017","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2017)"},{"Id":"504279370","IsPullRequest":true,"CreatedAt":"2019-10-08T21:15:32","Actor":"dotnet-maestro[bot]","Number":"2016","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191007.3\r\n- **Date Produced**: 10/8/2019 8:42 PM\r\n- **Commit**: 2ccc019404ad8dc1efd4a6846b7b2128fb26d36e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19507.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.5 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19504.7 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2016","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2016)"},{"Id":"504017630","IsPullRequest":false,"CreatedAt":"2019-10-08T16:12:59","Actor":"TonyValenti","Number":"2015","RawContent":null,"Title":"error PS0264: Could not load file or assembly PresentationFramework....","State":"closed","Body":"Hi all,\r\nI'm running into an interesting issue and I'm hoping you can help me out.  I'm using:\r\n.NET Core 3.0\r\nWPF App.\r\n\r\nWhen I try to build one of my WPF libraries, I get the following error:\r\n1>C:\\Users\\TonyValenti\\Source\\Repos\\MediatedCommunications\\AlphaDrive\\AlphaDrive.FileSystem.Windows\\AlphaDrive.FileSystem.Windows.csproj : error PS0264: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified. Build your project with detailed verbosity to see the assembly loading log.\r\n\r\nWhen I do, I see a message like this:\r\n1>    Encountered conflict between 'Platform:PresentationFramework.resources.dll' and 'Platform:PresentationFramework.resources.dll'. Could not determine winner due to equal file and assembly versions.\r\n\r\nAny ideas on the cause?","Url":"https://github.com/dotnet/wpf/issues/2015","RelatedDescription":"Closed issue \"error PS0264: Could not load file or assembly PresentationFramework....\" (#2015)"},{"Id":"504008892","IsPullRequest":true,"CreatedAt":"2019-10-08T12:31:09","Actor":"dotnet-maestro[bot]","Number":"2014","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191007.6\r\n- **Date Produced**: 10/8/2019 12:16 AM\r\n- **Commit**: 946767ee69b81f5e96c2e9b0065347d7f806ce6e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha1.19507.6\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2014","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2014)"},{"Id":"503893864","IsPullRequest":false,"CreatedAt":"2019-10-08T08:11:20","Actor":"vsfeedback","Number":"2013","RawContent":null,"Title":"Ribbon expand/collapse issue with Managed Addin Framework MAF.NET","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/764522/ribbon-expandcollapse-issue-with-managed-addin-fra.html)._\n\n---\n<p>I'm working on an Windows Presentation Foundation (WPF) addin-application, for Addins, we are using Managed Addin Framework MAF.NET. Addin projects are WPF applications and are responsible to generate their ribbon menu and content. The problem I'm facing is that when the Ribbon control is transformed through MAF pipeline using FrameworkElementAdapters.ElementToContractAdapter and then back to FrameworkElement using FrameworkElementAdapters.ContractToElementAdapter, it loses &quot; some&quot; functionality. I want to host this converted Ribbon on the Host side and when I collapse/expand the ribbon control, the parent grid doesn't reclaim the height. Expected behavior is that when the ribbon is collapsed the RowHeight of the Grid's RowDefinition should collapse and when the ribbon gets expanded, the RowDefinition should also expand. The issue is with Expandable controls, like Ribbon and Expander. Images are attached with the post for Desired and Undesired behavior, and a sample project is also attached herewitht he post re-produce the issue quickly. Sample project to reproduce the issue is attached with the post.</p> <p>Issue is described <a href=\"https://social.msdn.microsoft.com/Forums/vstudio/en-US/92d931fd-68aa-4c11-bf13-ca9a0797733b/ribbon-control-issue-when-passed-through-managed-addin-framework-maf-pipeline?forum=wpf\" target=_blank> here</a> too.</p>\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/2013","RelatedDescription":"Open issue \"Ribbon expand/collapse issue with Managed Addin Framework MAF.NET\" (#2013)"},{"Id":"503734617","IsPullRequest":false,"CreatedAt":"2019-10-07T23:00:27","Actor":"terrajobst","Number":"2012","RawContent":null,"Title":"Provide an equivalent for the WinForms Screen class","State":"open","Body":"WPF generally doesn't include Windows Forms (the developer has to reference WinForms explicitly). We do this (among other reasons) so that we don't pollute IntelliSense with two UI stacks.\r\n\r\nOne common reason why people end up having to reference WinForms, so that they can enumerate screens and put windows on specific screens. But even with WinForms, the APIs aren't exactly super usable from WPF, due to mismatches in primitive types. It would be good if WPF would provide an equivalent type.","Url":"https://github.com/dotnet/wpf/issues/2012","RelatedDescription":"Open issue \"Provide an equivalent for the WinForms Screen class\" (#2012)"},{"Id":"503640949","IsPullRequest":true,"CreatedAt":"2019-10-07T19:21:07","Actor":"rladuca","Number":"2011","RawContent":null,"Title":"Fix missing type forwards in reference assemblies (3.0 port)","State":"open","Body":"Related to #1964 \r\n\r\nPR:\r\n\t5.0: https://github.com/dotnet/wpf/pull/1986\r\n\t3.1: https://github.com/dotnet/wpf/pull/2010\r\n\t3.0: https://github.com/dotnet/wpf/pull/2011\r\n\r\nDescription \r\n\r\nSome reference assemblies (WindowsBase, System.Xaml) were missing type forwards. This adds them back and rebaselines the ApiCompat (especially against 4.8) to be correct. This also fixes some issues in the PresentationFramework reference assembly that might have allowed instances of this problem to show up in the future.\r\n\r\nThe types in question are:\r\n\tSystem.Windows.Markup.ValueSerializerAttribute\r\n\tSystem.Collections.ObjectModel.ObservableCollection\r\n\tSystem.Collections.ObjectModel.ReadOnlyObservableCollection\r\n\tSystem.Collections.Specialized.INotifyCollectionChanged\r\n\tSystem.Collections.Specialized.NotifyCollectionChangedAction\r\n\tSystem.Collections.Specialized.NotifyCollectionChangedEventArgs\r\n\tSystem.Collections.Specialized.NotifyCollectionChangedEventHandler\r\n\r\nCustomer Impact \r\n\r\nRemoves adoption blocker for WPF developers using older (.NET 3.5) libraries that referenced the types from WindowsBase or System.Xaml.\r\n\r\nRegression \r\n\r\nRegression from .NET 4.8 behavior.\r\n\r\nRisk \r\n\r\nLow, this is restoring the correct forwarding behavior that already exists in .NET 4.8. \r\n","Url":"https://github.com/dotnet/wpf/pull/2011","RelatedDescription":"Open PR \"Fix missing type forwards in reference assemblies (3.0 port)\" (#2011)"},{"Id":"503640604","IsPullRequest":true,"CreatedAt":"2019-10-07T19:20:23","Actor":"rladuca","Number":"2010","RawContent":null,"Title":"Fix missing type forwards in reference assemblies (3.1 port)","State":"open","Body":"Related to #1964 \r\n\r\nPR:\r\n\t5.0: https://github.com/dotnet/wpf/pull/1986\r\n\t3.1: https://github.com/dotnet/wpf/pull/2010\r\n\t3.0: https://github.com/dotnet/wpf/pull/2011\r\n\r\nDescription \r\n\r\nSome reference assemblies (WindowsBase, System.Xaml) were missing type forwards. This adds them back and rebaselines the ApiCompat (especially against 4.8) to be correct. This also fixes some issues in the PresentationFramework reference assembly that might have allowed instances of this problem to show up in the future.\r\n\r\nThe types in question are:\r\n\tSystem.Windows.Markup.ValueSerializerAttribute\r\n\tSystem.Collections.ObjectModel.ObservableCollection\r\n\tSystem.Collections.ObjectModel.ReadOnlyObservableCollection\r\n\tSystem.Collections.Specialized.INotifyCollectionChanged\r\n\tSystem.Collections.Specialized.NotifyCollectionChangedAction\r\n\tSystem.Collections.Specialized.NotifyCollectionChangedEventArgs\r\n\tSystem.Collections.Specialized.NotifyCollectionChangedEventHandler\r\n\r\nCustomer Impact \r\n\r\nRemoves adoption blocker for WPF developers using older (.NET 3.5) libraries that referenced the types from WindowsBase or System.Xaml.\r\n\r\nRegression \r\n\r\nRegression from .NET 4.8 behavior.\r\n\r\nRisk \r\n\r\nLow, this is restoring the correct forwarding behavior that already exists in .NET 4.8. \r\n","Url":"https://github.com/dotnet/wpf/pull/2010","RelatedDescription":"Open PR \"Fix missing type forwards in reference assemblies (3.1 port)\" (#2010)"},{"Id":"503630743","IsPullRequest":false,"CreatedAt":"2019-10-07T18:58:54","Actor":"dagood","Number":"2009","RawContent":null,"Title":"Unable to load DLL 'wpfgfx_cor3.dll' or one of its dependencies","State":"open","Body":"@pieterphilippaerts commented on [Sat Oct 05 2019](https://github.com/dotnet/core/issues/3553)\n\nI've written a .NET Core 3 WPF application and it works perfectly on my development machine (Windows 10, x64). Unfortunately, when I try to deploy it on my test computer (Windows 8.1, x86) I get an error.\r\n\r\nWhen I start the application, it starts executing (it creates a few files and directories) and I also see the splash screen. However, when the main window of the application gets loaded, I get the following error:\r\n\r\n> System.Windows.Markup.XamlParseException: 'Add value to collection of type 'System.Windows.Controls.UIElementCollection' threw an exception.' Line number '17' and line position '10'.\r\n>  ---> System.DllNotFoundException: Unable to load DLL 'wpfgfx_cor3.dll' or one of its dependencies: The specified procedure could not be found. (0x8007007F)\r\n>    at System.Windows.Media.MediaContextNotificationWindow.MilContent_AttachToHwnd(IntPtr hwnd)\r\n>    at System.Windows.Media.MediaContextNotificationWindow..ctor(MediaContext ownerMediaContext)\r\n>    at System.Windows.Media.MediaContext..ctor(Dispatcher dispatcher)\r\n>    at System.Windows.Media.MediaContext.From(Dispatcher dispatcher)\r\n>    at System.Windows.Media.Visual.VerifyAPIReadWrite()\r\n>    at System.Windows.Media.VisualCollection.Add(Visual visual)\r\n>    at System.Windows.Controls.UIElementCollection.AddInternal(UIElement element)\r\n>    at System.Windows.Controls.UIElementCollection.Add(UIElement element)\r\n>    at System.Windows.Controls.UIElementCollection.System.Collections.IList.Add(Object value)\r\n>    at System.Xaml.Schema.XamlTypeInvoker.AddToCollection(Object instance, Object item)\r\n>    at MS.Internal.Xaml.Runtime.ClrObjectRuntime.Add(Object collection, XamlType collectionType, Object value, XamlType valueXamlType)\r\n>    --- End of inner exception stack trace ---\r\n>    at System.Windows.Markup.XamlReader.RewrapException(Exception e, IXamlLineInfo lineInfo, Uri baseUri)\r\n>    at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\r\n>    at System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\r\n>    at System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream)\r\n>    at System.Windows.Application.LoadComponent(Object component, Uri resourceLocator)\r\n>    at PieterP.ScoreSheet.GUI.Views.MainWindow.InitializeComponent() in C:\\Users\\skydr\\source\\repos\\scoresheet\\src\\gui\\PieterP.ScoreSheet.GUI\\Views\\MainWindow.xaml:line 1\r\n>    at PieterP.ScoreSheet.GUI.Views.MainWindow..ctor() in C:\\Users\\skydr\\source\\repos\\scoresheet\\src\\gui\\PieterP.ScoreSheet.GUI\\Views\\MainWindow.xaml.cs:line 26\r\n>    at PieterP.ScoreSheet.GUI.App.OnStartup(StartupEventArgs e) in C:\\Users\\skydr\\source\\repos\\scoresheet\\src\\gui\\PieterP.ScoreSheet.GUI\\App.xaml.cs:line 52\r\n>    at System.Windows.Application.<.ctor>b__1_0(Object unused)\r\n>    at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n>    at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\nApparently, the problem is caused because it cannot load wpfgfx_cor3.dll, which sounds like one of the runtime dlls. I don't know whether the problem is Windows 8.1 or x86 (or the combination), or something else... In any case, the .NET Core Runtime and the .NET Core Desktop pack both installed correctly.\r\n\n\n---\n\n@scalablecory commented on [Mon Oct 07 2019](https://github.com/dotnet/core/issues/3553#issuecomment-539120227)\n\n@grubioe @dagood \n\n---\n\n@dagood commented on [Mon Oct 07 2019](https://github.com/dotnet/core/issues/3553#issuecomment-539156006)\n\nMoving to WPF. (Unfortunately not the GitHub way because I don't have write permission there. 😕)\n\n","Url":"https://github.com/dotnet/wpf/issues/2009","RelatedDescription":"Open issue \"Unable to load DLL 'wpfgfx_cor3.dll' or one of its dependencies\" (#2009)"},{"Id":"503610331","IsPullRequest":true,"CreatedAt":"2019-10-07T18:30:36","Actor":"dotnet-maestro[bot]","Number":"2008","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191007.2\r\n- **Date Produced**: 10/7/2019 5:57 PM\r\n- **Commit**: 0c10b8c36b5325d18a6358e536a21a793dedd65b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19507.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19503.1 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19502.5 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2008)"},{"Id":"503225513","IsPullRequest":false,"CreatedAt":"2019-10-07T04:23:42","Actor":"vsfeedback","Number":"2007","RawContent":null,"Title":"DragDrop.DoDragDrop not working in wpf , when drag to windows explorer in windows10","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/759425/dragdropdodragdrop-not-working-in-wpf-when-drag-to.html)._\n\n---\n<p>i am using below code to drag and drop the file or folder to windows explorer, it works perfectly for winforms but fails for wpf. </p> <p>In WPF the code not work in windows 10 </p><p></p><p> string path = @&quot;C:\\Rajesh\\documents\\bug\\5.07 testing folder drag&quot;;\n            StringCollection collection = new StringCollection() { path };                       \n            string[] files = { path };\n            var data = new DataObject(DataFormats.FileDrop, files);\n            data. SetData(DataFormats.Text, files[0]);\n            // Clipboard.SetData(DataFormats.FileDrop, files);\n            // Perform dragdrop\n            DragDrop.DoDragDrop(this, data, DragDropEffects.Copy);</p> <p class=\"\"></p><p class=\"\"></p>\n</p>\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/2007","RelatedDescription":"Open issue \"DragDrop.DoDragDrop not working in wpf , when drag to windows explorer in windows10\" (#2007)"},{"Id":"502916101","IsPullRequest":true,"CreatedAt":"2019-10-05T19:41:30","Actor":"vatsan-madhavan","Number":"2006","RawContent":null,"Title":"Add `ThemeInfoAttribute` to application project templates","State":"closed","Body":"Fixes #1699, #1966 \r\n\r\n### Description \r\n\r\nAdding `generic.xaml` to a .NET Core application doesn't work out of the box because the default application template doesn't include `ThemeInfoAttribute` the way it used to in .NET Framework.\r\n\r\nThis can create subtle problems like https://github.com/dotnet/wpf/issues/1966\r\n\r\nThis change adds back `ThemeInfoAttribute` that was inadvertently left out of the .NET Core application templates.\r\n\r\n### Customer Impact\r\n\r\n`generic.xaml` is used to supply default styles, often for custom controls etc. For it to function so, the application must have the `ThemeInfoAttribute` set. This was always the case in .NET Framework given the fact that WPF's application template set this attribute by default. \r\n\r\nIn .NET core, we inadvertently dropped this attribute from the application project-templates (they are still correctly retained by the .NET Core _User Control_ and _Custom Control_ project templates). \r\n\r\nThis can certainly be worked-around by a developer by adding an attribute in a `.cs` files, but identifying the cause of app misbehavior (owing to the missing `ThemeInfo` attribute in itself would be a confusing and difficult process. This is a confusion we would very much like to prevent in the ecosystem. \r\n\r\n### Regression \r\n\r\nYes, from .NET Framework.\r\n\r\n### Risk\r\n\r\nLow. (a) Does not impact WPF product (isolated to project templates), and (b) easy to test the locally built project templates. \r\n\r\nNote that the fix to the VB project template in this branch is for completeness' sake only. VB project templates are not enabled in this branch at this time. ","Url":"https://github.com/dotnet/wpf/pull/2006","RelatedDescription":"Closed or merged PR \"Add `ThemeInfoAttribute` to application project templates\" (#2006)"},{"Id":"502771991","IsPullRequest":true,"CreatedAt":"2019-10-05T19:31:01","Actor":"vatsan-madhavan","Number":"2004","RawContent":null,"Title":"Ensure that markup compilation is run for all design time builds","State":"closed","Body":"Port of #1895 \r\nFixes #1915 \r\n\r\n/cc @debonte, @davidwengier \r\n\r\n<hr/>\r\n\r\n### Description\r\n\r\nIn SDK-style projects the project system will combine design time builds together to improve performance, but depending on timing, this can cause issues. If something like the designer asks for output groups, then the build for that could be combined with the build that produces the intellisense file, but getting output groups sets `BuildingProject `to `true`, which in turn prevents WPF's markup-compilation from running.\r\n\r\nThis change works around the issue by allowing the intellisense files to generate irrespective of the value of `BuildingProject `, as long we're doing a design time build.\r\n\r\n### Customer Impact\r\n\r\nDevelopers encountering this problem see the following error: \r\n\r\n```\r\nError: ‘CS0103 - The name ‘InitializeComponent’ does not exist in the current context’\r\n```\r\n\r\nThis is usually persistent and doesn't go away upon rebuilds. It can sometimes be overcome by persistently cleaning the project, deleting intermediate files etc., and rebuilding. \r\n\r\nWe have also been hearing several reports of this on .NET core via //vsfeedback. \r\n\r\n### Regression \r\n\r\nNot a regression. This problem exists in .NET Framework also, but now we understand what's going on and have a fix for this. \r\n\r\n### Risk \r\n\r\nLow risk. \r\nThe fix is very simple, safe and easy to test. It has been in **master**/.NET 5 for a few weeks now. ","Url":"https://github.com/dotnet/wpf/pull/2004","RelatedDescription":"Closed or merged PR \"Ensure that markup compilation is run for all design time builds\" (#2004)"},{"Id":"502915163","IsPullRequest":true,"CreatedAt":"2019-10-05T04:38:15","Actor":"vatsan-madhavan","Number":"2005","RawContent":null,"Title":"Add `ThemeInfoAttribute` to application project templates","State":"open","Body":"Adding `generic.xaml` a .NET Core application doesn't work out of the box because the default application template doesn't include `ThemeInfoAttribute` the way it used to in .NET Framework.\r\n\r\nThis can create unexpected problems like https://github.com/dotnet/wpf/issues/1966\r\n\r\nThis change adds back `ThemeInfoAttribute` that was inadvertently left out of the .NET Core application templates.\r\n\r\nThis needs to be ported to release/3.1\r\n\r\nAddresses #1699, #1966 \r\n\r\n/cc @weltkante, @mysteryx93  ","Url":"https://github.com/dotnet/wpf/pull/2005","RelatedDescription":"Open PR \"Add `ThemeInfoAttribute` to application project templates\" (#2005)"},{"Id":"502749256","IsPullRequest":true,"CreatedAt":"2019-10-04T17:12:19","Actor":"Youssef1313","Number":"2003","RawContent":null,"Title":"Fix typo","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/2003","RelatedDescription":"Open PR \"Fix typo\" (#2003)"},{"Id":"502679961","IsPullRequest":false,"CreatedAt":"2019-10-04T14:47:32","Actor":"muqiuq","Number":"2002","RawContent":null,"Title":"Missing RichTextBox.SelectionFont Property","State":"open","Body":"According to the documentation https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.richtextbox.selectionfont?view=netcore-3.0 RichTextBox.SelectionFont Property sould be available. But I can't find it anywhere. Has this been replaced by something else or is it not yet implemented? ","Url":"https://github.com/dotnet/wpf/issues/2002","RelatedDescription":"Open issue \"Missing RichTextBox.SelectionFont Property\" (#2002)"},{"Id":"502500358","IsPullRequest":true,"CreatedAt":"2019-10-04T09:45:53","Actor":"dotnet-maestro[bot]","Number":"2001","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191004.1\r\n- **Date Produced**: 10/4/2019 8:08 AM\r\n- **Commit**: 1934207dfd7aa570337791a67e4eeec4f6b82265\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19504.1\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2001","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2001)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-10T05:30:55.7365588Z","RunDurationInMilliseconds":637}