{"Data":{"Blog":{"FeedItems":[{"Title":"Testing ASP.NET Core MVC web apps in-memory","PublishedOn":"2017-12-07T17:00:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written and submitted by Javier Calvarro Nelson, a developer on the ASP.NET Core MVC team Testing is an important part of the development process of any app. In this blog post...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/07/testing-asp-net-core-mvc-web-apps-in-memory/","RawContent":null},{"Title":"Configuring HTTPS in ASP.NET Core across different platforms","PublishedOn":"2017-11-29T17:00:12+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As the web moves to be more secure by default, it&#8217;s more important than ever to make sure your websites have HTTPS enabled. And if you&#8217;re going to use HTTPS in production its a good idea...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/29/configuring-https-in-asp-net-core-across-different-platforms/","RawContent":null},{"Title":"Improve website performance by optimizing images","PublishedOn":"2017-11-28T18:02:29+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We all want our web applications to load as fast as possible to give the best possible experience to the users. One of the steps to achieve that is to make sure the images we use are as optimized as...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/28/improve-website-performance-by-optimizing-images/","RawContent":null},{"Title":"Orchard Core Beta 1 released","PublishedOn":"2017-11-21T19:32:10+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This is a guest post by Sebastien Ros on behalf of the Orchard community Two years ago, the Orchard community started developing Orchard on .NET Core. After 1,500 commits, 297,000 lines of code, 127...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/21/orchard-core-beta-annoucement/","RawContent":null},{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null},{"Title":"Creating a Minimal ASP.NET Core Windows Container","PublishedOn":"2017-11-09T16:18:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos One of the benefits of containers is their small size, which allows them to be more quickly deployed and more efficiently packed onto a host than virtual machines...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/09/creating-a-minimal-asp-net-core-windows-container/","RawContent":null},{"Title":"Publishing a Web App to an Azure VM from Visual Studio","PublishedOn":"2017-11-01T22:35:42+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We know virtual machines (VMs) are one of the most popular places to run apps in Azure, but publishing to a VM from Visual Studio has been a tricky experience for some. So, we’re pleased to announce...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/01/publishing-a-web-app-to-an-azure-vm-from-visual-studio/","RawContent":null},{"Title":"Recent updates for publishing","PublishedOn":"2017-10-31T18:18:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have recently added a few interesting features for ASP.NET publishing. The updates include: Container Registry Publish Updates Create publish profile without publishing In this post, we will...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/","RawContent":null},{"Title":"Sharing Configuration in ASP.NET Core SPA Scenarios","PublishedOn":"2017-10-27T15:17:34+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This is a guest post from Mike Rousos ASP.NET Core 2.0 recently released and, with it, came some new templates, including new project templates for single-page applications (SPA) served from an...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6974836671","Type":"IssuesEvent","CreatedAt":"2017-12-12T03:05:08","Actor":"tb-mtg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2305","RelatedDescription":"Opened issue \"ASP.NET Core Web Application Visual Basic (VB)\" (#2305) at aspnet/Home","RelatedBody":"Any idea on when we will be able to create new projects for ASP.NET Core Web Application using Visual Basic?"},{"Id":"6972530678","Type":"IssuesEvent","CreatedAt":"2017-12-11T17:17:55","Actor":"Petermarcu","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2304","RelatedDescription":"Opened issue \"Api Call Not Working\" (#2304) at aspnet/Home","RelatedBody":"@dexterhussain opened this here: https://github.com/dotnet/core/issues/1138\r\n\r\n**Development Machines**\r\nWindows\r\n**Production Machines** \r\nUbuntu/Windows\r\n\r\n**Reproduction link**\r\n\r\nhttps://github.com/hmuhdkamran/Cms\r\nLive Website Working at\r\nsqanetcore.thetowertech.com\r\n\r\n**Steps to reproduce**\r\n\r\nJust open the website and open chrome console window it will start showing error.\r\nWhat is expected?\r\n\r\nIt should run properly and start working as it is working in development server.\r\n**What is actually happening?**\r\n\r\nI am making a website on Vue using aspnetcore 2.0 which i am using development there is no bug no issues it is working perfectly fine when I am rolling it out to production it is giving me error\r\nhttp://192.168.7.14/api/culture/SupportedCultures 500 (Internal Server Error)\r\n192.168.7.14/:1 Uncaught (in promise)\r\n{messageTypeId: \"Error\", text: \"Request failed with status code 500\", title: \"Code:undefined. Error\"}\r\nmessageTypeId\r\n:\r\n\"Error\"\r\ntext\r\n:\r\n\"Request failed with status code 500\"\r\ntitle\r\n:\r\n\"Code:undefined. Error\"\r\nproto\r\n:\r\nObject\r\n\r\nFrom @richlander \r\nI read that there is a problem with your service. An HTTP 500 error is highly suggestive that the focus should be on the service. The act that you can reproduce the same service error outside the website suggests that the issue has nothing to do with website. I'd focus on your service. Have you tried to debug your service to better understand what is causing it to return HTTP 500?\r\n\r\nFrom @hmuhdkamran\r\nIf the issue is in service then it should be in developer mode also, but in developer mode the application runs smoothly, while after publishing the application produces service error.\r\nAfter production the service cant be called from any rest client, you can even check [https://github.com/hmuhdkamran/Cms](url)\r\n\r\n"},{"Id":"6967533653","Type":"IssuesEvent","CreatedAt":"2017-12-10T10:24:08","Actor":"aminebizid","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2303","RelatedDescription":"Opened issue \"Implementation of GraphQL as a middleware\" (#2303) at aspnet/Home","RelatedBody":"This is not an issue but a question.\r\n\r\nGraphQL is great and I believe it will soon replace Legacy REST implementations.\r\n\r\nIs there any Microsoft team/project planning to implement GraphQL?"},{"Id":"6966439101","Type":"IssuesEvent","CreatedAt":"2017-12-09T18:36:32","Actor":"ygoe","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2302","RelatedDescription":"Opened issue \"Hosting behind reverse proxy with subdirectory\" (#2302) at aspnet/Home","RelatedBody":"Sorry to use this platform but I need to find another issue and can't find it because GitHub won't let me find issues I'm subscribed to.\r\n\r\nI'm hosting an ASP.NET Core application on Linux with Apache web server behind a reverse proxy as recommended. I can setup my environment to only proxy a subdirectory of the domain to the app, but the app doesn't know that because the proxy translates the public subdirectory to the internal root directory. Now there was some discussion going on here about whether to let the hosting configure this (just like the port number of Kestrel web server through an environment variable) and how an application can handle it through code until then.\r\n\r\nI need to find that code. I'm sure it was mentioned here, but neither Google nor GitHub won't find it for me. And of course I'm not archiving GitHub notification e-mails that long. Maybe I should do that. Can you please point me to the issue for that?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6974992526","Type":"PullRequestEvent","CreatedAt":"2017-12-12T04:06:16","Actor":"vany0114","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1205","RelatedDescription":"Opened pull request \"Make MapHub and MapEndpoint consistent with other ASP.NET Core APIs (use PathString) #1188\" (#1205) at aspnet/SignalR","RelatedBody":"Hi @anurse \r\n\r\nThis PR Makes MapHub and MapEndpoint consistent with other ASP.NET Core APIs using PathString. #1188\r\n\r\nThanks for your help!"},{"Id":"6974899943","Type":"IssuesEvent","CreatedAt":"2017-12-12T03:28:40","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1202","RelatedDescription":"Closed issue \"Custom headers support\" (#1202) at aspnet/SignalR","RelatedBody":"One of the known issues with full .NET framework implementation of SignalR client was that it did not support custom headers. It can be problematic in a number of scenarios (i. e. [here's a long discussion](https://github.com/elcattivo/CloudFlareUtilities/issues/18) of how SignalR doesn't work if you need to bypass CloudFlare). Is there any progress in this regard in a .NET Core implementation or forking and reimplementing a bunch of classes (how it was done for an old version) is the way to go?"},{"Id":"6974784930","Type":"PullRequestEvent","CreatedAt":"2017-12-12T02:47:02","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1204","RelatedDescription":"Opened pull request \"[WIP] AllExcept for Groups - GroupExcept\" (#1204) at aspnet/SignalR","RelatedBody":"This is in preparation for `OthersInGroup`. `GroupExcept` is analogous to `AllExcept `so that we can make `OthersInGroup `work similarly to Others\r\nStill working on this but was looking for early feedback. Hanging some tests btw... any insight there would be appreciated. \r\nHaven't added new tests for this feature yet as well."},{"Id":"6974569548","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:30:54","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1192","RelatedDescription":"Merged pull request \"Support for Others\" (#1192) at aspnet/SignalR","RelatedBody":"Want some inital feedback for this features. \r\n - Needs better names \r\n - Still need to add tests\r\n - Will add ```OthersInGroup``` later\r\n - Do we still want ```OthersInGroups```? "},{"Id":"6974302996","Type":"IssuesEvent","CreatedAt":"2017-12-12T00:01:24","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1203","RelatedDescription":"Opened issue \"Don't use FormatException for negotiate response errors\" (#1203) at aspnet/SignalR","RelatedBody":"If the negotiate response from the server is invalid, the client throws `FormatException`. This is not an appropriate use of that exception, as it's supposed to be used when arguments that the caller provides are invalid. We should use either a custom exception type or something like `InvalidOperationException`."},{"Id":"6973957983","Type":"IssuesEvent","CreatedAt":"2017-12-11T22:26:02","Actor":"siberianguy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1202","RelatedDescription":"Opened issue \"Custom headers support\" (#1202) at aspnet/SignalR","RelatedBody":"One of the known issues with full .NET framework implementation of SignalR client was that it did not support custom headers. It can be problematic in a number of scenarios (i. e. [here's a long discussion](https://github.com/elcattivo/CloudFlareUtilities/issues/18) of how SignalR doesn't work if you need to bypass CloudFlare). Is there any progress in this regard in a .NET Core implementation or forking and reimplementing a bunch of classes (how it was done for an old version) is the way to go?"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6975136423","Type":"PullRequestEvent","CreatedAt":"2017-12-12T05:09:06","Actor":"hikalkan","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7124","RelatedDescription":"Closed pull request \"Do not unnecessarily execute GetName() method\" (#7124) at aspnet/Mvc","RelatedBody":"Because GetName() executes the localization logic, but we may not need it actually."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6974188558","Type":"IssuesEvent","CreatedAt":"2017-12-11T23:26:19","Actor":"abhishekchouksey","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1527","RelatedDescription":"Opened issue \"IdentityServer3 based SSO server does not connect with ASP.net Core 2.0 based client\" (#1527) at aspnet/Identity","RelatedBody":"IdentityServer3 based SSO server does not work with ASP.net CORE based client, we have been migrating our product from MVC 5 to ASP.net core 2.0 and have noticed that SSO server failed to provide login page.\r\n\r\nThis is request i have got from MVC 5 based application, which uses OWIN middle ware\r\n\r\n```\r\n\r\n app.UseCookieAuthentication(new CookieAuthenticationOptions\r\n            {\r\n                AuthenticationType = \"Cookies\"\r\n            });\r\n\r\n            app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions\r\n            {\r\n                Authority = configurationSettings.AuthorityUri,\r\n                ClientId = configurationSettings.ClientId,\r\n                RedirectUri = configurationSettings.BaseUri,\r\n                ResponseType = \"id_token token\",\r\n                Scope = \"openid api\",\r\n                SignInAsAuthenticationType = \"Cookies\",\r\n                UseTokenLifetime = false\r\n}\r\nidentity/connect/authorize?client_id=XXXX\r\n&redirect_uri=XXXXXXXXXXXXXXXXXXX\r\n&response_mode=form_post&response_type=id_token+token&scope=openid+api&state=OpenIdConnect.AuthenticationProperties%3dwFuNqQIdG7E9axIWsGRaxqn8Aikv4B839r1HfWPm57n9RZ5Ig8BK-r2WuNclpcGZr0Ch2GThSpZ53ShE1zBESfxrSHts_I2iLYfTCvBa0Kd-uRueov-NpXDJOh39yh_f-h8TMcCXRe9S3cvE2eWp64dqJLJZM8EqBsW77b-keS3SvTB2KU0X7NqW-VGdI2StBn0y4kiWg9mZseGS4chgsA&nonce=636483566187911271.OTVmNDY1NGQtZDgxZS00ZjllLThjYzQtYjVkNGYxMGM5ZGZhZGI4MzMyYjctMTBiNi00OGQ3LThmOWItNGExNTc5OGFiYTA4\r\n\r\n```This is request from ASP.net CORE 2.0\r\n\r\n```\r\n\r\n services.AddAuthentication(sharedOptions =>\r\n            {\r\n                sharedOptions.DefaultAuthenticateScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n                \r\n            }).AddCookie()\r\n              .AddOpenIdConnect( options =>\r\n            {\r\n                //   options.AutomaticChallenge = true;\r\n                options.Authority = configurationSettings.AuthorityUri;\r\n                options.ClientId =configurationSettings.ClientId;\r\n                options.ResponseType = OpenIdConnectResponseType.IdTokenToken;\r\n                options.Scope.Add(\"openid api\");\r\n                options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                options.UseTokenLifetime = false;\r\n                options.CallbackPath = new PathString(\"/\");\r\n                options.GetClaimsFromUserInfoEndpoint = true;\r\n      }\r\n\r\nidentity/connect/authorize?\r\nclient_id=XXXXX\r\n&redirect_uri=XXXXXXXXXXXXX &response_type=code\r\n&scope=openid%20api\r\n&response_mode=form_post\r\n&nonce=636483740666280555.NDA3ZGRjZDQtNTdjNS00NjFiLTllOTYtMDc0MjE2NzhkMzQ5NmFiMzU0ZTQtMDIxOS00ODI5LWI4NWEtYTRiMDYzMTFmYjJi&state=CfDJ8AqnlI2Cn3FJtTEVow2y5i5Kt7x-JhPHvqlWGUu6jOxJQQiBB53rtgKV7_nXM4zY0MbzFPQUuONdoyEmX61bexqlAmbTmpEnVC5CHkr41q4b6e3_JtWTBaCOa3vT1_vCNNnIS6lQW3RH4nV-SQ5PUyVr2IzMO3feVRrkS-NLnLAuUXyKSR3gk0LtuzESq_xQ0dtdrjnWr5-dbCyOvG0p3vFhlaQeKyT55q2jZyM4sO0T7B524l6ICz2cKEVLdR6VU2RpjqV_UAlwM7i9Mm7yo_kbCBbtaOOZDWjDVj6XDop0YUmYJhMLGnlXWVBjD87vmg\r\n&x-client-SKU=ID_NET&x-client-ver=2.1.4.0\r\n```"},{"Id":"6974164030","Type":"IssuesEvent","CreatedAt":"2017-12-11T23:19:07","Actor":"ajcvickers","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1518","RelatedDescription":"Closed issue \"Unable to add duplicate usernames with different company IDs\" (#1518) at aspnet/Identity","RelatedBody":"**Use case**: I'm using a multi-tenancy for my asp.net core app however, different tenants/companies are stored on the same schema and the same database. Since each tenant/company is different from each other and have no access to each other, the app should allow registering users that are unique within a company. In otherwords, it should allow saving users to the database with the same username but have different tenant/company id.\r\n**Issue**: ASP.NET Core 2 is creating a UniqueUsername index that does not allow me to add a user with the same username. Is there another way to override this index in Code-First approach? Something like transforming this UniqueUsername index to UniqueUsername+company id, wherein the user is unique per username per company."},{"Id":"6969718472","Type":"IssuesEvent","CreatedAt":"2017-12-11T07:15:56","Actor":"tianxiaode","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1526","RelatedDescription":"Opened issue \"Specified key was too long; max key length is 767 bytes\" (#1526) at aspnet/Identity","RelatedBody":"Microsoft.EntityFrameworkCore.Database.Command:Error: Failed executing DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nCREATE UNIQUE INDEX `UserNameIndex` ON `AspNetUsers` (`NormalizedUserName`);\r\n\r\nMySql.Data.MySqlClient.MySqlException (0x80004005): Specified key was too long; max key length is 767 bytes ---> MySql.Data.MySqlClient.MySqlException (0x80004005): Specified key was too long; max key length is 767 bytes\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at MySqlConnector.Core.ResultSet.<ReadResultSetHeaderAsync>d__1.MoveNext() in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\Core\\ResultSet.cs:line 43\r\n   at MySql.Data.MySqlClient.MySqlDataReader.ActivateResultSet(ResultSet resultSet) in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\MySql.Data.MySqlClient\\MySqlDataReader.cs:line 92\r\n   at MySql.Data.MySqlClient.MySqlDataReader.<ReadFirstResultSetAsync>d__65.MoveNext() in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\MySql.Data.MySqlClient\\MySqlDataReader.cs:line 297\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at MySql.Data.MySqlClient.MySqlDataReader.<CreateAsync>d__64.MoveNext() in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\MySql.Data.MySqlClient\\MySqlDataReader.cs:line 287\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at MySqlConnector.Core.TextCommandExecutor.<ExecuteReaderAsync>d__3.MoveNext() in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\Core\\TextCommandExecutor.cs:line 70\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at MySqlConnector.Core.TextCommandExecutor.<ExecuteNonQueryAsync>d__1.MoveNext() in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\Core\\TextCommandExecutor.cs:line 25\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery() in C:\\projects\\mysqlconnector\\src\\MySqlConnector\\MySql.Data.MySqlClient\\MySqlCommand.cs:line 60\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.MySqlRelationalCommand.<ExecuteAsync>d__3.MoveNext()\r\n引发的异常:“MySql.Data.MySqlClient.MySqlException”(位于 System.Private.CoreLib.dll 中)\r\n“MySql.Data.MySqlClient.MySqlException”类型的异常在 System.Private.CoreLib.dll 中发生，但未在用户代码中进行处理\r\nSpecified key was too long; max key length is 767 bytes"},{"Id":"6968120489","Type":"IssuesEvent","CreatedAt":"2017-12-10T17:05:22","Actor":"irashid25","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1525","RelatedDescription":"Opened issue \"Return users and their roles\" (#1525) at aspnet/Identity","RelatedBody":"Hi all,\r\n\r\nI am trying to return a list of users and their associated roles for an administration screen of my application. The problem is the user manager by default does not eagerly load the roles (which is fine). I am using Entity framework and have custom classes for my application user and role. I have been trying to add a role list property to my custom user class, but I'm not sure how i would go about the mapping. I looked into this as i was potentially looking to query the tables direct. I couldn't get it to work anyway.\r\n\r\nI am now hoping, someone could shed some light on this. Having the user manager retrieve the users and roles separately and amalgamate the results before sending it back to the front end seem dirty to me, not to mention inefficient.\r\n\r\nMy application is built on Asp.net core 2.0, using Identity.core 2.0 and entity framework core 2.0. Any help would be appreciated.\r\n\r\nFor reference:\r\n\r\n```\r\npublic class AppUser : IdentityUser<int>\r\n    {\r\n        public string Firstname { get; set; }\r\n\r\n        public string Lastname { get; set; }\r\n    }\r\n```\r\n\r\n```\r\npublic class AppRole : IdentityRole<int>\r\n    {\r\n    }\r\n```\r\n\r\nAnd my context inherits like so:\r\n\r\n```TestContext : IdentityDbContext<AppUser, AppRole, int>```\r\n\r\nThanks in advance.\r\n"},{"Id":"6965481504","Type":"IssuesEvent","CreatedAt":"2017-12-09T06:40:20","Actor":"Biarity","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1524","RelatedDescription":"Opened issue \"How to customize GenerateUserTokenAsync token lifespan? What about brute-force protection? \" (#1524) at aspnet/Identity","RelatedBody":"I'm using `GenerateUserTokenAsync` and `VerifyUserTokenAsync` with `purpose=\"Email\"`. How can I customize token expiry so tokens last longer/shorter before they aren't valid?\r\n\r\nAdditionally, how would you implement token lockout to prevent someone from brute-forcing the token? With `provider=\"Email\"`, the tokens are just 6 digits which should be easy to brute-force."},{"Id":"6965070938","Type":"IssuesEvent","CreatedAt":"2017-12-09T01:29:22","Actor":"aous77","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1523","RelatedDescription":"Opened issue \"An unhandled exception occurred while processing the request.\" (#1523) at aspnet/Identity","RelatedBody":"asp.net core 2 external authentication is throwing the following exception on production server only: `WinHttpException: A security error occurred\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Threading.Tasks.RendezvousAwaitable.GetResult()\r\nSystem.Net.Http.WinHttpHandler+<StartRequest>d__105.MoveNext()\r\n\r\nShow raw exception details\r\nHttpRequestException: An error occurred while sending the request.\r\nMicrosoft.AspNetCore.Authentication.RemoteAuthenticationHandler+<HandleRequestAsync>d__12.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n\r\nthis is occurring after a successful authentication on the external site (ALL of them google,facebook,linkedin). \r\n \r\ndid anyone encounter this? or know how to fix this?\r\n\r\nthank you"},{"Id":"6960883012","Type":"IssuesEvent","CreatedAt":"2017-12-08T06:40:16","Actor":"andrew-vandenbrink","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1504","RelatedDescription":"Closed issue \"Using both identity and cookie authentication on the same time is not working\" (#1504) at aspnet/Identity","RelatedBody":"Startup.cs\r\n```\r\n services.AddIdentity<ApplicationUser, IdentityRole>()\r\n                .AddEntityFrameworkStores<MultipleDbContext>()\r\n                .AddDefaultTokenProviders();\r\n\r\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\r\n                .AddCookie();\r\n```\r\n\r\nIndex.cshtml\r\n```\r\n if (!HttpContext.User.HasClaim(c => c.Type == ClaimTypes.Name))\r\n{\r\n//This will be always called\r\n}\r\n```\r\n\r\nIf I use both identity and cookie authentication, the cookie authentication won't work\r\n\r\nIf change the Startup.cs like this, then it will work\r\nStartup.cs\r\n```\r\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\r\n                .AddCookie();\r\n```\r\n\r\nIs this by design?\r\n"},{"Id":"6960862340","Type":"IssuesEvent","CreatedAt":"2017-12-08T06:32:31","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1522","RelatedDescription":"Opened issue \"Merge all changes from release/2.0.0 back to dev\" (#1522) at aspnet/Identity","RelatedBody":"I'm not sure https://github.com/aspnet/Identity/pull/1485 made it back into dev. I tried merge the branches and there were a bunch of conflicts. We should look into this closer."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6973720131","Type":"PullRequestEvent","CreatedAt":"2017-12-11T21:32:09","Actor":"BrennanConroy","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2215","RelatedDescription":"Merged pull request \"Upgrade deps\" (#2215) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"6973344363","Type":"PullRequestEvent","CreatedAt":"2017-12-11T20:08:33","Actor":"BrennanConroy","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2215","RelatedDescription":"Opened pull request \"Upgrade deps\" (#2215) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"6973200237","Type":"IssuesEvent","CreatedAt":"2017-12-11T19:39:23","Actor":"MHamburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2214","RelatedDescription":"Opened issue \"ASP.NET Core (2.0.3) API, works on windows, not on linux?\" (#2214) at aspnet/KestrelHttpServer","RelatedBody":"Hi! I have created a small asp.net core API, which has one endpoint that resolves OpenGraph tags and sends back its results.\r\n\r\nYou can get the full source code here:\r\nhttps://github.com/MHamburg/opengraph.api\r\n\r\n**The problem I am facing:**\r\nIf I run this asp.net core api locally on a windows 10 machine (not using docker) and I run the attached stress tester, all works great. The stress tester ends correctly and memory usage is constant. (same applies for running a windows docker instance, all works great!)\r\n\r\nHowever, when I use a linux based docker instance and I run the attached stresstester, the docker container will freeze. (as if there is a deadlock happening)\r\n\r\nIf I run this docker container on Rancher, it will endlessly eat up all memory (as if no garbage collection is being done). (at least it does not freeze)\r\n\r\nIf I run this web api on linux (without using docker) the instance will eat up all memory in a linear fashion (no GC spotted).\r\n\r\n**What I have done so far:**\r\nTried to set:\r\n`    <ServerGarbageCollection>false</ServerGarbageCollection>`\r\nDid not change anything\r\n\r\nTried to set a max memory on the docker instance so that the garbage collector knows it is not allowed to use up all memory (which had a bug in asp.net core which was fixed in 2.0.3), but this does not change anything (it will simply crash the container as it will be OOM).\r\n\r\nTried different docker image versions.\r\n\r\n(also did numerous unrelated things, that did not resolve this isssue)\r\n\r\n**To conclude:**\r\nOn windows or a windows based docker instance (windows container) it works great.\r\nOn ubuntu or a linux based docker instance (linux container) it does **not** work as I hoped it would (OOM and as if the GC is not doing much).\r\n\r\n**My question:**\r\nIt is very difficult for me to specify whether or not this is a code related issues (just bad code) or an issue with the linux based version of .net core/kestrel. I would like to know the underlying reason for the observed behavior, which puzzles me. (shouldn't the code run equally good/bad on each environment)\r\n\r\n**Related issues, that did not resolve my issue:**\r\n\r\nhttps://github.com/dotnet/coreclr/issues/14991\r\nhttps://github.com/dotnet/coreclr/issues/13489#issuecomment-343416765\r\nhttps://github.com/aspnet/aspnet-docker/issues/300\r\n\r\n**To run the stresstester:**\r\ndotnet .\\StressTester.dll \"http://localhost:xxxx\" where xxxx is the port number assigned to your instance. (You can run it multiple times on linux and it will increase memory usage of the api)\r\n\r\n**Additional info:**\r\nWin 10, dev machine:\r\nOutput of `dotnet --info`\r\n.NET Command Line Tools (2.1.2)\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df"},{"Id":"6972449915","Type":"PullRequestEvent","CreatedAt":"2017-12-11T17:02:38","Actor":"BrennanConroy","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2212","RelatedDescription":"Merged pull request \"Upgrade package references and react to corefx API changes\" (#2212) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"6964768330","Type":"IssuesEvent","CreatedAt":"2017-12-08T23:11:59","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/1768","RelatedDescription":"Reopened issue \"Test failure: BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError \" (#1768) at aspnet/KestrelHttpServer","RelatedBody":"On my dev machine:\r\n\r\n```\r\n[xUnit.net 00:00:09.8610412]     BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError [FAIL]\r\n[xUnit.net 00:00:09.8621075]       Moq.MockException :\r\nExpected invocation on the mock once, but was 2 times: h => h.OnHeartbeat(4/25/2017 3:35:29 PM -07:00)\r\n[xUnit.net 00:00:09.8621946]\r\n[xUnit.net 00:00:09.8622312]       Configured setups:\r\n[xUnit.net 00:00:09.8622635]       h => h.OnHeartbeat(4/25/2017 3:35:29 PM -07:00), Times.Exactly(2)\r\n[xUnit.net 00:00:09.8622922]\r\n[xUnit.net 00:00:09.8623201]       Performed invocations:\r\n[xUnit.net 00:00:09.8623506]       IHeartbeatHandler.OnHeartbeat(4/25/2017 3:35:29 PM -07:00)\r\n[xUnit.net 00:00:09.8623814]       IHeartbeatHandler.OnHeartbeat(4/25/2017 3:35:29 PM -07:00)\r\n[xUnit.net 00:00:09.8646901]       Stack Trace:\r\n[xUnit.net 00:00:09.8658590]            at Moq.Mock.ThrowVerifyException(MethodCall expected, IEnumerable`1 setups, IEnumerable`1 actualCalls, Expression expression, Times times, Int32 callCount)\r\n[xUnit.net 00:00:09.8659995]            at Moq.Mock.VerifyCalls(Interceptor targetInterceptor, MethodCall expected, Expression expression, Times times)\r\n[xUnit.net 00:00:09.8660534]            at Moq.Mock.Verify[T](Mock`1 mock, Expression`1 expression, Times times, String failMessage)\r\n[xUnit.net 00:00:09.8661150]            at Moq.Mock`1.Verify(Expression`1 expression, Times times)\r\n[xUnit.net 00:00:09.8661828]            at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.HeartbeatTests.BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError()\r\nFailed   BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError\r\nError Message:\r\n Moq.MockException :\r\nExpected invocation on the mock once, but was 2 times: h => h.OnHeartbeat(4/25/2017 3:35:29 PM -07:00)\r\n\r\nConfigured setups:\r\nh => h.OnHeartbeat(4/25/2017 3:35:29 PM -07:00), Times.Exactly(2)\r\n\r\nPerformed invocations:\r\nIHeartbeatHandler.OnHeartbeat(4/25/2017 3:35:29 PM -07:00)\r\nIHeartbeatHandler.OnHeartbeat(4/25/2017 3:35:29 PM -07:00)\r\nStack Trace:\r\n   at Moq.Mock.ThrowVerifyException(MethodCall expected, IEnumerable`1 setups, IEnumerable`1 actualCalls, Expression expression, Times times, Int32 callCount)\r\n   at Moq.Mock.VerifyCalls(Interceptor targetInterceptor, MethodCall expected, Expression expression, Times times)\r\n   at Moq.Mock.Verify[T](Mock`1 mock, Expression`1 expression, Times times, String failMessage)\r\n   at Moq.Mock`1.Verify(Expression`1 expression, Times times)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.HeartbeatTests.BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError()\r\n```"},{"Id":"6964760427","Type":"IssuesEvent","CreatedAt":"2017-12-08T23:09:15","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2213","RelatedDescription":"Opened issue \"Flaky test: TestInvalidRequestLines\" (#2213) at aspnet/KestrelHttpServer","RelatedBody":"As seen [here](http://aspnetci/viewLog.html?buildId=364448&tab=buildResultsDiv&buildTypeId=XPlat_Windows_Win7_Universe#testNameId7063230156023129206).\r\n\r\n`System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond 127.0.0.1:4514`"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6974841662","Type":"IssuesEvent","CreatedAt":"2017-12-12T03:07:01","Actor":"tb-mtg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1817","RelatedDescription":"Opened issue \"Razor Pages project using Visual Basic (VB)\" (#1817) at aspnet/Razor","RelatedBody":"Are there any plans to support Razor Pages projects using Visual Basic?"},{"Id":"6974764098","Type":"PullRequestEvent","CreatedAt":"2017-12-12T02:39:40","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1816","RelatedDescription":"Merged pull request \"Moved TextBufferProjectService from Mef to ILanguageService\" (#1816) at aspnet/Razor","RelatedBody":"#1799 \r\n\r\nFYI @mkArtakMSFT "},{"Id":"6974621589","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:49:20","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1816","RelatedDescription":"Opened pull request \"Moved TextBufferProjectService from Mef to ILanguageService\" (#1816) at aspnet/Razor","RelatedBody":"#1799 \r\n\r\nFYI @mkArtakMSFT "},{"Id":"6974610263","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:45:14","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1815","RelatedDescription":"Opened pull request \"Add Mac implementation of FileChangeTracker.\" (#1815) at aspnet/Razor","RelatedBody":"- Added a LanguageServices Mac test project.\r\n- Added a few tests for the new `DefaultFileChangeTracker`. There's currently an issue with the MonoDevelop.Core binaries we're compiling against which doesn't allow me to unit test other pieces of the class (they depend on instantiating mono develop objects).\r\n- Added IVT from product projects to new mac testing project.\r\n\r\n#1789 \r\n\r\nFYI @mkArtakMSFT "},{"Id":"6974507410","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:09:42","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1814","RelatedDescription":"Merged pull request \"Moved RazorTextBufferProvider from Mef to ILanguageService\" (#1814) at aspnet/Razor","RelatedBody":"#1799 \r\n\r\nFYI @mkArtakMSFT "},{"Id":"6974460037","Type":"PullRequestEvent","CreatedAt":"2017-12-12T00:53:28","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1814","RelatedDescription":"Opened pull request \"Moved RazorTextBufferProvider from Mef to ILanguageService\" (#1814) at aspnet/Razor","RelatedBody":"#1799 \r\n\r\nFYI @mkArtakMSFT "}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6856182602","Type":"PullRequestEvent","CreatedAt":"2017-11-15T02:15:11","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Merged pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6856061013","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:32:45","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Opened pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6855974819","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:03:13","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Merged pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855941091","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:52:40","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Opened pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855898574","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:38:13","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Opened pull request \"Update migrate-sql-server.md\" (#1062) at aspnet/Tooling","RelatedBody":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6909206856","Type":"IssuesEvent","CreatedAt":"2017-11-27T20:34:10","Actor":"pranavkm","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/282","RelatedDescription":"Opened issue \"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated\" (#282) at aspnet/Announcements","RelatedBody":"As part of some of our infrastructural changes, we're discontinuing the use of the following feeds and may remove them entirely in the future:\r\n* https://dotnet.myget.org/f/aspnetcore-ci-dev \r\n* https://dotnet.myget.org/f/aspnetcore-ci-release\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-dev\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-release\r\n\r\nIf you're currently using one of these feeds in your projects to pick up our daily builds, we recommend migrating to https://dotnet.myget.org/f/aspnetcore-dev.\r\n\r\nPlease use this discussion topic - https://github.com/aspnet/Home/issues/2292 - for feedback and questions. "},{"Id":"6854180246","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:26","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.5. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.5.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.5.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854178775","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:10","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability\" (#278) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where the application is hosted through Windows Http,Sys where a malformed request can lead to a Denial Of Service.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications hosted using Kestrel as their web server are not affected. By default ASP.NET Core Web applications are hosted with Kestrel. Developers must make specific decisions to switch to using HTTP.SYS.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.WebListener | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3 | 1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Server.HttpSys | 2.0.0 |  2.0.2\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.6\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.WebListener` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Server.WebListener` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Server.WebListener` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a two direct dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. The example shows a direct reference to the vulnerable package `Microsoft.AspNetCore.Server.WebListener` version 1.1.1.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.1.0 you would add a reference to the appropriate fixed version 1.1.3.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11883](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11883)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854177980","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege\" (#277) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability some public versions of ASP.NET Core where an Open Redirect exists, leading to Elevation Of Privilege.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 1.0.x or 1.1.x are not affected.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.0.0 |  2.0.1\r\nMicrosoft.AspNetCore.Mvc.Core | 2.0.0 |  2.0.1\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\nIf you are targeting .NET Core a \"meta-package\" is used, `Microsoft.AspNetCore.All`. You should begin by updating its version number to 2.0.1, this will pull in the fixed `Microsoft.AspNetCore.Mvc.Core` package.\r\n\r\nIf you are targeting .NET Framework you should first update the `Microsoft.AspNetCore` version to the version number to 2.0.1, then adjust the version number for any other packages beginning with `Microsoft.AspNetCore.` to 2.0.1.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Core\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference to the vulnerable metapackage, as seen by the single `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.All` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Framework\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference a single packages, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.Core` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.Core` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers a direct reference to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 2.0.0 when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.assets.json` file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Core` version 2.0.0 you would add a reference to the fixed version, 2.0.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11879:](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11879)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853300618","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:26:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/281","RelatedDescription":"Closed issue \"Reserved\" (#281) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853299320","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:47","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/280","RelatedDescription":"Closed issue \"Reserved\" (#280) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853297641","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:29","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Closed issue \"Reserved\" (#279) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"938192857902354432","CreatedAt":"2017-12-05T23:46:22+00:00","UserScreenname":"aspnet","Text":"We're live for the #ASPNET Community Standup now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"938163679614214144","CreatedAt":"2017-12-05T21:50:26+00:00","UserScreenname":"aspnet","Text":"Join us for the #aspnet Community Standup today at 3:45 PM Pacific time - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":6,"RawContent":null},{"Id":"931580871378964481","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"aspnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/itxdVWOnG5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":7,"RawContent":null},{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"917877107904036865","CreatedAt":"2017-10-10T22:18:50+00:00","UserScreenname":"aspnet","Text":"Join us in a half hour (3:45 PM Pacific) for this week's #aspnet Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"915262407743647744","CreatedAt":"2017-10-03T17:08:57+00:00","UserScreenname":"aspnet","Text":"We're live at https://t.co/4Ioo9jNSN2 for the exciting #SignalR deep dive. Join us now!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"915242491774869504","CreatedAt":"2017-10-03T15:49:49+00:00","UserScreenname":"aspnet","Text":"Join us for some #SignalR Core demos at 10 AM PDT (UTC-7) on #ASPNET Community Standup w/ SignalR dev @moozzyk.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":26,"RawContent":null},{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2017-12-12T05:30:13.1802055Z","RunDurationInMilliseconds":11548}