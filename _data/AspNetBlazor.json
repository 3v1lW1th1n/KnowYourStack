{"Data":{"GitHubIssues":{"Issues":[{"Id":"343835582","IsPullRequest":true,"CreatedAt":"2018-07-24T05:11:01","Actor":"danroth27","Number":"1176","RawContent":null,"Title":"Update survey link for 0.5.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1176","RelatedDescription":"Closed or merged PR \"Update survey link for 0.5.0\" (#1176)"},{"Id":"343845259","IsPullRequest":true,"CreatedAt":"2018-07-24T04:54:51","Actor":"rynowak","Number":"1177","RawContent":null,"Title":"Template updates for 0.5","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1177","RelatedDescription":"Closed or merged PR \"Template updates for 0.5\" (#1177)"},{"Id":"343766257","IsPullRequest":true,"CreatedAt":"2018-07-24T00:42:48","Actor":"rynowak","Number":"1172","RawContent":null,"Title":"Fix #1169 ignore DOCTYPE","State":"closed","Body":"This change will cause the compiler to ignore `<!DOCTYPE ...>`\r\ndeclarations in Blazor components. We don't think there's much useful\r\nBlazor can do with doctype, since we don't generate textual output for\r\nthe browser the parse. The sanest thing to do for now is just to skip\r\nover it.","Url":"https://github.com/aspnet/Blazor/pull/1172","RelatedDescription":"Closed or merged PR \"Fix #1169 ignore DOCTYPE\" (#1172)"},{"Id":"343806727","IsPullRequest":true,"CreatedAt":"2018-07-23T23:03:20","Actor":"SteveSandersonMS","Number":"1175","RawContent":null,"Title":"Fix updating attributes on SVG elements. Fixes #934 and #1114","State":"closed","Body":"@danroth27 As requested","Url":"https://github.com/aspnet/Blazor/pull/1175","RelatedDescription":"Closed or merged PR \"Fix updating attributes on SVG elements. Fixes #934 and #1114\" (#1175)"},{"Id":"343798576","IsPullRequest":true,"CreatedAt":"2018-07-23T21:44:00","Actor":"SteveSandersonMS","Number":"1174","RawContent":null,"Title":"Upgrade to Mono f07691d5125","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1174","RelatedDescription":"Closed or merged PR \"Upgrade to Mono f07691d5125\" (#1174)"},{"Id":"343780085","IsPullRequest":false,"CreatedAt":"2018-07-23T20:17:55","Actor":"vertonghenb","Number":"1173","RawContent":null,"Title":"Component tag helper matching should be case-sensitive","State":"open","Body":"Initially started in #1155, make it possible to only match Blazor components as named by the C# class.\r\nThe following 2 snippets are not equal: \r\n```csharp\r\n<Form>\r\n...\r\n</Form>\r\n```\r\nis not equal to (mind the casing)\r\n```html\r\n<form>\r\n...\r\n</form>\r\n```\r\n\r\nWe could make it easier for component libraries as BlazorStrap for example, which has a [workaround](https://github.com/chanan/BlazorStrap/blob/d771191f7572aae1aba540c8f87fe81695a621d5/src/Sample/Pages/forms.cshtml#L9). Basically this is also what React does.\r\n\r\nI'm not really sure if this is Blazor or Razor specific, so if I'm mistaken I do apologise.","Url":"https://github.com/aspnet/Blazor/issues/1173","RelatedDescription":"Open issue \"Component tag helper matching should be case-sensitive\" (#1173)"},{"Id":"342615808","IsPullRequest":false,"CreatedAt":"2018-07-23T19:51:16","Actor":"dataCore","Number":"1152","RawContent":null,"Title":"Passing Server Configuration (appsettings.json) to the Blazor Client","State":"closed","Body":"Is there a way to passing the Server Configuration (ASP.Net Core MVC WebApp with an appsettings.json) to the Client Project to be used by the Blazor Client? I try to pass e.g. the API-Url and I don't want to e.g. Hard-Code it in the Program.cs of the Blazor Client. Also cool would be if the appsettings.development.json would work too.\r\n\r\nCurrently I Hard-Code it into my Blazor Client:\r\n```csharp\r\npublic class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var serviceProvider = new BrowserServiceProvider(services =>\r\n            {\r\n                // Add Blazor.Extensions.Logging.BrowserConsoleLogger\r\n                services.AddLogging(builder => builder\r\n                    .AddBrowserConsole() // Register the logger with the ILoggerBuilder\r\n                    .SetMinimumLevel(LogLevel.Debug) // Set the minimum log level to Information\r\n                );\r\n\r\n                services.Configure<HttpClientExtensionForMYAPIOptions>(options =>\r\n                {\r\n                    options.Url = new Uri(\"https://MYAPI.MYDOMAIN.ch\");\r\n                });\r\n                services.AddSingleton<HttpClientExtensionForMYAPI>();\r\n            });\r\n            \r\n            new BrowserRenderer(serviceProvider).AddComponent<App>(\"app\");\r\n        }\r\n    }\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1152","RelatedDescription":"Closed issue \"Passing Server Configuration (appsettings.json) to the Blazor Client\" (#1152)"},{"Id":"342863104","IsPullRequest":false,"CreatedAt":"2018-07-23T19:49:32","Actor":"thild","Number":"1156","RawContent":null,"Title":"Publish failing","State":"closed","Body":"Hi, I'm trying to publish a blazolib and I'm getting this error.\r\n```\r\n error : The assembly at obj/Debug/netstandard2.0/BlazorFileReader.dll has no specified entry point.\r\n```\r\nAs project OutputType is Library, the assembly is not suppose to have an entry point.\r\n\r\nSteps:\r\n```\r\n$ dotnet new blazorlib -o mylib\r\n// Replace RegisteredFunction.Invoke to JSRuntime.Current.InvokeAsync\r\n//Update packages to 0.5.0-preview1-10349\r\n$ dotnet publish -c Debug\r\n\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 30.69 ms for /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj.\r\n  Restore completed in 62.85 ms for /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj.\r\n  BlazorFileReader -> /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/bin/Debug/netstandard2.0/BlazorFileReader.dll\r\n  Blazor Build result -> 0 files in /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/bin/Debug/netstandard2.0/dist\r\nEXEC : error : The assembly at obj/Debug/netstandard2.0/BlazorFileReader.dll has no specified entry point. [/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj]\r\n     at Microsoft.AspNetCore.Blazor.Build.BootJsonWriter.GetAssemblyEntryPoint(String assemblyPath) in /_/src/Microsoft.AspNetCore.Blazor.Build/Core/BootJsonWriter.cs:line 56\r\n     at Microsoft.AspNetCore.Blazor.Build.BootJsonWriter.WriteFile(String assemblyPath, String[] assemblyReferences, String[] embeddedResourcesSources, Boolean linkerEnabled, String outputPath) in /_/src/Microsoft.AspNetCore.Blazor.Build/Core/BootJsonWriter.cs:line 24\r\n     at Microsoft.AspNetCore.Blazor.Build.Cli.Commands.WriteBootJsonCommand.<>c__DisplayClass0_0.<Command>b__0() in /_/src/Microsoft.AspNetCore.Blazor.Build/Cli/Commands/WriteBootJsonCommand.cs:line 57\r\n/home/tony/.nuget/packages/microsoft.aspnetcore.blazor.build/0.5.0-preview1-10349/targets/Blazor.MonoRuntime.targets(635,5): error MSB3073: The command \"dotnet \"/home/tony/.nuget/packages/microsoft.aspnetcore.blazor.build/0.5.0-preview1-10349/targets/../tools/Microsoft.AspNetCore.Blazor.Build.dll\" write-boot-json obj/Debug/netstandard2.0/BlazorFileReader.dll --references \"/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/obj/Debug/netstandard2.0/blazor/bootjson-references.txt\" --embedded-resources\"/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/obj/Debug/netstandard2.0/blazor/embedded.resources.txt\"  --output \"/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/obj/Debug/netstandard2.0/blazor/blazor.boot.json\"\" exited with code 1. [/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj]\r\n```\r\n\r\nDev environment:\r\n```\r\nblazor version: 0.5.0-preview1-10349\r\n\r\n$ dotnet --info\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     opensuse\r\n OS Version:  20170721\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.302/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.302 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n$ cat /etc/os-release \r\nNAME=\"openSUSE Tumbleweed\"\r\n# VERSION=\"20170721\"\r\nID=opensuse\r\nID_LIKE=\"suse\"\r\nVERSION_ID=\"20170721\"\r\nPRETTY_NAME=\"openSUSE Tumbleweed\"\r\nANSI_COLOR=\"0;32\"\r\nCPE_NAME=\"cpe:/o:opensuse:tumbleweed:20170721\"\r\nBUG_REPORT_URL=\"https://bugs.opensuse.org\"\r\nHOME_URL=\"https://www.opensuse.org/\"\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1156","RelatedDescription":"Closed issue \"Publish failing\" (#1156)"},{"Id":"342903406","IsPullRequest":false,"CreatedAt":"2018-07-23T19:30:31","Actor":"carlsteen","Number":"1159","RawContent":null,"Title":"Component constructor injection","State":"closed","Body":"I would love it if Blazor would allow constructor injection when composing components with base classes that requires injection of services (to make the DI system more consistent with how it works when composing services).\r\n\r\nIf this is a feature you would consider I would not mind creating a PR with the functionality to help out\r\n","Url":"https://github.com/aspnet/Blazor/issues/1159","RelatedDescription":"Closed issue \"Component constructor injection\" (#1159)"},{"Id":"343327572","IsPullRequest":false,"CreatedAt":"2018-07-23T19:28:50","Actor":"mrpmorris","Number":"1163","RawContent":null,"Title":"Please add a Destroyed event to IComponent (Possible critical WASM/Mono bug)","State":"closed","Body":"I am trying to add a state subscription to my Fluxor library. To subscribe you'd do this\r\n\r\n```\r\n@inject IState<AppState> AppState\r\n\r\n@functions {\r\n  AppState.Subscribe(this);\r\n}\r\n```\r\nFluxor will then call back the StateHasChanged of that instance every time the state changes, but I need to also know when the component is destroyed so I can automatically unsubscribe.\r\n\r\nIt would be good also if I could call StateHasChanged without having to use reflection.","Url":"https://github.com/aspnet/Blazor/issues/1163","RelatedDescription":"Closed issue \"Please add a Destroyed event to IComponent (Possible critical WASM/Mono bug)\" (#1163)"},{"Id":"343421085","IsPullRequest":false,"CreatedAt":"2018-07-23T19:17:26","Actor":"kant2002","Number":"1167","RawContent":null,"Title":"Blazor failed to load large fils","State":"closed","Body":"It is likely not Blazor issue per se, but I would be good if it fail more gracefully, if some inherent limitations from the Browser.\r\n\r\nBasically I have following error in Chrome: \r\n```\r\nmono.js:1 Uncaught (in promise) RuntimeError: memory access out of bounds\r\n    at wasm-function[290]:104\r\n    at wasm-function[2458]:125\r\n    at wasm-function[563]:16\r\n    at wasm-function[246]:115\r\n    at wasm-function[2428]:33\r\n    at wasm-function[2429]:41\r\n    at wasm-function[4877]:10\r\n    at Module._mono_wasm_string_from_js (http://localhost:58134/_framework/wasm/mono.js:1:173587)\r\n    at ccall (http://localhost:58134/_framework/wasm/mono.js:1:5651)\r\n    at http://localhost:58134/_framework/wasm/mono.js:1:6032\r\n```\r\n\r\nMy scenario following. I have form with input file.\r\nUser select text file.\r\nThen application load file, split by lines and process file.\r\nWhen I load file with only 914KB it works. When I load larger file 7876KB it fails to load with aforementioned error. Not sure who is to blame.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1167","RelatedDescription":"Closed issue \"Blazor failed to load large fils\" (#1167)"},{"Id":"343675034","IsPullRequest":false,"CreatedAt":"2018-07-23T19:16:13","Actor":"fosteralwec","Number":"1169","RawContent":null,"Title":"Unable to install Blazor Extension Windows / Visual Studio 15.7.4 and 15.7.5","State":"closed","Body":"I've been trying to install the Blazor Extensions for some time. I recently updated Visual Studio to 15.7.5 and am still having a problem. T\r\n![stalledblazorinstallation](https://user-images.githubusercontent.com/32308340/43085466-0b7e2510-8e69-11e8-92f6-6e3645fbe034.png)\r\nhe extension install \"stalls\". I have attached a screen shot.","Url":"https://github.com/aspnet/Blazor/issues/1169","RelatedDescription":"Closed issue \"Unable to install Blazor Extension Windows / Visual Studio 15.7.4 and 15.7.5\" (#1169)"},{"Id":"343739324","IsPullRequest":true,"CreatedAt":"2018-07-23T18:13:10","Actor":"SteveSandersonMS","Number":"1171","RawContent":null,"Title":"preventDefault for form onsubmit handlers. Fixes #951","State":"open","Body":"This is very much just a special case, and longer term we'll want to do something better. Specifically, we'd like to have a proper way to control whether `preventDefault` is applied to C#-handled events.\r\n\r\nThe special case here is \"if you have a C# `onsubmit` handler, then call `preventDefault` on those events\". There's basically no way you *wouldn't* want to `preventDefault` those events, since (if async) the event handler would run *after* the default navigation event, which is totally useless. So I think the special case is OK as a stopgap measure.\r\n\r\nThe alternative could be that we say we're not changing the behavior, and people should explicitly put `type=\"button\"` on buttons inside forms. @rynowak @danroth27 let me know if you feel strongly either way. UPDATE: Putting `type=\"button\"` on buttons inside form doesn't solve the wider issue, e.g., hitting enter on an textbox inside the form, so the workaround in the PR has got to be better.","Url":"https://github.com/aspnet/Blazor/pull/1171","RelatedDescription":"Open PR \"preventDefault for form onsubmit handlers. Fixes #951\" (#1171)"},{"Id":"342883905","IsPullRequest":true,"CreatedAt":"2018-07-23T17:17:32","Actor":"thild","Number":"1157","RawContent":null,"Title":"Fixed exporting platform to window object","State":"closed","Body":"Recently versions are not exporting platform to window object correctly.\r\nWhen GlobalExports.ts gets called, platform from Enviroment.ts is undefined and gets set only when Environment.setPlatform(monoPlatform) is called on boot.","Url":"https://github.com/aspnet/Blazor/pull/1157","RelatedDescription":"Closed or merged PR \"Fixed exporting platform to window object\" (#1157)"},{"Id":"343447100","IsPullRequest":true,"CreatedAt":"2018-07-23T16:33:40","Actor":"SteveSandersonMS","Number":"1168","RawContent":null,"Title":"TextDecoder polyfill","State":"closed","Body":"Continuation of #1150 by @Suchiman ","Url":"https://github.com/aspnet/Blazor/pull/1168","RelatedDescription":"Closed or merged PR \"TextDecoder polyfill\" (#1168)"},{"Id":"343703530","IsPullRequest":false,"CreatedAt":"2018-07-23T16:23:03","Actor":"SteveSandersonMS","Number":"1170","RawContent":null,"Title":"In RazorCompiler, coalesce adjacent markup blocks","State":"open","Body":"Follow up on #1146","Url":"https://github.com/aspnet/Blazor/issues/1170","RelatedDescription":"Open issue \"In RazorCompiler, coalesce adjacent markup blocks\" (#1170)"},{"Id":"342491812","IsPullRequest":true,"CreatedAt":"2018-07-22T23:01:14","Actor":"Suchiman","Number":"1150","RawContent":null,"Title":"Polyfill for TextDecoder","State":"closed","Body":"I was toying around with server side blazor and the first culprit i run into was the lack of Edge support 😉 \r\nI've extracted the least amount of Polyfil necessary from https://github.com/samthor/fast-text-encoding/blob/master/text.js#L137 which worked for my experiments and still uses the native TextDecoder in other browsers.\r\nNot sure if this is acceptable or how / where i need to attribute this.\r\n\r\nFixes #1131\r\n","Url":"https://github.com/aspnet/Blazor/pull/1150","RelatedDescription":"Closed or merged PR \"Polyfill for TextDecoder\" (#1150)"},{"Id":"343385397","IsPullRequest":false,"CreatedAt":"2018-07-22T17:46:41","Actor":"RickStrahl","Number":"1166","RawContent":null,"Title":"DateTime always displays as UTC","State":"closed","Body":"DateTime values  always display as UTC time, rather than local time even when explicitly forcing `.ToLocalTime()`.\r\n\r\nThis:\r\n```csharp\r\nConsole.WriteLine(DateTime.Now.ToLocalTime().ToString(\"HH:mm\"));\r\n```\r\n\r\ndisplays UTC time.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1166","RelatedDescription":"Closed issue \"DateTime always displays as UTC\" (#1166)"},{"Id":"343336861","IsPullRequest":false,"CreatedAt":"2018-07-22T01:40:37","Actor":"conficient","Number":"1165","RawContent":null,"Title":"Automating of Server API use in Blazor clients","State":"closed","Body":"One of the things that annoyed me about writing C# on the server and Javascript/Typescript on the client was how much plumbing you had to do to transfer data between the the two.\r\n\r\nYou create a strongly typed WebAPI in C# on the server, then have to reconstruct this on the client in TypeScript and reference the API using strings for URLs etc.\r\n\r\nThings are a lot better in Blazor where we can call a Web API and transform back into strongly-typed C#, but perhaps there is a 'next level' where we can create an interface object to the API that can be consumed in Blazor. \r\n\r\nFor example the sample app gets the Weather Forecasts using\r\n```\r\n        forecasts = await Http.GetJsonAsync<WeatherForecast[]>(\"api/SampleData/WeatherForecasts\");\r\n```\r\nWe still have a magic string here, which would break if the URL changes, and if we had parameters would be more complicated to put together.\r\n\r\nIf the server API code could generate something the client could consume, perhaps we could in future have something like this:\r\n```\r\n        forecasts = await BlazorApp.Server.API.SampleData.GetWeatherForecasts();\r\n```\r\nThis is a similar concept to the webservices that asp.net used to generate for SilverLight to consume.\r\n\r\nThis is just floating an idea for future, so please close as needed\r\n","Url":"https://github.com/aspnet/Blazor/issues/1165","RelatedDescription":"Closed issue \"Automating of Server API use in Blazor clients\" (#1165)"},{"Id":"343328430","IsPullRequest":false,"CreatedAt":"2018-07-21T13:59:12","Actor":"PeterHimschoot","Number":"1164","RawContent":null,"Title":"Accidentally adding a Razor layout crashed Visual Studio","State":"open","Body":"I added a MVC razor layout to my visual studio project Shared folder (by accident) and Visual Studio crashes continuously. \r\nI fixed this issue by manually deleting this view from the project using File Explorer.","Url":"https://github.com/aspnet/Blazor/issues/1164","RelatedDescription":"Open issue \"Accidentally adding a Razor layout crashed Visual Studio\" (#1164)"},{"Id":"343256804","IsPullRequest":false,"CreatedAt":"2018-07-21T09:43:12","Actor":"mrpmorris","Number":"1161","RawContent":null,"Title":"NullReferenceException when calling StateHasChanged from Javascript","State":"closed","Body":"https://github.com/mrpmorris/blazor-fluxor/tree/feature/flight-finder-demo\r\n\r\n1. Install Redux Tools extension for Chrome \r\n2. Run the FlightFinder sample\r\n3. Open Dev Tools\r\n4. Click Search\r\n5: Add a flight to the short list\r\n6: Flick through the time line in the Dev Tools\r\n\r\nThis will trigger a callback that will invoke StateHasChanged. At this point a NullReferenceException is encountered...\r\n\r\n```\r\nMonoPlatform.ts:70 Uncaught Error: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at FlightFinder.Client.Components.Shortlist.BuildRenderTree (:59912/Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1e07e88 + 0x00058> in <5589bddb96e64f64bb0e27875fbeec39>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b91b70 + 0x0006c> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b91718 + 0x00040> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b90e20 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (:59912/System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8dcf8 + 0x00068> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (:59912/Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8d9e0 + 0x00036> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b8d8e8 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Blazor.Fluxor.Feature`1+<>c[TState].<TriggerStateChangedCallbacks>b__15_0 (:59912/System.Action callback) <0x1fe7048 + 0x00010> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at System.Collections.Generic.List`1[T].ForEach (:59912/System.Action`1[T] action) <0x1b49f90 + 0x00054> in <a02c7d9644e84620838bef876532992f>:0 \r\n  at :59912/Blazor.Fluxor.Feature`1[TState].TriggerStateChangedCallbacks () <0x1b46970 + 0x0011c> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].set_State (:59912/TState value) <0x1b1c510 + 0x00056> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].RestoreState (:59912/System.Object value) <0x20f5420 + 0x00018> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsMiddleware.OnJumpToState (:59912/System.Object sender, Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback e) <0x2051f28 + 0x00156> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.OnJumpToState (:59912/Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback jumpToStateCallback) <0x2051868 + 0x00020> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.DevToolsCallback (:59912/System.String messageAsJson) <0x1e09ca8 + 0x000b6> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at FlightFinder.Client.Components.Shortlist.BuildRenderTree (:59912/Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1e07e88 + 0x00058> in <5589bddb96e64f64bb0e27875fbeec39>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b91b70 + 0x0006c> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b91718 + 0x00040> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b90e20 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (:59912/System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8dcf8 + 0x00068> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (:59912/Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8d9e0 + 0x00036> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b8d8e8 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Blazor.Fluxor.Feature`1+<>c[TState].<TriggerStateChangedCallbacks>b__15_0 (:59912/System.Action callback) <0x1fe7048 + 0x00010> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at System.Collections.Generic.List`1[T].ForEach (:59912/System.Action`1[T] action) <0x1b49f90 + 0x00054> in <a02c7d9644e84620838bef876532992f>:0 \r\n  at :59912/Blazor.Fluxor.Feature`1[TState].TriggerStateChangedCallbacks () <0x1b46970 + 0x0011c> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].set_State (:59912/TState value) <0x1b1c510 + 0x00056> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].RestoreState (:59912/System.Object value) <0x20f5420 + 0x00018> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsMiddleware.OnJumpToState (:59912/System.Object sender, Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback e) <0x2051f28 + 0x00156> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.OnJumpToState (:59912/Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback jumpToStateCallback) <0x2051868 + 0x00020> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.DevToolsCallback (:59912/System.String messageAsJson) <0x1e09ca8 + 0x000b6> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n    at Object.callMethod (MonoPlatform.ts:70)\r\n    at fluxorDevTools.subscribe (<anonymous>:18:21)\r\n    at <anonymous>:1:74328\r\n    at <anonymous>:1:70919\r\n    at Array.forEach (<anonymous>)\r\n    at <anonymous>:1:70899\r\n    at Array.forEach (<anonymous>)\r\n    at handleMessages (<anonymous>:1:70825)\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1161","RelatedDescription":"Closed issue \"NullReferenceException when calling StateHasChanged from Javascript\" (#1161)"},{"Id":"343258359","IsPullRequest":true,"CreatedAt":"2018-07-20T23:51:59","Actor":"eskaufel","Number":"1162","RawContent":null,"Title":"Update CONTRIBUTING.md","State":"closed","Body":"Changed CODE_OF_CONDUCT link to relative (absolute link was dead) and changed target branch for aspnet in \"Contributing code and content\" section to master since the dev branch no longer exist.","Url":"https://github.com/aspnet/Blazor/pull/1162","RelatedDescription":"Closed or merged PR \"Update CONTRIBUTING.md\" (#1162)"},{"Id":"343192647","IsPullRequest":false,"CreatedAt":"2018-07-20T17:45:13","Actor":"NTaylorMullen","Number":"1160","RawContent":null,"Title":"Blazor tooling crashes VS after pasting code with doc type","State":"open","Body":"Original issue: https://developercommunity.visualstudio.com/content/problem/294284/visual-studio-crashes-after-pasting-cshtml-content.html?childToView=297537\r\n\r\n### Repro\r\n1. Clone https://github.com/dcb99/WebApplication5.git\r\n2. Open solution and past the following into `_Layout.cshtml` (to override the current contents): `<!DOCTYPE html>`\r\n3. VS crashes with the following exception:\r\n![image](https://user-images.githubusercontent.com/2008729/43017143-f26a94a2-8c09-11e8-8c17-eb3169a4eef4.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1160","RelatedDescription":"Open issue \"Blazor tooling crashes VS after pasting code with doc type\" (#1160)"},{"Id":"342893398","IsPullRequest":false,"CreatedAt":"2018-07-20T02:08:25","Actor":"Lupusa87","Number":"1158","RawContent":null,"Title":"SVG can't load image","State":"closed","Body":"I am trying to load image inside svg. \r\nI want my canvas based [clock component](https://lupusablazordemos.azurewebsites.net/) to rewrite on svg and compare results.\r\n\r\nI was generating svg tags inside blazor component, for now all tested svg elements are working properly, only image has problem.\r\n\r\nBlazor not displays expected image, in index.html it is loading normally, in index.cshtml not.\r\n\r\nFor test I tried this [example](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image#Example) from mozilla:\r\n```\r\n<svg width=200 height=200 \r\n     xmlns=\"http://www.w3.org/2000/svg\" \r\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">       \r\n  <image xlink:href=\"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png\" height=\"200\" width=\"200\"/>    \r\n</svg>\r\n```\r\n\r\n### **On image we can see that the same code snippet is working outside blazor and doesn't work inside.**\r\nThe same in all my browsers (firefox, chome, edge).\r\n\r\n\r\n![untitled1](https://user-images.githubusercontent.com/40779557/42970069-47806302-8b76-11e8-87c2-431c65aea32d.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1158","RelatedDescription":"Closed issue \"SVG can't load image\" (#1158)"},{"Id":"342828861","IsPullRequest":false,"CreatedAt":"2018-07-19T18:12:20","Actor":"uwefms","Number":"1155","RawContent":null,"Title":"<summary> / <details> Tag not working","State":"closed","Body":"Trying to use summary / details Tags produced the following error message: (in Firefox / Chrome)\r\n\r\nError: System.InvalidOperationException: Object of type 'ShowRaum.Client.Pages.Summary' does not have a property matching the name 'ChildContent'.\r\n\r\nI know, it is not (yet) supported in Edge.\r\n\r\nTo reproduce:\r\n\r\nJust add\r\n\r\n\t<details>\r\n\t\t<summary>Some text</summary>\r\n\t\t<p>Another text</p>\r\n\t</details>\r\n\r\nto Counter.cshtml.\r\n\r\n  regards\r\n\r\n      Uwe\r\n","Url":"https://github.com/aspnet/Blazor/issues/1155","RelatedDescription":"Closed issue \"<summary> / <details> Tag not working\" (#1155)"},{"Id":"342656184","IsPullRequest":true,"CreatedAt":"2018-07-19T17:57:18","Actor":"SteveSandersonMS","Number":"1153","RawContent":null,"Title":"Run E2E tests under both WebAssembly and server-side execution modes","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1153","RelatedDescription":"Closed or merged PR \"Run E2E tests under both WebAssembly and server-side execution modes\" (#1153)"},{"Id":"342818909","IsPullRequest":true,"CreatedAt":"2018-07-19T17:21:51","Actor":"vertonghenb","Number":"1154","RawContent":null,"Title":"Overload UriHelper to forceLoad the page even if it's not a Blazor defined Route.","State":"open","Body":"**PR issued to solve**\r\n* Add UrlHelper.NavigateTo overload that forces a full page reload #979\r\n* Handle FileResult from controller service #962 \r\n* Combine MVC razor pages with Blazor pages #1069 \r\n* Helps with Routing enhancements #293\r\n\r\nBasically when you have a MVC Server that serves the Blazor Client and on the other hand sends File Downloads (for example). It was not possible to load the MVC Uri outside of Blazor's internal routing. \r\nWith this PR, it's now possible to use the following block of code to load a Uri outside of Blazor's routing:\r\n\r\n```csharp\r\n@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper\r\n<button onclick=@GoToMvcRoute>Navigate to Controller Action!</button>\r\n<button onclick=@DontGoToMvcRoute>Don't Navigate to Controller Action!</button>\r\n\r\n@functions {\r\n    void GoToMvcRoute()\r\n    {\r\n        UriHelper.NavigateTo(\"/controller/action\", forceLoad: true);\r\n\r\n    }\r\n    void DontGoToMvcRoute()\r\n    {\r\n        UriHelper.NavigateTo(\"/controller/action\");\r\n\r\n    }\r\n}\r\n````\r\n\r\n**Tests**\r\nNot really sure how to test this in the current suite, maybe add an additional AspNetHosted project with \r\na server that also serves via MVC? I simply tested on \"my machine\" to make sure it's loading the page. \r\n\r\n\r\n**Caveats**\r\nThe mapping of the controllers still have to happen on Startup.cs (which is normal):\r\n````csharp\r\n            app.UseMvcWithDefaultRoute();\r\n            app.UseBlazor<Client.Program>();\r\n````\r\n**Impact**\r\nNo impact on current usages of IUriHelper (default parameter)\r\n\r\nIf you know a better name for the parameter, I'm all ears! \r\n* byPassInternalRouting?","Url":"https://github.com/aspnet/Blazor/pull/1154","RelatedDescription":"Open PR \"Overload UriHelper to forceLoad the page even if it's not a Blazor defined Route.\" (#1154)"},{"Id":"342565385","IsPullRequest":false,"CreatedAt":"2018-07-19T03:23:28","Actor":"dustgrinder","Number":"1151","RawContent":null,"Title":"One single route is reported as 'The following routes are ambiguous'","State":"open","Body":"I repeatedly get errors such as this:\r\n\r\n`Error: System.InvalidOperationException: Failed to compare two elements in the array. --->` `System.InvalidOperationException: The following routes are ambiguous:`\r\n`'admin/product/{ProductUrl}' in 'X.Client.AdminWide.UpdateProduct'`\r\n`'admin/product/{ProductUrl}' in 'X.Client.AdminWide.UpdateProduct'`\r\n\r\nI have only one route 'admin/product/{ProductUrl}' in that page. Also, that page has been working for a while, but only shows that errors after I create a new page with a dynamic url (\"/user/{UserName}/orders\"), which really has nothing related to it.\r\n\r\nThe error only happens if the url is like \"/admin/product\" and doesn't happen when it's \"/admin\".\r\n\r\nThe oddest thing is, *sometimes* I would edit the route of a wholly unrelated page into \"/x/y\" and a random other page would break.\r\n\r\nWhat could be the case here?","Url":"https://github.com/aspnet/Blazor/issues/1151","RelatedDescription":"Open issue \"One single route is reported as 'The following routes are ambiguous'\" (#1151)"},{"Id":"342437114","IsPullRequest":false,"CreatedAt":"2018-07-18T20:43:54","Actor":"Lupusa87","Number":"1149","RawContent":null,"Title":"Any plans to support System.Drawing.Common?","State":"closed","Body":"Maybe it is not so important to have this support on early development phase, but it's interesting if it can be supported and how high importance will it have.\r\n\r\nIt is based on mono, so maybe can be easy implemented.\r\n\r\nhttps://www.nuget.org/packages/System.Drawing.Common\r\nhttps://www.nuget.org/packages/Microsoft.Windows.Compatibility\r\nhttps://github.com/CoreCompat/CoreCompat\r\n\r\n![untitled](https://user-images.githubusercontent.com/40779557/42899160-2852c026-8a93-11e8-9425-ce7b5c7ec947.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1149","RelatedDescription":"Closed issue \"Any plans to support System.Drawing.Common?\" (#1149)"},{"Id":"342414783","IsPullRequest":false,"CreatedAt":"2018-07-18T20:42:50","Actor":"doggy8088","Number":"1148","RawContent":null,"Title":"CPU High issue report","State":"closed","Body":"I made a sample project to reproduce this problem.  Please check this out: https://github.com/doggy8088/TodoMVC_Blazor/tree/CPUHighBug\r\n\r\nAfter clone my code, switch to `CPUHighBug` branch.  Open with Visual Studio 2017, then hit `Ctrl+F5`, then you will see the CPU high problem in Chrome.\r\n\r\nIf you need to turn off the Tab in Chrome, please hit `Shift+ESC` to open **Chrome Task Manager**, then Close the high cpu tab.","Url":"https://github.com/aspnet/Blazor/issues/1148","RelatedDescription":"Closed issue \"CPU High issue report\" (#1148)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-24T05:30:03.2844254Z","RunDurationInMilliseconds":1490}