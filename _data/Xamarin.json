{"Data":{"Blog":{"FeedItems":[{"Title":"Accessing Native Features the Cross-Platform Way with Xamarin.Essentials","PublishedOn":"2018-12-19T22:46:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every mobile application requires access to native functionality. When developing native mobile apps with Xamarin, developers are able to integrate deeply into iOS and Android since Xamarin exposes...","Href":"https://blog.xamarin.com/accessing-native-features-xamarin-essentials/","RawContent":null},{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8795862985","Type":"IssuesEvent","CreatedAt":"2018-12-22T21:13:14","Actor":"mfeingol","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2568","RelatedDescription":"Opened issue \"Visual Studio 2017: \"Autos\" debug window doesn't work\" (#2568) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Debug an Android app\r\n2. Set a break point\r\n3. Observe the Locals window works fine, but the Autos window doesn't.\r\n\r\n![image](https://user-images.githubusercontent.com/218865/50378615-3b308600-05eb-11e9-9725-a7b3475d2b79.png)\r\n\r\n### Expected Behavior\r\n\r\nAutos should work the same as other debug environments in VS.\r\n\r\n### Actual Behavior\r\n\r\nAutos is always empty\r\n\r\n### Version Information\r\n\r\nVisual Studio 2017 15.9.4"},{"Id":"8795858574","Type":"IssuesEvent","CreatedAt":"2018-12-22T21:09:32","Actor":"mfeingol","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2567","RelatedDescription":"Opened issue \"Visual Studio 2017: Exception Unhandled popup -> Exception Settings checkbox isn't wired up\" (#2567) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Debug an Android app\r\n2. Throw an exception in the Android app\r\n3. Observe the friendly exception popup's Exception Settings checkbox does nothing\r\n\r\n![image](https://user-images.githubusercontent.com/218865/50378592-87c79180-05ea-11e9-9cb5-5ededd82cd2e.png)\r\n\r\n### Expected Behavior\r\n\r\nIf an exception type is enabled in the real Exception Settings dialog, it should also be enabled in the Exception Unhandled popup's Exception Settings.\r\n\r\n### Actual Behavior\r\n\r\nThe Exception Unhandled popup's Exception Settings checkbox for \"Break when this exception type is thrown\" is unchecked. Checking and unchecking the box does nothing.\r\n\r\n### Version Information\r\n\r\nVisual Studio 2017 15.9.4"},{"Id":"8794219146","Type":"IssuesEvent","CreatedAt":"2018-12-22T00:04:03","Actor":"EmilAlipiev","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2566","RelatedDescription":"Opened issue \"Xamarin Support Libraries 28 update freezes Visual Studio 2017\" (#2566) at xamarin/xamarin-android","RelatedBody":"when i try to update latest xamarin android support libraries version 28, my project is freezing and visual studio 2017 is not responding. Issue is probably related to OneSignal library having version restriction as you can see in the screenshot but why doest it freezes? it makes project not useable again after killing the task\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/50367999-b1e66880-0584-11e9-8c6d-561ad0402921.png)\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. create new xamarin.forms project with andorid support libraries 27.0\r\n2. install OneSignal 3.2.2\r\n3. update support libraries 28\r\n4. Visual Studio 2017 freezes, you need to kill the process\r\n5. Now try to reopen project, project wont load.\r\n \r\n\r\n### Expected Behavior\r\nupdate works\r\n### Actual Behavior\r\nfreezes visual studio\r\n### Version Information\r\nxamarin.forms 3,3\r\n  "},{"Id":"8793327499","Type":"PullRequestEvent","CreatedAt":"2018-12-21T19:29:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2564","RelatedDescription":"Merged pull request \"[build-tools] Fix the RunUI task to wait\" (#2564) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/xamarin/xamarin-android/issues/2552\r\n\r\nUse override in the right place. Probably a typo, which made the\r\nlogcat output unusable, because the `AfterCommand` was never called\r\nand we gathered the logcat directly after launching the\r\nactivity. Instead of waiting before collecting the logcat.\r\n\r\nMy wild guess is that older compiler versions worked differenly and so\r\nit worked for some time."},{"Id":"8793327486","Type":"IssuesEvent","CreatedAt":"2018-12-21T19:29:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2552","RelatedDescription":"Closed issue \"Nearly empty logcat output from XF test\" (#2552) at xamarin/xamarin-android","RelatedBody":"For (yet) unknown reason, the logcat output of XF test is really short. For example:\r\n```\r\n--------- beginning of system\r\n12-19 17:59:10.600  1173  2615 I ActivityManager: START u0 {flg=0x10000000 cmp=Xamarin.Forms_Performance_Integration/xamarin.forms.performance.integration.MainActivity} from uid 2000\r\n--------- beginning of main\r\n12-19 17:59:10.632   799   799 D android.hardware.power@1.2-service.wahoo-libperfmgr: LAUNCH ON\r\n12-19 17:59:10.656 18985 18985 I AppLifecycleTracker: onActivityPaused: \r\n```\r\n\r\nThe test itself seems to run OK as we collect the performance data:\r\n```\r\nlast-Release,JNI.init-Release,init-Release,OnCreateBegin-Release,OnCreateEnd-Release,OnStartBegin-Release,OnStartEnd-Release,OnResumeBegin-Release,OnResumeEnd-Release,last-Release-Bundle,JNI.init-Release-Bundle,init-Release-Bundle,OnCreateBegin-Release-Bundle,OnCreateEnd-Release-Bundle,OnStartBegin-Release-Bundle,OnStartEnd-Release-Bundle,OnResumeBegin-Release-Bundle,OnResumeEnd-Release-Bundle\r\n1069,240,240,312,698,700,700,701,701,921,185,185,234,572,576,576,576,577\r\n```\r\n\r\nIt is good news that I am able to reproduce it locally."},{"Id":"8792986108","Type":"PullRequestEvent","CreatedAt":"2018-12-21T18:06:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2563","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] fix ManagedResourceParser API breakage\" (#2563) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2546\r\nChanges: https://github.com/xamarin/xamarin-android-api-compatibility/compare/ec562e9...3fe4561\r\n\r\nBumps to xamarin/xamarin-android-api-compatibility/master@3fe4561\r\n\r\nThis partially reverts 0f91aea.\r\n\r\nIn #2546, we experienced a bit of API breakage when disabling\r\n`$(AndroidUseAapt2)`. We want to fix the breakage in master, but keep\r\n`$(AndroidUseAapt2)` turned on by default.\r\n\r\nWe need to put the `ManagedResourceParser` back the way it was before\r\n0f91aea, except for `Resource.Attribute`.\r\n\r\nSince `aapt`(1) always emits this class, we should replicate that."},{"Id":"8792909489","Type":"PullRequestEvent","CreatedAt":"2018-12-21T17:48:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2559","RelatedDescription":"Merged pull request \"[build] create-vsix.csproj should have Release configuration\" (#2559) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid, we are getting a build error during a\r\n`Release` build:\r\n\r\n    xamarin-android/src/libzip/libzip.targets(16,5): error MSB4062: The \"Xamarin.Android.BuildTools.PrepTasks.GitCommitTime\" task could not be loaded from the assembly xamarin-android/build-tools/scripts/../../bin/BuildDebug/xa-prep-tasks.dll. Invalid Image Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nThe path here is wrong, we should not be looking in `BuildDebug`\r\nduring a `Release` build.\r\n\r\nI opened Xamarin.Android.sln in Visual Studio (on Windows), and in the\r\n`Configuration Manager` `create-vsix.csproj` was listed as building\r\n`Debug` for `Release` builds! The dropdown would not even let me\r\nselect `Release`, it seemed the IDE did not think there was a\r\n`Release` configuration in the project at all!\r\n\r\n![image](https://user-images.githubusercontent.com/840039/50293476-49d73b80-0439-11e9-8a21-2f4661b6345f.png)\r\n\r\nThis would imply that the following `<ProjectReference/>` in\r\n`create-vsix.csproj` would be built in `Debug`:\r\n\r\n    <ProjectReference Include=\"..\\xa-prep-tasks\\xa-prep-tasks.csproj\">\r\n      <Project>{7CE69551-BD73-4726-ACAA-AAF89C84BAF8}</Project>\r\n      <Name>xa-prep-tasks</Name>\r\n      <ReferenceOutputAssembly>False</ReferenceOutputAssembly>\r\n      <Private>False</Private>\r\n    </ProjectReference>\r\n\r\nTo fix this I added these lines to `create-vsix.csproj`:\r\n\r\n    <PropertyGroup Condition=\" '$(Configuration)' == 'Debug' \" />\r\n    <PropertyGroup Condition=\" '$(Configuration)' == 'Release' \" />\r\n\r\nThen the IDE allowed me to select `Release`! Of course, the IDE made\r\nlots of other random changes we won't understand, since the `*.sln`\r\nfile format is not human readable.\r\n\r\nThis is not the same project we are getting an error from, but this\r\n*does* seem like a problem."},{"Id":"8792826765","Type":"PullRequestEvent","CreatedAt":"2018-12-21T17:28:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2554","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] skip _SetLatestTargetFrameworkVersionForPackageReference\" (#2554) at xamarin/xamarin-android","RelatedBody":"During a NuGet restore:\r\n\r\n    msbuild foo.android.csproj /t:Restore\r\n\r\nThe `_SetLatestTargetFrameworkVersionForPackageReference` MSBuild\r\ntarget triggers `_SetLatestTargetFrameworkVersion` and some tasks to\r\nrun:\r\n\r\n- `<ResolveSdks/>`\r\n- `<ValidateJavaVersion/>`\r\n- `<ResolveAndroidTooling/>`\r\n\r\nWe don't really need these to run at all during `Restore`, unless\r\n`$(AndroidUseLatestPlatformSdk)` is `True`. In that case we need to\r\ncalculate what the final `$(TargetFrameworkVersion)` will be.\r\n\r\nOptionally running this target saved ~600ms during a NuGet restore of\r\na single Xamarin.Android project:\r\n\r\n    602 ms  _SetLatestTargetFrameworkVersion           1 calls"},{"Id":"8792074161","Type":"IssuesEvent","CreatedAt":"2018-12-21T14:57:34","Actor":"SpiegelSoft","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2565","RelatedDescription":"Opened issue \"Java.exe exited with Code 2 build error when using an Android class library\" (#2565) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Make an F# Android app from the template. You will have to manually add a reference to System.Numerics (referenced in another issue -- please fix, as this is v annoying)\r\n2. Make an F# Android class library, and reference it from the app.\r\n3. Add the v28 support libraries.\r\n4. The build fails with \"java.exe\" exited with Code 2.\r\n\r\nIf this does not reproduce the issue, there is a repro at https://github.com/xamarin/xamarin-android\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nBuild succeeds\r\n\r\n### Actual Behavior\r\nBuild fails\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Professional 2017  (2)\r\nVersion 15.9.4\r\nVisualStudio.15.Release/15.9.4+28307.222\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nVisual C++ 2017   00370-10200-39966-AA534\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.14.11009.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.9.04012.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60913.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.9.03024.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.3000.2\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   15.9.02046.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.3000.2\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCookiecutter   15.9.18254.1\r\nProvides tools for finding, instantiating and customizing templates in cookiecutter format.\r\n\r\nDotfuscator Community Edition   5.36.0.7050-e77ce80a6\r\nPreEmptive Protection - Dotfuscator CE\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2018.1.2    Build 112.0.20180530.113618\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.3000.2\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.3000.2\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.4\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.3000.2\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10730.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Quantum Development Kit   0 and 1\r\nMicrosoft Quantum Development Kit provides support for developing quantum algorithms in the Q# programming language.\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMLGen Package Extension   1.0\r\nMLGen Package Visual Studio Extension Detailed Info\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js Tools   1.4.21001.1 Commit Hash:8dd15923800d931b153ab9e4de74e42a74eba5e6\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPython   15.9.18254.1\r\nProvides IntelliSense, projects, templates, debugging, interactive windows, and other support for Python developers.\r\n\r\nPython - Django support   15.9.18254.1\r\nProvides templates and integration for the Django web framework.\r\n\r\nPython - IronPython support   15.9.18254.1\r\nProvides templates and integration for IronPython-based projects.\r\n\r\nPython - Profiling support   15.9.18254.1\r\nProfiling support for Python projects.\r\n\r\nR Tools for Visual Studio   1.3.40517.1016\r\nProvides project system, R Interactive window, plotting, and more for the R programming language.\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61810.11040\r\nMicrosoft SQL Server Data Tools\r\n\r\nTelerik Xamarin VSExtensions   2018.4.1121.1\r\nProgress® Telerik® UI for Xamarin Visual Studio extensions\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.9.20918.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28307.208\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.77 (d15-9@e3f40b477)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.4.2 (HEAD/8255f42fc)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.12 (65ec520)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8791567898","Type":"PullRequestEvent","CreatedAt":"2018-12-21T13:13:05","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2564","RelatedDescription":"Opened pull request \"[build-tools] Fix the RunUI task to wait\" (#2564) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/xamarin/xamarin-android/issues/2552\r\n\r\nUse override in the right place. Probably a typo, which made the\r\nlogcat output unusable, because the `AfterCommand` was never called\r\nand we gathered the logcat directly after launching the\r\nactivity. Instead of waiting before collecting the logcat.\r\n\r\nMy wild guess is that older compiler versions worked differenly and so\r\nit worked for some time."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8795986802","Type":"IssuesEvent","CreatedAt":"2018-12-22T22:48:25","Actor":"dansiegel","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4849","RelatedDescription":"Opened issue \"[Enhancement] Make ItemsSource and ItemTemplate more broadly available\" (#4849) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\n\r\nMany apps are data driven. There are many times in which the right control just might be a StackLayout, Grid, or a FlexLayout. All of these layouts layouts could greatly benefit from an ability to simply Bind a collection of data, and have the children more dynamically added with DataTemplates and/or a DataTemplateSelector.\r\n\r\n## API Changes\r\n\r\nAn `itemsSource` and `ItemTemplate` would be added to common layouts like StackLayout, FlexLayout, & possibly the Grid to facilitate dynamically building out data driven views. In the case of the Grid we probably need some additional helper here that would provide greater context when trying to layout the Children (i.e. which row/column/{row|col}span\r\n\r\ne.g.\r\n\r\n```xml\r\n<StackLayout ItemsSource=\"{Binding Monkeys}\">\r\n  <StackLayout.ItemTemplate>\r\n    <DataTemplate>\r\n      <SomeAwesomeView />\r\n    </DataTemplate>\r\n  </StackLayout>\r\n</StackLayout>\r\n```"},{"Id":"8795541426","Type":"IssuesEvent","CreatedAt":"2018-12-22T17:00:09","Actor":"bondarenkod","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4848","RelatedDescription":"Opened issue \"[Enhancement] Title View's content horizontal aligment \" (#4848) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nI'm happy to see this feature in XF but I want to offer a few ideas on how to make this feature more useful. \r\nFirst, I want to point on some current issues - you can't center the content of custom view horizontally relatively the device screen, it depends on if there is Back button or not, Right item(s) or not, etc. \r\nI made a short example, you can follow this link to see them in code, based on the XF's Xamarin.Forms.ControlGallery example in next branch - URL. \r\nHere are a few screenshots to demonstrate the issue:\r\n![the issue](https://bdfss.blob.core.windows.net/shots/2018-12-22_00-39-23-7b7157ff-040c-439e-993e-3eea47bbd669.png)\r\n\r\nAs we can see the logical horizontal center point of the TitleView's content never will be centered by phone's screen horizontal center point. So, we can't place there any image or dynamic content to create something like that (random image from the Internet): \r\n![...](https://bdfss.blob.core.windows.net/shots/2018-12-22_14-46-38-bbc26e2b-6f4f-4b3d-8750-01d2f2b9400c.png)\r\n\r\nSo, I created a few theoretical examples trying to offer a possible solution on how to solve it. In general, we need to fix the size and position of the TitleView's container to allow center its content.\r\n![...](https://bdfss.blob.core.windows.net/shots/2018-12-22_18-33-15-45109e77-6280-4e39-938e-3c0377b61d8c.png)\r\n\r\n#### Default Mode - \r\nThe behavior of the View Container the same as now.\r\n![Default Mode](https://bdfss.blob.core.windows.net/shots/2018-12-22_18-35-37-ba7ce081-e214-469c-a031-8d1ba934bc1d.png)\r\n\r\n#### Ghost Mode - (if it possible to implement this)\r\nThe View Container should use all the navigation bar space. We can overflow some controls by its content, but it's ok for some situations. \r\n![Ghost Mode](https://bdfss.blob.core.windows.net/shots/2018-12-22_18-35-06-134343f7-387e-4ffb-8d0a-d0a1d262d9af.png)\r\n\r\n#### Unified Mode\r\nThe View Container size should take all the free space regarding the navigation bar items and pin to the bar's center.\r\n![Unified Mode](https://bdfss.blob.core.windows.net/shots/2018-12-22_18-35-22-9df15aa1-a16f-4181-a291-ea3d555dd867.png)\r\n\r\n\r\n\r\n## API Changes\r\nIn order to allow developer switch between modes we need a new enum:\r\n```\r\nTitleViewHorizontalAligment {Default, Ghost, Unified}\r\n```\r\n\r\nAnd a new property in the NavigationPage class:\r\n```\r\nBindableProperty TitleViewHorizontalAligmentProperty  \r\n```\r\n"},{"Id":"8795538746","Type":"PullRequestEvent","CreatedAt":"2018-12-22T16:58:07","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4062","RelatedDescription":"Merged pull request \"[XamlC] Test generic parameters to evaluate equality of types\" (#4062) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\ntl; dr `Foo<bool>` and `Foo<string>` are different types\r\n\r\nThe change may be a bit confusing. `InheritsFromOrImplements` compares the results of `ResolvedCached`, but the method strips the generic arguments. . We have already compared the original types at the very beginning of `InheritsFromOrImplements` so we don't have to compare again at all.\r\n\r\n### Issues Resolved ### \r\nI was too lazy to open an issue again.\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [X] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"8795276132","Type":"PullRequestEvent","CreatedAt":"2018-12-22T13:54:19","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4846","RelatedDescription":"Merged pull request \"Make ListView CachingStrategy property visible to Intellisense\" (#4846) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemove `[EditorBrowsable(EditorBrowsableState.Never)]` attribute from `ListView.CachingStrategy` property. This will make it visible to Intellisense for auto-completion in XAML in Visual Studio.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4738 (partially)\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nCreate a new ContentPage; add a ListView in XAML; CachingStrategy should show up in Intellisense.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8794927831","Type":"IssuesEvent","CreatedAt":"2018-12-22T09:21:18","Actor":"moustafashaban","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4847","RelatedDescription":"Opened issue \"HorizontalTextAlignment in Label is not working when setting LineHeight (IOS only)\" (#4847) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nHorizontalTextAlignment in Label is not working when setting LineHeight \r\nNote, this is only in IOS, Android is fine\r\n### Steps to Reproduce\r\n\r\n1. add a label in the contentPage like this\r\n        `    <Label LineHeight=\"2\" FontSize=\"30\" HorizontalOptions=\"Fill\" HorizontalTextAlignment=\"End\" Text=\"Test Text Test Text Text Test Text Text Test Text Text Test Text Text Test Text Test Text Text Test Text Text Test Text Text Test Text Text Test \" />`\r\n2. try with removing the \r\n\r\n> LineHeight=\"2\"\r\n\r\n\r\n### Expected Behavior\r\nHorizontalTextAlignment should work the same when adding or removing LineHeight property\r\n### Actual Behavior\r\nHorizontalTextAlignment is not updated (it is acting only as Left)\r\n\r\nXamarin Library: 3.4.0.1008975"},{"Id":"8794335418","Type":"IssuesEvent","CreatedAt":"2018-12-22T01:06:19","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4844","RelatedDescription":"Closed issue \"Text isn't entered into the correct textfield in android\" (#4844) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI have a form where the user can fill in different bits of information. The form is created using a `TableView`. I have created the following UI:\r\n\r\n```\r\n<TableView>\r\n    <TableSection>\r\n        <ViewCell>\r\n            <StackLayout Orientation=\"Horizontal\">\r\n                <Label Text=\"Field 1\"/>\r\n                <Entry Placeholder=\"Enter text to field one\"/>\r\n            </StackLayout> \r\n        </ViewCell>\r\n        \r\n        <ViewCell>\r\n            <StackLayout Orientation=\"Horizontal\">\r\n                <Label Text=\"Field 2\"/>\r\n                <Entry Placeholder=\"Enter number to field two\" Keyboard=\"Numeric\"/>\r\n            </StackLayout> \r\n        </ViewCell>\r\n    </TableSection>\r\n</TableView>\r\n```\r\n\r\nWhen text is entered into `Field 1`, selecting `Field 2` will bring up a numeric keyboard and quickly swap to a default keyboard. Any text entered will now be entered into `Field 1`. This does not occur when field 2 is the first textbox to be pressed.\r\n\r\n### Steps to Reproduce\r\n\r\nI have included a zip file with this issue of a barebones recreation of the issue\r\n\r\n1. Create a new app and paste the above XAML into the MainPage.xaml\r\n2. Run the app\r\n3. Press textfield 1 and enter text\r\n4. Press textfield 2 and enter text\r\n\r\n### Expected Behavior\r\nTextfield 1 pops up the default keyboard and any text entered populate this textfield.\r\nTextfield 2 pops up the numeric keyboard and any numbers entered populate this textfield.\r\n\r\n### Actual Behavior\r\nWhen pressing textfield 2, the numeric keyboard pops up and then a new keyboard pops up (the same as for textfield 1), any text entered will be placed into textfield one, whilst textfield 2 is highlighted.\r\n\r\n### Basic Information\r\n\r\n- Versions with issue:\r\n3.3.0.637273\r\n3.3.0.967583\r\n3.4.0.1008975\r\n\r\n- Last known good version: ? This code worked in 2.5\r\n- IDE: Visual Studio Community for Mac (7.7.2, build 21)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\nTargeting 27, minimum 21, running on 24\r\n- Android Support Library Version: \r\ntested with 27.0.21 & 28\r\n\r\n- Nuget Packages:\r\nOut of the box\r\n- Affected Devices:\r\nMotorola Moto 4G\r\n\r\n### Screenshots\r\n\r\n![xamarin bug demo 1](https://user-images.githubusercontent.com/33064621/50347906-2989a880-052f-11e9-991a-6a85b8d2d50e.gif)\r\n![xamarin bug demo 2](https://user-images.githubusercontent.com/33064621/50347916-31e1e380-052f-11e9-928a-b9a0b05e509c.gif)\r\n\r\n### Reproduction Link\r\n[EntryBug.zip](https://github.com/xamarin/Xamarin.Forms/files/2703183/EntryBug.zip)\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8793391057","Type":"IssuesEvent","CreatedAt":"2018-12-21T19:44:47","Actor":"jgold6","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5329","RelatedDescription":"Opened issue \"NFCReaderUsageDescription\" (#5329) at xamarin/xamarin-macios","RelatedBody":"### Description\r\n\r\nOn the Source tab of the Info.plist editor, there is no drop down item to select the NFCReaderUsageDescription key as there is for other privacy keys, like NSCameraUsageDescription which has a \"Privacy - Camera Usage Description\" item in the list when you are adding a new entry. \r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open an Info.plist file in Visual Studio Xamarin.iOS project\r\n2. Select the Source tab\r\n3. Click the green + button next to the bottom \"Add new entry\"\r\n4. Scroll through the list looking for \"Privacy - ... \" options\r\n\r\n### Expected Behavior\r\nThere will be a \"Privacy - NFC Reader Usage Description\" entry\r\n\r\n### Actual Behavior\r\nThere is no \"Privacy - NFC Reader Usage Description\" entry\r\n\r\n### Workaround\r\nType in NFCReaderUsageDescription in the property field manually.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: f86726f2-bd5d-4610-867e-44e82f306ca2\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.8.0.5385\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.1\r\n\t1.0.4\r\n\t1.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.1\r\n\t1.0.0-preview2-003121\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.12 (Visual Studio Enterprise)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.12 (Visual Studio Enterprise)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.4.2 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/jongoldberger/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.3   (API level 18)\r\n\t\t4.4   (API level 19)\r\n\t\t5.0   (API level 21)\r\n\t\t5.1   (API level 22)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\t\t8.0   (API level 26)\r\n\t\t8.1   (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.1\r\nSDK Build Tools Version: 28.0.3\r\n\r\nJava SDK: /Users/jongoldberger/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.2\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Mon Nov 12 20:24:46 PST 2018\r\n    root:xnu-4903.231.4~2/RELEASE_X86_64 x86_64\r\n\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\nN/A\r\n\r\n### Example Project (If Possible)\r\n\r\nN/A"},{"Id":"8792826891","Type":"PullRequestEvent","CreatedAt":"2018-12-21T17:28:20","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5328","RelatedDescription":"Opened pull request \"[d15-9][mmp] Add support for mono 5.18 by pulling in libmono-system-native.a\" (#5328) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/5324\r\n- Patch tweaked over multiple commits in master so applied directly instead of cherry-pick"},{"Id":"8792764070","Type":"PullRequestEvent","CreatedAt":"2018-12-21T17:14:00","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5327","RelatedDescription":"Opened pull request \"Bump mono\" (#5327) at xamarin/xamarin-macios","RelatedBody":"Bump mono and add a new test that willl ensure that CVE 2018-8292 was\r\nfixed."},{"Id":"8792586688","Type":"PullRequestEvent","CreatedAt":"2018-12-21T16:36:26","Actor":"monojenkins","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5326","RelatedDescription":"Opened pull request \"[d16-0] [foundation] Fix ICE in NSUrlSessionHandler.CreateConfig on macOS 10.9. Fixes #5309\" (#5326) at xamarin/xamarin-macios","RelatedBody":"For some reason (internal type?) OSX 10.9 does not return the expected\ninstance type when copied.\n\nHowever it turns out that the copy is not required\n\n> Modifying the returned session configuration object does not affect any\n> configuration objects returned by future calls to this method, and does\n> not change the default behavior for existing sessions. It is therefore\n> always safe to use the returned object as a starting point for\n> additional customization.\n\nhttps://developer.apple.com/documentation/foundation/nsurlsessionconfiguration/1411560-defaultsessionconfiguration?language=objc\n\nSo the simpler code should fix the issue.\n\nhttps://github.com/xamarin/xamarin-macios/issues/5309\n\nBackport of #5320.\n\n/cc @spouliot "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":261,"FavoriteCount":110,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":155,"FavoriteCount":68,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":143,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":180,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":34,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":33,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":112,"RawContent":null}]}},"RunOn":"2018-12-23T05:31:10.2217223Z","RunDurationInMilliseconds":4150}