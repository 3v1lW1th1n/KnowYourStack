{"Data":{"Blog":{"FeedItems":[{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null},{"Title":"Integrating Xamarin.com into Microsoft Sites","PublishedOn":"2018-05-15T22:49:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year we&#8217;ve started to make it even easier to find Xamarin information on Microsoft sites, and going forward you will start seeing changes to xamarin.com as we continue to migrate...","Href":"https://blog.xamarin.com/integrating-xamarin-com-microsoft-sites/","RawContent":null},{"Title":"Update Your Xamarin.Mac Apps for 64-bit Today!","PublishedOn":"2018-05-14T18:33:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last June, Apple announced that upcoming macOS releases would only support 32-bit applications “with compromises”. If your Mac application is not 64-bit, we strongly recommend taking action to avoid...","Href":"https://blog.xamarin.com/update-xamarinmac-apps/","RawContent":null},{"Title":"Podcast: Build 2018 Recap for Mobile Developers","PublishedOn":"2018-05-11T18:38:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the news for mobile developers from Build 2018, including Xamarin.Forms 3.0, Hyper-V support for the Android emulator,...","Href":"https://blog.xamarin.com/podcast-build-2018-recap-mobile-developers/","RawContent":null},{"Title":"All Things Xamarin at Build 2018","PublishedOn":"2018-05-09T15:07:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Build 2018 has finally arrived which means exciting news for developers about Microsoft products and technologies, including Xamarin. For those following along at home, we’ve rounded up all...","Href":"https://blog.xamarin.com/xamarin-build-2018/","RawContent":null},{"Title":"Try the Latest Release of Xamarin.Forms 3.0!","PublishedOn":"2018-05-07T19:05:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are overjoyed to bring you our latest stable release of Xamarin.Forms, version 3.0. This is our fastest, richest release to date coupled with fantastic improvements up and down the Xamarin stack...","Href":"https://blog.xamarin.com/xamarin-forms-3-0-released/","RawContent":null},{"Title":"Mobile Development at Microsoft Build 2018","PublishedOn":"2018-05-04T22:03:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s almost time for Microsoft Build 2018 in Seattle, Washington and that means a full three days of keynotes, breakout and theater sessions, workshops, and all the latest updates to your...","Href":"https://blog.xamarin.com/mobile-development-microsoft-build-2018/","RawContent":null},{"Title":"Xamarin Developer Events in May","PublishedOn":"2018-05-02T18:35:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET user groups are hosting recap events around the world all month long to ensure every developer gets the most they can out of Microsoft Build. Continue your Xamarin development...","Href":"https://blog.xamarin.com/xamarin-developer-events-may/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7732815081","Type":"IssuesEvent","CreatedAt":"2018-05-26T02:44:51","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1493","RelatedDescription":"Reopened issue \"\"make prepare\" failing on building xamarin-android from source.\" (#1493) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n(not reproducible in all environments, but I can reproduce on both of my Macs)\r\n\r\n1. Do a new checkout of xamarin-android d15-6 branch (issue affect master also, but output is different) \r\n2. Run **make prepare**\r\n\r\n### Expected Behavior\r\nmake prepare step will succeed\r\n\r\n### Actual Behavior\r\nmake prepare step fails with \r\n```\r\nbuild-tools/scripts/jdk.mk:130: *** missing separator.  Stop.\r\nmake: *** [prepare-external] Error 2\r\n```\r\n\r\n## Notes\r\n\r\nAfter much discussion and testing, it was determined that the command: \r\n```\r\n_DARWIN_JDK_FALLBACK_DIRS := $(wildcard /Library/Java/JavaVirtualMachines/jdk*)\r\n_DARWIN_JDK_ROOT := $(shell ls -dtr $(_DARWIN_JDK_FALLBACK_DIRS) | sort | tail -1)\r\n```\r\nin the jdk.mk file was causing some erroneous characters in the path that was later used in `JI_JVM_PATH`, which is evaluated on line 130 and caused the **make prepare** step to fail with the \"missing separator\" error. \r\n\r\nAfter `_DARWIN_JDK_ROOT` was assigned as above, outputting it with:\r\n```\r\necho _DARWIN_JDK_ROOT=$(_DARWIN_JDK_ROOT)\r\n```\r\n\r\nresulted in very odd output:\r\n```\r\necho _DARWIN_JDK_ROOT=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk\r\n_DARWIN_JDK_ROOT=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk\r\nkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkin/sh: 49m: command not found\r\nmake: *** [jonp] Error 127\r\n```\r\n\r\nThis strange output causes the jdk.mk file to stop on line 130 (using the d15-6 branch of xamarin-android) as the path was obviously not correct in the `JI_JVM_PATH` and apparently was deemed as \"missing a separator.\" \r\n\r\nThat strange output can be reproduced more simply with the following in a makefile: \r\n```\r\n_DARWIN_JDK_ROOT := $(shell ls -d /path/to/any/folder)\r\njonp:\r\n        echo _DARWIN_JDK_ROOT=$(_DARWIN_JDK_ROOT)\r\n```\r\n\r\nI have attached a zipped folder that should serve as a complete repro called testmakefile.zip\r\n[testmakefile.zip](https://github.com/xamarin/xamarin-android/files/1861712/testmakefile.zip)\r\n\r\nNeither Jon P nor Alex K were able to reproduce this issue on their systems.\r\n\r\nI found an SO post that seems to indicate that using `$(shell ls ... )` in a makefile is unreliable and should be avoided, so perhaps we need to modify jdk.mk to avoid using `$(shell ls ...)` and instead use `$(shell find ...)` or `$(wildcard ...)` both of which worked to resolve this issue in the jdk.mk file.\r\n\r\ne.g.:\r\n```\r\n_DARWIN_JDK_ROOT := $(shell find $(_DARWIN_JDK_FALLBACK_DIRS) -depth 0 | sort -n | tail -1)\r\n```\r\nSO post: https://stackoverflow.com/a/10024479/2913599\r\n\r\nRelevant paragraph: \r\n> Finally, as a general rule (not really applicable to this example): as esperanto notes in comments, using the output from ls is not completely reliable (some details depend on file names and sometimes even the version of ls; some versions of ls attempt to sanitize output in some cases). Thus, as l0b0 and idelic note, if you're using GNU make you can use $(wildcard) and $(subst ...) to accomplish everything inside make itself (avoiding any \"weird characters in file name\" issues). (In sh scripts, including the recipe portion of makefiles, another method is to use find ... -print0 | xargs -0 to avoid tripping over blanks, newlines, control characters, and so on.)\r\n\r\n### Version Information\r\nmacOS 10.13.3\r\n\r\n### Log File\r\n\r\n[XAd15-6MakePrepareOutput.txt](https://github.com/xamarin/xamarin-android/files/1861667/XAd15-6MakePrepareOutput.txt)"},{"Id":"7732795810","Type":"IssuesEvent","CreatedAt":"2018-05-26T02:28:28","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1405","RelatedDescription":"Closed issue \"When \"Use Shared Runtime\" is unchecked, any code changes aren't picked up\" (#1405) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. In Xamarin Android project settings, uncheck \"Use Shared Runtime\"\r\n2. Select armembi-v7a as the only supported platform\r\n3. Run a simple Hello World app by pressing F5\r\n4. Stop debugging\r\n5. Comment out a line of code\r\n6. Run again with F5\r\n\r\n### Expected Behavior\r\n\r\nThe changes should be picked up and the commented out line shouldn't execute\r\n\r\n### Actual Behavior\r\n\r\nThe commented out line is still executed. Changes to the source code are not deployed\r\n\r\n### Version Information\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.6.1\r\nVisualStudio.15.Release/15.6.1+27428.2002\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2017   00369-60000-00001-AA324\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# Tools 10.1 for F# 4.1   00369-60000-00001-AA324\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.11.10212.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40214.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51214.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40215.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.7.0-beta3-62620-07. Commit Hash: e873e69306527a0424e97af2985370556f474019\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51212.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61801.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.6.20202.3\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.7.0-beta3-62620-07. Commit Hash: e873e69306527a0424e97af2985370556f474019\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   15.0.27406.00\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27428.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.9.0.749 (9b0fce36d)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.10.58 (cee1369d0)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.2.0.15 (HEAD/22d97e153)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.8.0.20 (1c6f300)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\nXenko.VisualStudio.Package   2.0\r\nXenko VisualStudio Package\n\n> VS bug [#621197](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/621197)"},{"Id":"7732785975","Type":"PullRequestEvent","CreatedAt":"2018-05-26T02:20:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1729","RelatedDescription":"Merged pull request \"[Linux] Add submodules to cross-build libmonodroid for Windows\" (#1729) at xamarin/xamarin-android","RelatedBody":"Adds two components that are required by libmonodroid but not provided with the\r\npackaged mingw on Linux (they are part of the mxe build on macOS):\r\n\r\n  * dlfcn-win32: implementation of dlopen + friends for Windows\r\n  * mman-win32: implementation of mman.h (mmap and friends) for Windows\r\n\r\nThis allows to perform a full build of Xamarin.Android with cross build for Windows on Linux"},{"Id":"7732716487","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:22:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1573","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add Support for `aapt2`. \" (#1573) at xamarin/xamarin-android","RelatedBody":"The AndroidSDK provides a new tool for packaging called `aapt2`. It works slightly differently to the normal `aapt` process. The build process is split into two parts, the first is a `compile` step. This produces a `flata` zip file which contains the compiled `flat` resources. Once all the `flata` archives have been produced the final apk can be built using the `link` step. This step will collect all the `flata` archive and combine them into one. \r\n\r\nThe new build system will make use of this new tooling by default. It will detect the presence of `aapt2` in the `build-tools` folder and if it is present it will be used. If it is not present the old `aapt` tool will be used. Note users can **override** this default behaviour by setting the following in the csproj\r\n\r\n```\r\n<AndroidUseAapt2>False</AndroidUseAapt2>\r\n```\r\n\r\nor providing the value on the command line as an msbuild parameter. \r\n\r\n```\r\n/p:AndroidUseAapt2=False\r\n```\r\n\r\nHow it works\r\n-------------\r\n\r\nThe new `aapt2` tool works in two stages. A `compile` stage and a `link` stage. The `compile` stage will generate a `.flata` archive. This is just a zip file which contains a bunch of compiled resources in a binary `flat` format. That format is internal to the android tooling. \r\n\r\nThe `compiled` invocation is as follows\r\n\r\n    aapt2 compile -o obj/Debug/res/compiled.flata -dir obj/Debug/res\r\n\r\nthis will produce the `obj/Debug/res/compiled.flata` file. We run this kind of invocation for every `res` directory the project is using. So the new build system when in use will also create a `compiled.flata` archive for each support library or library project referenced. It will create these files in the various `$(IntermediateOutputPath)lp\\*` directories.\r\n\r\nThe idea behind this is that if an app resource is changed only the `compiled.flata` for that directory will be updated. All the other resources will be left as they are. This is where we should gain some improvement in build times, since the old `aapt` system would rebuild everything!\r\n\r\nThe `link` step is where all of the `.flata` archive are combined into a resource package. \r\n\r\n    aapt2 link -o resources.apk.bk --manifest Foo.xml --java . --custom-package com.infinitespace_studios.blankforms -R foo2.flata -R foo.flata -v --auto-add-overlay --output-text-symbols obj/Debug/R.txt\r\n\r\nNote the `.flata` archives are passed using the `-R` option. The order is important just like it was for `aapt`. The last item will be the application resources. This allows developers to override resource values if needed. We also generate the `R.txt` file at this point. This is used to generate the design time `Resource.designer.cs` for intelligence.\r\n\r\nThese are the build resources for a Blank Xamarin Forms App. \r\n\r\nTool | Clean Build | Build Touching only C# | Build Touching only Resource |\r\n-----|------------|------------------------|-------------------------------|\r\nAapt | 00:00:51.74| 00:00:08.91| 00:00:25.26 |\r\nAapt2 |00:00:50.70 |00:00:08.64 |00:00:08.44 |\r\n\r\nThe first build is unchanged, but the main gain is when building after only touching a resource. This is because only the .flata file for that directory is compiled. Then ALL the flata archives will be linked again to produce the resources. \r\n\r\nResource Designer Generation\r\n-------------------------------\r\n\r\nThis new system does not parse the `R.java` files for the `Resource.Designer.cs` file. Instead it makes use of the `R.txt` file which we generate as part of the `aapt2 link` call. This is then parsed by the `ManagedResourceParser`. We do still need to generate the `R.java` files since they are needed by the java compiler when compiling the generated java code. But parsing the `R.txt` should be quicker. \r\n\r\nTODO\r\n-------------\r\n- [x] Check design time builds are not slower in VS (or don't break)\r\n- [x] Check build times for some known apps\r\n- [x] Store the aapt2 version\r\n- [x] Add support for clearing the cache .flata files if the aapt2 version changes.\r\n- [x] Get xamarin-android building with `aapt2`.\r\n\r\n\r\n"},{"Id":"7732706045","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:14:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1733","RelatedDescription":"Merged pull request \"[tests] Set timeouts for Adb tasks\" (#1733) at xamarin/xamarin-android","RelatedBody":"Set `Timeout` parameters for `Adb` task calls (and tasks based on\r\nAdb).\r\n\r\nWe are still experiencing issues where `adb` get stuck for unknown\r\nreason. Like in this case where it locked for nearly 7 hours.\r\n\r\n```\r\n01:39:56   adb I 05-25 01:39:56 71573 6448255 adb_io.cpp:75] readx: fd=3 wanted=4 (TaskId:88)\r\n08:18:29 Build timed out (after 600 minutes). Marking the build as aborted.\r\n```\r\n\r\nWe set the timeout in most cases to 1 or 2 minutes, plus these cases\r\nwith longer timeouts:\r\n\r\n * RunInstrumentationTests 30 minutes\r\n * RunUITests 5 minutes"},{"Id":"7732212335","Type":"IssuesEvent","CreatedAt":"2018-05-25T21:30:57","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1651","RelatedDescription":"Reopened issue \"Bundled app initialization error (vs 15.7 preview)\" (#1651) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a xamarin app for Android\r\n2. Enable \"Bundle Assemblies into Native Code\" option : <BundleAssemblies>true</BundleAssemblies> in csproj\r\n3. Build and launch app in VS 2017 15.7 preview\r\n\r\n### Expected Behavior\r\n\r\nNo crash.\r\nThis is actually what happens with VS 2017 15.6.7\r\n\r\n### Actual Behavior\r\n\r\nApp crashes (when using VS 2017 15.7 preview) with the following error:\r\nbundled app initialization error: dlopen failed: cannot locate symbol \"mono_jit_set_aot_mode\" referenced by libmonodroid_bundle_app.so\r\n\r\n### Version Information (causing the error)\r\n\r\nVersion 15.7.0 Preview 5.0\r\nVisualStudio.15.Preview/15.7.0-pre.5.0+27625.0\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nXamarin   4.10.0.440 (943b34d9d)\r\nXamarin.Android SDK   8.3.0.18 (HEAD/1f8462ef1)\r\n\r\n### Version Information (no error)\r\n\r\nVersion 15.6.7\r\nVisualStudio.15.Release/15.6.7+27428.2043\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nXamarin   4.9.0.753 (f0f46392f)\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\n\n> VS bug [#618947](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/618947)"},{"Id":"7732039283","Type":"PullRequestEvent","CreatedAt":"2018-05-25T20:43:29","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1734","RelatedDescription":"Opened pull request \"Bump Java.Interop to fix case-sensitivity issue\" (#1734) at xamarin/xamarin-android","RelatedBody":"Java.Interop builds for Windows are currently broken when cross-compiling on a\r\nsystem with case-sensitive filesystem (e.g. on Linux) due to unmatched case of\r\nthe `FileAPI.h` Windows header (it's `fileapi.h` in mingw)."},{"Id":"7730932906","Type":"PullRequestEvent","CreatedAt":"2018-05-25T16:21:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1710","RelatedDescription":"Merged pull request \"[timing] more configuration options for MSBuild timing\" (#1710) at xamarin/xamarin-android","RelatedBody":"In our private `monodroid` repo, a few features are needed in order to\r\nsetup timing:\r\n- `xabuild` needs to be supported for `Release` configuration\r\n- Need to be able to clone a project not in our repo\r\n- Need to be able to run NuGet restore\r\n\r\nChanges:\r\n- Use `bin\\$(Configuration)\\bin\\xabuild`\r\n- Added `Restore` metadata to `XACaptureBuildTimingProject`, which\r\n  defaults to empty. If specified, `.nuget\\NuGet.exe restore` will be\r\n  called on the value, which should generally be a path to a `*.sln`\r\n  file.\r\n- Added `Repo` metadata to `XACaptureBuildTimingProject`, which\r\n  defaults to empty. If enabled, this script will use git commands to\r\n  clone the repo (with a depth of 1) and move to a specified commit\r\n- Added `Commit` metadata to `XACaptureBuildTimingProject`, which\r\n  defaults to empty. If enabled, a `git checkout` command will run.\r\n- Renamed `DirectoryToClean` to just `DirectoryFullPath` as it did not\r\n  quite make sense for external projects\r\n- Also changed the behavior we had before to be less destructive, it\r\n  now just runs `git clean -dxf` on the folder instead of resetting\r\n  changes in the working copy.\r\n\r\nWhat will need to happen in `monodroid`:\r\n- Run `timing.csproj` with `/p:Configuration=Release`\r\n- Add the following `<ItemGroup />`\r\n\r\n```xml\r\n<XACaptureBuildTimingProject Include=\"$(_SmartHotelProjectDir)SmartHotel.Clients.Android.csproj\">\r\n  <Name>SmartHotel</Name>\r\n  <ShortName>SmartHotel</ShortName>\r\n  <DirectoryFullPath>$([System.IO.Path]::GetFullPath('$(_SmartHotelExternalDir)')</DirectoryFullPath>\r\n  <CSharpFile>$(_SmartHotelProjectDir)MainActivity.cs</CSharpFile>\r\n  <AndroidResourceFile>$(_SmartHotelProjectDir)Resources\\values\\styles.xml</AndroidResourceFile>\r\n  <Repo>https://github.com/Microsoft/SmartHotel360-mobile-desktop-apps.git</Repo>\r\n  <Commit>4540a879fb9c6e6813751b849bf34871ace064de</Commit>\r\n  <Restore>$(_SmartHotelExternalDir)src\\SmartHotel.Clients.Android.sln</Restore>\r\n</XACaptureBuildTimingProject>\r\n```\r\n\r\nWith defined properties:\r\n\r\n    <_SmartHotelExternalDir>$(_TopDir)external\\SmartHotel\\</_SmartHotelExternalDir>\r\n    <_SmartHotelProjectDir>$(_SmartHotelExternalDir)src\\SmartHotel.Clients\\SmartHotel.Clients.Android\\</_SmartHotelProjectDir>"},{"Id":"7730725142","Type":"PullRequestEvent","CreatedAt":"2018-05-25T15:40:37","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1733","RelatedDescription":"Opened pull request \"[tests] Set timeouts for Adb tasks\" (#1733) at xamarin/xamarin-android","RelatedBody":"Set `Timeout` parameters for `Adb` task calls (and tasks based on\r\nAdb).\r\n\r\nWe are still experiencing issues where `adb` get stuck for unknown\r\nreason. Like in this case where it locked for nearly 7 hours.\r\n\r\n```\r\n01:39:56   adb I 05-25 01:39:56 71573 6448255 adb_io.cpp:75] readx: fd=3 wanted=4 (TaskId:88)\r\n08:18:29 Build timed out (after 600 minutes). Marking the build as aborted.\r\n```\r\n\r\nWe set the timeout in most cases to 1 or 2 minutes, plus these cases\r\nwith longer timeouts:\r\n\r\n * RunInstrumentationTests 30 minutes\r\n * RunUITests 5 minutes"},{"Id":"7730561065","Type":"PullRequestEvent","CreatedAt":"2018-05-25T15:10:56","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1731","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Fix Intellisense errors for switch statements\" (#1731) at xamarin/xamarin-android","RelatedBody":"We got a report on slack that intellisense is showing errors on switch\r\nstatements for android resources. This might be because ALL of\r\nthe resource ids are 0 when using the managed parser.\r\n\r\nThis commit mimics the algorithm used by aapt as decribed at [1].\r\nAs a result most of the ids will be unique, which should fix\r\nthe intellisense errors.\r\n\r\n[1] https://stackoverflow.com/questions/6517151/how-does-the-mapping-between-android-resources-and-resources-id-work"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7736249847","Type":"IssuesEvent","CreatedAt":"2018-05-28T00:28:42","Actor":"scastria","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2844","RelatedDescription":"Opened issue \"WPF: Image from stream doesn't work\" (#2844) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhen trying to using a byte array (which becomes a MemoryStream) as the source of an Image, the Image does not render.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Load a byte array from a real image. \r\n2. Turn that byte array into a MemoryStream\r\n3. Turn that into an ImageSource with ImageSource.FromStream(() => memStream)\r\n4. Use that ImageSource on an Image control\r\n5. Image control renders as blank\r\n\r\n### Expected Behavior\r\n\r\nImage control should render the original image the byte array came from\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\nI have already researched and fixed the problem, but since I am not experienced in WPF, I am not confident in my fix.  Therefore, I will show my fix here and you guys can put in the correct fix.\r\n\r\nThe problem is in the ImageRenderer for the WPF platform in the StreamImageSourceHandler class.  It does this:\r\n\r\n\t\t\t\tusing (Stream stream = await ((IStreamImageSource)streamsource).GetStreamAsync(cancelationToken))\r\n\t\t\t\t{\r\n\t\t\t\t\tbitmapimage = new BitmapImage()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tStreamSource = stream\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\nI am guessing there are two things wrong here.  The first is that the using statement will GC the stream which we put inside the bitmapimage so the StreamSource of the bitmapimage becomes unusable after it leaves the using block.  The second thing wrong is that you can't just set the StreamSource.  You have to use BeginInit and EndInit (just like you already do for the UriImageSourceHandler in the same source file).  So my fix is the following:\r\n\r\n                Stream stream = await ((IStreamImageSource)streamsource).GetStreamAsync(cancelationToken);\r\n                bitmapimage = new BitmapImage();\r\n                bitmapimage.BeginInit();\r\n                bitmapimage.StreamSource = stream;\r\n                bitmapimage.EndInit();\r\n\r\nThis fixes the rendering of the Image, but perhaps there is a memory leak with the Stream??  Please investigate and commit a proper fix.  Thanks."},{"Id":"7735654290","Type":"IssuesEvent","CreatedAt":"2018-05-27T17:27:47","Actor":"YZahringer","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2843","RelatedDescription":"Opened issue \"MultiTarget Error with different versions of Xamarin.Forms\" (#2843) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nI am trying to create a multitarget project .NETStandard 1.4 and .NETStandard 2.0 that use two different versions of Xamarin.Forms (2.x & 3.x).\r\n\r\nThis would be useful for creating a compatible library with .NETStandard 1.4 and UWP 10.0.10240 (which is not compatible with .NETStandard 2.0).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create multitarget project `netstandard1.4;netstandard2.0`\r\n2. Add Xamarin.Forms 3.x PackageReference in `netstandard2.0`\r\n3. Add Xamarin.Forms 2.x PackageReference in `netstandard1.4`\r\n4. Build project\r\n\r\n### Expected Behavior\r\nBuild success\r\n\r\n### Actual Behavior\r\nCompilation error `XF002 Xamarin.Forms tasks do not match targets. Please ensure that all projects reference the same version of Xamarin.Forms, and if the error persists, please restart the IDE.`\r\n\r\n### Basic Information\r\n- Version with issue: 2.5.1.527436 & 3.0.0.482510\r\n- IDE: Visual Studio Enterprise 15.7.2\r\n\r\n### Reproduction Link\r\nhttps://github.com/MADSENSE/Madsense.XamarinForms.Sample/tree/MultiTargeting\r\n"},{"Id":"7735614477","Type":"IssuesEvent","CreatedAt":"2018-05-27T17:00:40","Actor":"mkuennek","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2842","RelatedDescription":"Opened issue \"ViewCell in TableView not adapting to changed size on iOS\" (#2842) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhen changing the height of the content in a ViewCell inside a TableView, the cell height is adapted correctly on Android and UWP but not on iOS. Instead the content of the specific cell is larger than the cell itself and appears below the cell's lower border.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a ViewCell to a TableView(HasUnevenRows=\"True\" Intent=\"Settings\").\r\n2. As the cells content set two labels inside a grid or StackLayout below each other. Set the visibility of the first label to true, the second one to false.\r\n3. Add another cell below the first cell in the same table section.\r\n4. Add a gesture recognizer to the Grid/StackLayout that sets the visibility of the second label to true, when the cell is tapped.\r\n\r\n### Expected Behavior\r\nThe cell adapts its size as on Android or UWP.\r\n### Actual Behavior\r\nThe cell content overlaps the lower border of the cell.\r\n### Basic Information\r\n\r\n- Version with issue: 3.0.0.482510\r\n- Last known good version: -\r\n- IDE: Visual Studio 2017 Enterprise 15.1\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.3\r\n- Nuget Packages: Just Xamarin.Forms\r\n- Affected Devices: Simulator as well as the physical devices I tested (iPhone 4S and 8)\r\n\r\n### Screenshots\r\nBefore:\r\n![before](https://user-images.githubusercontent.com/18169039/40588573-d601b72c-61df-11e8-9145-c0999664e36a.PNG)\r\n\r\nAfter:\r\n![after](https://user-images.githubusercontent.com/18169039/40588572-d5e4b8fc-61df-11e8-940b-91b74ea7e423.PNG)\r\n\r\n### Reproduction Link\r\n\r\n[TableViewGrowingCellExample.zip](https://github.com/xamarin/Xamarin.Forms/files/2042826/TableViewGrowingCellExample.zip)\r\n\r\n"},{"Id":"7734181352","Type":"IssuesEvent","CreatedAt":"2018-05-26T21:03:02","Actor":"PetrVobornik","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2841","RelatedDescription":"Opened issue \"Methods RotateYTo and RotateXTo stopped worked in Xamarin.Forms 3.0\" (#2841) at xamarin/Xamarin.Forms","RelatedBody":"Methods RotateYTo and RotateXTo stopped worked in Xamarin.Forms 3.0. I checked it only on UWP (code is in common .NET Standard library). \r\nI tried it in the old (updated) and new (clean) project with the same result. Other animations (RotateTo, ScaleTo...) works fine.\r\nPreviously (v2.5) both animations (X/Y) worked well too. "},{"Id":"7734043891","Type":"IssuesEvent","CreatedAt":"2018-05-26T19:09:36","Actor":"Pinox","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2840","RelatedDescription":"Opened issue \"Compiling .net standard dll's to .net native for Xamarin Forms\" (#2840) at xamarin/Xamarin.Forms","RelatedBody":"My apologies for posting a question rather than filling an issue.\r\n\r\nI currently have XF app and is reading about obfuscation off dll's in the release build. What I don't understand is why can't I build .net standard dll's using the .net native toolchain and then use these in Xamarin Forms.\r\n\r\n\r\nUWP touts the .net native toolchain with massive increase in performance. \r\n          -Up to 60% performance improvement on cold startup times\r\n          -Up to 40% performance improvement on warm startup times\r\n          -Less memory consumption of your app when compiled natively\r\n\r\nWhy can't we have the same in Xamarin Forms .net standard dll's ?  Would this not be easy gains in performance for XF or is there a technical reason like Mono that prevents us from using this ?"},{"Id":"7733947515","Type":"IssuesEvent","CreatedAt":"2018-05-26T17:55:46","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2839","RelatedDescription":"Opened issue \"[Android] Mobile App template in VS 15.7.2 is generating incorrect icon files\" (#2839) at xamarin/Xamarin.Forms","RelatedBody":"Mobile App template for new projects is incorrectly naming icon files. Under mipmap-anydpi-v26, the xml files should be named `ic_launcher.xml` and `ic_launcher_round.xml`. All `icon.png` files should be named `ic_launcher.png` while all `launcher_foreground.png` files should be named `ic_launcher_foreground.png`. Also, the template is missing `ic_launcher_round.png` files. \r\n\r\nEvery mipmap folder should have three images:\r\n\r\n> ic_launcher.png\r\n> ic_launcher_round.png (same resoulution as above)\r\n> ic_launcher_foreground.png (for adaptive icons. resolution is much bigger than the two above)\r\n\r\nwhile mipmap-anydpi-v26 should have two xml files."},{"Id":"7733403747","Type":"IssuesEvent","CreatedAt":"2018-05-26T11:18:49","Actor":"varyamereon","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2838","RelatedDescription":"Opened issue \"UWP does not render Frame CornerRadius\" (#2838) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nUWP does not render Frame with CornerRadius, instead it reverts to square corners. Control is rendered correctly on iOS and Android. https://bugzilla.xamarin.com/show_bug.cgi?id=56914 refers.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Add frame to Xamarin.Forms project.\r\n2. Set corner radius > 0\r\n3. Run project on UWP. Frame ignores corner radius property.\r\n\r\n### Expected Behavior\r\nXamarin.Forms should render a UWP Border control with the background color set inside and corner radius set as appropriate.\r\n\r\n### Actual Behavior\r\nA Border control is rendered correctly but inside another element which shares the same background color, making the control appear like it has square edges.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 3.0.0\r\n- Last known good version: n/a\r\n- IDE: Visual Studio 2017 15.7.2\r\n- Platform Target Frameworks: \r\n  - UWP: 17134\r\n- Affected Devices: Tested on Surface Book.\r\n\r\n### Screenshots\r\n![androidscreenshot](https://user-images.githubusercontent.com/29577046/40575508-0e84c6a0-60de-11e8-8248-e8787b08956b.png)\r\n![uwpscreenshot](https://user-images.githubusercontent.com/29577046/40575548-dc11030e-60de-11e8-879c-4d522cdb254d.png)\r\n\r\n### Reproduction Link\r\nhttps://github.com/varyamereon/FrameIssue\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7733853234","Type":"IssuesEvent","CreatedAt":"2018-05-26T16:47:31","Actor":"ysmoradi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4132","RelatedDescription":"Opened issue \"Xamarin's iOS linker issue with ef core\" (#4132) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Develop an app using Xamarin iOS & ef core 2.0\r\n2. Set linker to full using following xml config\r\n```xml\r\n<linker>\r\n  <assembly fullname=\"Microsoft.EntityFrameworkCore\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.EntityFrameworkCore.Relational\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.EntityFrameworkCore.Sqlite\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.Extensions.Logging\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.Extensions.Options\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.Extensions.Caching.Memory\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"System.Core\">\r\n    <type fullname=\"System.Linq.Expressions.Expression`1\"></type>\r\n    <type fullname=\"System.Linq.Queryable\"></type>\r\n  </assembly>\r\n</linker>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nI know I might add more assemblies/types to linker's xml config, and I was moving forward step by step very well.\r\n\r\nI'd like to see ef core is working with full linker at the end.\r\n\r\n### Actual Behavior\r\n\r\nObject reference null exception at following code:\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/Internal/ProductInfo.cs#L20\r\n\r\nIt seems that ```AssemblyInformationalVersionAttribute``` is somehow removed from Ef Core dll ! But in linker config I said don't alter ef core. I even added followings to linker config:\r\n\r\n```xml\r\n  <assembly fullname=\"mscorlib\">\r\n    <type fullname=\"System.Reflection\"></type>\r\n  </assembly>\r\n```\r\n\r\nThen I copied [the code](https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/Internal/ProductInfo.cs#L20) to my app, but nothing changed.\r\n\r\nI'm sure that linker config is working in other areas, because I was able to fix lots of exceptions by that config.\r\n\r\n### Environment\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.7.1\r\nVisualStudio.15.Release/15.7.1+27703.2000\r\nMicrosoft .NET Framework\r\nVersion 4.7.03062\r\n\r\nInstalled Version: Enterprise\r\n\r\nC# Tools   2.8.0-beta6-62830-08. Commit Hash: e595ee276d14e14bfb3eb323fb57f2aa668bddea\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSnapshot Debugging Extension   1.0\r\nSnapshot Debugging Visual Studio Extension Detailed Info\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.0.442 (396b18cef)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.264 (fc37cd02e)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Live Reload   0.3.27 (remotes/origin/dev@207abf7)\r\nProvides live reload capabilities for Xamarin XAML.\r\n\r\nXamarin.Android SDK   8.3.0.19 (HEAD/342b2ce96)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.10.1.177 (7e782c1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.5.1 (build 22)\r\nInstallation UUID: d1359e59-15d2-4f4b-8b85-f2f70545f5a3\r\nRuntime:\r\n\tMono 5.10.1.47 (2017-12/8eb8f7d5e74) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010047\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Version: 2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nNot Installed\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3.1 (14154.1)\r\nBuild 9E501\r\n\r\n=== Xamarin.Mac ===\r\n\r\nXamarin.Mac not installed. Can't find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.10.1.178 (Visual Studio Community)\r\nHash: 408d3574\r\nBranch: d15-7\r\nBuild date: 2018-05-08 18:56:30-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705010022\r\nGit revision: 60442dd643a20c7a4ae1f8705b8d1de8972eee78\r\nBuild date: 2018-05-15 01:43:39+00\r\nXamarin addins: 4194ffe4868321e4c3477bd56aed579bda4c6fbb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n\r\n```\r\n\r\n### Example Project (If Possible)\r\n\r\nI attached the sample app, just run it (-:\r\n\r\n[XamiOSEfCoreLinker.zip](https://github.com/xamarin/xamarin-macios/files/2041785/XamiOSEfCoreLinker.zip)\r\n\r\n"},{"Id":"7733689982","Type":"IssuesEvent","CreatedAt":"2018-05-26T14:55:12","Actor":"tjismh","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4131","RelatedDescription":"Opened issue \"Unexpected error when building for the App Store VS 15.7.2\" (#4131) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<--\r\nPlease fill in the *entire* template below.\r\n\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significally more time to fix. Please help us help you!\r\n\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Build app with configuration set to App Store\r\n\r\n### Expected Behavior\r\nSuccess build\r\n\r\n### Actual Behavior\r\nBuild fails with following error:\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Xamarin\\iOS\\Xamarin.iOS.Common.targets(791,3): error : Unexpected error - Please file a bug report at http://bugzilla.xamarin.com\r\n3>  System.InvalidOperationException: Sequence contains no matching element\r\n3>    at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate) [0x00012] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/external/corefx/src/System.Linq/src/System/Linq/First.cs:34 \r\n3>    at Registrar.StaticRegistrar.GetBlockProxyAttributeMethod (Mono.Cecil.MethodDefinition method, System.Int32 parameter) [0x00020] in /Users/builder/data/lanes/5944/408d3574/source/xamarin-macios/tools/common/StaticRegistrar.cs:4121 \r\n3>    at Registrar.StaticRegistrar.GetBlockWrapperCreator (Registrar.Registrar+ObjCMethod obj_method, System.Int32 parameter) [0x00011] in /Users/builder/data/lanes/5944/408d3574/source/xamarin-macios/tools/common/StaticRegistrar.cs:4065 \r\n3>    at Registrar.StaticRegistrar.Specialize (Registrar.AutoIndentStringBuilder sb, Registrar.Registrar+ObjCMethod method, System.Collections.Generic.List`1[T] exceptions) [0x0216b] in /Users/builder/data/lanes/5944/408d3574/source/xamarin-macios/tools/common/StaticRegistrar.cs:3683 \r\n3>    at Registrar.StaticRegistrar.Specialize (Registrar.AutoIndentStringBuilder sb) [0x00f1e] in /Users/builder/data/lanes/5944/408d3574/source/xamarin-macios/tools/common/StaticRegistrar.cs:2963 \r\n\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.7.2\r\nVisualStudio.15.Release/15.7.2+27703.2018\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40511.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40424.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.3000.2\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   15.0.40424.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.3000.2\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   2.8.2-beta6-62916-08. Commit Hash: 2ad4aabc7a9dada097e54e544ebba48ab1c05074\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCookiecutter   15.7.18131.1\r\nProvides tools for finding, instantiating and customizing templates in cookiecutter format.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.3000.2\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.3000.2\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.1\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.3000.2\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10420.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPython   15.7.18131.1\r\nProvides IntelliSense, projects, templates, debugging, interactive windows, and other support for Python developers.\r\n\r\nPython - Django support   15.7.18131.1\r\nProvides templates and integration for the Django web framework.\r\n\r\nPython - IronPython support   15.7.18131.1\r\nProvides templates and integration for IronPython-based projects.\r\n\r\nPython - Profiling support   15.7.18131.1\r\nProfiling support for Python projects.\r\n\r\nR Tools for Visual Studio   1.3.40402.1027\r\nProvides project system, R Interactive window, plotting, and more for the R programming language.\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.2-beta6-62916-08. Commit Hash: 2ad4aabc7a9dada097e54e544ebba48ab1c05074\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 56f97a8dd4353d897336941f3e644423b87c794f.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.0.448 (4373404db)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.270 (82d750d12)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.0.19 (HEAD/342b2ce96)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.10.1.178 (408d357)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\nhttps://gist.github.com/tjismh/6ca3caa0d3c25a0cddbb3c82f459946c\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1000859470057132032","CreatedAt":"2018-05-27T22:01:07+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/iNmDBtF3zX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":10,"RawContent":null},{"Id":"1000408472083673089","CreatedAt":"2018-05-26T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/t7b1GH4pMp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":10,"RawContent":null},{"Id":"1000081068660330497","CreatedAt":"2018-05-25T18:28:02+00:00","UserScreenname":"xamarinhq","Text":"Join our open source family and help make https://t.co/3QxhuBuvHc even better: https://t.co/6h1HH1dTAM https://t.co/5go35jCm9N","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":33,"RawContent":null},{"Id":"999682195089436672","CreatedAt":"2018-05-24T16:03:03+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/81dQ3CWoSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":13,"RawContent":null},{"Id":"999389007191728134","CreatedAt":"2018-05-23T20:38:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to secure and version your #Xamarin apps in this guest post on Mobile.BuildTools: https://t.co/NTtOmsdDTl https://t.co/ks5Q3K2joU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":17,"RawContent":null},{"Id":"998953429568573440","CreatedAt":"2018-05-22T15:47:11+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/2E1zBel6Cr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":56,"FavoriteCount":21,"RawContent":null},{"Id":"998352195631435777","CreatedAt":"2018-05-20T23:58:06+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/tO3s7DT35f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":46,"RawContent":null},{"Id":"997143964397572096","CreatedAt":"2018-05-17T15:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/LeAoHXXaA6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"996824503241052160","CreatedAt":"2018-05-16T18:47:36+00:00","UserScreenname":"xamarinhq","Text":"Get started with #XamarinEssentials cross-platform APIs: https://t.co/sW5UgLfeGb https://t.co/Bw4ufWhGP8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":150,"FavoriteCount":79,"RawContent":null},{"Id":"996785351665463297","CreatedAt":"2018-05-16T16:12:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/UZ5l6JaWcB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":11,"RawContent":null},{"Id":"996750580969365506","CreatedAt":"2018-05-16T13:53:51+00:00","UserScreenname":"xamarinhq","Text":"Learn about some small changes coming as we integrate https://t.co/iLyxWYOFfj content into Microsoft sites: https://t.co/RcvPgvkPTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":8,"RawContent":null},{"Id":"996423969308921856","CreatedAt":"2018-05-15T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/2LzUatSvjX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":24,"RawContent":null},{"Id":"996420693481938944","CreatedAt":"2018-05-15T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/aiwQSbkh1B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":24,"RawContent":null},{"Id":"996099804915814401","CreatedAt":"2018-05-14T18:47:54+00:00","UserScreenname":"xamarinhq","Text":"Avoid compromises in the next version of macOS by updating your Xamarin.Mac apps for 64-bit today: https://t.co/IB6aLnHlAq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"996040460673142784","CreatedAt":"2018-05-14T14:52:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/Z262pfyFdQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":24,"RawContent":null},{"Id":"995782486859964418","CreatedAt":"2018-05-13T21:47:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":78,"FavoriteCount":34,"RawContent":null},{"Id":"995405503118430215","CreatedAt":"2018-05-12T20:49:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"995013274252009473","CreatedAt":"2018-05-11T18:50:25+00:00","UserScreenname":"xamarinhq","Text":"On this week's epsiode of the #XamarinPodcast, get the #MSBuild 2018 recap for mobile developers: https://t.co/UhjdSxsePY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":9,"RawContent":null},{"Id":"994975698736570368","CreatedAt":"2018-05-11T16:21:06+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/iXX9NqH3wX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"994612280980660225","CreatedAt":"2018-05-10T16:17:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/TjAVAcfe1a","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2018-05-28T05:30:42.5010243Z","RunDurationInMilliseconds":4184}