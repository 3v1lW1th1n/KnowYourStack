{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4","PublishedOn":"2018-01-05T20:30:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are releasing Preview 1 of ASP.NET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4 on NuGet. This release contains some minor bug fixes and a couple of new features specifically targeted at...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/01/05/announcing-preview-1-of-asp-net-mvc-5-2-4-web-api-5-2-4-and-web-pages-3-2-4/","RawContent":null},{"Title":"Take a Break with Azure Functions","PublishedOn":"2017-12-22T05:41:48+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"So, it&#8217;s the Holidays. The office is empty, the boss is away, and you&#8217;ve got a bit of free time on your hands. How about learning a new skill and having some fun? Azure Functions are a...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/21/take-a-break-with-azure-functions/","RawContent":null},{"Title":"Testing ASP.NET Core MVC web apps in-memory","PublishedOn":"2017-12-07T17:00:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written and submitted by Javier Calvarro Nelson, a developer on the ASP.NET Core MVC team Testing is an important part of the development process of any app. In this blog post...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/07/testing-asp-net-core-mvc-web-apps-in-memory/","RawContent":null},{"Title":"Configuring HTTPS in ASP.NET Core across different platforms","PublishedOn":"2017-11-29T17:00:12+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As the web moves to be more secure by default, it&#8217;s more important than ever to make sure your websites have HTTPS enabled. And if you&#8217;re going to use HTTPS in production its a good idea...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/29/configuring-https-in-asp-net-core-across-different-platforms/","RawContent":null},{"Title":"Improve website performance by optimizing images","PublishedOn":"2017-11-28T18:02:29+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We all want our web applications to load as fast as possible to give the best possible experience to the users. One of the steps to achieve that is to make sure the images we use are as optimized as...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/28/improve-website-performance-by-optimizing-images/","RawContent":null},{"Title":"Orchard Core Beta 1 released","PublishedOn":"2017-11-21T19:32:10+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This is a guest post by Sebastien Ros on behalf of the Orchard community Two years ago, the Orchard community started developing Orchard on .NET Core. After 1,500 commits, 297,000 lines of code, 127...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/21/orchard-core-beta-annoucement/","RawContent":null},{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null},{"Title":"Creating a Minimal ASP.NET Core Windows Container","PublishedOn":"2017-11-09T16:18:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos One of the benefits of containers is their small size, which allows them to be more quickly deployed and more efficiently packed onto a host than virtual machines...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/09/creating-a-minimal-asp-net-core-windows-container/","RawContent":null},{"Title":"Publishing a Web App to an Azure VM from Visual Studio","PublishedOn":"2017-11-01T22:35:42+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We know virtual machines (VMs) are one of the most popular places to run apps in Azure, but publishing to a VM from Visual Studio has been a tricky experience for some. So, we’re pleased to announce...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/01/publishing-a-web-app-to-an-azure-vm-from-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7073099070","Type":"IssuesEvent","CreatedAt":"2018-01-09T04:59:25","Actor":"pingvinius","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2753","RelatedDescription":"Opened issue \"Could not load file or assembly 'System.Text.Encoding.CodePages, Version=4.1.0.0...'\" (#2753) at aspnet/Home","RelatedBody":"_From @pingvinius on January 7, 2018 18:43_\n\nHello,\r\n\r\nI found a strange issue when using CodePagesEncodingProvider of System.Text.Encoding.CodePages assembly.\r\nI did not test other encoding but when I try to return a file in aspnet core mvc application in the following encoding CodePagesEncodingProvider.Instance.GetEncoding(866), the application throws an exception:\r\n\r\n> System.IO.FileNotFoundException: Could not load file or assembly 'System.Text.Encoding.CodePages, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n> \r\n> File name: 'System.Text.Encoding.CodePages, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n>    at aspnet_codepage_test.Controllers.HomeController.GetFile()\r\n>    at lambda_method(Closure , Object , Object[] )\r\n>    at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()\r\n> \r\n\r\nA code is extremely simple:\r\n```\r\npublic IActionResult GetFile()\r\n{\r\n       var encoding = CodePagesEncodingProvider.Instance.GetEncoding(866);\r\n       var bytes = encoding.GetBytes(\"Cтрока\");\r\n\r\n       return File(new MemoryStream(bytes), \"text/plain\", \"111.txt\");\r\n}\r\n```\r\nAs a initial string I use Russian word.\r\n\r\nThe interesting fact is it reproduces only in a production settings, so when I try to run it from a working directory, it works perfectly. Once I publish and run \"dotnet ./project.dll\", it fails.\r\n\r\nI created a sample application to give it to you, so you can reproduce an issue. I also tried to run this application in a docker container, it has the same result.\r\n[aspnet-codepage-test.zip](https://github.com/dotnet/corefx/files/1610082/aspnet-codepage-test.zip)\r\n\r\nI have the following environment:\r\nubuntu 16.04\r\ndotnet version: 2.0.0\r\n\r\nPlease find the steps to reproduce below:\r\n- unzip an archive\r\n- go to an extracted folder\r\n- run: dotnet restore\r\n- run: dotnet build -c Release\r\n- run: dotnet publish -c Release\r\n- run: dotnet ./bin/Release/netcoreapp2.0/publish/aspnet-codepage-test.dll \r\n- go to a browser and open http://localhost:5000/\r\n- find a menu item \"Get file\" at the top of the page and click it\r\n\r\nPlease let me know if I missed something.\r\nThanks in advance.\r\n\n\n_Copied from original issue: dotnet/corefx#26211_"},{"Id":"7072907280","Type":"IssuesEvent","CreatedAt":"2018-01-09T03:32:17","Actor":"arishlabroo","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2752","RelatedDescription":"Opened issue \"Question: Providing fallback for options factory\" (#2752) at aspnet/Home","RelatedBody":"PS: This is a question, not a bug. Please close if not appropriate to ask here.\r\n\r\nI have many configurations, and I end up doing this a lot\r\n`services.Configure<FooBoo>(configuration.GetSection(\"FooBoo\"));`\r\n\r\nwhere `configuration` is always the root, and section name always matches the class name .\r\n\r\nTo try to automate this I looked here https://github.com/aspnet/Options/blob/dev/src/Microsoft.Extensions.Options/OptionsFactory.cs\r\nand implemented a decorator for the options factory like below\r\n```\r\npublic class OptionsFactoryDecorator<TOptions> : IOptionsFactory<TOptions> where TOptions : class, new()\r\n{\r\n    private readonly IEnumerable<IConfigureOptions<TOptions>> _setups;\r\n    private readonly IEnumerable<IPostConfigureOptions<TOptions>> _postConfigures;\r\n    private readonly IOptionsFactory<TOptions> _optionsFactory;\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public OptionsFactoryDecorator(\r\n        IOptionsFactory<TOptions> optionsFactory,\r\n        IEnumerable<IConfigureOptions<TOptions>> setups,\r\n        IEnumerable<IPostConfigureOptions<TOptions>> postConfigures,\r\n        IConfiguration configuration)\r\n    {\r\n        _configuration = configuration;\r\n        _optionsFactory = optionsFactory;\r\n        _postConfigures = postConfigures;\r\n        _setups = setups;\r\n    }\r\n\r\n    public TOptions Create(string name)\r\n    {\r\n        if (name != Options.DefaultName || _setups.Any() || _postConfigures.Any())\r\n        {\r\n            return _optionsFactory.Create(name);\r\n        }\r\n        var options = new TOptions();\r\n        ConfigurationBinder.Bind(_configuration.GetSection(typeof(TOptions).Name), options);\r\n        return options;\r\n    }\r\n}\r\n```\r\nAnd just using structuremap as an example, i can simply do\r\n`registry.For(typeof(IOptionsFactory<>)).DecorateAllWith(typeof(OptionsFactoryDecorator<>));\r\n`\r\n\r\nAnd everything works 😱 . I dont need any \r\n`services.Configure<FooBoo>(configuration.GetSection(\"FooBoo\"));`\r\n\r\n\r\nIs there a reason why I should absolutely not do it?\r\n\r\n"},{"Id":"7072378310","Type":"IssuesEvent","CreatedAt":"2018-01-09T00:11:12","Actor":"tonysneed","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2751","RelatedDescription":"Opened issue \"Publish with async Main - Error CS8107: Feature 'async main' is not available in C# 7.0\" (#2751) at aspnet/Home","RelatedBody":"When I publish an ASP.NET Core Web API that has an async Main method: `public static async Task Main`, I get the following error:\r\n\r\n```\r\nProgram.cs(13,29): Error CS8107: Feature 'async main' is not available in C# 7.0. Please use language version 7.1 or greater.\r\nCSC(0,0): Error CS5001: Program does not contain a static 'Main' method suitable for an entry point\r\n```\r\n\r\nThis occurs even _after_ setting the **language version** of each project in the solution to **C# 7.2** for _both Debug and Release_ build configurations.\r\n\r\nVisual Studio 2017 Version: 15.5.2\r\nOS Version: Windows 10 Pro Version 1709"},{"Id":"7072338918","Type":"IssuesEvent","CreatedAt":"2018-01-08T23:57:09","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2750","RelatedDescription":"Opened issue \"Review naming of ITrackingConsentFeature and CanTrack\" (#2750) at aspnet/Home","RelatedBody":"@blowdart @DamianEdwards \r\nhttps://github.com/aspnet/HttpAbstractions/blob/6558c2bd07dc3e40c477a33ee0ec4663a8ff81a7/src/Microsoft.AspNetCore.Http.Features/ITrackingConsentFeature.cs\r\nhttps://github.com/aspnet/templating/pull/213/files"},{"Id":"7071975391","Type":"IssuesEvent","CreatedAt":"2018-01-08T22:11:19","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2746","RelatedDescription":"Closed issue \"Add support for CancellationTokens in AuthorizationHandler\" (#2746) at aspnet/Home","RelatedBody":"The following methods are missing CancellationToken parameters in Microsoft.AspNetCore.Authorization.AuthorizationHandler:\r\n\r\n```\r\npublic virtual Task HandleAsync( AuthorizationHandlerContext context );\r\nprotected abstract Task HandleRequirementAsync( AuthorizationHandlerContext context, TRequirement requirement );\r\n```\r\nMicrosoft.AspNetCore.Authorization Version 2.0.1.0"},{"Id":"7071972603","Type":"IssuesEvent","CreatedAt":"2018-01-08T22:10:39","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2747","RelatedDescription":"Closed issue \"[Question] 1.1 -> 2.0 ITagHelperTypeResolver\" (#2747) at aspnet/Home","RelatedBody":"I am attempting to upgrade my asp.net core 1.1 mvc application to 2.0\r\n\r\nI was previously deriving an: `ITagHelperTypeResolver`\r\n\r\nThis no longer seems to compile after the upgrade to 2.0. I can no longer find types:\r\n- ITagHelperTypeResolver\r\n- ErrorSink\r\n\r\n\r\n```csharp\r\n public class AssemblyNameGlobbingTagHelperTypeResolver : ITagHelperTypeResolver\r\n    {\r\n       \r\n        private static readonly System.Reflection.TypeInfo ITagHelperTypeInfo = typeof(ITagHelper).GetTypeInfo();\r\n\r\n        protected TagHelperFeature Feature { get; }\r\n\r\n        public AssemblyNameGlobbingTagHelperTypeResolver(ApplicationPartManager manager)\r\n        {\r\n            if (manager == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(manager));\r\n            }\r\n\r\n            Feature = new TagHelperFeature();\r\n            manager.PopulateFeature(Feature);\r\n\r\n            // _manager = manager;\r\n\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public IEnumerable<Type> Resolve(\r\n            string name,\r\n            SourceLocation documentLocation,\r\n            ErrorSink errorSink)\r\n        {\r\n            if (errorSink == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(errorSink));\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(name))\r\n            {\r\n                var errorLength = name == null ? 1 : Math.Max(name.Length, 1);\r\n                errorSink.OnError(\r\n                    documentLocation,\r\n                    \"Tag Helper Assembly Name Cannot Be Empty Or Null\",\r\n                    errorLength);\r\n\r\n                return Type.EmptyTypes;\r\n            }\r\n\r\n\r\n            IEnumerable<TypeInfo> libraryTypes;\r\n            try\r\n            {\r\n                libraryTypes = GetExportedTypes(name);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                errorSink.OnError(\r\n                    documentLocation,\r\n                    $\"Cannot Resolve Tag Helper Assembly: {name}, {ex.Message}\",\r\n                    name.Length);\r\n\r\n                return Type.EmptyTypes;\r\n            }\r\n\r\n            return libraryTypes;\r\n\r\n        }\r\n\r\n\r\n        /// <inheritdoc />\r\n        protected IEnumerable<System.Reflection.TypeInfo> GetExportedTypes(string assemblyNamePattern)\r\n        {\r\n            if (assemblyNamePattern == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(assemblyNamePattern));\r\n            }\r\n\r\n            var results = new List<System.Reflection.TypeInfo>();\r\n\r\n            for (var i = 0; i < Feature.TagHelpers.Count; i++)\r\n            {\r\n                var tagHelperAssemblyName = Feature.TagHelpers[i].Assembly.GetName();\r\n\r\n                if (assemblyNamePattern.Contains(\"*\")) // is it actually a pattern?\r\n                {\r\n                    if (tagHelperAssemblyName.Name.Like(assemblyNamePattern))\r\n                    {\r\n                        results.Add(Feature.TagHelpers[i]);\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // not a pattern so treat as normal assembly name.\r\n                var assyName = new AssemblyName(assemblyNamePattern);\r\n                if (AssemblyNameComparer.OrdinalIgnoreCase.Equals(tagHelperAssemblyName, assyName))\r\n                {\r\n                    results.Add(Feature.TagHelpers[i]);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        private class AssemblyNameComparer : IEqualityComparer<AssemblyName>\r\n        {\r\n            public static readonly IEqualityComparer<AssemblyName> OrdinalIgnoreCase = new AssemblyNameComparer();\r\n\r\n            private AssemblyNameComparer()\r\n            {\r\n            }\r\n\r\n            public bool Equals(AssemblyName x, AssemblyName y)\r\n            {\r\n                // Ignore case because that's what Assembly.Load does.\r\n                return string.Equals(x.Name, y.Name, StringComparison.OrdinalIgnoreCase) &&\r\n                       string.Equals(x.CultureName ?? string.Empty, y.CultureName ?? string.Empty, StringComparison.Ordinal);\r\n            }\r\n\r\n            public int GetHashCode(AssemblyName obj)\r\n            {\r\n                var hashCode = 0;\r\n                if (obj.Name != null)\r\n                {\r\n                    hashCode ^= obj.Name.GetHashCode();\r\n                }\r\n\r\n                hashCode ^= (obj.CultureName ?? string.Empty).GetHashCode();\r\n                return hashCode;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n```\r\n\r\nWhich I would register on startup:\r\n\r\n```csharp\r\n  services.AddSingleton<ITagHelperTypeResolver, AssemblyNameGlobbingTagHelperTypeResolver>();\r\n\r\n```\r\nBasically this let me use wildcard matching on assembly names for my `addTagHelper` directives.\r\n\r\n\r\n  \r\n  "},{"Id":"7071231642","Type":"IssuesEvent","CreatedAt":"2018-01-08T19:15:16","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2280","RelatedDescription":"Closed issue \"Runtime store eula under program files by itself\" (#2280) at aspnet/Home","RelatedBody":"Was just browsing and noticed that under program files there is a eula for the runtime store\"\r\n\r\n\"C:\\Program Files\\Microsoft ASP.NET Core Runtime Package Store\\2.0\\eula.rtf\"\r\n\r\nI'm pretty sure that was intended to go with all the other files in the runtime store and not in its own place all by itself."},{"Id":"7071203041","Type":"IssuesEvent","CreatedAt":"2018-01-08T19:08:32","Actor":"jbagga","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2318","RelatedDescription":"Closed issue \"Exception, when origin is null in CorsPolicyExtensions.cs \" (#2318) at aspnet/Home","RelatedBody":"_From glatzert on Wednesday, December 20, 2017 6:31:36 AM_\r\n\r\nAfter Login with ADFS, Chrome produces an POST request to my ASP.net Application, with the following Contents:\r\n\r\n*Metadata*\r\n> Request URL:http://localhost:11645/signin-oidc\r\n> Request Method:POST\r\n> Status Code:500 Internal Server Error\r\n> Remote Address:[::1]:11645\r\n> Referrer Policy:no-referrer-when-downgrade\r\n\r\n*Request Headers*\r\n> Provisional headers are shown\r\n> Content-Type:application/x-www-form-urlencoded\r\n> Origin:null\r\n> Upgrade-Insecure-Requests:1\r\n> User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36\r\n\r\n`CorsPolicyExtension.IsOriginAnAllowedSubdomain` will now throw the following:\r\n> System.UriFormatException: Invalid URI: The format of the URI could not be determined.\r\n\r\nWhich happens, because origin, is `null` and still gets passed to the check function.\r\n\r\nAddendum:\r\nOrigin is not `null` as I triaged on my first try- it's `\"null\"` - which might or might not be a bug in Chrome ...\r\n\r\n_Copied from original issue: aspnet/CORS#137_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7072665356","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:58:43","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1257","RelatedDescription":"Merged pull request \"Invoke Multiple Users\" (#1257) at aspnet/SignalR","RelatedBody":"Part of #734 "}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7072963999","Type":"PullRequestEvent","CreatedAt":"2018-01-09T03:55:02","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7206","RelatedDescription":"Merged pull request \"Adds support for recompilation of views/pages\" (#7206) at aspnet/Mvc","RelatedBody":"See the individual commits for details"},{"Id":"7072608615","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:37:20","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7213","RelatedDescription":"Merged pull request \"update dependencies\" (#7213) at aspnet/Mvc","RelatedBody":"/cc @ryanbrandenburg "},{"Id":"7072495446","Type":"IssuesEvent","CreatedAt":"2018-01-09T00:54:33","Actor":"jernejk","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7214","RelatedDescription":"Opened issue \"Exception Filters returns an empty body in asp.net-core 2.0\" (#7214) at aspnet/Mvc","RelatedBody":"I have same problem as https://github.com/aspnet/Mvc/issues/5594 and the potential fix doesn't work.\r\nWhen Result is set, status code is changed (422) but response is empty.\r\n\r\nI tried different combinations of setting up the `actionExecutedContext.Exception` and `actionExecutedContext.ExceptionHandled`.\r\n\r\nInitial code:\r\n``` CSharp\r\npublic override void OnActionExecuted(ActionExecutedContext actionExecutedContext)\r\n{\r\n    if (actionExecutedContext.Exception is ModelValidationException validationException)\r\n    {\r\n        var result = new BadRequestObjectResult(validationException.Errors) { StatusCode = 422 };\r\n        actionExecutedContext.Exception = null;\r\n        actionExecutedContext.ExceptionHandled = true;\r\n        actionExecutedContext.Result = result;\r\n    }\r\n\r\n    base.OnActionExecuted(actionExecutedContext);\r\n}\r\n```\r\n\r\nAs well as suggested workaround:\r\n``` CSharp\r\npublic override void OnActionExecuted(ActionExecutedContext actionExecutedContext)\r\n{\r\n    if (actionExecutedContext.Exception is ModelValidationException validationException)\r\n    {\r\n        actionExecutedContext.ExceptionHandled = false; // mark exception as handled\r\n        actionExecutedContext.HttpContext.Response.Clear();\r\n        actionExecutedContext.HttpContext.Response.StatusCode = 422;\r\n        actionExecutedContext.HttpContext.Response.ContentType = new MediaTypeHeaderValue(\"application/json\").ToString();\r\n        string json = JsonConvert.SerializeObject(validationException.Errors);\r\n        actionExecutedContext.HttpContext.Response.WriteAsync(json, Encoding.UTF8).Wait();\r\n    }\r\n\r\n    base.OnActionExecuted(actionExecutedContext);\r\n}\r\n```\r\n\r\nIt works as expected on `OnActionExecuting`:\r\n``` CSharp\r\npublic override void OnActionExecuting(ActionExecutingContext actionContext)\r\n{\r\n    if (!actionContext.ModelState.IsValid)\r\n    {\r\n        //422 - Unprocessable Entity\r\n        var result = new BadRequestObjectResult(actionContext.ModelState) { StatusCode = 422 };\r\n        actionContext.Result = result;\r\n    }\r\n}\r\n```"},{"Id":"7072359460","Type":"PullRequestEvent","CreatedAt":"2018-01-09T00:04:17","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7213","RelatedDescription":"Opened pull request \"update dependencies\" (#7213) at aspnet/Mvc","RelatedBody":"/cc @ryanbrandenburg "},{"Id":"7072337853","Type":"IssuesEvent","CreatedAt":"2018-01-08T23:56:46","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6730","RelatedDescription":"Reopened issue \"IDisplayMetadataProvider result seems to be cached somehow?\" (#6730) at aspnet/Mvc","RelatedBody":"I'm writing an integration test for my globalization infrastructure which works roughly like this:\r\n\r\n1. Surf to the page\r\n2. Check that the property (which is null, and outputted via the DisplayFor html helper) shows the DisplayFormat.NullDisplayText\r\n3. Change the culture\r\n4. Surf again to the page\r\n5. Check that the property now shows the localized DisplayFormat.NullDisplayText\r\n\r\nTo make the NullDisplayText work we have the following `IDisplayMetadataProvider` registered with the `ModelMetadataDetailsProviders`:\r\n\r\n    public void CreateDisplayMetadata (DisplayMetadataProviderContext context)\r\n    {\r\n      var localizer = _localizationOptions.DataAnnotationLocalizerProvider(\r\n          context.Key.ContainerType ?? context.Key.ModelType,\r\n          _stringLocalizerFactory);\r\n\r\n      if (localizer == null)\r\n        return;\r\n\r\n      var displayFormatAttribute = context.Attributes.OfType<DisplayFormatAttribute>().FirstOrDefault();\r\n      if (!string.IsNullOrEmpty(displayFormatAttribute?.NullDisplayText))\r\n        context.DisplayMetadata.NullDisplayText = localizer[displayFormatAttribute.NullDisplayText];\r\n    }\r\n\r\nThe `CreateDisplayMetadata` method is called once when I initially surf to the page, however, after changing the culture and re-visiting the page it is not called again and therefore the nulldisplaytext is not localized.\r\n\r\nAny ideas? Is this a bug in the caching algorithm? Is there any workaround?"},{"Id":"7072331603","Type":"IssuesEvent","CreatedAt":"2018-01-08T23:54:48","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6730","RelatedDescription":"Closed issue \"IDisplayMetadataProvider result seems to be cached somehow?\" (#6730) at aspnet/Mvc","RelatedBody":"I'm writing an integration test for my globalization infrastructure which works roughly like this:\r\n\r\n1. Surf to the page\r\n2. Check that the property (which is null, and outputted via the DisplayFor html helper) shows the DisplayFormat.NullDisplayText\r\n3. Change the culture\r\n4. Surf again to the page\r\n5. Check that the property now shows the localized DisplayFormat.NullDisplayText\r\n\r\nTo make the NullDisplayText work we have the following `IDisplayMetadataProvider` registered with the `ModelMetadataDetailsProviders`:\r\n\r\n    public void CreateDisplayMetadata (DisplayMetadataProviderContext context)\r\n    {\r\n      var localizer = _localizationOptions.DataAnnotationLocalizerProvider(\r\n          context.Key.ContainerType ?? context.Key.ModelType,\r\n          _stringLocalizerFactory);\r\n\r\n      if (localizer == null)\r\n        return;\r\n\r\n      var displayFormatAttribute = context.Attributes.OfType<DisplayFormatAttribute>().FirstOrDefault();\r\n      if (!string.IsNullOrEmpty(displayFormatAttribute?.NullDisplayText))\r\n        context.DisplayMetadata.NullDisplayText = localizer[displayFormatAttribute.NullDisplayText];\r\n    }\r\n\r\nThe `CreateDisplayMetadata` method is called once when I initially surf to the page, however, after changing the culture and re-visiting the page it is not called again and therefore the nulldisplaytext is not localized.\r\n\r\nAny ideas? Is this a bug in the caching algorithm? Is there any workaround?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7072393209","Type":"PullRequestEvent","CreatedAt":"2018-01-09T00:16:36","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1555","RelatedDescription":"Opened pull request \"Add Store.MaxLengthForKeys\" (#1555) at aspnet/Identity","RelatedBody":"If set this will set max length of things we use for composite keys in\r\nUserTokens/Logins\r\n\r\nNeeded for https://github.com/aspnet/templating/issues/62\r\n\r\n@ajcvickers "},{"Id":"7071524749","Type":"IssuesEvent","CreatedAt":"2018-01-08T20:23:29","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1387","RelatedDescription":"Closed issue \"Shorten folder names to avoid max_path issues\" (#1387) at aspnet/Identity","RelatedBody":"Discussed in-person with @javiercn. We should try to shorten the folder names in this repo to avoid max_path issues on Windows.\r\n\r\nE.g. opening in VS can cause this:\r\n![image](https://user-images.githubusercontent.com/2696087/29591173-2c231682-8752-11e7-99a5-65f43bbf04af.png)\r\n"},{"Id":"7071523406","Type":"PullRequestEvent","CreatedAt":"2018-01-08T20:23:09","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1552","RelatedDescription":"Closed pull request \"Shorten folder names\" (#1552) at aspnet/Identity","RelatedBody":"Fixes https://github.com/aspnet/Identity/issues/1387\r\n\r\nGenerally drop Microsoft.AspNetCore.Identity from all folder names, resulting structure is basically:\r\n\r\n```\r\nCore\r\nStores\r\nIdentity\r\nSpecification.Tests\r\nEntityFrameworkCore\r\nService.*\r\nAspNetCoreCompat\r\n```\r\n\r\n@natemcmaster @javiercn @ajcvickers \r\n  "},{"Id":"7059095918","Type":"PullRequestEvent","CreatedAt":"2018-01-04T23:23:01","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1554","RelatedDescription":"Merged pull request \"Merge release/2.0.0 (without changes)\" (#1554) at aspnet/Identity","RelatedBody":"Resolves #1522 \r\n\r\nChanges on this branch were already cherry-picked to dev\r\n  "}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7072502728","Type":"PullRequestEvent","CreatedAt":"2018-01-09T00:57:21","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2247","RelatedDescription":"Opened pull request \"Improve server shutdown logic\" (#2247) at aspnet/KestrelHttpServer","RelatedBody":"- Ensure connections abort if they don't close gracefully.\r\n- Ensure tests fail if connections don't close during shutdown.\r\n\r\n#2223 "},{"Id":"7071045415","Type":"PullRequestEvent","CreatedAt":"2018-01-08T18:31:31","Actor":"javiercn","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2246","RelatedDescription":"Opened pull request \"[Do not merge] Cert file default path\" (#2246) at aspnet/KestrelHttpServer","RelatedBody":"Makes kestrel search for a certificate on a default path based on the presence of a password in config for the default certificate and no explicit path configured for it.\r\n\r\nThis pattern supports containers scenarios where the path changes between the app being run in a container vs the app being run on the host."},{"Id":"7067540680","Type":"IssuesEvent","CreatedAt":"2018-01-08T00:21:23","Actor":"rynowak","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2245","RelatedDescription":"Opened issue \"ModelState error \"Request timed out.\" on OnActionExecutionAsync\" (#2245) at aspnet/KestrelHttpServer","RelatedBody":"_From @clement911 on January 5, 2018 2:30_\n\nI'm using asp.net core mvc 2.0 on full .net and I'm experiencing an issue in an azure prod web app that I don't understand.\r\n\r\nI have a custom `IAsyncActionFilter` and in the `OnActionExecutionAsync` I inspect `context.ModelState` and sometimes there is an error saying \"Request timed out.\" (Key is empty string)\r\n\r\nIf I understand correctly OnActionExecutionAsync executes directly after the model binding, so how could there be a timeout? and how do I track the source?\r\n\r\n```\r\npublic async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)\r\n        {\r\n            if (!context.ModelState.IsValid)\r\n            {\r\n                //context.ModelState dictionary contains a \"Request timed out.\" entry.\r\n...\r\n            }\r\n...\r\n        }\r\n```\r\n\r\nThanks\n\n_Copied from original issue: aspnet/Mvc#7195_"},{"Id":"7062496075","Type":"IssuesEvent","CreatedAt":"2018-01-05T17:26:20","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2182","RelatedDescription":"Closed issue \"Change ITlsApplicationProtocolFeature.ApplicationProtocol to Span<byte>\" (#2182) at aspnet/KestrelHttpServer","RelatedBody":"https://github.com/aspnet/KestrelHttpServer/blob/76de77746dd900058f7bd49f66debdd245cf9260/src/Kestrel.Core/Features/ITlsApplicationProtocolFeature.cs#L7-L10\r\n\r\nThis property should not be represented as a string because the ALPN spec intentionally defines it as an \"opaque byte string\" and not a textual string:\r\n\r\n> Protocols are named by IANA-registered, opaque, non-empty byte strings, as described further in Section 6 (\"IANA Considerations\") of this document.\r\n>\r\n> https://tools.ietf.org/html/rfc7301#section-3.1\r\n\r\nThe fact that the currently-registered values are all valid UTF-8 strings is not required by the spec so we shouldn't require it in our type.\r\n\r\nWe could use `byte[]`, which is relatively safe performance-wise since in fast paths this will almost always be set to an existing constant value. Or we could go with the new hotness and make it return `ReadOnlyMemory<byte>`. Probably the latter is best even if we always just end up backing it with a predefined constant array.\r\n\r\n/cc @benaadams @Tratcher @davidfowl "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7073142959","Type":"IssuesEvent","CreatedAt":"2018-01-09T05:17:53","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1921","RelatedDescription":"Opened issue \"Add Razor build server\" (#1921) at aspnet/Razor","RelatedBody":""},{"Id":"7073140753","Type":"IssuesEvent","CreatedAt":"2018-01-09T05:17:05","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1740","RelatedDescription":"Closed issue \"Big Rock: Eliminate Roslyn from Inner Loop Startup\" (#1740) at aspnet/Razor","RelatedBody":"## Razor 101\r\n\r\nRazor is an HTML templating language. Your `.cshtml` files are code-generated to C# and then emitted into one more assemblies. The mapping is generally one `.cshtml` file -> one C# class. These assemblies are loaded by an application and used to render HTML.\r\n\r\nYou can include **Tag Helpers** which are .Net classes that perform dynamic HTML rendering. Tag Helpers are bound to HTML tags during code-generation. Creating a Tag Helper only requires the declaration of a .NET class, which could be declared in the project hosting Razor. The set of Tag Helpers, their bindings to HTML structure, and .Net Type must be known to correctly perform Razor code-generation.\r\n\r\nYou can include **Directives** via .Net code that extend the Razor engine to declare additional *reserved words* in the Razor language with arbitrary semantics - as an example, MVC provides `@inject <TypeName> <PropertyName>` to leverage DI. The set of Directives and their structure must be known to correctly parse Razor code. The Razor engine extensibility that processes custom directives must be known to correctly perform Razor code-generation.\r\n\r\nYou can also include **Imports** files that act like `#include ...` in C, but only for directives. The set of Imports must be known to correctly perform Razor code-generation.\r\n\r\n---------------\r\n\r\nMost of the user-facing experience that external people think of as Razor is actually delivered as extensibility by MVC. MVC is the one that provides a built-in set of Tag Helpers, many of the built-in Directives and hooks up Imports.\r\n\r\nWe are working towards delivering good tooling experiences that aren't hardcoded to MVC's flavor of Razor, but in practice that's what exists today. Any new tooling experiences that are coupled to MVC create more debt for us.\r\n\r\n### Conclusions\r\n\r\nA few conclusions you can draw from this that are important for any discussion about how Razor performs compilation:\r\n1. Razor is not a simple single-file-generator\r\n2. Razor is extensible and this extensibility is part of our primary use case (MVC)\r\n3. Razor code-generation depends on the App as an input (Tag Helpers)\r\n\r\n## Summary of issues\r\nUsing Roslyn in-process has an outsized impact on Razor's contribution to inner loop performance. We think that the minimum JIT/loader/warmup cost for doing in-process compilation with Razor is 2s. Performing actual 'Razor' tasks during code-generation/compilation have a trivial contribution to the performance.\r\n\r\nThe only way(s) to bypass this speed-of-light limitation are to:\r\n1. Already have done compilation (duh)\r\n2. Do compilation out-of-process using a persistent server\r\n\r\nWe plan to do both of these - but only at build-time. When a view changes during local development we will still run Roslyn in-process to compile it.\r\n\r\n## Philosophy\r\n\r\nRazor for .NET Core was very much build/designed from the point of view of a runtime component that does compilation - rather than a compiler as-a-service. The runtime model is primary - and much of our user-facing configuration and extensibility reflects the 'runtime first' approach.\r\n\r\nThe significant challenge in this area is we've given extenders a lot of freedom to do things at runtime that can't be dealt with by tools in a predictable fashion - we need to walk back from this, and do so in a way that will be OK for a minor release.\r\n\r\n----\r\n\r\nThe escape hatch here is that if you turn off Razor view AOT compilation - you fall back to the previous behavior. It will be slow but you will be happy (and slow).\r\n\r\n## Plan of record\r\n\r\nThis is a rough plan that I've sketched out along with @davidfowl and a few others that attempts to build the minimum complexity into our runtime behavior while re-using our existing assets.\r\n\r\nHere are the primary pieces, which I'll break down in detail:\r\n1. Make AOT compiled views updatable (Runtime Change)\r\n2. Run Razor AOT compilation on build (MSBuild)\r\n3. Pivot Razor AOT compilation to use a build server (Build Server)\r\n\r\nWe can make Razor AOT compilation fast by using a build server - that way it stays warm. Then we can turn it on for build (rather than publish) by default - then it was always happen before you start the app - this is great if it's fast. Then we need to make AOT compiled views updatable so that we can preserve our existing UX.\r\n\r\n\r\n### Step 1: Make AOT compiled views updatable\r\n\r\nRazor has support for AOT compilation (called precompilation) of views as well as runtime compilation. When rending AOT-compiled views we already avoid loading/JITing Roslyn 👍 \r\n\r\nAOT compiled views have the limitation that we will not recompile them at runtime when the view files change. This is a simpliying assumption for technical reasons on our part - but we've come up with other (non-perf) scenarios where we want this to work.\r\n\r\n#### Current state\r\nThe default for inner loop is runtime (in-process) compilation because AOT compilation does not support updates. The default for published apps (in 2.0) is AOT compilation - because we're willing to add the additional 2-3 seconds of time for publishing.\r\n\r\nAOT compilation is done with a CLI tool that loads your app and uses its DI'ed services to drive the compilation process. Extensibility for AOT compilation is in-band and is extensible in the same ways that runtime compilation is extensible.\r\n\r\nToday a view is **modal**. If we have an AOT compiled view we will **never** hook up to file change events or validate that the compiled view is *fresh* when we access it. It can never be invalidated. We never built updatability into AOT compiled views because it's been low on our priority list.\r\n\r\n#### Desired state\r\n\r\nWhen we perform AOT view compilation we need to stamp each view with a hash for each of its inputs:\r\n- The app assembly's SHA\r\n- The view source code SHA\r\n- The SHA of each import source file\r\n\r\nUsing the App's SHA allows us to leverage what MSBuild is already doing for dirty-checking whether the App or any of its dependencies have changed. My expectation is that if the App had to rebuild due to a code change or dependency change we will also need to update. This is conservative but also very easy to implement.\r\n\r\nThese data need to be declared with attributes and code-generated by Razor in the output C# code.\r\n\r\nThe view engine will do a quick integrity check when it loads the view - if the SHAs of everything match then the AOT compiled view should be used. Otherwise we just treat it like a cache miss and do runtime compilation. In either case we will create a cache entry that can invalidate it when files change. There's a slight possibility of a race condition here that could lead to a source change getting ignored, but if you hit that scenario you can work around it by just saving again. If we care deeply about this we could solve that issue by double-checking after hooking up the file watchers.\r\n\r\n-----------\r\n\r\nOnce we get here, we've now unified the UX and code path for all views (AOT or not). We need this step to make the sure we don't break the user experience when we make AOT view compilation the default.\r\n\r\n### Step 2. Run Razor AOT compilation on build\r\n\r\nThis part is pretty easy. We already have the MSBuild glue written to gather everything we need and pass it to the AOT compilation tool.\r\n\r\nWe should use this opportunity to nail the design of the *Razor MSBuild* support. We're going to now be injecting MSBuild to every Razor-hosting application, so we should make the set of metadata we have richer and decouple the experience from MVC.\r\n\r\n### Step 3.Pivot Razor AOT compilation to use a build server\r\n\r\nWe need to make Razor AOT compilation fast, but doing the initialization work once (Build Server). The cheapest way for us to do this is re-use the existing AOT compilation tool, but turn it into a server. The existing Razor AOT compilation tool is a dotnet CLI tool that is called by MSBuild and passed the list of files. We could fork most of the logic into a library and reuse it.\r\n\r\nWe could achieve this by placing each operation in its own `AssemblyLoadContext`. The 'main' load context would be responsible for loading Roslyn and most shared framework components so that these get JITed and warmed up a single time. \r\n\r\nWhen an operation comes in, we create a new `AssemblyLoadContext` with the App's dependency context and then perform the compilation there.\r\n\r\nThe only complicated thing is dealing with a version conflict of the shared components.\r\n\r\n------------\r\n\r\nGoing all the way with this would mean that we plug into MSBuild. For instance we'd have a *loader* MSbuild `ITask` that acts has a host and can act as the coordinator.\r\n\r\nOur team would love the opportunity to reuse MSBuild's server model. Put another way, we'd love to not own a server 😆 \r\n\r\n------------\r\n\r\nLong term we'd like to continue to pivot here to get out of the business of needing to `Load` in the .NET sense your App's code. This means transitioning more Razor configuration and extensibility to MSBuild. We need to do this when we're allowed to make breaking changes.\r\n\r\n## Risks\r\n\r\n### Extensibility/Configuration of Razor\r\n\r\nToday we allow you to configure and extend Razor by replacing services in the App's DI container. This is really unfriendly to tools as it requires us to load and start your App in order to reason about compilation.\r\n\r\n### Differences between runtime and AOT compilation\r\n\r\nDevelopers building so-called *modular* apps will get a different compilation experience with AOT compilation. Usually what happens here is that individual modules are developed in isolation, and the C# code is compiled when the module is built, but the Razor code is compiled at runtime, with access to the full dependency graph of the application. \r\n\r\nThese users already have to work around these kinds of issues to some extent, but we need to validate that any changes we make are not a total blocker.\r\n\r\n### Public APIs\r\n\r\nIf you want to make an omelet, you're going to have to break a few eggs. A lot of what we need to change on the runtime side will require breaking changes.\r\n\r\n### Reliance on the SHA of the App assembly\r\n\r\nIf we include the SHA of the App assembly as one of the 'inputs' we hash, is this *good enough* for when dependencies of the App change? Does deterministic build break this?\r\n\r\n### Updatable AOT compilation + 3rd party libraries + _ViewImports\r\n\r\nWe need to rationalize what the impact is of combining a global `_ViewImports.cshtml` with AOT compiled views in a 3rd party library. We can reasonably expect the App to have a different set of `_ViewImports` documents than the 3rd party library was compiled with, so we need to a design so that AOT compiled 3rd party views have the right invalidation logic."},{"Id":"7073135202","Type":"IssuesEvent","CreatedAt":"2018-01-09T05:14:47","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1446","RelatedDescription":"Closed issue \"Question: are MVC view compiles deterministic ?\" (#1446) at aspnet/Razor","RelatedBody":"_From @davidglassborow on June 12, 2017 14:21_\n\nRoslyn can do deterministic builds (https://github.com/dotnet/roslyn/issues/372), and I've recently added this to Visual F# (https://github.com/Microsoft/visualfsharp/pull/2954).\r\n\r\nAt my workplace, this means that the MVC view compilation is the only step left in our build processes that isn't deterministic. I was wondering if the new aspnetcore view compilation will be deterministic ?, or if that is a feature you would consider adding ?\r\n\n\n_Copied from original issue: aspnet/MvcPrecompilation#141_"},{"Id":"7073133201","Type":"IssuesEvent","CreatedAt":"2018-01-09T05:14:00","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1845","RelatedDescription":"Closed issue \"Figure out the story for using CSC from Microsoft.AspNetCore.Razor.Design\" (#1845) at aspnet/Razor","RelatedBody":"Right now `Microsoft.AspNetCore.Razor.Design` uses CSC to compile the files on disk. Should we move this call into the targets owned by the SDK/ML team so they can maintain it?"},{"Id":"7073099863","Type":"PullRequestEvent","CreatedAt":"2018-01-09T04:59:49","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1920","RelatedDescription":"Opened pull request \"Adding more tests and clarity around file paths\" (#1920) at aspnet/Razor","RelatedBody":"I noticed we were really undertesting all of the things that handle\r\npaths and file names. I gave this some love and a little clean up where\r\nwe weren't doing the right thing in RazorSourceDocument.\r\n\r\nAlso changed the template engine tests to use the\r\nFileSystemRazorProject. These tests are already using the files on disk\r\nas inputs. I turned off checksums for these since they now have the full\r\nfile path, and that would not be portable."},{"Id":"7072946576","Type":"PullRequestEvent","CreatedAt":"2018-01-09T03:48:12","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1914","RelatedDescription":"Merged pull request \"Rename some things\" (#1914) at aspnet/Razor","RelatedBody":""},{"Id":"7072894890","Type":"PullRequestEvent","CreatedAt":"2018-01-09T03:27:00","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1915","RelatedDescription":"Merged pull request \"Update our version of the RazorCoreCompile\" (#1915) at aspnet/Razor","RelatedBody":"Updating RazorCoreCompile to be based on a much newer\r\nversion of the Core.CSharp.targets.\r\n\r\nThis adds support for some things we're missing like determinism and\r\nanalzyers."},{"Id":"7072542974","Type":"PullRequestEvent","CreatedAt":"2018-01-09T01:11:44","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1919","RelatedDescription":"Opened pull request \"Added version constant so WebTooling can consume.\" (#1919) at aspnet/Razor","RelatedBody":"- Updated the VS for mac versions to 7.5.\r\n\r\n#1918\r\n\r\nFYI @mkArtakMSFT @ToddGrun "},{"Id":"7072349436","Type":"IssuesEvent","CreatedAt":"2018-01-09T00:00:47","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1918","RelatedDescription":"Opened issue \"Add MPack version constant for WebTooling to consume\" (#1918) at aspnet/Razor","RelatedBody":""},{"Id":"7071972473","Type":"IssuesEvent","CreatedAt":"2018-01-08T22:10:37","Actor":"Eilon","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1917","RelatedDescription":"Opened issue \"[Question] 1.1 -> 2.0 ITagHelperTypeResolver\" (#1917) at aspnet/Razor","RelatedBody":"_From @dazinator on January 7, 2018 15:17_\n\nI am attempting to upgrade my asp.net core 1.1 mvc application to 2.0\r\n\r\nI was previously deriving an: `ITagHelperTypeResolver`\r\n\r\nThis no longer seems to compile after the upgrade to 2.0. I can no longer find types:\r\n- ITagHelperTypeResolver\r\n- ErrorSink\r\n\r\n\r\n```csharp\r\n public class AssemblyNameGlobbingTagHelperTypeResolver : ITagHelperTypeResolver\r\n    {\r\n       \r\n        private static readonly System.Reflection.TypeInfo ITagHelperTypeInfo = typeof(ITagHelper).GetTypeInfo();\r\n\r\n        protected TagHelperFeature Feature { get; }\r\n\r\n        public AssemblyNameGlobbingTagHelperTypeResolver(ApplicationPartManager manager)\r\n        {\r\n            if (manager == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(manager));\r\n            }\r\n\r\n            Feature = new TagHelperFeature();\r\n            manager.PopulateFeature(Feature);\r\n\r\n            // _manager = manager;\r\n\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public IEnumerable<Type> Resolve(\r\n            string name,\r\n            SourceLocation documentLocation,\r\n            ErrorSink errorSink)\r\n        {\r\n            if (errorSink == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(errorSink));\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(name))\r\n            {\r\n                var errorLength = name == null ? 1 : Math.Max(name.Length, 1);\r\n                errorSink.OnError(\r\n                    documentLocation,\r\n                    \"Tag Helper Assembly Name Cannot Be Empty Or Null\",\r\n                    errorLength);\r\n\r\n                return Type.EmptyTypes;\r\n            }\r\n\r\n\r\n            IEnumerable<TypeInfo> libraryTypes;\r\n            try\r\n            {\r\n                libraryTypes = GetExportedTypes(name);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                errorSink.OnError(\r\n                    documentLocation,\r\n                    $\"Cannot Resolve Tag Helper Assembly: {name}, {ex.Message}\",\r\n                    name.Length);\r\n\r\n                return Type.EmptyTypes;\r\n            }\r\n\r\n            return libraryTypes;\r\n\r\n        }\r\n\r\n\r\n        /// <inheritdoc />\r\n        protected IEnumerable<System.Reflection.TypeInfo> GetExportedTypes(string assemblyNamePattern)\r\n        {\r\n            if (assemblyNamePattern == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(assemblyNamePattern));\r\n            }\r\n\r\n            var results = new List<System.Reflection.TypeInfo>();\r\n\r\n            for (var i = 0; i < Feature.TagHelpers.Count; i++)\r\n            {\r\n                var tagHelperAssemblyName = Feature.TagHelpers[i].Assembly.GetName();\r\n\r\n                if (assemblyNamePattern.Contains(\"*\")) // is it actually a pattern?\r\n                {\r\n                    if (tagHelperAssemblyName.Name.Like(assemblyNamePattern))\r\n                    {\r\n                        results.Add(Feature.TagHelpers[i]);\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // not a pattern so treat as normal assembly name.\r\n                var assyName = new AssemblyName(assemblyNamePattern);\r\n                if (AssemblyNameComparer.OrdinalIgnoreCase.Equals(tagHelperAssemblyName, assyName))\r\n                {\r\n                    results.Add(Feature.TagHelpers[i]);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        private class AssemblyNameComparer : IEqualityComparer<AssemblyName>\r\n        {\r\n            public static readonly IEqualityComparer<AssemblyName> OrdinalIgnoreCase = new AssemblyNameComparer();\r\n\r\n            private AssemblyNameComparer()\r\n            {\r\n            }\r\n\r\n            public bool Equals(AssemblyName x, AssemblyName y)\r\n            {\r\n                // Ignore case because that's what Assembly.Load does.\r\n                return string.Equals(x.Name, y.Name, StringComparison.OrdinalIgnoreCase) &&\r\n                       string.Equals(x.CultureName ?? string.Empty, y.CultureName ?? string.Empty, StringComparison.Ordinal);\r\n            }\r\n\r\n            public int GetHashCode(AssemblyName obj)\r\n            {\r\n                var hashCode = 0;\r\n                if (obj.Name != null)\r\n                {\r\n                    hashCode ^= obj.Name.GetHashCode();\r\n                }\r\n\r\n                hashCode ^= (obj.CultureName ?? string.Empty).GetHashCode();\r\n                return hashCode;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n```\r\n\r\nWhich I would register on startup:\r\n\r\n```csharp\r\n  services.AddSingleton<ITagHelperTypeResolver, AssemblyNameGlobbingTagHelperTypeResolver>();\r\n\r\n```\r\nBasically this let me use wildcard matching on assembly names for my `addTagHelper` directives.\r\n\r\n\r\n  \r\n  \n\n_Copied from original issue: aspnet/Home#2747_"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7065973641","Type":"PullRequestEvent","CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed pull request \"Update migrate-sql-server.md\" (#1062) at aspnet/Tooling","RelatedBody":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7048395292","Type":"IssuesEvent","CreatedAt":"2018-01-02T17:35:05","Actor":"Eilon","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/283","RelatedDescription":"Opened issue \"Using the \"Home\" repo for issue management of other repos\" (#283) at aspnet/Announcements","RelatedBody":"Hi all,\r\n\r\nWe are experimenting to try and use the [Home repo's issue tracker](https://github.com/aspnet/Home/issues) to manage issues for multiple repos. To start with, we have moved the bugs from several other repos to the Home repo, and we will retire the issue trackers of those other repos.\r\n\r\nWe are doing this to try to improve the experience of logging issues for ASP.NET Core.\r\n\r\n* Labels in the form of `repo:RepoName` are used to associate the bug with a product/feature area\r\n* For issue trackers that moved to the Home repo, please log new issues in the Home repo. If a bug is logged in a moved issue tracker, it will be closed.\r\n* Over time, we plan to consolidate more issue trackers into the Home repo\r\n\r\nFor discussions on this topic, please go to https://github.com/aspnet/Home/issues/2736.\r\n\r\nThanks,\r\nEilon\r\n"},{"Id":"6909206856","Type":"IssuesEvent","CreatedAt":"2017-11-27T20:34:10","Actor":"pranavkm","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/282","RelatedDescription":"Opened issue \"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated\" (#282) at aspnet/Announcements","RelatedBody":"As part of some of our infrastructural changes, we're discontinuing the use of the following feeds and may remove them entirely in the future:\r\n* https://dotnet.myget.org/f/aspnetcore-ci-dev \r\n* https://dotnet.myget.org/f/aspnetcore-ci-release\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-dev\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-release\r\n\r\nIf you're currently using one of these feeds in your projects to pick up our daily builds, we recommend migrating to https://dotnet.myget.org/f/aspnetcore-dev.\r\n\r\nPlease use this discussion topic - https://github.com/aspnet/Home/issues/2292 - for feedback and questions. "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"949414507759124480","CreatedAt":"2018-01-05T22:57:12+00:00","UserScreenname":"aspnet","Text":"Announcing Preview 1 of #ASPNET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4 https://t.co/xVYhW7ospD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":106,"FavoriteCount":64,"RawContent":null},{"Id":"948916811034234882","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"aspnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/SPEnBXEEbC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":5,"RawContent":null},{"Id":"948343098278477824","CreatedAt":"2018-01-02T23:59:48+00:00","UserScreenname":"aspnet","Text":"The ASPNET Community Standup is live at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":5,"RawContent":null},{"Id":"944564608404205568","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/RuFa6Hh6S7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":5,"RawContent":null},{"Id":"943234846289289217","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/wEDxxFaCxu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":2,"RawContent":null},{"Id":"942039735207448576","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/OakzDOKxUB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"941295101271212032","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/aG5z9e5Rgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":5,"RawContent":null},{"Id":"941015999809249280","CreatedAt":"2017-12-13T18:44:32+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz in about 15 minutes on Mixer or Twitch for a two-hour LIVE .NET CODING session where he will answ… https://t.co/OC1nGXILjO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"938192857902354432","CreatedAt":"2017-12-05T23:46:22+00:00","UserScreenname":"aspnet","Text":"We're live for the #ASPNET Community Standup now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"938163679614214144","CreatedAt":"2017-12-05T21:50:26+00:00","UserScreenname":"aspnet","Text":"Join us for the #aspnet Community Standup today at 3:45 PM Pacific time - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":6,"RawContent":null},{"Id":"931580871378964481","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"aspnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/itxdVWOnG5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":7,"RawContent":null},{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-01-09T05:30:11.8563412Z","RunDurationInMilliseconds":8913}