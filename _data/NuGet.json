{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11014704015","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:26:59","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7381","RelatedDescription":"Closed issue \"[Azure Search] Improve field weights (including boosting tags)\" (#7381) at NuGet/NuGetGallery","RelatedBody":"Pull request: https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGetDeployment/pullrequest/1080?_a=overview\r\n\r\nTry to improve the following queries:\r\n\r\n* aad -> microsoft.identitymodel.clients.activedirectory\r\n* excel -> EPPlus\r\n* mail -> SendGrid, Mailkit\r\n* ml.net ->Microsoft.ML\r\n* orm -> Dapper\r\n* rx -> System.Reactive\r\n* mysql -> MySqlConnector\r\n* pdf -> itextsharp\r\n* postgres -> Npgsql \r\n* Material -> MahApps.Metro\r\n* wpf -> MahApps.Metro \r\n* logging -> NLog, log4net, serilog"},{"Id":"11014399055","Type":"PullRequestEvent","CreatedAt":"2019-12-04T22:40:14","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7729","RelatedDescription":"Opened pull request \"Only check \"is indexed\" for a day\" (#7729) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/7716"},{"Id":"11014056773","Type":"IssuesEvent","CreatedAt":"2019-12-04T21:51:12","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7728","RelatedDescription":"Opened issue \"[Azure Search] Autocomplete fails if query contains wildcard\" (#7728) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nThe autocomplete endpoint fails if the query contains a `*` character.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Navigate to: https://azuresearch-usnc.nuget.org/autocomplete?q=microsoft.*&debug=true\r\n2. The response is:\r\n\r\n```json\r\n{\r\n  \"Success\": false,\r\n  \"Message\": \"The provided query is invalid.\"\r\n}\r\n```\r\n\r\n### Expected behavior\r\nThis should return a valid autocomplete response. It looks like the issue is the generated Azure Search text contains the following: `+tokenizedPackageId:\\**`"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11015136471","Type":"IssuesEvent","CreatedAt":"2019-12-05T00:38:41","Actor":"bergbria","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8882","RelatedDescription":"Opened issue \"PluginFactory is global and caches failed tasks, making in-proc retries impossible\" (#8882) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nAs recommended by the Nuget team, I've been coding against the nuget binaries in an attempt to customize installation behavior (specifically to install a single package to the global cache without pulling in dependencies or making an extra copy, though that shouldn't matter here).\r\n\r\nMy installation tool runs on our distributed build machines, where high CPU load often causes processes to execute more slowly than normal from a wall-clock perspective. This in turn sometimes leads to timeout errors.\r\n\r\nIn our specific case, we want to retry on timeout. However, the nuget code currently makes doing this in-proc impossible.\r\n\r\nThis is the specific instance I've found. I cannot say whether there are more or not.\r\n\r\n* There is only a single global ``PluginManager`` object (``private static readonly Lazy<IPluginManager> _lazy``).\r\n* This in turn has a single ``IPluginFactory`` object  (``_pluginFactory``) that cannot be reset publicly and is not internally. Effectively, this means there is a single static global ``PluginFactory`` object.\r\n* PluginFactory contains this field: ``ConcurrentDictionary<string, Lazy<Task<IPlugin>>> _plugins;``\r\n    * Tasks are inserted and used from this dictionary regardless of whether they succeeded or not.\r\n* Effectively, if any of the tasks in ``_plugins`` fails, the only way to retry them is to restart the process."},{"Id":"11014942237","Type":"IssuesEvent","CreatedAt":"2019-12-05T00:05:14","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8881","RelatedDescription":"Opened issue \"VS:  solution restore perpetually fails due to race condition\" (#8881) at NuGet/Home","RelatedBody":"Imagine `IVsSolutionRestoreService*.NominateProjectAsync(...)` is called on two threads concurrently.\r\n\r\n1.  Both threads call [`SolutionRestoreWorker.ScheduleRestoreAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L273) nearly simultaneously.\r\n2.  Both threads call [`InitializeAsync()`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L152), but only one thread will actually perform initialization.  The other thread will not wait for initialization to complete and will start a background worker thread on [`StartBackgroundJobRunnerAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L395).\r\n3.  The background thread calls into [`IsSolutionFullyLoadedAsync()`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L184) which assumes [`_vsSolution` has been initialized by the other thread](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L165).  If not, a `NullReferenceException` is thrown [here](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L189) and the background thread dies.\r\n4.  Since [a new background thread is never created](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L299) the `NullReferenceException` is perpetually rethrown [here](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L335) and restore fails until you close and reopen the solution and you are lucky enough to not hit the race condition again."},{"Id":"11014684111","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:23:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7842","RelatedDescription":"Closed issue \"dotnet restore failing with TaskCanceledException\" (#7842) at NuGet/Home","RelatedBody":"_From @ColinM9991 on March 1, 2019 13:9_\n\n## Steps to reproduce\r\n\r\nN/A\r\nThis issue is intermittent, however when it happens it then lingers for some time.\r\n\r\n## Description\r\n\r\nWe are using the dotnet CLI to restore packages for an ASP.NET Core application targeting .NET Core in our TeamCity build process, and are intermittently having failed builds where the restore task fails as soon as it picks up the first project file\r\n\r\n```\r\n[12:43:57]\tStep 1/13: Restore Packages (.NET CLI (dotnet)) (30s)\r\n[12:43:58]\t[Step 1/13] dotnet.exe restore Project.sln --disable-parallel\r\n[12:43:58]\t[Step 1/13] restore (29s)\r\n[12:43:58]\t[restore] Starting: \"C:\\Program Files\\dotnet\\dotnet.exe\" restore Project.sln --disable-parallel\r\n[12:43:58]\t[restore] in directory: C:\\buildAgent\\work\\g0124fa0e71e5f68\r\n[12:44:16]\t[restore]   Restoring packages for C:\\buildAgent\\work\\g0124fa0e71e5f68\\ProjectA\\Common\\ProjectB.csproj...\r\n[12:44:28]\t[restore] C:\\Program Files\\dotnet\\sdk\\2.2.102\\NuGet.targets(114,5): error : A task was canceled.\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] Build FAILED.\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore]     0 Warning(s)\r\n[12:44:28]\t[restore]     1 Error(s)\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] Time Elapsed 00:00:24.84\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] C:\\Program Files\\dotnet\\sdk\\2.2.102\\NuGet.targets(114,5): error : A task was canceled.\r\n[12:44:28]\t[restore] Process exited with code 1\r\n[12:44:28]\t[Step 1/13] Process exited with code 1\r\n[12:44:28]\t[Step 1/13] Step Restore Packages (.NET CLI (dotnet)) failed\r\n```\r\n\r\n## Expected  behavior\r\n\r\nIn the scenario where there is an actual error with the codebase then the dotnet CLI should return a meaningful error message as to what the problem is\r\n\r\nIn the scenario where nothing is wrong and the dotnet CLI fails for no reason, the expected behavior would be for the restore task to complete successfully as it does in other builds of the same codebase at previous times.\r\n\r\n## Actual behavior\r\n\r\n`dotnet restore` fails with `TaskCanceledException` and no indication as to what the issue is.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n[13:07:51]\t[Step 2/2] .NET Core SDK (reflecting any global.json):\r\n[13:07:51]\t[Step 2/2]  Version:   2.2.102\r\n[13:07:51]\t[Step 2/2]  Commit:    96ff75a873\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] Runtime Environment:\r\n[13:07:51]\t[Step 2/2]  OS Name:     Windows\r\n[13:07:51]\t[Step 2/2]  OS Version:  10.0.17763\r\n[13:07:51]\t[Step 2/2]  OS Platform: Windows\r\n[13:07:51]\t[Step 2/2]  RID:         win10-x64\r\n[13:07:51]\t[Step 2/2]  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.102\\\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] Host (useful for support):\r\n[13:07:51]\t[Step 2/2]   Version: 2.2.1\r\n[13:07:51]\t[Step 2/2]   Commit:  878dd11e62\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] .NET Core SDKs installed:\r\n[13:07:51]\t[Step 2/2]   1.1.12 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2]   2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2]   2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2]   2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] .NET Core runtimes installed:\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 1.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 1.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\nNuGet.CommandLine version: 4.9.3\n\n_Copied from original issue: dotnet/cli#10905_"},{"Id":"11014623188","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:14:03","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7942","RelatedDescription":"Closed issue \"More Security Review\" (#7942) at NuGet/Home","RelatedBody":""},{"Id":"11014562035","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:04:41","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7881","RelatedDescription":"Closed issue \"Upgrade fails with \"Unable to find metadata of <somepackageid>\" if a package is in fallback folder, but not remote feed\" (#7881) at NuGet/Home","RelatedBody":"PackageA v2\r\n   depends on\r\n       PackageB v3\r\nThose 2 packages are in a fallback folder only.\r\n\r\nUpgrade Package A to v4\r\n\r\nPackageA v4\r\n    depends on \r\n      PackageB v5\r\nThose 2 packages are not in the fallback folder, but are available in a package feed.\r\n\r\nBelieve an error message is raised from UIActionEngine - line 806.\r\nAt first look, it looks like, for licensing dialog reasons, we are trying to find out if the full set of packages require license acceptance or not.\r\nWe cannot get all the metadata -- likely because PackageB v3 isn't on any feeds.\r\n\r\nLikely, we should support getting nuspec from fallback folder too?\r\nWhy do we care about the old version license? (to not ask, if already approved, and license hasn't changed???)\r\n\r\nThis happened in a real scenario with some UWP packages.\r\nWas told this reproed with 15.9, but not 16.0.\r\n\r\n"},{"Id":"11014554224","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:03:31","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7652","RelatedDescription":"Closed issue \"PackageReference output missing libs\" (#7652) at NuGet/Home","RelatedBody":"I have a custom nuget package that contains multiple DLLs.   When this package is consumed, I only want one of the DLLs, MyA.dll, to be referenced by the project.  However when I build I need all of my DLLs in the package to go to the build output folder.\r\n\r\nAssume I have DLLs named MyA, MyB, MyC, MyD, MyE, and MyF\r\n\r\nMy nuspec looks like:\r\n\r\n`<?xml version=\"1.0\"?>`\r\n`<package >`\r\n`  <metadata>`\r\n`    <id>My.ThirdParty.Package</id>`\r\n`    <version>1.2.3</version>`\r\n`     ...`\r\n`     <references>`\r\n`         <group targetFramework=\"net40\">`\r\n`             <reference file=\"MyA.dll\" />`\r\n`          </group>`\r\n`     </references>`\r\n`   </metadata>`\r\n`   <files>`\r\n`     <file src=\"My*.dll\" target=\"lib\\net40\" />`\r\n`  </files>`\r\n`</package>`\r\n\r\nWhen I use this package from a project using the _packages.config_ style.  Everything works.  I see that it only added the single reference to MyA.dll in my list of references.  When I build all of the DLLs are in my output folder, MyA through MyF.\r\n\r\nIf I then clear my output folder, migrate it to a _PackageReference_ style, and do a build, only MyA.dll is copied to the output folder.   I need MyA through MyF to be copied in this case just like it worked the old way.\r\n\r\nI'm running NuGet Version: 4.5.1.4879\r\nVisual Studio Enterprise 2017 Version 15.9.4\r\n"},{"Id":"11014538268","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:01:13","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8077","RelatedDescription":"Closed issue \"5.0.2 Shipping Process\" (#8077) at NuGet/Home","RelatedBody":"- [ ] modify VS insertion PRs\r\n- [ ] create sdk insertion PRs\r\n- [ ] shephard sdk insertion PRs\r\n- [ ] create cli insertion PRs\r\n- [ ] shephard cli insertion PRs\r\n\r\n"},{"Id":"11014477029","Type":"IssuesEvent","CreatedAt":"2019-12-04T22:51:59","Actor":"GingerMoon","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8880","RelatedDescription":"Opened issue \"\"Package Restore\" doesn't take effect in vs2017 NuGet Package Manager configuration\" (#8880) at NuGet/Home","RelatedBody":"Reproduce steps:\r\nAccording to https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore-troubleshooting\r\nSelect the Tools > NuGet Package Manager > Package Manager Settings menu command.\r\nSet both options under Package Restore.\r\nSelect OK.\r\nClose the VS2017 and open it again, the two options are still unset. \r\nHowever, the file NuGet.Config was changed to:\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"True\" />\r\n    <add key=\"automatic\" value=\"True\" />\r\n  </packageRestore>\r\n  <bindingRedirects>\r\n    <add key=\"skip\" value=\"False\" />\r\n  </bindingRedirects>\r\n  <packageManagement>\r\n    <add key=\"format\" value=\"0\" />\r\n    <add key=\"disabled\" value=\"False\" />\r\n  </packageManagement>\r\n</configuration>\r\n\r\nbut still met the error:\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tThis project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is ..\\..\\..\\..\\..\\.nuget\\packages\\boost.1.64.0.0\\build\\native\\boost.targets.\tlibbitcoin\tC:\\cppWorkspace\\libbitcoin\\builds\\msvc\\vs2017\\libbitcoin\\libbitcoin.vcxproj\t553\t\r\n"},{"Id":"11014466096","Type":"IssuesEvent","CreatedAt":"2019-12-04T22:50:20","Actor":"andymartin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8879","RelatedDescription":"Opened issue \"Update-Package does not work with PackageRef projects.\" (#8879) at NuGet/Home","RelatedBody":"Update-Package does not work with PackageRef projectsl.\n\n---\n#### Document Details\n\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\n\n* ID: 3e755306-fb38-33c5-6f0f-1947832c21f2\n* Version Independent ID: 0335cc14-e041-ffb3-f3c4-26dd39d18ef2\n* Content: [Reinstalling and Updating NuGet Packages](https://docs.microsoft.com/en-us/nuget/consume-packages/reinstalling-and-updating-packages)\n* Content Source: [docs/consume-packages/Reinstalling-and-Updating-Packages.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/consume-packages/Reinstalling-and-Updating-Packages.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**"},{"Id":"11014378113","Type":"IssuesEvent","CreatedAt":"2019-12-04T22:36:58","Actor":"grimreaper38uk","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8878","RelatedDescription":"Opened issue \"How to CONFIGURE the package manager/nuget??\" (#8878) at NuGet/Home","RelatedBody":"There is NO information on how to fix bad restore paths, edit ANY configuration or fix any of the myriad of problems that just appeared on my installation when I started work this morning.\nI've lost hours on this b u l l s h i t already, and I can't find ANYTHING that documents HOW TO USE NUGET OR THE 'PACKAGE MANAGER CONSOLE' in VS2019.\n\n---\n#### Document Details\n\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\n\n* ID: 2942156d-9578-6b8a-6149-84724c6b1b56\n* Version Independent ID: bface2dd-2e2d-ce98-8bda-21525bb0bf79\n* Content: [Install and manage NuGet packages using the console in Visual Studio](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-powershell)\n* Content Source: [docs/consume-packages/install-use-packages-powershell.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/consume-packages/install-use-packages-powershell.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**"},{"Id":"11014123480","Type":"IssuesEvent","CreatedAt":"2019-12-04T22:00:17","Actor":"JimiSweden","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8877","RelatedDescription":"Opened issue \"creating nuget package fails with no information - \"IsPackable:true\" is missing and needed to pack \" (#8877) at NuGet/Home","RelatedBody":"If you don't get a nuget package, look if this \"<IsPackable>true</IsPackable>\" is missing in the csproj PropertyGroup.\r\n\r\n**Steps:**\r\nVS 2019 -v: 16.3.10 , dotnet sdk 3.0.100\r\nproject: .NET.sdk, TargetFramework : netstandard2.0\r\n\r\nI read all the \"latest\" docs explaining how to pack. * \r\n**Tested the following** \r\nfrom VS : right click on project in VS and selecting \"pack\"\r\nMsBuild -t:pack\r\ndotnet pack\r\n\r\ninformation from the builds/packs was like this:\r\n```\r\n1>------ Build started: Project: LeeWay.Ensure.ControllerAttributes, Configuration: Release Any CPU ------\r\n1>LeeWay.Ensure.ControllerAttributes -> C:\\Git\\LeeWay\\LeeWay.Ensure.ControllerAttributes\\bin\\Release\\netstandard2.0\\LeeWay.Ensure.ControllerAttributes.dll\r\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n -  No errors, no information about the package. -\r\n\r\n**when installing VS 2019 preview 16.4.0**\r\ndotnet 3.1.100-preview3-014645\r\n\r\ndotnet pack actually shows that \"<IsPackable>true</IsPackable>\" i needed in the csproj PropertyGroup.\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.4.0-preview-19529-02+0c507a29b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54,43 ms for C:\\Git\\LeeWay\\LeeWay.Ensure.ControllerAttributes\\LeeWay.Ensure.ControllerAttributes.csproj.\r\n  Restore completed in 495,88 ms for C:\\Git\\LeeWay\\WebApi\\WebApi.csproj.\r\n  Restore completed in 495,89 ms for C:\\Git\\LeeWay\\LeeWay.Ensure.ControllerAttributes.Tests\\LeeWay.Ensure.ControllerAttributes.Tests.csproj.\r\n  Restore completed in 495,89 ms for C:\\Git\\LeeWay\\WebApi.ConfigurationTests\\WebApi.ConfigurationTests.csproj.\r\n\r\n  C:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(187,6): warning : This project cannot be packaged because packaging has been disabled. Add **<IsPackable>true</IsPackable> to the project file to enable producing a package from this project.** [C:\\Git\\LeeWay\\WebApi\\WebApi.csproj]\r\n```\r\n\r\n\r\n*\r\nhttps://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-visual-studio?tabs=netcore-cli\r\nhttps://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-dotnet-cli\r\nhttps://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package\r\nhttps://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-msbuild"},{"Id":"11013660115","Type":"IssuesEvent","CreatedAt":"2019-12-04T20:57:47","Actor":"sieukrem","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8876","RelatedDescription":"Opened issue \"Missing replacement for allowedVersions attribute in PackageReference\" (#8876) at NuGet/Home","RelatedBody":"The referenced article describes the usage of _PackageReference_ in project file and _package_ in packages.config as if the first a replacement for the second is. \r\n\r\nBoth of them provide the possibility to define a dependency for the restore operation at development time and also for the pack operation.\r\n\r\nWhen I want to define a strickt version of a dependency to be used in the .nuspec of packed project I have to use e.g\r\n\r\n`<PackageReference Include=\"ExamplePackage\" Version=\"[1.1.2]\" />\r\n`\r\nThis works fine for the .nuspec case, but prevents the possibility to update the package to the newer one in Visual Studio's package manager UI.  One have to modify PackageReference in project file manually.\r\n\r\nIf I would use \r\n`<PackageReference Include=\"ExamplePackage\" Version=\"[1.1.2, ]\" />\r\n`\r\nthen I would be able to update the package in VS, but \r\n* it has different meaning in .nuspec than _Version=\"[1.1.2]\"_\r\n* VS package manager UI will replace _Version=\"[1.1.2, ]\"_ by _Version=\"x.y.z\"_\r\n\r\n1. I miss a note in the article, that _PackageReference_ does not allow to use _allowedVersion_\r\n2. I would like a possibility to allow an update to a newer version or at least a hint in the VS package manager UI that a newer version is available\r\n3. I would like if VS will update to the newer version by only adapting the boundary version and not by replacing the whole version value.\r\n\r\n---\r\n#### Document Details\r\n\r\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\r\n\r\n* ID: 7c462602-7e8f-2634-4006-3fadaa68ef45\r\n* Version Independent ID: 7a6ec89f-55c5-2d49-6677-fcc87b0e40ac\r\n* Content: [NuGet Package Version Reference](https://docs.microsoft.com/en-us/nuget/concepts/package-versioning)\r\n* Content Source: [docs/concepts/Package-Versioning.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/concepts/Package-Versioning.md)\r\n* Product: **nuget**\r\n* GitHub Login: @karann-msft\r\n* Microsoft Alias: **karann**"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-12-05T05:30:49.1321745Z","RunDurationInMilliseconds":5197}