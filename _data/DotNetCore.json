{"Data":{"Blog":{"FeedItems":[{"Title":"Debugging .NET Apps with Time Travel Debugging (TTD)","PublishedOn":"2019-01-25T19:32:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When you are debugging an application, there are many tools and techniques you can use, like logs, memory dumps and Event Tracing for Windows (ETW). In this post, we will talk about Time Travel...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/25/debugging-net-apps-with-time-travel-debugging-ttd/","RawContent":null},{"Title":".NET and TypeScript at FOSDEM 2019","PublishedOn":"2019-01-24T20:50:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The schedule for the .NET and Typescript Developer Room at FOSDEM has now been published! FOSDEM is one of the longest running Free and Open Source conferences, and we’re excited to have a .NET and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-and-typescript-at-fosdem-2019/","RawContent":null},{"Title":"Do more with patterns in C# 8.0","PublishedOn":"2019-01-24T18:00:30+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Do more with patterns in C# 8.0 Visual Studio 2019 Preview 2 is out! And with it, a couple more C# 8.0 features are ready for you to try. It&#8217;s mostly about pattern matching, though I&#8217;ll...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/","RawContent":null},{"Title":"Announcing F# 4.6 Preview","PublishedOn":"2019-01-24T15:45:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that Visual Studio 2019 will ship a new version of F# when it releases: F# 4.6! F# 4.6 is a smaller update to the F# language, making it a &#8220;true&#8221;...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/announcing-f-4-6-preview/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2019 Preview 2","PublishedOn":"2019-01-24T15:30:31+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Another preview of Visual Studio 2019, another update on the cool stuff going into it! We&#8217;re pleased to announce some updates to the .NET Core tools for Visual Studio 2019. You can try these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-core-tooling-update-for-visual-studio-2019-preview-2/","RawContent":null},{"Title":".NET Framework January 22, 2018 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-01-22T22:22:08+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are releasing the January 22, 2018 .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Help us help you! What desktop apps are you bringing to .NET Core 3.0?","PublishedOn":"2019-01-17T16:00:26+00:00","CommentsCount":43,"FacebookCount":0,"Summary":"Windows Desktop applications are coming to .NET Core. The recently released .NET Core 3.0 Preview 1 version includes WinForms and WPF support. To make .NET Core 3.0 viable for as many of you as...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/17/help-us-help-you-what-desktop-apps-are-you-bringing-to-net-core-3-0/","RawContent":null},{"Title":".NET Framework January 2019 Preview of Quality Rollup","PublishedOn":"2019-01-16T04:08:30+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Updated: January 24, 2019 The Windows 10 1607 (Anniversary Update) and Windows Server 2016 updates have also been released.   The Microsoft Update Catalog table below has been updated with this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.9 – Machine Learning for .NET","PublishedOn":"2019-01-10T20:34:16+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Announcing ML.NET 0.9 &#8211; Machine Learning for .NET ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/10/announcing-ml-net-0-9-machine-learning-for-net/","RawContent":null},{"Title":"Tell us your thoughts on ML.NET, an open source and cross-platform machine learning framework","PublishedOn":"2019-01-09T17:31:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers. .NET developers can use their C# or F# skills to easily integrate custom machine learning into their...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/09/tell-us-your-thoughts-on-ml-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8957501859","Type":"PullRequestEvent","CreatedAt":"2019-01-27T04:26:14","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22198","RelatedDescription":"Merged pull request \"Update PgoData to master-20190126.1 (master)\" (#22198) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8957500383","Type":"PullRequestEvent","CreatedAt":"2019-01-27T04:25:07","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21979","RelatedDescription":"Merged pull request \"Make ResourceManager use Assembly instead of RuntimeAssembly internally.\" (#21979) at dotnet/coreclr","RelatedBody":"This is clean-up to aid moving System.Resources classes into shared CoreLib partition."},{"Id":"8957243673","Type":"PullRequestEvent","CreatedAt":"2019-01-27T01:08:54","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22230","RelatedDescription":"Merged pull request \"Move Marshal::ZeroFree* to shared partition\" (#22230) at dotnet/coreclr","RelatedBody":""},{"Id":"8957111129","Type":"IssuesEvent","CreatedAt":"2019-01-26T23:36:29","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21070","RelatedDescription":"Closed issue \"Fixing naming of `Sse41.Test*` and `Avx.Test*` methods\" (#21070) at dotnet/coreclr","RelatedBody":"During the last HWIntrinsics review meeting, we discussed the naming of methods that return a bool based on the CPU flags set by the instruction.\r\n\r\nIt was determined that, for methods which do this and where the flag they set has the \"normal\" semantics for that flag, we should use a name that represents that accurately (so this applies to methods like `Sse41.TestC`, but not to most of the Sse42 string manipulation functions).\r\n\r\nWe should update the `TestC`, `TestZ`, and `TestNotZAndNotC` methods accordingly (where `C` represents `Carry` and `Z` represents `Zero`).\r\n\r\nThese instructions behave as:\r\n```\r\ntmp[127:0] := a[127:0] AND b[127:0]\r\nIF (tmp[63] == tmp[127] == 0)\r\n\tZF := 1\r\nELSE\r\n\tZF := 0\r\nFI\r\ntmp[127:0] := (NOT a[127:0]) AND b[127:0]\r\nIF (tmp[63] == tmp[127] == 0)\r\n\tCF := 1\r\nELSE\r\n\tCF := 0\r\nFI\r\n```\r\n\r\nWhere:\r\n* `TestC` returns `CF == 1`\r\n* `TestZ` returns `ZF == 1`\r\n* `TestNotZAndNotC` returns `(ZF == 0) && (CF == 0)`"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8957074244","Type":"IssuesEvent","CreatedAt":"2019-01-26T23:13:03","Actor":"heaths","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10660","RelatedDescription":"Opened issue \"Windows lies to dotnet.exe abouts the OS version\" (#10660) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn Windows 10:\r\n1. mkdir test\r\n2. cd test\r\n3. dotnet new console\r\n4. Change Program.cs to call `Console.WriteLine(Environment.OSVersion.Version)`\r\n5. dotnet run\r\n\r\n## Expected  behavior\r\nSee \"10.0.17663\" (for example, on RS5)\r\n\r\n## Actual behavior\r\nSee \"6.2.9200.0\"\r\n\r\nThis is because dotnet.exe's RT_MANIFEST resource is auto-generated with only the `asInvoker` privilege level, but is lacking the `supportedOS`. Instead, you should consider authoring a manifest like the following and adding it to your dotnet.csproj as the `ApplicationManifest`:\r\n\r\n```xml\r\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>\r\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n        <security>\r\n            <requestedPrivileges>\r\n                <requestedExecutionLevel level='asInvoker' uiAccess='false' />\r\n            </requestedPrivileges>\r\n        </security>\r\n    </trustInfo>\r\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\r\n        <application>\r\n            <supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\" />\r\n            <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\" />\r\n            <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\" />\r\n            <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\" />\r\n            <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\" />\r\n        </application>\r\n    </compatibility>\r\n</assembly>\r\n```\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003156 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc4-004771 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0-preview2-006127 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview2-25319-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n"},{"Id":"8956578491","Type":"IssuesEvent","CreatedAt":"2019-01-26T18:42:33","Actor":"ziffusion","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10659","RelatedDescription":"Opened issue \"dotnet build output directory on Linux is different for root vs non-root\" (#10659) at dotnet/cli","RelatedBody":"(dotnet sdk 2.2)\r\n\r\nFor root user:\r\n\r\n> ./bin/Debug/netcoreapp2.1/IEDSim.dll\r\n\r\nFor non-root user:\r\n\r\n> ./bin/**LINUX**/Debug/netcoreapp2.1/IEDSim.dll\r\n\r\nWhy is this, and is there a way to make this conistant?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8948208983","Type":"PullRequestEvent","CreatedAt":"2019-01-25T01:18:31","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/880","RelatedDescription":"Closed pull request \"Update BuildTools to preview1-03322-02 (master)\" (#880) at dotnet/standard","RelatedBody":""},{"Id":"8947831854","Type":"IssuesEvent","CreatedAt":"2019-01-24T23:36:10","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052) at dotnet/standard","RelatedBody":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n"},{"Id":"8947773313","Type":"PullRequestEvent","CreatedAt":"2019-01-24T23:21:34","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Merged pull request \"Set StrongNameKeyID after import sdk.props\" (#1060) at dotnet/standard","RelatedBody":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj "},{"Id":"8947666178","Type":"PullRequestEvent","CreatedAt":"2019-01-24T22:57:01","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Opened pull request \"Set StrongNameKeyID after import sdk.props\" (#1060) at dotnet/standard","RelatedBody":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj "},{"Id":"8947289033","Type":"PullRequestEvent","CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Merged pull request \"Add missing dummy fields\" (#1059) at dotnet/standard","RelatedBody":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff."},{"Id":"8946642015","Type":"IssuesEvent","CreatedAt":"2019-01-24T19:47:05","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056) at dotnet/standard","RelatedBody":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync()."},{"Id":"8946533711","Type":"PullRequestEvent","CreatedAt":"2019-01-24T19:28:33","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Opened pull request \"Add missing dummy fields\" (#1059) at dotnet/standard","RelatedBody":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8957390473","Type":"PullRequestEvent","CreatedAt":"2019-01-27T02:59:51","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34884","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#34884) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar"},{"Id":"8957249921","Type":"PullRequestEvent","CreatedAt":"2019-01-27T01:13:27","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34884","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#34884) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8957180408","Type":"PullRequestEvent","CreatedAt":"2019-01-27T00:23:18","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34883","RelatedDescription":"Opened pull request \"Fix GSSAPI error handling\" (#34883) at dotnet/corefx","RelatedBody":"This PR addresses 3 issues in GSSAPI error handling:\r\n\r\n* Fixes an uninitialized variable when calling gss_display_status().\r\nThis was causing the major statuscode error message to always return\r\n'An invalid status code was supplied'.\r\n\r\n* If the minor statuscode is 0 (GSS_S_COMPLETE), we shouldn't be calling\r\nfor the minor error message text. That is why we were always getting\r\n'Unknown error' for that text.\r\n\r\n* Added more text (help text) to certain errors returned from GSSAPI\r\nsuch as when the NTLM plugin is not installed.\r\n\r\nNo new tests were added to this PR since it requires machine changes\r\nto test. However, I manually tested various combinations of errors\r\nincluding when 'gss_ntlmssp' is installed or not.\r\n\r\nFixes #34877"},{"Id":"8957110840","Type":"IssuesEvent","CreatedAt":"2019-01-26T23:36:18","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34882","RelatedDescription":"Opened issue \"Fixing naming of `Sse41.Test*` and `Avx.Test*` methods\" (#34882) at dotnet/corefx","RelatedBody":"_From @tannergooding on November 17, 2018 17:54_\n\nDuring the last HWIntrinsics review meeting, we discussed the naming of methods that return a bool based on the CPU flags set by the instruction.\r\n\r\nIt was determined that, for methods which do this and where the flag they set has the \"normal\" semantics for that flag, we should use a name that represents that accurately (so this applies to methods like `Sse41.TestC`, but not to most of the Sse42 string manipulation functions).\r\n\r\nWe should update the `TestC`, `TestZ`, and `TestNotZAndNotC` methods accordingly (where `C` represents `Carry` and `Z` represents `Zero`).\r\n\r\nThese instructions behave as:\r\n```\r\ntmp[127:0] := a[127:0] AND b[127:0]\r\nIF (tmp[63] == tmp[127] == 0)\r\n\tZF := 1\r\nELSE\r\n\tZF := 0\r\nFI\r\ntmp[127:0] := (NOT a[127:0]) AND b[127:0]\r\nIF (tmp[63] == tmp[127] == 0)\r\n\tCF := 1\r\nELSE\r\n\tCF := 0\r\nFI\r\n```\r\n\r\nWhere:\r\n* `TestC` returns `CF == 1`\r\n* `TestZ` returns `ZF == 1`\r\n* `TestNotZAndNotC` returns `(ZF == 0) && (CF == 0)`\n\n_Copied from original issue: dotnet/coreclr#21070_"},{"Id":"8957098052","Type":"IssuesEvent","CreatedAt":"2019-01-26T23:28:21","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34881","RelatedDescription":"Opened issue \"Take another look at the `COMISS` and `UCOMISS` hardware intrinisics\" (#34881) at dotnet/corefx","RelatedBody":"It was raised in https://github.com/dotnet/coreclr/pull/22043#discussion_r251106117 that the names for the `COMISS` and `UCOMISS` hardware intrinsics might be confusing as the names (such as `CompareEqualOrderedScalar` and `CompareEqualUnorderedScalar`) might give the impression that the condition is ordered/unordered, when in fact it is the compare instruction that is ordered/unordered.\r\n\r\nWe should take another look at these names and determine if we can help alleviate the concern. Some initial suggestions are:\r\n* `UnorderedCompareEqualScalar` and `OrderedCompareEqualScalar` or\r\n* `CompareUnorderedEqualScalar` and `CompareOrderedEqualScalar`\r\n\r\nIt might also make sense to not expose the `ordered` versions of these intrinsics initially given that, since .NET does not support the IEEE floating-point exceptions, they are functionally equivalent to the `unordered` intrinsics. We should determine if we still want both versions of the intrinsics exposed.\r\n* This will not make a difference on the naming decision above given that `CMPSS` (which returns ` Vector128<float>`) currently holds the `CompareEqualScalar` name\r\n"},{"Id":"8957023673","Type":"PullRequestEvent","CreatedAt":"2019-01-26T22:42:20","Actor":"Wraith2","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34880","RelatedDescription":"Opened pull request \"SqlClient enhancement enable GetFieldValue<XmlReader>\" (#34880) at dotnet/corefx","RelatedBody":"Closes https://github.com/dotnet/corefx/issues/30958\r\n\r\nTo get data from an SqlDataReader instance you can use a number of approaches. One approach is to use Get[Type] overloads like `GetInt32(int)` and `GetXmlReader(int)`, another is to use the new `GetFieldValue<T>` generic version. Unfortunately while most types work with the generic function `XmlReader` does not and will throw an error. This PR changes that behaviour and add special casing for `GetFieldValue<XmlReader>` so that the more modern api style can be used with xml without special casing in the calling method.\r\n\r\n'GetXmlReader(int)' handles null values by returning an empty stream, it is not considered an error. `GetFieldValue` will usually throw on a null value. I have chosen to replicate the `GetXmlReader` behaviour and return an empty stream on `DBNull`. I can see an argument that it should throw on `DBNull` instead, please consider this.\r\n\r\nAs usual the standard and manual tests have been run in native mode and passed successfully (apart from those noted in https://github.com/dotnet/corefx/pull/34546). The changes are high up in the stack so native vs managed will make no difference. Tests are added to the existing DataStreamTest list.\r\n\r\n/cc all the usual people @keeratsingh @AfsanehR @saurabh500 and requestor @bricelam "},{"Id":"8956955889","Type":"IssuesEvent","CreatedAt":"2019-01-26T22:02:34","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28961","RelatedDescription":"Closed issue \"SocketsHttpHandler: NTLM auth does not work by default on Unix\" (#28961) at dotnet/corefx","RelatedBody":"HttpClient with credentials explicitly set. SocketHttpHandler throws on NTLM authentication requested by server:\r\n\r\n```\r\nSystem.ComponentModel.Win32Exception (0x80090020): GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).\r\n  at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential) in /home/build/github/corefx/src/Common/src/System/Net/Security/NegotiateStreamPal.Unix.cs:line 316\r\n  at System.Net.NTAuthentication.Initialize(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/build/github/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 128\r\n  at System.Net.NTAuthentication..ctor(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) in /home/build/github/corefx/src/Common/src/System/Net/NTAuthentication.Common.cs:line 98\r\n  at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean isProxyAuth, HttpConnection connection, CancellationToken cancellationToken) in /home/build/github/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs:line 61\r\n  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /home/build/github/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 283\r\n  at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken) in /home/build/github/corefx/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs:line 204\r\n  at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /home/build/github/corefx/src/Sys\r\n```\r\n\r\n**Workarounds:**\r\n1. Install package called `gss-ntlmssp` (plugin into MIT Kerberos GSSAPI layer)\r\n2. Install Heimdal (alternative Kerberos implementation with NTLM support): https://www.h5l.org/manual/heimdal-1-5-branch/ntlm/\r\n\r\nOne of the options installed is sufficient to make SocketHttpHandler work for NTLM without any additional changes to CoreFX or the app.\r\n\r\n**Details:**\r\n.NET Core 2.0 / 2.1 with libcurl works fine. This is because curl has it's own implementation but SocketHttpHandler depends on authentication code shared with NegotiateStream class.\r\n\r\nThe shared authentication depends on GSSAPI and that is typically provided by MIT kerberos. (this is also true for 2.1.300 preview docker images)\r\nIt does not have ability to do NTLM. \r\n\r\nThis is follow up on #27876 and #27872. This may be also related to  https://github.com/dotnet/wcf/issues/943 "},{"Id":"8956949381","Type":"IssuesEvent","CreatedAt":"2019-01-26T21:59:08","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34879","RelatedDescription":"Opened issue \"HTTPS and NTLM authentication throw PlatformNotSupportedException\" (#34879) at dotnet/corefx","RelatedBody":"Split from #28961\r\n\r\nAs of .NET Core 2.1, the default HTTP stack is based on SocketsHttpHandler. SocketsHttpHandler uses the GSSAPI for handling the HTTP AUTH scheme of 'NTLM' when all the required GSSAPI packages are installed including 'gss-ntlmssp' (which directly supports NTLM authentication).\r\n\r\nCurrently when HttpClient tries to authenticate to a server over TLS (HTTPS) that provides a single 'Www-Authenticate: NTLM' scheme, it throw an exception similar to this:\r\n\r\n>Unhandled Exception: System.PlatformNotSupportedException: No support for channel binding on operating systems other than Windows.\r\n   at System.Net.Security.NegotiateStreamPal.InitializeSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, String spn, ContextFlagsPal requestedContextFlags, SecurityBuffer[] inSecurityBufferArray, SecurityBuffer outSecurityBuffer, ContextFlagsPal& contextFlags)\r\n\r\nThis issue will address ways of removing that exception and providing the proper client-side channel binding support."},{"Id":"8956930114","Type":"IssuesEvent","CreatedAt":"2019-01-26T21:48:23","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34878","RelatedDescription":"Opened issue \"Negotiate to NTLM authentication fallback not working\" (#34878) at dotnet/corefx","RelatedBody":"Split from #28961\r\n\r\nAs of .NET Core 2.1, the default HTTP stack is based on SocketsHttpHandler. SocketsHttpHandler uses the GSSAPI for handling the HTTP AUTH scheme of 'Negotiate'.\r\n\r\nOn Windows, support for the 'Negotiate' scheme includes the use of Kerberos where possible. Otherwise, it falls back to using NTLM.  This is handle in the Windows SSPI Negotiate module.\r\n\r\nOn *Nix and OSX machines, Negotiate to NTLM fallback is not working. A related issue #34877 addresses the problem with the specific HTTP AUTH scheme 'NTLM' and errors caused by not installing the optional GSSAPI gssapi-ntlmssp support package.  However, even after installing that optional package, Negotiate to NTLM fallback is still not working.\r\n\r\nCurrently when HttpClient tries to authenticate to a server that provides a single 'Www-Authenticate: Negotiate' scheme, it throw an exception similar to this:\r\n\r\n>Unhandled Exception: System.ComponentModel.Win32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Cannot find KDC for realm \"domain\").\r\n   at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential)\r\n\r\n<details>\r\n<summary>\r\nRepo code\r\n</summary>\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace NtlmErrorTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            using (var listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))\r\n            {\r\n                listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n                listener.Listen(int.MaxValue);\r\n                var ep = (IPEndPoint)listener.LocalEndPoint;\r\n                var uri = new Uri($\"http://{ep.Address}:{ep.Port}/\");\r\n\r\n                Task.Run(async () =>\r\n                {\r\n                    while (true)\r\n                    {\r\n                        Socket s = await listener.AcceptAsync();\r\n                        var ignored = Task.Run(() =>\r\n                        {\r\n                            using (var ns = new NetworkStream(s))\r\n                            using (var reader = new StreamReader(ns))\r\n                            using (var writer = new StreamWriter(ns) { AutoFlush = true })\r\n                            {\r\n                                while (true)\r\n                                {\r\n                                    while (!string.IsNullOrEmpty(reader.ReadLine())) ;\r\n                                    writer.Write(\"HTTP/1.1 401 OK\\r\\nWww-Authenticate: Negotiate\\r\\nContent-Length: 5\\r\\n\\r\\nhello\");\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                var handler = new HttpClientHandler();\r\n                handler.Credentials = new NetworkCredential(\"user\", \"password\", \"domain\");\r\n                using (var client = new HttpClient(handler))\r\n                {\r\n                    Console.WriteLine(uri.AbsoluteUri.ToString());\r\n                    using (HttpResponseMessage response = client.GetAsync(uri).GetAwaiter().GetResult())\r\n                    {\r\n                        Console.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>"},{"Id":"8956903550","Type":"IssuesEvent","CreatedAt":"2019-01-26T21:34:15","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34877","RelatedDescription":"Opened issue \"Incorrect exception message shown during NTLM authentication\" (#34877) at dotnet/corefx","RelatedBody":"Split from #28961.\r\n\r\nAs of .NET Core 2.1, the default HTTP stack is based on SocketsHttpHandler.  SocketsHttpHandler uses the GSSAPI for handling HTTP AUTH schemes of 'Negotiate' and 'NTLM'.\r\n\r\nOn *Nix and OSX machines, this requires installing the GSSAPI support packages for both Kerberos and NTLM. The default docker images for .NET Core do not include the NTLM support package (i.e. gssapi-ntlmssp). As a result, HttpClient will throw an exception when trying to authenticate against an NTLM server because the NTLM related package is not installed on the machine.\r\n\r\nThe exception message currently looks like this:\r\n\r\n>Unhandled Exception: System.ComponentModel.Win32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).\r\n   at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential)\r\n...\r\n\r\nThis issue will address fixing up the error message text to be more descriptive of the problem and solution.\r\n\r\n<details>\r\n<summary>\r\nRepo code\r\n</summary>\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace NtlmErrorTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            using (var listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))\r\n            {\r\n                listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n                listener.Listen(int.MaxValue);\r\n                var ep = (IPEndPoint)listener.LocalEndPoint;\r\n                var uri = new Uri($\"http://{ep.Address}:{ep.Port}/\");\r\n\r\n                Task.Run(async () =>\r\n                {\r\n                    while (true)\r\n                    {\r\n                        Socket s = await listener.AcceptAsync();\r\n                        var ignored = Task.Run(() =>\r\n                        {\r\n                            using (var ns = new NetworkStream(s))\r\n                            using (var reader = new StreamReader(ns))\r\n                            using (var writer = new StreamWriter(ns) { AutoFlush = true })\r\n                            {\r\n                                while (true)\r\n                                {\r\n                                    while (!string.IsNullOrEmpty(reader.ReadLine())) ;\r\n                                    writer.Write(\"HTTP/1.1 401 OK\\r\\nWww-Authenticate: NTLM\\r\\nContent-Length: 5\\r\\n\\r\\nhello\");\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                var handler = new HttpClientHandler();\r\n                handler.Credentials = new NetworkCredential(\"user\", \"password\", \"domain\");\r\n                using (var client = new HttpClient(handler))\r\n                {\r\n                    Console.WriteLine(uri.AbsoluteUri.ToString());\r\n                    using (HttpResponseMessage response = client.GetAsync(uri).GetAwaiter().GetResult())\r\n                    {\r\n                        Console.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n"},{"Id":"8956824169","Type":"IssuesEvent","CreatedAt":"2019-01-26T20:51:35","Actor":"ehajri","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34876","RelatedDescription":"Opened issue \"CryptographicException: Error occurred during a cryptographic operation\" (#34876) at dotnet/corefx","RelatedBody":"# Issue Title\r\nGetting \"_CryptographicException: Error occurred during a cryptographic operation._\" on macOS Mojave.\r\n# General\r\nWhile trying aspnet core Identity from [this repo](https://github.com/aspnet/Docs/tree/master/aspnetcore/security/authentication/identity/sample/src/ASPNETCore-IdentityDemoComplete/IdentityDemo), I get this exception \r\n\r\n> System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation.\r\n>    at Internal.Cryptography.Pal.SecTrustChainPal.ParseResults(SafeX509ChainHandle chainHandle, X509RevocationMode revocationMode)\r\n\r\nwhile executing [this line](https://github.com/aspnet/Docs/blob/446d68e78ab932f7285b2b7d15b685d413553326/aspnetcore/security/authentication/identity/sample/src/ASPNETCore-IdentityDemoComplete/IdentityDemo/Controllers/AccountController.cs#L224):\r\n```c#\r\nvar result = await _userManager.CreateAsync(user, model.Password);\r\n```\r\n### Note\r\nThe project runs successfully under docker but not locally on mac.\r\n\r\n# dotnet --info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview1-002702 [/usr/local/share/dotnet/sdk]\r\n  2.0.2 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-rc1-008673 [/usr/local/share/dotnet/sdk]\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n  2.1.302 [/usr/local/share/dotnet/sdk]\r\n  2.1.500 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0-rc2-3002702 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8957540663","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:58:02","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29969","RelatedDescription":"Reopened issue \"Verify the result of nullability analysis on an event assignment\" (#29969) at dotnet/roslyn","RelatedBody":"```C#\r\n\r\n        public override BoundNode VisitEventAssignmentOperator(BoundEventAssignmentOperator node)\r\n        {\r\n            VisitRvalue(node.ReceiverOpt);\r\n            Debug.Assert(!IsConditionalState);\r\n            var receiverOpt = node.ReceiverOpt;\r\n            if (!node.Event.IsStatic)\r\n            {\r\n                CheckPossibleNullReceiver(receiverOpt);\r\n            }\r\n            VisitRvalue(node.Argument);\r\n            SetResult(node); // PROTOTYPE(NullableReferenceTypes)\r\n            return null;\r\n        }\r\n```"},{"Id":"8957535751","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:54:08","Actor":"bartdesmet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32852","RelatedDescription":"Opened issue \"IDE0060 - Remove unused parameter should not fire for user-defined operators\" (#32852) at dotnet/roslyn","RelatedBody":"Removing the parameter isn't an option when it's required. Compare this to the case of implementing an interface and not using a parameter, which is fine and doesn't cause IDE0060 to fire.\r\n\r\n```csharp\r\nclass Op\r\n{\r\n    // IDE0060 - Remove unused parameter\r\n    public static Op operator -(Op op) => throw new NotImplementedException();\r\n}\r\n```"},{"Id":"8957534168","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:52:42","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32364","RelatedDescription":"Reopened issue \"Nullable + dynamic\" (#32364) at dotnet/roslyn","RelatedBody":"If there is defined class A which overloads + operator such that it returns always null then it is possible to write program throwing ArgumentNullException but has no warnings by dynamics.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/401974/nullable-dynamic.html\r\nVSTS ticketId: 743594_\r\n_These are the original issue comments:_\r\n\r\nlibor.drozdek on 12/7/2018, 01:58 AM (34 days ago): <p>I have problems with formatting when I use \"insert Code\" so I will post the code here:\r\n\r\n```csharp\r\n#nullable enable \r\nclass Program\r\n{\r\n    private static void Main()\r\n    {\r\n        A obj = new A();\r\n        var x = f(obj); \r\n        // Null reference exception but no warning\r\n        x.ToString();\r\n    }\r\n    \r\n    public static object f(dynamic a)\r\n    {\r\n        if (a == null)\r\n            throw new System.Exception();\r\n\r\n        return a + a;\r\n    }\r\n    \r\n    public class A\r\n    {\r\n        public static A? operator +(A fst, A snd) => null;\r\n    }\r\n}\r\n```\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n\r\n----\r\n[jcouv update:] I referenced this issue in code. Please find those references before closing this issue."},{"Id":"8957517105","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:38:51","Actor":"bartdesmet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32851","RelatedDescription":"Opened issue \"IDE0060 - Remove unused parameter for internal method referenced by a delegate in another type\" (#32851) at dotnet/roslyn","RelatedBody":"This warning fires incorrectly when the method is used in a method group conversion from another type, as shown below with `Bar.Foo` referenced from `Baz`.\r\n\r\n```csharp\r\nclass Baz\r\n{\r\n    private static readonly Action<int> s_foo = Bar.Foo;\r\n}\r\n\r\nclass Bar\r\n{\r\n    // IDE0060 - Remove unused parameter\r\n    internal static void Foo(int unused) { }\r\n}\r\n\r\nclass Qux\r\n{\r\n    private static readonly Action<int> s_foo = Foo;\r\n\r\n    // No warning\r\n    internal static void Foo(int unused) { }\r\n}\r\n```"},{"Id":"8957503229","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:27:20","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32364","RelatedDescription":"Closed issue \"Nullable + dynamic\" (#32364) at dotnet/roslyn","RelatedBody":"If there is defined class A which overloads + operator such that it returns always null then it is possible to write program throwing ArgumentNullException but has no warnings by dynamics.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/401974/nullable-dynamic.html\r\nVSTS ticketId: 743594_\r\n_These are the original issue comments:_\r\n\r\nlibor.drozdek on 12/7/2018, 01:58 AM (34 days ago): <p>I have problems with formatting when I use \"insert Code\" so I will post the code here:\r\n\r\n```csharp\r\n#nullable enable \r\nclass Program\r\n{\r\n    private static void Main()\r\n    {\r\n        A obj = new A();\r\n        var x = f(obj); \r\n        // Null reference exception but no warning\r\n        x.ToString();\r\n    }\r\n    \r\n    public static object f(dynamic a)\r\n    {\r\n        if (a == null)\r\n            throw new System.Exception();\r\n\r\n        return a + a;\r\n    }\r\n    \r\n    public class A\r\n    {\r\n        public static A? operator +(A fst, A snd) => null;\r\n    }\r\n}\r\n```\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n\r\n----\r\n[jcouv update:] I referenced this issue in code. Please find those references before closing this issue."},{"Id":"8957497785","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:22:56","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31935","RelatedDescription":"Closed issue \"No nullability warning for a Linq expression\" (#31935) at dotnet/roslyn","RelatedBody":"Visual Studio 2019 Preview 1.1\r\n\r\nThe following code produces no warning and results in null reference exception. \r\n\r\n```C#\r\n#nullable enable\r\nusing System;\r\nclass Program\r\n{ \r\n    static void Main(string[] args)\r\n    {\r\n        string? s = null;\r\n        System.Linq.Expressions.Expression<Func<bool>> ex = () => 0 == s.Length;\r\n        ex.Compile()();\r\n    }\r\n}\r\n```\r\n\r\nExpecting to get a warning on the dereferencing of s.Length"},{"Id":"8957496665","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:22:02","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32011","RelatedDescription":"Closed issue \"Nullable state of nested fields/properties is not tracked on assignments\" (#32011) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.0.0 Preview 1.1\r\nVisualStudio.16.Preview/16.0.0-pre.1.1+28408.50\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code\r\n```cs\r\n#nullable enable\r\n\r\nclass C\r\n{\r\n  void M()\r\n  {\r\n    C c1 = new C();\r\n    C c2 = new C();\r\n    if (c1.Prop != null && c2.Prop != null)\r\n    {\r\n      c1.Prop.ToString(); // no warning, c1.Prop is known to be not null\r\n      c2.Prop.ToString(); // no warning, c2.Prop is known to be not null\r\n      c1 = c2;\r\n      \r\n      c2.Prop.ToString(); // no warning, c2.Prop is known to be not null\r\n      c1.Prop.ToString(); // invalid warning, c1.Prop should be known to be not null as it is not null in c2\r\n    }\r\n  }\r\n\r\n  public string? Prop { get; set; }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nno warnings\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nwarning CS8602: Possible dereference of a null reference.\r\n```\r\n"},{"Id":"8957489894","Type":"IssuesEvent","CreatedAt":"2019-01-27T04:16:34","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32356","RelatedDescription":"Closed issue \"c# 8 null checking in lambdas\" (#32356) at dotnet/roslyn","RelatedBody":"It seems null-elimination of class members is not working in lambdas\n\nIn the attached code you will see that when the member &quot;Parameters&quot; is used outside the lambda, the compiler understands it cannot be null. When it's captured in the lambda it doesn't. \n\nEither there's something about ref values in closures I'm not getting, or there's no good reason this happens.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414633/c-8-null-checking-in-lambdas.html\nVSTS ticketId: 756306_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"8957448802","Type":"IssuesEvent","CreatedAt":"2019-01-27T03:43:22","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29969","RelatedDescription":"Closed issue \"Verify the result of nullability analysis on an event assignment\" (#29969) at dotnet/roslyn","RelatedBody":"```C#\r\n\r\n        public override BoundNode VisitEventAssignmentOperator(BoundEventAssignmentOperator node)\r\n        {\r\n            VisitRvalue(node.ReceiverOpt);\r\n            Debug.Assert(!IsConditionalState);\r\n            var receiverOpt = node.ReceiverOpt;\r\n            if (!node.Event.IsStatic)\r\n            {\r\n                CheckPossibleNullReceiver(receiverOpt);\r\n            }\r\n            VisitRvalue(node.Argument);\r\n            SetResult(node); // PROTOTYPE(NullableReferenceTypes)\r\n            return null;\r\n        }\r\n```"},{"Id":"8957433949","Type":"PullRequestEvent","CreatedAt":"2019-01-27T03:31:57","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32810","RelatedDescription":"Merged pull request \"Regression test for 32503\" (#32810) at dotnet/roslyn","RelatedBody":"This issue is fixed. Adding a regression test.\r\n\r\ncloses #32503"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8957440500","Type":"PullRequestEvent","CreatedAt":"2019-01-27T03:36:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6903","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6903) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar"},{"Id":"8957309531","Type":"PullRequestEvent","CreatedAt":"2019-01-27T01:57:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6901","RelatedDescription":"Merged pull request \"Disable bad CoreCLR test\" (#6901) at dotnet/corert","RelatedBody":"The test makes an assumption that objects are finalized in a specific order. It is not a safe assumption to make."},{"Id":"8957250402","Type":"PullRequestEvent","CreatedAt":"2019-01-27T01:13:53","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6903","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6903) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8956876074","Type":"PullRequestEvent","CreatedAt":"2019-01-26T21:19:54","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6902","RelatedDescription":"Opened pull request \"[Interpreter] Arguments\" (#6902) at dotnet/corert","RelatedBody":"This PR adds support for the following opcodes:\r\n\r\n* `ldarg.*`\r\n\r\nwhich allows methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static int Sum(int a, int b)\r\n{\r\n    return a + b;\r\n}\r\n```\r\n\r\nIt also updates `InterpreterCallInterceptor` to ensure a non-zero `RuntimeMethodHandle` is returned for non-primitive argument and local variable types, which is needed for interpreting methods like the following:\r\n\r\n```csharp\r\npublic static DateTime ForwardDateTime(DateTime d)\r\n{\r\n    return d;\r\n}\r\n\r\npublic static Exception ForwardException(Exception e)\r\n{\r\n    return e;\r\n}\r\n```\r\n"},{"Id":"8956595840","Type":"PullRequestEvent","CreatedAt":"2019-01-26T18:51:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6900","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6900) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"8956541148","Type":"PullRequestEvent","CreatedAt":"2019-01-26T18:23:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6895","RelatedDescription":"Merged pull request \"Fix catch clauses referring to a generic method argument\" (#6895) at dotnet/corert","RelatedBody":"Scrutinizing the CoreCLR Pri#1 results I found a large bucket of\r\nfailures caused by mismatched catch clauses for generic exception\r\ntypes. With tons of help from Jan Vorlicek I tracked this down to\r\na subtle difference in getMethodInfo flags. I have added one of\r\nthe previously failing Pri#1 tests to the CPAOT trivial unit test\r\nsuite.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8956421236","Type":"PullRequestEvent","CreatedAt":"2019-01-26T17:22:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6901","RelatedDescription":"Opened pull request \"Disable bad CoreCLR test\" (#6901) at dotnet/corert","RelatedBody":"The test makes an assumption that objects are finalized in a specific order. It is not a safe assumption to make."},{"Id":"8956413288","Type":"PullRequestEvent","CreatedAt":"2019-01-26T17:18:54","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6900","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6900) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8956405181","Type":"PullRequestEvent","CreatedAt":"2019-01-26T17:15:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6896","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6896) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams @benaadams @marek-safar"},{"Id":"8956237392","Type":"PullRequestEvent","CreatedAt":"2019-01-26T15:52:04","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6899","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#6899) at dotnet/corert","RelatedBody":""},{"Id":"8956237045","Type":"PullRequestEvent","CreatedAt":"2019-01-26T15:51:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6899","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#6899) at dotnet/corert","RelatedBody":""},{"Id":"8956096890","Type":"PullRequestEvent","CreatedAt":"2019-01-26T14:39:27","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6898","RelatedDescription":"Opened pull request \"WIP: Move Timer to shared CoreLib partition.\" (#6898) at dotnet/corert","RelatedBody":"Counter-part to https://github.com/dotnet/coreclr/pull/22231, contributes to https://github.com/dotnet/coreclr/issues/21932."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"open","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Open PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"403442258","IsPullRequest":true,"CreatedAt":"2019-01-27T01:08:53","Actor":"marek-safar","Number":"22230","RawContent":null,"Title":"Move Marshal::ZeroFree* to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22230","RelatedDescription":"Closed or merged PR \"Move Marshal::ZeroFree* to shared partition\" (#22230)"},{"Id":"403482176","IsPullRequest":false,"CreatedAt":"2019-01-26T20:53:01","Actor":"saucecontrol","Number":"22235","RawContent":null,"Title":"JIT fails to inline methods called from a large/complex outer method","State":"open","Body":"I'm seeing a significant perf regression between 2.1 and 3.0 for this complex hashing function\r\nhttps://github.com/saucecontrol/Blake2Fast/blob/master/src/Blake2Fast/Blake2bSse4.cs#L186-L504\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\r\nIntel Xeon CPU E3-1505M v6 3.00GHz, 1 CPU, 8 logical and 4 physical cores\r\nFrequency=2929685 Hz, Resolution=341.3336 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-preview-010184\r\n  [Host]        : .NET Core 2.1.7 (CoreCLR 4.6.27129.04, CoreFX 4.6.27129.04), 64bit RyuJIT\r\n  netcoreapp2.1 : .NET Core 2.1.7 (CoreCLR 4.6.27129.04, CoreFX 4.6.27129.04), 64bit RyuJIT\r\n  netcoreapp3.0 : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n\r\nJit=RyuJit  Toolchain=Default  \r\n\r\n```\r\n|      Method |           Job | Platform |     Mean |     Error |    StdDev | Allocated |\r\n|------------ |-------------- |--------- |---------:|----------:|----------:|----------:|\r\n| Blake2bFast | netcoreapp2.1 |      X64 | 11.79 ms | 0.1075 ms | 0.1005 ms |       0 B |\r\n| Blake2bFast | netcoreapp3.0 |      X64 | 52.02 ms | 0.6522 ms | 0.6101 ms |       0 B |\r\n|             |               |          |          |           |           |           |\r\n| Blake2bFast | netcoreapp2.1 |      X86 | 16.14 ms | 0.1888 ms | 0.1766 ms |       0 B |\r\n| Blake2bFast | netcoreapp3.0 |      X86 | 80.83 ms | 2.0971 ms | 6.1834 ms |       0 B |\r\n\r\n\r\nIn looking at the generated assembly, it appears RyuJIT produces good code up until about midway through the third round of mixing, and then switches from inlining the mixing functions (g1 and g2) to calling them instead.\r\n\r\nI had to make some changes to the 3.0 version of the code, but those amounted to nothing more than replacing the older `StaticCast` calls with the new `As` variants.  To confirm the codegen around the API changes wasn't the issue, I commented out rounds 3-12 in the main function, and performance returned to 2.1 levels.  So it appears the complexity of the main function is the issue.\r\n\r\nI spotted https://github.com/dotnet/coreclr/pull/21893 which mentions a change to the inlining budget allowed by the JIT, but I wasn't able to find where the 'budget' logic was added or whether any part of it was included in 2.1.  I can see that in 3.0 Preview 1, this function is about 10x slower than 2.1 and with the nightly builds the delta dropped to 4-5x, so it seems to be related somehow.\r\n\r\nObviously in this case, the performance implications of ignoring the `MethodImplOptions.AggressiveInlining` hints are quite catastrophic, so I'm wondering if there is a way to truly force inlining or to adjust the budget the JIT allows.  The function's complexity can't be reduced, and because of the heavy use of intrinsics, the generated code is a small fraction of what it appears to be in C# or IL.\r\n\r\n@AndyAyersMS any ideas?\r\n","Url":"https://github.com/dotnet/coreclr/issues/22235","RelatedDescription":"Open issue \"JIT fails to inline methods called from a large/complex outer method\" (#22235)"},{"Id":"403465335","IsPullRequest":true,"CreatedAt":"2019-01-26T17:57:20","Actor":"benaadams","Number":"22234","RawContent":null,"Title":"Shrink Task.Delay when used without Cancellation (2)","State":"open","Body":"Follow up to https://github.com/dotnet/coreclr/pull/22233\r\n\r\n`Task.Delay` is commonly used without cancellation:\r\n\r\n`Task Delay(int)` - API Port 22.6%\r\n`Task Delay(TimeSpan)` - API Port 9.8%\r\n\r\n`Task Delay(int, CancellationToken)` - API Port 5.6%\r\n`Task Delay(TimeSpan, CancellationToken)` - API Port 9.3%\r\n\r\nThis shaves 24 bytes of allocation off that common path.\r\n\r\nUsing @SergeyTeplyakov's [ObjectLayoutInspector](https://github.com/SergeyTeplyakov/ObjectLayoutInspector) and local copies of the internal objects to make it easier to inspect.\r\n```csharp\r\nObjectLayoutInspector.TypeLayout.PrintLayout<DelayPromiseWithCancellation>(recursively: true);\r\nObjectLayoutInspector.TypeLayout.PrintLayout<DelayPromise>(recursively: true);\r\n```\r\n```\r\nType layout for 'DelayPromiseWithCancellation'\r\nSize: 88 bytes. Paddings: 7 bytes (%7 of empty space)\r\n|==============================================================|\r\n| Object Header (8 bytes)                                      |\r\n|--------------------------------------------------------------|\r\n| Method Table Ptr (8 bytes)                                   |\r\n|==============================================================|\r\n|   0-7: Delegate m_action (8 bytes)                           |\r\n|--------------------------------------------------------------|\r\n|  8-15: Object m_stateObject (8 bytes)                        |\r\n|--------------------------------------------------------------|\r\n| 16-23: TaskScheduler m_taskScheduler (8 bytes)               |\r\n|--------------------------------------------------------------|\r\n| 24-31: Object m_continuationObject (8 bytes)                 |\r\n|--------------------------------------------------------------|\r\n| 32-39: ContingentProperties m_contingentProperties (8 bytes) |\r\n|--------------------------------------------------------------|\r\n| 40-43: Int32 m_taskId (4 bytes)                              |\r\n|--------------------------------------------------------------|\r\n| 44-47: Int32 m_stateFlags (4 bytes)                          |\r\n|--------------------------------------------------------------|\r\n|    48: VoidTaskResult m_result (1 byte)                      |\r\n|--------------------------------------------------------------|\r\n| 49-55: padding (7 bytes)                                     |\r\n|--------------------------------------------------------------|\r\n| 56-63: TimerQueueTimer Timer (8 bytes)                       |\r\n|--------------------------------------------------------------|\r\n| 64-71: CancellationToken Token (8 bytes)                     |\r\n|--------------------------------------------------------------|\r\n| 72-87: CancellationTokenRegistration Registration (16 bytes) |\r\n| |=====================================|                      |\r\n| |   0-7: CallbackNode _node (8 bytes) |                      |\r\n| |-------------------------------------|                      |\r\n| |  8-15: Int64 _id (8 bytes)          |                      |\r\n| |=====================================|                      |\r\n|==============================================================|\r\n```\r\nTo\r\n```\r\nType layout for 'DelayPromise'\r\nSize: 64 bytes. Paddings: 7 bytes (%10 of empty space)\r\n|==============================================================|\r\n| Object Header (8 bytes)                                      |\r\n|--------------------------------------------------------------|\r\n| Method Table Ptr (8 bytes)                                   |\r\n|==============================================================|\r\n|   0-7: Delegate m_action (8 bytes)                           |\r\n|--------------------------------------------------------------|\r\n|  8-15: Object m_stateObject (8 bytes)                        |\r\n|--------------------------------------------------------------|\r\n| 16-23: TaskScheduler m_taskScheduler (8 bytes)               |\r\n|--------------------------------------------------------------|\r\n| 24-31: Object m_continuationObject (8 bytes)                 |\r\n|--------------------------------------------------------------|\r\n| 32-39: ContingentProperties m_contingentProperties (8 bytes) |\r\n|--------------------------------------------------------------|\r\n| 40-43: Int32 m_taskId (4 bytes)                              |\r\n|--------------------------------------------------------------|\r\n| 44-47: Int32 m_stateFlags (4 bytes)                          |\r\n|--------------------------------------------------------------|\r\n|    48: VoidTaskResult m_result (1 byte)                      |\r\n|--------------------------------------------------------------|\r\n| 49-55: padding (7 bytes)                                     |\r\n|--------------------------------------------------------------|\r\n| 56-63: TimerQueueTimer Timer (8 bytes)                       |\r\n|==============================================================|\r\n```\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/22234","RelatedDescription":"Open PR \"Shrink Task.Delay when used without Cancellation (2)\" (#22234)"},{"Id":"403416039","IsPullRequest":true,"CreatedAt":"2019-01-26T17:26:17","Actor":"jkotas","Number":"22228","RawContent":null,"Title":"Cleanup stackoverflow handling leftovers","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22228","RelatedDescription":"Closed or merged PR \"Cleanup stackoverflow handling leftovers\" (#22228)"},{"Id":"403452299","IsPullRequest":true,"CreatedAt":"2019-01-26T15:32:16","Actor":"benaadams","Number":"22233","RawContent":null,"Title":"Shrink Task.Delay when used without Cancellation","State":"open","Body":"`Task.Delay` is commonly used without cancellation:\r\n\r\n`Task Delay(int)` - API Port 22.6%\r\n`Task Delay(TimeSpan)` - API Port 9.8%\r\n\r\n`Task Delay(int, CancellationToken)` - API Port 5.6%\r\n`Task Delay(TimeSpan, CancellationToken)` - API Port 9.3%\r\n\r\nThis shaves 24 bytes of allocation off that common path.\r\n\r\nUsing @SergeyTeplyakov's [ObjectLayoutInspector](https://github.com/SergeyTeplyakov/ObjectLayoutInspector) and local copies of the internal objects to make it easier to inspect.\r\n```csharp\r\nObjectLayoutInspector.TypeLayout.PrintLayout<DelayPromise>(recursively: true);\r\nObjectLayoutInspector.TypeLayout.PrintLayout<DelayPromiseWithoutCancellation>(recursively: true);\r\n```\r\n```\r\nType layout for 'DelayPromise'\r\nSize: 88 bytes. Paddings: 7 bytes (%7 of empty space)\r\n|==============================================================|\r\n| Object Header (8 bytes)                                      |\r\n|--------------------------------------------------------------|\r\n| Method Table Ptr (8 bytes)                                   |\r\n|==============================================================|\r\n|   0-7: Delegate m_action (8 bytes)                           |\r\n|--------------------------------------------------------------|\r\n|  8-15: Object m_stateObject (8 bytes)                        |\r\n|--------------------------------------------------------------|\r\n| 16-23: TaskScheduler m_taskScheduler (8 bytes)               |\r\n|--------------------------------------------------------------|\r\n| 24-31: Object m_continuationObject (8 bytes)                 |\r\n|--------------------------------------------------------------|\r\n| 32-39: ContingentProperties m_contingentProperties (8 bytes) |\r\n|--------------------------------------------------------------|\r\n| 40-43: Int32 m_taskId (4 bytes)                              |\r\n|--------------------------------------------------------------|\r\n| 44-47: Int32 m_stateFlags (4 bytes)                          |\r\n|--------------------------------------------------------------|\r\n|    48: VoidTaskResult m_result (1 byte)                      |\r\n|--------------------------------------------------------------|\r\n| 49-55: padding (7 bytes)                                     |\r\n|--------------------------------------------------------------|\r\n| 56-63: TimerQueueTimer Timer (8 bytes)                       |\r\n|--------------------------------------------------------------|\r\n| 64-71: CancellationToken Token (8 bytes)                     |\r\n|--------------------------------------------------------------|\r\n| 72-87: CancellationTokenRegistration Registration (16 bytes) |\r\n| |=====================================|                      |\r\n| |   0-7: CallbackNode _node (8 bytes) |                      |\r\n| |-------------------------------------|                      |\r\n| |  8-15: Int64 _id (8 bytes)          |                      |\r\n| |=====================================|                      |\r\n|==============================================================|\r\n```\r\nTo\r\n```\r\nType layout for 'DelayPromiseWithoutCancellation'\r\nSize: 64 bytes. Paddings: 7 bytes (%10 of empty space)\r\n|==============================================================|\r\n| Object Header (8 bytes)                                      |\r\n|--------------------------------------------------------------|\r\n| Method Table Ptr (8 bytes)                                   |\r\n|==============================================================|\r\n|   0-7: Delegate m_action (8 bytes)                           |\r\n|--------------------------------------------------------------|\r\n|  8-15: Object m_stateObject (8 bytes)                        |\r\n|--------------------------------------------------------------|\r\n| 16-23: TaskScheduler m_taskScheduler (8 bytes)               |\r\n|--------------------------------------------------------------|\r\n| 24-31: Object m_continuationObject (8 bytes)                 |\r\n|--------------------------------------------------------------|\r\n| 32-39: ContingentProperties m_contingentProperties (8 bytes) |\r\n|--------------------------------------------------------------|\r\n| 40-43: Int32 m_taskId (4 bytes)                              |\r\n|--------------------------------------------------------------|\r\n| 44-47: Int32 m_stateFlags (4 bytes)                          |\r\n|--------------------------------------------------------------|\r\n|    48: VoidTaskResult m_result (1 byte)                      |\r\n|--------------------------------------------------------------|\r\n| 49-55: padding (7 bytes)                                     |\r\n|--------------------------------------------------------------|\r\n| 56-63: TimerQueueTimer Timer (8 bytes)                       |\r\n|==============================================================|\r\n```\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/22233","RelatedDescription":"Open PR \"Shrink Task.Delay when used without Cancellation\" (#22233)"},{"Id":"403449259","IsPullRequest":false,"CreatedAt":"2019-01-26T14:56:51","Actor":"cschuchardt88","Number":"22232","RawContent":null,"Title":"dotnet.exe 'Access violation'","State":"open","Body":"> Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager:Information: User profile is available. Using 'C:\\Users\\\\~~NoShow~~\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.\r\n> Microsoft.AspNetCore.Hosting.Internal.WebHost:Information: Request starting HTTP/1.1 GET https://localhost:5001/  \r\n> Microsoft.AspNetCore.Routing.EndpointMiddleware:Information: Executing endpoint 'pwi.web.looms.core.Controllers.HomeController.Index (pwi.web.looms.core)'\r\n> Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker:Information: Route matched with {action = \"Index\", controller = \"Home\"}. Executing action pwi.web.looms.core.Controllers.HomeController.Index (pwi.web.looms.core)\r\n> **The program '[15312] dotnet.exe' has exited with code -1073741819 (0xc0000005) 'Access violation'.**\r\n\r\nThis is all i get for debug output.","Url":"https://github.com/dotnet/coreclr/issues/22232","RelatedDescription":"Open issue \"dotnet.exe 'Access violation'\" (#22232)"},{"Id":"403433195","IsPullRequest":true,"CreatedAt":"2019-01-26T14:23:50","Actor":"Dotnet-GitSync-Bot","Number":"22229","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/22229","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#22229)"},{"Id":"403444501","IsPullRequest":true,"CreatedAt":"2019-01-26T14:01:58","Actor":"filipnavara","Number":"22231","RawContent":null,"Title":"WIP: Move Timer to shared CoreLib partition.","State":"open","Body":"Contributes to #21932.\r\n\r\nI'll submit CoreRT counter-part PR soon, still working on getting the Unix build working.","Url":"https://github.com/dotnet/coreclr/pull/22231","RelatedDescription":"Open PR \"WIP: Move Timer to shared CoreLib partition.\" (#22231)"},{"Id":"403394221","IsPullRequest":false,"CreatedAt":"2019-01-26T06:35:43","Actor":"BruceForstall","Number":"22226","RawContent":null,"Title":"[arm64] ObjectStackAllocationTests fails in release r2r job","State":"closed","Body":"Windows and Ubuntu\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_cross_release_ubuntu16.04_r2r_tst/22/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_cross_release_windows_nt_r2r_tst/144/consoleFull\r\n```\r\nJIT_opt._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_sh [FAIL]\r\n06:02:47         /n/nReturn code:      1/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/JIT/opt/Reports/JIT.opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.output.txt/nRaw output:/nBEGIN EXECUTION\r\n06:02:47         in takeLock\r\n06:02:47         /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/Tests/Core_Root/crossgen /Platform_Assemblies_Paths /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/Tests/Core_Root:/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/JIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/IL:/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/JIT/opt/ObjectStackAllocation/ObjectStackAllocationTests /in ObjectStackAllocationTests.org /out ObjectStackAllocationTests.exe\r\n06:02:47         Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n06:02:47         Copyright (c) Microsoft Corporation.  All rights reserved.\r\n06:02:47         \r\n06:02:47         Native image ObjectStackAllocationTests.exe generated successfully.\r\n06:02:47         in ReleaseLock\r\n06:02:47         in takeLock\r\n06:02:47         /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/Tests/Core_Root/corerun ObjectStackAllocationTests.exe\r\n06:02:47         SUCCESS (AllocateSimpleClassAndAddFields)\r\n06:02:47         SUCCESS (AllocateSimpleClassesAndEQCompareThem)\r\n06:02:47         SUCCESS (AllocateSimpleClassesAndNECompareThem)\r\n06:02:47         SUCCESS (AllocateSimpleClassAndGetField)\r\n06:02:47         SUCCESS (AllocateClassWithNestedStructAndGetField)\r\n06:02:47         SUCCESS (AllocateClassWithNestedStructAndAddFields)\r\n06:02:47         FAILURE (AllocateSimpleClassAndCheckTypeNoHelper): unexpected allocation of 24 bytes\r\n06:02:47         SUCCESS (AllocateSimpleClassWithGCFieldAndAddFields)\r\n06:02:47         SUCCESS (AllocateSimpleClassAndAssignRefToAField)\r\n06:02:47         SUCCESS (TestMixOfReportingAndWriteBarriers)\r\n06:02:47         SUCCESS (AllocateSimpleClassAndCheckTypeHelper)\r\n06:02:47         SUCCESS (AllocateSimpleClassAndCast)\r\n06:02:47         SUCCESS (BoxSimpleStructAndAddFields)\r\n06:02:47         in ReleaseLock\r\n06:02:47         Expected: 100\r\n06:02:47         Actual: 255\r\n06:02:47         END EXECUTION - FAILED\r\n06:02:47         Test Harness Exitcode is : 1\r\n06:02:47         /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04_r2r_tst/bin/tests/Linux.arm64.Release/JIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.sh/n\r\n06:02:47         Expected: True\r\n06:02:47         Actual:   False\r\n06:02:47         Stack Trace:\r\n06:02:47           /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_release_ubuntu16.04/bin/tests/Linux.arm64.Release/TestWrappers/JIT.opt/JIT.opt.XUnitWrapper.cs(8439,0): at JIT_opt._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_sh()\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/22226","RelatedDescription":"Closed issue \"[arm64] ObjectStackAllocationTests fails in release r2r job\" (#22226)"},{"Id":"403394576","IsPullRequest":false,"CreatedAt":"2019-01-26T02:14:11","Actor":"BlackCentipede","Number":"22227","RawContent":null,"Title":"[Linux] DllImport should invoke with RTLD_GLOBAL flag","State":"open","Body":"The CoreCLR behavior seems to be behaving as if library is loaded as RTLD_LOCAL despite the fact that the actual code resolves them with RTLD_LAZY flag when using dlopen. This causes some difficulty of using CoreCLR for P/Invoke code that since current P/Invoke API currently cannot access global library variables (at least cleanly), we would normally use dlopen/dlsym to access the global library variables. The problem is that it behaves in a way that it seems as if there are 2 instances of the same library. It has persisted for more than 2 years now.\r\n\r\nI've written a minimal reproduction code that can be tested on Mono and CoreCLR:\r\nhttps://github.com/BlackCentipede/PinvokeBug\r\n\r\nTo test, simply run `dotnet run` and `clang -std=c99 -shared -fPIC -olibTest.so Test.c && mcs Program.cs && mono Program.exe` under TestPInvoke directory.\r\n\r\nDotnet Core would print the following:\r\n\r\n![dotnetcorebug](https://user-images.githubusercontent.com/9369939/51781366-e8a82500-20d4-11e9-8258-35f9988b83d0.png)\r\n\r\nAnd Mono Runtime would print the following:\r\n![mono](https://user-images.githubusercontent.com/9369939/51781370-f493e700-20d4-11e9-9175-efac34457e14.png)\r\n\r\nThis is tested on Dotnet Core 2.2.102 and Mono 5.16.0.","Url":"https://github.com/dotnet/coreclr/issues/22227","RelatedDescription":"Open issue \"[Linux] DllImport should invoke with RTLD_GLOBAL flag\" (#22227)"},{"Id":"403339673","IsPullRequest":false,"CreatedAt":"2019-01-26T01:40:23","Actor":"RayKoopa","Number":"22217","RawContent":null,"Title":"Can't start .NET Core 2.2.1 host: \"ESP was not properly saved across function call\"","State":"closed","Body":"- using the [.NET Core Runtime 2.2.1 x86 Binaries](https://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-windows-x86-binaries)\r\n- new VC++ x86 project in VS2017\r\n- running Windows 10.0.17763.253 x64\r\n\r\nI try to run a .NET Core host from a new project (porting my old COM hosting API code to the newer `CoreClrHost.h` functionality), but when I call `coreclr_initialize_ptr`, it fails with the following Visual Studio message:\r\n```\r\nRun-Time Check Failure #0 - The value of ESP was not properly saved across a function call. \r\nThis is usually a result of calling a function declared with one calling convention with a\r\nfunction pointer declared with a different calling convention.\r\n```\r\nI can't seem to ignore this message, debugging loops getting access violation exceptions afterwards.\r\n\r\nWeirder, I can reproduce this issue with the official [SampleHost](https://github.com/dotnet/samples/blob/master/core/hosting/HostWithCoreClrHost/src/SampleHost.cpp), but there it seems like I can ignore this message and continue executing the code, just to get the message again at `core_clr_create_delegate`. Is this supposed to happen?\r\n\r\nIf of interest, I steamed down my own code to the following (latest C++ features):\r\n```cpp\r\n#include <filesystem>\r\n#include <string>\r\n#include <Windows.h>\r\n#include \"CoreClrHost.h\"\r\n\r\nusing namespace std;\r\nusing namespace std::experimental::filesystem;\r\n\r\n// ---- Helper methods extracted for this sample ----\r\n\r\nstd::wstring Utf8ToUtf16(std::string const& utf8)\r\n{\r\n\tif (utf8.empty())\r\n\t\treturn std::wstring();\r\n\tint utf16Length = MultiByteToWideChar(CP_UTF8, 0, &utf8[0], (int)utf8.size(), NULL, 0);\r\n\tstd::wstring utf16(utf16Length, 0);\r\n\tMultiByteToWideChar(CP_UTF8, 0, &utf8[0], (int)utf8.size(), &utf16[0], utf16Length);\r\n\treturn utf16;\r\n}\r\n\r\nstd::string Utf16ToUtf8(std::wstring const& utf16)\r\n{\r\n\tif (utf16.empty())\r\n\t\treturn std::string();\r\n\tint utf8Length = WideCharToMultiByte(CP_UTF8, 0, &utf16[0], (int)utf16.size(), NULL, 0, NULL, NULL);\r\n\tstd::string utf8(utf8Length, 0);\r\n\tWideCharToMultiByte(CP_UTF8, 0, &utf16[0], (int)utf16.size(), &utf8[0], utf8Length, NULL, NULL);\r\n\treturn utf8;\r\n}\r\n\r\nstring ConcatenatePaths(vector<string> const& paths)\r\n{\r\n\tstring concatenatedPaths;\r\n\tfor (string path : paths)\r\n\t{\r\n\t\tconcatenatedPaths.append(canonical(path).string());\r\n\t\tconcatenatedPaths.append(\";\");\r\n\t}\r\n\treturn concatenatedPaths;\r\n}\r\n\r\nvector<string> GetAssembliesFromFolder(string const& folderPath)\r\n{\r\n\tvector<string> assemblies;\r\n\tfor (auto& item : directory_iterator(folderPath))\r\n\t{\r\n\t\tpath path = item.path();\r\n\t\tstring extension = path.extension().string();\r\n\t\ttransform(extension.begin(), extension.end(), extension.begin(), ::tolower);\r\n\t\tif (extension == \".dll\")\r\n\t\t\tassemblies.push_back(path.string());\r\n\t}\r\n\treturn assemblies;\r\n}\r\n\r\n// ---- The important stuff ----\r\n\r\nint main()\r\n{\r\n\twchar_t moduleFileName[MAX_PATH];\r\n\tGetModuleFileName(NULL, moduleFileName, MAX_PATH);\r\n\tstring exeFolder = path(Utf16ToUtf8(moduleFileName)).parent_path().string();\r\n\tstring runtimeFolder = (exeFolder / \"runtime\").string();\r\n\r\n\t// Load the CoreCLR library and retrieve the required functions.\r\n\tauto coreClr = LoadLibraryEx(\r\n\t\tUtf8ToUtf16((runtimeFolder / \"coreclr.dll\").string()).c_str(),\r\n\t\tNULL,\r\n\t\t0);\r\n\tif (!coreClr)\r\n\t\treturn -1;\r\n\r\n\tauto fnInitialize = (coreclr_initialize_ptr)GetProcAddress(\r\n\t\t(HMODULE)coreClr,\r\n\t\t\"coreclr_initialize\");\r\n\tif (!fnInitialize)\r\n\t\treturn -1;\r\n\r\n\t// Configure the AppDomain settings.\r\n\tauto platformAssembliesPaths = ConcatenatePaths(GetAssembliesFromFolder(runtimeFolder));\r\n\tconst char* propertyKeys[] = { \"TRUSTED_PLATFORM_ASSEMBLIES\" };\r\n\tconst char* propertyValues[] = { platformAssembliesPaths.c_str() };\r\n\r\n\t// Start the runtime and the AppDomain.\r\n\tvoid* host;\r\n\tunsigned int domainId;\r\n\t// Trying to run this makes VS spit out above message and I can't ignore it.\r\n\tif (fnInitialize(\r\n\t\texeFolder.c_str(),\r\n\t\t\"My AppDomain\",\r\n\t\tsizeof(propertyKeys) / sizeof(char*),\r\n\t\tpropertyKeys,\r\n\t\tpropertyValues,\r\n\t\t&host,\r\n\t\t&domainId) < 0)\r\n\t{\r\n\t\treturn -1;\r\n\t}\r\n}\r\n```\r\nI checked the paths, the loaded library and procedure addresses, they're all correct, only the call at the end fails. Is there anything special I have to set up in my project to make this work?","Url":"https://github.com/dotnet/coreclr/issues/22217","RelatedDescription":"Closed issue \"Can't start .NET Core 2.2.1 host: \"ESP was not properly saved across function call\"\" (#22217)"},{"Id":"403246521","IsPullRequest":true,"CreatedAt":"2019-01-26T01:05:34","Actor":"echesakovMSFT","Number":"22211","RawContent":null,"Title":"Run on one Helix queue on pull requests and CI builds. Add CI trigger for master branch","State":"closed","Body":"This limits pull request and CI (push) triggered jobs to running only on one *default* Helix queue:\r\n\r\nLinux arm32 - Ubuntu.1404.Arm32.Open\r\nLinux arm64 - Ubuntu.1804.Arm64.Open\r\nLinux x64 - Ubuntu.1804.Amd64.Open\r\n\r\nWindows_NT x86/x64 - Windows.10.Amd64.Open\r\nWindows_NT arm32/arm64 - we don't run these in AzDO\r\n\r\nOSX - OSX.1013.Amd64.Open\r\n\r\nScheduled and manually triggered jobs will use more than one Helix queues for more comprehensive checking. \r\n\r\nThese open queues should NOT be used - we keep them for Jenkins CI:\r\n- Ubuntu.1604.Arm64.Open\r\n- OSX.1012.Amd64.Open\r\n- Windows.10.Arm64.Open \r\n\r\nThis enables CI (push) trigger for master branch. During CI build the following scenarios for Pri1 tests are going to run:\r\n- normal\r\n- no_tiered_compilation\r\n","Url":"https://github.com/dotnet/coreclr/pull/22211","RelatedDescription":"Closed or merged PR \"Run on one Helix queue on pull requests and CI builds. Add CI trigger for master branch\" (#22211)"},{"Id":"403371056","IsPullRequest":true,"CreatedAt":"2019-01-26T01:02:43","Actor":"echesakovMSFT","Number":"22222","RawContent":null,"Title":"[NO MERGE] Switch to dnceng-linux-external-temp pool","State":"closed","Body":"Same as https://github.com/dotnet/coreclr/pull/22220 - do this for stress testing of the new pool","Url":"https://github.com/dotnet/coreclr/pull/22222","RelatedDescription":"Closed or merged PR \"[NO MERGE] Switch to dnceng-linux-external-temp pool\" (#22222)"},{"Id":"403368507","IsPullRequest":true,"CreatedAt":"2019-01-26T01:02:13","Actor":"echesakovMSFT","Number":"22220","RawContent":null,"Title":"Switch to dnceng-linux-external-temp pool","State":"closed","Body":"This should save us from the issues like this in AzDO Linux Docker builds:\r\n```\r\n2019-01-25T21:23:03.7271056Z /__w/1/s/Tools/IL.targets(49,5): error MSB6003: The specified task executable \"sh\" could not be run. Cannot allocate memory [/__w/1/s/tests/src/readytorun/tests/fieldgetter.ilproj]\r\n2019-01-25T21:23:03.7271363Z /__w/1/s/Tools/IL.targets(49,5): error MSB6003: The specified task executable \"sh\" could not be run. Cannot allocate memory [/__w/1/s/tests/src/reflection/DefaultInterfaceMethods/GetInterfaceMapProvider.ilproj]\r\n2019-01-25T21:23:03.7271805Z /__w/1/s/Tools/IL.targets(49,5): error MSB6003: The specified task executable \"sh\" could not be run. Cannot allocate memory [/__w/1/s/tests/src/reflection/DefaultInterfaceMethods/InvokeProvider.ilproj]\r\n2019-01-25T21:23:03.7272224Z /__w/1/s/Tools/IL.targets(49,5): error MSB6003: The specified task executable \"sh\" could not be run. Cannot allocate memory [/__w/1/s/tests/src/reflection/Modifiers/modifiersdata.ilproj]\r\n2019-01-25T21:23:03.7272604Z /__w/1/s/tests/dir.traversal.targets(25,5): error : (No message specified) [/__w/1/s/tests/src/dirs.proj]\r\n```\r\n\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=80595\r\n\r\n/cc @MattGal ","Url":"https://github.com/dotnet/coreclr/pull/22220","RelatedDescription":"Closed or merged PR \"Switch to dnceng-linux-external-temp pool\" (#22220)"},{"Id":"403384417","IsPullRequest":true,"CreatedAt":"2019-01-26T00:42:59","Actor":"grant-d","Number":"22225","RawContent":null,"Title":"[NO MERGE] BitOps analysis (WIP)","State":"open","Body":"See https://github.com/dotnet/corefx/issues/32269\r\n\r\n**No merge required.**\r\n\r\nThis PR is work-in-progress and the initial commits simply identify duplicate code across the stack.\r\nIt is being used for **impact-analysis** for the related feature.\r\nFor more details, see the inline comments in the code.\r\n\r\ncc @tannergooding ","Url":"https://github.com/dotnet/coreclr/pull/22225","RelatedDescription":"Open PR \"[NO MERGE] BitOps analysis (WIP)\" (#22225)"},{"Id":"403382759","IsPullRequest":false,"CreatedAt":"2019-01-26T00:31:31","Actor":"billwert","Number":"22224","RawContent":null,"Title":"Perf: Exceptions are much slower on .NET Core compared to .NET Framework","State":"open","Body":"@realdotnetdave reported to us that exception performance is meaningfully different between .NET Core and .NET Framework. This [article](https://www.c-sharpcorner.com/blogs/performance-exception-trapping) has his writeup.\r\n\r\n|            Method |  Job | Runtime |      Mean |     Error |    StdDev |\r\n|------------------ |----- |-------- |----------:|----------:|----------:|\r\n| ExceptionTryCatch |  Clr |     Clr |  6.630 us | 0.0244 us | 0.0217 us |\r\n| ExceptionWithWith |  Clr |     Clr |  6.652 us | 0.1268 us | 0.1302 us |\r\n| ExceptionTryCatch | Core |    Core | 13.754 us | 0.1761 us | 0.1647 us |\r\n| ExceptionWithWith | Core |    Core | 13.963 us | 0.1087 us | 0.1017 us |\r\n\r\nCode [here](https://github.com/billwert/exceptionperf) for the benchmark.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/22224","RelatedDescription":"Open issue \"Perf: Exceptions are much slower on .NET Core compared to .NET Framework\" (#22224)"},{"Id":"403376159","IsPullRequest":true,"CreatedAt":"2019-01-25T23:52:12","Actor":"erozenfeld","Number":"22223","RawContent":null,"Title":"Set GTF_ADDR_ONSTACK in LocalAddressVisitor.","State":"open","Body":"`GTF_ADDR_ONSTACK`  indicates that the address points to the stack.\r\nIt's set for all new `GT_ADDR` nodes when the child is `GT_LCL_VAR`.\r\nThis flag is used in morph. One of the uses is to change the type\r\nfrom `TYP_BYREF` to `TYP_I_IMPL`.\r\n\r\n`LocalAddressVisitor` runs before morph and calls `fgMorphStructField`,\r\nwhich may result in a child of `GT_ADDR` to be simplified to `GT_LCL_VAR`.\r\nThis change recognizes this case and sets `GTF_ADDR_ONSTACK`\r\non `GT_ADDR` node.\r\n\r\nFixes #22190.","Url":"https://github.com/dotnet/coreclr/pull/22223","RelatedDescription":"Open PR \"Set GTF_ADDR_ONSTACK in LocalAddressVisitor.\" (#22223)"},{"Id":"403370347","IsPullRequest":true,"CreatedAt":"2019-01-25T23:20:13","Actor":"janvorli","Number":"22221","RawContent":null,"Title":"Add unloadability howto document","State":"open","Body":"This document describes how to use unloadability in .NET Core 3.0 and\r\nhow to debug issues with unloading.","Url":"https://github.com/dotnet/coreclr/pull/22221","RelatedDescription":"Open PR \"Add unloadability howto document\" (#22221)"},{"Id":"403353374","IsPullRequest":false,"CreatedAt":"2019-01-25T22:12:09","Actor":"davidwrighton","Number":"22219","RawContent":null,"Title":"Handling for custom modifiers Microsoft.VisualC.NeedsCopyConstructorModifier and System.Runtime.IsCopyConstructed is not correct","State":"open","Body":"CoreCLR is missing the BlittableValueClassWithCopyCtorMarshaller\r\n\r\nThe logic in NDirect::MarshalingRequired doesn't detect marshalling needed cases for ByRef parameters. Currently it only implements the logic for Ptr parameters.","Url":"https://github.com/dotnet/coreclr/issues/22219","RelatedDescription":"Open issue \"Handling for custom modifiers Microsoft.VisualC.NeedsCopyConstructorModifier and System.Runtime.IsCopyConstructed is not correct\" (#22219)"},{"Id":"403352256","IsPullRequest":true,"CreatedAt":"2019-01-25T22:08:02","Actor":"sywhang","Number":"22218","RawContent":null,"Title":"Backporting #21993 to 2.2 branch - EventParameterInfo.GetMetadataLength() throws NotSupportedException ","State":"open","Body":"**Description**\r\n\r\nFrom 2.2/3.0, customers started seeing ```NotSupportedException``` being thrown from ```EventParameterInfo.GetMetadataLength()```. This happens when eventpipe cannot successfully serialize a particular event argument type. We throw an exception and then catch it from the call site, so nothing gets broken. However, there is a potential perf implication if we start throwing a lot of these and some customers are seeing many exceptions being thrown. (See https://github.com/dotnet/coreclr/issues/21743) \r\n\r\nThe fix is quite simple - stop throwing exceptions in cases we don't know how to serialize the parameters, and return a bool that can be parsed from the call site and handle it gracefully. \r\n\r\n**Customer Impact**\r\n\r\nAs mentioned above, customers using eventpipe with parameter types we don't know how to serialize will get a perf hit due to many exceptions being thrown.\r\n\r\n**Regression**\r\n\r\nThis change only happened in 2.2, so it is a regression from 2.1.\r\n\r\n**Risk**\r\nMinimal\r\n\r\n**Issue**\r\nhttps://github.com/dotnet/coreclr/issues/21743. PR #21993 fixed it for 3.0. \r\n\r\n**Code Reviewers**\r\nBrian Robbins, Jose Rivero, Noah Falk ","Url":"https://github.com/dotnet/coreclr/pull/22218","RelatedDescription":"Open PR \"Backporting #21993 to 2.2 branch - EventParameterInfo.GetMetadataLength() throws NotSupportedException \" (#22218)"},{"Id":"403325108","IsPullRequest":true,"CreatedAt":"2019-01-25T20:41:43","Actor":"trylek","Number":"22216","RawContent":null,"Title":"Support for dumping GC info in R2RDump","State":"open","Body":"Thanks to tons of help from Jan Vorlicek I found out that a huge\r\nfailure bucket in the CoreCLR Pri#1 tests is caused by incorrect\r\nGC info for generic methods causing failures in catch clauses\r\nwhere the exception type is a generic referring to a generic\r\nparameter of the method.\r\n\r\nWhile I have not yet figured out how to fix this, I'm at least\r\nadding provisions for dumping the GC info alongside methods to make\r\nthe differences between CPAOT and Crossgen easier to analyze.\r\n\r\nFor now I have only implemented the AMD64 variant of the GC info.\r\nThankfully it turns out that the same GC info is used by both ARM32\r\nand ARM64 so that the only remaining debt is supplying a variant\r\nof the new code for X86.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. This change also fixes a small typo I spotted independently -\r\na superfluous line break in the fixup cell dump.","Url":"https://github.com/dotnet/coreclr/pull/22216","RelatedDescription":"Open PR \"Support for dumping GC info in R2RDump\" (#22216)"},{"Id":"403286256","IsPullRequest":true,"CreatedAt":"2019-01-25T20:21:10","Actor":"sandreenko","Number":"22214","RawContent":null,"Title":"this test should not be run under gcstress","State":"closed","Body":"See disscusion in #22170.\r\n\r\nFixes jobs like https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable_heapverify1/lastFailedBuild/testReport/junit/GC_API/_GC_Collect1_Collect1_/_GC_Collect1_Collect1_cmd/\r\n\r\nFixes #22170 ","Url":"https://github.com/dotnet/coreclr/pull/22214","RelatedDescription":"Closed or merged PR \"this test should not be run under gcstress\" (#22214)"},{"Id":"403299849","IsPullRequest":false,"CreatedAt":"2019-01-25T19:24:03","Actor":"sandreenko","Number":"22215","RawContent":null,"Title":"[corefx][jitminopts] System.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal regression","State":"open","Body":"[ci example1](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_minopts/lastCompletedBuild/testReport/), [ci example2](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_jitstressregs8/lastCompletedBuild/).\r\n\r\nThere were no recent test changes so it is probably an issue on our side.","Url":"https://github.com/dotnet/coreclr/issues/22215","RelatedDescription":"Open issue \"[corefx][jitminopts] System.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal regression\" (#22215)"},{"Id":"403164503","IsPullRequest":true,"CreatedAt":"2019-01-25T19:03:34","Actor":"benaadams","Number":"22206","RawContent":null,"Title":"Skip rangecheck in string.EndsWith(char)","State":"closed","Body":"```diff\r\n G_M23653_IG01:\r\n-      sub      rsp, 40\r\n       nop      \r\n G_M23653_IG02:\r\n       mov      eax, dword ptr [rcx+8]\r\n-      mov      r8d, eax\r\n-      test     r8d, r8d\r\n-      je       SHORT G_M23653_IG04\r\n+      mov      eax, dword ptr [rcx+8]\r\n+      lea      r8d, [rax-1]\r\n+      cmp      eax, r8d\r\n+      jbe      SHORT G_M23653_IG04\r\n-      dec      r8d\r\n-      cmp      r8d, eax\r\n-      jae      SHORT G_M23653_IG06\r\n       movsxd   rax, r8d\r\n       movzx    rax, word  ptr [rcx+2*rax+12]\r\n       movzx    rdx, dx\r\n       cmp      eax, edx\r\n-      sete     al\r\n-      movzx    rax, al\r\n+      jne      SHORT G_M23653_IG04\r\n+      mov      eax, 1\r\n G_M23653_IG03:\r\n-      add      rsp, 40\r\n       ret      \r\n G_M23653_IG04:\r\n       xor      eax, eax\r\n G_M23653_IG05:\r\n-      add      rsp, 40\r\n       ret      \r\n-G_M23653_IG06:\r\n-      call     CORINFO_HELP_RNGCHKFAIL\r\n-      int3     \r\n-; Total bytes of code 61, prolog size 5 for method String:EndsWith(ushort):bool:this\r\n+; Total bytes of code 41, prolog size 5 for method String:EndsWith(ushort):bool:this\r\n```\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/22206","RelatedDescription":"Closed or merged PR \"Skip rangecheck in string.EndsWith(char)\" (#22206)"},{"Id":"403263315","IsPullRequest":false,"CreatedAt":"2019-01-25T17:49:11","Actor":"jkotas","Number":"22213","RawContent":null,"Title":"Type.GetType($”{typeName}, {assemblyName}”) should load assemblies in the caller context","State":"open","Body":"`Type.GetType` is one the several APIs that take the caller assembly as implicit hidden argument.\r\n\r\nAnother example of such API is `Assembly.Load`. `Assembly.Load` loads assemblies in the caller context, using this hidden caller argument.\r\n\r\n`Type.GetType` loads assemblies in the default context today. We should change it to load assemblies in the caller context to be consistent with `Assembly.Load`.","Url":"https://github.com/dotnet/coreclr/issues/22213","RelatedDescription":"Open issue \"Type.GetType($”{typeName}, {assemblyName}”) should load assemblies in the caller context\" (#22213)"},{"Id":"403249092","IsPullRequest":false,"CreatedAt":"2019-01-25T17:18:09","Actor":"benaadams","Number":"22212","RawContent":null,"Title":"Large numbers of Pinvoke stubs created on startup","State":"open","Body":"Using checked Jit and JitDasm (on Windows)\r\n```\r\nset COMPlus_JitDisasm=*\r\n```\r\nThis program on current .NET Core 3.0\r\n```csharp\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Hello World!\");\r\n    }\r\n}\r\n```\r\nOutputs 27 `ILStubClass:IL_STUB_PInvoke`\r\n```\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(struct,struct,bool)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(struct,long,int,struct)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(long,long,long)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(struct)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,bool,struct)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,struct)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,struct)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,byref,byref,byref,byref)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,byref):bool\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,long,int):int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref):int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref):int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,byref,byref)\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke():int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(byref,int,byref,long):int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(int,byref):bool\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,int,byref):bool\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(long,int,ubyte):long\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(byref,int,long):bool\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(byref):bool\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(int,int):ref\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(int):long\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(long,long,int,byref,long):int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke():int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(long):int\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke():bool\r\n; Assembly listing for method ILStubClass:IL_STUB_PInvoke(ref,int,long,int):int\r\n```\r\n\r\nNot sure if this is expected, am sure it was less?\r\n\r\n/cc @jkotas \r\n\r\nIs it Tiered Jit related? /cc @kouvel ","Url":"https://github.com/dotnet/coreclr/issues/22212","RelatedDescription":"Open issue \"Large numbers of Pinvoke stubs created on startup\" (#22212)"},{"Id":"403231273","IsPullRequest":false,"CreatedAt":"2019-01-25T17:07:00","Actor":"pepone","Number":"22209","RawContent":null,"Title":"Dump process stack under macOS and Linux","State":"closed","Body":"Hi,\r\n\r\nI looking for a way to get a backtrace of all threads from a running .NET Core process , similar to gdb `thread apply all bt` or lldb `bt all` commands\r\n\r\nIs there support to get that info from macOS or Linux?","Url":"https://github.com/dotnet/coreclr/issues/22209","RelatedDescription":"Closed issue \"Dump process stack under macOS and Linux\" (#22209)"},{"Id":"403238629","IsPullRequest":false,"CreatedAt":"2019-01-25T16:50:23","Actor":"ZackTech","Number":"22210","RawContent":null,"Title":"Global Date Format","State":"open","Body":"I am developing an Asp.net Core version 2 Web Api and Web Front End. In one of my entry forms I am using a Boostrap date picker. When I run the application on my own PC even connected to the Azure database everything runs normally. On Azure when the model validates server side I get Invalid Date Format. I think server side it has decided to use the US date format.\r\n\r\nIs there a global setting I can set just once which I can set it to use UK format irrespective of what hardware the software is sitting on. If that does not exist can we please have one?","Url":"https://github.com/dotnet/coreclr/issues/22210","RelatedDescription":"Open issue \"Global Date Format\" (#22210)"},{"Id":"403189939","IsPullRequest":false,"CreatedAt":"2019-01-25T14:54:52","Actor":"austvik","Number":"22208","RawContent":null,"Title":"Better error message when not loading native shared library","State":"open","Body":"Assembly loading problems are frustrating to debug, especially in some cloud world where you don't necessarily have control over regestry settings or env variables in the running environment.\r\n\r\nAny error message containing \"or\" should be banned, but lets start with this one.\r\n\r\nThe expected error message should be \"Failed to load DLL %1, couldn't find it. Searched for it in the following locations: %2\" or \"Failed to load DLL %1. Couldn't find its dependency %2 which comes from %3 dependency chain. Searched for %2 in the following locations: %4\"\r\n\r\nI understand that assembly loading needs to be fast, but this extra \"give the user some information that can be used\" doesn't have to kick into action before after the assembly have failed to load. And by that time I guess most programs doesn't have much meaningfull activity to spend their CPU on anyway.\r\n\r\n\r\nBonus: See how the Win version is much doesn't tell you how to get diagnostics (fusion logs should probably be recommended?)\r\n\r\n    IDS_EE_NDIRECT_LOADLIB_WIN              \"Unable to load DLL '%1' or one of its dependencies: %2\"\r\n    IDS_EE_NDIRECT_LOADLIB_LINUX            \"Unable to load shared library '%1' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: %2\"\r\n    IDS_EE_NDIRECT_LOADLIB_MAC              \"Unable to load shared library '%1' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: %2\"\r\n","Url":"https://github.com/dotnet/coreclr/issues/22208","RelatedDescription":"Open issue \"Better error message when not loading native shared library\" (#22208)"},{"Id":"403170101","IsPullRequest":true,"CreatedAt":"2019-01-25T14:04:15","Actor":"benaadams","Number":"22207","RawContent":null,"Title":"string.EndsWith use SequenceEqual not SequenceCompareTo","State":"open","Body":"for Ordinal. \r\n\r\n`CompareOrdinalHelper` goes via `SequenceCompareTo` and is then tested if zero\r\n\r\nIs more efficient to just find if they are the same; as CompareTo needs to find where they differ and then if >/==/< at that character.\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/22207","RelatedDescription":"Open PR \"string.EndsWith use SequenceEqual not SequenceCompareTo\" (#22207)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"403494079","IsPullRequest":false,"CreatedAt":"2019-01-26T23:13:03","Actor":"heaths","Number":"10660","RawContent":null,"Title":"Windows lies to dotnet.exe abouts the OS version","State":"open","Body":"## Steps to reproduce\r\nOn Windows 10:\r\n1. `mkdir test`\r\n2. `cd test`\r\n3. `dotnet new console`\r\n4. Change Program.cs to call `Console.WriteLine(Environment.OSVersion.Version)`\r\n5. `dotnet run`\r\n\r\n## Expected  behavior\r\nSee \"10.0.17663\" (for example, on RS5)\r\n\r\n## Actual behavior\r\nSee \"6.2.9200.0\"\r\n\r\nThis is because dotnet.exe's RT_MANIFEST resource is auto-generated with only the `asInvoker` privilege level, but is lacking the `supportedOS`. Instead, you should consider authoring a manifest like the following and adding it to your dotnet.csproj as the `ApplicationManifest`:\r\n\r\n```xml\r\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>\r\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n        <security>\r\n            <requestedPrivileges>\r\n                <requestedExecutionLevel level='asInvoker' uiAccess='false' />\r\n            </requestedPrivileges>\r\n        </security>\r\n    </trustInfo>\r\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\r\n        <application>\r\n            <supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\" />\r\n            <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\" />\r\n            <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\" />\r\n            <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\" />\r\n            <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\" />\r\n        </application>\r\n    </compatibility>\r\n</assembly>\r\n```\r\n\r\nThis is problematic when running `dotnet run` with a console app that needs the correct Windows OS version, such as a benchmark application using BenchmarkDotNet.\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003156 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc4-004771 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0-preview2-006127 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview2-25319-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n","Url":"https://github.com/dotnet/cli/issues/10660","RelatedDescription":"Open issue \"Windows lies to dotnet.exe abouts the OS version\" (#10660)"},{"Id":"403469695","IsPullRequest":false,"CreatedAt":"2019-01-26T18:42:33","Actor":"ziffusion","Number":"10659","RawContent":null,"Title":"dotnet build output directory on Linux is different for root vs non-root","State":"open","Body":"(dotnet sdk 2.2)\r\n\r\nFor root user:\r\n\r\n> ./bin/Debug/netcoreapp2.1/IEDSim.dll\r\n\r\nFor non-root user:\r\n\r\n> ./bin/**LINUX**/Debug/netcoreapp2.1/IEDSim.dll\r\n\r\nWhy is this, and is there a way to make this conistant?\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10659","RelatedDescription":"Open issue \"dotnet build output directory on Linux is different for root vs non-root\" (#10659)"},{"Id":"403415648","IsPullRequest":false,"CreatedAt":"2019-01-26T07:16:33","Actor":"John0King","Number":"10658","RawContent":null,"Title":"What's the equivalent of `dotnet publish -r win-x64`  in MSBuild","State":"open","Body":"the msbuild version won't restore during publish and cause a error when I separate the `dotnet restore` and `dotnet publish`\r\nthis is what I try \r\n\r\n```\r\n1. dotnet restore -r win-x64\r\n2. msbuild /p:RuntimeIdentifier=win-x64 /p:configuration=release\r\nthen  there is a error\r\nThe project was restored using Microsoft.NETCore.App version 2.2.0, but with current settings, version 2.2.1 would be used instead\r\n```\r\n\r\nhow do I solve this problem ?\r\n","Url":"https://github.com/dotnet/cli/issues/10658","RelatedDescription":"Open issue \"What's the equivalent of `dotnet publish -r win-x64`  in MSBuild\" (#10658)"},{"Id":"403377660","IsPullRequest":true,"CreatedAt":"2019-01-26T00:01:10","Actor":"dotnet-bot","Number":"10657","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10657","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10657)"},{"Id":"403328798","IsPullRequest":true,"CreatedAt":"2019-01-25T23:58:42","Actor":"livarcocc","Number":"10656","RawContent":null,"Title":"Adding CliCommandLineParser and cli-migrate to the list of Dependency uptake repos for the CLI.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10656","RelatedDescription":"Closed or merged PR \"Adding CliCommandLineParser and cli-migrate to the list of Dependency uptake repos for the CLI.\" (#10656)"},{"Id":"401095953","IsPullRequest":true,"CreatedAt":"2019-01-25T22:23:20","Actor":"dotnet-maestro[bot]","Number":"10640","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19073.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19073.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19074.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19075.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19075.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10640","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10640)"},{"Id":"403227817","IsPullRequest":false,"CreatedAt":"2019-01-25T20:56:15","Actor":"pepone","Number":"10655","RawContent":null,"Title":"Restore using msbuild produce different result than dotnet restore","State":"closed","Body":"I seeing some differences between `dotnet restore` and `dotnet msbuild /t:Restore`\r\nThe former generates\r\n\r\n```\r\n<Import Project=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\" \r\nCondition=\"Exists('C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />`\r\n```\r\n\r\nThe later generates\r\n\r\n```\r\n<Import Project=\"$(NuGetPackageRoot)netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\"\r\nCondition=\"Exists('$(NuGetPackageRoot)netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />\r\n```\r\nUsing the later fails at build time because netstandard.library package is not in $(NuGetPackageRoot)\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10655","RelatedDescription":"Closed issue \"Restore using msbuild produce different result than dotnet restore\" (#10655)"},{"Id":"403049251","IsPullRequest":true,"CreatedAt":"2019-01-25T20:54:38","Actor":"mayankbansal018","Number":"10654","RawContent":null,"Title":"TestPlatform insertion 16.0-preview-20190124-02","State":"closed","Body":"Testplatform insertion Rel Notes: https://github.com/Microsoft/vstest-docs/blob/master/docs/releases.md#1600-preview-20190124-02","Url":"https://github.com/dotnet/cli/pull/10654","RelatedDescription":"Closed or merged PR \"TestPlatform insertion 16.0-preview-20190124-02\" (#10654)"},{"Id":"402847937","IsPullRequest":true,"CreatedAt":"2019-01-24T21:21:10","Actor":"livarcocc","Number":"10653","RawContent":null,"Title":"Disable telemetry for a test explicitly to make sure cache files are not generated","State":"closed","Body":"Disable telemetry for a test explicitly to make sure cache files are not generated when we are validating the cache folder is not created.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10653","RelatedDescription":"Closed or merged PR \"Disable telemetry for a test explicitly to make sure cache files are not generated\" (#10653)"},{"Id":"402697708","IsPullRequest":true,"CreatedAt":"2019-01-24T17:57:19","Actor":"dotnet-maestro[bot]","Number":"10652","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10652","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10652)"},{"Id":"402464408","IsPullRequest":true,"CreatedAt":"2019-01-23T22:47:46","Actor":"wli3","Number":"10651","RawContent":null,"Title":"Add --interactive to dotnet add reference","State":"open","Body":"need https://github.com/dotnet/cli/pull/10650 in first\r\n\r\npart of #10529 ","Url":"https://github.com/dotnet/cli/pull/10651","RelatedDescription":"Open PR \"Add --interactive to dotnet add reference\" (#10651)"},{"Id":"402405638","IsPullRequest":true,"CreatedAt":"2019-01-23T19:57:56","Actor":"wli3","Number":"10650","RawContent":null,"Title":"Add --interactive to dotnet run and test","State":"open","Body":"These 2 verb have verbosity set to quiet. And we need to change it to minimal during --interface\r\nto show the nuget plugin guide\r\n\r\npart of #10529 ","Url":"https://github.com/dotnet/cli/pull/10650","RelatedDescription":"Open PR \"Add --interactive to dotnet run and test\" (#10650)"},{"Id":"402318345","IsPullRequest":false,"CreatedAt":"2019-01-23T16:48:11","Actor":"spozniak","Number":"10649","RawContent":null,"Title":"MacOS runtime pkg installer does not include AspNetCore runtime","State":"closed","Body":"## Steps to reproduce\r\nDownload and install \r\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-installer\r\nor\r\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-installer\r\n\r\n## Expected  behavior\r\nShould contain two AspNetCore runtimes\r\n`Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]`\r\n`Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]`\r\n\r\n## Actual behavior\r\nNo AspNetCore shared runtimes installed. Because of that DotNetCore application fails with an error:\r\n\r\n> It was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.AspNetCore.All', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n      https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n\r\nAs workaround it is possible to get them from binaries https://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-asp.net-core-runtime-binaries\r\nThis issue is similar to: https://github.com/dotnet/cli/issues/8529 but is related to runtime installer.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10649","RelatedDescription":"Closed issue \"MacOS runtime pkg installer does not include AspNetCore runtime\" (#10649)"},{"Id":"402080389","IsPullRequest":true,"CreatedAt":"2019-01-23T06:08:02","Actor":"dotnet-maestro[bot]","Number":"10648","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10648","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10648)"},{"Id":"402021447","IsPullRequest":false,"CreatedAt":"2019-01-23T00:56:16","Actor":"vijayrkn","Number":"10647","RawContent":null,"Title":"Different build behaviour for .net core web apps between local VS IDE and msbuild","State":"open","Body":"_From @fromorbonia on January 10, 2019 9:26_\n\n## Steps to reproduce\r\nPublishing a .NET Core web application with a FileSystem profile under VS2017 IDE creates a directory with an EXE (e.g. MyProject.exe)\r\nThere is a Jenkins build server running msbuild, which correctly picks up the publish profile that was used and configured locally.\r\nPlace the resulting files on a server (with IIS) and a previosuly configured Web Site, and the site should start correctly.\r\n\r\n## Expected  behavior\r\nI would expect the build server to create exactly the same set of files, as produced by the local VS2017 publish process. \r\nSpecifically, in this case, it should include MyProject.exe with a matching web.config file - so that once the files being copied to the IIS server the web site starts correctly.\r\n\r\n## Actual behavior\r\nThe publish folder contains an apphost.exe and MyProject.dll, but not an EXE. The web.config points to the EXE that does not exist:\r\n`<aspNetCore processPath=\".\\MyProject.exe\"...`\r\nThe web site doesn't not run on IIS.\r\n\r\n\r\n## Environment data\r\nAfter some rounds of changes, I've ended up with the following key values (when looking at similar other posts people have asked about so have mentioned here) in the pubxml file:\r\n```\r\n    <UseAppHost>true</UseAppHost>\r\n    <SelfContained>false</SelfContained>\r\n    <_IsPortable>true</_IsPortable>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n```\r\nI've only set UseAppHost to true, because it on the local VS IDE it creates the correct combination of web.config and files so that the web site starts correctly on deployment. I don't have a requirement to use or not use an apphost.exe file.\r\n\r\n\r\nFor the **local VS2017 IDE** this is:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nFor the **Jenkins build** server:\r\n12:53:26 .NET Core SDK (reflecting any global.json):\r\n12:53:26  Version:   2.1.502\r\n12:53:26  Commit:    c74ce8f29f\r\n12:53:26 \r\n12:53:26 Runtime Environment:\r\n12:53:26  OS Name:     Windows\r\n12:53:26  OS Version:  10.0.14393\r\n12:53:26  OS Platform: Windows\r\n12:53:26  RID:         win10-x64\r\n12:53:26  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n12:53:26 \r\n12:53:26 Host (useful for support):\r\n12:53:26   Version: 2.1.6\r\n12:53:26   Commit:  3f4f8eebd8\r\n12:53:26 \r\n12:53:26 .NET Core SDKs installed:\r\n12:53:26   2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26 \r\n12:53:26 .NET Core runtimes installed:\r\n12:53:26   Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\n\n_Copied from original issue: aspnet/websdk#470_","Url":"https://github.com/dotnet/cli/issues/10647","RelatedDescription":"Open issue \"Different build behaviour for .net core web apps between local VS IDE and msbuild\" (#10647)"},{"Id":"401994081","IsPullRequest":true,"CreatedAt":"2019-01-22T23:06:04","Actor":"mklement0","Number":"10646","RawContent":null,"Title":"WIP: Makes dotnet-install.ps1 x-platform","State":"open","Body":"Adds cross-edition and cross-platform support to the script, addresses #8278.","Url":"https://github.com/dotnet/cli/pull/10646","RelatedDescription":"Open PR \"WIP: Makes dotnet-install.ps1 x-platform\" (#10646)"},{"Id":"401981445","IsPullRequest":false,"CreatedAt":"2019-01-22T22:24:52","Actor":"danmosemsft","Number":"10645","RawContent":null,"Title":"Update dotnet-install.sh (and https://dot.net/v1/dotnet-install.sh) to allow other distros","State":"open","Body":"_From @danmosemsft on January 21, 2019 6:3_\n\nRepos using Arcade bootstrap with `eng/common/tools.sh` which bootstraps dotnet using a script from `https://dot.net/v1/dotnet-install.sh`. The script will fail on ubuntu 18.10.\r\n\r\ncorefxlab has its own (out of date) copy of this file, which I already updated here\r\nhttps://github.com/dotnet/corefxlab/pull/2636\r\n\r\nA similar change needs to go into `https://dot.net/v1/dotnet-install.sh` but I do not know where that file comes from. It is referenced here:\r\n\r\n```\r\neng/common/tools.sh:  local install_script_url=\"https://dot.net/v1/dotnet-install.sh\"\r\n```\r\nbuildtools has its own\r\n```\r\nbuildtools/bootstrap/bootstrap.sh:    download \"https://raw.githubusercontent.com/dotnet/cli/$dotNetInstallBranch/scripts/obtain/dotnet-install.sh\" \"$dotnetInstallPath\"\r\n```\r\n\n\n_Copied from original issue: dotnet/arcade#1848_","Url":"https://github.com/dotnet/cli/issues/10645","RelatedDescription":"Open issue \"Update dotnet-install.sh (and https://dot.net/v1/dotnet-install.sh) to allow other distros\" (#10645)"},{"Id":"401910031","IsPullRequest":false,"CreatedAt":"2019-01-22T19:07:49","Actor":"firelizzard18","Number":"10644","RawContent":null,"Title":".NET Core 3.0 SDK preview breaks dependencies","State":"open","Body":"I have a project that has `System.Runtime.InteropServices` in its dependency graph. I can't share the \r\nproject itself. Below is part of the `csproj`.\r\n\r\nIf I build this project (on Windows) with .NET Core 2.2 SDK, everything works. If I build it with .NET Core 3.0 SDK (preview), the build artifacts are missing `System.Runtime.InteropServices.dll`, which breaks my application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net462' \">\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Elm\" Version=\"0.2.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.HttpSys\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Portable.BouncyCastle\" Version=\"1.8.4\" />\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.6.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- lots of <ProjectReference>s -->\r\n  </ItemGroup>\r\n\r\n<Project>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10644","RelatedDescription":"Open issue \".NET Core 3.0 SDK preview breaks dependencies\" (#10644)"},{"Id":"401902646","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:51","Actor":"CreativeHouseDotOrg","Number":"10642","RawContent":null,"Title":"dotnet command line argument to terminate remaining build processes that are finished but dont exit","State":"closed","Body":"### Is your feature request related to a problem? Please describe.\r\nI'm am trying to `build` and `publish`... but unfortunately there are hanging processes in Task Manager .NET Core Host that lead to a publish error if i try to `dotnet publish`\r\n\r\n### Describe the solution you'd like\r\nI want the Remaining Tasks to close after the build OR publish process has ended.\r\n\r\n### Describe alternatives you've considered\r\nSince now i've been terminating them by hand, it would be good to have a `dotnet <command>` to terminate all open .Net Core Hosts that remain.\r\n\r\n### Additional context\r\n\r\nHere is a Screenshot of the remaining Tasks:\r\n\r\n![1](https://user-images.githubusercontent.com/4038603/51504064-f1e87780-1dde-11e9-8ebd-1424a7654113.PNG)\r\n\r\n![unbenannt](https://user-images.githubusercontent.com/4038603/51504000-9f0ec000-1dde-11e9-8419-0216e6945290.PNG)\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10642","RelatedDescription":"Closed issue \"dotnet command line argument to terminate remaining build processes that are finished but dont exit\" (#10642)"},{"Id":"401907244","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:13","Actor":"firelizzard18","Number":"10643","RawContent":null,"Title":"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`","State":"open","Body":"## Steps to reproduce\r\n\r\n1. On Windows, install .NET Core 2.0 SDK and .NET Framework 4.7 SDK\r\n2. `dotnet new console -o test`\r\n3. `cd test`\r\n4. In `test.csproj`, replace `<TargetFramework>...` with `<TargetFrameworks>net47;netcoreapp3.0</TargetFrameworks>`\r\n5. `dotnet build -f net47`\r\n\r\n## Expected  behavior\r\n\r\nThe CLI builds and runs the project using the specified target framework. The fact that there are other valid target frameworks is ignored.\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\Source\\temp\\build-test\\build-test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.104)\r\n\r\nProduct Information:\r\n Version:            2.1.104\r\n Commit SHA-1 hash:  48ec687460\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.104\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10643","RelatedDescription":"Open issue \"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`\" (#10643)"},{"Id":"401755135","IsPullRequest":true,"CreatedAt":"2019-01-22T13:34:42","Actor":"dotnet-maestro[bot]","Number":"10641","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10641","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10641)"},{"Id":"401047357","IsPullRequest":true,"CreatedAt":"2019-01-20T23:37:18","Actor":"dotnet-bot","Number":"10638","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10638","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#10638)"},{"Id":"401095922","IsPullRequest":true,"CreatedAt":"2019-01-20T13:35:00","Actor":"dotnet-maestro[bot]","Number":"10639","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10639","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10639)"},{"Id":"400703698","IsPullRequest":true,"CreatedAt":"2019-01-19T23:40:40","Actor":"v-zbsail","Number":"10632","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190118","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10632","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190118\" (#10632)"},{"Id":"400933582","IsPullRequest":true,"CreatedAt":"2019-01-19T22:45:35","Actor":"nguerrera","Number":"10636","RawContent":null,"Title":"Stop capturing test output because it is somehow causing failures in CI","State":"closed","Body":"There may be a corefx or msbuild bug here, but I need to get CI unblocked. :(\r\n","Url":"https://github.com/dotnet/cli/pull/10636","RelatedDescription":"Closed or merged PR \"Stop capturing test output because it is somehow causing failures in CI\" (#10636)"},{"Id":"400934274","IsPullRequest":false,"CreatedAt":"2019-01-19T00:07:44","Actor":"nguerrera","Number":"10637","RawContent":null,"Title":"Investigate why CI fails often with TestCaptureOutput on","State":"open","Body":"We started getting failures like this all of the sudden very often in CI (no repro locally):\r\n\r\n```\r\nF:\\vsagent\\10\\s\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19065.6\\tools\\XUnit\\XUnit.targets(93,5): error MSB3491: Could not write lines to file \"F:\\vsagent\\10\\s\\artifacts\\log\\Release\\Microsoft.DotNet.Configurer.UnitTests_netcoreapp3.0_x64.log\". The process cannot access the file 'F:\\vsagent\\10\\s\\artifacts\\log\\Release\\Microsoft.DotNet.Configurer.UnitTests_netcoreapp3.0_x64.log' because it is being used by another process. [F:\\vsagent\\10\\s\\test\\Microsoft.DotNet.Configurer.UnitTests\\Microsoft.DotNet.Configurer.UnitTests.csproj]\r\n```\r\n\r\nThis is in a step in arcade where it appends to the log file that would have been written by a prior Exec with `> ` redirected output to it. Somehow the file is still in use. Maybe exec returned before the handle was released? But how?\r\n","Url":"https://github.com/dotnet/cli/issues/10637","RelatedDescription":"Open issue \"Investigate why CI fails often with TestCaptureOutput on\" (#10637)"},{"Id":"400910098","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:22","Actor":"nugetlurker","Number":"10635","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10635","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into cli\" (#10635)"},{"Id":"400910087","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:19","Actor":"nugetlurker","Number":"10634","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10634","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into cli\" (#10634)"},{"Id":"400761340","IsPullRequest":false,"CreatedAt":"2019-01-18T15:41:34","Actor":"djbreen7","Number":"10633","RawContent":null,"Title":"dotnet new angular boilerplate doesn't connect API with client","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. `dotnet new angular --name=MyApp`\r\n2. `cd MyApp`\r\n3. `dotnet build`\r\n4. `dotnet run`\r\n5. Open the url that the terminal displays in the browser, e.g., http://localhost:53000\r\n6. Click the Fetch Data button in the top nav\r\n\r\n## Expected  behavior\r\n- Data should be displayed  \r\n- The network tab should show a 200 OK for the endpoint /api/SampleData/WeatherForecasts\r\n\r\n## Actual behavior\r\n- Loading... is displayed indefinitely\r\n- The network tab returns a 404 NOT FOUND for the endpoint /api/SampleData/WeatherForecasts\r\n\r\n![image](https://user-images.githubusercontent.com/13296622/51394398-80b37680-1af7-11e9-9f40-61f00455b299.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10633","RelatedDescription":"Closed issue \"dotnet new angular boilerplate doesn't connect API with client\" (#10633)"},{"Id":"400631831","IsPullRequest":false,"CreatedAt":"2019-01-18T09:04:18","Actor":"pavelovcharov","Number":"10631","RawContent":null,"Title":"dotnet build ignores -f option in some cases","State":"open","Body":"Please see the attached project\r\n[build-framework-test.zip](https://github.com/dotnet/cli/files/2772232/build-framework-test.zip)\r\n\r\n\r\n## Steps to reproduce\r\n1) Create a new class library\r\n2) Create another class library, make it dependent on the first one\r\n3) Replace TargetFramework with TargetFrameworks (e.g. `<TargetFrameworks>netcoreapp3.0;net452</TargetFrameworks>`)\r\n4) Try to build solution against only one framework:\r\n`dotnet build -f netcoreapp3.0  .\\build-framework-test.sln`\r\n\r\n## Expected  behavior\r\nFirst library is built against specified framework\r\n\r\n## Actual behavior\r\nFirst library is built against all frameworks\r\n`  ClassLibrary1 -> C:\\work\\projects\\tests\\build-framework-test\\ClassLibrary1\\bin\\Debug\\netcoreapp3.0\\ClassLibrary1.dll`\r\n  `ClassLibrary1 -> C:\\work\\projects\\tests\\build-framework-test\\ClassLibrary1\\bin\\Debug\\net452\\ClassLibrary1.dll`\r\n  `ClassLibrary2 -> C:\\work\\projects\\tests\\build-framework-test\\build-framework-test\\bin\\Debug\\netcoreapp3.0\\ClassLibrary2.dll`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010124\r\n Commit:    41a73b60f2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010124\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview1-26919-02\r\n  Commit:  9ea8c26816\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009616 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.DesktopUI.App 3.0.0-alpha-26829-8 [C:\\Program Files\\dotnet\\shared\\Microsoft.DesktopUI.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview1-26919-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10631","RelatedDescription":"Open issue \"dotnet build ignores -f option in some cases\" (#10631)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"closed","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Closed issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"403501945","IsPullRequest":true,"CreatedAt":"2019-01-27T02:59:50","Actor":"Dotnet-GitSync-Bot","Number":"34884","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34884","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34884)"},{"Id":"403498955","IsPullRequest":true,"CreatedAt":"2019-01-27T00:23:17","Actor":"davidsh","Number":"34883","RawContent":null,"Title":"Fix GSSAPI error handling","State":"open","Body":"This PR addresses 3 issues in GSSAPI error handling:\r\n\r\n* Fixes an uninitialized variable when calling gss_display_status().\r\nThis was causing the major statuscode error message to always return\r\n'An invalid status code was supplied'.\r\n\r\n* If the minor statuscode is 0 (GSS_S_COMPLETE), we shouldn't be calling\r\nfor the minor statuscode error message text. That is why we were always getting\r\n'Unknown error' for that text.\r\n\r\n* Added more text (help text) to certain errors returned from GSSAPI\r\nsuch as when the NTLM plugin is not installed.\r\n\r\nNo new tests were added to this PR since it requires machine changes\r\nto test. However, I manually tested various combinations of errors\r\nincluding when 'gss_ntlmssp' is installed or not.\r\n\r\nIn terms of #34877, the exception message goes from:\r\n\r\n>GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).\r\n\r\nto\r\n\r\n>GSSAPI operation failed with error - An unsupported mechanism was requested. NTLM authentication requires the GSSAPI plugin 'gss-ntlmssp'.\r\n\r\nFixes #34877 ","Url":"https://github.com/dotnet/corefx/pull/34883","RelatedDescription":"Open PR \"Fix GSSAPI error handling\" (#34883)"},{"Id":"403495834","IsPullRequest":false,"CreatedAt":"2019-01-26T23:36:17","Actor":"tannergooding","Number":"34882","RawContent":null,"Title":"Fixing naming of `Sse41.Test*` and `Avx.Test*` methods","State":"open","Body":"_From @tannergooding on November 17, 2018 17:54_\n\nDuring the last HWIntrinsics review meeting, we discussed the naming of methods that return a bool based on the CPU flags set by the instruction.\r\n\r\nIt was determined that, for methods which do this and where the flag they set has the \"normal\" semantics for that flag, we should use a name that represents that accurately (so this applies to methods like `Sse41.TestC`, but not to most of the Sse42 string manipulation functions).\r\n\r\nWe should update the `TestC`, `TestZ`, and `TestNotZAndNotC` methods accordingly (where `C` represents `Carry` and `Z` represents `Zero`).\r\n\r\nThese instructions behave as:\r\n```\r\ntmp[127:0] := a[127:0] AND b[127:0]\r\nIF (tmp[63] == tmp[127] == 0)\r\n\tZF := 1\r\nELSE\r\n\tZF := 0\r\nFI\r\ntmp[127:0] := (NOT a[127:0]) AND b[127:0]\r\nIF (tmp[63] == tmp[127] == 0)\r\n\tCF := 1\r\nELSE\r\n\tCF := 0\r\nFI\r\n```\r\n\r\nWhere:\r\n* `TestC` returns `CF == 1`\r\n* `TestZ` returns `ZF == 1`\r\n* `TestNotZAndNotC` returns `(ZF == 0) && (CF == 0)`\n\n_Copied from original issue: dotnet/coreclr#21070_","Url":"https://github.com/dotnet/corefx/issues/34882","RelatedDescription":"Open issue \"Fixing naming of `Sse41.Test*` and `Avx.Test*` methods\" (#34882)"},{"Id":"403495215","IsPullRequest":false,"CreatedAt":"2019-01-26T23:28:21","Actor":"tannergooding","Number":"34881","RawContent":null,"Title":"Take another look at the `COMISS` and `UCOMISS` hardware intrinisics","State":"open","Body":"It was raised in https://github.com/dotnet/coreclr/pull/22043#discussion_r251106117 that the names for the `COMISS` and `UCOMISS` hardware intrinsics might be confusing as the names (such as `CompareEqualOrderedScalar` and `CompareEqualUnorderedScalar`) might give the impression that the condition is ordered/unordered, when in fact it is the compare instruction that is ordered/unordered.\r\n\r\nWe should take another look at these names and determine if we can help alleviate the concern. Some initial suggestions are:\r\n* `UnorderedCompareEqualScalar` and `OrderedCompareEqualScalar` or\r\n* `CompareUnorderedEqualScalar` and `CompareOrderedEqualScalar`\r\n\r\nIt might also make sense to not expose the `ordered` versions of these intrinsics initially given that, since .NET does not support the IEEE floating-point exceptions, they are functionally equivalent to the `unordered` intrinsics. We should determine if we still want both versions of the intrinsics exposed.\r\n* This will not make a difference on the naming decision above given that `CMPSS` (which returns ` Vector128<float>`) currently holds the `CompareEqualScalar` name\r\n","Url":"https://github.com/dotnet/corefx/issues/34881","RelatedDescription":"Open issue \"Take another look at the `COMISS` and `UCOMISS` hardware intrinisics\" (#34881)"},{"Id":"403491747","IsPullRequest":true,"CreatedAt":"2019-01-26T22:42:19","Actor":"Wraith2","Number":"34880","RawContent":null,"Title":"SqlClient enhancement enable GetFieldValue<XmlReader>","State":"open","Body":"Closes https://github.com/dotnet/corefx/issues/30958\r\n\r\nTo get data from an SqlDataReader instance you can use a number of approaches. One approach is to use Get[Type] overloads like `GetInt32(int)` and `GetXmlReader(int)`, another is to use the new `GetFieldValue<T>` generic version. Unfortunately while most types work with the generic function `XmlReader` does not and will throw an error. This PR changes that behaviour and adds special casing for `GetFieldValue<XmlReader>` so that the more modern api style can be used with xml without special casing in the calling method.\r\n\r\n`GetXmlReader(int)` handles null values by returning an empty stream, it is not considered an error. `GetFieldValue` will usually throw on a null value. I have chosen to replicate the `GetXmlReader` behaviour and return an empty stream on `DBNull`. I can see an argument that it should throw on `DBNull` instead, please consider this.\r\n\r\nAs usual the standard and manual tests have been run in native mode and passed successfully (apart from those noted in https://github.com/dotnet/corefx/pull/34546). The changes are high up in the stack so native vs managed will make no difference. Tests are added to the existing DataStreamTest list.\r\n\r\n/cc all the usual people @keeratsingh @AfsanehR @saurabh500 and requestor @bricelam ","Url":"https://github.com/dotnet/corefx/pull/34880","RelatedDescription":"Open PR \"SqlClient enhancement enable GetFieldValue<XmlReader>\" (#34880)"},{"Id":"403488379","IsPullRequest":false,"CreatedAt":"2019-01-26T21:59:08","Actor":"davidsh","Number":"34879","RawContent":null,"Title":"HTTPS and NTLM authentication throw PlatformNotSupportedException","State":"open","Body":"Split from #28961\r\n\r\nAs of .NET Core 2.1, the default HTTP stack is based on SocketsHttpHandler. SocketsHttpHandler uses the GSSAPI for handling the HTTP AUTH scheme of 'NTLM' when all the required GSSAPI packages are installed including 'gss-ntlmssp' (which directly supports NTLM authentication). See related issue #34877.\r\n\r\nCurrently when HttpClient tries to authenticate to a server over TLS (HTTPS) that provides a single 'Www-Authenticate: NTLM' scheme, it throw an exception similar to this:\r\n\r\n>Unhandled Exception: System.PlatformNotSupportedException: No support for channel binding on operating systems other than Windows.\r\n   at System.Net.Security.NegotiateStreamPal.InitializeSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, String spn, ContextFlagsPal requestedContextFlags, SecurityBuffer[] inSecurityBufferArray, SecurityBuffer outSecurityBuffer, ContextFlagsPal& contextFlags)\r\n\r\nThis issue will address ways of removing that exception and providing the proper client-side channel binding support.","Url":"https://github.com/dotnet/corefx/issues/34879","RelatedDescription":"Open issue \"HTTPS and NTLM authentication throw PlatformNotSupportedException\" (#34879)"},{"Id":"403487482","IsPullRequest":false,"CreatedAt":"2019-01-26T21:48:23","Actor":"davidsh","Number":"34878","RawContent":null,"Title":"Negotiate to NTLM authentication fallback not working","State":"open","Body":"Split from #28961\r\n\r\nAs of .NET Core 2.1, the default HTTP stack is based on SocketsHttpHandler. SocketsHttpHandler uses the GSSAPI for handling the HTTP AUTH scheme of 'Negotiate'.\r\n\r\nOn Windows, support for the 'Negotiate' scheme includes the use of Kerberos where possible. Otherwise, it falls back to using NTLM.  This is handled in the Windows SSPI Negotiate module.\r\n\r\nOn *Nix and OSX machines, Negotiate to NTLM fallback is not working. A related issue #34877 addresses the problem with the specific HTTP AUTH scheme 'NTLM' and errors caused by not installing the optional GSSAPI gss-ntlmssp support package.  However, even after installing that optional package, Negotiate to NTLM fallback is still not working.\r\n\r\nCurrently when HttpClient tries to authenticate to a server that provides a single 'Www-Authenticate: Negotiate' scheme, it throw an exception similar to this:\r\n\r\n>Unhandled Exception: System.ComponentModel.Win32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Cannot find KDC for realm \"domain\").\r\n   at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential)\r\n\r\n<details>\r\n<summary>\r\nRepo code\r\n</summary>\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace NtlmErrorTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            using (var listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))\r\n            {\r\n                listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n                listener.Listen(int.MaxValue);\r\n                var ep = (IPEndPoint)listener.LocalEndPoint;\r\n                var uri = new Uri($\"http://{ep.Address}:{ep.Port}/\");\r\n\r\n                Task.Run(async () =>\r\n                {\r\n                    while (true)\r\n                    {\r\n                        Socket s = await listener.AcceptAsync();\r\n                        var ignored = Task.Run(() =>\r\n                        {\r\n                            using (var ns = new NetworkStream(s))\r\n                            using (var reader = new StreamReader(ns))\r\n                            using (var writer = new StreamWriter(ns) { AutoFlush = true })\r\n                            {\r\n                                while (true)\r\n                                {\r\n                                    while (!string.IsNullOrEmpty(reader.ReadLine())) ;\r\n                                    writer.Write(\"HTTP/1.1 401 OK\\r\\nWww-Authenticate: Negotiate\\r\\nContent-Length: 5\\r\\n\\r\\nhello\");\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                var handler = new HttpClientHandler();\r\n                handler.Credentials = new NetworkCredential(\"user\", \"password\", \"domain\");\r\n                using (var client = new HttpClient(handler))\r\n                {\r\n                    Console.WriteLine(uri.AbsoluteUri.ToString());\r\n                    using (HttpResponseMessage response = client.GetAsync(uri).GetAwaiter().GetResult())\r\n                    {\r\n                        Console.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>","Url":"https://github.com/dotnet/corefx/issues/34878","RelatedDescription":"Open issue \"Negotiate to NTLM authentication fallback not working\" (#34878)"},{"Id":"403485872","IsPullRequest":false,"CreatedAt":"2019-01-26T21:34:14","Actor":"davidsh","Number":"34877","RawContent":null,"Title":"Incorrect exception message shown during NTLM authentication","State":"open","Body":"Split from #28961\r\n\r\nAs of .NET Core 2.1, the default HTTP stack is based on SocketsHttpHandler.  SocketsHttpHandler uses the GSSAPI for handling HTTP AUTH schemes of 'Negotiate' and 'NTLM'.\r\n\r\nOn *Nix and OSX machines, this requires installing the GSSAPI support packages for both Kerberos and NTLM. The default docker images for .NET Core do not include the NTLM support package (i.e. gss-ntlmssp). As a result, HttpClient will throw an exception when trying to authenticate against an NTLM server because the NTLM related package is not installed on the machine.\r\n\r\nThe exception message currently looks like this:\r\n\r\n>Unhandled Exception: System.ComponentModel.Win32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Unknown error).\r\n   at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential)\r\n...\r\n\r\nThis issue will address fixing up the error message text to be more descriptive of the problem and solution.\r\n\r\n<details>\r\n<summary>\r\nRepo code\r\n</summary>\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace NtlmErrorTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            using (var listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))\r\n            {\r\n                listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n                listener.Listen(int.MaxValue);\r\n                var ep = (IPEndPoint)listener.LocalEndPoint;\r\n                var uri = new Uri($\"http://{ep.Address}:{ep.Port}/\");\r\n\r\n                Task.Run(async () =>\r\n                {\r\n                    while (true)\r\n                    {\r\n                        Socket s = await listener.AcceptAsync();\r\n                        var ignored = Task.Run(() =>\r\n                        {\r\n                            using (var ns = new NetworkStream(s))\r\n                            using (var reader = new StreamReader(ns))\r\n                            using (var writer = new StreamWriter(ns) { AutoFlush = true })\r\n                            {\r\n                                while (true)\r\n                                {\r\n                                    while (!string.IsNullOrEmpty(reader.ReadLine())) ;\r\n                                    writer.Write(\"HTTP/1.1 401 OK\\r\\nWww-Authenticate: NTLM\\r\\nContent-Length: 5\\r\\n\\r\\nhello\");\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                var handler = new HttpClientHandler();\r\n                handler.Credentials = new NetworkCredential(\"user\", \"password\", \"domain\");\r\n                using (var client = new HttpClient(handler))\r\n                {\r\n                    Console.WriteLine(uri.AbsoluteUri.ToString());\r\n                    using (HttpResponseMessage response = client.GetAsync(uri).GetAwaiter().GetResult())\r\n                    {\r\n                        Console.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34877","RelatedDescription":"Open issue \"Incorrect exception message shown during NTLM authentication\" (#34877)"},{"Id":"403482059","IsPullRequest":false,"CreatedAt":"2019-01-26T20:51:35","Actor":"ehajri","Number":"34876","RawContent":null,"Title":"CryptographicException: Error occurred during a cryptographic operation","State":"open","Body":"# Issue Title\r\nGetting \"_CryptographicException: Error occurred during a cryptographic operation._\" on macOS Mojave.\r\n# General\r\nWhile trying aspnet core Identity from [this repo](https://github.com/aspnet/Docs/tree/master/aspnetcore/security/authentication/identity/sample/src/ASPNETCore-IdentityDemoComplete/IdentityDemo), I get this exception \r\n\r\n> System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation.\r\n>    at Internal.Cryptography.Pal.SecTrustChainPal.ParseResults(SafeX509ChainHandle chainHandle, X509RevocationMode revocationMode)\r\n\r\nwhile executing [this line](https://github.com/aspnet/Docs/blob/446d68e78ab932f7285b2b7d15b685d413553326/aspnetcore/security/authentication/identity/sample/src/ASPNETCore-IdentityDemoComplete/IdentityDemo/Controllers/AccountController.cs#L224):\r\n```c#\r\nvar result = await _userManager.CreateAsync(user, model.Password);\r\n```\r\n### Note\r\nThe project runs successfully under docker but not locally on mac.\r\n\r\n# dotnet --info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview1-002702 [/usr/local/share/dotnet/sdk]\r\n  2.0.2 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-rc1-008673 [/usr/local/share/dotnet/sdk]\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n  2.1.302 [/usr/local/share/dotnet/sdk]\r\n  2.1.500 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0-rc2-3002702 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34876","RelatedDescription":"Open issue \"CryptographicException: Error occurred during a cryptographic operation\" (#34876)"},{"Id":"403283464","IsPullRequest":true,"CreatedAt":"2019-01-26T14:26:20","Actor":"maryamariyan","Number":"34856","RawContent":null,"Title":"Add test using short timeout throws WebException","State":"closed","Body":"Fixes: #34849 \r\n\r\ncc: @stephentoub","Url":"https://github.com/dotnet/corefx/pull/34856","RelatedDescription":"Closed or merged PR \"Add test using short timeout throws WebException\" (#34856)"},{"Id":"403443104","IsPullRequest":false,"CreatedAt":"2019-01-26T14:05:35","Actor":"benaadams","Number":"34875","RawContent":null,"Title":"API Proposal: Avx.Zeroupper","State":"closed","Body":"The Jit normally issues `vzeroupper` commands at entry and exit of methods, however when when mixing Avx and Sse code in the same method it is helpful to manually issue `vzeroupper` at the transitions:\r\n\r\nProposed api\r\n```csharp\r\npublic partial abstract class Avx : Sse42\r\n{\r\n    /// <summary>\r\n    /// void _mm256_zeroupper (void)\r\n    ///   VZEROUPPER\r\n    /// </summary>\r\n    public static void ZeroUpper();\r\n    \r\n    /// <summary>\r\n    /// void _mm256_zeroall (void)\r\n    ///   VZEROALL\r\n    /// </summary>\r\n    public static void ZeroAll();\r\n}\r\n```\r\n\r\nAlso added `vzeroall` for discussion.\r\n\r\nUse case: https://github.com/dotnet/coreclr/pull/22187#discussion_r251189236\r\n\r\n/cc @CarolEidt @fiigii @tannergooding @jkotas","Url":"https://github.com/dotnet/corefx/issues/34875","RelatedDescription":"Closed issue \"API Proposal: Avx.Zeroupper\" (#34875)"},{"Id":"403439731","IsPullRequest":true,"CreatedAt":"2019-01-26T13:03:13","Actor":"dotnet-maestro[bot]","Number":"34874","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.Build.Tasks.Configuration - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.19073.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.CoreFxTesting - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19073.5\r\n- Microsoft.DotNet.SourceRewriter - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34874","RelatedDescription":"Open PR \"Update dependencies from dotnet/arcade\" (#34874)"},{"Id":"403399341","IsPullRequest":true,"CreatedAt":"2019-01-26T11:26:36","Actor":"stephentoub","Number":"34873","RawContent":null,"Title":"Factor WinRT GetFolderPath into static accessible via reflection","State":"closed","Body":"cc: @jkotas ","Url":"https://github.com/dotnet/corefx/pull/34873","RelatedDescription":"Closed or merged PR \"Factor WinRT GetFolderPath into static accessible via reflection\" (#34873)"},{"Id":"403396347","IsPullRequest":true,"CreatedAt":"2019-01-26T05:53:15","Actor":"Dotnet-GitSync-Bot","Number":"34872","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34872","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34872)"},{"Id":"403375598","IsPullRequest":true,"CreatedAt":"2019-01-26T02:52:12","Actor":"Anipik","Number":"34870","RawContent":null,"Title":"Disabling the test on mac if the generated file has zero nanoseconds","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/34823\r\n\r\nIn our attempt to make the test deterministic we are setting the nanoseconds attribute by ourselves using Utimensat function\r\nbut it is not available on mac machines hence we cant set the nanoseconds attribute on those machines if it is zero.\r\n","Url":"https://github.com/dotnet/corefx/pull/34870","RelatedDescription":"Closed or merged PR \"Disabling the test on mac if the generated file has zero nanoseconds\" (#34870)"},{"Id":"403356969","IsPullRequest":true,"CreatedAt":"2019-01-26T01:50:39","Actor":"Wraith2","Number":"34865","RawContent":null,"Title":"Channels add conditional include for ThreadPool assembly in netcoreapp","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/34178\r\n\r\nIt looks like only non-netcoreapp builds need the ThreadPool assembly reference, if it is left in the build warning\r\n\r\n```\r\nE:\\Programming\\csharp7\\corefx\\.dotnet\\sdk\\2.1.401\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3245: Could not resolve this reference. Could not locate the assembly \"System.Threading.ThreadPool\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [E:\\Programming\\csharp7\\corefx\\src\\System.Threading.Channels\\src\\System.Threading.Channels.csproj]\r\n```\r\nis issued. Making it conditional fixes this and leaves the build (at least for me) warning and error free.\r\n\r\ncc @tarekgh @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/34865","RelatedDescription":"Closed or merged PR \"Channels add conditional include for ThreadPool assembly in netcoreapp\" (#34865)"},{"Id":"403389680","IsPullRequest":true,"CreatedAt":"2019-01-26T01:24:01","Actor":"safern","Number":"34871","RawContent":null,"Title":"Add outerloop legs in new CI definitions","State":"open","Body":"This enables three new optional legs that are only executed when requested by a comment. Options available are the following:\r\n\r\n/AzurePipelines run corefx-outerloop-linux\r\n/AzurePipelines run corefx-outerloop-osx\r\n/AzurePipelines run corefx-outerloop-windows\r\n\r\nPlus we can also do:\r\n/AzurePipelines run all (will run all 3 above, and re-trigger corefx-ci.)\r\n\r\nFYI: @ahsonkhan @davidsh @ericstj @ViktorHofer @stephentoub @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34871","RelatedDescription":"Open PR \"Add outerloop legs in new CI definitions\" (#34871)"},{"Id":"403361515","IsPullRequest":true,"CreatedAt":"2019-01-26T00:30:54","Actor":"safern","Number":"34866","RawContent":null,"Title":"Update helix SDK to get fix for random RestApiExceptions","State":"closed","Body":"Sometimes we where hitting a RestApiException when waiting for helix tests to finish. The issue was fixed and we need to update the SDK.\r\nhttps://github.com/dotnet/arcade/issues/1837","Url":"https://github.com/dotnet/corefx/pull/34866","RelatedDescription":"Closed or merged PR \"Update helix SDK to get fix for random RestApiExceptions\" (#34866)"},{"Id":"403372932","IsPullRequest":true,"CreatedAt":"2019-01-26T00:23:36","Actor":"safern","Number":"34869","RawContent":null,"Title":"Temporary disable FreeBSD leg","State":"closed","Body":"Core-Setup disabled their FreeBSD leg because the agents needed to be updated. They're now updated, however the latest Core-Setup we consumed for preview2, doesn't contain a FreeBSD runtime package. So let's disable these leg, to keep publishing to BAR and unblock official build.\r\n\r\nWe can enable this builds once core-setup does. \r\n\r\ncc: @danmosemsft @wfurt ","Url":"https://github.com/dotnet/corefx/pull/34869","RelatedDescription":"Closed or merged PR \"Temporary disable FreeBSD leg\" (#34869)"},{"Id":"403367538","IsPullRequest":false,"CreatedAt":"2019-01-25T23:06:47","Actor":"mguinness","Number":"34868","RawContent":null,"Title":"SmtpClient not sending QUIT on Dispose?","State":"open","Body":"Per the documentation at [SmtpClient.Dispose](https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient.dispose?view=netcore-2.1) this method should send QUIT:\r\n\r\n> Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the SmtpClient class.\r\n\r\nHowever when using in .NET Core, this does not appear to be the case.\r\n\r\nIn the .NET Reference Source, the underlying SmtpTransport class does this:\r\nhttps://github.com/Microsoft/referencesource/blob/master/System/net/System/Net/mail/SmtpTransport.cs#L35-L58\r\n\r\nIn the .NET Core Libraries, the same code isn't present in SmtpTransport class:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.Mail/src/System/Net/Mail/SmtpTransport.cs\r\n\r\nWas there a reason this code wasn't ported over to .NET Core?\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34868","RelatedDescription":"Open issue \"SmtpClient not sending QUIT on Dispose?\" (#34868)"},{"Id":"403325264","IsPullRequest":true,"CreatedAt":"2019-01-25T22:58:26","Actor":"maryamariyan","Number":"34861","RawContent":null,"Title":"Skip test for Nano: WindowAndCursorProps/Title_Get_Windows_NoNulls","State":"closed","Body":"- Switch back expected vs actual in assert (got moved around because in previous PR we shortly used Assert.Contains() instead of Assert.Equal which takes the opposite order of args (expected vs actual))\r\n\r\nFixes #34755\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34861","RelatedDescription":"Closed or merged PR \"Skip test for Nano: WindowAndCursorProps/Title_Get_Windows_NoNulls\" (#34861)"},{"Id":"403362490","IsPullRequest":false,"CreatedAt":"2019-01-25T22:46:06","Actor":"krwq","Number":"34867","RawContent":null,"Title":"Add SslStream.NegotiatedCipherSuite","State":"open","Body":"Spin off from: https://github.com/dotnet/corefx/issues/33809 - currently we do not have agreement on how cipher suite policy should look like, this part of the feature is fairly stable and unlikely to change - regardless of how that API will look like we will need to test it and be able to provide some correct information on what exactly happened during negotiation.\r\n\r\nCurrent APIs on SslStream reports MAC, key exchange and cipher but they don't work well with TLS 1.3 and with AEAD ciphers (MAC is calculated together with ciphertext) and on some platforms like OSX or Linux they do not always work correctly or report None for some of the values.\r\n\r\nAdding this API will allow us to directly use value reported by the underlying implementation and tell correctly what the implementation did.\r\n\r\n```csharp\r\nnamespace System.Net.Security {\r\npublic partial class SslStream {\r\n    [CLSCompliantAttribute(false)]\r\n    public virtual System.Net.Security.TlsCipherSuite NegotiatedCipherSuite { get { throw null; } }\r\n}\r\n\r\n[CLSCompliant(false)]\r\npublic enum TlsCipherSuite : ushort\r\n{\r\n    TLS_NULL_WITH_NULL_NULL = 0x0000,\r\n    TLS_RSA_WITH_NULL_MD5 = 0x0001,\r\n    TLS_RSA_WITH_NULL_SHA = 0x0002,\r\n    TLS_RSA_EXPORT_WITH_RC4_40_MD5 = 0x0003,\r\n    TLS_RSA_WITH_RC4_128_MD5 = 0x0004,\r\n    TLS_RSA_WITH_RC4_128_SHA = 0x0005,\r\n    TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 0x0006,\r\n    TLS_RSA_WITH_IDEA_CBC_SHA = 0x0007,\r\n    TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = 0x0008,\r\n    // ... (300 more values from IANA registry)\r\n}\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34867","RelatedDescription":"Open issue \"Add SslStream.NegotiatedCipherSuite\" (#34867)"},{"Id":"403347908","IsPullRequest":false,"CreatedAt":"2019-01-25T21:53:30","Actor":"terrajobst","Number":"34864","RawContent":null,"Title":"Ensure we add a NuGet mapping for .NET Standard 2.1 and .NET Core 3.0","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/issues/34864","RelatedDescription":"Open issue \"Ensure we add a NuGet mapping for .NET Standard 2.1 and .NET Core 3.0\" (#34864)"},{"Id":"403346057","IsPullRequest":false,"CreatedAt":"2019-01-25T21:47:10","Actor":"danmosemsft","Number":"34863","RawContent":null,"Title":"Fix the baseline files for NS2.1","State":"open","Body":"@wtgodbe owns this and it is in progress.","Url":"https://github.com/dotnet/corefx/issues/34863","RelatedDescription":"Open issue \"Fix the baseline files for NS2.1\" (#34863)"},{"Id":"403329282","IsPullRequest":true,"CreatedAt":"2019-01-25T21:00:35","Actor":"safern","Number":"34862","RawContent":null,"Title":"Run ubuntu arm tests in 16.04 for official builds","State":"closed","Body":"In order to run in 18.04 we either need to build in 18.04, centOS or Debian. Currently we're building in 1604, causing to random failures because of missing dependencies that are tight to the dependency version in 16.04.\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34862","RelatedDescription":"Closed or merged PR \"Run ubuntu arm tests in 16.04 for official builds\" (#34862)"},{"Id":"403293785","IsPullRequest":true,"CreatedAt":"2019-01-25T20:46:18","Actor":"Dotnet-GitSync-Bot","Number":"34858","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corefx/pull/34858","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34858)"},{"Id":"403304491","IsPullRequest":true,"CreatedAt":"2019-01-25T20:42:42","Actor":"wfurt","Number":"34860","RawContent":null,"Title":"update test output logger so it does not break in different process","State":"closed","Body":"fixes #34839\r\n\r\nall tests including outerloop do pass now.\r\n\r\n```\r\nfurt@Ubuntu:~/git/wfurt-corefx2/src/System.Net.Sockets/tests/FunctionalTests$ ../../../../eng/common/msbuild.sh /t:rebuildandtest /p:outerloop=true\r\n  RemoteExecutorConsoleApp -> /home/furt/git/wfurt-corefx2/artifacts/bin/RemoteExecutorConsoleApp/netstandard-AnyOS-Debug/RemoteExecutorConsoleApp.exe\r\n  System.Net.Sockets.Tests -> /home/furt/git/wfurt-corefx2/artifacts/bin/System.Net.Sockets.Tests/netcoreapp-Unix-Debug/System.Net.Sockets.Tests.dll\r\n  ----- start 07:37:53 =============== To repro directly: =====================================================\r\n  pushd /home/furt/git/wfurt-corefx2/artifacts/bin/tests/System.Net.Sockets.Tests/netcoreapp-Linux-Debug-x64\r\n  /home/furt/git/wfurt-corefx2/artifacts/bin/testhost/netcoreapp-Linux-Debug-x64/dotnet xunit.console.dll System.Net.Sockets.Tests.dll -xml testResults.xml -nologo -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing\r\n  popd\r\n  ===========================================================================================================\r\n  ~/git/wfurt-corefx2/artifacts/bin/tests/System.Net.Sockets.Tests/netcoreapp-Linux-Debug-x64 ~/git/wfurt-corefx2/src/System.Net.Sockets/tests/FunctionalTests\r\n    Discovering: System.Net.Sockets.Tests (method display = ClassAndMethod, method display options = None)\r\n    Discovered:  System.Net.Sockets.Tests (found 959 of 1053 test cases)\r\n    Starting:    System.Net.Sockets.Tests (parallel test collections = on, max threads = 4)\r\n      System.Net.Sockets.Tests.CreateSocket.Ctor_Raw_Success [SKIP]\r\n        Condition(s) not met: \"SupportsRawSockets\"\r\n      System.Net.Sockets.Tests.UnixDomainSocketTest.Socket_CreateUnixDomainSocket_Throws_OnWindows [SKIP]\r\n        Condition(s) not met: \"IsSubWindows10\"\r\n      System.Net.Sockets.Tests.KeepAliveTest.Socket_KeepAlive_RetryCount_Failure [SKIP]\r\n        Condition(s) not met: \"IsWindowsBelow1703\"\r\n    Finished:    System.Net.Sockets.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Net.Sockets.Tests  Total: 1410, Errors: 0, Failed: 0, Skipped: 3, Time: 49.323s\r\n  ~/git/wfurt-corefx2/src/System.Net.Sockets/tests/FunctionalTests\r\n  ----- end 07:38:43 ----- exit code 0 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/corefx/pull/34860","RelatedDescription":"Closed or merged PR \"update test output logger so it does not break in different process\" (#34860)"},{"Id":"403297017","IsPullRequest":true,"CreatedAt":"2019-01-25T19:15:50","Actor":"josalem","Number":"34859","RawContent":null,"Title":"Skipping syncroot tests for uapaot due to upstream behavior chagnes","State":"open","Body":"Skipping syncroot tests for UapAot due to behavior changes upstream\r\n\r\nSee: \r\n* https://github.com/dotnet/corefx/commit/1fd3717d73da3ae7440841e8fded4adbba5b0770#diff-f45913e598f4cc114af032e9212d7e7f\r\n* https://github.com/dotnet/coreclr/pull/21628\r\n\r\ncc - @sergiy-k @MichalStrehovsky ","Url":"https://github.com/dotnet/corefx/pull/34859","RelatedDescription":"Open PR \"Skipping syncroot tests for uapaot due to upstream behavior chagnes\" (#34859)"},{"Id":"403293241","IsPullRequest":false,"CreatedAt":"2019-01-25T19:04:44","Actor":"NonSecwitter","Number":"34857","RawContent":null,"Title":"Array should be intrinsically sortable","State":"open","Body":"### Rationale\r\nThe condition of being sorted is about the internal state of the array. Without an internal representation to convey it's state, knowing the internal state of being sorted depends on (a) compliance with requirements known by successful communication through documentation or (b) implementing the routine to always perform a sort operation on a received array.\r\n\r\nThe first case pushes the responsibility of creating and maintaining knowledge of internal state onto the client. The second case would likely be grossly inefficient, and requires the client to know the internal behavior of providing sort functionality. In both cases, this is a violation of data abstraction principals and makes the implementation of the provided function dependent on the client for correct operation.\r\n\r\n### Usage\r\nThis API modification makes sorting and state an intrinsic property of the Array, as it should be according to theories of encapsulation and data abstraction. Having intrinsic properties and capabilities related to sorting allows scenarios such as:\r\n\r\n```C#\r\n        static void Main(string[] args)\r\n        {\r\n            int[] HayStack = new int[1000000];\r\n            int Needle = args[0];\r\n\r\n            Comparer<int> HayMeasuringDevice = new Comparer<int>();\r\n\r\n            HayStack.Comparer = HayMeasuringDevice;\r\n            HayStack.IsSortable = true;\r\n            HayStack.Sort();\r\n\r\n            int LocationInHayStack = EfficientBinarySearch(HayStack, Needle);\r\n\r\n        }\r\n\r\n        int EfficientBinarySearch(Array HayStack, object Needle)\r\n        {\r\n            if (HayStack.IsSortable)\r\n            {\r\n                if (!HayStack.IsSorted)\r\n                    HayStack.Sort();\r\n\r\n                FindTheNeedle(HayStack, Needle);\r\n            }\r\n            else\r\n                throw new ArrayNotSortable();\r\n\r\n        }\r\n    }\r\n```\r\n\r\n\r\n### Proposed API\r\n```c#\r\npublic class Array\r\n    {\r\n        private object[] _array;\r\n        private bool _isSorted;\r\n        private bool _isSortable;\r\n        private Comparer _comparer;\r\n\r\n        public delegate void SetDelegate(object value, int index);\r\n        public SetDelegate SetValue;\r\n\r\n        MyArray()\r\n        {\r\n            _isSorted = false;\r\n            _isSortable = false;\r\n            SetValue = _setWhileUnsortable;\r\n        }\r\n\r\n        public bool IsSortable\r\n        {\r\n            get\r\n            {\r\n                return _isSortable;\r\n            }\r\n            set\r\n            {\r\n                if (value)\r\n                    _makeSortable();\r\n                else\r\n                    _makeUnsortable();\r\n            }\r\n        }\r\n\r\n        public bool IsSorted { get { return _isSorted; } }\r\n\r\n        private void _setWhileSortable(object value, int index)\r\n        {\r\n            _array[index] = value;\r\n            _isSorted = false;\r\n        }\r\n        private void _setWhileUnsortable(object value, int index)\r\n        {\r\n            _array[index] = value;\r\n        }\r\n\r\n        private void _makeSortable()\r\n        {\r\n            if (this._comparer != null)\r\n            {\r\n                SetValue = _setWhileSortable;\r\n                _isSortable = true;\r\n            }\r\n            else\r\n                throw new NoComparerSpecified();\r\n        }\r\n\r\n        private void _makeUnsortable()\r\n        {\r\n            SetValue = _setWhileUnsortable;\r\n            _isSortable = false;\r\n            _isSorted = false;\r\n        }\r\n\r\n        public void Sort()\r\n        {\r\n            if (_isSortable)\r\n                if (_comparer != null)\r\n                    _sort();\r\n\r\n        }\r\n\r\n        private void _sort() { }\r\n\r\n        public int SetValueSorted(object value)\r\n        {\r\n            if (this._isSortable && this._isSorted)\r\n            {\r\n                // User comparer to find place in _array\r\n                // and return index.\r\n            }\r\n            else\r\n                throw new ArrayNotSorted();\r\n        }\r\n    }\r\n```\r\n\r\n### Details\r\nOne of the more important features is the use of a delegate to allow the array to function as sortable or unsortable. When unsortable, the array functions exactly the same as current implementation. When sortable, the array differs in that standard insert cause the \"IsSorted\" flag to be set to false, and there is a SetValueSorted function that inserts the new value in the proper sort order, and re-arranges _array to accomodate the new value.\r\n\r\n### Open Questions\r\nC# has some language constructs that allow for direct manipulation of _array without use of the Array object, which would invalidate the IsSorted construct. I consider those as flaws in the language as they bypass encapsulation and present potentials for security and function problems, so I'm not addressing those in this proposal.","Url":"https://github.com/dotnet/corefx/issues/34857","RelatedDescription":"Open issue \"Array should be intrinsically sortable\" (#34857)"},{"Id":"403277372","IsPullRequest":false,"CreatedAt":"2019-01-25T18:33:02","Actor":"dotnet-mc-bot","Number":"34855","RawContent":null,"Title":"Test failure: System.IO.Tests.FileInfo_Delete/Unix_ExistingDirectory_ReadOnlyVolume","State":"open","Body":"Opened on behalf of @danmosemsft\n\nThe test `System.IO.Tests.FileInfo_Delete/Unix_ExistingDirectory_ReadOnlyVolume` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\nExpected: 0\nActual:   32\n```\n\nStack Trace:\n```\n   at System.IO.Tests.FileSystemTest.ReadOnly_FileSystemHelper(Action`1 testAction, String subDirectoryName) in /__w/1/s/src/System.IO.FileSystem/tests/FileSystemTest.cs:line 115\n   at System.IO.Tests.File_Delete.Unix_ExistingDirectory_ReadOnlyVolume() in /__w/1/s/src/System.IO.FileSystem/tests/File/Delete.cs:line 140\n```\n\nBuild : 3.0 - 20190125.1 (Core Tests)\nFailing configurations:\n- Ubuntu.1804.Arm64-arm64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34855","RelatedDescription":"Open issue \"Test failure: System.IO.Tests.FileInfo_Delete/Unix_ExistingDirectory_ReadOnlyVolume\" (#34855)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"403513998","IsPullRequest":false,"CreatedAt":"2019-01-27T04:54:08","Actor":"bartdesmet","Number":"32852","RawContent":null,"Title":"IDE0060 - Remove unused parameter should not fire for user-defined operators","State":"open","Body":"Removing the parameter isn't an option when it's required. Compare this to the case of implementing an interface and not using a parameter, which is fine and doesn't cause IDE0060 to fire.\r\n\r\n```csharp\r\nclass Op\r\n{\r\n    // IDE0060 - Remove unused parameter\r\n    public static Op operator -(Op op) => throw new NotImplementedException();\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32852","RelatedDescription":"Open issue \"IDE0060 - Remove unused parameter should not fire for user-defined operators\" (#32852)"},{"Id":"403513238","IsPullRequest":false,"CreatedAt":"2019-01-27T04:38:51","Actor":"bartdesmet","Number":"32851","RawContent":null,"Title":"IDE0060 - Remove unused parameter for internal method referenced by a delegate in another type","State":"open","Body":"This warning fires incorrectly when the method is used in a method group conversion from another type, as shown below with `Bar.Foo` referenced from `Baz`.\r\n\r\n```csharp\r\nclass Baz\r\n{\r\n    private static readonly Action<int> s_foo = Bar.Foo;\r\n}\r\n\r\nclass Bar\r\n{\r\n    // IDE0060 - Remove unused parameter\r\n    internal static void Foo(int unused) { }\r\n}\r\n\r\nclass Qux\r\n{\r\n    private static readonly Action<int> s_foo = Foo;\r\n\r\n    // No warning\r\n    internal static void Foo(int unused) { }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32851","RelatedDescription":"Open issue \"IDE0060 - Remove unused parameter for internal method referenced by a delegate in another type\" (#32851)"},{"Id":"403506675","IsPullRequest":true,"CreatedAt":"2019-01-27T02:37:24","Actor":"jcouv","Number":"32850","RawContent":null,"Title":"Use flag to represent suppression in bound tree","State":"open","Body":"This PR addresses some issues with the suppression operator. It does not address tuple scenarios or the semantic model.\r\nCompared to https://github.com/dotnet/roslyn/pull/32699 which added many special cases based on bound node for suppression, this PR drops the suppression node from the bound tree and represents suppression as a flag.\r\n\r\nFixed a number of crashes\r\nFixes https://github.com/dotnet/roslyn/issues/29862 (top-level nullability of !)\r\nFixes https://github.com/dotnet/roslyn/issues/29903 (`t! = s` should be an error)\r\nI also noticed that we skipped some warnings in cast scenarios (latest [LDM notes](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-08-20.md#11-suppression-of-nested-nullability) on the topic)\r\nFixes https://github.com/dotnet/roslyn/issues/31294 (`throw null!;` isn't allowed)\r\nFixes https://github.com/dotnet/roslyn/issues/29905\r\nFixes https://github.com/dotnet/roslyn/issues/29906\r\n\r\nFollow-ups:\r\n- We'll need to refine where suppressions are allowed (I probably made more cases illegal than strictly necessary, for now)\r\n- https://github.com/dotnet/roslyn/issues/29710 (analysis of ref re-assignment and CheckValueKind)\r\n- https://github.com/dotnet/roslyn/issues/31297 (escape rules and suppressions)\r\n- https://github.com/dotnet/roslyn/issues/32553 (suppressions on tuple literals)\r\n- https://github.com/dotnet/roslyn/issues/32364 (nullable and dynamic)\r\n- https://github.com/dotnet/roslyn/issues/32661 (follow-up on semantic model on suppressed expressions)\r\n- https://github.com/dotnet/roslyn/issues/32697 (need to re-analyze method group conversions)\r\n- https://github.com/dotnet/roslyn/issues/32698 (need to analyze delegate creations)\r\n- https://github.com/dotnet/roslyn/issues/32844 (need to analyze default parameter values better)\r\n\r\nNotes:\r\n- Although I ended up removing the IOperation test I'd added, I adjusted the comparison logic for IOperation assertions to tolerate whitespaces","Url":"https://github.com/dotnet/roslyn/pull/32850","RelatedDescription":"Open PR \"Use flag to represent suppression in bound tree\" (#32850)"},{"Id":"403497454","IsPullRequest":true,"CreatedAt":"2019-01-27T02:30:07","Actor":"dotnet-bot","Number":"32846","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32846","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32846)"},{"Id":"403497497","IsPullRequest":true,"CreatedAt":"2019-01-27T01:30:05","Actor":"dotnet-bot","Number":"32849","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32849","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32849)"},{"Id":"403497474","IsPullRequest":true,"CreatedAt":"2019-01-27T00:00:27","Actor":"dotnet-bot","Number":"32848","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32848","RelatedDescription":"Open PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32848)"},{"Id":"403497467","IsPullRequest":true,"CreatedAt":"2019-01-27T00:00:24","Actor":"dotnet-bot","Number":"32847","RawContent":null,"Title":"Merge dev16.0-preview3-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32847","RelatedDescription":"Open PR \"Merge dev16.0-preview3-vs-deps to master-vs-deps\" (#32847)"},{"Id":"403493948","IsPullRequest":true,"CreatedAt":"2019-01-26T23:11:19","Actor":"sharwell","Number":"32845","RawContent":null,"Title":"Performance improvements for formatting analyzer","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32845","RelatedDescription":"Open PR \"Performance improvements for formatting analyzer\" (#32845)"},{"Id":"403493010","IsPullRequest":false,"CreatedAt":"2019-01-26T22:57:06","Actor":"jcouv","Number":"32844","RawContent":null,"Title":"Nullable analysis of default parameter values","State":"open","Body":"We currently do a simple, but incomplete, analysis of default parameter values.\r\n\r\n```C#\r\n        [WorkItem(26626, \"https://github.com/dotnet/roslyn/issues/26626\")]\r\n        [Fact]\r\n        public void ParameterDefaultValue_02()\r\n        {\r\n            var source =\r\n@\"class C\r\n{\r\n    const string? S0 = null;\r\n    static void F0(string s = null!) { }\r\n    static void F1(string x = (string)null!, string y = ((string)null)!) { }\r\n    static void F2(string x = default!, string y = default(string)!) { }\r\n    static void F3(string s = (S0!)!) { }\r\n    static void M()\r\n    {\r\n        F0();\r\n        F1();\r\n        F2();\r\n        F3();\r\n        F1(x: null);\r\n        F1(y: null);\r\n        F2(null!, null);\r\n    }\r\n}\";\r\n            // TODO2 we should warn on the conversion of `null` to `string` in `(string)null`\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyDiagnostics(\r\n                // (14,15): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.\r\n                //         F1(x: null);\r\n                Diagnostic(ErrorCode.WRN_NullAsNonNullable, \"null\").WithLocation(14, 15),\r\n                // (15,15): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.\r\n                //         F1(y: null);\r\n                Diagnostic(ErrorCode.WRN_NullAsNonNullable, \"null\").WithLocation(15, 15),\r\n                // (16,19): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.\r\n                //         F2(null!, null);\r\n                Diagnostic(ErrorCode.WRN_NullAsNonNullable, \"null\").WithLocation(16, 19)\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32844","RelatedDescription":"Open issue \"Nullable analysis of default parameter values\" (#32844)"},{"Id":"403492893","IsPullRequest":true,"CreatedAt":"2019-01-26T22:55:29","Actor":"YairHalberstadt","Number":"32843","RawContent":null,"Title":"Captures Invalid Dimensions from an array variable declaration.","State":"open","Body":"Initially this pull request enables the dimensions specified in error in a variable declaration such as this:\r\n\r\n```csharp\r\nint[10] x;\r\n```\r\nTo be captured in a `BoundTypeExpression` as `BoundDimensionsOpt`, and to be consumed via an added `IgnoredDimensions` Property in `IVariableDeclarationOperation`.\r\n\r\nSee #32464\r\n\r\nIn future pull requests I may look at including support for capturing the invalid dimensions in:\r\n\r\n- parameters\r\n- foreach and for loop variables\r\n- typeof expressions\r\n- type arguments\r\n- is type expressions\r\n- casts\r\n- as expressions\r\n- Return types\r\n- Field types \r\netc.\r\n\r\nIt is unlikely that I will do all of these however, so suggestions as to which would be highest priority would be useful.\r\n","Url":"https://github.com/dotnet/roslyn/pull/32843","RelatedDescription":"Open PR \"Captures Invalid Dimensions from an array variable declaration.\" (#32843)"},{"Id":"403491524","IsPullRequest":false,"CreatedAt":"2019-01-26T22:39:18","Actor":"WilStead","Number":"32842","RawContent":null,"Title":"Null Coalescing Assignment: Compiler should not report IDE0052 when assigning a value to a property backing field","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n**Steps to Reproduce**:\r\nWhen using the new null coalescing assignment operator to initialize a field used as the backing store for a property, message IDE0052 is reported for the backing field.\r\n\r\nFor example:\r\n```c#\r\nprivate Foo _foo1; // Message IDE0052: Private member '_foo1' can be removed as the value assigned to it is never read.\r\npublic Foo Foo1 => _foo1 ??= new Foo();\r\n\r\nprivate Foo _foo2; // No message when using this kind of conditional assignment construction\r\npublic Foo Foo2 => _foo2 ?? (_foo2 = new Foo());\r\n```\r\n\r\n**Expected Behavior**:\r\nNo message is reported.\r\n\r\n**Actual Behavior**:\r\nMessage IDE0052 is reported.","Url":"https://github.com/dotnet/roslyn/issues/32842","RelatedDescription":"Open issue \"Null Coalescing Assignment: Compiler should not report IDE0052 when assigning a value to a property backing field\" (#32842)"},{"Id":"403435261","IsPullRequest":true,"CreatedAt":"2019-01-26T21:30:12","Actor":"dotnet-bot","Number":"32824","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32824","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32824)"},{"Id":"403435293","IsPullRequest":true,"CreatedAt":"2019-01-26T21:30:08","Actor":"dotnet-bot","Number":"32826","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32826","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32826)"},{"Id":"403480225","IsPullRequest":true,"CreatedAt":"2019-01-26T20:30:52","Actor":"JoeRobich","Number":"32841","RawContent":null,"Title":"Updated version to 3.0.0 beta 4","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32841","RelatedDescription":"Open PR \"Updated version to 3.0.0 beta 4\" (#32841)"},{"Id":"403461635","IsPullRequest":false,"CreatedAt":"2019-01-26T17:17:48","Actor":"CreateAndInject","Number":"32840","RawContent":null,"Title":"Resources.Designer.cs bug","State":"open","Body":"This bug only appear when the language of VS is Chinese.\r\n\r\n**Version Used**: VS2017 15.9.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Create a WinForm project, and open Resources.Designer.cs, if the language is English, the summary of Culture property is:\r\n```\r\n        /// <summary>\r\n        ///   Overrides the current thread's CurrentUICulture property for all\r\n        ///   resource lookups using this strongly typed resource class.\r\n        /// </summary>\r\n```\r\nIf the language is Chinese, the summary of Culture property is:\r\n```\r\n        /// <summary>\r\n        ///   覆盖当前线程的 CurrentUICulture 属性\r\n        ///   使用此强类型的资源类的资源查找。\r\n        /// </summary>\r\n```\r\n2. Double click Resources.resx, and write any thing in String1.\r\n\r\n**Expected Behavior**:\r\nIf the language is English, the summary doesn't change, but If the language is Chinese, it will become to:\r\n```\r\n        /// <summary>\r\n        ///   重写当前线程的 CurrentUICulture 属性\r\n        ///   重写当前线程的 CurrentUICulture 属性。\r\n        /// </summary>\r\n```\r\nThere're same text in 2 lines.\r\n\r\n**Actual Behavior**: Don't change, keep:\r\n```\r\n        /// <summary>\r\n        ///   覆盖当前线程的 CurrentUICulture 属性\r\n        ///   使用此强类型的资源类的资源查找。\r\n        /// </summary>\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32840","RelatedDescription":"Open issue \"Resources.Designer.cs bug\" (#32840)"},{"Id":"403451738","IsPullRequest":false,"CreatedAt":"2019-01-26T15:25:52","Actor":"lmcarreiro","Number":"32839","RawContent":null,"Title":"Language service shows non-accessible protected setters inside object initializers","State":"open","Body":"**Version Used**:\r\n\r\nVisual Studio Enterprise 2017 version 15.9.4 / VisualStudio.15.Release/15.9.4+28307.222\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Write an abstract class A with a public property that has a public getter and a protected setter.\r\n2. Write a non-abstract class B that inherits from A.\r\n3. In a class C that doesn't inherit from A or B, instantiate a class B and hit [Ctrl]+[Space] inside the object initializer.\r\n\r\n**Expected Behavior**:\r\nDo not show properties with protected setters.\r\n\r\n**Actual Behavior**:\r\nShowing properties with protected setters.\r\n\r\n![image](https://user-images.githubusercontent.com/13019179/51789038-f492f600-216b-11e9-84cd-fa46689d7722.png)\r\n\r\n```cs\r\nnamespace X\r\n{\r\n    class Y\r\n    {\r\n        Animal[] animals = new Animal[]\r\n        {\r\n            new Dog\r\n            {\r\n                Name = \"Leo\", // error\r\n            },\r\n            new Dog\r\n            {\r\n                /* [Ctrl]+[Space] here */\r\n            }\r\n        }\r\n    }\r\n\r\n    abstract class Animal\r\n    {\r\n        public string Type { get; }\r\n        public string Name { get; protected set; }\r\n    }\r\n\r\n    class Dog : Animal\r\n    {\r\n\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32839","RelatedDescription":"Open issue \"Language service shows non-accessible protected setters inside object initializers\" (#32839)"},{"Id":"403449856","IsPullRequest":false,"CreatedAt":"2019-01-26T15:03:48","Actor":"sharwell","Number":"32838","RawContent":null,"Title":"Object browser does not render <br/>","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/176321\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Attempt to write a documentation comment with a line break that is _not_ a paragraph break using `<br/>`\r\n2. View the documentation comment in Object Browser\r\n\r\n**Expected Behavior**:\r\n\r\nThe `<br/>` is rendered as a line break that is not a paragraph break.\r\n\r\n**Actual Behavior**:\r\n\r\nThe `<br/>` is ignored. Attempting to use `<para>` as an alternative creates a paragraph break.\r\n","Url":"https://github.com/dotnet/roslyn/issues/32838","RelatedDescription":"Open issue \"Object browser does not render <br/>\" (#32838)"},{"Id":"403447755","IsPullRequest":false,"CreatedAt":"2019-01-26T14:39:41","Actor":"sharwell","Number":"32837","RawContent":null,"Title":"C# console app, turn virtual space on","State":"open","Body":"**Version Used**: Visual Studio 2015\r\n\r\nOriginally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/173194\r\n\r\n**Steps to Reproduce**:\r\n\r\nC# console app, turn virtual space on.\r\n\r\nMain(null); |\r\n\r\npress <kbd>Ctrl</kbd>+<kbd>Backspace</kbd> couple of times to get rid of the null\r\n\r\n**Expected Behavior**:\r\n\r\nMain(|\r\n\r\nlike in previous Visual Studio version. \r\n\r\n**Actual Behavior**:\r\n\r\nMain( |\r\n","Url":"https://github.com/dotnet/roslyn/issues/32837","RelatedDescription":"Open issue \"C# console app, turn virtual space on\" (#32837)"},{"Id":"403447327","IsPullRequest":false,"CreatedAt":"2019-01-26T14:34:49","Actor":"sharwell","Number":"32836","RawContent":null,"Title":"The color of links when using the dollar sign operator is wrong","State":"open","Body":"Affected Branch: \r\nAffected Build: \r\nAffected Product Language: \r\n\r\n🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/172884\r\n\r\nSteps to reproduce:\r\n\r\n1. create a console app with the following\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var x = \"value\";\r\n        var text = $\"http://test/{x}/test\";\r\n    }\r\n}\r\n```\r\n\r\nexpected: the link is not blue\r\nexpected: clicking on the link does nothing\r\nactual: this link is blue\r\nactual: clicking on the link takes you to the url","Url":"https://github.com/dotnet/roslyn/issues/32836","RelatedDescription":"Open issue \"The color of links when using the dollar sign operator is wrong\" (#32836)"},{"Id":"403446109","IsPullRequest":false,"CreatedAt":"2019-01-26T14:21:43","Actor":"sharwell","Number":"32835","RawContent":null,"Title":"Cannot comment code with 'REM'","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n:link: Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/159051\r\n\r\n**Steps to Reproduce**:\r\n\r\nType `REM` to start a line comment in VB.\r\n\r\n**Expected Behavior**:\r\n\r\nAutocomplete does not replace `REM` when <kbd>Space</kbd> is pressed.\r\n\r\n**Actual Behavior**:\r\n\r\nAutocomplete replaces `REM` with `RemoveHandler` when <kbd>Space</kbd> is pressed.\r\n","Url":"https://github.com/dotnet/roslyn/issues/32835","RelatedDescription":"Open issue \"Cannot comment code with 'REM'\" (#32835)"},{"Id":"403446092","IsPullRequest":false,"CreatedAt":"2019-01-26T14:21:32","Actor":"AdamSpeight2008","Number":"32834","RawContent":null,"Title":"Absent Public API ","State":"open","Body":"The following public api isn't in either of the PublicAPI files.\r\n```vbnet\r\nPublic Shared ReadOnly Property [Default] As VisualBasicParseOptions = New VisualBasicParseOptions()\r\n```\r\n[VisualBasicParseOptions.vb](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/VisualBasicParseOptions.vb#L17).\r\n\r\nThis is due to how the exist DeclarePublicAPIAnalyzer works, I am implementing an update to recognise auto-implemented properties. It also raises another question, should the analyser recognise changes to `ReadOnly` / `WriteOnly` of a property? \r\neg\r\n```\r\nPublic Property [Property]() As Integer\r\n' to\r\nPublic ReadOnly Property [Property]() As Integer\r\n```\r\nor visa-versa?\r\n\r\nIf it did it would produce thousand of diagnostics against the Roslyn code base, as it currently isn't being accounted for.","Url":"https://github.com/dotnet/roslyn/issues/32834","RelatedDescription":"Open issue \"Absent Public API \" (#32834)"},{"Id":"403444792","IsPullRequest":false,"CreatedAt":"2019-01-26T14:05:05","Actor":"sharwell","Number":"32833","RawContent":null,"Title":"I would like to have the \"base\"-element in the \"local/QuickWatch\"-window back","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/151529\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass A\r\n{\r\n    int Value { get; }\r\n}\r\n\r\nclass B : A\r\n{\r\n}\r\n```\r\n\r\nAdd `new B()` to the **Quick Watch** window, or see a local variable of type `B` in the **Locals** window.\r\n\r\n**Expected Behavior**:\r\n\r\nThe inherited `A.Value` property is hidden under a **base** node in the debugger tree.\r\n\r\n**Actual Behavior**:\r\n\r\nThe `Value` property shows as a child of `B`.\r\n","Url":"https://github.com/dotnet/roslyn/issues/32833","RelatedDescription":"Open issue \"I would like to have the \"base\"-element in the \"local/QuickWatch\"-window back\" (#32833)"},{"Id":"403443681","IsPullRequest":false,"CreatedAt":"2019-01-26T13:52:54","Actor":"sharwell","Number":"32832","RawContent":null,"Title":"Consider using IBlankLineIndentationService as a language service","State":"open","Body":"Obtaining `IBlankLineIndentationService` as a language service could avoid the need for language-specific overrides.\r\n\r\nOriginally requested in https://github.com/dotnet/roslyn/pull/32809#discussion_r251176526.","Url":"https://github.com/dotnet/roslyn/issues/32832","RelatedDescription":"Open issue \"Consider using IBlankLineIndentationService as a language service\" (#32832)"},{"Id":"403443495","IsPullRequest":false,"CreatedAt":"2019-01-26T13:50:51","Actor":"sharwell","Number":"32831","RawContent":null,"Title":"Avoid creating instances of IBlankLineIndentationService on-the-fly","State":"open","Body":"`CSharpIndentationService` and `VisualBasicIndentationService` are stateless, but instances of these types are created on-the-fly in refactorings. Consider using a singleton instance instead.\r\n\r\nOriginally requested in https://github.com/dotnet/roslyn/pull/32809#discussion_r251176464","Url":"https://github.com/dotnet/roslyn/issues/32831","RelatedDescription":"Open issue \"Avoid creating instances of IBlankLineIndentationService on-the-fly\" (#32831)"},{"Id":"403443267","IsPullRequest":false,"CreatedAt":"2019-01-26T13:48:06","Actor":"sharwell","Number":"32830","RawContent":null,"Title":"Consider supporting column-aligned indentation levels when wrapping binary expressions","State":"open","Body":"**Version Used**: Master branch once #32809 is merged\r\n\r\n**Steps to Reproduce**:\r\n\r\nWrap the binary expression in the following code:\r\n\r\n```csharp\r\nwhile (a && b)\r\n{\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nUsers should have an option to wrap the expression with wrapped sub-expressions aligned to the original expression, like this:\r\n\r\n```csharp\r\nwhile (a &&\r\n       b)\r\n{\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nUsers only have the option to wrap the expression the way Smart Indent would wrap the expression when pressing <kbd>Enter</kbd>.\r\n\r\n```csharp\r\nwhile (a &&\r\n    b)\r\n{\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32830","RelatedDescription":"Open issue \"Consider supporting column-aligned indentation levels when wrapping binary expressions\" (#32830)"},{"Id":"403435254","IsPullRequest":true,"CreatedAt":"2019-01-26T13:30:12","Actor":"dotnet-bot","Number":"32823","RawContent":null,"Title":"Merge dev16.0-preview3 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32823","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview3 to master\" (#32823)"},{"Id":"403435289","IsPullRequest":true,"CreatedAt":"2019-01-26T13:30:08","Actor":"dotnet-bot","Number":"32825","RawContent":null,"Title":"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps\ngit reset --hard upstream/dev16.0-preview3-vs-deps\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32825","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps\" (#32825)"},{"Id":"403435310","IsPullRequest":true,"CreatedAt":"2019-01-26T12:00:52","Actor":"dotnet-bot","Number":"32829","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32829","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#32829)"},{"Id":"403435303","IsPullRequest":true,"CreatedAt":"2019-01-26T12:00:48","Actor":"dotnet-bot","Number":"32828","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32828","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#32828)"},{"Id":"403435298","IsPullRequest":true,"CreatedAt":"2019-01-26T12:00:45","Actor":"dotnet-bot","Number":"32827","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32827","RelatedDescription":"Open PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32827)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"403501965","IsPullRequest":true,"CreatedAt":"2019-01-27T03:36:55","Actor":"Dotnet-GitSync-Bot","Number":"6903","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6903","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6903)"},{"Id":"403462114","IsPullRequest":true,"CreatedAt":"2019-01-27T01:57:40","Actor":"jkotas","Number":"6901","RawContent":null,"Title":"Disable bad CoreCLR test","State":"closed","Body":"The test makes an assumption that objects are finalized in a specific order. It is not a safe assumption to make.","Url":"https://github.com/dotnet/corert/pull/6901","RelatedDescription":"Closed or merged PR \"Disable bad CoreCLR test\" (#6901)"},{"Id":"403484519","IsPullRequest":true,"CreatedAt":"2019-01-26T21:19:54","Actor":"tonerdo","Number":"6902","RawContent":null,"Title":"[Interpreter] Arguments","State":"open","Body":"This PR adds support for the following opcodes:\r\n\r\n* `ldarg.*`\r\n\r\nwhich allows methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static int Sum(int a, int b)\r\n{\r\n    return a + b;\r\n}\r\n```\r\n\r\nIt also updates `InterpreterCallInterceptor` to ensure a non-zero `RuntimeMethodHandle` is returned for non-primitive argument and local variable types, which is needed for interpreting methods like the following:\r\n\r\n```csharp\r\npublic static DateTime ForwardDateTime(DateTime d)\r\n{\r\n    return d;\r\n}\r\n\r\npublic static Exception ForwardException(Exception e)\r\n{\r\n    return e;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corert/pull/6902","RelatedDescription":"Open PR \"[Interpreter] Arguments\" (#6902)"},{"Id":"403461759","IsPullRequest":true,"CreatedAt":"2019-01-26T18:51:32","Actor":"Dotnet-GitSync-Bot","Number":"6900","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6900","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6900)"},{"Id":"403353370","IsPullRequest":true,"CreatedAt":"2019-01-26T18:23:30","Actor":"trylek","Number":"6895","RawContent":null,"Title":"Fix catch clauses referring to a generic method argument","State":"closed","Body":"Scrutinizing the CoreCLR Pri#1 results I found a large bucket of\r\nfailures caused by mismatched catch clauses for generic exception\r\ntypes. With tons of help from Jan Vorlicek I tracked this down to\r\na subtle difference in getMethodInfo flags. I have added one of\r\nthe previously failing Pri#1 tests to the CPAOT trivial unit test\r\nsuite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6895","RelatedDescription":"Closed or merged PR \"Fix catch clauses referring to a generic method argument\" (#6895)"},{"Id":"403410281","IsPullRequest":true,"CreatedAt":"2019-01-26T17:15:23","Actor":"Dotnet-GitSync-Bot","Number":"6896","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams @benaadams @marek-safar","Url":"https://github.com/dotnet/corert/pull/6896","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6896)"},{"Id":"403453995","IsPullRequest":true,"CreatedAt":"2019-01-26T15:52:04","Actor":"MichalStrehovsky","Number":"6899","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6899","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6899)"},{"Id":"403447741","IsPullRequest":true,"CreatedAt":"2019-01-26T14:39:27","Actor":"filipnavara","Number":"6898","RawContent":null,"Title":"WIP: Move Timer to shared CoreLib partition.","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22231, contributes to https://github.com/dotnet/coreclr/issues/21932.","Url":"https://github.com/dotnet/corert/pull/6898","RelatedDescription":"Open PR \"WIP: Move Timer to shared CoreLib partition.\" (#6898)"},{"Id":"403429944","IsPullRequest":false,"CreatedAt":"2019-01-26T10:54:34","Actor":"MichalStrehovsky","Number":"6897","RawContent":null,"Title":"Expose option to completely disable reflection","State":"open","Body":"CoreRT runtime doesn't require reflection metadata to run managed code. We should expose a compiler option that skips generation of reflection metadata and switches reflection stack over to one that operates on runtime metadata only (i.e. one can use reflection to get the base type or list of interfaces, but no names, methods, fields, are exposed).","Url":"https://github.com/dotnet/corert/issues/6897","RelatedDescription":"Open issue \"Expose option to completely disable reflection\" (#6897)"},{"Id":"403220173","IsPullRequest":true,"CreatedAt":"2019-01-26T05:51:35","Actor":"Dotnet-GitSync-Bot","Number":"6894","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6894","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6894)"},{"Id":"403168509","IsPullRequest":true,"CreatedAt":"2019-01-25T15:59:55","Actor":"Dotnet-GitSync-Bot","Number":"6892","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Quogu","Url":"https://github.com/dotnet/corert/pull/6892","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6892)"},{"Id":"403190701","IsPullRequest":false,"CreatedAt":"2019-01-25T14:56:42","Actor":"letmaik","Number":"6893","RawContent":null,"Title":"Error out on unsupported NativeCallable signatures","State":"open","Body":"I'd like to do something like:\r\n\r\n```cs\r\n        [NativeCallable(EntryPoint = \"StrToInt\", CallingConvention = CallingConvention.Cdecl)]\r\n        public static int StrToInt(string a)\r\n        {\r\n            return int.Parse(a);\r\n        }\r\n```\r\n\r\nwhich builds fine, but then it crashes when I try to invoke it. I tried adding `[MarshalAs(UnmanagedType.LPStr)]` to the argument but that didn't change anything.\r\n\r\nShould this work in principle or am I missing something?\r\n\r\nEDIT: Actually, there is an error that gets printed: \"Unhandled Exception: System.FormatException: Input string was not in a correct format.\" I'm calling the shared library from Python via ctypes:\r\n\r\n```py\r\nfrom ctypes import CDLL, c_char_p\r\nLIB_PATH = \"...dll\"\r\nlib = CDLL(LIB_PATH)\r\nlib.StrToInt.argtypes = [c_char_p]\r\nassert lib.StrToInt('42'.encode('utf-8')) == 42\r\n```","Url":"https://github.com/dotnet/corert/issues/6893","RelatedDescription":"Open issue \"Error out on unsupported NativeCallable signatures\" (#6893)"},{"Id":"402984073","IsPullRequest":true,"CreatedAt":"2019-01-25T04:03:09","Actor":"Dotnet-GitSync-Bot","Number":"6890","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6890","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6890)"},{"Id":"402986311","IsPullRequest":false,"CreatedAt":"2019-01-25T03:04:40","Actor":"xiaotie","Number":"6891","RawContent":null,"Title":"Some unexpected behavior using timer with comdlg","State":"open","Body":"There are some unexpected behavior when use system timer in corert, but it is ok in dotnet core:\r\n\r\n```\r\n        private static System.Timers.Timer timer;\r\n\r\n        public static void Test()\r\n        {\r\n            timer = new System.Timers.Timer();\r\n            timer.Interval = 1000;\r\n            timer.Start();  // It is ok in dotnet core native when comment this line \r\n\r\n            for (int i = 0; i < 100; i++)\r\n                new FileDialog().RunDialog();\r\n        }\r\n```\r\n\r\nHere is the full code:  [https://github.com/xiaotie/DotNetNativeTimerBug](https://github.com/xiaotie/DotNetNativeTimerBug)","Url":"https://github.com/dotnet/corert/issues/6891","RelatedDescription":"Open issue \"Some unexpected behavior using timer with comdlg\" (#6891)"},{"Id":"402962363","IsPullRequest":true,"CreatedAt":"2019-01-25T02:14:29","Actor":"Dotnet-GitSync-Bot","Number":"6889","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6889","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6889)"},{"Id":"402941757","IsPullRequest":true,"CreatedAt":"2019-01-25T01:03:07","Actor":"Dotnet-GitSync-Bot","Number":"6888","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @tannergooding","Url":"https://github.com/dotnet/corert/pull/6888","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6888)"},{"Id":"402704885","IsPullRequest":true,"CreatedAt":"2019-01-24T23:27:48","Actor":"Dotnet-GitSync-Bot","Number":"6879","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6879","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6879)"},{"Id":"402462972","IsPullRequest":true,"CreatedAt":"2019-01-24T22:50:38","Actor":"trylek","Number":"6874","RawContent":null,"Title":"Basic infra support for running local CPAOT GC stress tests","State":"closed","Body":"This change basically introduces a new option /gcstresslevel\r\nin tests\\runtest.cmd akin to a similar option in the CoreCLR-specific\r\nscript. I have also bumped up the timeouts to 1 hour as CPAOT\r\nTop200 test suite is currently timing out in ILC compilation of\r\n1~2 tests (typically the bigvtbl tests).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6874","RelatedDescription":"Closed or merged PR \"Basic infra support for running local CPAOT GC stress tests\" (#6874)"},{"Id":"402898840","IsPullRequest":true,"CreatedAt":"2019-01-24T22:47:05","Actor":"filipnavara","Number":"6887","RawContent":null,"Title":"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.","State":"closed","Body":"Extracted from #6880. /cc @jkotas \r\n\r\nI will submit the unit tests to CoreFX soon.","Url":"https://github.com/dotnet/corert/pull/6887","RelatedDescription":"Closed or merged PR \"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.\" (#6887)"},{"Id":"402779587","IsPullRequest":false,"CreatedAt":"2019-01-24T16:33:48","Actor":"letmaik","Number":"6885","RawContent":null,"Title":"Cannot open input file 'kernel32.lib'","State":"closed","Body":"I'm using the x64 Native Tools Command Prompt for VS 2017 on Windows 10.\r\nWhen trying to build the NativeLibrary example as shared library I get the following error:\r\n```\r\n> dotnet publish /p:NativeLib=Shared -r win-x64 -c Release\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 69.69 ms for C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj.\r\n  NativeLibrary -> C:\\Users\\marieche\\git\\corert\\samples\\NativeLibrary\\bin\\x64\\Release\\netstandard2.0\\win-x64\\NativeLibrary.dll\r\n  Generating native code\r\nLINK : fatal error LNK1181: cannot open input file 'kernel32.lib' [C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj]\r\nC:\\Users\\...\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27323-02\\build\\Microsoft.NETCore.Native.targets(305,5): error MSB3073: The command \"link  @\"obj\\x64\\Release\\netstandard2.0\\win-x64\\native\\link.rsp\"\" exited with code 1181. [C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj]\r\n```\r\n\r\nIf it helps, here are my environment variables:\r\n```\r\nALLUSERSPROFILE=C:\\ProgramData\r\nAPPDATA=C:\\Users\\...\\AppData\\Roaming\r\nCommandPromptType=Native\r\nCommonProgramFiles=C:\\Program Files\\Common Files\r\nCommonProgramFiles(x86)=C:\\Program Files (x86)\\Common Files\r\nCommonProgramW6432=C:\\Program Files\\Common Files\r\nComSpec=C:\\WINDOWS\\system32\\cmd.exe\r\nDevEnvDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\\r\nDriverData=C:\\Windows\\System32\\Drivers\\DriverData\r\nFramework40Version=v4.0\r\nFrameworkDir=C:\\Windows\\Microsoft.NET\\Framework64\\\r\nFrameworkDir64=C:\\Windows\\Microsoft.NET\\Framework64\\\r\nFrameworkVersion=v4.0.30319\r\nFrameworkVersion64=v4.0.30319\r\nFSHARPINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\\r\nHOMEDRIVE=C:\r\nHOMEPATH=\\Users\\...\r\nINCLUDE=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\include;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\include\\um;\r\nLIB=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\lib\\um\\x64;\r\nLIBPATH=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86\\store\\references;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;\r\nLOCALAPPDATA=C:\\Users\\...\\AppData\\Local\r\nNETFXSDKDir=C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\\r\nNUMBER_OF_PROCESSORS=4\r\nOS=Windows_NT\r\nPath=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\VCPackages;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\3.1;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\Roslyn;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Performance Tools\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Performance Tools;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\;C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\\\MSBuild\\15.0\\bin;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\CMake\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Users\\...\\AppData\\Roaming\\local\\bin;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\...\\.dotnet\\tools;C:\\Program Files\\nuget;C:\\Users\\...\\AppData\\Roaming\\npm;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps\r\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\r\nPlatform=x64\r\nPROCESSOR_ARCHITECTURE=AMD64\r\nPROCESSOR_IDENTIFIER=Intel64 Family 6 Model 69 Stepping 1, GenuineIntel\r\nPROCESSOR_LEVEL=6\r\nPROCESSOR_REVISION=4501\r\nProgramData=C:\\ProgramData\r\nProgramFiles=C:\\Program Files\r\nProgramFiles(x86)=C:\\Program Files (x86)\r\nProgramW6432=C:\\Program Files\r\nPROMPT=$P$G\r\nPSModulePath=C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\nPUBLIC=C:\\Users\\Public\r\nSESSIONNAME=Console\r\nSystemDrive=C:\r\nSystemRoot=C:\\WINDOWS\r\nSYSTEMTYPE=slate\r\nTEMP=C:\\Users\\...\\AppData\\Local\\Temp\r\nTMP=C:\\Users\\...\\AppData\\Local\\Temp\r\nUniversalCRTSdkDir=C:\\Program Files (x86)\\Windows Kits\\10\\\r\nUSERNAME=...\r\nUSERPROFILE=C:\\Users\\...\r\nVCIDEInstallDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\\r\nVCINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\\r\nVCToolsInstallDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\\r\nVCToolsRedistDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Redist\\MSVC\\14.16.27012\\\r\nVCToolsVersion=14.16.27023\r\nVisualStudioVersion=15.0\r\nVS150COMNTOOLS=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\\r\nVSCMD_ARG_app_plat=Desktop\r\nVSCMD_ARG_HOST_ARCH=x64\r\nVSCMD_ARG_TGT_ARCH=x64\r\nVSCMD_VER=15.9.3\r\nVSINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\\r\nwindir=C:\\WINDOWS\r\nWindowsLibPath=References\\CommonConfiguration\\Neutral\r\nWindowsSDKLibVersion=winv6.3\\\r\nWindowsSDKVersion=\\\r\nWindowsSDK_ExecutablePath_x64=C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\\r\nWindowsSDK_ExecutablePath_x86=C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\\r\n__DOTNET_ADD_64BIT=1\r\n__DOTNET_PREFERRED_BITNESS=64\r\n__VSCMD_PREINIT_PATH=C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\CMake\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Users\\...\\AppData\\Roaming\\local\\bin;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\...\\.dotnet\\tools;C:\\Program Files\\nuget;C:\\Users\\...\\AppData\\Roaming\\npm;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps\r\n```\r\n(Note that I masked out my username)","Url":"https://github.com/dotnet/corert/issues/6885","RelatedDescription":"Closed issue \"Cannot open input file 'kernel32.lib'\" (#6885)"},{"Id":"402774927","IsPullRequest":false,"CreatedAt":"2019-01-24T16:00:35","Actor":"letmaik","Number":"6884","RawContent":null,"Title":"Update console build instructions","State":"closed","Body":"https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built\r\n\r\nThe extra lines in the project template are described with \"Important: A few lines at the top and at the bottom are different from the default template - don't miss updating them!\". However, this seems to be outdates as none of the samples have them. E.g. https://github.com/dotnet/corert/blob/master/samples/HelloWorld/HelloWorld.csproj","Url":"https://github.com/dotnet/corert/issues/6884","RelatedDescription":"Closed issue \"Update console build instructions\" (#6884)"},{"Id":"402759347","IsPullRequest":true,"CreatedAt":"2019-01-24T15:26:00","Actor":"MichalStrehovsky","Number":"6883","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6883","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6883)"},{"Id":"402745564","IsPullRequest":true,"CreatedAt":"2019-01-24T15:25:01","Actor":"MichalStrehovsky","Number":"6882","RawContent":null,"Title":"Fix UWP VirtualAlloc import","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6882","RelatedDescription":"Closed or merged PR \"Fix UWP VirtualAlloc import\" (#6882)"},{"Id":"402723474","IsPullRequest":true,"CreatedAt":"2019-01-24T14:47:55","Actor":"MichalStrehovsky","Number":"6881","RawContent":null,"Title":"Make _reader not readonly","State":"closed","Body":"I was too eager on adding `readonly` in #6863. This breaks the desired semantics.","Url":"https://github.com/dotnet/corert/pull/6881","RelatedDescription":"Closed or merged PR \"Make _reader not readonly\" (#6881)"},{"Id":"402709942","IsPullRequest":true,"CreatedAt":"2019-01-24T13:36:05","Actor":"filipnavara","Number":"6880","RawContent":null,"Title":"WIP: Move portable thread pool implementation to shared partition","State":"open","Body":"@marek-safar This introduces ThreadPool implementation with the FeaturePortableThreadPool flag into the shared partition. It should be possible to use it as-is in Mono, but I didn't try to build it yet.","Url":"https://github.com/dotnet/corert/pull/6880","RelatedDescription":"Open PR \"WIP: Move portable thread pool implementation to shared partition\" (#6880)"},{"Id":"402524591","IsPullRequest":true,"CreatedAt":"2019-01-24T13:20:35","Actor":"Dotnet-GitSync-Bot","Number":"6876","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub","Url":"https://github.com/dotnet/corert/pull/6876","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6876)"},{"Id":"402689072","IsPullRequest":true,"CreatedAt":"2019-01-24T13:19:53","Actor":"MichalStrehovsky","Number":"6878","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"Pull request #6862 added references to `EnableToETW` that doesn't exist. I guess this is a NOP?","Url":"https://github.com/dotnet/corert/pull/6878","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#6878)"},{"Id":"402542711","IsPullRequest":true,"CreatedAt":"2019-01-24T13:19:31","Actor":"filipnavara","Number":"6877","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":" #6876 + build fix","Url":"https://github.com/dotnet/corert/pull/6877","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6877)"},{"Id":"402467443","IsPullRequest":true,"CreatedAt":"2019-01-24T06:18:48","Actor":"marek-safar","Number":"6875","RawContent":null,"Title":"Move IOCompletionCallback to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6875","RelatedDescription":"Closed or merged PR \"Move IOCompletionCallback to shared partition\" (#6875)"},{"Id":"402427356","IsPullRequest":true,"CreatedAt":"2019-01-24T03:16:52","Actor":"Dotnet-GitSync-Bot","Number":"6873","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/6873","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6873)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"403387485","IsPullRequest":true,"CreatedAt":"2019-01-26T03:38:39","Actor":"peterhuene","Number":"2874","RawContent":null,"Title":"Add test for ComposeStore target for netcoreapp3.0.","State":"closed","Body":"This PR adds a test to cover using the `ComposeStore` target from a\r\nproject targeting `netcoreapp3.0`.\r\n\r\nThe test is intended to replicate similar tests we have in `dotnet/cli`\r\nso that we can catch regression of the `dotnet store` command in the SDK\r\nrepo.\r\n\r\nThe test ensures `ComposeStore` will work when targeting `netcoreapp3.0`\r\nand that the underlying issue (a reference to `Microsoft.NETCore.App`\r\nbeing added without a version) is checked for.","Url":"https://github.com/dotnet/sdk/pull/2874","RelatedDescription":"Closed or merged PR \"Add test for ComposeStore target for netcoreapp3.0.\" (#2874)"},{"Id":"403377692","IsPullRequest":true,"CreatedAt":"2019-01-26T00:01:24","Actor":"dotnet-bot","Number":"2873","RawContent":null,"Title":"Merge release/2.1.4xx to release/2.1.5xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2873","RelatedDescription":"Open PR \"Merge release/2.1.4xx to release/2.1.5xx\" (#2873)"},{"Id":"403036161","IsPullRequest":true,"CreatedAt":"2019-01-25T22:34:19","Actor":"wli3","Number":"2870","RawContent":null,"Title":"WIP proposed fix for missing shims","State":"closed","Body":"If this route is good. Add shim filed to ResolveFrameworkReferences.\r\n\r\nPending. remove cache from resolve package. and shim related code","Url":"https://github.com/dotnet/sdk/pull/2870","RelatedDescription":"Closed or merged PR \"WIP proposed fix for missing shims\" (#2870)"},{"Id":"402899283","IsPullRequest":true,"CreatedAt":"2019-01-25T18:32:00","Actor":"peterhuene","Number":"2860","RawContent":null,"Title":"Fix _RestoreCrossgen target dependency.","State":"closed","Body":"The `_RestoreCrossgen` target depends on a package reference to\r\n`Microsoft.NETCore.App` to be present.  However, for `netcoreapp3`\r\ntargeted applications, this requires the `ResolveFrameworkReferences`\r\ntarget to execute.\r\n\r\nThis commit adds a target dependency from `_RestoreCrossgen` to\r\n`ResolveFrameworkReferences` so that the package references are\r\npopulated when coming from a framework reference.\r\n\r\nFixes the CLI tests around `dotnet store` that invoke the crossgen\r\ntargets.","Url":"https://github.com/dotnet/sdk/pull/2860","RelatedDescription":"Closed or merged PR \"Fix _RestoreCrossgen target dependency.\" (#2860)"},{"Id":"402909653","IsPullRequest":true,"CreatedAt":"2019-01-25T17:10:27","Actor":"johnbeisner","Number":"2866","RawContent":null,"Title":"Update PerfGroovy - release/2.1.4xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2866","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.4xx\" (#2866)"},{"Id":"403237287","IsPullRequest":true,"CreatedAt":"2019-01-25T16:52:30","Actor":"mmitche","Number":"2872","RawContent":null,"Title":"Reclassify signtool dependency","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2872","RelatedDescription":"Closed or merged PR \"Reclassify signtool dependency\" (#2872)"},{"Id":"403163675","IsPullRequest":false,"CreatedAt":"2019-01-25T13:46:22","Actor":"marcelopinheiro-bpp","Number":"2871","RawContent":null,"Title":"Problems to load project because of  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.NETFramework.targets","State":"open","Body":"When loading a Project inside my solution, I  was receiving errors of files not found in the \"ImportAfter\" Directory (C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.Targets\\ImportAfter).\r\n\r\nSo I added manually the files \r\n* Microsoft.NET.Build.Extensions.targets\r\n* Microsoft.NET.DefaultPackageConflictOverrides.targets\r\n* Microsoft.NET.Build.Extensions.NETFramework.targets\r\n* Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n\r\nBecause they didn't came together the Visual Studio Community installation.\r\n\r\nAfter that, a received this error (The error is in PT-BR):\r\n```\r\nHouve uma tentativa de comparação numérica em \"$(_TargetFrameworkVersionWithoutV)\", que é avaliada como \"\" em vez de um número, na condição \"'$(ImplicitlyExpandNETStandardFacades)' == '' AND '$(_TargetFrameworkVersionWithoutV)' >= '4.6.1'\".  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.NETFramework.targets\r\n```\r\n\r\nI don't know what to modify or what to do now. Thanks for the attention\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2871","RelatedDescription":"Open issue \"Problems to load project because of  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.NETFramework.targets\" (#2871)"},{"Id":"403026343","IsPullRequest":false,"CreatedAt":"2019-01-25T06:44:09","Actor":"roozbehid","Number":"2869","RawContent":null,"Title":"PackageReference and local mscorlib.dll cause problem!","State":"open","Body":"Following project file\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n    \r\n      <PropertyGroup>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>net461</TargetFramework>\r\n      </PropertyGroup>\r\n    \r\n      <ItemGroup>\r\n        <PackageReference Include=\"Microsoft.Build\" Version=\"15.3.409\" />\r\n      </ItemGroup>\r\n    \r\n    </Project>\r\n\r\nin the same folder add -empty or valid - mscorlib.dll file.\r\nThen ResolveAssemblyReference would want to use it and will cause problems.\r\n\r\nI experienced with some attributes to include it but none worked, like those referenced in https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2017\r\n\r\nFor example following feels like from docs should work, but it doesnt! (same with `<Content Include`)\r\n\r\n      <ItemGroup>\r\n        <Content Update=\"mscorlib.dll\">\r\n          <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n          <IsAssembly>False</IsAssembly>\r\n          <PublishState>DataFile</PublishState>\r\n        </Content>\r\n      </ItemGroup>\r\n\r\nUsing TargetFramework of `netcoreapp2.0` will work though!\r\n\r\nError is either a crash in ResolveAssemblyReference or problem with referencing two mscorlib.dll files!","Url":"https://github.com/dotnet/sdk/issues/2869","RelatedDescription":"Open issue \"PackageReference and local mscorlib.dll cause problem!\" (#2869)"},{"Id":"402963538","IsPullRequest":true,"CreatedAt":"2019-01-25T01:10:32","Actor":"cdmihai","Number":"2868","RawContent":null,"Title":"[WIP] Fix transitive references","State":"open","Body":"Fixes #2855\r\n","Url":"https://github.com/dotnet/sdk/pull/2868","RelatedDescription":"Open PR \"[WIP] Fix transitive references\" (#2868)"},{"Id":"402956582","IsPullRequest":false,"CreatedAt":"2019-01-25T00:37:00","Actor":"natemcmaster","Number":"2867","RawContent":null,"Title":"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065","State":"open","Body":"**Repro**\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackAsToolShimRuntimeIdentifiers>win-x64;win-x86</PackAsToolShimRuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet pack`\r\n\r\n**Result**\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\3.0.100-preview-010166\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(228,5): error NETSDK1065: Cannot find app host for win-x64. win-x64 could be an invalid runtime identifier (RID). For more information about RID, see https://aka.ms/rid-catalog. [C:\\src\\aspnet\\BuildTools\\repro\\CliTool\\CliTool.csproj]\r\n```\r\n\r\n**Details**\r\n\r\nUsing 3.0.100-preview-010166\r\n\r\ncc @nguerrera @wli3 ","Url":"https://github.com/dotnet/sdk/issues/2867","RelatedDescription":"Open issue \"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065\" (#2867)"},{"Id":"402909592","IsPullRequest":true,"CreatedAt":"2019-01-25T00:08:22","Actor":"johnbeisner","Number":"2861","RawContent":null,"Title":"Update PerfGroovy - master","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2861","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - master\" (#2861)"},{"Id":"402909604","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:29","Actor":"johnbeisner","Number":"2862","RawContent":null,"Title":"Update PerfGroovy - release/2.2.2xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2862","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.2.2xx\" (#2862)"},{"Id":"402909622","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:25","Actor":"johnbeisner","Number":"2863","RawContent":null,"Title":"Update PerfGroovy - release/2.2.1xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2863","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.2.1xx\" (#2863)"},{"Id":"402909629","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:21","Actor":"johnbeisner","Number":"2864","RawContent":null,"Title":"Update PerfGroovy - release/2.1.6xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2864","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.6xx\" (#2864)"},{"Id":"402909644","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:16","Actor":"johnbeisner","Number":"2865","RawContent":null,"Title":"Update PerfGroovy - release/2.1.5xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2865","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.5xx\" (#2865)"},{"Id":"401967744","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:51","Actor":"NikolaMilosavljevic","Number":"2857","RawContent":null,"Title":"Update .NET Framework Reference Assemblies version to 1.0.0-alpha-5","State":"closed","Body":"Update version of .NET Framework reference assemblies package, to latest.","Url":"https://github.com/dotnet/sdk/pull/2857","RelatedDescription":"Closed or merged PR \"Update .NET Framework Reference Assemblies version to 1.0.0-alpha-5\" (#2857)"},{"Id":"402697342","IsPullRequest":true,"CreatedAt":"2019-01-24T14:29:28","Actor":"dotnet-maestro[bot]","Number":"2859","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2859","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2859)"},{"Id":"402080266","IsPullRequest":true,"CreatedAt":"2019-01-23T17:24:55","Actor":"dotnet-maestro[bot]","Number":"2858","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19072.5\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2858","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2858)"},{"Id":"401538714","IsPullRequest":true,"CreatedAt":"2019-01-22T23:39:28","Actor":"drewnoakes","Number":"2853","RawContent":null,"Title":"Don't set MSBuildAllProjects for MSBuild 16.0+","State":"closed","Body":"Microsoft/msbuild#1299 discusses a change whereby MSBuild prepends the newest project file path to `MSBuildAllProjects` automatically. Therefore, so long as consumers of this property only use this property for up-to-date checks, it's possible to reduce both the size of this property and corresponding allocations.\r\n\r\nThis reduction applies equally to consumers, such as for the case discussed in dotnet/project-system#3744.\r\n\r\nFor backwards compatibility the property is still set for MSBuild versions prior to 16.0.\r\n\r\nSee also Microsoft/msbuild#3605.\r\n\r\n//cc: @jeffkl @rainersigwald @davkean ","Url":"https://github.com/dotnet/sdk/pull/2853","RelatedDescription":"Closed or merged PR \"Don't set MSBuildAllProjects for MSBuild 16.0+\" (#2853)"},{"Id":"401951079","IsPullRequest":true,"CreatedAt":"2019-01-22T22:41:28","Actor":"peterhuene","Number":"2856","RawContent":null,"Title":"Fix ArgumentNullException in ResolveFrameworkReferences.","State":"closed","Body":"When a `netcoreapp3.0` executable project references a `netcoreapp3.0`\r\nlibrary project, and `SelfContained` is globally true, then an\r\n`ArgumentNullException` occurs in the `ResolveFrameworkReferences` task.\r\n\r\nThis can happen when publishing with the following command:\r\n\r\n```\r\ndotnet publish -f netcoreapp3.0 -r win-x86 --self-contained\r\n```\r\n\r\nWhen `SelfContained` is `true` for the class library project reference,\r\nthe task does not take into account that `RuntimeIdentifier` might be\r\nnull since it gets filtered out from the reference.\r\n\r\nAdditionally, some cleanup was needed relating to\r\n`GetBestRuntimeIdentifier`.\r\n\r\nFixes #2851.","Url":"https://github.com/dotnet/sdk/pull/2856","RelatedDescription":"Closed or merged PR \"Fix ArgumentNullException in ResolveFrameworkReferences.\" (#2856)"},{"Id":"401311605","IsPullRequest":false,"CreatedAt":"2019-01-22T22:41:28","Actor":"0xd4d","Number":"2851","RawContent":null,"Title":"Publish self contained app with RIDs that refs a classlib without RIDs results in ArgumentNullException in ResolveFrameworkReferences","State":"closed","Body":"Version: Latest build of .NET Core SDK (3.0.100-preview-010137)\r\n\r\nIf you have an app with RIDs in the csproj file that references a class library with no RIDs in its csproj file, and you publish a self contained .NET Core 3.0 app, the build fails with an ArgumentNullException in ResolveFrameworkReferences.\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L132 calls `GetBestRuntimeIdentifier()` but this method assumes `AppHostRuntimeIdentifier` isn't `null`.\r\n\r\nStack trace:\r\n\r\n```\r\nThe \"ResolveFrameworkReferences\" task failed unexpectedly.\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: key\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\r\n   at System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(TKey key)\r\n   at Microsoft.NET.Build.Tasks.NuGetUtils.GetBestMatchingRid(RuntimeGraph runtimeGraph, String runtimeIdentifier, IEnumerable`1 availableRuntimeIdentifiers, Boolean& wasInGraph) in /_/src/Tasks/Microsoft.NET.Build.Tasks/NuGetUtils.NuGet.cs:line 86\r\n   at Microsoft.NET.Build.Tasks.ResolveFrameworkReferences.GetBestRuntimeIdentifier(String targetRuntimeIdentifier, String availableRuntimeIdentifiers, Boolean& wasInGraph) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs:line 267\r\n   at Microsoft.NET.Build.Tasks.ResolveFrameworkReferences.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs:line 134\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n```\r\n\r\nRepro:\r\n\r\n- Clone https://github.com/0xd4d/ResolveFrameworkReferences_issue\r\n- Use latest daily build of .NET Core SDK\r\n- dotnet publish -c Release -f netcoreapp3.0 -r win-x86 --self-contained\r\n","Url":"https://github.com/dotnet/sdk/issues/2851","RelatedDescription":"Closed issue \"Publish self contained app with RIDs that refs a classlib without RIDs results in ArgumentNullException in ResolveFrameworkReferences\" (#2851)"},{"Id":"401895527","IsPullRequest":false,"CreatedAt":"2019-01-22T18:28:29","Actor":"cdmihai","Number":"2855","RawContent":null,"Title":"Cannot build with DisableTransitiveProjectReferences=true","State":"open","Body":"Given a graph with projects that do not have compile time dependencies on the transitive projects, it should be able to build the graph without injecting transitive project references into each project.\r\n\r\nRepro:\r\n[new-xtarget-3.zip](https://github.com/dotnet/sdk/files/2784102/new-xtarget-3.zip)\r\nThe zip has a graph like 1->2->3. Running with `DisableTransitiveProjectReferences=true` gives the following results:\r\n\r\n```\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (default target) (1) ->\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (Build target) (1:2) ->\r\n(GenerateBuildDependencyFile target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\2.2.200-preview-009748\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for 'E:\\projects\\MSB \r\nuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\3\\3.csproj'. This can indicate a missing project reference. [E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1 \r\n\\1.csproj]\r\n```\r\n\r\nFailing binlog: \r\n[failing.zip](https://github.com/dotnet/sdk/files/2784113/failing.zip)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2855","RelatedDescription":"Open issue \"Cannot build with DisableTransitiveProjectReferences=true\" (#2855)"},{"Id":"401145954","IsPullRequest":true,"CreatedAt":"2019-01-22T17:37:23","Actor":"nguerrera","Number":"2850","RawContent":null,"Title":"Fix failure when using evaluation API to evaluate multi-targeted projects","State":"closed","Body":"Follow nearby pattern to guard against undefined _TargetFrameworkVersionWithoutV","Url":"https://github.com/dotnet/sdk/pull/2850","RelatedDescription":"Closed or merged PR \"Fix failure when using evaluation API to evaluate multi-targeted projects\" (#2850)"},{"Id":"401764141","IsPullRequest":false,"CreatedAt":"2019-01-22T13:27:34","Actor":"m0sa","Number":"2854","RawContent":null,"Title":"Make multi-targeting constants local properties","State":"open","Body":"The `DefineConstants` properties for multi targeting builds are a bit confusing, since they are global and not local. This means that if there is a custom `-p:DefineConstants=WHATEVER` on the command line, the multi targeting constants won't get added.\r\n\r\nWhat I'm asking here is to add a `TreatAsLocalProperty=\"DefineConstants\"` to Microsoft.NET.Sdk.CSharp.targets, (and possibly other .target / .props files where `DefineConstants` gets updated), so that it works consistently when the consuming build modifies it via a PropertyGroup as well as via command line args.\r\n\r\n---\r\n\r\nLet me elaborate. We have an old non-SDK style solution that we are gradually refactoring into AspNetCore and SDK-style. We were confronted with the build on the CI server failing miserably, because the target framework constants weren't defined during the build (e.g. `#if NET462` and `#if NETCOREAPP2_2` were not working as expected). Turned out that we had some build configurations passing in a custom `DefineConstants` property. As this property [is global](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties?view=vs-2017#global-properties), [this line Microsoft.NET.Sdk.CSharp.targets](https://github.com/dotnet/sdk/blob/006bb6ddaf2a3997ddd25f000fae968e9233fe93/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.targets#L35) does not work like a *non-msbuild expert would* would expect from reading it. It took us multiple days of digging through MSBuildBinLog, and collective WTFing, to finally figure out what's going on. Ironically, we did skim over the SDK.CSharp.targets, as it was seemingly not doing what it was supposed to do, but it looked OK at first glance.\r\n\r\nAdding to the confusion was the fact that if you add a custom `<PropertyGroup><DefineConstants>WHATEVER</DefineConstants></PropertyGroup>`, it gets concatenated, and not overridden.\r\n\r\nIdeally, it would behave the same way (concatenate the existing  value) when it gets passed in via the command line arg.\r\n","Url":"https://github.com/dotnet/sdk/issues/2854","RelatedDescription":"Open issue \"Make multi-targeting constants local properties\" (#2854)"},{"Id":"401344480","IsPullRequest":true,"CreatedAt":"2019-01-21T14:14:36","Actor":"dotnet-maestro[bot]","Number":"2852","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2852","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2852)"},{"Id":"401095847","IsPullRequest":true,"CreatedAt":"2019-01-20T14:14:19","Actor":"dotnet-maestro[bot]","Number":"2849","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2849","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2849)"},{"Id":"401047377","IsPullRequest":true,"CreatedAt":"2019-01-20T02:00:07","Actor":"dotnet-bot","Number":"2848","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2848","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2848)"},{"Id":"400993880","IsPullRequest":true,"CreatedAt":"2019-01-19T14:29:23","Actor":"dotnet-maestro[bot]","Number":"2847","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19068.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2847","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2847)"},{"Id":"400910097","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:22","Actor":"nugetlurker","Number":"2846","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.1.6xx","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2846","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.1.6xx\" (#2846)"},{"Id":"400910086","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:19","Actor":"nugetlurker","Number":"2845","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.2.2xx","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2845","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.2.2xx\" (#2845)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1088888461006782465","CreatedAt":"2019-01-25T19:56:54+00:00","UserScreenname":"dotnet","Text":"Debugging .NET Apps with Time Travel Debugging (TTD) by @fujiy https://t.co/VHwBMfDCSv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null},{"Id":"1088327156449476608","CreatedAt":"2019-01-24T06:46:28+00:00","UserScreenname":"dotnet","Text":"Come work for @amandaksilver. She’s a great boss and has an amazing team with lots of influence on the dev experien… https://t.co/LW30IafmZa","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":31,"FavoriteCount":8,"RawContent":null},{"Id":"1088226836696317952","CreatedAt":"2019-01-24T00:07:50+00:00","UserScreenname":"dotnet","Text":"Join Jeff and Allison tomorrow and learn about the AWESOME new tools in @VisualStudio https://t.co/GgR00dulgQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":2,"RawContent":null},{"Id":"1086041216355954688","CreatedAt":"2019-01-17T23:22:58+00:00","UserScreenname":"dotnet","Text":"We’re happy to read this sentiment about the broader #dotnet #CommunityStandup that @JamesMontemagno has created fo… https://t.co/VtBt7BRcPl","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":11,"RawContent":null},{"Id":"1085930999182020608","CreatedAt":"2019-01-17T16:05:00+00:00","UserScreenname":"dotnet","Text":"Excited about .NET Core and desktop apps? Please tell what kind of apps you plan on porting! https://t.co/x77TJp8odU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":37,"RawContent":null}]}},"RunOn":"2019-01-27T05:30:52.233802Z","RunDurationInMilliseconds":22095}