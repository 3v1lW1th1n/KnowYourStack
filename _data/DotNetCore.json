{"Data":{"Blog":{"FeedItems":[{"Title":"Are your Windows Forms and WPF applications ready for .NET Core 3.0?","PublishedOn":"2018-08-08T17:00:25+00:00","CommentsCount":78,"FacebookCount":0,"Summary":"Download Portability Analyzer (2.37 MB) At Build 2018 we announced that we are enabling Windows desktop applications (Windows Forms and Windows Presentation Framework (WPF)) with .NET Core 3.0. You...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/08/are-your-windows-forms-and-wpf-applications-ready-for-net-core-3-0/","RawContent":null},{"Title":"Announcing ML.NET 0.4","PublishedOn":"2018-08-07T21:23:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"A few months ago we released ML.NET 0.1 at //Build 2018., ML.NET is a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/07/announcing-ml-net-0-4/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-08-06T17:00:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/06/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Tiered Compilation Preview in .NET Core 2.1","PublishedOn":"2018-08-02T22:22:13+00:00","CommentsCount":23,"FacebookCount":0,"Summary":"If you are a fan of .NET performance there has been a lot great news lately such as Performance Improvements in .NET Core 2.1 and Announcing .NET Core 2.1, but we&#8217;ve got more. Tiered compilation...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/","RawContent":null},{"Title":".NET Framework July 2018 Update","PublishedOn":"2018-07-30T23:17:45+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Update: 8/03/2018 Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Today, we released the July 2018 Update that fixes an issue in .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/","RawContent":null},{"Title":"Announcing F# 4.5 Preview","PublishedOn":"2018-07-26T19:22:31+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We’re very excited to announce that we’ll be shipping a new language version of F# soon. The version will be F# 4.5. F# 4.5 has been developed entirely via an open RFC (requests for comments) process,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/26/announcing-f-4-5-preview/","RawContent":null},{"Title":"Advisory on July 2018 .NET Framework Updates","PublishedOn":"2018-07-21T00:55:00+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Update as of 8/03/2018: Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Update as of 7/30/2018: A new .NET Framework July 2018 Update...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3632","PublishedOn":"2018-07-19T00:30:16+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"We released the first Early Access build for the .NET Framework 4.8 last month (June-2018) and are happy to announce the next build (3632) for your feedback. This is one of the in-development builds...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/","RawContent":null},{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8075734624","Type":"IssuesEvent","CreatedAt":"2018-08-07T07:06:40","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8098941971","Type":"IssuesEvent","CreatedAt":"2018-08-11T01:05:59","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Opened issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80) at dotnet/announcements","RelatedBody":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. The packages will be included in [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n"},{"Id":"8075229337","Type":"IssuesEvent","CreatedAt":"2018-08-07T04:18:02","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Opened issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78) at dotnet/announcements","RelatedBody":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)"},{"Id":"8025565746","Type":"IssuesEvent","CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Opened issue \"https://dot.net now using TLS 1.2-only\" (#77) at dotnet/announcements","RelatedBody":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689"},{"Id":"7999286881","Type":"IssuesEvent","CreatedAt":"2018-07-21T22:29:06","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Opened issue \"July 2018 .NET Updates\" (#76) at dotnet/announcements","RelatedBody":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Documents\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n"},{"Id":"7997769217","Type":"IssuesEvent","CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Opened issue \"Advisory on July 2018 .NET Framework Updates\" (#74) at dotnet/announcements","RelatedBody":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of applications that fail to start or don't run correctly after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\nDiscussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Workaround\r\n\r\nTemporarily uninstall the [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) to restore functionality until a new update has been released to correct this problem. \r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object\r\n"},{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8099073759","Type":"PullRequestEvent","CreatedAt":"2018-08-11T03:00:44","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19434","RelatedDescription":"Merged pull request \"Disable R2RDumpTest for JIT stress modes\" (#19434) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8099179994","Type":"PullRequestEvent","CreatedAt":"2018-08-11T04:45:23","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9798","RelatedDescription":"Merged pull request \"Fix build warnings and treat msbuild warnings as errors\" (#9798) at dotnet/cli","RelatedBody":"We were getting the warning that we set BaseIntermediateOutputPath to late because in this special case, we did it after SDK props and not via Directory.Build.props.\r\n\r\nAlso, preventing more warnings like this from creeping in by treating MSBuild warnings as errors, same as compiler warnings."},{"Id":"8099115961","Type":"IssuesEvent","CreatedAt":"2018-08-11T03:41:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9816","RelatedDescription":"Closed issue \"dotnet new returns exit code 0 when an invalid framework is specified.\" (#9816) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Execute `dotnet new console --framework invalid-framework`\r\n1. Execute `echo $?`\r\n\r\n## Expected  behavior\r\nI was expecting `dotnet new` to return a non-zero exit code when specifying an invalid framework.  The output that is displayed indicates it is an error condition. \r\n\r\n## Actual behavior\r\n`dotnet new` returns 0 as the exit code.\r\n\r\n```\r\nroot@3e1e7a71e10c:/app# dotnet new console --framework invalid-framework\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nConsole Application (C#)\r\nAuthor: Microsoft\r\nDescription: A project for creating a command-line application that can run on .NET Core on Windows, Linux and macOS\r\nError: Invalid parameter(s):\r\n--framework invalid-framework\r\n    'invalid-framework' is not a valid value for --framework (Framework).\r\n\r\nOptions:\r\n  --no-restore  If specified, skips the automatic restore of the project on create.\r\n                bool - Optional\r\n                Default: false / (*) true\r\n\r\n\r\n* Indicates the value used if the switch is provided without a value.\r\nroot@3e1e7a71e10c:/app# echo $?\r\n0\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.302/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.302 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8098890035","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:29:18","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9820","RelatedDescription":"Opened pull request \"Adding the 2.1.3 runtime blob feed as a feed for the CLI\" (#9820) at dotnet/cli","RelatedBody":"This unblocks the prodcon build for 2.1.4\r\n"},{"Id":"8098862079","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:12:28","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9815","RelatedDescription":"Merged pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#9815) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8098744381","Type":"PullRequestEvent","CreatedAt":"2018-08-10T23:13:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9819","RelatedDescription":"Opened pull request \"Add restore passthrough \" (#9819) at dotnet/cli","RelatedBody":"Allow disable-parallel, no-cache, ignore-failed-sources to pass through dotnet tool install\r\n\r\nAnd refactor –-configfile to use the new way handling pass through.\r\nOnly few restore option make sense to dotnet tool install. So we need to handle it case by case. And it requires much more code than just pass the rest as string. And option like -–source is not directly pass through, since tool install will make it “additional” and also pass it via xml. Only disable-parallel, no-cache, ignore-failed-sources, configfile have no difference between restore and tool install.\r\nI test it by make sure PackageLocation can get correct option from parse result and when feed argument generator’s result back to restore parser. Verify it can be understand by restore parser. We could further abstract the idea of pass through (less code). But so far only these 4 options are qualified to this concept.\r\n"},{"Id":"8098635389","Type":"IssuesEvent","CreatedAt":"2018-08-10T22:30:27","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9818","RelatedDescription":"Opened issue \"Add more logging to msbuild sdk resolver\" (#9818) at dotnet/cli","RelatedBody":"  - [ ] Adapt error messages to global.json / non-global.json cases\r\n  - [ ] Log dotnet.exe path\r\n  - [ ] Log global.json path\r\n  - [ ] Log hostfxr calls, results, error codes\r\n  - [ ] Log fallback\r\n  - [ ] Log any and all environment overrides\r\n  - [ ] Log VS settings path and all reads of VS settings file\r\n  - [ ] Check that there is no perf degradation from this low importance logging in case where verbosity < diag\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8098418343","Type":"IssuesEvent","CreatedAt":"2018-08-10T21:23:25","Actor":"dseefeld","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9817","RelatedDescription":"Opened issue \"Network build failures in 'prodcon/cli/release/2.1.4xx/' - '20180809.01'\" (#9817) at dotnet/cli","RelatedBody":"@dotnet-mc-bot commented on [Thu Aug 09 2018](https://github.com/dotnet/core-eng/issues/4040)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1933292\r\n  - **Agent:** DDVSOLINUXAGE012\r\n  - **Error log:** [?1h=         Error 2147500037 (Exception from HRESULT: 0x80004005 (E_FAIL)) while compiling method BuildServerConnection.CreateMonitorDisconnectTask...\r\n\r\n@jcagme, @markwilkie\r\n\n\n---\n\n@dseefeld commented on [Fri Aug 10 2018](https://github.com/dotnet/core-eng/issues/4040#issuecomment-412210292)\n\nThis seems to be a product issue.  Moving to cli.\n\n"},{"Id":"8098311227","Type":"PullRequestEvent","CreatedAt":"2018-08-10T20:56:04","Actor":"KathleenDollard","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9596","RelatedDescription":"Closed pull request \"WIP: Dotnet help for review\" (#9596) at dotnet/cli","RelatedBody":"skip ci please\r\n\r\nThis PR is only for the purpose of reviewing help strings in the context where they appear to the user (they are a bit spread out in the code). Strings in the actual source code will be updated after this review, but it's really hard to review the strings in isolation. \r\n\r\n[Review help text # 5737](https://github.com/dotnet/cli/issues/5737)"},{"Id":"8098278212","Type":"IssuesEvent","CreatedAt":"2018-08-10T20:47:45","Actor":"MichaelSimons","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9816","RelatedDescription":"Opened issue \"dotnet new returns exit code 0 when an invalid framework is specified.\" (#9816) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Execute `dotnet new console --framework invalid-framework`\r\n1. Execute `echo $?`\r\n\r\n## Expected  behavior\r\nI was expecting `dotnet new` to return a non-zero exit code when specifying an invalid framework.  The output that is displayed indicates it is an error condition. \r\n\r\n## Actual behavior\r\n`dotnet new` returns 0 as the exit code.\r\n\r\n```\r\nroot@3e1e7a71e10c:/app# dotnet new console --framework invalid-framework\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nConsole Application (C#)\r\nAuthor: Microsoft\r\nDescription: A project for creating a command-line application that can run on .NET Core on Windows, Linux and macOS\r\nError: Invalid parameter(s):\r\n--framework invalid-framework\r\n    'invalid-framework' is not a valid value for --framework (Framework).\r\n\r\nOptions:\r\n  --no-restore  If specified, skips the automatic restore of the project on create.\r\n                bool - Optional\r\n                Default: false / (*) true\r\n\r\n\r\n* Indicates the value used if the switch is provided without a value.\r\nroot@3e1e7a71e10c:/app# echo $?\r\n0\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.302/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.302 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8097991655","Type":"IssuesEvent","CreatedAt":"2018-08-10T19:37:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/5152","RelatedDescription":"Closed issue \"Getting started with latest dotnet core using command line not clear\" (#5152) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Go to any intuitive landing page for dotnet core (ex. github.com/dotnet/cli, dot.net)\r\n2. Following available documentation for command line use on Windows\r\n3. Attempt to use dotnet cli (ex. `dotnet --help`)\r\n\r\n## Expected  behavior\r\nA command line centric setp of steps to install all necessary prerequisites and installation files (ex. chocolatey...) for the latest stable release of the dotnet cli and a working cli with the correct version reported after install. Ultimately I would like to or expect to be able to update both the cli tools and the .NET Core versions independently from eachother both from the command line. In this case I'm trying to get onto the newer .csproj based support so that I can begin writing .NET core projects that one have to be migrated from project.json.\r\n\r\n## Actual behavior\r\nA mixed command line, Visual Studio, and manual non command line centric installation steps followed by what seems to be non-current version of .NET CLI tools or .NET Core being used in the environment.\r\n\r\n### From dot.net\r\nThe latest [LTS SDK](https://www.microsoft.com/net/download/core#/lts) is reported to be **.NET Core 1.0.3 SDK** but the link downloadds a file called `dotnet-dev-win-x64.1.0.0-preview2-003156.exe`. The installer says it's installing .NET 1.0.3 but SDK 1.0.0 Preview 2.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1467146/21489474/0f78254a-cbb9-11e6-8a32-c1b7b077fd70.png)\r\n\r\nThe most [Current SDK](https://www.microsoft.com/net/download/core#/current) is reported to be **.NET Core 1.1 SDK** but the link downloads a file called `dotnet-dev-win-x64.1.0.0-preview2-1-003177.exe`. The installer mentions that is installing Core 1.1.0 but SDK 1.0.0 Preview 2.1.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1467146/21489458/edc7227a-cbb8-11e6-9561-0a9613fd6cd4.png)\r\n\r\n\r\n### From GitHub Readme.md on the default branch `rel\\1.0.0`\r\n\r\nThe latest version is reported to be *Preview 4* with no significant mention of the major.minor version number. A link in this section leads to a [set of downloads](https://github.com/dotnet/core/blob/master/release-notes/preview4-download.md) which for Windows downloads and installer file named `dotnet-dev-win-x64.1.0.0-preview4-004233.exe`. The installer says it is installing .NET Core 1.0.1 and SDK Preview 4. Again no mention of the SDK major or minor version and unintuitively it seems that we are back on .NET Core 1.0.1 instead of moving forward with .NET Core 1.1.0 as would be expected from prior SDK Preview 2.1.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1467146/21489487/360cecfe-cbb9-11e6-8182-e31f5333b01f.png)\r\n\r\nLater in the [Installers and Binaries](https://github.com/dotnet/cli#installers-and-binaries) section it points to what appears to be a latest development build which downloads a file called `dotnet-dev-win-x64.latest.exe`. Installer still shows that is installing .NET Core 1.0.1 and SDK Preview 5. \r\n\r\n![image](https://cloud.githubusercontent.com/assets/1467146/21489518/843c6954-cbb9-11e6-847f-ec7a832db16c.png)\r\n\r\n\r\n### From [.NET Core installation guide](https://www.microsoft.com/net/core#windowsvs2015) for VS 2015 users.\r\n\r\nThe guide suggests downloading \".NET Core 1.0.1 tools Preview 2\" which links to a file called `DotNetCore.1.0.1-VS2015Tools.Preview2.0.3.exe`. The installer says it will install .NET Core 1.0.1 and VS 2015 Tooling Preview 2. Is \"Tooling\" supposed to be the same as SDK Preview 2?\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1467146/21489589/70a8137e-cbba-11e6-8553-852a4f7d2201.png)\r\n\r\n### From the [.NET Core installation guide](https://www.microsoft.com/net/core#windowscmd) for Command line / other\r\n\r\nThe guide suggests downloading \".NET Core 1.1 SDK\" and links to the same file as the \"Current\" release noted above `dotnet-dev-win-x64.1.0.0-preview2-1-003177.exe`.\r\n\r\n## Environment data\r\n`dotnet --info` output after installing `DotNetCore.1.0.1-VS2015Tools.Preview2.0.3.exe`, `dotnet-dev-win-x64.1.0.0-preview2-1-003177.exe`, and `dotnet-dev-win-x64.1.0.0-preview4-004233.exe`:\r\n\r\n```\r\n.NET Command Line Tools (1.0.0-preview3-004056)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview3-004056\r\n Commit SHA-1 hash:  ccc4968bc3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x86\r\n```\r\n\r\nPossibly related:\r\n\r\n* https://github.com/dotnet/cli/issues/5009\r\n* https://github.com/dotnet/cli/issues/5046\r\n* https://github.com/dotnet/cli/issues/1693"},{"Id":"8097977844","Type":"IssuesEvent","CreatedAt":"2018-08-10T19:34:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/5091","RelatedDescription":"Closed issue \"Thoughts on the DOTNET command usage presentation.\" (#5091) at dotnet/cli","RelatedBody":"The presentation of usage information for the `dotnet` command, within the CLI, seems not to reflect its actual behaviour. There is ambiguity and confusion.\r\n\r\nFirstly, usage information for the command is displayed by both the `dotnet` and `dotnet --help`. The usages suggested are dfferent in each case. This is confusing.\r\n\r\nPerhaps usage information being displayed in the `--help` output should be the convention throughout the CLI. This way it will become second nature for devs to check the help page. Devs won't have to remember if they will find usage info in a command's outut or on a help page or worst or all spit accross both. If usage is **always and only** displayed on the help page it will be instinctual to check the help page, devs don't have to remember ideosyncracies of the CLI, just the conventon. So perhaps all usages of `dotnet` should collectively be displayed by `--help`\r\n\r\nSecondly, the `dotnet [common-options] [[options] path-to application]` usage seems to misrepresent the actual behaviour. It implies that `[common-options]` can be used in combiation with `[[options] path-to-application]` when in actual fact the behaviour seems to be that if a `common-option` is used the rest of the arguments are ignored. It's either or.\r\n\r\nSo perhaps there should be three usages presented on the help page? Progressing in sophistication...\r\n\r\n```\r\nUsage: dotnet [common-options]\r\nUsage: dotnet [options] <path-to-application>\r\nUsage: dotnet [host-options] [command] [arguments] [common-options]\r\n```\r\n\r\nHowever, this makes apparent the problem of lack of convention and confusion within options.\r\n\r\n`dotnet` lists `--version` as a `common-option`. `dotnet --help` lists `--version` as a `host-option`. `dotnet` doesn't list `--info`. `dotnet` also doesn't list `--diagnostics`, but used alone: `dotnet -d` seems to only print out `Telemetry is: Enabled` followed by the help page. Incidently `Telemetry is: Enabled` is easily lost in the noise of the help print out. If a dev wants help they should use `--help` otherwise it's just noise..... Then the `common-options` listed by `dotnet --help` are different to those listed by `dotnet`. `dotnet --help` lists `--verbose` as a `common-option`. So `common-options` are not common accross both of the usages presented. One question I have is: Is `--verbose` really a common option or is `--help` in fact the only real `common-option`?\r\n\r\nSo currently there seems to be real confusion.\r\n\r\nThen perhaps the options simply called `options` in the `dotnet` usage presentation could be given a more descriptive name. Perhaps `hosting-options`. `hosting-options` is potentially confusable with `host-options`. I can't think of any other alternatives at the moment.\r\n\r\nSo perhaps the help page could be something like:\r\n\r\n```\r\nUsage: dotnet [host-options] [common-options]\r\nUsage: dotnet [hosting-options] <path-to-application>\r\nUsage: dotnet [host-options] [command] [arguments] [common-options]\r\n\r\nHost options (passed before the command):\r\n  -d|--diagnostics      Enable diagnostic output\r\n  --info                Display .NET CLI Info\r\n\r\nHosting Options:\r\n  --fx-version <version>           Version of the installed Shared Framework to use to run the application.\r\n  --additionalprobingpath <path>   Path containing probing policy and assemblies to probe for.\r\n\r\nCommon options:\r\n  -v|--verbose          Enable verbose output\r\n  -h|--help             Show help\r\n\r\nCommands:\r\n  new           Initialize a basic .NET project\r\n  restore       Restore dependencies specified in the .NET project\r\n  build         Builds a .NET project\r\n  publish       Publishes a .NET project for deployment (including the runtime)\r\n  run           Compiles and immediately executes a .NET project\r\n  test          Runs unit tests using the test runner specified in the project\r\n  pack          Creates a NuGet package\r\n  migrate       Migrates a project.json based project to a msbuild based project\r\n\r\nProject modification commands:\r\n  add           Add items to the project\r\n  remove        Remove items from the project\r\n  list          List items in the project\r\n\r\nAdvanced Commands:\r\n  nuget         Provides additional NuGet commands\r\n  msbuild       msbuilds a project and all of its dependencies\r\n  vstest        Runs tests from the specified files\r\n```\r\n\r\nI've removed the CLI version from the top of the help output, I feel that all version info should be presented on the `--info` page. I have also removed the `--version` from `Host Options` as this seems redundant as `--info` could be a single place to present all version information.\r\n\r\nIf a single usage description could be presented which encapulates and represents the three usages I have proposed with eloquence then I feel that would be preferable. However it seems there are fundamentally three usages of `dotnet`\r\n\r\n1. `dotnet` alone with options.\r\n2. `dotnet` to host a portable app.\r\n3. `dotnet` to execute commands.\r\n\r\nPerhaps the usage could be encapsulated in just two usages:\r\n```\r\nUsage: dotnet [hosting-options] <path-to-application>\r\nUsage: dotnet [host-options] [command] [arguments] [common-options]\r\n```\r\n\r\nI guess you are probably already aware that there is a problem, but perhaps this helps to highlight it. What are your thoughts on this matter?\r\n\r\n\r\ncc @blackdwarf @shanselman \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8098209921","Type":"IssuesEvent","CreatedAt":"2018-08-10T20:30:58","Actor":"tmeindle","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/850","RelatedDescription":"Opened issue \"NetFx/Standard Library MultiTarget Net461\" (#850) at dotnet/standard","RelatedBody":"Hello,  not sure if this is the right place to report this but....\r\n\r\nI'm trying to migrate my libraries from plain .NET 4.6.1 framework libraries to .NET Standard 2.0 libraries that multitarget net 4.6.1\r\n<TargetFrameworks>netstandard2.0;net461</TargetFrameworks>\r\n\r\nWhen I include such a library in a plain old Net 4.6.1 console application, forms, or wpf app, I lose valuable line numbers and file names in stack trace but only for code points that are located in the multi-targeted library.\r\n\r\nChanging the debugging symbols from portable to full in the build options does not correct the issue. \r\n\r\nthe attached solution generates output like so: [StackTraces.zip](https://github.com/dotnet/standard/files/2279341/StackTraces.zip)\r\n\r\nNet 4.6.1 Target Stack Trace :\r\n   at NetFx461Library.Class1.ThrowsException() in C:\\StackTraces\\NetFx461Library\\Class1.cs:line 13\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\StackTraces\\ConsoleApp1\\Program.cs:line 15\r\n\r\nMulti Target Stack Trace :\r\n   at MultiTarget.Class1.ThrowsException()\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\StackTraces\\ConsoleApp1\\Program.cs:line 26\r\n\r\nAs you can see when the net 461 console app calls the multi target library (compiled as net461) the stack trace loses the file and line information: \"at MultiTarget.Class1.ThrowsException()\"  However, as expected, the line numbers are present in the library setup and compiled the old fashion way.\r\n\r\nBeen looking for a solution or some setting for a few days now with no avail.  Is this a bug or the intended behavior.\r\n\r\nThanks,\r\nTim Meindle\r\n\r\n\r\n\r\n\r\n"},{"Id":"8083412275","Type":"IssuesEvent","CreatedAt":"2018-08-08T11:46:07","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/849","RelatedDescription":"Opened issue \"Where does .net core search for certificates on linux platform\" (#849) at dotnet/standard","RelatedBody":"On Windows, for .NET Framework classes we can specify sslkeyrepository as *SYSTEM/*USER.On linux where does the .NET Core classes search for the certificates by default and what could be the values for sslkeyrepository."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8098995099","Type":"PullRequestEvent","CreatedAt":"2018-08-11T01:51:01","Actor":"joshfree","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31711","RelatedDescription":"Merged pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#31711) at dotnet/corefx","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @joshfree\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1."},{"Id":"8098949146","Type":"IssuesEvent","CreatedAt":"2018-08-11T01:11:35","Actor":"ajaybhargavb","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31713","RelatedDescription":"Opened issue \"Process.WaitForExit() doesn't always return when the process ends on linux\" (#31713) at dotnet/corefx","RelatedBody":"We're seeing some odd behavior in one of our Razor build server [tests](https://github.com/aspnet/Razor/blob/master/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildServerIntegrationTest.cs#L150-L168) when running on a linux machine in VSTS.\r\nThe test seems to hang at the WaitForExit call [here](https://github.com/aspnet/Razor/blob/master/src/Microsoft.AspNetCore.Razor.Tools/ShutdownCommand.cs#L64) even though the process has completed execution. The build server process seems to hang around as a `<defunct>` process.\r\n![image](https://user-images.githubusercontent.com/1579269/43986528-01720fca-9cc7-11e8-97d4-5d25eec6e79b.png)\r\n\r\nNote, the test actually starts `dotnet build` in a separate process which in turn starts the build server in another process.\r\n\r\nI haven't been able to successfully create a minimal repro yet but I thought it might be worth filing a bug given similar issues like https://github.com/dotnet/corefx/issues/31559 have already been filed.\r\n\r\nSdk version: 2.1.302"},{"Id":"8098923027","Type":"IssuesEvent","CreatedAt":"2018-08-11T00:52:02","Actor":"TimLovellSmith","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31712","RelatedDescription":"Opened issue \"Should I optimize code of managed Crc32Helper?\" (#31712) at dotnet/corefx","RelatedBody":"TLDR; basically I think there are a bunch of small tweaks to the code which could make this faster, along with the 'bigger' tweaks (risks) of using unsafe code, and really baking little-endian assumptions into the implementation, which I am thinking of doing a pull request for - high level QN: does it sound useful?\r\n\r\nI saw a thread today talking about System.Compression.Crc32Helper using relatively a lot of CPU. Idly I wondered how this could be possible, so I copied the code from this repo into a project, came up with a dumb synthetic benchmark where I did millions of CRC32 computation on an array of length 12 for a few seconds, and looked at what the VS 2017 profiler (for .net framework, AnyCPU, release mode) told me the line costs where.\r\n\r\nWhat I found was that the hottest line was the inner statement of the latter loop:\r\n\r\n```\r\n             for (int i = 0; i < endBytes; i++)\r\n            {\r\n                crc32 = s_crcTable_0[(crc32 ^ buffer[offset++]) & 0x000000FF] ^ (crc32 >> 8);\r\n            }\r\n```\r\n\r\nWhich for me was compiled (JITted?) as native code:\r\n\r\n```\r\n           for (int i = 0; i < endBytes; i++)\r\n00E108A8  cmp         dword ptr [ebp-14h],0  \r\n00E108AC  jle         00E108EF  \r\n00E108AE  mov         eax,dword ptr [ebp-28h]  \r\n00E108B1  mov         esi,dword ptr [eax+4]  \r\n            {\r\n                crc32 = s_crcTable_0[(crc32 ^ buffer[offset++]) & 0x000000FF] ^ (crc32 >> 8);\r\n00E108B4  mov         dword ptr [ebp-20h],edi  \r\n00E108B7  inc         edi  \r\n00E108B8  mov         eax,dword ptr ds:[03CE353Ch]  \r\n00E108BD  mov         edx,dword ptr [ebp-20h]  \r\n00E108C0  mov         ecx,dword ptr [ebp-28h]  \r\n00E108C3  cmp         edx,esi  \r\n00E108C5  jae         00E108FE  \r\n00E108C7  movzx       edx,byte ptr [ecx+edx+8]  \r\n00E108CC  xor         edx,ebx  \r\n00E108CE  and         edx,0FFh  \r\n00E108D4  cmp         edx,dword ptr [eax+4]  \r\n00E108D7  jae         00E108FE  \r\n00E108D9  mov         eax,dword ptr [eax+edx*4+8]  \r\n00E108DD  shr         ebx,8  \r\n00E108E0  xor         eax,ebx  \r\n00E108E2  mov         ebx,eax  \r\n            for (int i = 0; i < endBytes; i++)\r\n00E108E4  inc         dword ptr [ebp-1Ch]  \r\n00E108E7  mov         eax,dword ptr [ebp-1Ch]  \r\n00E108EA  cmp         eax,dword ptr [ebp-14h]  \r\n00E108ED  jl          00E108B4  \r\n            }\r\n```\r\n\r\nThe thing that jumped out at me first while looking at this was the 'jae' checks, which I guessed might be array bound checks! Using 'unsafe' should make this faster right? (maybe)\r\n\r\nSo I tried it out. I didn't notice an obviously significant change from that, but while trying to understand the disassembly further, I realized that the way 'slice by 8' was being implemented by JIT or whoever did the assembler here was not very optimal. It was literally reading 1 byte at a time from the array and zero extending, then xoring all the zero extended words, just to read (and XOR) all the asserted-as-little-endian bytes into the uint32 variable 'crc32?' I think no C or assembly programmer would do it that way...\r\n\r\n```                 {\r\n                        crc32 ^= unchecked((uint)(buffptr[offset] | buffptr[offset + 1] << 8 | buffptr[offset + 2] << 16 | buffptr[offset + 3] << 24));\r\n01AE0748  movzx       eax,byte ptr [ebx+esi]  \r\n01AE074C  movzx       edx,byte ptr [ebx+esi+1]  \r\n01AE0751  shl         edx,8  \r\n01AE0754  or          eax,edx  \r\n01AE0756  movzx       edx,byte ptr [ebx+esi+2]  \r\n01AE075B  shl         edx,10h  \r\n01AE075E  or          eax,edx  \r\n01AE0760  movzx       edx,byte ptr [ebx+esi+3]  \r\n01AE0765  shl         edx,18h  \r\n01AE0768  or          eax,edx  \r\n01AE076A  xor         edi,eax  \r\n```\r\n\r\nSo I switched that line out with `crc32 ^= ((uint*)buffptr)[offset / 4]'`\r\n\r\nand it came out with something that looked much more sensible to me, assuming I introduced no bug\r\n\r\n```\r\n00DA0748  mov         eax,edi  \r\n00DA074A  test        eax,eax  \r\n00DA074C  jns         00DA0751  \r\n00DA074E  add         eax,3  \r\n00DA0751  sar         eax,2  \r\n00DA0754  xor         esi,dword ptr [ebx+eax*4]  \r\n```\r\n\r\nthis seems to shave several percents off how many CPU samples I was spending on those particular lines, which were hot lines #2 and #3 for my scenario. And happily, these are the lines which are expected to be in the 'hot path' when processing nice big buffer inputs...\r\n\r\nThere was still some sorta 'crazy looking' inverse operations happening with multiplying and dividing (using right shift) by 4 or 8 to get array offsets which should be able to be canceled out by better manual assembly code... and the fact that both 'offset' and 'i' are getting incremented each time around the loop by 8 and 1 each, is a bit odd, you should only really need one loop counter....\r\n"},{"Id":"8098879761","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:22:30","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31711","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#31711) at dotnet/corefx","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @joshfree\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1."},{"Id":"8098876720","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:20:42","Actor":"joshfree","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31701","RelatedDescription":"Merged pull request \"Removing Fedora 26 and adding 28 as appropriate.\" (#31701) at dotnet/","RelatedBody":"Replace Fedora 26 (EOL) with Fedora 28 in CI\r\nhttps://github.com/dotnet/core-eng/issues/3992\r\n\r\nTest Infrastructure only change to make the /release/2.1 CI green again"},{"Id":"8098876720","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:20:42","Actor":"joshfree","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31701","RelatedDescription":"Merged pull request \"Removing Fedora 26 and adding 28 as appropriate.\" (#31701) at dotnet/","RelatedBody":"Replace Fedora 26 (EOL) with Fedora 28 in CI\r\nhttps://github.com/dotnet/core-eng/issues/3992\r\n\r\nTest Infrastructure only change to make the /release/2.1 CI green again"},{"Id":"8098851409","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:06:40","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31679","RelatedDescription":"Merged pull request \"Create Microsoft.IO.Redist\" (#31679) at dotnet/corefx","RelatedBody":"This change creates an assembly with core `System.IO` types under a different namespace (`Microsoft.IO.Redist`). This allows utilizing the new span based APIs and enumeration logic on .NET Framework.\r\n\r\nThis is to allow MSBuild to consume the new functionality, which has a dramatic impact on their workload. MSBuild has to support both .NET Framework (for VS) and .NET Core.\r\n\r\nWe're calling this `Microsoft.IO.Redist` as the commitment is to the MSBuild scenario. We're only doing the work to ensure the types they need are available.\r\n\r\nChanges are relatively trivial. I've:\r\n\r\n1. Included existing sources with `#ifdef`ed namespaces\r\n2. Added explicit `.AsSpan()` and `.ToString()` as the implicit conversion isn't available outside of Core\r\n3. Copied a very small set of code to adapt some missing functionality (`StringExtensions`)\r\n4. Copied string resources\r\n"},{"Id":"8098772947","Type":"PullRequestEvent","CreatedAt":"2018-08-10T23:27:17","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31710","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#31710) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"8098740282","Type":"PullRequestEvent","CreatedAt":"2018-08-10T23:12:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31710","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#31710) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8099108550","Type":"PullRequestEvent","CreatedAt":"2018-08-11T03:33:47","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28841","RelatedDescription":"Merged pull request \"Add a workaround for long pipe path names\" (#28841) at dotnet/roslyn","RelatedBody":"\r\n### Customer scenario\r\n\r\nSometimes, on MacOS, a build will cause the compiler server to never do any work, spinning forever in the background and consuming 100% CPU.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/24137\r\n\r\n### Workarounds, if any\r\n\r\nDisabling the compiler server works, but is not obvious and will slow down builds, that wouldn't hit this problem.\r\n\r\n### Risk\r\n\r\nThis change only affects builds on CoreCLR on MacOS and Linux systems. The code should only affect usage of VBCSCompiler, so will not affect build correctness, only performance.\r\n\r\n### Performance impact\r\n\r\nShould have no change for users not previously hitting this bug. For users who do, this change should be a perf improvement, as VBCSCompiler was previously wasting CPU time and now would be disabled.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThis is a non-deterministic property of how MacOS constructs its temp path, so the problem wasn't immediately apparent.\r\n\r\n### How was the bug found?\r\n\r\nUser reported\r\n"},{"Id":"8098789671","Type":"PullRequestEvent","CreatedAt":"2018-08-10T23:35:11","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29225","RelatedDescription":"Opened pull request \"Update default test options to C# 8.0\" (#29225) at dotnet/roslyn","RelatedBody":"The change starts with updating the meaning of `TestOptions.Regular` to mean LangVersion 8.\r\n\r\nThis caused a number of tests to fail. Here were the main fixes:\r\n- we should only synthesize the `NullableAttribute` if it's used in the compilation\r\n- we needed to remove `UtilizesNullableReferenceTypes` and other special cases related to language version (note: there are a few uses of the `IDS_FeatureStaticNullChecking` feature left, which will be cleaned up in a follow-up PR. The goal is for this feature flag to only affect warnings, but not binding)\r\n- but we should still produce an error if you annotate a reference type in C# 7 (we now produce a LangVersion error for that)\r\n\r\nWe have a known issue with nullability of members in anonymous types. This issue was made more visible by this change (see updated tests).\r\n\r\n"},{"Id":"8098781985","Type":"IssuesEvent","CreatedAt":"2018-08-10T23:31:32","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29224","RelatedDescription":"Opened issue \"Refactor: rename HERE C # ' const ' name doesn't update ' fixed ' declaration\" (#29224) at dotnet/roslyn","RelatedBody":"Using vs2017 IDE refactor to &quot;rename&quot; `MAX_CHARS` in the following `struct` does not update the use within the `fixed` declaration.\n\n&lt;br&gt;\n\n&lt;br&gt;\n\n&lt;pre&gt;\npublic unsafe struct FILE_NAME_INFO\n{\n\tconst int MAX_CHARS = 1024;\n\n\tint c_bytes;\n\n\tfixed char szName[MAX_CHARS];\n};\n&lt;/pre&gt;\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/305908/ide-c-refactor-rename-const-name-doesnt-update-fix.html\nVSTS ticketId: 659267_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"8098719245","Type":"IssuesEvent","CreatedAt":"2018-08-10T23:02:48","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29223","RelatedDescription":"Opened issue \"Replacement for managed EnC module updates\" (#29223) at dotnet/roslyn","RelatedBody":"```C#\r\n// Each participating language service exports this interface. \r\n[Export]\r\ninterface IEditAndContinueManagedModuleUpdateProvider\r\n{\r\n    // Returns the kind of change made to the modules owned by the provider. The change is aggregated across all modules owned by the provider: if one module has a rude edit and another one has valid change the resulting kind is ManagedModuleUpdateStatus.Blocked\r\n    Task<ManagedModuleUpdateStatus> GetStatusAsync(CancallationToken cancellationToken);\r\n\r\n    // Returns an array of code changes (for each module owned by the provider) or empty array if there was no change or error. Errors are reported by the language service.\r\n    Task<ManagedModuleUpdates> GetManagedModuleUpdatesAsync(CancallationToken cancellationToken);\r\n\r\n   // Notifies the provider that changes to all modules have been successfully applied, except for modules listed in failures that failed.\r\n   void CommitUpdates(ImmutableArray<ManagedModuleUpdateFailure> failures);\r\n}\r\n\r\npublic readonly struct ManagedModuleUpdateFailure\r\n{\r\n    public Guid ModuleId { get; } \r\n    public int ErrorCode { get; }\r\n}\r\n\r\npublic readonly struct ManagedModuleUpdates\r\n{   \r\n    ManagedModuleUpdateStatus Status { get; }\r\n\r\n    // Empty if Status != Ready.\r\n    ImmutableArray<ManagedModuleUpdate> Updates { get; }\r\n}\r\n\r\npublic enum ManagedModuleUpdateStatus\r\n{  \r\n   None, // No change made.\r\n   Ready, // All changes are valid, can be applied.\r\n   Blocked, // Some changes are invalid, can't continue.\r\n}\r\n\r\npublic readonly struct ManagedModuleUpdate\r\n{\r\n    public Guid ModuleId { get; } \r\n\r\n    // applied to metadata:\r\n    public ImmutableArray<byte> ILDelta { get; } \r\n    public ImmutableArray<byte> MetadataDelta { get; } \r\n\r\n    // applied to PDB\r\n    public ImmutableArray<byte> PdbDelta { get; } \r\n    public ImmutableArray<SequencePointsUpdate> SequencePoints { get; } \r\n\r\n    public ImmutableArray<int> UpdatedMethods { get; } \r\n    public ImmutableArray<ActiveStatementUpdate> ActiveStatements { get; } \r\n    public ImmutableArray<ExceptionRegionUpdate> ExceptionRegions { get; }     // leave instructions remapping\r\n}\r\n\r\npublic readonly struct ActiveStatementUpdate\r\n{\r\n   public ActiveStatementId Id { get; }\r\n   public TextSpan NewSpan  { get; }\r\n}\r\n\r\npublic readonly struct ExceptionRegionUpdate\r\n{\r\n   public DkmActiveStatementId Id { get; }\r\n   public DkmTextSpan NewSpan { get; }\r\n}\r\n\r\npublic readonly struct SequencePointsUpdate  // replacement for FILEUPDATE\r\n{\r\n   public string FileName { get; } // as stored in PDB\r\n   public ImmutableArray<SourceLineUpdate> LineUpdates { get; }\r\n}\r\n\r\npublic readonly struct SourceLineUpdate \r\n{\r\n   public int OldLine { get; }\r\n   public int NewLine { get; }\r\n}\r\n```\r\n\r\n\r\nIn CEncMgr::ApplyCodeChangesInternal\r\n\r\n```C++\r\n        if (Helpers::IsManagedENC(pCurrentProject))\r\n        {\r\n            if (HasManagedEditsReady(pCurrentProject))\r\n            {\r\n                projects[cModifiedProjects].m_project.Attach(pCurrentProject.Detach());\r\n                cModifiedProjects++;\r\n                continue;\r\n            }\r\n        }\r\n```\r\n\r\n```C++\r\n        if (Helpers::IsManagedENC(pCurrentProject))\r\n        {\r\n            continue;\r\n        }\r\n```\r\n\r\nAnd add after the project loop:\r\n\r\n```C#\r\n  var providers = mef import all IEditAndContinueManagedModuleUpdateProvider;\r\n\r\n  foreach (var provider in providers)\r\n  {\r\n     if (await provider.GetStatusAsync(cancellationToken) == ManagedModuleUpdateStatus.Blocked) \r\n     { \r\n        Return false;\r\n     }\r\n  }\r\n```\r\n\r\nReplace \r\n```C++\r\n   hr = RebuildManagedProjects(cModifiedProjects, projects.GetData(), &fHadCompilerError, &fENCModifiedModuleLoaded, &fENCNotSupported, result);\r\n```\r\n\r\nwith \r\n```C#\r\n  var providers = mef import all IEditAndContinueManagedModuleUpdateProvider;\r\n  var allUpdates = new List<ImmutableArray<ManagedModuleUpdate>>();  \r\n\r\n  foreach (var provider in providers)\r\n  {\r\n     var updates = await provider.GetManagedModuleUpdatesAsync(cancellationToken);\r\n      \r\n     if (updates.Any(u => u.Status == ManagedModuleUpdateStatus.Blocked)) \r\n     { \r\n        Return false;\r\n     }\r\n\r\n     allUpdates.Add(updates);\r\n  }\r\n\r\n  var failures = new List<ManagedModuleUpdateFailure>();\r\n  foreach (var updates in allUpdates)\r\n  {\r\n     foreach (var update in updates)\r\n     {\r\n        var error = TryApplyUpdate(update);\r\n        if (error != S_OK) \r\n        {\r\n           failures.Add(new ManagedModuleUpdateFailure(update.ModuleId, error));\r\n        } \r\n     }\r\n  }\r\n  \r\n  var failuresImmutable = failures.ToImmutable();\r\n  foreach (var provider in providers)\r\n  {  \r\n     provider.CommitUpdates(failuresImmutable);\r\n  }\r\n\r\n  if (failedModules.Any()) \r\n  {\r\n     return false;\r\n  }\r\n```\r\n"},{"Id":"8098604023","Type":"PullRequestEvent","CreatedAt":"2018-08-10T22:19:19","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29197","RelatedDescription":"Merged pull request \"Check constraint nullability lazily for attribute arguments\" (#29197) at dotnet/roslyn","RelatedBody":"Fixes #29186."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8099123238","Type":"PullRequestEvent","CreatedAt":"2018-08-11T03:48:17","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6207","RelatedDescription":"Closed pull request \"[JustForView]Moved registry handle to  shared\" (#6207) at dotnet/corert","RelatedBody":"Related Coreclr PR https://github.com/dotnet/coreclr/pull/19419"},{"Id":"8098981226","Type":"PullRequestEvent","CreatedAt":"2018-08-11T01:39:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6209","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#6209) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @JeremyKuhne"},{"Id":"8098919700","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:49:31","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6209","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6209) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8098917826","Type":"PullRequestEvent","CreatedAt":"2018-08-11T00:48:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6208","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6208) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"8098740573","Type":"PullRequestEvent","CreatedAt":"2018-08-10T23:12:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6208","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6208) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8098677127","Type":"PullRequestEvent","CreatedAt":"2018-08-10T22:45:55","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6207","RelatedDescription":"Opened pull request \"[JustForView]Moved registry handle to  shared\" (#6207) at dotnet/corert","RelatedBody":"Related Coreclr PR https://github.com/dotnet/coreclr/pull/19419"},{"Id":"8097985780","Type":"PullRequestEvent","CreatedAt":"2018-08-10T19:36:20","Actor":"acmyu","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6206","RelatedDescription":"Opened pull request \"WIP Add DLLs to ReadyToRun.TestHarness testModules, use System.CommandLine \" (#6206) at dotnet/corert","RelatedBody":""},{"Id":"8097981494","Type":"PullRequestEvent","CreatedAt":"2018-08-10T19:35:22","Actor":"acmyu","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6205","RelatedDescription":"Closed pull request \"Add DLLs to ReadyToRun.TestHarness testModules, use System.CommandLine\" (#6205) at dotnet/corert","RelatedBody":""},{"Id":"8097979935","Type":"PullRequestEvent","CreatedAt":"2018-08-10T19:35:00","Actor":"acmyu","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6205","RelatedDescription":"Opened pull request \"Add DLLs to ReadyToRun.TestHarness testModules, use System.CommandLine\" (#6205) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8098716137","Type":"PullRequestEvent","CreatedAt":"2018-08-10T23:01:29","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2465","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to master\" (#2465) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8098676830","Type":"IssuesEvent","CreatedAt":"2018-08-10T22:45:47","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2468","RelatedDescription":"Opened issue \"Preview message should not have a code.\" (#2468) at dotnet/sdk","RelatedBody":"We were trying to shorten this and adding a code to the error message causes msbuild to list the file. (And, btw, RuntimeIdentifierInference.targets is a weird place for this logging.)\r\n\r\nWe will need to tweak the tests to allow this to not have a code as I added enforcement that all messages have codes, but I think this one needs to be a special case.\r\n\r\n### Expected\r\n```\r\nYou are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 \r\n```\r\n\r\n### Actual\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.401-preview-009229\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 \r\n```"},{"Id":"8098379090","Type":"IssuesEvent","CreatedAt":"2018-08-10T21:12:48","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2466","RelatedDescription":"Closed issue \"EmbedAppNameInHost fails when calling build twice\" (#2466) at dotnet/sdk","RelatedBody":"Discovered by @mikeharder \r\n\r\nIncremental publish of a standalone app is broken:\r\n```\r\n$ dotnet new console\r\nThe template \"Console Application\" was created successfully.\r\n\r\n$ dotnet publish -r win-x64\r\n  fooconsole -> D:\\Temp\\fooconsole\\bin\\Debug\\netcoreapp2.2\\win-x64\\publish\\\r\n\r\n$ dotnet publish -r win-x64\r\nerror MSB4018: The \"EmbedAppNameInHost\" task failed unexpectedly. [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018: System.IO.IOException: The file 'D:\\Temp\\fooconsole\\obj\\netcoreapp2.2\\win-x64\\host\\fooconsole.exe' already exists. [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at System.IO.File.Copy(String sourceFileName, String destFileName, Boolean overwrite) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.NET.Build.Tasks.AppHost.Create(String appHostSourceFilePath, String appHostDestinationFilePath, String appBinaryFilePath, Boolean overwriteExisting) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.NET.Build.Tasks.EmbedAppNameInHost.ExecuteCore() [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\n```\r\n\r\nUsing CLI 2.2.100-preview1-009345\r\n\r\nhttps://github.com/dotnet/versions/tree/3ee198e1a7b514914e0f016777b520907f54acf8/build-info/dotnet/product/cli/release/2.2\r\n"},{"Id":"8098373396","Type":"PullRequestEvent","CreatedAt":"2018-08-10T21:11:17","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2467","RelatedDescription":"Merged pull request \"Fix cannot publish self contain twice\" (#2467) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/sdk/issues/2466\r\n\r\nIntroduced by this #2239\r\n\r\nAppHost.Create will not skip when file exists. However, old the call site is not changed to encounter that. And I didn't add test coverage before changing the old code"},{"Id":"8097983628","Type":"PullRequestEvent","CreatedAt":"2018-08-10T19:35:53","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2467","RelatedDescription":"Opened pull request \"Fix cannot publish self contain twice\" (#2467) at dotnet/sdk","RelatedBody":""},{"Id":"8097685676","Type":"IssuesEvent","CreatedAt":"2018-08-10T18:27:14","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2466","RelatedDescription":"Opened issue \"EmbedAppNameInHost fails when calling build twice\" (#2466) at dotnet/sdk","RelatedBody":"Discovered by @mikeharder \r\n\r\nIncremental publish of a standalone app is broken:\r\n```\r\n$ dotnet new console\r\nThe template \"Console Application\" was created successfully.\r\n\r\n$ dotnet publish -r win-x64\r\n  fooconsole -> D:\\Temp\\fooconsole\\bin\\Debug\\netcoreapp2.2\\win-x64\\publish\\\r\n\r\n$ dotnet publish -r win-x64\r\nerror MSB4018: The \"EmbedAppNameInHost\" task failed unexpectedly. [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018: System.IO.IOException: The file 'D:\\Temp\\fooconsole\\obj\\netcoreapp2.2\\win-x64\\host\\fooconsole.exe' already exists. [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at System.IO.File.Copy(String sourceFileName, String destFileName, Boolean overwrite) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.NET.Build.Tasks.AppHost.Create(String appHostSourceFilePath, String appHostDestinationFilePath, String appBinaryFilePath, Boolean overwriteExisting) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.NET.Build.Tasks.EmbedAppNameInHost.ExecuteCore() [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\nerror MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [D:\\Temp\\fooconsole\\fooconsole.csproj]\r\n```\r\n\r\nUsing CLI 2.2.100-preview1-009345\r\n\r\nhttps://github.com/dotnet/versions/tree/3ee198e1a7b514914e0f016777b520907f54acf8/build-info/dotnet/product/cli/release/2.2\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1026954979620282368","CreatedAt":"2018-08-07T22:15:21+00:00","UserScreenname":"dotnet","Text":"ML .NET 0.4 is now available! Improved support for #NLP scenarios with word embedding transform, improved speed for… https://t.co/K0WAJogGLW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":251,"FavoriteCount":145,"RawContent":null},{"Id":"1025145757714640896","CreatedAt":"2018-08-02T22:26:09+00:00","UserScreenname":"dotnet","Text":"Tiered Compilation Preview in .NET Core 2.1 https://t.co/iDmpwcq86K by @noahsfalk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":243,"FavoriteCount":143,"RawContent":null}]}},"RunOn":"2018-08-11T05:30:28.6682493Z","RunDurationInMilliseconds":8992}