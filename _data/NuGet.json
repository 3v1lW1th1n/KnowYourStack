{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10340238878","Type":"PullRequestEvent","CreatedAt":"2019-09-03T21:22:54","Actor":"robertmuehsig","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7501","RelatedDescription":"Opened pull request \"Fix #6622 via CSS (multiline on verify page)\" (#7501) at NuGet/NuGetGallery","RelatedBody":"As suggested in the issue, this should solve the bug. Not sure if I found the correct location for this less changes. \r\n\r\nSummary of the changes (in less than 80 characters):\r\n\r\n* Added a new less rule to display multiline in a correct way\r\n* The CSS is should only affect the verify package site.\r\n* Didn't found any other CSS/LESS stuff, so I used the \"common-edit-metadata.less\" file. \r\n\r\nWorks in more or less all modern browsers :)\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/6622"},{"Id":"10338391676","Type":"IssuesEvent","CreatedAt":"2019-09-03T16:48:55","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7494","RelatedDescription":"Closed issue \"Duplicates when paging through search results since new search went live\" (#7494) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI have a console application that uses the NuGet.Protocol.Core.v3 version 4.3.0-beta1-2418 nuget package to search nuget for packages with a certain keyword. My app retrieves 10 results at a time and loops through pages until no result are returned. This has always worked very well until a few days ago. What I am seeing since the new search went live is that intermittently a package will be included on a certain page and again on the following page.\r\n\r\n### To Reproduce\r\nHere is an excerpt of my C# code that can be copied and pasted into a console app to reproduce the behavior:\r\n```\r\nvar take = 10;\r\nvar skip = 0;\r\nvar searchTerm = \"Cake\";\r\nvar filters = new SearchFilter(true)\r\n{\r\n    IncludeDelisted = false\r\n};\r\nvar discoveredPackages = new List<IPackageSearchMetadata>(take);\r\nvar nugetSearchClient = nugetRepository.GetResource<PackageSearchResource>();\r\n\r\nwhile (true)\r\n{\r\n    var searchResult = await nugetSearchClient.SearchAsync(searchTerm, filters, skip, take, NullLogger.Instance, CancellationToken.None).ConfigureAwait(false);\r\n    skip += take;\r\n\r\n    if (!searchResult.Any()) break;\r\n\r\n    // I added the following code to help me investigate this problem\r\n    // An exception will be thrown if a package is returned in the search\r\n    // result and has been discovered previously\r\n    var duplicates = searchResult.Select(r => r.Identity).Intersect(discoveredPackages.Select(p => p.Identity));\r\n    if (duplicates.Any())\r\n    {\r\n        var dupes = string.Join(\", \", duplicates.Select(i => i.ToString()));\r\n        throw new Exception($\"The following package were already returned by the search API: {dupes}\");\r\n    }\r\n\r\n    discoveredPackages.AddRange(searchResult);\r\n}\r\n```\r\n\r\n### Expected behavior\r\nI expect packages to be returned only once and not to be duplicated on multiple pages of the search result.\r\n\r\n### Side note\r\nIs there a way when I search programatically to specified my desired sorting and completely avoid the new \"relevance\" sorting? For example, in my case a simple alphabetical sort would be perfectly fine."},{"Id":"10338315093","Type":"IssuesEvent","CreatedAt":"2019-09-03T16:37:51","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7487","RelatedDescription":"Closed issue \"NuGet continual prompt for credentials due to resource blocked on V3\" (#7487) at NuGet/NuGetGallery","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.2.0\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100-preview-010184\r\n\r\nVS version (if appropriate): 16.2.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 17134.984\r\n\r\nWorked before? If so, with which NuGet version: worked just yesterday now doesn't\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. right click on project -> nuget package manager\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\nApi source: https://api.nuget.org/v3/index.json\r\n\r\nWhen looking at the metadata pulled from api.nuget.org that visual studio uses only one site is being flag as malware/security risk: https://azuresearch-usnc.nuget.org/query.  What is the vetting process for the meta that is added or verifying that all site are in good standing for enterprise use?  This just started prompting for credentials today was working for the past few months.\r\n\r\n"},{"Id":"10329363677","Type":"IssuesEvent","CreatedAt":"2019-09-02T12:00:50","Actor":"rianjs","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7500","RelatedDescription":"Opened issue \"Stats have been broken for 72 hours\" (#7500) at NuGet/NuGetGallery","RelatedBody":"In the ongoing saga of broken stars, we’re now in a spot where package download counts haven’t updated since Saturday. "},{"Id":"10328132395","Type":"PullRequestEvent","CreatedAt":"2019-09-02T08:49:10","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7499","RelatedDescription":"Opened pull request \"[WIP] Upgrade to AppInsights v2.10\" (#7499) at NuGet/NuGetGallery","RelatedBody":"This is a work-in-progress (do not merge yet):\r\n\r\n* Upgraded to prerelease of NuGet.Services.Logging\r\n* Upgraded to v2.10 of Application Insights\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/2537\r\n\r\nTodo:\r\n* [ ] Verify telemetry (is all telemetry still there?)\r\n* [ ] Create performance baseline (without this change)\r\n* [ ] Verify performance of this change (load test)\r\n* [ ] If tests are good, merge https://github.com/NuGet/ServerCommon/pull/308 and actually release ServerCommon nupkgs\r\n* [ ] Upgrade ServerCommon dependencies to actually released nupkgs in this PR and https://github.com/nuget/nuget.jobs/issues/808"},{"Id":"10320900999","Type":"PullRequestEvent","CreatedAt":"2019-08-30T22:15:09","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7498","RelatedDescription":"Merged pull request \"Make the cancel ownership request endpoint just redirect to Manage Owners\" (#7498) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2679\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/7497.\r\n\r\nThe `CancelPendingOwnershipRequest` endpoint was a GET without a token but it performed an action. This is against CSRF rules. The fix was to make the endpoint redirect the existing URL to the manage package page with the owners section auto-expanded. This is so existing links in the email are not broken.\r\n\r\nThe new UI on the Packages page is this (a pencil instead of an \"x\"):\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64045795-11871180-cb1f-11e9-856f-507ec8d172d7.png)\r\n\r\nThe old UI looked like this:\r\n![image](https://user-images.githubusercontent.com/94054/64046189-1ac4ae00-cb20-11e9-87e6-b847b529d06c.png)\r\n\r\nI considered the word \"Manage\" instead of a pencil but I thought this was more consistent with the rest of the page. Note that this adds an additional hope to cancel an ownership request from the packages page. I could do a POST on click here but this would take some non-trivial code sharing with the manage package page. \r\n\r\nThe new email looks like this:\r\n![image](https://user-images.githubusercontent.com/94054/64045541-6c6c3900-cb1e-11e9-9419-f89895693a7f.png)\r\n\r\nThe old email looked like this:\r\n![image](https://user-images.githubusercontent.com/94054/64046163-054f8400-cb20-11e9-8a29-51c113fda082.png)\r\n\r\nWhen you click the link it looks like this:\r\n![image](https://user-images.githubusercontent.com/94054/64045574-83129000-cb1e-11e9-8580-462e7a0135d5.png)\r\n\r\n"},{"Id":"10320898684","Type":"PullRequestEvent","CreatedAt":"2019-08-30T22:14:31","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7497","RelatedDescription":"Merged pull request \"Use POST for admin actions\" (#7497) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2679"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10341137423","Type":"IssuesEvent","CreatedAt":"2019-09-04T00:52:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8544","RelatedDescription":"Closed issue \"Update the license list\" (#8544) at NuGet/Home","RelatedBody":""},{"Id":"10340979216","Type":"IssuesEvent","CreatedAt":"2019-09-04T00:08:03","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8547","RelatedDescription":"Opened issue \"Bless 5.2.0 NuGet.exe and publish 5.3.0-preview NuGet.exe and preview packages(except NuGet.CommandLine)\" (#8547) at NuGet/Home","RelatedBody":" The checklist is as following:\r\n- [ ]  Change the link https://dist.nuget.org/win-x86-commandline/latest/nuget.exe to point to 5.2\r\n- [ ]  Publish https://dist.nuget.org/win-x86-commandline/v5.3.0-preview3/nuget.exe\r\n- [ ]  Merge PR : https://github.com/NuGet/NuGet.Services.Index/pull/147\r\n- [ ]  Push NuGet.* 5.3.0-preview3 packages to nuget.org  https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=426399\r\n- [ ] Push NuGet.Commandline 5.2.0 package to nuget.org https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=383159"},{"Id":"10340930439","Type":"IssuesEvent","CreatedAt":"2019-09-03T23:54:50","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8546","RelatedDescription":"Opened issue \"Provide constructive CLI message when Dotnet pack is missing MSBuild Target\" (#8546) at NuGet/Home","RelatedBody":"## Details about Problem\r\nWith a .NET Framework project, the dotnet CLI does not have necessary Targets for performing `dotnet pack`. The user gets an error about a missing \"pack\" target. It would be more useful to provide a a constructive message, possibly pointing to the documentation on how to obtain the required Targets. I ran into this during another repro, and found it a bit jarring. Dotnet CLI works for things like Restore, so users may expect Pack to work as well. \r\n\r\nFound an open Docs issue where someone asked for documentation for finding these targets: https://github.com/NuGet/docs.microsoft.com-nuget/issues/986\r\n\r\n@karann-msft noted that the relevant docs are [here](https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-msbuild#add-the-nugetbuildtaskspack-package), and agreed that the CLI could be more informative.\r\n\r\nNuGet product used: dotnet.exe\r\ndotnet.exe --version (if appropriate): 3.0.100-preview9-014004\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .NET Framework project (ie, Class Library)\r\n2. Run `dotnet pack` in the project directory\r\n3. Output is:\r\n\r\n> Microsoft (R) Build Engine version 16.3.0-preview-19426-01+faf5e5d75 for .NET Core\r\n> Copyright (C) Microsoft Corporation. All rights reserved.\r\n> \r\n>   Nothing to do. None of the projects specified contain packages to restore.\r\n> **C:\\<Path>\\myProj.csproj : error MSB4057: The target \"pack\" does not exist in the project.**\r\n"},{"Id":"10340131341","Type":"IssuesEvent","CreatedAt":"2019-09-03T21:05:15","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8545","RelatedDescription":"Opened issue \"NuGet - Solution \"Installed\"-Tab shows unexpected the latest version not the installed version\" (#8545) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/712579/nuget-solution-installed-tab-shows-unexpected-the.html)._\n\n---\nDear VS-Team,\n\nI had to throw some work for cleaning up packages folder away, due the behaivior of the &quot;Installed&quot; Tab in NuGet Solution Browser. I think we can agree that the &quot;Installed&quot; Tab shows the installed packages. Unexpectedly the showed version is NOT the installed version, but the latest one. This makes no sense for this tab, because it is agains the given context.\n\nOf course it is possible that multiple versions are installed, but in that case a easy &quot;multiple versions&quot; text would be appropriate.\nIt would of course also possible to addionaly show the latest version of the package also.\n\nThe content of the same installed tab for a specific project looks different and also shows the installed version.\n\nI would also recommend, also for the other tabs, to show some prefix like &quot;newest:&quot; &quot;installed:&quot; before the version or some more intuitive than &quot;green arrow&quot; icon for the installed version. Currently its not intuitive as it should for such a simple dialog. I also discussed that with some collegues and they agree my conclusions.\n\nBest regards\nMarco Borm\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/27/2019, 01:39 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Donnie Goodson [MSFT] on 8/30/2019, 04:58 PM: \n\n<p>Thanks for reporting the issue. If your selected package source doesn’t have the version that’s installed, it will only show the “latest” version it can find. What sources (feeds) do you have selected here? If you are only pointing to a local source, then does that source have the package you’re trying to install?</p>\n<p>Thanks for the UI suggestion. I’ve created an issue on GitHub where it can be discussed with the team and community: <a target='_blank' href=\"https://github.com/NuGet/Home/issues/8538\">https://github.com/NuGet/Home/issues/8538</a></p>\n\n#### Marco Borm on 9/2/2019, 01:47 AM: \n\n<p>Dear Donnie, no, that's not correct. We only use packages from nuget.org. The installed tab for *the whole solution* *never* shows the installed version. It always shows the latest version.</p>\n\n#### Donnie Goodson [MSFT] on 9/3/2019, 02:04 PM: \n\n<p>I see the issue now. The Solution PM UI tab should behave the same as the Project PM UI. Moving to GitHub.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10339330113","Type":"IssuesEvent","CreatedAt":"2019-09-03T19:04:11","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8537","RelatedDescription":"Closed issue \"VS:  disable ngen for 16.3\" (#8537) at NuGet/Home","RelatedBody":"Most of the ngen-related work is in https://github.com/NuGet/NuGet.Client/tree/release-5.3.x.  However, 2 critical changes are in the dev but not yet the release-5.3.x branch.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/commit/34420e795cc382031b9ac6a4fc99cb168ac3351e\r\nhttps://github.com/NuGet/NuGet.Client/commit/243111be8a0e31755d95672797174f8ff0b3036e\r\n\r\nBefore cherry-picking these commits to the release-5.3.x branch, more validation is necessary, and there's little runway left for 16.3."},{"Id":"10338844002","Type":"IssuesEvent","CreatedAt":"2019-09-03T17:53:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2775","RelatedDescription":"Closed issue \"Nuget.exe update -self includes pre-release versions by default\" (#2775) at NuGet/Home","RelatedBody":"Nuget.exe update -self should have the option to specify whether we want to update it to a pre-release version or not.\n\nAdditionally, we might even consider the option of being able to specify the source from which to pick up Nuget.CommandLine in addition to specifying the -PreRelease option.\n\nWhile the nuget.exe update command does allow the -PreRelease option, we ignore the option and pass it as true when -Self option is set:\n\nIPackageRepository packageRepository = _repositoryFactory.CreateRepository(NuGetConstants.V2FeedUrl);\n            IPackage package = packageRepository.GetUpdates(\n                new [] { new PackageName(NuGetCommandLinePackageId, version) },\n                includePrerelease: true, \n                includeAllVersions: false, \n                targetFrameworks: null,\n                versionConstraints: null).FirstOrDefault();\n"},{"Id":"10338610023","Type":"IssuesEvent","CreatedAt":"2019-09-03T17:18:31","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8540","RelatedDescription":"Closed issue \"Reduce multiple string concatenations\" (#8540) at NuGet/Home","RelatedBody":"In a few places, NuGet builds up strings by using concatenation over multiple lines of code. Since strings in .NET are immutable, this means that several strings are created that are only used once before being eligible for garbage collection, and the CPU has to do extra work copying these temporary strings into the new longer strings. We can get some perf improvement from removing the obvious examples mainly by using a StringBuilder, but it may be possible to avoid string concatenation, or do it in a single line of code, in other cases."},{"Id":"10338592832","Type":"IssuesEvent","CreatedAt":"2019-09-03T17:15:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8519","RelatedDescription":"Closed issue \"TelemetryUtility.CreateFileAndForget name should indicate that it is in fact a file and forget name\" (#8519) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.VisualStudio.Common/Telemetry/TelemetryUtility.cs#L10\r\n\r\nRight now we end up with even names such as: \r\n\r\n`vs/nuget/pvspackagerestoremanager/onnugetprojectadded`. \r\n\r\nThis would make it difficult to just categorize all of our file and forget failures. \r\n\r\nI think that it might be useful for all these events to get prefixed somehow, so that we can isolate them from our regular events. \r\n\r\nThoughts @dtivel?\r\n\r\nIf we think that's the case, we should do it soon, if not close it :) "},{"Id":"10338555268","Type":"IssuesEvent","CreatedAt":"2019-09-03T17:10:15","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8544","RelatedDescription":"Opened issue \"Update the license list\" (#8544) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-04T05:30:45.7486733Z","RunDurationInMilliseconds":2172}