{"Data":{"GitHub":{"Issues":[{"Id":"388463357","IsPullRequest":true,"CreatedAt":"2018-12-07T01:06:12","Actor":"wschin","Number":"1846","RawContent":null,"Title":"[WIP] Remove ISchmea","State":"open","Body":"Fixes #1501.\r\n\r\n- [x] Replace ISchema with Schema in all cases without writing extra code\r\n- [ ] Remove ITransposeSchema because it's a ISchema\r\n- [ ] Remove the uses of ISchema in ColumnBindingsBase\r\n- [ ] Remove other individual implementations of ISchema","Url":"https://github.com/dotnet/machinelearning/pull/1846","RelatedDescription":"Open PR \"[WIP] Remove ISchmea\" (#1846)"},{"Id":"387917242","IsPullRequest":true,"CreatedAt":"2018-12-06T23:43:21","Actor":"Anipik","Number":"1829","RawContent":null,"Title":"Tolerance added for rff tests","State":"closed","Body":"Fixes #1825\r\n\r\nRff is using the new cpumathalgorithm for matrix multiplication\r\nSo sometimes there is difference in last few decimal places(due to different number of multiplications) from the original baseline so adding tolerance corrects the error.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1829","RelatedDescription":"Closed or merged PR \"Tolerance added for rff tests\" (#1829)"},{"Id":"388445125","IsPullRequest":true,"CreatedAt":"2018-12-06T23:41:56","Actor":"Anipik","Number":"1845","RawContent":null,"Title":"Reverting dead unallignedCode paths","State":"open","Body":"Reverting unaligned CodePaths were added in https://github.com/dotnet/machinelearning/pull/1218 and https://github.com/dotnet/machinelearning/pull/1274\r\n\r\nRelated to https://github.com/dotnet/machinelearning/pull/1838\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1845","RelatedDescription":"Open PR \"Reverting dead unallignedCode paths\" (#1845)"},{"Id":"388338539","IsPullRequest":false,"CreatedAt":"2018-12-06T22:37:34","Actor":"leblancdavid","Number":"1839","RawContent":null,"Title":"FastTree cannot solve a simple toy problem when using feature arrays","State":"closed","Body":"I'm having a hard time understanding the API for doing basic machine learning. In our application, our feature vectors come in as basic arrays of floating point values. I create a simple toy problem to try to understand how the API works (using the samples as a guide) which uses the `FastTree` binary classifier. The training data is just 2 vectors <0, 0>:0, <1, 1>:1, which should be easily be able to fit a model to. However, when I run the evaluation I get 50% accuracy. Here is my sample code:\r\n\r\n```\r\n class Program\r\n    {\r\n        public class FeatureData\r\n        {\r\n            [ColumnName(\"Label\")]\r\n            public bool Label { get; set; }\r\n\r\n            [ColumnName(\"Features\")]\r\n            public float[] Features { get; set; }\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            MLContext mlContext = new MLContext(seed: 0);\r\n\r\n            var featuresTrainingData = new List<FeatureData>()\r\n            {\r\n                new FeatureData() { Features = new float[]{0.0f, 0.0f}, Label = false},\r\n                new FeatureData() { Features = new float[]{1.0f, 1.0f}, Label = true}\r\n            };\r\n\r\n            var schemaDef = SchemaDefinition.Create(typeof(FeatureData));\r\n            schemaDef[\"Features\"].ColumnType = new VectorType(NumberType.R4, 2);\r\n\r\n            var dataView = mlContext.CreateDataView(featuresTrainingData, schemaDef);\r\n\r\n            //Train the model\r\n            var pipeline = mlContext.BinaryClassification.Trainers.FastTree(featureColumn:\"Features\", labelColumn:\"Label\");\r\n            var model = pipeline.Fit(dataView);\r\n\r\n            //Evaluate\r\n            var predictions = model.Transform(dataView);\r\n            var metrics = mlContext.BinaryClassification.Evaluate(predictions, \"Label\");\r\n\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"Model quality metrics evaluation\");\r\n            Console.WriteLine(\"--------------------------------\");\r\n            Console.WriteLine($\"Accuracy: {metrics.Accuracy:P2}\");\r\n            Console.WriteLine($\"Auc: {metrics.Auc:P2}\");\r\n            Console.WriteLine($\"F1Score: {metrics.F1Score:P2}\");\r\n            Console.WriteLine(\"=============== End of model evaluation ===============\");\r\n\r\n        }\r\n    }\r\n```\r\n\r\nWhat am I doing wrong here?\r\n\r\nThank you!","Url":"https://github.com/dotnet/machinelearning/issues/1839","RelatedDescription":"Closed issue \"FastTree cannot solve a simple toy problem when using feature arrays\" (#1839)"},{"Id":"388417893","IsPullRequest":true,"CreatedAt":"2018-12-06T22:04:31","Actor":"rogancarr","Number":"1844","RawContent":null,"Title":"WIP: Confidence Intervals for Permutation Feature Importance","State":"open","Body":"**Work in Progress** to start conversations. Do not review.\r\n\r\nThis PR adds an optional confidence interval calculation to the `Permutation Feature Importance` evaluator. If the users specifies the number of permutations > 1, then the resulting evaluating metrics will contain the mean and standard deviation.\r\n\r\nFixes #1840\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1844","RelatedDescription":"Open PR \"WIP: Confidence Intervals for Permutation Feature Importance\" (#1844)"},{"Id":"388021569","IsPullRequest":true,"CreatedAt":"2018-12-06T20:34:49","Actor":"TomFinley","Number":"1835","RawContent":null,"Title":"Row now disposable","State":"closed","Body":"Fixes #1824 .\r\n\r\nNote that some internal things that instead operate on top of delegates will still have `Action` disposer delegates, but my expectation is that most of those things are (or should be) disposable.\r\n\r\nThe usual advice about the commits being a useful way to review still apply, though less so than in prior PRs since there are fewer bulk renamings than elsewhere.","Url":"https://github.com/dotnet/machinelearning/pull/1835","RelatedDescription":"Closed or merged PR \"Row now disposable\" (#1835)"},{"Id":"387547559","IsPullRequest":false,"CreatedAt":"2018-12-06T20:34:49","Actor":"TomFinley","Number":"1824","RawContent":null,"Title":"Make Row Disposable","State":"closed","Body":"We have previously used what was `IRow`, and now `Row`, for two purposes:\r\n\r\n1. It was a \"restricted\" row cursor that allowed inspection but not movement. Nearly all of our transforms perform their data transformations through this mechanism, which is fine.\r\n\r\n2. It was a convenient way to store what amounted to a property bag that had the benefit of using the `IDataView` type system and familiar APIs.\r\n\r\nThe trouble was, that for scenario 2 it would have been incredibly awkward to have `IRow` be disposable. But for scenario 1 we absolutely required it. So we did awkward things like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/521acad830408b43175821575f5f774629aeafe7/src/Microsoft.ML.Core/Data/ISchemaBindableMapper.cs#L116\r\n\r\n\"Here's a `Row`, and by the way, when you're done, if this thing is non-null, you should treat it as disposable.\" Kind of silly. But this was able to be done, because these `Row` objects were \"driving\" `RowCursor` implementations, and those were disposable, so we were able to hide this complexity from people. But, since `Row` must be a public type in our API (just as `RowCursor` must be), we must change it.\r\n\r\nWe have now actually resolved scenario 2 by inventing a new type of container, called `Metadata`, that operates *kind of* like a `Row`, but isn't quite one. And this leaves us free now, I think, to make `Row` disposable.\r\n\r\n* Anything that is still a `Row` that should become a `Metadata` should start being a `Metadata`. (This includes anything that currently yields `Row`s that are understood by convention to be immovable and where all columns are active... that is, simple property bags.)\r\n\r\n* Much of the disposer logic currently on `RowCursor` can be moved to `Row`.\r\n\r\n* Implement [dispose pattern](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern) on `Row`.\r\n\r\nThis issue is an explication of a minor subpoint of #1532 .","Url":"https://github.com/dotnet/machinelearning/issues/1824","RelatedDescription":"Closed issue \"Make Row Disposable\" (#1824)"},{"Id":"388365719","IsPullRequest":false,"CreatedAt":"2018-12-06T19:36:59","Actor":"TomFinley","Number":"1843","RawContent":null,"Title":"Schema.Metadata needs a better name","State":"open","Body":"\"Metadata\" is perhaps not the best name for what we currently call metadata.\r\n\r\nFirst, what is it: what we call Metadata is meant to suggest not just any metadata, but that data that we consider auxiliary, or at *most* ancillary. (So for example, slot names are in metadata, because not everything will have names for each slot. But sometimes they will, and we need a place to keep that.)\r\n\r\nThe trouble with the name \"metadata\" is that it means literally everything but the data. But this is inaccurate: there are lots of things that are data about the data (e.g., the types, the vector sizes, the names of columns) that we definitely do not want to keep in the metadata structure (since they're absolutely required information), but that is \"metadata\" in the strict linguistic sense of the word.\r\n\r\nThe only name suggested as an alternative that I am aware of is \"annotations.\" I am fine with the name annotations. Perhaps we could come up with a better name. I'll leave this open for a bit, and unless people object we can rename metadata annotations.","Url":"https://github.com/dotnet/machinelearning/issues/1843","RelatedDescription":"Open issue \"Schema.Metadata needs a better name\" (#1843)"},{"Id":"388365337","IsPullRequest":true,"CreatedAt":"2018-12-06T19:35:54","Actor":"vaeksare","Number":"1842","RawContent":null,"Title":"Prevent DNNImageModels from being downloaded on all machines","State":"open","Body":"Moves the check location to prevent download from happening on unnecessary machines during the official build. Fixes #1841 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1842","RelatedDescription":"Open PR \"Prevent DNNImageModels from being downloaded on all machines\" (#1842)"},{"Id":"388364996","IsPullRequest":false,"CreatedAt":"2018-12-06T19:34:55","Actor":"vaeksare","Number":"1841","RawContent":null,"Title":"DNNImageModels are downloaded on all machines during official builds","State":"open","Body":"The models only need to be downloaded on one machine during official builds, not all of them.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1841","RelatedDescription":"Open issue \"DNNImageModels are downloaded on all machines during official builds\" (#1841)"},{"Id":"388362048","IsPullRequest":false,"CreatedAt":"2018-12-06T19:27:03","Actor":"rogancarr","Number":"1840","RawContent":null,"Title":"Add confidence intervals to permutation feature importance","State":"open","Body":"`Permutation Feature Importance` (aka `PFI`) computes the importance of a feature to a model by permuting values for that feature, scoring it with the model, and comparing the new evaluation metrics to the original evaluation metrics. For speed, `PFI` uses only one permutation, and this leads to a bit of randomness in the predicted importances. For example, based on the random seed features can change orderings of importance and permutations can even end up showing to improve the model performance. These issues can be fixed by allowing the calculation of confidence intervals around the feature importance values.","Url":"https://github.com/dotnet/machinelearning/issues/1840","RelatedDescription":"Open issue \"Add confidence intervals to permutation feature importance\" (#1840)"},{"Id":"388109478","IsPullRequest":true,"CreatedAt":"2018-12-06T18:08:53","Actor":"TomFinley","Number":"1838","RawContent":null,"Title":"Revert \"Removed AlignedArray  (#1657)\"","State":"closed","Body":"This reverts commit 72ec121afe1a889218c750f7bda7ee5093c140b7.\r\nA bug was detected that resulted in non-deterministic calculation, since the\r\nunderlying C++ code was written in a way apparently that required alignment\r\nto produce consistent results, so of course just removing the alignment and\r\ncalling an only slightly modified algorithm compromised determinism, resulting\r\nin test failure for RFF in particular.\r\n\r\nIf we can fix that bug by other means that would be preferable, since removing `AlignedArray` is a desirable outcome. Not if it means nondeterminism though, obviously. 😉 ","Url":"https://github.com/dotnet/machinelearning/pull/1838","RelatedDescription":"Closed or merged PR \"Revert \"Removed AlignedArray  (#1657)\"\" (#1838)"},{"Id":"388026559","IsPullRequest":true,"CreatedAt":"2018-12-06T02:12:52","Actor":"najeeb-kazmi","Number":"1837","RawContent":null,"Title":"[WIP] Public API for Tree predictors","State":"open","Body":"Fix #1701 \r\n\r\nInternalized and explicitly implemented the following interfaces implemented by `FastTreePredictionWrapper`:\r\n- `ICanSaveInIniFormat`\r\n- `ICanSaveInSourceCode`\r\n- `ICanSaveSummary`\r\n- `ICanSaveSummaryInKeyValuePairs`\r\n- `ICanGetSummaryAsIRow`\r\n\r\nRemaining:\r\n- Renaming `FastTreePredictionWrapper` and descendants to `XYZModelParameters`\r\n- Look into internalizing `IPredictorWithFeatureWeights` and `IFeatureContributionMapper`\r\n- Do a pass over the descendants of `FastTreePredictionWrapper` and reduce the public surface","Url":"https://github.com/dotnet/machinelearning/pull/1837","RelatedDescription":"Open PR \"[WIP] Public API for Tree predictors\" (#1837)"},{"Id":"388023995","IsPullRequest":true,"CreatedAt":"2018-12-06T02:00:03","Actor":"abgoswam","Number":"1836","RawContent":null,"Title":"Test for Metadata Support In DataView Construction","State":"open","Body":"Fixes #1633 \r\n\r\n- Inside the `GetGetterDelegate` we were invoking MarshalInvoke with `GetGetter<int>` .  This does not take into consideration  the generic return type `ValueGetter<TDst>`. Subsequently, the validation inside `MarshalInvokeCheckAndCreate` fails.\r\n\r\n- As part of the fix, we use reflection to invoke the generic `GetGetter<TDst>` with the appropriate type.","Url":"https://github.com/dotnet/machinelearning/pull/1836","RelatedDescription":"Open PR \"Test for Metadata Support In DataView Construction\" (#1836)"},{"Id":"388020090","IsPullRequest":false,"CreatedAt":"2018-12-06T01:40:16","Actor":"jignparm","Number":"1834","RawContent":null,"Title":"OnnxTransform -- upgrade to support Linux, Mac and CUDA GPU","State":"open","Body":"Add support for Linux X64\r\nAdd support for Mac X64\r\nAdd support for CUDA GPU for Windows and Linux (no Mac yet)","Url":"https://github.com/dotnet/machinelearning/issues/1834","RelatedDescription":"Open issue \"OnnxTransform -- upgrade to support Linux, Mac and CUDA GPU\" (#1834)"},{"Id":"388018148","IsPullRequest":true,"CreatedAt":"2018-12-06T01:30:19","Actor":"Ivanidzo4ka","Number":"1833","RawContent":null,"Title":"Provide proper calling conversion for x86 framework","State":"open","Body":"Fixes #1721 \r\nRight now if we call our nuget from .net framework 4.6 x86, we get ugly PInvokeStackImbalance exception.\r\n\r\nI've check and it looks like we build our native libraries in __csdecl conversion which is standard for C and we have \r\n`#define EXPORT_API(ret) extern \"C\" __declspec(dllexport) ret` in our stdafx.h file.\r\nby default PInvoke use WinApi convention which falls down to _stdcall.\r\n\r\nOn x64 platforms and .net core everything works fine, I assume as part of implementation.\r\nFor .net framework 4.6 with x86, it throws exception.\r\n\r\nSo I put implicit calling conversion in all our PInvoke calls, and also made sure we use our stdafx.h in all our native libraries.\r\n\r\nHave no idea how to write test for this tho.","Url":"https://github.com/dotnet/machinelearning/pull/1833","RelatedDescription":"Open PR \"Provide proper calling conversion for x86 framework\" (#1833)"},{"Id":"387482029","IsPullRequest":true,"CreatedAt":"2018-12-05T23:56:47","Actor":"wschin","Number":"1822","RawContent":null,"Title":"Make SchemaShape.Column a struct instead of a class","State":"closed","Body":"Fixes #1706.","Url":"https://github.com/dotnet/machinelearning/pull/1822","RelatedDescription":"Closed or merged PR \"Make SchemaShape.Column a struct instead of a class\" (#1822)"},{"Id":"387975746","IsPullRequest":true,"CreatedAt":"2018-12-05T22:34:13","Actor":"rogancarr","Number":"1832","RawContent":null,"Title":"Adding support for most learning tasks to PFI","State":"open","Body":"This PR adds support to `Permutation Feature Importance` for `Multiclass Classification`, `Ranking`, and `Clustering`.\r\n\r\nFixes #1771\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1832","RelatedDescription":"Open PR \"Adding support for most learning tasks to PFI\" (#1832)"},{"Id":"387971885","IsPullRequest":false,"CreatedAt":"2018-12-05T22:21:54","Actor":"JRAlexander","Number":"1831","RawContent":null,"Title":" Deprecate documentation topics migrated to docs.microsoft.com","State":"open","Body":"The ML.NET Cookbook and ML.NET High-Level Concepts documents have been migrated to docs.microsoft.com as agreed upon. The current documents need to be updated to point to the migrated ones.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1831","RelatedDescription":"Open issue \" Deprecate documentation topics migrated to docs.microsoft.com\" (#1831)"},{"Id":"387954020","IsPullRequest":true,"CreatedAt":"2018-12-05T22:15:59","Actor":"JRAlexander","Number":"1830","RawContent":null,"Title":"Deprecate documentation topics migrated to docs.microsoft.com","State":"closed","Body":"Deprecate migrated ML.NET Cookbook and ML.NET High-Level topics. These topics will now point to the migrated topics:\r\n* ML.NET Cookbook has been split out and migrated to [the docs.microsoft.com ML.NET How to section](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/).\r\n* ML.NET High-Level topics has been split out and migrated to the [\"Basic concepts for model training in ML.NET\" topic at docs.microsoft.com](https://docs.microsoft.com/en-us/dotnet/machine-learning/basic-concepts-model-training-in-mldotnet).\r\n\r\nFixes https://github.com/dotnet/machinelearning/issues/1831 ","Url":"https://github.com/dotnet/machinelearning/pull/1830","RelatedDescription":"Closed or merged PR \"Deprecate documentation topics migrated to docs.microsoft.com\" (#1830)"},{"Id":"387841330","IsPullRequest":true,"CreatedAt":"2018-12-05T18:48:58","Actor":"eerhardt","Number":"1828","RawContent":null,"Title":"Allow ML.NET native binaries to work on Windows machines that don't have the VC runtime installed.","State":"closed","Body":"This allows ML.NET to run on Windows Nano containers.\r\n\r\nI also ported 2 Unix compile options we are using in core-setup and corefx that were missed when originally creating the ML.NET native build infrastructure.\r\n\r\nFix #1823\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1828","RelatedDescription":"Closed or merged PR \"Allow ML.NET native binaries to work on Windows machines that don't have the VC runtime installed.\" (#1828)"},{"Id":"387533990","IsPullRequest":false,"CreatedAt":"2018-12-05T18:48:58","Actor":"swesonga","Number":"1823","RawContent":null,"Title":"Cannot use ML.NET in a Windows nano container","State":"closed","Body":"### System information\r\n\r\nBase image: microsoft/dotnet:2.1-aspnetcore-runtime-nanoserver-1803\r\n\r\nMicrosoft Windows [Version 10.0.17134.345]\r\n(c) 2018 Microsoft Corporation. All rights reserved.\r\n\r\nC:\\app>dotnet --info\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n### Issue\r\nRepro: Install the Visual Studio Service Fabric Mesh tools from https://blogs.msdn.microsoft.com/azureservicefabric/2018/12/04/service-fabric-mesh-preview-refresh-release/ then follow the tutorial at https://docs.microsoft.com/en-us/azure/service-fabric-mesh/service-fabric-mesh-tutorial-create-dotnetcore and install the ML.NET package to try training an ML model.\r\n\r\nWhen the web project starts, a System.InvalidOperationException is thrown.\r\nInner Exception\r\nDllNotFoundException: Unable to load DLL 'CpuMathNative' or one of its dependencies: The specified module could not be found.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1823","RelatedDescription":"Closed issue \"Cannot use ML.NET in a Windows nano container\" (#1823)"},{"Id":"387560427","IsPullRequest":false,"CreatedAt":"2018-12-05T02:00:19","Actor":"singlis","Number":"1827","RawContent":null,"Title":"The trainer API for MLContext is inconsistent for learner in external nugets","State":"open","Body":"APIs are discoverable via the MLContext. There are some learners that are declared on the MLContext where other learners define an MLContext extension in cases where the learner is in a separate nuget package. \r\n\r\nThis results inconsistent API calls when accessing APIs, for example BinaryClassification vs Recommendation():\r\n```\r\nvar foo_bar = mlContext.BinaryClassification.Trainers;\r\nvar foo_moo_bar = mlContext.Recommendation().Trainers;\r\n```\r\n\r\nThe API discover ability should be consistent and work across nuget pakages.\r\nOriginal issue: #1806 \r\n\r\nThis issue may be the solution #1319 as it creates extensions for the trainers. ","Url":"https://github.com/dotnet/machinelearning/issues/1827","RelatedDescription":"Open issue \"The trainer API for MLContext is inconsistent for learner in external nugets\" (#1827)"},{"Id":"387557320","IsPullRequest":false,"CreatedAt":"2018-12-05T01:45:33","Actor":"singlis","Number":"1826","RawContent":null,"Title":"MatrixFactorization construction parameters are not consistent with other learners","State":"open","Body":"The ordering of parameters for the Matrix Factorization constructor is inconsistent with other trainers, specifically the Label column should be first before the matrixColumnIndex and matrixRowIndex as the matrixColumnIndex and matrixRowIndex are the feature columns:\r\n\r\n```csharp\r\n        /// <summary>\r\n        /// Initializing a new instance of <see cref=\"MatrixFactorizationTrainer\"/>.\r\n        /// </summary>\r\n        /// <param name=\"env\">The private instance of <see cref=\"IHostEnvironment\"/>.</param>\r\n        /// <param name=\"matrixColumnIndexColumnName\">The name of the column hosting the matrix's column IDs.</param>\r\n        /// <param name=\"matrixRowIndexColumnName\">The name of the column hosting the matrix's row IDs.</param>\r\n        /// <param name=\"labelColumn\">The name of the label column.</param>\r\n        /// <param name=\"advancedSettings\">A delegate to apply all the advanced arguments to the algorithm.</param>\r\n        public MatrixFactorizationTrainer(IHostEnvironment env,\r\n            string matrixColumnIndexColumnName,\r\n            string matrixRowIndexColumnName,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            Action<Arguments> advancedSettings = null)\r\n            : base(env, LoadNameValue)\r\n```\r\n\r\nWhere other trainers have the label column argument followed by feature column:\r\n```csharp\r\n public static SdcaBinaryTrainer StochasticDualCoordinateAscent(\r\n                this BinaryClassificationContext.BinaryClassificationTrainers ctx,\r\n                string labelColumn = DefaultColumnNames.Label,\r\n                string featureColumn = DefaultColumnNames.Features,\r\n                string weights = null,\r\n...)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1826","RelatedDescription":"Open issue \"MatrixFactorization construction parameters are not consistent with other learners\" (#1826)"},{"Id":"387550458","IsPullRequest":false,"CreatedAt":"2018-12-05T01:13:38","Actor":"wschin","Number":"1825","RawContent":null,"Title":"RffWorkout test is not stable and randomy fails during the build.","State":"open","Body":"As title. I failed multiple times for some unknown reasons. It needs to be improved for a more smooth merging process.","Url":"https://github.com/dotnet/machinelearning/issues/1825","RelatedDescription":"Open issue \"RffWorkout test is not stable and randomy fails during the build.\" (#1825)"},{"Id":"387452782","IsPullRequest":true,"CreatedAt":"2018-12-04T19:51:47","Actor":"yaeldekel","Number":"1821","RawContent":null,"Title":"ImagePixelExtractorTransform support for images with no alpha channel","State":"open","Body":"Fixes #1820 .","Url":"https://github.com/dotnet/machinelearning/pull/1821","RelatedDescription":"Open PR \"ImagePixelExtractorTransform support for images with no alpha channel\" (#1821)"},{"Id":"387452308","IsPullRequest":false,"CreatedAt":"2018-12-04T19:50:36","Actor":"yaeldekel","Number":"1820","RawContent":null,"Title":"ImagePixelExtractorTransform only supports images with pixel format Format32bppArgb","State":"open","Body":"We also need support for Format24bppRgb.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1820","RelatedDescription":"Open issue \"ImagePixelExtractorTransform only supports images with pixel format Format32bppArgb\" (#1820)"},{"Id":"387160651","IsPullRequest":true,"CreatedAt":"2018-12-04T15:55:58","Actor":"shauheen","Number":"1817","RawContent":null,"Title":"Cherry-pick for release 0.8","State":"closed","Body":"Cherry-pick into release for 0.8","Url":"https://github.com/dotnet/machinelearning/pull/1817","RelatedDescription":"Closed or merged PR \"Cherry-pick for release 0.8\" (#1817)"},{"Id":"387354345","IsPullRequest":false,"CreatedAt":"2018-12-04T15:55:16","Actor":"NektoDron","Number":"1819","RawContent":null,"Title":"CreatePredictionEngine<TSrc, TDst> is internal now. What is replacement?","State":"open","Body":"The CreatePredictionEngine method is internal now. What is replacement for trainedModel (ITransfomer) and scheme (SchemaDefinition)? MakePredictionFunction can't use SchemaDefinition and makes exception for me.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1819","RelatedDescription":"Open issue \"CreatePredictionEngine<TSrc, TDst> is internal now. What is replacement?\" (#1819)"},{"Id":"387293032","IsPullRequest":false,"CreatedAt":"2018-12-04T13:45:55","Actor":"NektoDron","Number":"1818","RawContent":null,"Title":"Can I use TimeSeries prediction with Vec<R4, N> input data?","State":"open","Body":"Is it possible in the future?\r\nNow it makes an exception \"The feature column has  type 'Vec<R4, 3>', but must be a float.\"","Url":"https://github.com/dotnet/machinelearning/issues/1818","RelatedDescription":"Open issue \"Can I use TimeSeries prediction with Vec<R4, N> input data?\" (#1818)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-07T05:30:49.3608956Z","RunDurationInMilliseconds":1267}