{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:15:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Today, we are making the fourth preview of Entity Framework Core 3.0 available on NuGet, alongside .NET Core 3.0 Preview 4 and ASP.NET Core 3.0 Preview 4. We encourage you to install this preview to...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-4/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 4","PublishedOn":"2019-04-18T22:13:01+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 4. It includes a chart control for Windows Forms, HTTP/2 support, GC updates to use less memory, support for CPU limits with Docker, the addition of...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-4/","RawContent":null},{"Title":"Announcing the .NET Framework 4.8","PublishedOn":"2019-04-18T20:12:27+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"We are thrilled to announce the release of the .NET Framework 4.8 today. It’s included in the Windows 10 May 2019 Update. .NET Framework 4.8 is also available on Windows 7+ and Windows Server 2008...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/","RawContent":null},{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9534982861","Type":"PullRequestEvent","CreatedAt":"2019-04-30T04:37:59","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23333","RelatedDescription":"Merged pull request \"Add more span-based Vector<T> ctors and CopyTo methods\" (#23333) at dotnet/coreclr","RelatedBody":"See https://github.com/dotnet/corefx/issues/30968 for full context.\r\n\r\nNote to reviewers: I put type checks around `{Try}CopyTo(ROS<byte>)` because otherwise you could have a weird edge case where code like `default(Vector<char>).CopyTo(new Span<byte>(new byte[64]))` compiles and runs, but pretty much all other methods on `Vector<char>` fail.\r\n\r\nThese checks aren't needed around methods which reference the static `Count` property directly (using the implicit _T_ from the current _Vector\\<T\\>_) because the type initializer already fails in those cases and causes the expected runtime error. For example, `default(Vector<char>).CopyTo(new char[64])` - which uses the existing `CopyTo(T[])` method - isn't protected by an explicit check, but the `Count` property access near the top of the method is enough to trigger the expected runtime failure."},{"Id":"9534712503","Type":"PullRequestEvent","CreatedAt":"2019-04-30T03:03:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24292","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#24292) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190427.7\r\n- **Date Produced**: 4/28/2019 2:53 AM\r\n- **Commit**: 4f27d0f84c17850ef02ea7b330908fddcdf73c86\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19227.7\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview6.19227.7\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190429.1\r\n- **Date Produced**: 4/29/2019 11:18 AM\r\n- **Commit**: 173a2a165316af9a4e211ceab8c8d9692de8a528\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19229.1\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview6.19229.1\r\n\r\n"},{"Id":"9534585931","Type":"PullRequestEvent","CreatedAt":"2019-04-30T02:21:06","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23931","RelatedDescription":"Merged pull request \"Move DefaultBinder.CanConvert.cs to shared\" (#23931) at dotnet/coreclr","RelatedBody":"Basically it's CoreRT implementation: https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/System/DefaultBinder.CanConvert.cs\r\n\r\nI can remove `Primitives` enum and fill `s_primitiveConversions` with raw values like [here](https://github.com/dotnet/coreclr/blob/d3e39bc2f81e3dbf9e4b96347f62b49d8700336c/src/vm/invokeutil.cpp#L33-L48).\r\n\r\nI wrote some relfection-based [benchmark](https://gist.github.com/EgorBo/b510c38f9491e0e8d38e9b755ecd18f3), it shows that managed impl is 1-2% faster.\r\n\r\ncc @jkotas @marek-safar "},{"Id":"9534570580","Type":"PullRequestEvent","CreatedAt":"2019-04-30T02:16:11","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24143","RelatedDescription":"Merged pull request \"Move NativeLibrary to the shared partition\" (#24143) at dotnet/coreclr","RelatedBody":"I'm taking the LibraryNameVariation helper from System.Runtime.Loader for the ride as well because it's a general purpose probing logic that is useful in a managed implementation of NativeLibrary."},{"Id":"9534518736","Type":"PullRequestEvent","CreatedAt":"2019-04-30T01:59:16","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24303","RelatedDescription":"Merged pull request \"Update CoreClr to preview6-27629-72 (master)\" (#24303) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9534419921","Type":"IssuesEvent","CreatedAt":"2019-04-30T01:26:36","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24310","RelatedDescription":"Opened issue \"[arm64] Test failed: System.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature\" (#24310) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress2_tst/34/\r\n\r\n**Failed tests:**\r\nSystem.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature\r\n\r\n**Log:**\r\n```\r\nSystem.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature [FAIL]\r\n      System.NullReferenceException : Object reference not set to an instance of an object.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1116,0): at System.Security.Cryptography.Xml.SignedXml.IsKeyTheCorrectAlgorithm(AsymmetricAlgorithm key, Type expectedType)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1020,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignedInfo(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(304,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignature(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(272,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\tests\\SignedXmlTest.cs(208,0): at System.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature()\r\n```"},{"Id":"9534379890","Type":"IssuesEvent","CreatedAt":"2019-04-30T01:13:13","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24309","RelatedDescription":"Opened issue \"[x86] Test failed: System.Tests.TimeSpanTests.FromMilliseconds\" (#24309) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_jitstressregs4/809/\r\n\r\n**Failed tests:**\r\nSystem.Tests.TimeSpanTests.FromMilliseconds\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.TimeSpanTests.FromMilliseconds(value: 1500.5, expected: 00:00:01.5010000) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 00:00:01.5010000\r\n        Actual:   00:00:01.5005000\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---d424a334\\_\\fx\\src\\System.Runtime\\tests\\System\\TimeSpanTests.cs(444,0): at System.Tests.TimeSpanTests.FromMilliseconds(Double value, TimeSpan expected)\r\n```"},{"Id":"9534284389","Type":"PullRequestEvent","CreatedAt":"2019-04-30T00:42:15","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24299","RelatedDescription":"Merged pull request \"Fix GetObjectReferences API when caller doesn't zero the param\" (#24299) at dotnet/coreclr","RelatedBody":"Found it while writing unit tests.\r\n\r\ncc @davmason @noahfalk "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9534591967","Type":"IssuesEvent","CreatedAt":"2019-04-30T02:22:59","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11267","RelatedDescription":"Closed issue \"The library 'hostpolicy.dll' required to execute the application was not found in\" (#11267) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\ncreate a hello world project:\r\n```\r\nmkdir ClassLib\r\ncd ClassLib\r\ndotnet new classlib\r\ncd ..\r\nmkdir Main \r\ncd Main\r\ndotnet new console\r\ndotnet  add reference ..\\ClassLib\\ClassLib.csproj\r\ndotnet build\r\ndotnet .\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll\r\n```\r\n```\r\n.\r\n├── ClassLib\r\n│   ├── Class1.cs\r\n│   └── ClassLib.csproj\r\n└── Main\r\n    ├── Main.csproj\r\n    └── Program.cs\r\n```\r\n\r\n## Expected  behavior\r\nmeaningful error message\r\n\r\n## Actual behavior\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\'.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\supei\\xd\\sims\\fooo\\Main> dotnet.exe --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9534581283","Type":"IssuesEvent","CreatedAt":"2019-04-30T02:19:35","Actor":"sillyousu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11267","RelatedDescription":"Opened issue \"The library 'hostpolicy.dll' required to execute the application was not found in\" (#11267) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\ncreate a hello world project:\r\n```\r\nmkdir ClassLib\r\ncd ClassLib\r\ndotnet new classlib\r\ncd ..\r\nmkdir Main \r\ncd Main\r\ndotnet new console\r\ndotnet  add reference ..\\ClassLib\\ClassLib.csproj\r\ndotnet build\r\ndotnet .\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll\r\n```\r\n```\r\n.\r\n├── ClassLib\r\n│   ├── Class1.cs\r\n│   └── ClassLib.csproj\r\n└── Main\r\n    ├── Main.csproj\r\n    └── Program.cs\r\n```\r\n\r\n## Expected  behavior\r\nmeaningful error message\r\n\r\n## Actual behavior\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\'.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\supei\\xd\\sims\\fooo\\Main> dotnet.exe --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9533927574","Type":"PullRequestEvent","CreatedAt":"2019-04-29T23:01:09","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11252","RelatedDescription":"Merged pull request \"MSBuild 16.1.68 (2.2.3xx)\" (#11252) at dotnet/cli","RelatedBody":"This hasn't yet been inserted into VS ([internal PR](https://dev.azure.com/devdiv/DevDiv/MSBuild/_git/VS/pullrequest/177485)), but the QB has indicated that he'll take it so I think it's safe to go ahead here."},{"Id":"9533818756","Type":"PullRequestEvent","CreatedAt":"2019-04-29T22:34:25","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11265","RelatedDescription":"Merged pull request \"Update Roslyn to `3.1.0-beta3-19223-09`.\" (#11265) at dotnet/cli","RelatedBody":"This commit updates Roslyn to `3.1.0-beta3-19223-09`."},{"Id":"9533799842","Type":"PullRequestEvent","CreatedAt":"2019-04-29T22:29:56","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11266","RelatedDescription":"Merged pull request \"Update Roslyn to 3.1.0-beta3-19223-09.\" (#11266) at dotnet/cli","RelatedBody":"This commit updates Roslyn to `3.1.0-beta3-19223-09`."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9529692862","Type":"PullRequestEvent","CreatedAt":"2019-04-29T12:03:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1170) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n"},{"Id":"9517610793","Type":"PullRequestEvent","CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1169) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n"},{"Id":"9517582905","Type":"PullRequestEvent","CreatedAt":"2019-04-26T12:03:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1169) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n"},{"Id":"9509862577","Type":"PullRequestEvent","CreatedAt":"2019-04-25T12:14:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1168) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9534725939","Type":"IssuesEvent","CreatedAt":"2019-04-30T03:07:58","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37262","RelatedDescription":"Closed issue \"CurrentPrincipal changed after await a task\" (#37262) at dotnet/corefx","RelatedBody":"I use Thread.CurrentPrincipal to store user's information, such as username, token, etc. through difference threads.\r\nIn .Net Framework 4.6.1, this works well.\r\nHowever, when I switch to .NetCore, the CurrentPrincipal changed after awaited a task.\r\n\r\n```\r\nclass Program\r\n{\r\n    static Random random = new Random();\r\n\r\n    static AsyncLocal<string> _AsyncLocalName = new AsyncLocal<string>();\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        for (var i = 0; i < 50; i++)\r\n        {\r\n            Task.Factory.StartNew((o) => Test(o), i.ToString());\r\n        }\r\n        Console.ReadLine();\r\n    }\r\n\r\n    static async void Test(object state)\r\n    {\r\n        var name = (string)state;\r\n        Thread.CurrentPrincipal = new GenericPrincipal(new GenericIdentity(name), new string[] { });\r\n        _AsyncLocalName.Value = name;\r\n        Debug.Assert(name == Thread.CurrentPrincipal.Identity.Name);    //always true\r\n        Debug.Assert(name == _AsyncLocalName.Value);                    //always true\r\n        await Task.Delay(random.Next(1000));\r\n        Debug.Assert(name == Thread.CurrentPrincipal.Identity.Name);    //may fail, even more, Thread.CurrentPrincipal may equal null\r\n        Debug.Assert(name == _AsyncLocalName.Value);                    //always true\r\n    }\r\n}\r\n```"},{"Id":"9534584028","Type":"PullRequestEvent","CreatedAt":"2019-04-30T02:20:29","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37290","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert,coreclr\" (#37290) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9534493441","Type":"PullRequestEvent","CreatedAt":"2019-04-30T01:50:59","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37288","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#37288) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @dschinde"},{"Id":"9534348519","Type":"IssuesEvent","CreatedAt":"2019-04-30T01:03:06","Actor":"AaronRobinsonMSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36039","RelatedDescription":"Closed issue \"do netcore3 can load com?(e.g.msscript.ocx)\" (#36039) at dotnet/corefx","RelatedBody":"I try to load msscript.ocx to netcore3 ConsoleApp.  build ok. but run fail!  Interop.MSScriptControl.dll was inclueded same folder with ConsoleApp   but still get error  like it   System.IO.FileNotFoundException:“Could not load file or assembly 'Interop.MSScriptControl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9535017273","Type":"PullRequestEvent","CreatedAt":"2019-04-30T04:50:59","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35336","RelatedDescription":"Merged pull request \"changed the way we report live analysis to task center\" (#35336) at dotnet/roslyn","RelatedBody":"previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.\r\n\r\nthis caused confusion since we report in task center that we are analyzing file \"A\" when it is actually \"analyzed\" not \"analyzing\"\r\n\r\nanother issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file \"A\" for a long time if that is only filed with errors.\r\n\r\nthis PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.\r\n\r\nnow we report file that solution crawler is analyzing.\r\n\r\nthere is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file \"A\". or we will not update UI at least 200ms apart and etc.\r\n\r\nsince it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.\r\n\r\nor show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.\r\n\r\nold\r\n![progress2](https://user-images.githubusercontent.com/1333179/56927361-dac5bf80-6a88-11e9-9930-77d93a2c6625.gif)\r\n\r\nnew\r\n![progress](https://user-images.githubusercontent.com/1333179/56919749-45213480-6a76-11e9-890d-bd57ff1e3bcd.gif)\r\n"},{"Id":"9534921211","Type":"IssuesEvent","CreatedAt":"2019-04-30T04:15:15","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35360","RelatedDescription":"Opened issue \"[Regression] Unloading a project/solution crashes Visual Studio if there is pending Roslyn work\" (#35360) at dotnet/roslyn","RelatedBody":"This was introduced in https://github.com/dotnet/roslyn/pull/34785.\r\n\r\nVisual Studio is crashing on me if I close a Solution before Roslyn has finished analyzing the project for Designer attributes via DesignerAttributeIncrementalAnalyzer.\r\n\r\n````\r\nObjectDisposedException\r\nobject name: 'Microsoft.VisualStudio.ProjectSystem.VS.Implementation.DisposingWrapper`1[[Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Designers.ProjectItemDesignerUpdateService+ProjectItemDesignerUpdateServiceImplementation, Microsoft.VisualStudio.ProjectSystem.VS.Implementation, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]'.\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.DisposingWrapper`1.get_Value()\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Designers.ProjectItemDesignerUpdateService.SetProjectItemDesignerTypeAsync(String projectItemPath, String designerType)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.<RegisterDesignerAttributeAsync>d__16.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.<RegisterDesignerAttributeAndSaveStateAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.<AnalyzeDocumentAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<>c__DisplayClass32_1`1.<<RunAnalyzersAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<GetOrDefaultAsync>d__34`2.MoveNext()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task.FinishStageTwo()\r\n   at System.Threading.Tasks.Task.Finish(Boolean)\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<>c__DisplayClass32_1`1+<<RunAnalyzersAsync>b__0>d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task.FinishStageTwo()\r\n   at System.Threading.Tasks.Task.Finish(Boolean)\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer+<AnalyzeDocumentAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer+<ScanDesignerAttributesOnRemoteHostIfPossibleAsync>d__12.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at Microsoft.CodeAnalysis.DesignerAttributes.AbstractDesignerAttributeService+<ScanDesignerAttributesAsync>d__5.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at Microsoft.CodeAnalysis.DesignerAttributes.AbstractDesignerAttributeService+<ScanDesignerAttributesInRemoteHostAsync>d__6.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions+<TryRunRemoteAsync>d__14`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx+<InvokeAsync>d__11`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at StreamJsonRpc.JsonRpc+<InvokeCoreAsync>d__93`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at System.Threading.Tasks.TaskCompletionSource`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult)\r\n   at StreamJsonRpc.JsonRpc+<>c__DisplayClass93_1`1[[Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeResult, Microsoft.CodeAnalysis.Features, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].<InvokeCoreAsync>b__0(StreamJsonRpc.JsonRpcMessage)\r\n   at StreamJsonRpc.JsonRpc+<HandleRpcAsync>d__103.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at Microsoft.VisualStudio.Threading.AwaitExtensions+TaskSchedulerAwaiter+<>c.<OnCompleted>b__5_0(System.Object)\r\n   at System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\n````"},{"Id":"9534914136","Type":"PullRequestEvent","CreatedAt":"2019-04-30T04:12:48","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34970","RelatedDescription":"Merged pull request \"Merge master to features/NullableDogfood\" (#34970) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9534880886","Type":"PullRequestEvent","CreatedAt":"2019-04-30T04:00:44","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35359","RelatedDescription":"Opened pull request \"Deadlock during shutdown of interactive window\" (#35359) at dotnet/roslyn","RelatedBody":"Fix: https://github.com/dotnet/roslyn/issues/35292"},{"Id":"9534553564","Type":"IssuesEvent","CreatedAt":"2019-04-30T02:10:33","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35358","RelatedDescription":"Opened issue \"Crash trying to unload project from large solution\" (#35358) at dotnet/roslyn","RelatedBody":"I have a large (~400 project) solution and I've been experimenting with manually unloading projects (by right-clicking and saying unload in the solution explorer) as an alternative to the Funnel extension that no longer works in VS 2017. Some projects unload no problem. Others take a really long time, or never finish unloading, or crash. I'm attaching a crash dump of a crash, and a recording of unloading the same project that didn't crash but did hang the UI for a long time. I'm guessing the task manager window I brought up during the unload isn't visible but you can see the process consume over 2.8GB of RAM at one point which is presumably right on the edge of crashing.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/236142/crash-trying-to-unload-project-from-large-solution.html\nVSTS ticketId: 602709_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"9534444073","Type":"IssuesEvent","CreatedAt":"2019-04-30T01:34:38","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24061","RelatedDescription":"Closed issue \"Typo in build.cmd options\" (#24061) at dotnet/roslyn","RelatedBody":"1. Clone Roslyn master\r\n2. build.cmd /?\r\n\r\n```\r\nSpecial Test options\r\n  -testBuildCorrectness     Run build correctness tests\r\n  -testDeterminism          Run determinism tests\r\n  -testPerfCorrectness      Run perf correctness tests\r\n  -testPerfCorrectness      Run perf tests\r\n```"},{"Id":"9534385307","Type":"PullRequestEvent","CreatedAt":"2019-04-30T01:14:58","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35355","RelatedDescription":"Closed pull request \"Merge dev16.1-vs-deps to master-vs-deps\" (#35355) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9534266320","Type":"IssuesEvent","CreatedAt":"2019-04-30T00:37:04","Actor":"333fred","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35151","RelatedDescription":"Closed issue \"Reinfer GetEnumerator type based on input type.\" (#35151) at dotnet/","RelatedBody":"```C#\r\nusing System.Collections;\r\nclass C\r\n{\r\n    void M1(IEnumerator e)\r\n    {\r\n        var enumerable1 = Create(e);\r\n        foreach (var i in enumerable1)\r\n        {\r\n        }\r\n\r\n        e = null; // 1\r\n        var enumerable2 = Create(e);\r\n        foreach (var i in enumerable2) // 2\r\n        {\r\n        }\r\n    }\r\n\r\n    void M2(IEnumerator? e)\r\n    {\r\n        var enumerable1 = Create(e);\r\n        foreach (var i in enumerable1) // 3\r\n        {\r\n        }\r\n\r\n        if (e == null) return;\r\n        var enumerable2 = Create(e);\r\n        foreach (var i in enumerable2)\r\n        {\r\n        }\r\n    }\r\n    static Enumerable<T> Create<T>(T t) where T : IEnumerator? => throw null!;\r\n}\r\n\r\nclass Enumerable<T> where T : IEnumerator?\r\n{\r\n    public T GetEnumerator() => throw null!;\r\n}\r\n```\r\n\r\nThis test should have warnings on the `foreach`s indicated. In addition to the `GetEnumerator` reinference, this also exposes that when we do the visit of the `foreach` expression, we need to explicitly remove implicit conversions from the expression and call `ApplyConversion` ourselves."},{"Id":"9534266332","Type":"PullRequestEvent","CreatedAt":"2019-04-30T00:37:04","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35316","RelatedDescription":"Merged pull request \"Update foreach based on nullable analysis\" (#35316) at dotnet/roslyn","RelatedBody":"This makes 2 changes:\r\n1. Reinfer the GetEnumerator method based on nullable analysis of the\r\nforeach expression type.\r\n2. Use that information to update the collection element type based on\r\nthat same analysis.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33257.\r\nFixes https://github.com/dotnet/roslyn/issues/35151.\r\n@dotnet/roslyn-compiler for review."},{"Id":"9534266320","Type":"IssuesEvent","CreatedAt":"2019-04-30T00:37:04","Actor":"333fred","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35151","RelatedDescription":"Closed issue \"Reinfer GetEnumerator type based on input type.\" (#35151) at dotnet/","RelatedBody":"```C#\r\nusing System.Collections;\r\nclass C\r\n{\r\n    void M1(IEnumerator e)\r\n    {\r\n        var enumerable1 = Create(e);\r\n        foreach (var i in enumerable1)\r\n        {\r\n        }\r\n\r\n        e = null; // 1\r\n        var enumerable2 = Create(e);\r\n        foreach (var i in enumerable2) // 2\r\n        {\r\n        }\r\n    }\r\n\r\n    void M2(IEnumerator? e)\r\n    {\r\n        var enumerable1 = Create(e);\r\n        foreach (var i in enumerable1) // 3\r\n        {\r\n        }\r\n\r\n        if (e == null) return;\r\n        var enumerable2 = Create(e);\r\n        foreach (var i in enumerable2)\r\n        {\r\n        }\r\n    }\r\n    static Enumerable<T> Create<T>(T t) where T : IEnumerator? => throw null!;\r\n}\r\n\r\nclass Enumerable<T> where T : IEnumerator?\r\n{\r\n    public T GetEnumerator() => throw null!;\r\n}\r\n```\r\n\r\nThis test should have warnings on the `foreach`s indicated. In addition to the `GetEnumerator` reinference, this also exposes that when we do the visit of the `foreach` expression, we need to explicitly remove implicit conversions from the expression and call `ApplyConversion` ourselves."},{"Id":"9534266318","Type":"IssuesEvent","CreatedAt":"2019-04-30T00:37:04","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33257","RelatedDescription":"Closed issue \"Need to re-infer collection and element type based on inferred collection type\" (#33257) at dotnet/roslyn","RelatedBody":"```C#\r\nusing System.Collections.Generic;\r\nclass C\r\n{\r\n    void M(object? o)\r\n    {\r\n        L(o)[0].ToString(); // Should get a warning\r\n        foreach (var x in L(o))\r\n        {\r\n            x.ToString(); // Should get a warning\r\n        }\r\n    }\r\n\r\n    List<T> L<T>(T t) => null!;\r\n}\r\n```\r\n\r\njcouv updated: Relates to https://github.com/dotnet/roslyn/issues/29964 (need to update indexer based on tracked type of receiver)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9534707662","Type":"PullRequestEvent","CreatedAt":"2019-04-30T03:02:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7331","RelatedDescription":"Closed pull request \"Implement NativeLibrary API on CoreRT\" (#7331) at dotnet/corert","RelatedBody":"The only thing that's missing is the DllImportResolver. It's easy, but I don't want to bloat this code review any more than is necessary. This is a lot of code."},{"Id":"9534584468","Type":"PullRequestEvent","CreatedAt":"2019-04-30T02:20:38","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7377","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7377) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9534568861","Type":"PullRequestEvent","CreatedAt":"2019-04-30T02:15:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7374","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7374) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"9534568137","Type":"PullRequestEvent","CreatedAt":"2019-04-30T02:15:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7375","RelatedDescription":"Merged pull request \"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02\" (#7375) at dotnet/corert","RelatedBody":"CC. @jaredpar, @agocke, @dotnet/nullablefc\r\n\r\nCoreRT side for dotnet/arcade#2640 and https://github.com/dotnet/buildtools/pull/2248"},{"Id":"9534126905","Type":"PullRequestEvent","CreatedAt":"2019-04-29T23:56:09","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7376","RelatedDescription":"Opened pull request \"Fixes for deficiencies in generic method & field encoding\" (#7376) at dotnet/corert","RelatedBody":"This change seems to be fixing one of the last CPAOT compilation\r\nbuckets by making the logic for emitting field signatures more\r\nrobust. I have also tried to improve the logic for choosing\r\nwhether to emit method instantiation stub to make the import cells\r\nbetter match between CPAOT and Crossgen.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9533918266","Type":"PullRequestEvent","CreatedAt":"2019-04-29T22:58:52","Actor":"tannergooding","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7375","RelatedDescription":"Opened pull request \"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02\" (#7375) at dotnet/corert","RelatedBody":"CC. @jaredpar, @agocke, @dotnet/nullablefc\r\n\r\nBuildTools side for dotnet/arcade#2640 and https://github.com/dotnet/buildtools/pull/2248"},{"Id":"9533454397","Type":"PullRequestEvent","CreatedAt":"2019-04-29T21:20:33","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7374","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7374) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9533444354","Type":"PullRequestEvent","CreatedAt":"2019-04-29T21:18:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7373","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7373) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sdmaclea"},{"Id":"9533078352","Type":"PullRequestEvent","CreatedAt":"2019-04-29T20:18:53","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7373","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7373) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9532627168","Type":"PullRequestEvent","CreatedAt":"2019-04-29T19:05:32","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7360","RelatedDescription":"Merged pull request \"Fix the TypeLoadException CPAOT compilation bucket\" (#7360) at dotnet/corert","RelatedBody":"I have fixed this by constructing TypeFixupSignature instances\r\nusing a new helper method TypeSignature (much like what we're\r\ndoing for methods) which calls the CheckCanGenerateEEType method\r\nupfront. This properly throws the exception to JIT so that it\r\ngets caught in compileMethodInternal and just suppresses jitting\r\nof a particular method rather than tearing down the entire\r\ncompilation process.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Down to 14 (compared to previous 24) ILC failures in CoreCLR Pri#1 tests."},{"Id":"9532391065","Type":"IssuesEvent","CreatedAt":"2019-04-29T18:28:31","Actor":"verelpode","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7372","RelatedDescription":"Opened issue \"Internal compiler error when .NET Native compiles __makeref, __refvalue, TypedReference\" (#7372) at dotnet/corert","RelatedBody":"When I put the following C# code in a UWP app in VS 2019 16.0.2, it works well when compiled for Debug.  However, when it is compiled for Release (.NET Native), then error ILT0005 and \"Internal compiler error\" occur.\r\n\r\n```\r\nclass MyTestTypedReference\r\n{\r\n\tprotected int fTestField0 = 123;\r\n\tprotected int fTestField1 = 456;\r\n\tprotected string fTestField2 = \"TestStr\";\r\n\tprotected int fTestField3 = 0;\r\n\r\n\tpublic unsafe void TestMakeTrArray()\r\n\t{\r\n\t\tSystem.TypedReference* trArray = stackalloc System.TypedReference[4];\r\n\t\ttrArray[0] = __makeref(fTestField0);\r\n\t\ttrArray[1] = __makeref(fTestField1);\r\n\t\ttrArray[2] = __makeref(fTestField2);\r\n\t\ttrArray[3] = __makeref(fTestField3);\r\n\t\tTestReceiveTrArray(trArray);\r\n\t}\r\n\r\n\tpublic unsafe void TestReceiveTrArray(System.TypedReference* inParams)\r\n\t{\r\n\t\tRealMethod1(__refvalue(inParams[0], int), __refvalue(inParams[1], int), __refvalue(inParams[2], string), out __refvalue(inParams[3], int));\r\n\t}\r\n\r\n\tpublic void RealMethod1(int inA, int inB, string inC, out int outD)\r\n\t{\r\n\t\toutD = 6000;\r\n\t}\r\n}\r\n\r\npublic unsafe delegate void TestDelegateWithTrArray(object inInstance, System.TypedReference* inParams);\r\n```\r\n\r\nThe error is:\r\n```\r\nInternal compiler error: Object reference not set to an instance of an object.\r\n```\r\n\r\nIf you comment out `TestReceiveTrArray` and compile the rest (meaning compile the __makeref stuff but not the __refvalue stuff), then the error is:\r\n```\r\nError ILT0005: 'C:\\Users\\XXXX\\.nuget\\packages\\runtime.win10-x64.microsoft.net.native.compiler\\2.1.8\\tools\\x64\\ilc\\Tools\\nutc_driver.exe \r\n@\"C:\\Users\\XXXX\\Documents\\TestUwpApp1\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\TestUwpApp1.rsp\"' \r\nreturned exit code -2147483645\r\n```\r\n\t\t\r\n[System.TypedReference](https://docs.microsoft.com/en-us/dotnet/api/System.TypedReference) is low-level but quite useful in certain scenarios such as dynamic programming, Reflection, late-binding / dynamic binding at runtime.\r\n\r\n`System.Delegate.DynamicInvoke(params object[])` and `System.Reflection.MethodBase.Invoke(object, object[])` are useful but costly, especially when executed many times in a loop.  The above code snippet is an example of how `TypedReference` can be used to dynamically execute a method without the overhead of boxing all of the parameters.  It works great when compiled to CIL, but not when compiled with .NET Native 2.1.8.\r\n\r\nIn some circumstances, an alternative to TypedReference is the DLR, but if I remember correctly, it was @jkotas who wrote somewhere something like the following comment about the DLR or DLR with .NAT Native: _\"This stuff is super fragile\"_.  I feel that it is too risky to switch over to a solution that relies upon the DLR.  The DLR is unnecessary in this particular case/project because TypedReference is a much simpler solution that works well.  Some projects do need the full functionality of the DLR, but other projects can get away with TypedReference.\r\n\r\nI very much hope that .NET Native will fully support TypedReference.  Given the choice between .NET Native supporting TypedReference or the DLR, then obviously TypedReference is far far easier to support and maintain than the big complex DLR.  \r\n"},{"Id":"9529394392","Type":"PullRequestEvent","CreatedAt":"2019-04-29T11:09:32","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7360","RelatedDescription":null,"RelatedBody":"I have fixed this by constructing TypeFixupSignature instances\r\nusing a new helper method TypeSignature (much like what we're\r\ndoing for methods) which calls the CheckCanGenerateEEType method\r\nupfront. This properly throws the exception to JIT so that it\r\ngets caught in compileMethodInternal and just suppresses jitting\r\nof a particular method rather than tearing down the entire\r\ncompilation process.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Down to 14 (compared to previous 24) ILC failures in CoreCLR Pri#1 tests."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9534259987","Type":"IssuesEvent","CreatedAt":"2019-04-30T00:35:09","Actor":"sdmaclea","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3185","RelatedDescription":"Closed issue \"ProjectReference to classlib does not layout satellites correctly.\" (#3185) at dotnet/sdk","RelatedBody":"Observed in the tip of corefx\r\n\r\nGiven a project reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\nCulture directory is absent in target layout.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nReported in dotnet/corefx#37246.  Relevant code above is from dotnet/corefx#37248\r\n"},{"Id":"9534083099","Type":"PullRequestEvent","CreatedAt":"2019-04-29T23:43:29","Actor":"sbomer","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3188","RelatedDescription":"Opened pull request \"Fix dotnet-core feed url in Versions.props\" (#3188) at dotnet/sdk","RelatedBody":"This fixes some build failures I was seeing locally, where the\r\nMicrosoft.NET.HostModel package was not found.\r\n\r\nI wonder if it may be related to the restore failures we were seeing elsewhere @peterhuene."},{"Id":"9533501336","Type":"PullRequestEvent","CreatedAt":"2019-04-29T21:29:03","Actor":"sbomer","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3187","RelatedDescription":"Opened pull request \"Update stage0\" (#3187) at dotnet/sdk","RelatedBody":"To get the linker fix in https://github.com/mono/linker/pull/551\r\n/cc @swaroop-sridhar"},{"Id":"9533410380","Type":"PullRequestEvent","CreatedAt":"2019-04-29T21:12:49","Actor":"etbyrd","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2994","RelatedDescription":null,"RelatedBody":"This is a fix for: https://github.com/dotnet/project-system/issues/4355\r\nI tested this locally and ensured that projects built with COM references but I am not sure if anything is blocking this on the SDK side. "}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-04-27T20:23:57","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"open","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Open PR \"Add AngleSharp\" (#143)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"438051298","IsPullRequest":true,"CreatedAt":"2019-04-30T03:03:39","Actor":"dotnet-maestro[bot]","Number":"24292","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190427.7\r\n- **Date Produced**: 4/28/2019 2:53 AM\r\n- **Commit**: 4f27d0f84c17850ef02ea7b330908fddcdf73c86\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19227.7\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview6.19227.7\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190429.1\r\n- **Date Produced**: 4/29/2019 11:18 AM\r\n- **Commit**: 173a2a165316af9a4e211ceab8c8d9692de8a528\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19229.1\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview6.19229.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24292","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#24292)"},{"Id":"438519216","IsPullRequest":true,"CreatedAt":"2019-04-30T01:59:16","Actor":"dotnet-maestro-bot","Number":"24303","RawContent":null,"Title":"Update CoreClr to preview6-27629-72 (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24303","RelatedDescription":"Closed or merged PR \"Update CoreClr to preview6-27629-72 (master)\" (#24303)"},{"Id":"438570491","IsPullRequest":false,"CreatedAt":"2019-04-30T01:26:36","Actor":"VincentBu","Number":"24310","RawContent":null,"Title":"[arm64] Test failed: System.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress2_tst/34/\r\n\r\n**Failed tests:**\r\nSystem.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature\r\n\r\n**Log:**\r\n```\r\nSystem.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature [FAIL]\r\n      System.NullReferenceException : Object reference not set to an instance of an object.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1116,0): at System.Security.Cryptography.Xml.SignedXml.IsKeyTheCorrectAlgorithm(AsymmetricAlgorithm key, Type expectedType)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1020,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignedInfo(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(304,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignature(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(272,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey)\r\n        D:\\j\\workspace\\arm64_cross_c---3be10518\\_\\fx\\src\\System.Security.Cryptography.Xml\\tests\\SignedXmlTest.cs(208,0): at System.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24310","RelatedDescription":"Open issue \"[arm64] Test failed: System.Security.Cryptography.Xml.Tests.SignedXmlTest.AsymmetricRSASignature\" (#24310)"},{"Id":"438568319","IsPullRequest":false,"CreatedAt":"2019-04-30T01:13:12","Actor":"VincentBu","Number":"24309","RawContent":null,"Title":"[x86] Test failed: System.Tests.TimeSpanTests.FromMilliseconds","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_jitstressregs4/809/\r\n\r\n**Failed tests:**\r\nSystem.Tests.TimeSpanTests.FromMilliseconds\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.TimeSpanTests.FromMilliseconds(value: 1500.5, expected: 00:00:01.5010000) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 00:00:01.5010000\r\n        Actual:   00:00:01.5005000\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---d424a334\\_\\fx\\src\\System.Runtime\\tests\\System\\TimeSpanTests.cs(444,0): at System.Tests.TimeSpanTests.FromMilliseconds(Double value, TimeSpan expected)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24309","RelatedDescription":"Open issue \"[x86] Test failed: System.Tests.TimeSpanTests.FromMilliseconds\" (#24309)"},{"Id":"438371338","IsPullRequest":true,"CreatedAt":"2019-04-30T00:42:14","Actor":"mjsabby","Number":"24299","RawContent":null,"Title":"Fix GetObjectReferences API when caller doesn't zero the param","State":"closed","Body":"Found it while writing unit tests.\r\n\r\ncc @davmason @noahfalk ","Url":"https://github.com/dotnet/coreclr/pull/24299","RelatedDescription":"Closed or merged PR \"Fix GetObjectReferences API when caller doesn't zero the param\" (#24299)"},{"Id":"438078087","IsPullRequest":true,"CreatedAt":"2019-04-30T00:38:50","Actor":"dschinde","Number":"24293","RawContent":null,"Title":"Improve pref of `Array.IndexOf()` for certain `T`.","State":"closed","Body":"Applies changes to `Array.IndexOf()` and `Array.LastIndexOf()` similar\r\nto the changes made in #20855, so that types other than `byte` and\r\n`char` can use use the fast vectorized path.\r\n\r\nAlso allows 32-bit and 64-bit types for which\r\n`RuntimeHelpers.IsBitwiseEquatable<T>()` returns `true` to use the\r\nfaster implementation of `IndexOf` and `LastIndexOf` from\r\n`MemoryExtensions`.","Url":"https://github.com/dotnet/coreclr/pull/24293","RelatedDescription":"Closed or merged PR \"Improve pref of `Array.IndexOf()` for certain `T`.\" (#24293)"},{"Id":"438459767","IsPullRequest":true,"CreatedAt":"2019-04-30T00:38:05","Actor":"jkotas","Number":"24302","RawContent":null,"Title":"Workaround memset alignment sensitivity","State":"closed","Body":"memset is up to 2x slower on misaligned block on some types of hardware. The problem is uneven performance of \"rep stosb\"\r\nused to implement the memset in some cases. The exact matrix on when it is slower and by how much is very complex.\r\n\r\nThis change workarounds the issue by aligning the memory block before it is passed to memset and filling in the potential misaligned\r\npart manually. This workaround will regress performance by a few percent (<10%) in some cases, but we will gain up to 2x improvement\r\nin other cases.\r\n\r\nFixes #24300","Url":"https://github.com/dotnet/coreclr/pull/24302","RelatedDescription":"Closed or merged PR \"Workaround memset alignment sensitivity\" (#24302)"},{"Id":"438395623","IsPullRequest":false,"CreatedAt":"2019-04-30T00:38:05","Actor":"jkotas","Number":"24300","RawContent":null,"Title":"Array.Clear performance is sensitive to alignment","State":"closed","Body":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    static unsafe byte[] AllocateArray(int size, int unalignment)\r\n    {\r\n        Random r = new Random();\r\n\r\n        for (;;)\r\n        {\r\n             byte[] a = new byte[size];\r\n             GCHandle handle = GCHandle.Alloc(a, GCHandleType.Pinned);\r\n             fixed (void *p = a) {\r\n                 if (((int)p & 0x1F) == unalignment) return a;\r\n             }\r\n             handle.Free();\r\n             GC.KeepAlive(new byte[r.Next(0x1F)]);\r\n        }\r\n    }\r\n\r\n    private byte[] _arr8192 = AllocateArray(8192, 0);\r\n    private byte[] _arr8192Unaligned = AllocateArray(8192, 8);\r\n    [Benchmark] public void Clear8192() => Array.Clear(_arr8192, 0, _arr8192.Length);\r\n    [Benchmark] public void Clear8192Unaligned() => Array.Clear(_arr8192Unaligned, 0, _arr8192Unaligned.Length);\r\n}\r\n```\r\n\r\nResult on Windows x64:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Xeon CPU E5-2630 v3 2.40GHz, 1 CPU, 16 logical and 8 physical cores\r\n.NET Core SDK=3.0.100-preview5-011472\r\n  [Host]     : .NET Core 3.0.0-preview5-27619-01 (CoreCLR 4.6.27618.74, CoreFX 4.700.19.21810), 64bit RyuJIT\r\n  DefaultJob : .NET Core 3.0.0-preview5-27619-01 (CoreCLR 4.6.27618.74, CoreFX 4.700.19.21810), 64bit RyuJIT\r\n\r\n\r\n|             Method |     Mean |     Error |    StdDev |\r\n|------------------- |---------:|---------:|---------:|\r\n|          Clear8192 | 106.8 ns | 3.309 ns | 4.850 ns |\r\n| Clear8192Unaligned | 190.4 ns | 1.450 ns | 1.211 ns |\r\n```\r\n\r\nFound by @stephentoub ","Url":"https://github.com/dotnet/coreclr/issues/24300","RelatedDescription":"Closed issue \"Array.Clear performance is sensitive to alignment\" (#24300)"},{"Id":"438559765","IsPullRequest":true,"CreatedAt":"2019-04-30T00:23:56","Actor":"davidwrighton","Number":"24308","RawContent":null,"Title":"Copy all neutral resources","State":"open","Body":"Fix #24301, by implementing general neutral resource copying","Url":"https://github.com/dotnet/coreclr/pull/24308","RelatedDescription":"Open PR \"Copy all neutral resources\" (#24308)"},{"Id":"438553627","IsPullRequest":true,"CreatedAt":"2019-04-29T23:53:58","Actor":"jbhensley","Number":"24307","RawContent":null,"Title":"Added overloads to Path.Join","State":"open","Body":"Path.Join overloads as per corefx [32312](https://github.com/dotnet/corefx/issues/32312)","Url":"https://github.com/dotnet/coreclr/pull/24307","RelatedDescription":"Open PR \"Added overloads to Path.Join\" (#24307)"},{"Id":"438549942","IsPullRequest":true,"CreatedAt":"2019-04-29T23:36:05","Actor":"RussKeldorph","Number":"24306","RawContent":null,"Title":"Disable CallbackStressTest against #24305","State":"open","Body":"#24305","Url":"https://github.com/dotnet/coreclr/pull/24306","RelatedDescription":"Open PR \"Disable CallbackStressTest against #24305\" (#24306)"},{"Id":"438548502","IsPullRequest":false,"CreatedAt":"2019-04-29T23:29:21","Actor":"RussKeldorph","Number":"24305","RawContent":null,"Title":"Interop/NativeLibraryResolveCallback/CallbackStressTest/CallbackStressTest.sh Timed Out","State":"open","Body":"https://mc.dot.net/#/user/dotnet-mc-bot-2/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190429.72/workItem/Interop/analysis/xunit/Interop_NativeLibraryResolveCallback._CallbackStressTest_CallbackStressTest_~2F_CallbackStressTest_CallbackStressTest_sh\r\n\r\n**Affected queues**\r\nOSX.1013.Amd64-x64-\r\nOSX.1012.Amd64-x64-","Url":"https://github.com/dotnet/coreclr/issues/24305","RelatedDescription":"Open issue \"Interop/NativeLibraryResolveCallback/CallbackStressTest/CallbackStressTest.sh Timed Out\" (#24305)"},{"Id":"438534833","IsPullRequest":true,"CreatedAt":"2019-04-29T22:31:47","Actor":"sywhang","Number":"24304","RawContent":null,"Title":"Add threading-related runtime counters","State":"open","Body":"Adding runtime counters for getting these threading metrics:\r\n\r\n- ThreadPool Thread Count\r\n- ThreadPool queue length\r\n- Contention count\r\n","Url":"https://github.com/dotnet/coreclr/pull/24304","RelatedDescription":"Open PR \"Add threading-related runtime counters\" (#24304)"},{"Id":"437992888","IsPullRequest":true,"CreatedAt":"2019-04-29T21:39:19","Actor":"tannergooding","Number":"24289","RawContent":null,"Title":"Resolves an assert around Sse41.ConvertToVector128Int* and Avx2.ConvertToVector256Int*","State":"closed","Body":"This resolves an issue with `Sse41.ConvertToVector128Int*` and `Avx2.ConvertToVector256Int*` where the new overloads that took a pointer were not being handled correctly.\r\n\r\nIt also adds tests covering the new overloads as it looks like I missed them in the test cleanup PR.","Url":"https://github.com/dotnet/coreclr/pull/24289","RelatedDescription":"Closed or merged PR \"Resolves an assert around Sse41.ConvertToVector128Int* and Avx2.ConvertToVector256Int*\" (#24289)"},{"Id":"437882874","IsPullRequest":true,"CreatedAt":"2019-04-29T21:15:32","Actor":"briansull","Number":"24283","RawContent":null,"Title":"Updated fixes for IBC profile data on Linux ","State":"closed","Body":"Added public static function GetManagedCommandLine() and SaveManagedCommandLine()\r\n\r\nMoved GetManagedCommandLine and SaveManagedCommandLine to ceeload to link\r\n\r\nDisabled the setup for BBSweep on Linux as the PAL doesn’t support process named objects\r\n\r\n    Added check for GetManagedCommandLine() returning a nullptr in ProfileDataAllocateScenarioInfo\r\n\r\n    Moved call to ReleaseManagedCommandLine() to EEShutDownHelper","Url":"https://github.com/dotnet/coreclr/pull/24283","RelatedDescription":"Closed or merged PR \"Updated fixes for IBC profile data on Linux \" (#24283)"},{"Id":"437877044","IsPullRequest":true,"CreatedAt":"2019-04-29T19:09:09","Actor":"erozenfeld","Number":"24282","RawContent":null,"Title":" Fix for a jit liveness bug.","State":"closed","Body":"`fgRemoveDeadStore` has special logic for removing dead assignments\r\nwhose rhs was of type `TYP_STRUCT`:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/311b5e2fe413c6c74a2a3680ab54d8a978651472/src/jit/liveness.cpp#L2264-L2274\r\n\r\nThat logic was applied to \"normal\"\r\nassignments (i.e., direct children of `GT_STMT`) but not to \"internal\"\r\nassignments (e.g., children of `GT_COMMA`).\r\nThe test case has an internal assignment and, because this logic wasn't\r\napplied, we ended up with a standalone `GT_IND` of type `TYP_STRUCT`\r\nthat the register allocator can't handle.\r\n\r\nThis change apples the missing logic to \"internal\" assignments.\r\n\r\nThe second commit cleans up `fgRemoveDeadStore`.\r\n\r\nFixes #24253.","Url":"https://github.com/dotnet/coreclr/pull/24282","RelatedDescription":"Closed or merged PR \" Fix for a jit liveness bug.\" (#24282)"},{"Id":"438415370","IsPullRequest":false,"CreatedAt":"2019-04-29T17:04:25","Actor":"dagood","Number":"24301","RawContent":null,"Title":"Crossgen removes \"Win32Manifest\" native resource from System.Windows.Forms.dll","State":"open","Body":"Running crossgen on System.Windows.Forms seems to remove the Win32Manifest, causing errors at runtime that look like this: https://github.com/dotnet/winforms/issues/116.\r\n\r\nFor 3.0 Preview 5, I merged a workaround that disables crossgen on `System.Windows.Forms.dll`: https://github.com/dotnet/core-setup/pull/6128. Benefits of crossgen are noticeable in the WindowsDesktop shared framework so disabling it is not ideal. I haven't ported the fix to `master` hoping for a fix. (If it doesn't seem like one will land for Preview 6, I'll port the workaround to keep it intact.)\r\n\r\nDLL before and after crossgen that exhibits the error: [System.Windows.Forms-compare.zip](https://github.com/dotnet/coreclr/files/3128344/System.Windows.Forms-compare.zip)\r\n\r\nI have a 80 MB zip \"test rig\" that has all the dependencies required to crossgen this assembly--let me know offline if you want this and I can send a link.\r\n\r\n@ericstj have you looked into the DLLs? I tried an \"ordinary\" ildasm and compare, but not sure where this shows up and I didn't see anything.\r\n\r\n/cc @brianrob @dreddy-work @fadimounir @sergiy-k @davidwrighton ","Url":"https://github.com/dotnet/coreclr/issues/24301","RelatedDescription":"Open issue \"Crossgen removes \"Win32Manifest\" native resource from System.Windows.Forms.dll\" (#24301)"},{"Id":"437884223","IsPullRequest":true,"CreatedAt":"2019-04-29T16:27:12","Actor":"jkoritzinsky","Number":"24284","RawContent":null,"Title":"Restore IBCMerge using an authenticated service connection","State":"closed","Body":"The IBCMerge package is stored on an authenticated feed. As a result, we need to pass along the authentication information to the restore process. This PR implements a method similar to CoreFX where we use a pre-made service connection to pull down the package.\r\n\r\nHowever, to use a service connection, we need to do this step as a separate step on AzDO. Additionally, we need a .NET CLI installed before doing this step. So, this PR also installs a .NET CLI onto the system separate from the one we use during build (we set `DOTNET_MULTILEVEL_LOOKUP=0` already in our scripts so we don't do multi-level lookup).\r\n\r\nFixes #24247 \r\n\r\nSee https://dev.azure.com/dnceng/internal/_build/results?buildId=171677 for succeeding official builds with IBC enabled.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24284","RelatedDescription":"Closed or merged PR \"Restore IBCMerge using an authenticated service connection\" (#24284)"},{"Id":"438322969","IsPullRequest":false,"CreatedAt":"2019-04-29T13:43:48","Actor":"filipnavara","Number":"24298","RawContent":null,"Title":"[arm64] membarrier causing silent crashes/freezes","State":"open","Body":"I was trying to run CoreCLR on Galaxy S10 phone in the Linux-on-Dex environment (essentially Ubuntu 16.04 Docker container). Almost every non-trivial operation results in silent crash, including running `dotnet --version`.\r\n\r\nRunning under `strace` seems to suggest that the problem is the `membarrier` syscall introduced with PRs #20949 and #23778. The last line I can see in the log is the following:\r\n```\r\nmembarrier(MEMBARRIER_CMD_QUERY, 0\r\n```\r\nAfter that the process freezes and it's listed as `<defunct>` in `ps`.\r\n\r\nI wrote a test application to verify the assumption about `membarrier` being the culprit. Calling it through `syscall` in the same way CoreCLR does results in `SIGSYS` signal:\r\n```\r\nmembarrier(MEMBARRIER_CMD_QUERY, 0 <unfinished ...>\r\n+++ killed by SIGSYS +++\r\nBad system call\r\n```\r\n\r\nThe underlying kernel version reported by `uname -a` is `Linux localhost 4.14.85-15820661 #1 SMP PREEMPT Tue Apr 16 17:32:20 KST 2019 aarch64 aarch64 aarch64 GNU/Linux`.\r\n\r\n/cc @VSadov @janvorli @tmds ","Url":"https://github.com/dotnet/coreclr/issues/24298","RelatedDescription":"Open issue \"[arm64] membarrier causing silent crashes/freezes\" (#24298)"},{"Id":"438175896","IsPullRequest":false,"CreatedAt":"2019-04-29T07:06:36","Actor":"cincuranet","Number":"24297","RawContent":null,"Title":"Exceptions in methods called from Finalize","State":"open","Body":"The [documentation for Finalize method](https://docs.microsoft.com/en-us/dotnet/api/system.object.finalize?view=netcore-2.2) states:\r\n>If any exceptions thrown by methods called from the Finalize method are unhandled by the Finalize method, the runtime assumes that the Finalize method returned and continues to call the Finalize methods of other objects. \r\n\r\nBut I don't see this behavior happening. I created a simple class with finalizer:\r\n```csharp\r\nclass FinalizeMe\r\n{\r\n\t~FinalizeMe()\r\n\t{\r\n\t\tConsole.WriteLine($\"In finalizer {nameof(FinalizeMe)}\");\r\n\t\tThrow();\r\n\t\tConsole.WriteLine(\"After exception\");\r\n\t}\r\n\r\n\t[MethodImpl(MethodImplOptions.NoInlining)]\r\n\tvoid Throw()\r\n\t{\r\n\t\tthrow new ArgumentException();\r\n\t}\r\n}\r\n```\r\n\r\nAnd simulating what the docs says should happen:\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n\tTest();\r\n\tGC.Collect();\r\n\tGC.WaitForPendingFinalizers();\r\n}\r\n\r\nstatic void Test()\r\n{\r\n\tvar a = new FinalizeMe();\r\n\tvar b = new FinalizeMe();\r\n\tConsole.WriteLine(a);\r\n\tConsole.WriteLine(b);\r\n}\r\n```\r\n\r\nAnd with this I see only one `In finalizer FinalizeMe` being printed on console. Basically I just see is:\r\n> If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process and no active try/finally blocks or finalizers are executed. This behavior ensures process integrity if the finalizer cannot free or destroy resources. \r\n\r\nIs the documentation correct?","Url":"https://github.com/dotnet/coreclr/issues/24297","RelatedDescription":"Open issue \"Exceptions in methods called from Finalize\" (#24297)"},{"Id":"438121055","IsPullRequest":false,"CreatedAt":"2019-04-29T01:09:18","Actor":"VincentBu","Number":"24296","RawContent":null,"Title":"[x64] Could not find/download: \".NET Core SDK\" with version = 2.1.503","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/illink/job/x64_checked_windows_nt_illink/710/\r\n\r\n**Log:**\r\n```\r\nCould not find/download: \".NET Core SDK\" with version = 2.1.503\r\nRefer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core \r\nsupport\r\nAt D:\\j\\workspace\\x64_checked_w---d3ca6d42\\.dotnet\\dotnet-install.ps1:585 \r\nchar:5\r\n+     throw \"Could not find/download: `\"$assetName`\" with version = \r\n$SpecificVersi ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~\r\n    + CategoryInfo          : OperationStopped: (Could not find/...ET Core sup \r\n   port:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : Could not find/download: \".NET Core SDK\" with ve \r\n   rsion = 2.1.503\r\n    Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core  \r\n   support\r\n \r\nERROR: Could not install dotnet cli correctly. \r\n```","Url":"https://github.com/dotnet/coreclr/issues/24296","RelatedDescription":"Open issue \"[x64] Could not find/download: \".NET Core SDK\" with version = 2.1.503\" (#24296)"},{"Id":"438091885","IsPullRequest":true,"CreatedAt":"2019-04-28T19:36:03","Actor":"cshung","Number":"24295","RawContent":null,"Title":"[WIP] Make sure variable live range for prolog is reported first","State":"open","Body":"This is a follow-up of @BrianBohe work.\r\n\r\nWhen we are reporting the variable live range under `USING_VARIABLE_LIVE_RANGE`, we were reporting the live ranges related to prolog later than what we would have done under `USING_SCOPE_INFO`. Ideally, we should report the live ranges in prolog first.\r\n\r\nThe last commit to enable `USING_VARIABLE_LIVE_RANGE` is there for testing only. It will be removed when the testing is done.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24295","RelatedDescription":"Open PR \"[WIP] Make sure variable live range for prolog is reported first\" (#24295)"},{"Id":"438087133","IsPullRequest":true,"CreatedAt":"2019-04-28T18:44:32","Actor":"mikedn","Number":"24294","RawContent":null,"Title":"[WIP] Stop using LIST nodes in GenTreeCall","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24294","RelatedDescription":"Open PR \"[WIP] Stop using LIST nodes in GenTreeCall\" (#24294)"},{"Id":"438011872","IsPullRequest":true,"CreatedAt":"2019-04-28T04:24:47","Actor":"mjsabby","Number":"24291","RawContent":null,"Title":"Add option to only notify profiler of LOH allocations","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/24217.","Url":"https://github.com/dotnet/coreclr/pull/24291","RelatedDescription":"Open PR \"Add option to only notify profiler of LOH allocations\" (#24291)"},{"Id":"438000617","IsPullRequest":false,"CreatedAt":"2019-04-28T01:29:32","Actor":"VincentBu","Number":"24290","RawContent":null,"Title":"[arm64] Test failed: System.Xml.Tests.CNameTableTestModule.RunTests","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/32/\r\n\r\n**Failed tests:**\r\nSystem.Xml.Tests.CNameTableTestModule.RunTests\r\n\r\n**Log:**\r\n```\r\nSystem.Xml.Tests.CNameTableTestModule.RunTests(testCase: Add an existing atomized string (with Max string for test: 1-2M), valid offset and valid length) [FAIL]\r\n      System.Xml.XmlException : The '.' character, hexadecimal value 0x00, cannot be included in a name. Line 2, position 717181.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2746,0): at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2725,0): at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2694,0): at System.Xml.XmlTextReaderImpl.Throw(Int32 pos, String res, String[] args)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(4491,0): at System.Xml.XmlTextReaderImpl.ParseElement()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(4240,0): at System.Xml.XmlTextReaderImpl.ParseElementContent()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(1202,0): at System.Xml.XmlTextReaderImpl.Read()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\tests\\Readers\\NameTable\\XmlNameTable.cs(779,0): at System.Xml.Tests.TCRecordNameTableAdd.Variation_8()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\cvariation.cs(77,0): at OLEDB.Test.ModuleCore.CVariation.Execute()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\ctestcase.cs(132,0): at OLEDB.Test.ModuleCore.CTestCase.<>c__DisplayClass7_1.<TestCases>b__0()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\XunitTestCase.cs(34,0): at OLEDB.Test.ModuleCore.XunitTestCase.Run()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\tests\\Readers\\NameTable\\CNameTableTestModule.cs(16,0): at System.Xml.Tests.CNameTableTestModule.RunTests(XunitTestCase testCase)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24290","RelatedDescription":"Open issue \"[arm64] Test failed: System.Xml.Tests.CNameTableTestModule.RunTests\" (#24290)"},{"Id":"437908612","IsPullRequest":true,"CreatedAt":"2019-04-27T21:21:09","Actor":"GrabYourPitchforks","Number":"24286","RawContent":null,"Title":"Add missing check for UTF-16 low surrogate char at start of buffer","State":"closed","Body":"(Found by the fuzzing run. Regression in Preview 5.)\r\n\r\nThe method `Encoding.UTF8.GetByteCount(chars)` can sometimes return an incorrect value if __all__ of the following conditions hold:\r\n\r\n* The first character of the UTF-16 input string must be a standalone low surrogate code unit, or all characters in the string before this standalone low surrogate code unit must have been ASCII characters. (There are other variations on this pattern, but this is the easiest way to trigger the bug.)\r\n* Including this standalone UTF-16 low surrogate code unit, enough data remains in the input string to fill a `Vector<ushort>`.\r\n* A custom replacement fallback mechanism has been set on the `UTF8Encoding` instance.\r\n* SSE2 is not available, perhaps because the application has been precompiled using crossgen or because the current arch is not x86-based.\r\n\r\nThe easiest way to repro the issue is to run the below console application with the environment variable `COMPLUS_ENABLESSE2=0` set.\r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n{\r\n    var encoding = Encoding.GetEncoding(\"utf-8\", new EncoderReplacementFallback(\"BAD!\"), DecoderFallback.ExceptionFallback);\r\n    char[] chars = new char[Vector<ushort>.Count];\r\n    chars[0] = '\\uD800';\r\n    Console.WriteLine(encoding.GetByteCount(chars));    // outputs '11', this is correct\r\n\r\n    chars[0] = '\\uDC00';\r\n    Console.WriteLine(encoding.GetByteCount(chars));    // outputs '10', should be '11'\r\n    return;\r\n}\r\n```\r\n\r\nThis is very similar to https://github.com/dotnet/coreclr/pull/24235 in terms of how it affects real-world applications. First, the bug manifests only in the \"count the number of output bytes\" step of the `GetBytes` method. The actual transcoding operation (where the output array is populated) does not have the same bug.\r\n\r\nSecond, the bug does not manifest unless the fallback mechanism has been replaced on the `UTF8Encoding` instance. The reason for this is that the byte counting step incorrectly reports that the invalid standalone UTF-16 surrogate code unit `U+DC00` would fall into the range of scalar values which requires 3 output UTF-8 bytes (`U+0800..U+FFFF`). Since the default replacement mechanism is to replace standalone surrogate code units with the replacement character `U+FFFD` - which is already 3 UTF-8 bytes - the count ends up being correct anyway.\r\n\r\nThird, the input must already be malformed in a very particular fashion. It's extraordinarily difficult for malformed UTF-16 data to make its way into an application using Framework-provided APIs via a networking layer. An app running as a network-facing service would need to go out of its way to allow malformed input to make its way into the system, and in doing so they've almost certainly introduced other security vulnerabilites into the app. (It may be more viable to send malformed input via RPC to an app running on the same machine.)\r\n\r\nFinally, the application must be targeting ARM, or the environment variable which disables SSE2 intrinsics must have been set, or the application must be using crossgen precompilation (which would disable hardware intrinsics entirely).\r\n\r\nFor the above reasons I'm not pushing for this to be cherry-picked into the Preview 5 branch.","Url":"https://github.com/dotnet/coreclr/pull/24286","RelatedDescription":"Closed or merged PR \"Add missing check for UTF-16 low surrogate char at start of buffer\" (#24286)"},{"Id":"437967823","IsPullRequest":true,"CreatedAt":"2019-04-27T17:50:50","Actor":"am11","Number":"24288","RawContent":null,"Title":"Compute sizeof array instead of pointer","State":"open","Body":"gcc8 and clang8-pre has implemented `Wsizeof-pointer-div` analysis, which identifies two issues on amd64.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24288","RelatedDescription":"Open PR \"Compute sizeof array instead of pointer\" (#24288)"},{"Id":"437956325","IsPullRequest":false,"CreatedAt":"2019-04-27T15:58:39","Actor":"sdmaclea","Number":"24287","RawContent":null,"Title":"PackageReference of classlib with does not layout satellites correctly","State":"closed","Body":"Given a package reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nThis needs to be reported elsewhere.  MSBuild ? SDK ? \r\n@tarekgh @jkotas","Url":"https://github.com/dotnet/coreclr/issues/24287","RelatedDescription":"Closed issue \"PackageReference of classlib with does not layout satellites correctly\" (#24287)"},{"Id":"437894817","IsPullRequest":true,"CreatedAt":"2019-04-27T02:03:14","Actor":"AaronRobinsonMSFT","Number":"24285","RawContent":null,"Title":"Port all managed product binaries to use SDK style projects","State":"open","Body":"This PR is not complete. The optprof scenario will be broken. @jkoritzinsky suggestions are welcome.\r\n\r\nMuch of this work was ported from https://github.com/dotnet/coreclr/pull/23988. Note that this work does not upgrade to 3.0, but merely moves the product projects to SDK project types.\r\n\r\ncc @RussKeldorph @jashook @jkoritzinsky @jeffschwMSFT ","Url":"https://github.com/dotnet/coreclr/pull/24285","RelatedDescription":"Open PR \"Port all managed product binaries to use SDK style projects\" (#24285)"},{"Id":"437874397","IsPullRequest":true,"CreatedAt":"2019-04-26T23:09:16","Actor":"BruceForstall","Number":"24281","RawContent":null,"Title":"Disable failing corefx tests","State":"closed","Body":"Issues:\r\n\r\nhttps://github.com/dotnet/coreclr/issues/24236\r\nhttps://github.com/dotnet/coreclr/issues/23473\r\nhttps://github.com/dotnet/coreclr/issues/24265\r\nhttps://github.com/dotnet/coreclr/issues/22414\r\n","Url":"https://github.com/dotnet/coreclr/pull/24281","RelatedDescription":"Closed or merged PR \"Disable failing corefx tests\" (#24281)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"438578983","IsPullRequest":false,"CreatedAt":"2019-04-30T02:22:59","Actor":"sillyousu","Number":"11267","RawContent":null,"Title":"The library 'hostpolicy.dll' required to execute the application was not found in","State":"closed","Body":"## Steps to reproduce\r\n\r\ncreate a hello world project:\r\n```\r\nmkdir ClassLib\r\ncd ClassLib\r\ndotnet new classlib\r\ncd ..\r\nmkdir Main \r\ncd Main\r\ndotnet new console\r\ndotnet  add reference ..\\ClassLib\\ClassLib.csproj\r\ndotnet build\r\ndotnet .\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll\r\n```\r\n```\r\n.\r\n├── ClassLib\r\n│   ├── Class1.cs\r\n│   └── ClassLib.csproj\r\n└── Main\r\n    ├── Main.csproj\r\n    └── Program.cs\r\n```\r\n\r\n## Expected  behavior\r\nmeaningful error message\r\n\r\n## Actual behavior\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\'.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\supei\\xd\\sims\\fooo\\Main> dotnet.exe --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11267","RelatedDescription":"Closed issue \"The library 'hostpolicy.dll' required to execute the application was not found in\" (#11267)"},{"Id":"437352907","IsPullRequest":true,"CreatedAt":"2019-04-29T23:01:08","Actor":"rainersigwald","Number":"11252","RawContent":null,"Title":"MSBuild 16.1.68 (2.2.3xx)","State":"closed","Body":"This hasn't yet been inserted into VS ([internal PR](https://dev.azure.com/devdiv/DevDiv/MSBuild/_git/VS/pullrequest/177485)), but the QB has indicated that he'll take it so I think it's safe to go ahead here.","Url":"https://github.com/dotnet/cli/pull/11252","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.68 (2.2.3xx)\" (#11252)"},{"Id":"438521775","IsPullRequest":true,"CreatedAt":"2019-04-29T22:34:25","Actor":"peterhuene","Number":"11265","RawContent":null,"Title":"Update Roslyn to `3.1.0-beta3-19223-09`.","State":"closed","Body":"This commit updates Roslyn to `3.1.0-beta3-19223-09`.","Url":"https://github.com/dotnet/cli/pull/11265","RelatedDescription":"Closed or merged PR \"Update Roslyn to `3.1.0-beta3-19223-09`.\" (#11265)"},{"Id":"438522557","IsPullRequest":true,"CreatedAt":"2019-04-29T22:29:55","Actor":"peterhuene","Number":"11266","RawContent":null,"Title":"Update Roslyn to 3.1.0-beta3-19223-09.","State":"closed","Body":"This commit updates Roslyn to `3.1.0-beta3-19223-09`.","Url":"https://github.com/dotnet/cli/pull/11266","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.1.0-beta3-19223-09.\" (#11266)"},{"Id":"437352196","IsPullRequest":true,"CreatedAt":"2019-04-29T22:02:16","Actor":"rainersigwald","Number":"11251","RawContent":null,"Title":"MSBuild 16.1.68 (2.1.7xx)","State":"closed","Body":"This hasn't yet been inserted into VS ([internal PR](https://dev.azure.com/devdiv/DevDiv/MSBuild/_git/VS/pullrequest/177485)), but the QB has indicated that he'll take it so I think it's safe to go ahead here.","Url":"https://github.com/dotnet/cli/pull/11251","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.68 (2.1.7xx)\" (#11251)"},{"Id":"438456068","IsPullRequest":false,"CreatedAt":"2019-04-29T18:50:24","Actor":"karann-msft","Number":"11264","RawContent":null,"Title":"https://aka.ms/missing-command is broken","State":"open","Body":"```\r\nC:\\WINDOWS\\System32>dotnet install -h\r\nNo executable found matching command \"dotnet-install\". See https://aka.ms/missing-command for more information.\r\n```","Url":"https://github.com/dotnet/cli/issues/11264","RelatedDescription":"Open issue \"https://aka.ms/missing-command is broken\" (#11264)"},{"Id":"438170996","IsPullRequest":true,"CreatedAt":"2019-04-29T17:02:15","Actor":"peterhuene","Number":"11261","RawContent":null,"Title":"Update SDK version to `2.2.300-preview-64023-02`.","State":"closed","Body":"This commit updates the SDK version to `2.2.300-preview-64023-02`.","Url":"https://github.com/dotnet/cli/pull/11261","RelatedDescription":"Closed or merged PR \"Update SDK version to `2.2.300-preview-64023-02`.\" (#11261)"},{"Id":"438150404","IsPullRequest":true,"CreatedAt":"2019-04-29T17:02:07","Actor":"peterhuene","Number":"11260","RawContent":null,"Title":"Update the SDK to `2.1.700-preview-64023-01`.","State":"closed","Body":"This commit updates the SDK to `2.1.700-preview-64023-01`.\r\n","Url":"https://github.com/dotnet/cli/pull/11260","RelatedDescription":"Closed or merged PR \"Update the SDK to `2.1.700-preview-64023-01`.\" (#11260)"},{"Id":"438373122","IsPullRequest":false,"CreatedAt":"2019-04-29T15:24:56","Actor":"mattbaumann","Number":"11263","RawContent":null,"Title":"Dotnet SDK not Found on Windows Server 2016","State":"open","Body":"# General\r\n\r\n| Component | Name | Version |\r\n| --------------|--------|---------- |\r\n| Operating System | Windows Server 2016 Std |  10.0.14393 |\r\n| Shell | Powershell |\r\n\r\nSince the update of my windows server software up to Build 14393, I cannot access the .net Core SDK via the command line. \r\n\r\nI did the following, unsuccessful attempt to resolve the issue:\r\n\r\n* Install newest Version of .Net Core SDK 2.2.106\r\n* Check\r\n* Remove all versions\r\n* Install version of .Net Core SDK 2.2.203\r\n* Install version of .Net Core SDK 2.2.106\r\n* Restart of the server\r\n* Check\r\n\r\nStill getting the following error when executing a build on the command line:\r\n\r\n```bash\r\n Did you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n```\r\n\r\nResponse when I run ``dotnet --info`\r\n\r\n```bash\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nObviously, It cannot compile without finding the actual SDK, but why does the installation with the _official Installer_ yield in an partially installed State? (files are copied correctly in c:/program files/dotnet/sdk/<version> though). \r\n\r\nPlease let me know, whether you need additional information and I will answer promptly.\r\n","Url":"https://github.com/dotnet/cli/issues/11263","RelatedDescription":"Open issue \"Dotnet SDK not Found on Windows Server 2016\" (#11263)"},{"Id":"437641105","IsPullRequest":true,"CreatedAt":"2019-04-29T12:45:34","Actor":"dotnet-maestro[bot]","Number":"11256","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11256","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11256)"},{"Id":"438229327","IsPullRequest":false,"CreatedAt":"2019-04-29T09:40:16","Actor":"joperator","Number":"11262","RawContent":null,"Title":".NET Core 3.0 SDK on FreeBSD: The current .NET SDK does not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1.","State":"open","Body":"I've followed the steps described in [22124](https://github.com/dotnet/coreclr/issues/22124#issuecomment-460359445) to build a .NET Core project targeting .NET Standard 2.1 with the latest .NET Core 3.0 SDK for FreeBSD provided by the daily builds.\r\n\r\nWhen using the `dotnet build` command on FreeBSD, I get the following error NETSDK1045:\r\nThe current .NET SDK does not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1.\r\n\r\nWhen using the `dotnet build` command from the corresponding .NET Core 3.0 SDK on Windows or Linux, the build succeeded without errors.\r\n\r\nAlso targeting other frameworks like netcoreapp2.0, netcoreapp3.0 or netstandard2.0 works on FreeBSD using the latest .NET Core 3.0 SDK.\r\nHowever, I need at least netstandard2.1, but no netcoreapp3.0 features, so that I can reference my .NET Core project in other libraries that target .NET Standard 2.1.\r\n\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010021\r\n Commit:    d5c97b7c2a\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd-x64\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010021\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01\r\n```","Url":"https://github.com/dotnet/cli/issues/11262","RelatedDescription":"Open issue \".NET Core 3.0 SDK on FreeBSD: The current .NET SDK does not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1.\" (#11262)"},{"Id":"438014644","IsPullRequest":false,"CreatedAt":"2019-04-29T04:12:16","Actor":"sandcastle","Number":"11259","RawContent":null,"Title":"Add flag to override default tool install behaviour when tool already installed","State":"closed","Body":"Currently, running the install command for a tool that is already installed returns an error. This is a real pain when using this in dev and CI scripts as it will abort the script. I.\r\n\r\nIdeally, it should be an idempotent operation and not raise any error like like installing NPM, Yarn, Nuget and many other package managers. But given #9482 was closed and there appears to be no appetite to change the default, can we at least get a flag added to override the behaviour?\r\n\r\n\r\n## Steps to reproduce\r\n\r\n1. Already have the `dotnet-format`\r\n2. Run `dotnet tool install -g dotnet-format`\r\n3. You will get an error\r\n\r\n\r\n## New flag\r\n\r\nAdding a `--slient|-s` or `--no-errors|-ne` flag would work:\r\n\r\n```sh\r\ndotnet tool install -g --slient dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\nRunning the following would not raise an error:\r\n\r\n```sh\r\ndotnet tool install -g -s dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\n\r\n## Example dev/ci script\r\n\r\nHere is an example of a script that would currently blow up:\r\n\r\n```sh\r\n#!/bin/sh\r\nset -e\r\n\r\ncd \"$(dirname \"$0\")/..\"\r\n\r\n# --------\r\n\r\necho \"Installing dependencies\"\r\nif [ \"${1}\" != \"--ci\" ]; then\r\n\r\n  # Error will occur here!\r\n  dotnet tool install -g dotnet-format\r\n\r\nfi\r\n\r\ndotnet restore\r\n```\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```sh\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nPlease let me know if this is something you would like to see a PR for?","Url":"https://github.com/dotnet/cli/issues/11259","RelatedDescription":"Closed issue \"Add flag to override default tool install behaviour when tool already installed\" (#11259)"},{"Id":"437472738","IsPullRequest":true,"CreatedAt":"2019-04-27T20:27:00","Actor":"dotnet-maestro[bot]","Number":"11255","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.2\r\n- **Date Produced**: 4/26/2019 2:32 AM\r\n- **Commit**: 7af4517bbcf17b000889c1077ef5976f2b6350ea\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19225.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11255","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11255)"},{"Id":"437936539","IsPullRequest":true,"CreatedAt":"2019-04-27T12:42:05","Actor":"dotnet-maestro[bot]","Number":"11258","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 11:50 PM\r\n- **Commit**: 7d419793e74a2291ecfc9684aafc4dd7cc595361\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19226.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11258","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11258)"},{"Id":"437713329","IsPullRequest":false,"CreatedAt":"2019-04-26T15:49:27","Actor":"Kunze","Number":"11257","RawContent":null,"Title":"sdk was not found while building","State":"closed","Body":"## Steps to reproduce\r\nRun \"dotnet build\"\r\n\r\n## Expected  behavior\r\nSuccess on project building\r\n\r\n## Actual behavior\r\nError message:\r\nA compatible SDK version for global.json version: [2.1.4] from [C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src\\global.json] was not found\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\nThe target frameworks for my projects are netcoreapp2.0 and netstandard2.0.\r\nThis is my global.json:\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.1.4\"\r\n  }\r\n}\r\n\r\nIt works if I delete global.json\r\n\r\n## Environment data\r\nPS C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src> dotnet --info\r\nA compatible SDK version for global.json version: [2.1.4] from [C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src\\global.json] was not found\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.603 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nPS C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src>\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11257","RelatedDescription":"Closed issue \"sdk was not found while building\" (#11257)"},{"Id":"436658639","IsPullRequest":true,"CreatedAt":"2019-04-26T12:46:03","Actor":"dotnet-maestro[bot]","Number":"11242","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190423.7\r\n- **Date Produced**: 4/24/2019 12:11 AM\r\n- **Commit**: 59e1bf717c54cabaa8062d2e4293bfbced5db76a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19223.7\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190424.2\r\n- **Date Produced**: 4/24/2019 10:12 PM\r\n- **Commit**: cfadc9cd5fefa5e4e924cd528550d91e0c34b556\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19224.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 3:20 PM\r\n- **Commit**: fc4751df28d67c551ef55bf9bde6b4fea059f321\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19225.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11242","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11242)"},{"Id":"437461461","IsPullRequest":false,"CreatedAt":"2019-04-26T01:32:06","Actor":"RyanHill-MSFT","Number":"11254","RawContent":null,"Title":"dotnet build doesn't produce mountable ZIP file","State":"open","Body":"## Steps to reproduce\r\nSee https://github.com/fnbk/world/blob/master/README.md. Originated from https://stackoverflow.com/questions/55786610/deploying-zip-file-to-azure-app-services-not-working\r\n\r\n## Expected  behavior\r\nA zip file containing the contents of wwwroot that could then be mountable by [az webapp](https://docs.microsoft.com/en-us/cli/azure/webapp/deployment/source?view=azure-cli-latest#az-webapp-deployment-source-config-zip)\r\n\r\n## Actual behavior\r\nZIP file is created with a folder structure that mimics the directory structure of the intended files. See illustration below. \r\n\r\n![image](https://user-images.githubusercontent.com/47189704/56777805-5978df00-67a1-11e9-8cd7-9e90c528ce77.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300-preview-010046\r\n Commit:    d6f4b3dc39\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18886\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300-preview-010046\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11254","RelatedDescription":"Open issue \"dotnet build doesn't produce mountable ZIP file\" (#11254)"},{"Id":"437395264","IsPullRequest":true,"CreatedAt":"2019-04-25T20:59:40","Actor":"dotnet-maestro[bot]","Number":"11253","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 8:59 PM\r\n- **Commit**: b788973a620e6db7bc0458d37b449f160e40842f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19225.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11253","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11253)"},{"Id":"437237364","IsPullRequest":false,"CreatedAt":"2019-04-25T14:40:35","Actor":"agpreynolds","Number":"11250","RawContent":null,"Title":"dotnet build fails for C++ projects","State":"open","Body":"I'm having an issue working with the dotnet tools and c++ projects. I initially encountered this issue using a c++ project as a reference to a C# project. However I have replicated it using a brand new c++ project in it's own solution.\r\n\r\nI'm probably raising this issue at the wrong part of the build chain, but any help would be greatly appreciated.\r\n\r\n## Steps to reproduce\r\n1. Create a new C++ Dynamic link library in Visual Studio 2019\r\n2. From the solution folder run `dotnet build`\r\n\r\n[CPlusPlusTest.zip](https://github.com/dotnet/cli/files/3117421/CPlusPlusTest.zip)\r\n\r\n## Expected  behavior\r\n\r\nSolution builds successfully\r\n\r\n## Actual behavior\r\n\r\n> error MSB4019: The imported project \"C:\\Microsoft.Cpp.Default.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n\r\nIt seems that the $(VCTargetsPath) variable is not being evaluated. I thought this might be just my machine having the issue, but i'm also seeing the same issue building the project in a server environment.\r\n\r\n`<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />`\r\n\r\nStrangely the solution builds fine from the visual studio UI\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.203\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11250","RelatedDescription":"Open issue \"dotnet build fails for C++ projects\" (#11250)"},{"Id":"436658469","IsPullRequest":true,"CreatedAt":"2019-04-25T12:46:01","Actor":"dotnet-maestro[bot]","Number":"11241","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11241","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11241)"},{"Id":"437166877","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:33","Actor":"dotnet-maestro[bot]","Number":"11249","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190424.1\r\n- **Date Produced**: 4/24/2019 12:53 PM\r\n- **Commit**: 7949e578e828aa16d1491c726c5b536ecfa14e42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19224.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 12:50 PM\r\n- **Commit**: 10a7e623ce57b95db5f420b2cabf59e0d58bf83d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19225.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11249","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#11249)"},{"Id":"436890788","IsPullRequest":true,"CreatedAt":"2019-04-24T20:26:02","Actor":"dotnet-bot","Number":"11248","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11248","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11248)"},{"Id":"436861221","IsPullRequest":true,"CreatedAt":"2019-04-24T19:56:44","Actor":"johnbeisner","Number":"11247","RawContent":null,"Title":"Rebuild release/2.2.2xx","State":"closed","Body":"Updates to the ReadME in order to rebuild release 2.2.2xx\r\n","Url":"https://github.com/dotnet/cli/pull/11247","RelatedDescription":"Closed or merged PR \"Rebuild release/2.2.2xx\" (#11247)"},{"Id":"436850144","IsPullRequest":true,"CreatedAt":"2019-04-24T19:47:56","Actor":"johnbeisner","Number":"11246","RawContent":null,"Title":"Rebuild release/2.1.6xx","State":"closed","Body":"Updates to the ReadME in order to rebuild release 2.1.6xx\r\n","Url":"https://github.com/dotnet/cli/pull/11246","RelatedDescription":"Closed or merged PR \"Rebuild release/2.1.6xx\" (#11246)"},{"Id":"436790332","IsPullRequest":true,"CreatedAt":"2019-04-24T18:09:14","Actor":"johnbeisner","Number":"11245","RawContent":null,"Title":"Update the BranchInfo for release/2.1.7xx","State":"closed","Body":"Update the BranchInfo for release/2.1.7xx\r\n","Url":"https://github.com/dotnet/cli/pull/11245","RelatedDescription":"Closed or merged PR \"Update the BranchInfo for release/2.1.7xx\" (#11245)"},{"Id":"436790271","IsPullRequest":true,"CreatedAt":"2019-04-24T18:09:11","Actor":"johnbeisner","Number":"11244","RawContent":null,"Title":"Update the BranchInfo for release/2.2.3xx","State":"closed","Body":"Update the BranchInfo for release/2.2.3xx","Url":"https://github.com/dotnet/cli/pull/11244","RelatedDescription":"Closed or merged PR \"Update the BranchInfo for release/2.2.3xx\" (#11244)"},{"Id":"436661947","IsPullRequest":true,"CreatedAt":"2019-04-24T12:54:35","Actor":"dotnet-maestro[bot]","Number":"11243","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190423.1\r\n- **Date Produced**: 4/23/2019 12:54 PM\r\n- **Commit**: a5c047f4815e9a83c98f0cfb77b3554588d5db84\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19223.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11243)"},{"Id":"436439304","IsPullRequest":true,"CreatedAt":"2019-04-24T00:01:19","Actor":"dotnet-bot","Number":"11240","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11240","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#11240)"},{"Id":"436400585","IsPullRequest":true,"CreatedAt":"2019-04-23T23:13:50","Actor":"johnbeisner","Number":"11238","RawContent":null,"Title":"release/2.2.3xx: Update debain jessie image","State":"closed","Body":"The \"Dotnet CLI [AllLinuxDistrosNativeInstallers][x64][release-2.1_2.2-no-suffix]\" leg of the release/2.1.7xx CLI build is failing:\r\n\r\n**Failed to fetch http://httpredir.debian.org/debian/dists/jessie-updates/InRelease  Unable to find expected entry 'main/binary-amd64/Packages' in Release file (Wrong sources.list entry or malformed file)**\r\n\r\ndebian.org re-organized their folders anD deleted \"jessie-updates\". Cherry-picking the change that addresses this. \r\n\r\nThe release/2.2.3xx hasn't had a successful build of all legs yet - this should solve the problem.","Url":"https://github.com/dotnet/cli/pull/11238","RelatedDescription":"Closed or merged PR \"release/2.2.3xx: Update debain jessie image\" (#11238)"},{"Id":"436400597","IsPullRequest":true,"CreatedAt":"2019-04-23T23:10:42","Actor":"johnbeisner","Number":"11239","RawContent":null,"Title":"release/2.1.7xx: Update debain jessie image","State":"closed","Body":"The \"Dotnet CLI [AllLinuxDistrosNativeInstallers][x64][release-2.1_2.2-no-suffix]\" leg of the release/2.1.7xx CLI build is failing:\r\n\r\n**Failed to fetch http://httpredir.debian.org/debian/dists/jessie-updates/InRelease  Unable to find expected entry 'main/binary-amd64/Packages' in Release file (Wrong sources.list entry or malformed file)**\r\n\r\ndebian.org re-organized their folders and deleted \"jessie-updates\". Cherry-picking the change that addresses this. \r\n\r\nThe release/2.1.7xx hasn't had a successful build of all legs yet - this should solve the problem.","Url":"https://github.com/dotnet/cli/pull/11239","RelatedDescription":"Closed or merged PR \"release/2.1.7xx: Update debain jessie image\" (#11239)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"438281734","IsPullRequest":true,"CreatedAt":"2019-04-29T12:03:46","Actor":"dotnet-maestro[bot]","Number":"1170","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1170)"},{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-21T18:54:16","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-19T19:00:10","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"closed","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Closed issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:44","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"closed","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Closed or merged PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:31","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"closed","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Closed or merged PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"closed","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Closed or merged PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-19T01:28:32","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"SUGGESTION: Please Make AsnReader And AnsWriter Public","State":"closed","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Closed issue \"SUGGESTION: Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"438179004","IsPullRequest":false,"CreatedAt":"2019-04-30T03:07:57","Actor":"snowwaft","Number":"37262","RawContent":null,"Title":"CurrentPrincipal changed after await a task","State":"closed","Body":"I use Thread.CurrentPrincipal to store user's information, such as username, token, etc. through difference threads.\r\nIn .Net Framework 4.6.1, this works well.\r\nHowever, when I switch to .NetCore, the CurrentPrincipal changed after awaited a task.\r\n\r\n```\r\nclass Program\r\n{\r\n    static Random random = new Random();\r\n\r\n    static AsyncLocal<string> _AsyncLocalName = new AsyncLocal<string>();\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        for (var i = 0; i < 50; i++)\r\n        {\r\n            Task.Factory.StartNew((o) => Test(o), i.ToString());\r\n        }\r\n        Console.ReadLine();\r\n    }\r\n\r\n    static async void Test(object state)\r\n    {\r\n        var name = (string)state;\r\n        Thread.CurrentPrincipal = new GenericPrincipal(new GenericIdentity(name), new string[] { });\r\n        _AsyncLocalName.Value = name;\r\n        Debug.Assert(name == Thread.CurrentPrincipal.Identity.Name);    //always true\r\n        Debug.Assert(name == _AsyncLocalName.Value);                    //always true\r\n        await Task.Delay(random.Next(1000));\r\n        Debug.Assert(name == Thread.CurrentPrincipal.Identity.Name);    //may fail, even more, Thread.CurrentPrincipal may equal null\r\n        Debug.Assert(name == _AsyncLocalName.Value);                    //always true\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/37262","RelatedDescription":"Closed issue \"CurrentPrincipal changed after await a task\" (#37262)"},{"Id":"438579114","IsPullRequest":true,"CreatedAt":"2019-04-30T02:20:29","Actor":"Dotnet-GitSync-Bot","Number":"37290","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corefx/pull/37290","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#37290)"},{"Id":"438563054","IsPullRequest":true,"CreatedAt":"2019-04-30T01:50:58","Actor":"Dotnet-GitSync-Bot","Number":"37288","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @dschinde","Url":"https://github.com/dotnet/corefx/pull/37288","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37288)"},{"Id":"438488785","IsPullRequest":true,"CreatedAt":"2019-04-30T00:53:00","Actor":"stephentoub","Number":"37279","RawContent":null,"Title":"Add a test for Stopwatch.Elapsed to ensure it's within reason","State":"closed","Body":"If this experiences flakiness in CI, we can tweak it, replace it with something better, etc.\r\n\r\ncc: @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/37279","RelatedDescription":"Closed or merged PR \"Add a test for Stopwatch.Elapsed to ensure it's within reason\" (#37279)"},{"Id":"438563232","IsPullRequest":true,"CreatedAt":"2019-04-30T00:43:07","Actor":"sdmaclea","Number":"37289","RawContent":null,"Title":"Remove dotnet/sdk#3185","State":"closed","Body":"Issue closed","Url":"https://github.com/dotnet/corefx/pull/37289","RelatedDescription":"Closed or merged PR \"Remove dotnet/sdk#3185\" (#37289)"},{"Id":"438560400","IsPullRequest":true,"CreatedAt":"2019-04-30T00:34:56","Actor":"MattGal","Number":"37287","RawContent":null,"Title":"Add Ubuntu 19.04 to official runs","State":"closed","Body":"Add runs using Ubuntu.1904.Amd64 (docker image) ; this is an AMD image based off requirements used in ARM64 version.\r\n\r\n@richlander FYI","Url":"https://github.com/dotnet/corefx/pull/37287","RelatedDescription":"Closed or merged PR \"Add Ubuntu 19.04 to official runs\" (#37287)"},{"Id":"438555155","IsPullRequest":true,"CreatedAt":"2019-04-30T00:00:45","Actor":"davidsh","Number":"37286","RawContent":null,"Title":"Re-enable some Http Diagnostic tracing tests","State":"open","Body":"Some of these tests were disabled a long time ago and only on Linux.\r\nSince that time, the tests were improved.\r\n\r\nI re-enabled the tests plus some others that appear to be stable now.\r\n\r\nCloses #23209\r\nCloses #23771","Url":"https://github.com/dotnet/corefx/pull/37286","RelatedDescription":"Open PR \"Re-enable some Http Diagnostic tracing tests\" (#37286)"},{"Id":"438554059","IsPullRequest":true,"CreatedAt":"2019-04-29T23:55:58","Actor":"jbhensley","Number":"37285","RawContent":null,"Title":"Unit tests for Path.Join overloads","State":"open","Body":"Unit tests for Path.Join overloads in corclr [PR 24307](https://github.com/dotnet/coreclr/pull/24307). corefx issue #32312","Url":"https://github.com/dotnet/corefx/pull/37285","RelatedDescription":"Open PR \"Unit tests for Path.Join overloads\" (#37285)"},{"Id":"438544150","IsPullRequest":true,"CreatedAt":"2019-04-29T23:10:11","Actor":"wfurt","Number":"37284","RawContent":null,"Title":"update tests using \"localhost\" to be more liberal on verification of response address.","State":"open","Body":"This is test only change. \r\nI updated tests using `localhost` to accept any address `localhost` resolves to as valid instead of trying to make assumption which address will be used. \r\nThis was primarily problematic on OSX.\r\n\r\nfixes #36474\r\n","Url":"https://github.com/dotnet/corefx/pull/37284","RelatedDescription":"Open PR \"update tests using \"localhost\" to be more liberal on verification of response address.\" (#37284)"},{"Id":"438529593","IsPullRequest":true,"CreatedAt":"2019-04-29T22:28:35","Actor":"stephentoub","Number":"37283","RawContent":null,"Title":"Disable failing Process name test","State":"closed","Body":"https://github.com/dotnet/corefx/issues/37198\r\nRegression caused by https://github.com/dotnet/corefx/pull/37144","Url":"https://github.com/dotnet/corefx/pull/37283","RelatedDescription":"Closed or merged PR \"Disable failing Process name test\" (#37283)"},{"Id":"438470707","IsPullRequest":true,"CreatedAt":"2019-04-29T22:27:06","Actor":"Anipik","Number":"37278","RawContent":null,"Title":"Making BaseNumberConverter Internal","State":"closed","Body":"Related to https://github.com/dotnet/corefx/issues/35924\r\n\r\nTechnically it is a breaking change but there is no way to derive and instantiate this class. An exception will get thrown if we will try to instantiate the  derived class.\r\n\r\nI am making this internal and not private because a bunch of classes are deriving it.\r\n\r\nI will also make a change a arcade repo to help avoid these scenarios","Url":"https://github.com/dotnet/corefx/pull/37278","RelatedDescription":"Closed or merged PR \"Making BaseNumberConverter Internal\" (#37278)"},{"Id":"438518781","IsPullRequest":true,"CreatedAt":"2019-04-29T22:25:19","Actor":"Dotnet-GitSync-Bot","Number":"37281","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corefx/pull/37281","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#37281)"},{"Id":"438469740","IsPullRequest":true,"CreatedAt":"2019-04-29T21:48:19","Actor":"cston","Number":"37277","RawContent":null,"Title":"Port Microsoft.VisualBasic.MyServices.FileSystemProxy","State":"closed","Body":"Port `Microsoft.VisualBasic.MyServices.FileSystemProxy` from https://github.com/Microsoft/referencesource/tree/master/Microsoft.VisualBasic/runtime/msvbalib.\r\n\r\nThe changes from reference source were limited to comments and attributes. The implementation was not changed.\r\n\r\nAs part of this change, the `Microsoft.VisualBasic.FileIO` tests that were written in VB have been moved to C# and the `TextFieldParser` tests have been updated.\r\n\r\nThe `Microsoft.VisualBasic.FileIO.FileSystem` tests were cloned and updated for testing `FileSystemProxy`.","Url":"https://github.com/dotnet/corefx/pull/37277","RelatedDescription":"Closed or merged PR \"Port Microsoft.VisualBasic.MyServices.FileSystemProxy\" (#37277)"},{"Id":"438521905","IsPullRequest":false,"CreatedAt":"2019-04-29T21:46:21","Actor":"HaoK","Number":"37282","RawContent":null,"Title":"SelfSigning cert failures on Linux","State":"open","Body":"As part of our work adding a new certificate authentication to Asp.Net, we are seeing 2 failures only on linux with respect to self signed cert expiration:\r\n\r\n```\r\nMicrosoft.AspNetCore.Authentication.Certificate.Test.ClientCertificateAuthenticationTests.VerifyNotYetValidSelfSignedFails\r\nMicrosoft.AspNetCore.Authentication.Certificate.Test.ClientCertificateAuthenticationTests.VerifyExpiredSelfSignedFails\r\n```\r\n\r\n@bartonjs mentioned:\r\n\"It’s possible that OpenSSL is treating the self-signed certs differently (and ignoring time checks).  Looks like the only tests that we have on that flag are chain-signed.\"\r\n","Url":"https://github.com/dotnet/corefx/issues/37282","RelatedDescription":"Open issue \"SelfSigning cert failures on Linux\" (#37282)"},{"Id":"438291663","IsPullRequest":true,"CreatedAt":"2019-04-29T21:35:20","Actor":"dotnet-maestro[bot]","Number":"37266","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190429.1\r\n- **Date Produced**: 4/29/2019 11:18 AM\r\n- **Commit**: 173a2a165316af9a4e211ceab8c8d9692de8a528\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19229.1\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19229.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37266","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#37266)"},{"Id":"438489759","IsPullRequest":true,"CreatedAt":"2019-04-29T21:34:50","Actor":"Dotnet-GitSync-Bot","Number":"37280","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @sdmaclea","Url":"https://github.com/dotnet/corefx/pull/37280","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37280)"},{"Id":"438423462","IsPullRequest":true,"CreatedAt":"2019-04-29T19:38:02","Actor":"davidsh","Number":"37271","RawContent":null,"Title":"Cleanup some WebSocket tests","State":"closed","Body":"Skip some tests on .NET Framework due to bugs in .NET Framework.\r\n\r\nModify the TestCancellation helper method for the WebSocket client tests to not check for string matching in exception messages. This makes the test too brittle. We're already checking for other important fields in the WebSocket object.\r\n\r\nRe-enable some UAP tests since the fixes are in master branch.\r\n\r\nCloses #13302\r\nCloses #22635\r\nCloses #23204\r\nCloses #28777\r\nCloses #33401","Url":"https://github.com/dotnet/corefx/pull/37271","RelatedDescription":"Closed or merged PR \"Cleanup some WebSocket tests\" (#37271)"},{"Id":"438468992","IsPullRequest":false,"CreatedAt":"2019-04-29T19:24:28","Actor":"Kuinox","Number":"37276","RawContent":null,"Title":"HttpContent.SerializeToStreamAsync should throw ObjectDisposedException instead of NullReferenceException","State":"open","Body":"Hello.  \r\nIf you dispose the stream provided by the method SerializeToStreamAsync, the httpClient throw a NullReferenceException when you send the request.  \r\nI think it should be an ObjectDisposedException to point out the error to the dev.","Url":"https://github.com/dotnet/corefx/issues/37276","RelatedDescription":"Open issue \"HttpContent.SerializeToStreamAsync should throw ObjectDisposedException instead of NullReferenceException\" (#37276)"},{"Id":"438437659","IsPullRequest":true,"CreatedAt":"2019-04-29T18:28:05","Actor":"steveharter","Number":"37274","RawContent":null,"Title":"Exceptions","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37274","RelatedDescription":"Closed or merged PR \"Exceptions\" (#37274)"},{"Id":"438447269","IsPullRequest":true,"CreatedAt":"2019-04-29T18:27:37","Actor":"steveharter","Number":"37275","RawContent":null,"Title":"Add JsonException and JsonSerializationException","State":"open","Body":"Adds JsonException and JsonSerializationException classes.\r\n\r\nAlso addresses a \"todo\" to throw the proper exception on a duplicate dictionary key.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/36025.\r\n\r\nAPI review is flagged for [review](https://github.com/dotnet/corefx/issues/37272). It has been peer reviewed and is not expected to differ from that review.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37275","RelatedDescription":"Open PR \"Add JsonException and JsonSerializationException\" (#37275)"},{"Id":"438430412","IsPullRequest":true,"CreatedAt":"2019-04-29T17:43:51","Actor":"joperezr","Number":"37273","RawContent":null,"Title":"Adding Microsoft.Compatibility.HashCode package for .NET Standard 2.0","State":"open","Body":"cc: @stephentoub @ericstj @terrajobst \r\n\r\nThis is adding the compatibility package for HashCode struct for .NET Standard 2.0.\r\nPackage name isn't final and will be discussed later internally.","Url":"https://github.com/dotnet/corefx/pull/37273","RelatedDescription":"Open PR \"Adding Microsoft.Compatibility.HashCode package for .NET Standard 2.0\" (#37273)"},{"Id":"438425439","IsPullRequest":false,"CreatedAt":"2019-04-29T17:30:51","Actor":"steveharter","Number":"37272","RawContent":null,"Title":"Add JsonException and JsonSerializationException","State":"open","Body":"Proposal to add two new exception classes.\r\n\r\nCurrently the deserializer throws `JsonReaderException`. This is not sufficient because:\r\n- There is a [request](https://github.com/dotnet/corefx/issues/36025) to add a \"Path\" property to the thrown exception. This property is only valid for the (de)serializer, not the reader\\writer.\r\n- During serialization we can't throw a `JsonReaderException` because we are writing, and there is no \"JsonWriterException\".\r\n- It makes sense to have a single exception for both serialization- and deserialization-related exceptions.\r\n\r\nAlso for those that want to catch all json-related exceptions, a proposed abstract `JsonException` would allow that; the existing `JsonReaderException` will now derive from that instead of `System.Exception`.\r\n\r\n```cs\r\nnamespace System.Text.Json\r\n{\r\n    public abstract class JsonException : System.Exception\r\n    {\r\n        protected JsonException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\r\n        public JsonException(string message);\r\n        public JsonException(string message, System.Exception innerException);\r\n        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\r\n    }\r\n\r\n    // Just the base class changed here (from Exception to JsonException).\r\n    public sealed class JsonReaderException : JsonException\r\n    {\r\n    …\r\n    }\r\n}\r\n\r\nnamespace System.Text.Json.Serialization\r\n{\r\n    public sealed class JsonSerializationException : JsonException\r\n    {\r\n        public JsonSerializationException(string message, long lineNumber, long bytePositionInLine, string path) : base (default(string));\r\n        public JsonSerializationException(string message, long lineNumber, long bytePositionInLine, string path, System.Exception innerException) : base (default(string));\r\n        public long BytePositionInLine { get; }\r\n        public long LineNumber { get; }\r\n        public string Path { get; }\r\n        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\r\n    }\r\n}\r\n\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37272","RelatedDescription":"Open issue \"Add JsonException and JsonSerializationException\" (#37272)"},{"Id":"438420206","IsPullRequest":true,"CreatedAt":"2019-04-29T17:16:59","Actor":"bartonjs","Number":"37270","RawContent":null,"Title":"Fix bad usage of ArrayPool in TdsParserStateObject","State":"open","Body":"If TdsParserStateObject.TryReadString or\r\nTdsParserStateObject.TryReadStringWithEncoding hit the growth case they\r\nwould rent an array, save it into a field, use the array, return the array to the pool,\r\nbut keep it assigned to the field and continue using it.\r\n\r\nSince other writes to _bTmp use fresh arrays in an instance-cached-growth\r\npattern, this change restores these two methods to that same approach, rather\r\nthan renting to a local buffer and not renting into a field.","Url":"https://github.com/dotnet/corefx/pull/37270","RelatedDescription":"Open PR \"Fix bad usage of ArrayPool in TdsParserStateObject\" (#37270)"},{"Id":"438339438","IsPullRequest":true,"CreatedAt":"2019-04-29T17:02:52","Actor":"stephentoub","Number":"37267","RawContent":null,"Title":"Improve a ClientWebSocket connection failure error message","State":"closed","Body":"cc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/37267","RelatedDescription":"Closed or merged PR \"Improve a ClientWebSocket connection failure error message\" (#37267)"},{"Id":"438408700","IsPullRequest":true,"CreatedAt":"2019-04-29T16:47:18","Actor":"bartonjs","Number":"37269","RawContent":null,"Title":"[release/2.2] Update 2.2 RID Graph","State":"open","Body":"This brings 2.2 up to date with master\r\n\r\n+ Ubuntu 19.04\r\n+ SLES 15\r\n+ openSUSE 15.0\r\n\r\nPorts #37233 to release/2.2.\r\nPorts #31667 to release/2.2.","Url":"https://github.com/dotnet/corefx/pull/37269","RelatedDescription":"Open PR \"[release/2.2] Update 2.2 RID Graph\" (#37269)"},{"Id":"438371481","IsPullRequest":true,"CreatedAt":"2019-04-29T15:21:27","Actor":"bartonjs","Number":"37268","RawContent":null,"Title":"[release/2.1] Update 2.1 RID Graph","State":"open","Body":"This brings 2.1 up to date with master\r\n\r\n+ Ubuntu 19.04\r\n+ SLES 15\r\n+ openSUSE 15.0\r\n\r\nThis is all the differences for mutually existing RuntimeGroups shown by `git diff dotnet/release/2.1 dotnet/master -- runtimeGroups.props`.\r\n\r\nPorts #37233 to release/2.1.\r\nPorts #31667 to release/2.1.","Url":"https://github.com/dotnet/corefx/pull/37268","RelatedDescription":"Open PR \"[release/2.1] Update 2.1 RID Graph\" (#37268)"},{"Id":"438289316","IsPullRequest":true,"CreatedAt":"2019-04-29T12:24:47","Actor":"dotnet-maestro[bot]","Number":"37265","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190428.14\r\n- **Date Produced**: 4/29/2019 4:39 AM\r\n- **Commit**: 3e539b7cc74ec0ce5a8d0598c2d30b8d59ec1c0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27628-14\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview6-27628-14\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview6-27628-14\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37265","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#37265)"},{"Id":"438281585","IsPullRequest":true,"CreatedAt":"2019-04-29T12:03:20","Actor":"dotnet-maestro[bot]","Number":"37264","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19226.3\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19226.3\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19226.3\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37264","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#37264)"},{"Id":"438214646","IsPullRequest":true,"CreatedAt":"2019-04-29T09:02:20","Actor":"aalmada","Number":"37263","RawContent":null,"Title":"Speed optimization of ToList() for Range() and Repeat() operations","State":"open","Body":"The `Range()` and `Repeat()` operations already have a speed optimization for its `ToList()` method. They simply create a `List<T>` and add the elements to it. Here's the [implementation for Range](https://github.com/dotnet/corefx/blob/81c8c68d81daad033251d643e230061f38a9ae3a/src/System.Linq/src/System/Linq/Range.SpeedOpt.cs#L31):\r\n\r\n```csharp\r\npublic List<int> ToList()\r\n{\r\n   List<int> list = new List<int>(_end - _start);\r\n   for (int cur = _start; cur != _end; cur++)\r\n   {\r\n       list.Add(cur);\r\n   }\r\n\r\n   return list;\r\n}\r\n```\r\n\r\nAlthough the length is passed as the `capacity` for the new `List<T>`, the `Add()` method still performs version increment, buffer length validation and size increment. This is performed for every element, which is unnecessary and penalizing.\r\n\r\n```csharp\r\npublic void Add(T item)\r\n{\r\n    _version++;\r\n    T[] array = _items;\r\n    int size = _size;\r\n    if ((uint)size < (uint)array.Length)\r\n    {\r\n        _size = size + 1;\r\n        array[size] = item;\r\n    }\r\n    else\r\n    {\r\n        AddWithResize(item);\r\n    }\r\n}\r\n```\r\n\r\nAs an alternative, the `List<T>(IEnumerable<T>)` constructor can be used, which has the following implementation:\r\n\r\n```csharp\r\npublic List(IEnumerable<T> collection)\r\n{\r\n    if (collection == null)\r\n        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.collection);\r\n\r\n    if (collection is ICollection<T> c)\r\n    {\r\n        int count = c.Count;\r\n        if (count == 0)\r\n        {\r\n            _items = s_emptyArray;\r\n        }\r\n        else\r\n        {\r\n            _items = new T[count];\r\n            c.CopyTo(_items, 0);\r\n            _size = count;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        _size = 0;\r\n        _items = s_emptyArray;\r\n        using (IEnumerator<T> en = collection.GetEnumerator())\r\n        {\r\n            while (en.MoveNext())\r\n            {\r\n                Add(en.Current);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen `collection` is not a `ICollection<T>`, which would be the case, `Add()` is still called for each element. But, when it's a non-empty `ICollection<T>`, it simply allocates an array, calls `ICollection<T>.CopyTo()` and sets the size. Only once!\r\n\r\n**This pull request takes advantage of this to improve the speed optimization of `ToList()` for `Range` and `Repeat`.**\r\n\r\nIt adds private minimal implementations of `ICollection<T>` where the `CopyTo()` implementation simply uses a `for` loop to set the elements. With no validations!\r\n\r\nHere's the implementation for `Range`:\r\n\r\n```csharp\r\npublic void CopyTo(int[] array, int _)\r\n{\r\n    unchecked\r\n    {\r\n        for(int index = 0; index < _count; index++)\r\n        {\r\n            array[index] = _start + index;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHere's the implementation for `Repeat`:\r\n\r\n```csharp\r\npublic void CopyTo(TResult[] array, int _)\r\n{\r\n    if (_current is object) // not null\r\n    {\r\n        unchecked\r\n        {\r\n            for(int index = 0; index < _count; index++)\r\n            {\r\n                array[index] = _current;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe only side-effect is that an instance of the `ICollection<T>` has to be created but it will be very short lived.","Url":"https://github.com/dotnet/corefx/pull/37263","RelatedDescription":"Open PR \"Speed optimization of ToList() for Range() and Repeat() operations\" (#37263)"},{"Id":"438137893","IsPullRequest":false,"CreatedAt":"2019-04-29T03:29:20","Actor":"pranavkm","Number":"37261","RawContent":null,"Title":"GetCustomAttributes(inherit: true) does not return multiple instances of the same attribute","State":"open","Body":"```C#\r\n[Test]\r\n[Test]\r\n[Base]\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var attributes = typeof(Program).GetCustomAttributes(inherit: false);\r\n        Console.WriteLine(string.Join(\" \", attributes));\r\n\r\n        attributes = typeof(Program).GetCustomAttributes(inherit: true);\r\n        Console.WriteLine(string.Join(\" \", attributes));\r\n    }\r\n}\r\n\r\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\r\npublic class BaseAttribute : Attribute { }\r\n\r\npublic class TestAttribute : BaseAttribute { }\r\n```\r\n\r\nI'd expect both instances of `GetCustomAttributes` to return the same results. However, here's the actual result:\r\n\r\n```\r\nConsoleApp20.TestAttribute ConsoleApp20.TestAttribute ConsoleApp20.BaseAttribute\r\nConsoleApp20.TestAttribute ConsoleApp20.BaseAttribute\r\n```\r\n\r\nEnvironment: Microsoft.NETCore.App 3.0.0-preview6-27622-26","Url":"https://github.com/dotnet/corefx/issues/37261","RelatedDescription":"Open issue \"GetCustomAttributes(inherit: true) does not return multiple instances of the same attribute\" (#37261)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"438400661","IsPullRequest":true,"CreatedAt":"2019-04-30T04:50:58","Actor":"heejaechang","Number":"35336","RawContent":null,"Title":"changed the way we report live analysis to task center","State":"closed","Body":"previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.\r\n\r\nthis caused confusion since we report in task center that we are analyzing file \"A\" when it is actually \"analyzed\" not \"analyzing\"\r\n\r\nanother issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file \"A\" for a long time if that is only filed with errors.\r\n\r\nthis PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.\r\n\r\nnow we report file that solution crawler is analyzing.\r\n\r\nthere is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file \"A\". or we will not update UI at least 200ms apart and etc.\r\n\r\nsince it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.\r\n\r\nor show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.\r\n\r\nold\r\n![progress2](https://user-images.githubusercontent.com/1333179/56927361-dac5bf80-6a88-11e9-9930-77d93a2c6625.gif)\r\n\r\nnew\r\n![progress](https://user-images.githubusercontent.com/1333179/56919749-45213480-6a76-11e9-890d-bd57ff1e3bcd.gif)\r\n","Url":"https://github.com/dotnet/roslyn/pull/35336","RelatedDescription":"Closed or merged PR \"changed the way we report live analysis to task center\" (#35336)"},{"Id":"438597387","IsPullRequest":false,"CreatedAt":"2019-04-30T04:15:15","Actor":"davkean","Number":"35360","RawContent":null,"Title":"[Regression] Unloading a project/solution crashes Visual Studio if there is pending Roslyn work","State":"open","Body":"This was introduced in https://github.com/dotnet/roslyn/pull/34785.\r\n\r\nVisual Studio is crashing on me if I close a Solution before Roslyn has finished analyzing the project for Designer attributes via DesignerAttributeIncrementalAnalyzer.\r\n\r\n````\r\nObjectDisposedException\r\nobject name: 'Microsoft.VisualStudio.ProjectSystem.VS.Implementation.DisposingWrapper`1[[Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Designers.ProjectItemDesignerUpdateService+ProjectItemDesignerUpdateServiceImplementation, Microsoft.VisualStudio.ProjectSystem.VS.Implementation, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]'.\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.DisposingWrapper`1.get_Value()\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Designers.ProjectItemDesignerUpdateService.SetProjectItemDesignerTypeAsync(String projectItemPath, String designerType)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.<RegisterDesignerAttributeAsync>d__16.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.<RegisterDesignerAttributeAndSaveStateAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.<AnalyzeDocumentAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<>c__DisplayClass32_1`1.<<RunAnalyzersAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<GetOrDefaultAsync>d__34`2.MoveNext()\r\n````","Url":"https://github.com/dotnet/roslyn/issues/35360","RelatedDescription":"Open issue \"[Regression] Unloading a project/solution crashes Visual Studio if there is pending Roslyn work\" (#35360)"},{"Id":"438595133","IsPullRequest":true,"CreatedAt":"2019-04-30T04:00:43","Actor":"ivanbasov","Number":"35359","RawContent":null,"Title":"Deadlock during shutdown of interactive window","State":"open","Body":"Fix: https://github.com/dotnet/roslyn/issues/35292","Url":"https://github.com/dotnet/roslyn/pull/35359","RelatedDescription":"Open PR \"Deadlock during shutdown of interactive window\" (#35359)"},{"Id":"438577463","IsPullRequest":false,"CreatedAt":"2019-04-30T02:10:33","Actor":"vsfeedback","Number":"35358","RawContent":null,"Title":"Crash trying to unload project from large solution","State":"open","Body":"**Build filed on** : 15.7.27612.0 \r\n**Priority** : 1 \r\n\r\nI have a large (~400 project) solution and I've been experimenting with manually unloading projects (by right-clicking and saying unload in the solution explorer) as an alternative to the Funnel extension that no longer works in VS 2017. Some projects unload no problem. Others take a really long time, or never finish unloading, or crash. I'm attaching a crash dump of a crash, and a recording of unloading the same project that didn't crash but did hang the UI for a long time. I'm guessing the task manager window I brought up during the unload isn't visible but you can see the process consume over 2.8GB of RAM at one point which is presumably right on the edge of crashing.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/236142/crash-trying-to-unload-project-from-large-solution.html\r\nVSTS ticketId: 602709_\r\n_These are the original issue comments:_\r\n(no comments)\r\n_These are the original issue solutions:_\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35358","RelatedDescription":"Open issue \"Crash trying to unload project from large solution\" (#35358)"},{"Id":"438555079","IsPullRequest":true,"CreatedAt":"2019-04-30T01:14:57","Actor":"dotnet-bot","Number":"35355","RawContent":null,"Title":"Merge dev16.1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35355","RelatedDescription":"Closed or merged PR \"Merge dev16.1-vs-deps to master-vs-deps\" (#35355)"},{"Id":"438562028","IsPullRequest":false,"CreatedAt":"2019-04-30T00:36:39","Actor":"bichuga","Number":"35357","RawContent":null,"Title":"AdditionalFiles is empty in CompilationStartAnalysisContext.Options.AdditionalFiles but correct in SyntaxNodeAnalysisContext.Options.AdditionalFiles","State":"open","Body":"**Version Used**: \r\nMicrosoft CodeAnalysis 2.8\r\nVisual Studio 2019 Preview 2\r\n\r\n**Description**\r\nAdditionalFiles is empty on a CompilationStartAction but is correctly populated on a SyntaxNodeAction. This prevents users from taking action which require AdditionalFiles at compilation start.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an analyzer which registers a CompilationStartAction\r\n\r\n        public override void Initialize(AnalysisContext context)\r\n        {\r\n            context.RegisterCompilationStartAction(this.AnalyzeAdditionalFiles);\r\n        }\r\n\r\n        private void AnalyzeAdditionalFiles(CompilationStartAnalysisContext context)\r\n        {\r\n            if (!context.Options.AdditionalFiles.Any()) \r\n                   Debugger.Launch();\r\n        }\r\n\r\n2. In your consuming project, add an additional file\r\n\r\n```\r\n    <ItemGroup>\r\n      <AdditionalFiles Include=\"foo.log\" />\r\n    </ItemGroup>\r\n```\r\n\r\n3. Add the analyzer to your project\r\n\r\n**Expected Behavior**:\r\nDebugger should not launch\r\n\r\n**Actual Behavior**:\r\nDebugger launches\r\n\r\n4. Change your analyzer to register a SyntaxNodeAction instead\r\n        \r\n        public static readonly SyntaxKind[] PossibleSyntaxKinds = { SyntaxKind.SimpleMemberAccessExpression, SyntaxKind.ObjectCreationExpression };\r\n\r\n        public override void Initialize(AnalysisContext context)\r\n        {\r\n            context.RegisterSyntaxNodeAction(this.AnalyzeSyntaxNode, PossibleSyntaxKinds);\r\n        }\r\n\r\n        private void AnalyzeSyntaxNode(SyntaxNodeAnalysisContext context)\r\n        {\r\n            if (!context.Options.AdditionalFiles.Any()) \r\n                   Debugger.Launch();\r\n        }\r\n\r\n**Expected Behavior**:\r\nDebugger does not launch\r\n\r\n**Actual Behavior**:\r\nDebugger does not launch. (Behavior is correct)\r\n\r\nNote: May be related to #12840","Url":"https://github.com/dotnet/roslyn/issues/35357","RelatedDescription":"Open issue \"AdditionalFiles is empty in CompilationStartAnalysisContext.Options.AdditionalFiles but correct in SyntaxNodeAnalysisContext.Options.AdditionalFiles\" (#35357)"},{"Id":"438555152","IsPullRequest":true,"CreatedAt":"2019-04-30T00:00:43","Actor":"dotnet-bot","Number":"35356","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35356","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#35356)"},{"Id":"438551918","IsPullRequest":true,"CreatedAt":"2019-04-29T23:45:25","Actor":"shyamnamboodiripad","Number":"35354","RawContent":null,"Title":"Update version for Microsoft.Net.Test.Sdk package","State":"open","Body":"This change is required in order to enable running on non-desktop TFM tests from VS test explorer window.","Url":"https://github.com/dotnet/roslyn/pull/35354","RelatedDescription":"Open PR \"Update version for Microsoft.Net.Test.Sdk package\" (#35354)"},{"Id":"438542944","IsPullRequest":false,"CreatedAt":"2019-04-29T23:04:57","Actor":"heejaechang","Number":"35353","RawContent":null,"Title":"NFW on document navigation service - top 3 on 15.9","State":"open","Body":"Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentNavigationService.CanNavigateToSpan(Workspace,DocumentId,TextSpan)\r\n\r\nhttps://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&et=FAULT&sd=2019-03-29&ed=2019-04-28&pn=vs&fn=ide/vbcs/nonfatalwatson&en=nonfatalwatson&fh=64b8d182-a17b-9bfd-493d-ed4a737d2b2d&bl=d15.9$15.9.28307.586$15.9.11$visualstudio.15.release&bl=d15.9$15.9.28307.557$15.9.10$visualstudio.15.release&bl=d15.9$15.9.28307.518$15.9.9$visualstudio.15.release&bl=d15.9$15.9.28307.481$15.9.8$visualstudio.15.release&bl=d15.9$15.9.28307.423$15.9.7$visualstudio.15.release&bl=d15.9$15.9.28307.344$15.9.6$visualstudio.15.release&bl=d15.9$15.9.28307.280$15.9.5$visualstudio.15.release&bl=d15.9$15.9.28307.222$15.9.4$visualstudio.15.release&bl=d15.9$15.9.28307.145$15.9.3$visualstudio.15.release&bl=d15.9$15.9.28307.108$15.9.2$visualstudio.15.release&bl=d15.9$15.9.28307.105$15.9.1$visualstudio.15.release&bl=d15.9$15.9.28307.53$15.9.0$visualstudio.15.release&ex=devenv&ut=external\r\n\r\nhttps://watsonportal.microsoft.com/CabSearch?DateTimeFormat=UTC&MaxRows=100&P3=vs.ide.vbcs.nonfatalwatson&P4=system.argumentoutofrange&P5=microsoft.visualstudio.languageservices&P6=microsoft.visualstudio.languageservices.implementation.visualstudiodocumentnavigationservice.cannavigatetospan\r\n\r\ncab\r\nhttps://watsonportal.microsoft.com/Failure?FailureSearchText=a4a50075-0cc2-7be4-10d5-9cc7f0b5801a#","Url":"https://github.com/dotnet/roslyn/issues/35353","RelatedDescription":"Open issue \"NFW on document navigation service - top 3 on 15.9\" (#35353)"},{"Id":"438540817","IsPullRequest":false,"CreatedAt":"2019-04-29T22:56:07","Actor":"heejaechang","Number":"35352","RawContent":null,"Title":"NFW in introduce variable. top 2 from 15.9","State":"open","Body":"Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32,Int32)\r\nMicrosoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GetExpressionUnderSpan(SyntaxTree,TextSpan,CancellationToken)\r\nMicrosoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitialize(TextSpan,CancellationToken)\r\nMicrosoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.Generate(TService,SemanticDocument,TextSpan,CancellationToken)\r\nMicrosoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.<IntroduceVariableAsync>d__17.MoveNext()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task)\r\nMicrosoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.<ComputeRefactoringsAsync>d__0.MoveNext()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task)\r\nMicrosoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.<GetRefactoringFromProviderAsync>d__8.MoveNext()\r\n\r\n...\r\n\r\nhttps://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&et=FAULT&sd=2019-03-29&ed=2019-04-28&pn=vs&fn=ide/vbcs/nonfatalwatson&en=nonfatalwatson&fh=bcfbe09d-ba6b-44c6-a257-e56ab226236d&bl=d15.9$15.9.28307.586$15.9.11$visualstudio.15.release&bl=d15.9$15.9.28307.557$15.9.10$visualstudio.15.release&bl=d15.9$15.9.28307.518$15.9.9$visualstudio.15.release&bl=d15.9$15.9.28307.481$15.9.8$visualstudio.15.release&bl=d15.9$15.9.28307.423$15.9.7$visualstudio.15.release&bl=d15.9$15.9.28307.344$15.9.6$visualstudio.15.release&bl=d15.9$15.9.28307.280$15.9.5$visualstudio.15.release&bl=d15.9$15.9.28307.222$15.9.4$visualstudio.15.release&bl=d15.9$15.9.28307.145$15.9.3$visualstudio.15.release&bl=d15.9$15.9.28307.108$15.9.2$visualstudio.15.release&bl=d15.9$15.9.28307.105$15.9.1$visualstudio.15.release&bl=d15.9$15.9.28307.53$15.9.0$visualstudio.15.release&ex=devenv&ut=external\r\n\r\nhttps://watsonportal.microsoft.com/CabSearch?DateTimeFormat=UTC&MaxRows=100&P3=vs.ide.vbcs.nonfatalwatson&P4=system.argumentoutofrange&P5=microsoft.codeanalysis&P6=microsoft.codeanalysis.text.textspan.frombounds\r\n\r\ncab \r\nhttps://watsonportal.microsoft.com/Failure?FailureSearchText=b7f0dd5d-567e-45cb-6ee4-8cec0becc658#\r\n","Url":"https://github.com/dotnet/roslyn/issues/35352","RelatedDescription":"Open issue \"NFW in introduce variable. top 2 from 15.9\" (#35352)"},{"Id":"438533667","IsPullRequest":true,"CreatedAt":"2019-04-29T22:30:09","Actor":"gafter","Number":"35351","RawContent":null,"Title":"Fixup from bad merge.","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35351","RelatedDescription":"Closed or merged PR \"Fixup from bad merge.\" (#35351)"},{"Id":"438532336","IsPullRequest":false,"CreatedAt":"2019-04-29T22:22:32","Actor":"jcouv","Number":"35350","RawContent":null,"Title":"Allow attributes on local function parameters","State":"open","Body":"From discussion in LDM today (4/29/2019), this would help with async-iterator local functions that want to use `[EnumeratorCancellation]`.\r\n\r\nFYI @agocke ","Url":"https://github.com/dotnet/roslyn/issues/35350","RelatedDescription":"Open issue \"Allow attributes on local function parameters\" (#35350)"},{"Id":"438521362","IsPullRequest":false,"CreatedAt":"2019-04-29T21:44:29","Actor":"chsienki","Number":"35349","RawContent":null,"Title":"Deconstruction nullability warnings should be clearer","State":"open","Body":"See `Deconstruction_ExtensionMethod_03` in NullableReferenceTypesTests.cs\r\n\r\nWe report ```warning CS8604: Possible null reference argument for parameter 'p' in 'void E.Deconstruct<object, object>(Pair<object, object> p, out object t, out object u)'``` for a deconstruction with a nullable `this` parameter.\r\n\r\nSee `Deconstruction_20`  in NullableReferenceTypesTests.cs\r\n\r\nWe report `warning CS8602: Dereference of a possibly null reference.` for the deconstruction of a possible null value.\r\n\r\nSee `Deconstruction_29` in NullableReferenceTypesTests.cs\r\n\r\nWe report `warning CS8602: Dereference of a possibly null reference.` for the deconstruction of the an inner value.\r\n\r\nWhile these are all technically correct, they are quite confusing, and don't really help to identify the problem immediately. For consistency of the multiple cases and ease of understanding we should add a specific warning for deconstruction that makes it clear why it would result in a null reference exception.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35349","RelatedDescription":"Open issue \"Deconstruction nullability warnings should be clearer\" (#35349)"},{"Id":"438514364","IsPullRequest":false,"CreatedAt":"2019-04-29T21:23:21","Actor":"JoeRobich","Number":"35348","RawContent":null,"Title":"Apply ngen optimization for CodeLens assembly when training exists","State":"open","Body":"Applying ngen optimization was commented our for code lens because builds were failing due to incomplete training data.\r\n\r\nhttps://github.com/dotnet/roslyn/tree/dev/jorobich/apply-codelens-optprof","Url":"https://github.com/dotnet/roslyn/issues/35348","RelatedDescription":"Open issue \"Apply ngen optimization for CodeLens assembly when training exists\" (#35348)"},{"Id":"438499857","IsPullRequest":true,"CreatedAt":"2019-04-29T20:44:34","Actor":"RikkiGibson","Number":"35347","RawContent":null,"Title":"Add release/* globs to azure pipelines config","State":"open","Body":"This should reduce config churn moving forward as we add new release branches (e.g. `dev16.2-preview2`, etc...)","Url":"https://github.com/dotnet/roslyn/pull/35347","RelatedDescription":"Open PR \"Add release/* globs to azure pipelines config\" (#35347)"},{"Id":"438409396","IsPullRequest":false,"CreatedAt":"2019-04-29T19:27:57","Actor":"Gnbrkm41","Number":"35340","RawContent":null,"Title":"Possible false-positive IDE0004 redundant cast warning","State":"closed","Body":"**Version Used**: \r\nVS 2019 16.0.2\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n        public Task Method(string name, int r, int g, int b)\r\n        {\r\n            return Method(name, (float)r, (float)g, (float)b);\r\n        }\r\n\r\n        public Task Method(string name, float r, float g, float b)\r\n        {\r\n            var colour = new Color(r, g, b);\r\n\r\n            return DoSomething(name, colour);\r\n        }\r\n\r\n        public Task DoSomething(string name, Color color)\r\n        {\r\n            return Task.CompletedTask;\r\n        }\r\n``` \r\n\r\n**Expected Behavior**:\r\nNo suggestion should be made regarding the removal of casting, as it would lead to recursion.\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/42944058/56912283-de683f00-6aa6-11e9-8380-bb47a5364f19.png)\r\n\r\nSuggestion is made to remove the cast.","Url":"https://github.com/dotnet/roslyn/issues/35340","RelatedDescription":"Closed issue \"Possible false-positive IDE0004 redundant cast warning\" (#35340)"},{"Id":"438419637","IsPullRequest":true,"CreatedAt":"2019-04-29T19:19:36","Actor":"jaredpar","Number":"35341","RawContent":null,"Title":"Move to non Int pools","State":"closed","Body":"Responding to a request from our core engineering team to move to a\r\ndifferent pool.","Url":"https://github.com/dotnet/roslyn/pull/35341","RelatedDescription":"Closed or merged PR \"Move to non Int pools\" (#35341)"},{"Id":"438453831","IsPullRequest":false,"CreatedAt":"2019-04-29T18:44:24","Actor":"vsfeedback","Number":"35346","RawContent":null,"Title":"brace matching wrong","State":"open","Body":"brace matching is not always working correctly.\nif I click next to the opening brace it highlights the correct closing one.\nIf I click on the closing brace, it might highlight a wrong opening one. I get that behaviour if I click in between two adjacent closing brackets\n\nfor example, I get the wrong opening brace highlighted if I click between the two closing braces\nb(())\n\nor between the )) here:\nos.path.join(os.path.dirname(os.path.abspath(__file__)),'dsp')\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/331171/brace-matching-wrong.html\nVSTS ticketId: 679504_\n_These are the original issue comments:_\n\nAriel Yang - MSFT [MSFT] on 9/10/2018, 02:43 AM (231 days ago): <p>Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.</p><p><strong></strong><u></u><sub></sub><sup></sup></p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35346","RelatedDescription":"Open issue \"brace matching wrong\" (#35346)"},{"Id":"438444480","IsPullRequest":false,"CreatedAt":"2019-04-29T18:20:32","Actor":"vsfeedback","Number":"35345","RawContent":null,"Title":"Saving .aspx files slow","State":"open","Body":"VSF_TYPE_MARKDOWNSaving an smallish (300 front, 400 loc code behind) .aspx control takes seconds vs the second or two for VS 2017.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/470148/saving-aspx-files-slow.html\nVSTS ticketId: 802507_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/26/2019, 08:55 PM (61 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 2/26/2019, 11:48 PM (61 days ago): <p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35345","RelatedDescription":"Open issue \"Saving .aspx files slow\" (#35345)"},{"Id":"438440161","IsPullRequest":true,"CreatedAt":"2019-04-29T18:09:17","Actor":"ryzngard","Number":"35344","RawContent":null,"Title":"Fix buttons for high contrast on PullMembersUpWarningDialog","State":"open","Body":"Use Button instead of vs:Button on warning dialog for PMU\r\n\r\nFixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/794008 and https://devdiv.visualstudio.com/_workitems/edit/794027 ","Url":"https://github.com/dotnet/roslyn/pull/35344","RelatedDescription":"Open PR \"Fix buttons for high contrast on PullMembersUpWarningDialog\" (#35344)"},{"Id":"438433101","IsPullRequest":true,"CreatedAt":"2019-04-29T17:50:42","Actor":"tmeschter","Number":"35343","RawContent":null,"Title":"Remove unnecessary parameter","State":"open","Body":"The `CoreCompile` targets for C# and VB were both passing the set of `PotentialEditorConfigFiles` to the `PotentialAnalyzerConfigFiles` input parameter of `CscTask`/`VbcTask`. However, this parameter no longer exists. At one point in the development of the editorconfig-in-compiler feature we had a separate MSBuild task that would compute both the actual and potential .editorconfig file paths and pass them to the task. These are now computed as part of the MSBuild evaluation pass, and the potential .editorconfig files are passed to the project systems via a separate target (`GetPotentialEditorConfigFiles` in Microsoft.Common.CurrentVersion.targets).","Url":"https://github.com/dotnet/roslyn/pull/35343","RelatedDescription":"Open PR \"Remove unnecessary parameter\" (#35343)"},{"Id":"438427961","IsPullRequest":false,"CreatedAt":"2019-04-29T17:37:21","Actor":"vsfeedback","Number":"35342","RawContent":null,"Title":"Invalid \"Add parameter\" suggestion","State":"open","Body":"VSF_TYPE_MARKDOWN1. Create new .net core console app project;\n2. Paste the following code:\n\n```\nusing System;\n\nnamespace AddParameterBug\n{\n    class A\n    {\n    }\n\nclass B : A\n    {\n    }\n\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            var b = new B();\n            Foo(b);\n        }\n\nprivate static void Foo(A a)\n        {\n        }\n    }\n}\n```\n\n3. Change the `Foo(b);` to `Foo(b, 1);` in `Main`;\n4. `Foo` call gets the red squiggly;\n5. Right click red squiggly and pick &quot;Quick actions and refactorings&quot;;\n6. Pick the &quot;Add parameter to 'Program.Foo(A)'&quot;;\n7. Notice that `Foo(A a)` became `Foo(B b, A a)`, which is incorrect and unexpected;\n\nMethod should change to `Foo(A a, int something)`.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/545907/invalid-add-parameter-suggestion.html\nVSTS ticketId: 855387_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/25/2019, 01:12 AM (4 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 4/29/2019, 00:33 PM (4 min ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35342","RelatedDescription":"Open issue \"Invalid \"Add parameter\" suggestion\" (#35342)"},{"Id":"438408272","IsPullRequest":false,"CreatedAt":"2019-04-29T16:46:09","Actor":"pierceboggan","Number":"35339","RawContent":null,"Title":"Refactor > Rename doesn't update references to that type in XAML","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.1.0 Preview 3.0 [28824.287.d16.1]\r\nVisualStudio.16.IntPreview/16.1.0-pre.3.0+28824.287.d16.1\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2019   00435-60000-00000-AA045\r\nMicrosoft Visual C++ 2019\r\n\r\nApplication Insights Tools for Visual Studio Package   9.0.20307.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nAzure App Service Tools v3.0.0   16.1.371.8123\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.77 (master@24013d5)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   16.1.1 (2473f22)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   5.1.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nVisual Basic Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   16.1.0.537 (d16-1@2ce5a1af6)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   16.1.99.108 (remotes/origin/master@f2a5d8344)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   16.2.101 (cb5edbc)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.3.0.18 (HEAD/2da2d99e8)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2018-08@3f5ec6d95c3\r\n    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3\r\n    LibZipSharp: grendello/LibZipSharp/d16-1@44de300\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.27.1@8212a2d\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.10.0.150 (99c0cfa)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Mobile App (Xamarin.Forms) app from File > New Project.\r\n2. Open Views/AboutPage.xaml.\r\n3. Open ViewModels/AboutViewModel.cs.\r\n4. Right-click type > Rename AboutViewModel.\r\n\r\n**Expected Behavior**:\r\nType name is updated in C# and in referenced XAML.\r\n\r\n**Actual Behavior**:\r\nType name is updated in C#, but not referenced XAML.\r\n\r\n**Video**:\r\nhttps://www.screencast.com/t/Qc0EJXRKE5k","Url":"https://github.com/dotnet/roslyn/issues/35339","RelatedDescription":"Open issue \"Refactor > Rename doesn't update references to that type in XAML\" (#35339)"},{"Id":"438407436","IsPullRequest":false,"CreatedAt":"2019-04-29T16:44:10","Actor":"pierceboggan","Number":"35338","RawContent":null,"Title":"Refactor > Rename applies to C# type, but not references in XAML","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.1.0 Preview 3.0 [28824.287.d16.1]\r\nVisualStudio.16.IntPreview/16.1.0-pre.3.0+28824.287.d16.1\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2019   00435-60000-00000-AA045\r\nMicrosoft Visual C++ 2019\r\n\r\nApplication Insights Tools for Visual Studio Package   9.0.20307.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nAzure App Service Tools v3.0.0   16.1.371.8123\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.77 (master@24013d5)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   16.1.1 (2473f22)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   5.1.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nVisual Basic Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   16.1.0.537 (d16-1@2ce5a1af6)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   16.1.99.108 (remotes/origin/master@f2a5d8344)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   16.2.101 (cb5edbc)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.3.0.18 (HEAD/2da2d99e8)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2018-08@3f5ec6d95c3\r\n    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3\r\n    LibZipSharp: grendello/LibZipSharp/d16-1@44de300\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.27.1@8212a2d\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.10.0.150 (99c0cfa)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Mobile App (Xamarin.Forms) app from File > New Project.\r\n2. Open Views/AboutPage.xaml.cs.\r\n3. Right-click type > Rename.\r\n\r\n**Expected Behavior**:\r\nType name is updated in C# and associated XAML file.\r\n\r\n**Actual Behavior**:\r\nType name is updated in C#, but not associated XAML file.\r\n\r\n**Video**:\r\nhttps://www.screencast.com/t/gBhVaSibqNaq","Url":"https://github.com/dotnet/roslyn/issues/35338","RelatedDescription":"Open issue \"Refactor > Rename applies to C# type, but not references in XAML\" (#35338)"},{"Id":"438406816","IsPullRequest":false,"CreatedAt":"2019-04-29T16:42:28","Actor":"pierceboggan","Number":"35337","RawContent":null,"Title":"Refactor-to-New-Namespace doesn't work for C# types that are associated with XAML","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.1.0 Preview 3.0 [28824.287.d16.1]\r\nVisualStudio.16.IntPreview/16.1.0-pre.3.0+28824.287.d16.1\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2019   00435-60000-00000-AA045\r\nMicrosoft Visual C++ 2019\r\n\r\nApplication Insights Tools for Visual Studio Package   9.0.20307.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nAzure App Service Tools v3.0.0   16.1.371.8123\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.77 (master@24013d5)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   16.1.1 (2473f22)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   5.1.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nVisual Basic Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   16.1.0.537 (d16-1@2ce5a1af6)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   16.1.99.108 (remotes/origin/master@f2a5d8344)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   16.2.101 (cb5edbc)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.3.0.18 (HEAD/2da2d99e8)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2018-08@3f5ec6d95c3\r\n    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3\r\n    LibZipSharp: grendello/LibZipSharp/d16-1@44de300\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.27.1@8212a2d\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.10.0.150 (99c0cfa)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Mobile App (Xamarin.Forms) app from File > New Project.\r\n2. Open Views/AboutPage.xaml.cs.\r\n3. Use the new refactor-to-new-namespace functionality.\r\n\r\n**Expected Behavior**:\r\nNamespace is updated in C# and associated XAML file.\r\n\r\n**Actual Behavior**:\r\nNamespace is not updated in C# and associated XAML file.\r\n\r\n**Video**:\r\nhttps://www.screencast.com/t/qVrPpfMRG","Url":"https://github.com/dotnet/roslyn/issues/35337","RelatedDescription":"Open issue \"Refactor-to-New-Namespace doesn't work for C# types that are associated with XAML\" (#35337)"},{"Id":"438394644","IsPullRequest":false,"CreatedAt":"2019-04-29T16:11:55","Actor":"jasonmalinowski","Number":"35335","RawContent":null,"Title":"SnapshotSerializationTests.cs seems to be duplicating logic from SolutionCreator.cs","State":"open","Body":"While chatting with @heejaechang we noticed that SnapshotSerializationTests.cs has a helper GetSolutionAsync that reconstructs a solution from a remotable data service. If you squint a bit, that's also what SolutionCreator.cs is doing, but there's just not a shared interface for both of them to be using. This should be unified so we're not maintaining that logic twice, and also so then we get additional test coverage of SolutionCreator.cs.","Url":"https://github.com/dotnet/roslyn/issues/35335","RelatedDescription":"Open issue \"SnapshotSerializationTests.cs seems to be duplicating logic from SolutionCreator.cs\" (#35335)"},{"Id":"438347986","IsPullRequest":false,"CreatedAt":"2019-04-29T14:35:15","Actor":"TessenR","Number":"35334","RawContent":null,"Title":"Roslyn incorrectly ignores nullability specified in explicit cast when a user defined conversion is used","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (27 Apr 2019)\r\nLatest commit a8b934 by dotnet-automerge-bot:\r\nMerge pull request #35305 from dotnet/merges/dev16.1-to-master\r\n\r\nMerge dev16.1 to master\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  public static extern implicit operator D(C c);\r\n}\r\n\r\nclass D\r\n{\r\n  void M1(C c)\r\n  {\r\n    var d = (D?) c;\r\n    d.ToString(); \r\n  }\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgMz8AjADYqAD3gJcFAJZgADoTkBjOTAoB7RYggwtCCgBEAFOwqqAlAG5GAX0aNWJ7r34AWCgFlh5y1buPAx8fABuEEYoFAC8FKbGAPxWlnYhoSgAdAAqWgDKMAhyuADmprYU7o4M9kA\r\n\r\n**Expected Behavior**:\r\n`CS8602: Dereference of a possibly null reference.` reported for the line `d.ToString();`\r\n\r\n**Actual Behavior**:\r\nNo warnings.\r\n\r\n**Notes**\r\nWhile this _might_ seem expected as the conversion operator cannot return null according to its signature I believe that this is a bug because Roslyn ignores such knowledge in favor of explicit casts' nullability in every other scenario.\r\n\r\nE.g. when the source expression is s not null constant\r\n```cs\r\nvar s = (string?) \"constantNotNullString\";\r\ns.ToString(); // CS8602\r\n```\r\n\r\nWhen the original value is annotated as not null:\r\n```cs\r\nstring M(string s) => ((string?) s).ToString();\r\n```\r\n\r\nWhen it's just a chain of identity conversions. Note that this example is almost identical to the original one except for the two casts maked as redundant by Roslyn which nevertheless alter the variable's nullability just because unlike the third one they do not involve user defined conversions.\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  public static extern implicit operator D(C c);\r\n}\r\n\r\nclass D\r\n{\r\n  void M1(C c)\r\n  {\r\n    var d = (D?) (D) (D?) c;\r\n    d.ToString(); \r\n  }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35334","RelatedDescription":"Open issue \"Roslyn incorrectly ignores nullability specified in explicit cast when a user defined conversion is used\" (#35334)"},{"Id":"438294709","IsPullRequest":true,"CreatedAt":"2019-04-29T12:38:39","Actor":"rossng","Number":"35333","RawContent":null,"Title":"Fix broken links in Language Feature Status","State":"open","Body":"Fix links to some of the specifications for C# 8 features.","Url":"https://github.com/dotnet/roslyn/pull/35333","RelatedDescription":"Open PR \"Fix broken links in Language Feature Status\" (#35333)"},{"Id":"438201651","IsPullRequest":false,"CreatedAt":"2019-04-29T08:29:15","Actor":"canton7","Number":"35332","RawContent":null,"Title":"Incorrect behaviour on conditional access to generic field where the generic type is a Nullable<T>","State":"open","Body":"**Version Used**: \r\n\r\nMaster (27 April 2019)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nusing System;\r\npublic static class Program {\r\n    public static void Main() {\r\n        MutableStruct? field = new MutableStruct();\r\n        MutableStruct? param = new MutableStruct();\r\n        var printer = new Printer<MutableStruct?>(field);\r\n        printer.Print(ref param);\r\n        printer.Print(ref param);\r\n    }\r\n}\r\n\r\npublic class Printer<T>\r\n{\r\n    T field;\r\n    public Printer(T f) => field = f;\r\n    public void Print(ref T param)\r\n    {\r\n    \tConsole.WriteLine(field?.ToString() + field?.ToString() + \" \" +\r\n        \tparam?.ToString() + param?.ToString());\r\n    }\r\n}\r\n\r\npublic struct MutableStruct\r\n{\r\n    int i;\r\n    public override string ToString() => (++i).ToString();\r\n}\r\n```\r\n\r\n[SharpLab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOwD4AEAMABLgIwDcAsAFC4DMxJAbMQEwMDshA3tYX8fVLNcAFkIBZCAEtMACgCU3XvxXj0MCMAA2cAMowMAYxgB+QgDMpcLQBNCAXkKY4AdwnrNO/UZgLKVFVUPbT0DdGMzAAcIBAgwBydXdw0Q73DfeX9A/gA3GMJIhBl4BATnNwAFIswSgB41FK8wiIA+WUtrG0zlbMLixAA6KuLZBDhzApi47oDsguqSoYXR8cnYsBmVAF9qHapqOlZCYZrEWoAVFuoeWb5ziytbLP5Dk5LZe/NFexaHzoTzM8+IdRMdlmMJvdout5D0lLdCABIUgATnajxsJgG5wA9t4ZABzBSEADUf1sWNx+MwRMUZIARIRGSS4SpEdC4pS8QZCcSyRywFzqbTNvw9nsDvRYD5kp5Qj5rnDioQpECBIQcTlEEUbHAGEQqTyacSfoRZCSSVJ5NjudVaf4tkA=)\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\n12 12\r\n34 34\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\n11 11\r\n11 11\r\n```\r\n\r\n**Discussion**:\r\n\r\nYou can see the correct behaviour if you change all occurrences of `MultableStruct?` to `MutableStruct`. If you remove the `ref`, then `param` shows the correct behaviour.\r\n\r\nWhen there is conditional access of an unconstrained generic field, something similar to the following gets emitted (in C#):\r\n\r\n```csharp\r\nref T reference = ref field;\r\nobject result;\r\nif (default(T) == null)\r\n{\r\n    T val = reference;\r\n    reference = ref val;\r\n    if (val == null)\r\n    {\r\n        result = null;\r\n        goto done;\r\n    }\r\n}\r\nresult = reference.ToString(); // Constrained virtual call\r\ndone:\r\n```\r\n\r\nThis has separate code paths for when `T` is a reference or value type, as value types must not be copied (but cannot be null), but reference types must be checked for null (but the reference can be copied).\r\n\r\nUnfortunately `default(Nullable<X>)` boxes to `null`, so when `T` is a `Nullable<X>`, we hit the code path meant for reference types, and copy it before calling `ToString()`.","Url":"https://github.com/dotnet/roslyn/issues/35332","RelatedDescription":"Open issue \"Incorrect behaviour on conditional access to generic field where the generic type is a Nullable<T>\" (#35332)"},{"Id":"438176356","IsPullRequest":true,"CreatedAt":"2019-04-29T07:08:16","Actor":"YairHalberstadt","Number":"35331","RawContent":null,"Title":"Pull Members Up: A couple of fixes to pull to base class as abstract","State":"open","Body":"See #34235\r\n\r\nMake methods overrides when pulling to base class with the make abstract option.\r\n\r\nRemove abstract methods when pulling to base class with the make abstract option.","Url":"https://github.com/dotnet/roslyn/pull/35331","RelatedDescription":"Open PR \"Pull Members Up: A couple of fixes to pull to base class as abstract\" (#35331)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"438579138","IsPullRequest":true,"CreatedAt":"2019-04-30T02:20:37","Actor":"Dotnet-GitSync-Bot","Number":"7377","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @dschinde @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7377","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7377)"},{"Id":"438513386","IsPullRequest":true,"CreatedAt":"2019-04-30T02:15:37","Actor":"Dotnet-GitSync-Bot","Number":"7374","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7374","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7374)"},{"Id":"438541485","IsPullRequest":true,"CreatedAt":"2019-04-30T02:15:22","Actor":"tannergooding","Number":"7375","RawContent":null,"Title":"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02","State":"closed","Body":"CC. @jaredpar, @agocke, @dotnet/nullablefc\r\n\r\nCoreRT side for dotnet/arcade#2640 and https://github.com/dotnet/buildtools/pull/2248","Url":"https://github.com/dotnet/corert/pull/7375","RelatedDescription":"Closed or merged PR \"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02\" (#7375)"},{"Id":"438554093","IsPullRequest":true,"CreatedAt":"2019-04-29T23:56:09","Actor":"trylek","Number":"7376","RawContent":null,"Title":"Fixes for deficiencies in generic method & field encoding","State":"open","Body":"This change seems to be fixing one of the last CPAOT compilation\r\nbuckets by making the logic for emitting field signatures more\r\nrobust. I have also tried to improve the logic for choosing\r\nwhether to emit method instantiation stub to make the import cells\r\nbetter match between CPAOT and Crossgen.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7376","RelatedDescription":"Open PR \"Fixes for deficiencies in generic method & field encoding\" (#7376)"},{"Id":"438489810","IsPullRequest":true,"CreatedAt":"2019-04-29T21:18:44","Actor":"Dotnet-GitSync-Bot","Number":"7373","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sdmaclea","Url":"https://github.com/dotnet/corert/pull/7373","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7373)"},{"Id":"437406314","IsPullRequest":true,"CreatedAt":"2019-04-29T19:05:32","Actor":"trylek","Number":"7360","RawContent":null,"Title":"Fix the TypeLoadException CPAOT compilation bucket","State":"closed","Body":"I have fixed this by constructing TypeFixupSignature instances\r\nusing a new helper method TypeSignature (much like what we're\r\ndoing for methods) which calls the CheckCanGenerateEEType method\r\nupfront. This properly throws the exception to JIT so that it\r\ngets caught in compileMethodInternal and just suppresses jitting\r\nof a particular method rather than tearing down the entire\r\ncompilation process.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Down to 14 (compared to previous 24) ILC failures in CoreCLR Pri#1 tests.","Url":"https://github.com/dotnet/corert/pull/7360","RelatedDescription":"Closed or merged PR \"Fix the TypeLoadException CPAOT compilation bucket\" (#7360)"},{"Id":"438447622","IsPullRequest":false,"CreatedAt":"2019-04-29T18:28:31","Actor":"verelpode","Number":"7372","RawContent":null,"Title":"Internal compiler error when .NET Native compiles __makeref, __refvalue, TypedReference","State":"open","Body":"When I put the following C# code in a UWP app in VS 2019 16.0.2, it works well when compiled for Debug.  However, when it is compiled for Release (.NET Native), then error ILT0005 and \"Internal compiler error\" occur.\r\n\r\n```\r\nclass MyTestTypedReference\r\n{\r\n\tprotected int fTestField0 = 123;\r\n\tprotected int fTestField1 = 456;\r\n\tprotected string fTestField2 = \"TestStr\";\r\n\tprotected int fTestField3 = 0;\r\n\r\n\tpublic unsafe void TestMakeTrArray()\r\n\t{\r\n\t\tSystem.TypedReference* trArray = stackalloc System.TypedReference[4];\r\n\t\ttrArray[0] = __makeref(fTestField0);\r\n\t\ttrArray[1] = __makeref(fTestField1);\r\n\t\ttrArray[2] = __makeref(fTestField2);\r\n\t\ttrArray[3] = __makeref(fTestField3);\r\n\t\tTestReceiveTrArray(trArray);\r\n\t}\r\n\r\n\tpublic unsafe void TestReceiveTrArray(System.TypedReference* inParams)\r\n\t{\r\n\t\tRealMethod1(__refvalue(inParams[0], int), __refvalue(inParams[1], int), __refvalue(inParams[2], string), out __refvalue(inParams[3], int));\r\n\t}\r\n\r\n\tpublic void RealMethod1(int inA, int inB, string inC, out int outD)\r\n\t{\r\n\t\toutD = 6000;\r\n\t}\r\n}\r\n\r\npublic unsafe delegate void TestDelegateWithTrArray(object inInstance, System.TypedReference* inParams);\r\n```\r\n\r\nThe error is:\r\n```\r\nInternal compiler error: Object reference not set to an instance of an object.\r\n```\r\n\r\nIf you comment out `TestReceiveTrArray` and compile the rest (meaning compile the __makeref stuff but not the __refvalue stuff), then the error is:\r\n```\r\nError ILT0005: 'C:\\Users\\XXXX\\.nuget\\packages\\runtime.win10-x64.microsoft.net.native.compiler\\2.1.8\\tools\\x64\\ilc\\Tools\\nutc_driver.exe \r\n@\"C:\\Users\\XXXX\\Documents\\TestUwpApp1\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\TestUwpApp1.rsp\"' \r\nreturned exit code -2147483645\r\n```\r\n\t\t\r\n[System.TypedReference](https://docs.microsoft.com/en-us/dotnet/api/System.TypedReference) is low-level but quite useful in certain scenarios such as dynamic programming, Reflection, late-binding / dynamic binding at runtime.\r\n\r\n`System.Delegate.DynamicInvoke(params object[])` and `System.Reflection.MethodBase.Invoke(object, object[])` are useful but costly, especially when executed many times in a loop.  The above code snippet is an example of how `TypedReference` can be used to dynamically execute a method without the overhead of boxing all of the parameters.  It works great when compiled to CIL, but not when compiled with .NET Native 2.1.8.\r\n\r\nIn some circumstances, an alternative to TypedReference is the DLR, but if I remember correctly, it was @jkotas who wrote somewhere something like the following comment about the DLR or DLR with .NAT Native: _\"This stuff is super fragile\"_.  I feel that it is too risky to switch over to a solution that relies upon the DLR.  The DLR is unnecessary in this particular case/project because TypedReference is a much simpler solution that works well.  Some projects do need the full functionality of the DLR, but other projects can get away with TypedReference.\r\n\r\nI very much hope that .NET Native will fully support TypedReference.  Given the choice between .NET Native supporting TypedReference or the DLR, then obviously TypedReference is far far easier to support and maintain than the big complex DLR.  \r\n","Url":"https://github.com/dotnet/corert/issues/7372","RelatedDescription":"Open issue \"Internal compiler error when .NET Native compiles __makeref, __refvalue, TypedReference\" (#7372)"},{"Id":"438200708","IsPullRequest":true,"CreatedAt":"2019-04-29T08:26:43","Actor":"MichalStrehovsky","Number":"7371","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7371","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7371)"},{"Id":"438000242","IsPullRequest":false,"CreatedAt":"2019-04-29T06:17:58","Actor":"forestbat","Number":"7369","RawContent":null,"Title":"How do you think to this repository？","State":"closed","Body":"https://github.com/kekyo/IL2C\r\nCan this repo replace CppCodeGen？","Url":"https://github.com/dotnet/corert/issues/7369","RelatedDescription":"Closed issue \"How do you think to this repository？\" (#7369)"},{"Id":"438095410","IsPullRequest":true,"CreatedAt":"2019-04-28T20:14:07","Actor":"trylek","Number":"7370","RawContent":null,"Title":"Experimental fix for infinite generic expansion in CPAOT","State":"open","Body":"As usual, writing the e-mail on this subject helped me clear my\r\nthoughts and I subsequently realized there's a rather elegant way\r\nto do this very cheaply (at least in some cases): we just add the\r\nnotion of a \"parent method\" to MethodWithGCInfo and, upon creation\r\nof a new MethodEntrypoint, we throw if the history linked list\r\ncontains the same generic method, just instantiated with a different\r\nparameter variants.\r\n\r\nI don't insist on merging this in if you think it's fundamentally\r\nflawed or incomplete; I just wanted to point it out as an easy option\r\nto fix some occurrences of this issue; it does fix compilation of\r\nthe test\r\n\r\nJIT\\Regression\\clr-x64-JIT\\v4.0\\devdiv374539\\DevDiv_374539\\DevDiv_374539.exe\r\n\r\nI mentioned in the e-mail. I'm looking forward to feedback.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7370","RelatedDescription":"Open PR \"Experimental fix for infinite generic expansion in CPAOT\" (#7370)"},{"Id":"437769279","IsPullRequest":true,"CreatedAt":"2019-04-27T17:25:18","Actor":"ifew","Number":"7366","RawContent":null,"Title":"Example connect database via Dapper","State":"closed","Body":"Simple, Easy to understand and test corert with connect database via Dapper Library","Url":"https://github.com/dotnet/corert/pull/7366","RelatedDescription":"Closed or merged PR \"Example connect database via Dapper\" (#7366)"},{"Id":"437500631","IsPullRequest":true,"CreatedAt":"2019-04-27T12:09:57","Actor":"Dotnet-GitSync-Bot","Number":"7363","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @ericstj","Url":"https://github.com/dotnet/corert/pull/7363","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7363)"},{"Id":"437800589","IsPullRequest":true,"CreatedAt":"2019-04-27T01:43:45","Actor":"jkotas","Number":"7367","RawContent":null,"Title":"Use implicit MTA for threadpool threads","State":"closed","Body":"It is not ok to leave COM initialized on Win32 threadpool threads. This change skips COM initialization\r\non Win32 threadpool threads completely and takes advantage of implicit MTA that is initialized by the finalizer\r\nthread.\r\n\r\nThis fix should provide high compatiblity with .NET Framework/Core, without performance overhead of initialization/uninitializing COM every time; or running dedicated threadpool.\r\n\r\nFixes #7356","Url":"https://github.com/dotnet/corert/pull/7367","RelatedDescription":"Closed or merged PR \"Use implicit MTA for threadpool threads\" (#7367)"},{"Id":"437235647","IsPullRequest":false,"CreatedAt":"2019-04-27T01:43:45","Actor":"hc4","Number":"7356","RawContent":null,"Title":"ThreadPool usage on Windows","State":"closed","Body":"I make a library, which get called from Java app with JNA on Windows.\r\nEverything was fine, until I start using of ThreadPool. After that I start getting some strange lockups of main Java application.\r\nI suspect that problem somewhere in GC. It tries to suspend and stackwalk all TPP threads, which was running .Net code. Even if there is no any .Net code currently executing in it. And it may conflict with Java GC, which also possibly tries to stackwalk this threads.\r\n\r\nMaybe we should somehow \"detach\" non CLR threads, which was exitted from .Net code?","Url":"https://github.com/dotnet/corert/issues/7356","RelatedDescription":"Closed issue \"ThreadPool usage on Windows\" (#7356)"},{"Id":"437864224","IsPullRequest":true,"CreatedAt":"2019-04-26T23:36:11","Actor":"trylek","Number":"7368","RawContent":null,"Title":"Add the enum value for manifest metadata to R2R header constants","State":"closed","Body":"Not the real implementation, just the enum now I have it in fresh\r\nmemory from the R2RDump change :-).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7368","RelatedDescription":"Closed or merged PR \"Add the enum value for manifest metadata to R2R header constants\" (#7368)"},{"Id":"437659417","IsPullRequest":true,"CreatedAt":"2019-04-26T14:17:21","Actor":"MichalStrehovsky","Number":"7365","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7365","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7365)"},{"Id":"437161592","IsPullRequest":false,"CreatedAt":"2019-04-26T10:46:29","Actor":"ifew","Number":"7353","RawContent":null,"Title":"System.Data.SqlClient build fails on macOS","State":"closed","Body":"I change from EFCore to Dapper Library. it's very fast x2\r\nbut I get an error when has compiled to native \r\n\r\n```bash\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54.67 ms for /Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj.\r\n  aws-lambda-lambdanative -> /Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/bin/Release/netcoreapp2.2/osx-x64/aws-lambda-lambdanative.dll\r\n  /usr/local/opt/llvm/bin/clang\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [/Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj]\r\n  Undefined symbols for architecture x86_64:\r\n    \"_NetSecurityNative_ImportPrincipalName\", referenced from:\r\n        _System_Data_SqlClient_Interop_NetSecurityNative__ImportPrincipalName in aws-lambda-lambdanative.o\r\n  ld: symbol(s) not found for architecture x86_64\r\nclang-8 : error : linker command failed with exit code 1 (use -v to see invocation) [/Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj]\r\n/Users/chitpong/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang \"obj/Release/netcoreapp2.2/osx-x64/native/aws-lambda-lambdanative.o\" -o \"bin/Release/netcoreapp2.2/osx-x64/native/aws-lambda-lambdanative\" /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libbootstrapper.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libRuntime.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libSystem.Private.CoreLib.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libSystem.Private.TypeLoader.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Globalization.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.IO.Compression.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Net.Security.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Security.Cryptography.Native.Apple.a -g -Wl,-rpath,'$ORIGIN' -lstdc++ -ldl -lm -lz -licucore -framework CoreFoundation -framework Security -framework GSS\" exited with code 1. [/Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj]\r\n```","Url":"https://github.com/dotnet/corert/issues/7353","RelatedDescription":"Closed issue \"System.Data.SqlClient build fails on macOS\" (#7353)"},{"Id":"437549320","IsPullRequest":true,"CreatedAt":"2019-04-26T08:04:21","Actor":"MichalStrehovsky","Number":"7364","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7364","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7364)"},{"Id":"437439250","IsPullRequest":true,"CreatedAt":"2019-04-26T02:04:13","Actor":"Suchiman","Number":"7362","RawContent":null,"Title":"Port GC changes from coreclr - 5","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7358\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/09b7f0a0f44798108a33d7e698420f147c45461b):**\r\n- https://github.com/dotnet/coreclr/commit/ac0ba59034c46da198b12812899e34dec21990e9 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/efd4d357f009e4509a6147f390d2d9fde7d717d0 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/6f013232079c2a2dd9f0f58362443b5ec5b43c15 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ea22d55fc0392cf858d4c1c17d504523a1e18732 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/734f13c964610d1f4fee08611beca1aa02de0082 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bf7cf40e14b8cf35c68be089735dd16081db9dc4 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3e6334b8797731bc24a2b9c69a7b7073a92b66a9 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/ab43a5fbeccca1e4948dd140592361fe7c3335c3 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/da00894a5d657b3ba06ebf6e004e5a5a0976434b (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/56776b20f5902ef60d43cb502d734193b2521fca (gc only port)","Url":"https://github.com/dotnet/corert/pull/7362","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 5\" (#7362)"},{"Id":"437351908","IsPullRequest":true,"CreatedAt":"2019-04-25T23:31:19","Actor":"Suchiman","Number":"7358","RawContent":null,"Title":"Port GC changes from coreclr - 4","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7342\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ed57233f4d26114d45b1293ced80a09f879f72cf):**\r\n- https://github.com/dotnet/coreclr/commit/41617fee235d22d9e6dc1fa31548de63637551fa (manual port)\r\n- https://github.com/dotnet/coreclr/commit/be8504bd8a63962c84567990f0b84019f299166c (manual port)\r\n- https://github.com/dotnet/coreclr/commit/7ba3cc8174dec2626a403f5ccd35c79a3bf6cf77 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/e17f40a186c294f977e336cab049d9026cf40c78 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/273e63414deccefd1ad048062e4d1ebfe5e5eb50 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f9d0333d8955c11a2e8f495f0a12d6384fb95541 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/7721f89f517f09f90d46a1078f0d26caf3b310c0 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/447521434ab80ea97a42108a429e3773e71f7c66 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/ea55c4a25945d8ccb39d686b89f1fa729b4ebe23 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/2dfc74df1f9fe238eb2ec25c4764b8b65432b010 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/09b7f0a0f44798108a33d7e698420f147c45461b (manual port)\r\n\r\n**Points of interest**:\r\nSome of the commits moved features to the runtime that were disabled in the GC with `#ifndef FEATURE_REDHAWK`, i've transplanted the equivalent to `gcrhenv.cpp`, do tell if you rather wish to remove it.","Url":"https://github.com/dotnet/corert/pull/7358","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 4\" (#7358)"},{"Id":"437420073","IsPullRequest":true,"CreatedAt":"2019-04-25T23:31:02","Actor":"Dotnet-GitSync-Bot","Number":"7361","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jorive","Url":"https://github.com/dotnet/corert/pull/7361","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7361)"},{"Id":"437358873","IsPullRequest":true,"CreatedAt":"2019-04-25T21:43:11","Actor":"Dotnet-GitSync-Bot","Number":"7359","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7359","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7359)"},{"Id":"437314563","IsPullRequest":true,"CreatedAt":"2019-04-25T19:22:16","Actor":"Dotnet-GitSync-Bot","Number":"7357","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7357","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7357)"},{"Id":"437221876","IsPullRequest":true,"CreatedAt":"2019-04-25T15:31:36","Actor":"Dotnet-GitSync-Bot","Number":"7355","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7355","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7355)"},{"Id":"437148429","IsPullRequest":true,"CreatedAt":"2019-04-25T13:23:15","Actor":"MichalStrehovsky","Number":"7352","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7352","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7352)"},{"Id":"437019169","IsPullRequest":true,"CreatedAt":"2019-04-25T13:03:02","Actor":"kouvel","Number":"7349","RawContent":null,"Title":"Add missing null check to ThreadInt64PersistentCounter","State":"closed","Body":"Fixes https://github.com/dotnet/corert/issues/7348\r\n- Getting the `Value` property of a `ThreadLocal` as in `ThreadInt64PersistentCounter.Increment()` would link a node into the `ThreadLocal`'s linked list, and before the `Value` property is set by `Increment()`, another thread may get a null node while scanning the linked nodes. There could be other races too.\r\n- Added check for null node when scanning the values of all threads","Url":"https://github.com/dotnet/corert/pull/7349","RelatedDescription":"Closed or merged PR \"Add missing null check to ThreadInt64PersistentCounter\" (#7349)"},{"Id":"436995276","IsPullRequest":false,"CreatedAt":"2019-04-25T13:03:02","Actor":"jkotas","Number":"7348","RawContent":null,"Title":"NullReferenceException in ThreadInt64PersistentCounter","State":"closed","Body":"We are hitting this crash pretty often in the CI:\r\n\r\n```\r\nRunning test /__w/4/s/tests/src/Simple/BasicThreading BasicThreading\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.ThreadInt64PersistentCounter.get_Count() + 0xae\r\n   at System.Threading.ClrThreadPool.AdjustMaxWorkersActive() + 0x60\r\n   at System.Threading.ClrThreadPool.NotifyWorkItemComplete() + 0xaf\r\n   at System.Threading.ThreadPool.NotifyWorkItemComplete() + 0x20\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() + 0x343\r\n   at System.Threading.ClrThreadPool.WorkerThread.WorkerThreadStart() + 0xe5\r\n```","Url":"https://github.com/dotnet/corert/issues/7348","RelatedDescription":"Closed issue \"NullReferenceException in ThreadInt64PersistentCounter\" (#7348)"},{"Id":"437170902","IsPullRequest":false,"CreatedAt":"2019-04-25T12:24:17","Actor":"hc4","Number":"7354","RawContent":null,"Title":"ES_BUILD_PN defined by default","State":"open","Body":"https://github.com/dotnet/corert/blob/d0683071605aed956497506ed1aae4d366be0190/src/System.Private.CoreLib/src/System.Private.CoreLib.csproj#L32\r\n\r\nAm I correct that ES_BUILD_PN means ProjectN?\r\nAnd ProjectN means UWP apps?\r\n\r\nI've found that there is check, for Windows version is disabled when ES_BUILD_PN  defined.\r\nhttps://github.com/dotnet/corert/blob/a3e3edbb8e8e95ba97c1ad5f36d38965b768fd55/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/EventSource.cs#L1500\r\n\r\nSo there is thrown exception on resolving EventSetInformation function on Windows 7\r\nI'am not sure if it can break something, but atleast it looks strange.","Url":"https://github.com/dotnet/corert/issues/7354","RelatedDescription":"Open issue \"ES_BUILD_PN defined by default\" (#7354)"},{"Id":"437045189","IsPullRequest":true,"CreatedAt":"2019-04-25T07:28:48","Actor":"MichalStrehovsky","Number":"7351","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7351","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7351)"},{"Id":"437044290","IsPullRequest":true,"CreatedAt":"2019-04-25T07:18:51","Actor":"dotnet-bot","Number":"7350","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7350","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7350)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"437957511","IsPullRequest":false,"CreatedAt":"2019-04-30T00:35:08","Actor":"sdmaclea","Number":"3185","RawContent":null,"Title":"ProjectReference to classlib does not layout satellites correctly.","State":"closed","Body":"Observed in the tip of corefx\r\n\r\nGiven a project reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\nCulture directory is absent in target layout.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nReported in dotnet/corefx#37246.  Relevant code above is from dotnet/corefx#37248\r\n","Url":"https://github.com/dotnet/sdk/issues/3185","RelatedDescription":"Closed issue \"ProjectReference to classlib does not layout satellites correctly.\" (#3185)"},{"Id":"438551516","IsPullRequest":true,"CreatedAt":"2019-04-29T23:43:29","Actor":"sbomer","Number":"3188","RawContent":null,"Title":"Fix dotnet-core feed url in Versions.props","State":"open","Body":"This fixes some build failures I was seeing locally, where the\r\nMicrosoft.NET.HostModel package was not found.\r\n\r\nI wonder if it may be related to the restore failures we were seeing elsewhere @peterhuene.","Url":"https://github.com/dotnet/sdk/pull/3188","RelatedDescription":"Open PR \"Fix dotnet-core feed url in Versions.props\" (#3188)"},{"Id":"438516330","IsPullRequest":true,"CreatedAt":"2019-04-29T21:29:03","Actor":"sbomer","Number":"3187","RawContent":null,"Title":"Update stage0","State":"open","Body":"To get the linker fix in https://github.com/mono/linker/pull/551\r\n/cc @swaroop-sridhar","Url":"https://github.com/dotnet/sdk/pull/3187","RelatedDescription":"Open PR \"Update stage0\" (#3187)"},{"Id":"438256811","IsPullRequest":false,"CreatedAt":"2019-04-29T10:52:35","Actor":"springy76","Number":"3186","RawContent":null,"Title":"adding to CreateSatelliteAssembliesDependsOn broken for Microsoft.NET.Sdk.WindowsDesktop?","State":"open","Body":"I converted an existing old-style `.csproj` WPF project targeting net472 to the new-style .csproj format using `Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\"` + `<UseWPF>true</UseWPF>` (SDK 3.0 preview4 is installed) -- still targeting net472.\r\n\r\nLocalization was realized for many years by hooking into build process by this line (at least this is the only reference I found leading to the custom task `CreateLocBamlSatellites`):\r\n```xml\r\n<CreateSatelliteAssembliesDependsOn>$(CreateSatelliteAssembliesDependsOn);CreateLocBamlSatellites</CreateSatelliteAssembliesDependsOn>\r\n```\r\n\r\nIs this something which will come back to life in later previews or should this be done differently?\r\n\r\n**Update**: I changed build output verbosity to detailed and spotted this:\r\n```\r\n1>Property reassignment: $(CreateSatelliteAssembliesDependsOn)=\"\r\n1>      _GenerateSatelliteAssemblyInputs;\r\n1>      ComputeIntermediateSatelliteAssemblies;\r\n1>      GenerateSatelliteAssemblies\r\n1>    \" (previous value: \";CreateLocBamlSatellites\") at C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets (3573,5)\r\n```\r\n\r\nMy .targets file (included by `<Import Project=`)  which includes the code above already is the last line before `</Project>`.\r\n\r\n**Update2**:\r\nOriginally the `<Include` was below this line:\r\n```xml\r\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n```\r\nbut inserting this line breaks the entire build:\r\n> C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(233,5): error NETSDK1005: Assets file 'MyProject\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.0'. Ensure that restore has run and that you have included 'net40' in the TargetFrameworks for your project.","Url":"https://github.com/dotnet/sdk/issues/3186","RelatedDescription":"Open issue \"adding to CreateSatelliteAssembliesDependsOn broken for Microsoft.NET.Sdk.WindowsDesktop?\" (#3186)"},{"Id":"437882972","IsPullRequest":true,"CreatedAt":"2019-04-27T00:01:40","Actor":"dotnet-bot","Number":"3184","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3184","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3184)"},{"Id":"437881849","IsPullRequest":true,"CreatedAt":"2019-04-26T23:52:58","Actor":"peterhuene","Number":"3183","RawContent":null,"Title":"Import publish profiles in the .NET Core SDK.","State":"open","Body":"This commit implements importing publish profiles in the .NET Core SDK.\r\n\r\nPreviously, there were two ways to get the publish profile respected when\r\npublishing .NET Core applications:\r\n\r\n* Using the Web SDK, which implicitly imports the `Microsoft.NET.Sdk.Publish`\r\nSDK.\r\n* Explicitly referencing the `Microsoft.NET.Sdk.Publish` SDK in the `Project\r\nelement` (e.g. `Project=\"Microsoft.NET.Sdk;Microsoft.NET.Sdk.Publish\"`).\r\n\r\nThe problem is that the publish profile was being imported *after* many of the\r\nimportant SDK properties (such as RuntimeIdentifier, SelfContained, and\r\nUseAppHost) were defaulted by the .NET Core SDK.  Because the .NET Core SDK\r\ndoes not expect the values of these properties to change once defaulted, users\r\nare unable to set a particular property in the publish profile and get the\r\nexpected behavior in the .NET Core SDK.\r\n\r\nFor example, when setting just the `RuntimeIdentifier` in the publish profile,\r\nit would publish without a RID-subdirectory, not as self-contained, and without\r\nan apphost.  Contrast this to using the `--runtime` option for `dotnet\r\npublish`, which uses a RID-subdirectory and publishes self-contained with an\r\napphost. Up until now, users had to work around this by setting *all* of the\r\ndesired properties in the publish profile that would otherwise be defaulted by\r\nthe .NET Core SDK.\r\n\r\nThe Web SDK fixed this by importing the publish profile *before* the .NET Core\r\nSDK was imported (see aspnet/websdk#534).  However, this could not fix the\r\nproblem for users that have an existing project that directly references the\r\n`Microsoft.NET.Sdk.Publish` SDK.\r\n\r\nTo fix that, the .NET Core SDK will not attempt to import the publish profile\r\nif it hasn't already been imported by the Web SDK.  If the .NET Core SDK\r\nsuccessfully imports the publish profile, it sets a property that prevents the\r\nWeb SDK from attempting to import it.\r\n\r\nFixes #10647.","Url":"https://github.com/dotnet/sdk/pull/3183","RelatedDescription":"Open PR \"Import publish profiles in the .NET Core SDK.\" (#3183)"},{"Id":"435703501","IsPullRequest":true,"CreatedAt":"2019-04-26T22:30:15","Actor":"dotnet-bot","Number":"3165","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3165","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3165)"},{"Id":"437847425","IsPullRequest":true,"CreatedAt":"2019-04-26T21:11:31","Actor":"dsplaisted","Number":"3182","RawContent":null,"Title":"WIP -  Reference empty packages","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3182","RelatedDescription":"Open PR \"WIP -  Reference empty packages\" (#3182)"},{"Id":"437640705","IsPullRequest":true,"CreatedAt":"2019-04-26T12:04:17","Actor":"dotnet-maestro[bot]","Number":"3181","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19226.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3181","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3181)"},{"Id":"437465921","IsPullRequest":true,"CreatedAt":"2019-04-26T01:57:11","Actor":"swaroop-sridhar","Number":"3180","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"open","Body":"When creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\nThis fixes a non-detereministic test failure in the ILLink tests.","Url":"https://github.com/dotnet/sdk/pull/3180","RelatedDescription":"Open PR \"Fix ILLink teset flakiness\" (#3180)"},{"Id":"437399381","IsPullRequest":true,"CreatedAt":"2019-04-26T01:00:46","Actor":"dsplaisted","Number":"3179","RawContent":null,"Title":"Fix KeyNotFoundException in GenerateDepsFile task","State":"closed","Body":"This would occur when there was a library in the assets file with a dependency on a library that wasn't in the assets file.\r\n\r\nFixes #3159","Url":"https://github.com/dotnet/sdk/pull/3179","RelatedDescription":"Closed or merged PR \"Fix KeyNotFoundException in GenerateDepsFile task\" (#3179)"},{"Id":"437290082","IsPullRequest":false,"CreatedAt":"2019-04-25T16:27:32","Actor":"Lemraj","Number":"3178","RawContent":null,"Title":"Could not upgrade to .Net Core 2.2.4","State":"open","Body":"Hi,\r\n\r\nI am trying to upgrade my solution to the latest .net core version (2.2.4).\r\n\r\nI have noticed that the test projects (xunit) are not updated automatically.\r\n\r\nI could reproduce it by creating a new solution with a wen api project and xunit project.\r\n\r\n![image](https://user-images.githubusercontent.com/10677560/56751833-39d4bd00-6787-11e9-9850-ae0f142a8e16.png)\r\n\r\nI have installed the latest versions of the runtime & the SDK:\r\n![image](https://user-images.githubusercontent.com/10677560/56752028-aea7f700-6787-11e9-8dc6-75478b861287.png)\r\n![image](https://user-images.githubusercontent.com/10677560/56752052-bbc4e600-6787-11e9-9836-a9f68f444248.png)\r\n\r\n\r\nAny idea why the xunit project is not upgraded?","Url":"https://github.com/dotnet/sdk/issues/3178","RelatedDescription":"Open issue \"Could not upgrade to .Net Core 2.2.4\" (#3178)"},{"Id":"437162717","IsPullRequest":true,"CreatedAt":"2019-04-25T13:40:21","Actor":"dotnet-maestro[bot]","Number":"3177","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3177","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3177)"},{"Id":"436853725","IsPullRequest":true,"CreatedAt":"2019-04-24T20:47:36","Actor":"johnbeisner","Number":"3176","RawContent":null,"Title":"Fix the parameters: Windows call to 'RunPerfTestsOnHelix'","State":"closed","Body":"The parameters were incorrect with Windows call to 'RunPerfTestsOnHelix'. This caused the upload to Benchview 'label' to look like this: `SDK perf Windows_NT x86 Release rolling refs/heads/master master` instead of the correct naming convection: `SDK perf Ubuntu_16.04 x64 Release rolling master 5b7f189b8297594a1001159dd290fb482d718969` The commit hash is missing; the branch is mis-named.","Url":"https://github.com/dotnet/sdk/pull/3176","RelatedDescription":"Closed or merged PR \"Fix the parameters: Windows call to 'RunPerfTestsOnHelix'\" (#3176)"},{"Id":"436657996","IsPullRequest":true,"CreatedAt":"2019-04-24T14:05:53","Actor":"dotnet-maestro[bot]","Number":"3174","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3174","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3174)"},{"Id":"436707362","IsPullRequest":false,"CreatedAt":"2019-04-24T13:46:29","Actor":"RiteshKo","Number":"3175","RawContent":null,"Title":"XML is not being published through the Docker container","State":"open","Body":"I am running a .net core 2.1 application through Docker ToolBox and Kitematic. I am new to the Docker world. In the application, I am loading an XML file in the application like below:\r\n\r\nXDocument xmlFile = XDocument.Load(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"XML\\\\Lookup.xml\"));\r\n\r\nMy Docker file is: \r\n\r\nFROM microsoft/dotnet:2.1-runtime\r\n\r\nWORKDIR /app\r\nCOPY . /app\r\n\r\nENTRYPOINT [\"dotnet\", \"ConsoleApp.dll\"]\r\n\r\nAn image got created for this application but while running the same image through Kitematic I am getting below error:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not find file '/app/XML\\ObjectInfoLookup.xml'.\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)\r\n   at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)\r\n   at System.Xml.XmlTextReaderImpl.FinishInitUriString()\r\n   at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)\r\n   at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)\r\n   at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings)\r\n   at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)\r\n\r\nCan anyone help me here?\r\n \r\n","Url":"https://github.com/dotnet/sdk/issues/3175","RelatedDescription":"Open issue \"XML is not being published through the Docker container\" (#3175)"},{"Id":"436441305","IsPullRequest":false,"CreatedAt":"2019-04-24T00:10:17","Actor":"tmat","Number":"3173","RawContent":null,"Title":"Move Version calculation to targets","State":"open","Body":"Currently, the .NET Core SDK initializes `Version` property during evaluation phase in `Microsoft.NET.DefaultAssemblyInfo.targets` based on the values of `VersionPrefix` and `VersionSuffix` properties. \r\n\r\nConsider a NuGet package that provides a optional feature that generates version based on some property set by the project. The package targets do not have the opportunity to set `VersionPrefix` since there is no extension point in between the import of .NET Core `Sdk.targets` and `Microsoft.NET.DefaultAssemblyInfo.targets`. The first available extension point is an import of \"BeforeMicrosoftCommonTargets\".\r\n\r\n**Proposal**\r\n \r\nMove the `Version` initialization to a target and update all usages to depend on that target. This would be a breaking change, but would also allow more complex version calculation to be performed than can be done by just evaluation. E.g. version based on git commit depth, etc.\r\n\r\n**Alterantive**\r\n\r\nInitialize `Version` after common targets are imported.\r\nThis would also be breaking, since the version wouldn't be initialized where it would have been before.\r\n\r\n**Non-breaking alternative**\r\n\r\nAdd `ImportBeforeDotNetSdkTargets` property that contains a list of files to be imported from `Sdk.targets` before the rest of the SDK targets are imported. The SDK package could then add its targets file to the list in its `.props` file and set the `VersionPrefix` and `VersionSuffix` in that file. \r\n\r\n**Workaround**\r\nUntil one of the options above is available, we work around this in Arcade by hooking up BeforeCommonTargets and overriding all properties that were set based on `VersionPrefix` to that point. \r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3173","RelatedDescription":"Open issue \"Move Version calculation to targets\" (#3173)"},{"Id":"436370590","IsPullRequest":true,"CreatedAt":"2019-04-23T22:39:09","Actor":"dsplaisted","Number":"3172","RawContent":null,"Title":"Ignore NuGet warning NU5123 (for long paths)","State":"closed","Body":"#3132 added a test project with a long path in it (HelloWorldWithSubDirs).  When we create dotnet tool packages for the tests, we bundle the test assets in them, and this is triggering [NU5123](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5123) [in our builds](https://dev.azure.com/dnceng/internal/_build/results?buildId=166542).\r\n\r\nSo this PR fixes this by ignoring that NuGet warning.","Url":"https://github.com/dotnet/sdk/pull/3172","RelatedDescription":"Closed or merged PR \"Ignore NuGet warning NU5123 (for long paths)\" (#3172)"},{"Id":"435938360","IsPullRequest":true,"CreatedAt":"2019-04-23T21:01:47","Actor":"johnbeisner","Number":"3167","RawContent":null,"Title":"Move the SDK Performance tests to Helix","State":"closed","Body":"Move the SDK Performance tests to Helix\r\n\r\n@MattGal\r\n@DrewScoggins\r\n@adiaaida \r\n","Url":"https://github.com/dotnet/sdk/pull/3167","RelatedDescription":"Closed or merged PR \"Move the SDK Performance tests to Helix\" (#3167)"},{"Id":"436270337","IsPullRequest":true,"CreatedAt":"2019-04-23T18:21:09","Actor":"dsplaisted","Number":"3171","RawContent":null,"Title":"Updates for running tests as tools","State":"closed","Body":"- Allow test execution directory to be specified via command line\r\n- Create .binlogs for basic library building tests (this can help to investigate the environment the tests are running in, which SDK is used, etc.)","Url":"https://github.com/dotnet/sdk/pull/3171","RelatedDescription":"Closed or merged PR \"Updates for running tests as tools\" (#3171)"},{"Id":"436150441","IsPullRequest":true,"CreatedAt":"2019-04-23T13:59:54","Actor":"dotnet-maestro[bot]","Number":"3169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3169)"},{"Id":"436151372","IsPullRequest":false,"CreatedAt":"2019-04-23T12:06:14","Actor":"Rast1234","Number":"3170","RawContent":null,"Title":"dotnet test without shared runtime","State":"open","Body":"Currently we run our apps with heavily customized corporate docker image. We publish self-contained apps, because we deemed it too time consuming and potentially problematic to get shared runtime to run in there.\r\nSo basically we do this (extra stuff omitted) in microsoft's SDK image:\r\n```dockerfile\r\nRUN dotnet restore \"Foo.csproj\" --runtime linux-x64\r\nRUN dotnet build \"Foo.csproj\" --runtime linux-x64 --no-restore \r\nRUN dotnet publish \"Foo.csproj\" --runtime linux-x64 --no-restore --self-contained\r\n```\r\nThen we copy results to our image and just run the binary.\r\n\r\nIs it possible to publish and run tests the same way? I am aware that test project is not executable by itself and requires a test runner. Test runner relies on shared runtime AFAIK. Can we get a self-contained test runner somehow? Or integrate it into test project maybe?","Url":"https://github.com/dotnet/sdk/issues/3170","RelatedDescription":"Open issue \"dotnet test without shared runtime\" (#3170)"},{"Id":"436140961","IsPullRequest":false,"CreatedAt":"2019-04-23T11:39:08","Actor":"vitek-karas","Number":"3168","RawContent":null,"Title":"dotnet store fails with \"the destination is a folder instead of a file\" in 3.0 SDK","State":"open","Body":"This is based on the repro from dotnet/cli#11223 which can be found [here](https://github.com/narcis-pv/dotnet-core-target-manifest-bug).\r\n\r\nRunning the `dotnet store` command described in the repro with .NET Core SDK 3.0.100-preview6-011540 produces error like this:\r\n```\r\nMicrosoft (R) Build Engine version 16.1.65-preview+gc86abee47b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 929.46 ms for F:\\AppModel\\repro\\dotnet-core-target-manifest-bug-master\\TargetManifestBug.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011540\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(347,5): error MSB3024: Could not copy the file \"F:\\AppModel\\repro\\dotnet-core-target-manifest-bug-master\\obj\\Debug\\netcoreapp2.2\\win7-x64\\TargetManifestBug.exe\" to the destination file \"C:\\Users\\vitkaras\\.dotnet\\store\\x64\\netcoreapp2.2\\\", because the destination is a folder instead of a file. To copy the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles. [F:\\AppModel\\repro\\dotnet-core-target-manifest-bug-master\\TargetManifestBug.csproj]\r\n  Files were composed in C:\\Users\\vitkaras\\.dotnet\\store\\x64\\netcoreapp2.2\\\r\n  The list of packages stored is in C:\\Users\\vitkaras\\.dotnet\\store\\x64\\netcoreapp2.2\\artifact.xml\r\n```\r\n\r\nRunning the same on .NET Core SDK 2.2.100 (using `global.json`) works just fine.\r\nSeems like a regression in 3.0.","Url":"https://github.com/dotnet/sdk/issues/3168","RelatedDescription":"Open issue \"dotnet store fails with \"the destination is a folder instead of a file\" in 3.0 SDK\" (#3168)"},{"Id":"435563213","IsPullRequest":true,"CreatedAt":"2019-04-22T18:27:06","Actor":"wli3","Number":"3163","RawContent":null,"Title":"Update branding to preview 6","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3163","RelatedDescription":"Closed or merged PR \"Update branding to preview 6\" (#3163)"},{"Id":"435560822","IsPullRequest":true,"CreatedAt":"2019-04-22T17:51:40","Actor":"wli3","Number":"3162","RawContent":null,"Title":"Merge master to release/3.0.1xx for preview5","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3162","RelatedDescription":"Closed or merged PR \"Merge master to release/3.0.1xx for preview5\" (#3162)"},{"Id":"435738707","IsPullRequest":false,"CreatedAt":"2019-04-22T14:05:48","Actor":"bryanfarrell","Number":"3166","RawContent":null,"Title":"GenerateAssemblyInfo support for InternalsVisibleToAttribute and AssemblyMetadataAttribute","State":"open","Body":"Hello,\r\n\r\nIn our .NET 4.7.2 applications we set the InternalsVisibleTo attribute on our libraries so that our internal unit test projects can run unit tests on internal methods without having to go through the trouble of putting public signatures of these methods into the class and wrapping everything in preprocessor directives.\r\n\r\nWe also make use of the AssemblyMetadata attribute to have our build system add vital diagnostic information to our assemblies so that there is never an issue with identifying when a project was built, from what repo commit etc.  This has made identifying and fixing bugs much easier more efficient.\r\n\r\nTo set these values we've manually set the InternalsVisibleTo attribute at design time into the AssemblyInfo.cs file.  We also have our build system inject the values into the AssemblyInfo.cs file at build time during the build (but the changes are not committed as the metadata all build version related metadata).\r\n\r\nIn .NET Standard and Core we've found that the common Assembly Attributes are now set in the project file.  Do you have plans to add these other attributes to the Microsoft.NET.GenerateAssemblyInfo.targets file so that they an be included in the project file so the new generate assembly info functionality can support adding these to the output assembly?\r\n\r\nWe have read there is a workaround where we can set the property GenerateAssemblyInfo to False and add an AssemblyInfo.cs file to the .NET Standard/Core projects but we would rather not use this workaround.  For one we do not know how long it will be supported and also we do not know if it will break the new project build workflow in some way.\r\n\r\nCan you please provide some advice on how these attributes can be used in .NET Standard/Core project files without the workaround or an indication if you plan on adding support for them to the Microsoft.NET.GenerateAssemblyInfo.targets file?\r\n\r\nThank you,\r\n\r\nBryan","Url":"https://github.com/dotnet/sdk/issues/3166","RelatedDescription":"Open issue \"GenerateAssemblyInfo support for InternalsVisibleToAttribute and AssemblyMetadataAttribute\" (#3166)"},{"Id":"435688151","IsPullRequest":false,"CreatedAt":"2019-04-22T10:56:31","Actor":"raffaeler","Number":"3164","RawContent":null,"Title":"Error parsing dotnet publish parameters when using ReadyToRun ","State":"open","Body":"Version:   3.0.100-preview5-011507\r\nCommit:    fddc070d00\r\n\r\nWhen running `dotnet publish` using both `-p:ReadyToRun` and `--self-contained` the message is misleading:\r\n\r\n```\r\n$ dotnet publish -c Release -r linux-arm --self-contained -p:ReadyToRun=true -o scd\r\nMicrosoft (R) Build Engine version 16.1.65-preview+gc86abee47b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/opt/dotnet/sdk/3.0.100-preview5-011507/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.TargetingPackResolution.targets(85,33): error MSB4030: \"-p:ReadyToRun=true\" is an invalid value for the \"SelfContained\" parameter of the \"ResolveFrameworkReferences\" task.\r\nThe \"SelfContained\" parameter is of type \"System.Boolean\". [/home/pi/test3/test3.csproj]\r\n```\r\n\r\nIf instead, I specify `=true` the command succeed:\r\n```\r\n $ dotnet publish -c Release -r linux-arm --self-contained=true -p:ReadyToRun=true -o scd\r\nMicrosoft (R) Build Engine version 16.1.65-preview+gc86abee47b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 372.72 ms for /home/pi/test3/test3.csproj.\r\n/opt/dotnet/sdk/3.0.100-preview5-011507/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/pi/test3/test3.csproj]\r\n  test3 -> /home/pi/test3/bin/Release/netcoreapp3.0/linux-arm/test3.dll\r\n  test3 -> /home/pi/test3/bin/Release/netcoreapp3.0/linux-arm/test3.Views.dll\r\n  test3 -> /home/pi/test3/scd/\r\n```\r\nIt looks like `-p:ReadyToRun` already forces `--self-contained=true` but I would like the command output to clearly states whether the produced output is self-contained or not.\r\n\r\nBy the way, the parameter `--self-contained` can be used alone (without `=true`) and it has been possible even in .NET Core 2.x. The following command is valid and succeeds:\r\n```\r\ndotnet publish -c Release -r linux-arm --self-contained -o abc\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3164","RelatedDescription":"Open issue \"Error parsing dotnet publish parameters when using ReadyToRun \" (#3164)"},{"Id":"435484986","IsPullRequest":false,"CreatedAt":"2019-04-21T07:46:06","Actor":"JamesNK","Number":"3161","RawContent":null,"Title":".NET Core 3 does not load pdbs from NuGet packages","State":"open","Body":"Source Link does not work when a NuGet package has its PDB files in the primary nupkg package because the symbols are never loaded. It works in .NET Core 2.2.\r\n\r\nRepo: [ConsoleApp20.zip](https://github.com/dotnet/sdk/files/3101009/ConsoleApp20.zip)\r\n\r\nSuccess:\r\n\r\n1. View csproj and note that the version target framework is `netcoreapp2.2`\r\n2. Launch console with debugging and step into JsonConvert.SerializeObject\r\n3. Source Link downloads and opens source code file\r\n\r\nFailure:\r\n\r\n1. Change csproj target framework to `netcoreapp3.0`\r\n2. Launch console with debugging and step into JsonConvert.SerializeObject\r\n3. Visual Studio steps over the Newtonsoft.Json API.\r\n\r\nVS 2019 16.1 Preview 1\r\n.NET Core 3.0.100-preview5-011367","Url":"https://github.com/dotnet/sdk/issues/3161","RelatedDescription":"Open issue \".NET Core 3 does not load pdbs from NuGet packages\" (#3161)"},{"Id":"435390745","IsPullRequest":true,"CreatedAt":"2019-04-20T13:26:35","Actor":"dotnet-maestro[bot]","Number":"3160","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3160","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3160)"},{"Id":"435366474","IsPullRequest":false,"CreatedAt":"2019-04-20T07:27:03","Actor":"nguyenquyhy","Number":"3159","RawContent":null,"Title":"Getting \"GenerateDepsFile\" task failed unexpectedly with KeyNotFoundException when publishing project","State":"open","Body":"I am getting `\"GenerateDepsFile\" task failed unexpectedly` with `KeyNotFoundException` when publishing my projects.\r\n\r\nBelow are the conditions that trigger the issue:\r\n- .NET Core 3.0 Preview 4\r\n- WindowsAzure.Storage 9.3.3 is in a .NET Standard library\r\n\r\nThis can be fixed by either going back to Preview 3 or add WindowsAzure.Storage directly into the .NET Core project.\r\n\r\nError in build log:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(801,5): Error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.DependencyContextBuilder2.CalculateExcludedLibraries() in /_/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder2.cs:line 769\r\n   at Microsoft.NET.Build.Tasks.DependencyContextBuilder2.Build() in /_/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder2.cs:line 215\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.WriteDepsFileNew(String depsFilePath) in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 248\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 284\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.Execute() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 262\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\nSample repository: https://github.com/nguyenquyhy/IssueWindowsAzureStoragePublish","Url":"https://github.com/dotnet/sdk/issues/3159","RelatedDescription":"Open issue \"Getting \"GenerateDepsFile\" task failed unexpectedly with KeyNotFoundException when publishing project\" (#3159)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1121443014239379458","CreatedAt":"2019-04-25T15:57:04+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1121149312442912768","CreatedAt":"2019-04-24T20:30:00+00:00","UserScreenname":"dotnet","Text":"We're bringing Apache Spark to .NET devs with .NET for Apache Spark. #SparkAISummit \nhttps://t.co/QJBouS8GMj https://t.co/gmAEfZoOwi","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":58,"RawContent":null},{"Id":"1120820297974730752","CreatedAt":"2019-04-23T22:42:37+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":21,"FavoriteCount":6,"RawContent":null},{"Id":"1119356060135907328","CreatedAt":"2019-04-19T21:44:16+00:00","UserScreenname":"dotnet","Text":"Upcoming Updates for .NET Framework 4.8 https://t.co/MYATh2Zg6u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":86,"FavoriteCount":31,"RawContent":null},{"Id":"1119087634003841025","CreatedAt":"2019-04-19T03:57:38+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is now available. https://t.co/emspxTsaEX","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":381,"FavoriteCount":223,"RawContent":null},{"Id":"1119030394605588480","CreatedAt":"2019-04-19T00:10:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 4 https://t.co/7QaZC5qmx6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":371,"FavoriteCount":215,"RawContent":null},{"Id":"1118906461180973059","CreatedAt":"2019-04-18T15:57:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"1118551190927622144","CreatedAt":"2019-04-17T16:26:00+00:00","UserScreenname":"dotnet","Text":"If you're enjoying the DevOps for https://t.co/iOiV9qNspl Developers series on @ch9 check out this FREE ebook from… https://t.co/IlN3xK8cpo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":22,"RawContent":null},{"Id":"1118529550902865924","CreatedAt":"2019-04-17T15:00:00+00:00","UserScreenname":"dotnet","Text":"In part 3 of DevOps For https://t.co/iOiV9r53NV Developers @AbelSquidHead\n&amp; @jeremylikness show us how to create a… https://t.co/s7eQpdTakW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1118196772604530688","CreatedAt":"2019-04-16T16:57:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":20,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-04-30T05:30:31.4612001Z","RunDurationInMilliseconds":8715}