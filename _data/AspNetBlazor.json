{"Data":{"GitHubIssues":{"Issues":[{"Id":"368312398","IsPullRequest":false,"CreatedAt":"2018-10-09T17:15:22","Actor":"SteveSandersonMS","Number":"1546","RawContent":null,"Title":"Update Mono for 0.7.0","State":"open","Body":"- [ ] Update Mono\r\n- [ ] Update linker\r\n- [ ] Update debugger proxy code (https://github.com/mono/mono/tree/master/sdks/wasm/Mono.WebAssembly.DebuggerProxy, https://github.com/mono/mono/tree/master/sdks/wasm/ProxyDriver)","Url":"https://github.com/aspnet/Blazor/issues/1546","RelatedDescription":"Open issue \"Update Mono for 0.7.0\" (#1546)"},{"Id":"367823104","IsPullRequest":true,"CreatedAt":"2018-10-09T16:30:03","Actor":"thareshjose","Number":"1540","RawContent":null,"Title":"Updated link in README.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1540","RelatedDescription":"Closed or merged PR \"Updated link in README.md\" (#1540)"},{"Id":"368270145","IsPullRequest":true,"CreatedAt":"2018-10-09T15:30:36","Actor":"SteveSandersonMS","Number":"1545","RawContent":null,"Title":"[WIP] Tree parameters","State":"open","Body":"Not yet completed. Still to do:\r\n\r\n- [ ] Supplying updated tree parameter values to consumers\r\n- [ ] (Maybe) Some indicator for whether each incoming parameter is a tree parameter or not\r\n- [ ] Final naming and tooling decisions (e.g., whether to have a separate attribute for tree parameters; whether tree parameters should appear as tag helper attributes)\r\n- [ ] E2E tests\r\n\r\nThis PR includes a long list of changes, but hopefully should be reasonably understandable if read one commit at a time. Many of the commits are (simple-ish) refactorings that were necessary ahead of subsequent work, e.g., to generalize things or make more info available to the system. I've prefixed each such commit message with `Refactor:` so it should be clear which commits introduce new functionality and which don't.","Url":"https://github.com/aspnet/Blazor/pull/1545","RelatedDescription":"Open PR \"[WIP] Tree parameters\" (#1545)"},{"Id":"368247554","IsPullRequest":false,"CreatedAt":"2018-10-09T14:44:08","Actor":"arkadiuszwojcik","Number":"1544","RawContent":null,"Title":"Json int to enum convertion issue","State":"open","Body":"In Blazor I am trying to deserialize Json object that contains nullable enum field:\r\n\r\n`public ScoringSystem? ScoringSystem { get; set; }\r\n`\r\n\r\nenum looks like that:\r\n\r\n    public enum ScoringSystem\r\n    {\r\n        NA,\r\n        [EnumMember(Value = \"Standard (advantage)\")]\r\n        StandardAdvantage,\r\n        [EnumMember(Value = \"No-ad\")]\r\n        NoAdvantage,\r\n        [EnumMember(Value = \"Standard\")]\r\n        Standard,\r\n        [EnumMember(Value = \"NBL\")]\r\n        Nbl,\r\n        [EnumMember(Value = \"Unset\")]\r\n        Unset\r\n    }\r\n\r\nResponse I get from server contains this enum in such format:\r\n\r\n    \"scoringSystem\":1\r\n\r\nBut in Chrome and Firefox (didn't test other bowsers) I see error in console:\r\n\r\n    WASM: [System.InvalidCastException] Invalid cast from 'System.Int64' to 'DataModels.ScoringSystem'\r\n\r\nAny ideas what might be wrong? I'm using Blazor 0.6","Url":"https://github.com/aspnet/Blazor/issues/1544","RelatedDescription":"Open issue \"Json int to enum convertion issue\" (#1544)"},{"Id":"368075259","IsPullRequest":false,"CreatedAt":"2018-10-09T08:14:42","Actor":"seriouz","Number":"1543","RawContent":null,"Title":"Host Blazor app under subpath, possible?","State":"closed","Body":"I have a Blazor app which is served by nginx. How is it possible to host it along with other apps on nginx like:\r\n\r\n```\r\nhttps://www.site.com/phpsite\r\nhttps://www.site.com/aspnetapp\r\nhttp://www.site.com/blazorapp1 \r\nhttp://www.site.com/blazorapp2\r\n```\r\n\r\nI can access my dotnet apps via port directly (this is working):\r\n\r\n```\r\nhttps://www.site.com:4320/\r\nhttps://www.site.com:4321/\r\nhttps://www.site.com:4322/\r\n```\r\n\r\nWhen i am using url rewrite in nginx the files don't get loaded but the `index.html`.\r\n\r\n```\r\n  location / {\r\n      rewrite /blazorapp1(.*) /$1 break;\r\n      proxy_set_header   X-Real-IP $remote_addr;\r\n      proxy_set_header   X-Forwarded-For $remote_addr;\r\n      proxy_set_header   Host      $http_host;\r\n      proxy_pass         https://www.site.com:4321;\r\n  }\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1543","RelatedDescription":"Closed issue \"Host Blazor app under subpath, possible?\" (#1543)"},{"Id":"367878798","IsPullRequest":false,"CreatedAt":"2018-10-09T08:13:52","Actor":"jagalves","Number":"1542","RawContent":null,"Title":"Direct links do not work when base url is not '/'","State":"closed","Body":"When downloading blazor.webassembly.js it actually downloads index.html.\r\n\r\nSteps to reproduce:\r\n1. Create a new blazor project (not server side)\r\n2. Publish it\r\n3. On local IIS deployment create a virtual directory \"ui\" whose physical address points to the publish location\r\n5. Make sure IIS has permissions in the publish folder (read access to \"Everyone\")\r\n6. In the browser, go to http://localhost/ui  -> WORKS\r\n7. Using the web page naviagtion links, click \"Counter\" -> WORKS. Also copy the url in the browser\r\n8. In a new browser tab, past the url from the previous step -> FAILS\r\n\r\nIn the browser's dev tool I can see the page trying to download http://localhost/ui/ui/_framework/blazor.webassembly.js instead of http://localhost/ui/_framework/blazor.webassembly.js\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1542","RelatedDescription":"Closed issue \"Direct links do not work when base url is not '/'\" (#1542)"},{"Id":"367856391","IsPullRequest":false,"CreatedAt":"2018-10-08T16:01:54","Actor":"adrian109","Number":"1541","RawContent":null,"Title":"build.cmd fails if repo path includes space","State":"open","Body":"Hi,\r\n\r\nI have just forked the Blazor repo and cloned it to my development machine and followed the steps outlined in the [readme.md](https://github.com/aspnet/Blazor/blob/master/README.md) and run [build.cmd](https://github.com/aspnet/Blazor/blob/master/build.cmd) but it fails to build.\r\n\r\nIt looks like it is failing to complete an MSBUILD command because my local repo path contains a space.\r\n\r\nThe switch to MSBUILD command should be:\r\n`C:\\Users\\Public\\Google Drive\\Ady\\Documents\\GitHub\\Blazor\\tooling\r\n\\Microsoft.VisualStudio.BlazorExtension\\Microsoft.VisualStudio.BlazorExtension.csproj`\r\n\r\nbut it is getting split because of the space in the path and is sending the switch to MSBUILD command as:\r\n`Drive\\Ady\\Documents\\GitHub\\Blazor\\tooling\\Microsoft.VisualStudio.BlazorExtension\\Microsoft.VisualStudio.BlazorExtension.csproj`\r\n\r\n![image](https://user-images.githubusercontent.com/16767194/46620108-bc639b00-cb1b-11e8-8f24-6ba62444e190.png)\r\n\r\n\r\n@natemcmaster \r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1541","RelatedDescription":"Open issue \"build.cmd fails if repo path includes space\" (#1541)"},{"Id":"367524101","IsPullRequest":false,"CreatedAt":"2018-10-08T15:30:13","Actor":"kant2002","Number":"1531","RawContent":null,"Title":"Error window does not open error","State":"closed","Body":"Client-side Blazor (in case this is important)\r\nI build project, and Error Windows correctly show errors (2 files with 2 errors each)\r\n![image](https://user-images.githubusercontent.com/4257079/46578636-90b2b900-ca26-11e8-8699-43b200bbc6d0.png)\r\n\r\nBut when I double-click on the error, the Editor does not open the cshtml file with error.\r\nIf I manually open cshtml file with error, the double-click in Error window still does not do anything.\r\nBut errors shown in the editor.\r\n![image](https://user-images.githubusercontent.com/4257079/46578660-f99a3100-ca26-11e8-97fa-5567e679976a.png)\r\n\r\nIf that's important, lines numbers seems to be off.\r\nAnother strange thing (but maybe unrelated)\r\n```\r\n2>Pages\\Exclusions.cshtml(143,44,143,46): error CS1503: Argument 2: cannot convert from 'int?' to 'int'\r\n2>Pages\\Exclusions.cshtml(166,44,166,46): error CS1503: Argument 2: cannot convert from 'int?' to 'int'\r\n2>Pages\\Inclusion.cshtml(151,44,151,46): error CS1503: Argument 2: cannot convert from 'int?' to 'int'\r\n2>Pages\\Inclusion.cshtml(174,44,174,46): error CS1503: Argument 2: cannot convert from 'int?' to 'int'\r\n```\r\n\r\nError marker start/end seems to be the same which probably indicate empty span in the editor.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1531","RelatedDescription":"Closed issue \"Error window does not open error\" (#1531)"},{"Id":"367728998","IsPullRequest":false,"CreatedAt":"2018-10-08T13:29:19","Actor":"GDIKodiak","Number":"1538","RawContent":null,"Title":"Compiler Error CS0314","State":"closed","Body":"For example I have a generic component ComponentA and the generic has class constraint like this:\r\n  \r\n`\r\n\r\n      public class ComponentA<T> : BlazorComponent\r\n\r\n        where T : Base\r\n\r\n     {\r\n\r\n        [Parameter]\r\n\r\n        private T ModelA { get; set; } \r\n\r\n        protected override void BuildRenderTree(RenderTreeBuilder builder)\r\n\r\n        {\r\n\r\n            base.BuildRenderTree(builder);\r\n            //to do \r\n         }\r\n\r\n     }\r\n\r\n     public class Base { }\r\n\r\n     public class A : Base { }`\r\n\r\nWhen I use this component I found the TypeInference doesn`t add the class constraint and give me the error CS0314 \r\n\r\nThe type 'type1' cannot be used as type parameter 'name' in the generic type or method 'name'. There is no boxing conversion or type parameter conversion from 'type1' to 'type2'. \r\n\r\n`\r\n\r\n    internal static class TypeInference\r\n\r\n    {\r\n\r\n        public static void CreateComponentA_0<T>\r\n\r\n        (global::Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder, int seq, int __seq0, T __arg0)\r\n\r\n            where T : ??? //constraint is missed\r\n\r\n        {\r\n\r\n        builder.OpenComponent<global::WebApplication2.App.Shared.ComponentA<T>>(seq);\r\n\r\n        builder.AddAttribute(__seq0, \"ModelA\", __arg0);\r\n\r\n        builder.CloseComponent();\r\n\r\n        }\r\n\r\n    }\r\n`","Url":"https://github.com/aspnet/Blazor/issues/1538","RelatedDescription":"Closed issue \"Compiler Error CS0314\" (#1538)"},{"Id":"367781778","IsPullRequest":false,"CreatedAt":"2018-10-08T13:27:13","Actor":"rolshevsky","Number":"1539","RawContent":null,"Title":"Blazor component structure","State":"closed","Body":"Hello!\r\n\r\nIs it possible to build an `Blazor` component with separating C# component stuff (`@functions {}`), `html` and `css` files?\r\n\r\nSomething similar we have in `Angular` framework.\r\nStructure:\r\n![firefox_2018-10-08_16-04-06](https://user-images.githubusercontent.com/4366995/46610615-e6b15a80-cb13-11e8-931b-946d8dfdb089.png)\r\n\r\nUsage from `.ts`:\r\n![firefox_2018-10-08_16-04-19](https://user-images.githubusercontent.com/4366995/46610625-ea44e180-cb13-11e8-95ff-c1c38a4b133c.png)","Url":"https://github.com/aspnet/Blazor/issues/1539","RelatedDescription":"Closed issue \"Blazor component structure\" (#1539)"},{"Id":"367552116","IsPullRequest":false,"CreatedAt":"2018-10-08T10:12:07","Actor":"legistek","Number":"1532","RawContent":null,"Title":"Suggestion: Have BlazorComponent Implement INotifyPropertyChanged, Expose Protected OnPropertyChanged Method","State":"closed","Body":"In all my experimenting with Blazor the very first thing I always do is add `INotifyPropertyChanged` implementations to my components so I can engage in two way data binding (I use a home-grown .NET Standard-friendly data binding scheme that uses reflection and `INotifyPropertyChanged`) and otherwise subscribe to state changes without having to be inside the component itself.\r\n\r\nIt would be really convenient if `BlazorComponent` implemented `INotifyPropertyChanged` and exposed a `protected void OnPropertyChanged([CallerMemberName] string name = null)` method for derived classes to invoke.\r\n\r\nAny thoughts on this? I'd be happy to take this on as it should be a fairly trivial task. \r\n\r\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/1532","RelatedDescription":"Closed issue \"Suggestion: Have BlazorComponent Implement INotifyPropertyChanged, Expose Protected OnPropertyChanged Method\" (#1532)"},{"Id":"367572953","IsPullRequest":false,"CreatedAt":"2018-10-08T10:10:22","Actor":"syedqutub","Number":"1533","RawContent":null,"Title":"[Feature Request] Add Support for Razor template Syntax in @functions block ","State":"closed","Body":"Hi,\r\nI noticed that creating an object for `RenderFragment` by using `@<tag></tag>`\r\nonly works in @ block. It would be great if we could use Razor template syntax in @functions block if possible. (it might almost feel like React!).\r\n\r\nThanks anyway for this great framework!!","Url":"https://github.com/aspnet/Blazor/issues/1533","RelatedDescription":"Closed issue \"[Feature Request] Add Support for Razor template Syntax in @functions block \" (#1533)"},{"Id":"367604317","IsPullRequest":false,"CreatedAt":"2018-10-08T10:09:55","Actor":"jvelezc","Number":"1536","RawContent":null,"Title":"How to get back latitude and longitude from the browser to a view","State":"closed","Body":"I tried many things below is my latest attempt. The main issue is that the data is not serialized back ... possibly because is returning a function and not data. (When I hard code the object it returns the object) Any advise?\r\n\r\n![image](https://user-images.githubusercontent.com/3653845/46588170-552ae580-ca4c-11e8-98da-f4267a346d62.png)\r\n\r\nAs you can see the Js method is being invoked \r\n![image](https://user-images.githubusercontent.com/3653845/46588180-80153980-ca4c-11e8-9403-5e6e7cdfce2a.png)\r\n\r\nbut I dont get the response serialized on: var result = await JSRuntime.Current.InvokeAsync<LocationVm>(\"HuliGeolocation.GetLocation\");\r\n\r\n\r\nSee full code example: \r\n```\r\n<h6>CSHTML</h6>\r\n\r\n@page \"/geo\"\r\n\r\n\r\n\r\n\r\n<pre>@Latitude</pre>\r\n<br>\r\n<pre>@Longitude</pre>\r\n\r\n\r\n@functions {\r\n    private string Latitude { get; set; }\r\n    public string Longitude { get; set; }\r\n    private class LocationVm {\r\n        public string Latitude { get; set; }\r\n        public string  Longitude { get; set; }\r\n\r\n    }\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        var result = await JSRuntime.Current.InvokeAsync<LocationVm>(\"HuliGeolocation.GetLocation\");\r\n    }\r\n\r\n    }\r\n`\r\n\r\n\r\n`\r\n(window as any).HuliGeolocation =\r\n    {\r\n \r\n     GetLocation: () => {\r\n            var Latitude = \"\";\r\n            var Longitude = \"\";\r\n            let myFunction = function () {\r\n                navigator.geolocation.getCurrentPosition((position) => {\r\n                    console.log(\"test\");\r\n                    console.log(position);\r\n                    return {\r\n                        Latitude : position.coords.latitude.toString(),\r\n                        Longitude: position.coords.longitude.toString()\r\n                    }\r\n                });\r\n\r\n            };\r\n         return myFunction();\r\n        },\r\n\r\n```\r\n    };\r\n","Url":"https://github.com/aspnet/Blazor/issues/1536","RelatedDescription":"Closed issue \"How to get back latitude and longitude from the browser to a view\" (#1536)"},{"Id":"367195050","IsPullRequest":true,"CreatedAt":"2018-10-08T08:39:19","Actor":"SteveSandersonMS","Number":"1525","RawContent":null,"Title":"Avoid OnAfterRender allocating to capture 'this'","State":"closed","Body":"Ultra-trivial tweak I noticed while doing some unrelated work.\r\n\r\nCurrently, if you override `OnAfterRender` and return a non-null `Task`, then the [base class's use of `ContinueWith`](https://github.com/aspnet/Blazor/blob/b3301d8f7a3cda9bc63a9b536309fa385d2776cf/src/Microsoft.AspNetCore.Blazor/Components/BlazorComponent.cs#L224) will have to allocate in order to capture the `this` value so it can call `HandleException` as an instance method.\r\n\r\nHowever we can make `HandleException` static so no allocation will occur in `IHandleAfterRender.OnAfterRender`. This suggestion is courtesy of [Roslyn CLR Heap Allocation analyzer](https://github.com/Microsoft/RoslynClrHeapAllocationAnalyzer).","Url":"https://github.com/aspnet/Blazor/pull/1525","RelatedDescription":"Closed or merged PR \"Avoid OnAfterRender allocating to capture 'this'\" (#1525)"},{"Id":"367635287","IsPullRequest":false,"CreatedAt":"2018-10-08T04:25:19","Actor":"kant2002","Number":"1537","RawContent":null,"Title":"The error does not reported in console","State":"open","Body":"I attempt to create simple Blazor JS interop for vibration API. During testing in Edge I encounter following problems:\r\n1. If proxy function could not be accessed via `window` then error silently eaten.\r\n2. Since I use `navigator.vibrate` which is not supported by Edge it produce error `SCRIPT438: Object doesn't support property or method 'vibrate'` which again silently eaten. \r\n\r\nIn Chrome, \r\n1. the first error is properly captured and displayed in the browser console. \r\n2. I attempt to simulate second error in Chrome by calling `navigator.vibrate2`, it properly reported as `Error: Microsoft.JSInterop.JSException: navigator.vibrate2 is not a function`\r\n\r\nInitially I thought that this is due to https://github.com/dotnet/jsinterop/blob/master/src/Microsoft.JSInterop.JS/src/Microsoft.JSInterop.ts#L159 not bening wrapped in try/catch but this properly wrapped in the `_mono_wasm_invoke_js_marshalled` and in Edge this code is working. So seems to be any unhandled exception in the WASM is swallowed by the Edge. I have experience similar error when playing with different application.","Url":"https://github.com/aspnet/Blazor/issues/1537","RelatedDescription":"Open issue \"The error does not reported in console\" (#1537)"},{"Id":"367590892","IsPullRequest":false,"CreatedAt":"2018-10-07T23:12:24","Actor":"jvelezc","Number":"1535","RawContent":null,"Title":"Microsoft.AspNetCore.Blazor.Browser.Interop is missing from master branch","State":"closed","Body":"What is my alternative way of doing  RegisteredFunction.Invoke<bool> or where did this code go since the master branch does not have an interop folder anymore.\r\n\r\n\r\n\r\nI see there branches with it...https://github.com/aspnet/Blazor/blob/javiercn/interop-cleanup/src/Microsoft.AspNetCore.Blazor.Browser/Interop/RegisteredFunction.cs","Url":"https://github.com/aspnet/Blazor/issues/1535","RelatedDescription":"Closed issue \"Microsoft.AspNetCore.Blazor.Browser.Interop is missing from master branch\" (#1535)"},{"Id":"367590369","IsPullRequest":true,"CreatedAt":"2018-10-07T20:24:24","Actor":"TheFanatr","Number":"1534","RawContent":null,"Title":"Simple 404 Handling (Fallback Route)","State":"open","Body":"I've talked about this [here](https://github.com/aspnet/Blazor/issues/293#issuecomment-427678571).\r\n\r\nEssentially, this pull request contains a very simple error 404 handling implementation that allows users to set a fallback route for the blazor routing system to use if the no components are found for the requested route. This is a essentially a catch-all-nonexistent routing handler, where the rendering of the page body is \"soft-redirected\" to the component represented by the fallback route. The value is set in the `App.cshtml` file or wherever the router is defined.\r\n\r\n```cshtml\r\n<Router AppAssembly=typeof(Program).Assembly FallbackRoute=\"/404\"/>\r\n```\r\n\r\nIf `FallbackRoute` is null (unset), or also points to a nonexistent component, the regular behaviour will be observed, with the only difference being that the exception thrown will say that the router `cannot find any component with the fallback route '/<fallback>'` if the fallback route is also nonexistent.\r\n\r\nThe URI displayed by the browser does not change to represent the fallback route in order to allow the fallback component to implement JavaScript interop for handling specific URIs differently, such as the URI for a page that was moved.","Url":"https://github.com/aspnet/Blazor/pull/1534","RelatedDescription":"Open PR \"Simple 404 Handling (Fallback Route)\" (#1534)"},{"Id":"367484257","IsPullRequest":false,"CreatedAt":"2018-10-06T18:42:31","Actor":"panda-eye","Number":"1530","RawContent":null,"Title":"Compiler error with mixed content in onclick attribute","State":"open","Body":"I have a line in Teachers.cshtml:\r\n`<button onclick=\"window.location.href = '/teacher/@(teacher.Id)/';\">More info...</button>`\r\nAfter compilation I have the following line in Teachers.g.cs (/obj/Debug/netstandart2.0/Pages/):\r\n`builder.AddAttribute(24, \"onclick\", (Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>() + \"window.location.href\" + \" =\" + \" \\'/teacher/\" + (teacher.Id) + \"/\\';\" + ()));`\r\nAnd an error message:\r\n\r\n> CS1525\tInvalid expression term \")\"","Url":"https://github.com/aspnet/Blazor/issues/1530","RelatedDescription":"Open issue \"Compiler error with mixed content in onclick attribute\" (#1530)"},{"Id":"367419040","IsPullRequest":false,"CreatedAt":"2018-10-06T04:03:31","Actor":"kant2002","Number":"1529","RawContent":null,"Title":"Missing access modifier ","State":"closed","Body":"1. On the `Index.cshtml` from the template (which does not have `@functions` section)\r\n2. Create new `@functions` sections\r\n3. Start typing `override OnI` \r\n4. press Tab\r\n5. Added \r\n```csharp\r\noverride void OnInit()\r\n{\r\n    base.OnInit();\r\n}\r\n```\r\n\r\nshould be \r\n```csharp\r\nprotected override void OnInit()\r\n{\r\n    base.OnInit();\r\n}\r\n```\r\n\r\n\r\n## Notes\r\nHappens\r\n```csharp\r\n@functions  {\r\n\r\n    override void OnInit()\r\n    {\r\n        base.OnInit();\r\n    }\r\n}\r\n\r\n```\r\nDoes not happens (correct)\r\n\r\n```csharp\r\n@functions  {\r\n    public void test()\r\n    {\r\n\r\n    }\r\n    protected override void OnInit()\r\n    {\r\n        base.OnInit();\r\n    }\r\n}\r\n\r\n```\r\nDoes not happens (correct)\r\n\r\n```csharp\r\n@functions  {\r\n    private int x;\r\n\r\n    protected override void OnInit()\r\n    {\r\n        base.OnInit();\r\n    }\r\n}\r\n\r\n```\r\n\r\nso essentially, my observation related just if you have first method in the `@functions` section it does not pickup the correct access modifier ","Url":"https://github.com/aspnet/Blazor/issues/1529","RelatedDescription":"Closed issue \"Missing access modifier \" (#1529)"},{"Id":"367390493","IsPullRequest":false,"CreatedAt":"2018-10-05T22:42:56","Actor":"nblumhardt","Number":"1528","RawContent":null,"Title":"Setting up logging in Blazor","State":"open","Body":"Hi all!! Hope you're all having fun, hacking on such an interesting bit of code 😄 \r\n\r\nI spent a few hours last night experimenting with Serilog in Blazor, both to the local browser console and piped through the server using middleware. The code is in: https://github.com/nblumhardt/serilog-blazor.\r\n\r\nThere's a whole lot to explore in this space, but I thought I'd try to get in early with a bit of feedback on how it hangs together.\r\n\r\nSome developers, me among them, will go to great lengths to get logging set up before any other application code executes. This makes it easier to debug startup failures, which are usually critical issues. You can see I've done that in the Blazor client demo here: https://github.com/nblumhardt/serilog-blazor/blob/master/SerilogBlazorDemo.Client/Program.cs#L12\r\n\r\nBecause the demo pipes client logs through the server, HTTP is needed; getting the base URI before the Blazor host is initialized took some hackiness: https://github.com/nblumhardt/serilog-blazor/blob/master/SerilogBlazorDemo.Client/Diagnostics/BrowserHttpSink.cs#L67 - it would be great if this could be properly supported by the Blazor API.\r\n\r\nThis echoes some of the problems with logging in ASP.NET Core, particularly the decision to put configuration (and thus logging setup) into DI. This ends up greatly expanding the amount of code that runs before logging is available, and thus the scope of potential failures that can't be properly logged. It would be great to avoid this in Blazor, by providing non-DI access to critical system services (like HTTP, mentioned above). Less-ergonomics/jumping-through-hoops would be acceptable, if it enabled bootstrapping logging ahead of anything else.\r\n\r\nHope this is at least food-for-thought, and good luck with it all! (Also, hope you have a chance to run the demo, it's quite compelling to see just how consistent the client/server experiences can be 😎 .)","Url":"https://github.com/aspnet/Blazor/issues/1528","RelatedDescription":"Open issue \"Setting up logging in Blazor\" (#1528)"},{"Id":"367343820","IsPullRequest":false,"CreatedAt":"2018-10-05T19:44:37","Actor":"Suchiman","Number":"1527","RawContent":null,"Title":"Blazor Codegen does not escape quotes","State":"open","Body":"If you use double quotes inside single quotes in attributes, this will result in broken codegen due to unescaped double quotes inside double quotes.\r\nInput:\r\n```html\r\n<input onfocus='alert(\"Test\");' />\r\n```\r\nOutput:\r\n```csharp\r\nbuilder.OpenElement(0, \"input\");\r\nbuilder.AddAttribute(1, \"onfocus\", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIFocusEventArgs>(\"alert(\"Test\");\"));\r\nbuilder.CloseElement();\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1527","RelatedDescription":"Open issue \"Blazor Codegen does not escape quotes\" (#1527)"},{"Id":"366933789","IsPullRequest":true,"CreatedAt":"2018-10-05T13:46:53","Actor":"alenros","Number":"1522","RawContent":null,"Title":"updated MSRC link","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1522","RelatedDescription":"Closed or merged PR \"updated MSRC link\" (#1522)"},{"Id":"366590027","IsPullRequest":true,"CreatedAt":"2018-10-05T13:45:49","Actor":"simpman4","Number":"1518","RawContent":null,"Title":"Added a \".\" to the end of ln. 41","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1518","RelatedDescription":"Closed or merged PR \"Added a \".\" to the end of ln. 41\" (#1518)"},{"Id":"366629540","IsPullRequest":false,"CreatedAt":"2018-10-05T13:42:40","Actor":"MorneZaayman","Number":"1519","RawContent":null,"Title":"Calling JsRuntime.Current.InvokeAsync from C# in HTML part of a component results in Uncaught (in promise)","State":"closed","Body":"### Title\r\nCalling JsRuntime.Current.InvokeAsync from C# in HTML part of a component results in Uncaught (in promise)\r\n\r\n### Functional impact\r\nJSInterop does not work in Async mode. I did manage to get the code to work by down-casting to IJSInProcessRuntime and then calling Invoke instead of InvokeAsync, but this still felt like a bug so I thought I should report it.\r\n\r\nI have the following code in a Component which is supposed to show one section of code if a token is present in local storage, and another if not.\r\n\r\n```\r\n@inject AuthService AuthService\r\n\r\n<nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n \r\n    @if (IsLoggedIn())\r\n    {\r\n        <div class=\"dropdown\">\r\n            <a class=\"dropdown-toggle text-light\">\r\n                Welcome User\r\n            </a>\r\n\r\n            <div class=\"dropdown-menu\">\r\n                <a class=\"dropdown-item\" href=\"#\"><i class=\"fa fa-user\"></i> Edit Profile</a>\r\n                <div class=\"divider\"></div>\r\n                <a class=\"dropdown-item\" href=\"#\"><i class=\"fa fa-sign-out\"></i> Log out</a>\r\n            </div>\r\n        </div>\r\n    }\r\n    else\r\n    {\r\n        <form class=\"form-inline my-2 my-lg-0\" onsubmit=\"@LogIn\"> @*Change to bind-to-oninput when it is fixed*@\r\n            <input class=\"form-control mr-sm-2\" name=\"username\" placeholder=\"Username\" type=\"text\" required bind=\"@Username\" />\r\n            <input class=\"form-control mr-sm-2\" name=\"password\" placeholder=\"Password\" type=\"text\" required bind=\"@Password\" />\r\n            <button class=\"btn btn-success my-2 my-sm-0\" type=\"submit\" disabled=\"@_loginDisabled\">Login</button>\r\n        </form>\r\n    }\r\n\r\n</nav>\r\n\r\n@functions {\r\n    // Other methods and properties left out for brevity.\r\n\r\n    bool IsLoggedIn()\r\n    {\r\n        // Using .Result as await cannot be used in the Razor HTML\r\n        return AuthService.IsLoggedIn().Result;\r\n    }\r\n}\r\n```\r\nAnd then inside AuthService.cs\r\n```\r\npublic async Task<bool> IsLoggedIn()\r\n{\r\n    try\r\n    {\r\n        var token = await JSRuntime.Current.InvokeAsync<string>(\"jsinterop.getLocalStorageItem\", TOKEN_KEY);\r\n                \r\n        return !string.IsNullOrWhiteSpace(token);\r\n    }\r\n    catch (Exception e)\r\n    {\r\n        Console.WriteLine($\"public async Task<bool> IsLoggedIn()': {e.Message}\");\r\n        \r\n        return false;\r\n    }    \r\n}\r\n```\r\n\r\n### Minimal repro steps\r\nLoad the component and look in the console.\r\n\r\n### Actual result\r\nThe following console output:\r\n\r\n> blazor.webassembly.js:1 WASM: 13\r\n> d.printErr @ blazor.webassembly.js:1\r\n> blazor.webassembly.js:1 Uncaught (in promise) abort(13). Build with -s ASSERTIONS=1 for more info.\r\n\r\n### Further technical details\r\nUsing Visual Studio 2017 15.8.6 and Blazor 0.6","Url":"https://github.com/aspnet/Blazor/issues/1519","RelatedDescription":"Closed issue \"Calling JsRuntime.Current.InvokeAsync from C# in HTML part of a component results in Uncaught (in promise)\" (#1519)"},{"Id":"366822187","IsPullRequest":false,"CreatedAt":"2018-10-05T13:37:36","Actor":"mattd73uk","Number":"1521","RawContent":null,"Title":"Components could expose properties using public instead of Parameter ","State":"closed","Body":"Hi,\r\nAs per the VS template project, to be able to assign to a component\r\n`<SurveyPrompt Title=\"How is Blazor working for you?\" />`\r\n\r\ncurrently the child component needs Title to have the Parameter attribute:\r\n```\r\n [Parameter]\r\n string Title { get; set; } \r\n```\r\n\r\nI am new to the project, so forgive any newbie foolishness, but can't we drop the ParameterAttribute and simply say that child component properties which are _public_ can be assigned to by the parent?\r\nTo me this is the intention of C# public/private access modifiers.\r\n\r\nI'd like to contribute to the project & have a go at this if it was thought sensible.\r\nThanks\r\nMatt","Url":"https://github.com/aspnet/Blazor/issues/1521","RelatedDescription":"Closed issue \"Components could expose properties using public instead of Parameter \" (#1521)"},{"Id":"367212543","IsPullRequest":true,"CreatedAt":"2018-10-05T13:30:41","Actor":"SteveSandersonMS","Number":"1526","RawContent":null,"Title":"Give Renderer knowledge of component parents","State":"open","Body":"Until now, `Renderer` knew which components were the children of another (i.e., the ones in its most recent render tree), but didn't track the relationship in the opposite direction because it didn't need to.\r\n\r\nWe now do need to be able to walk up the ancestry hierarchy, because this is essential for the upcoming \"passing parameters down the hierarchy\" feature (when a new child is added, we have to be able to walk up the ancestry to find matches for its ambient params).\r\n\r\nNotes:\r\n\r\n* It's kind of awkward, but there was no direct way to unit test this until the rest of the \"hierarchical parameters\" feature is implemented, because it's just an internal implementation detail. So I've temporarily added an `internal` method for exposing the hierarchy to tests. I'll remove this later.\r\n* While implementing this, it became clear that `AssignComponentId` would need to be split into two variants. Previously it was used publicly but for root components only, and privately for non-root components. I've now reflected this in the code by renaming the `public` variant to `AssignRootComponentId`, and having only the `private` variant accept a `parentComponentId`.","Url":"https://github.com/aspnet/Blazor/pull/1526","RelatedDescription":"Open PR \"Give Renderer knowledge of component parents\" (#1526)"},{"Id":"367085118","IsPullRequest":true,"CreatedAt":"2018-10-05T07:05:15","Actor":"Meir017","Number":"1524","RawContent":null,"Title":"using Microsoft.Extensions.CommandLineUtils for blazor-cli","State":"open","Body":"related to #1513","Url":"https://github.com/aspnet/Blazor/pull/1524","RelatedDescription":"Open PR \"using Microsoft.Extensions.CommandLineUtils for blazor-cli\" (#1524)"},{"Id":"366961962","IsPullRequest":true,"CreatedAt":"2018-10-04T20:46:06","Actor":"alenros","Number":"1523","RawContent":null,"Title":"amend MSRC link","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1523","RelatedDescription":"Closed or merged PR \"amend MSRC link\" (#1523)"},{"Id":"366798199","IsPullRequest":false,"CreatedAt":"2018-10-04T13:46:24","Actor":"neerajbharti","Number":"1520","RawContent":null,"Title":"Support type constraints on @typeparam","State":"open","Body":"This is in regards to the new @typeParam released in 0.6.0 version.\r\nI am not sure if Type Constraints can be defined on the generic type passed to @typeParam.\r\n\r\n If this is something which already existing, can you please direct me to some semantics help. And if it is not there; is there any  plan to support this.\r\n\r\nThis feature will be very much helpful while developing abstract components which must take \"T\" of some base type for example.","Url":"https://github.com/aspnet/Blazor/issues/1520","RelatedDescription":"Open issue \"Support type constraints on @typeparam\" (#1520)"},{"Id":"366484450","IsPullRequest":false,"CreatedAt":"2018-10-04T06:34:52","Actor":"codeinstinct","Number":"1517","RawContent":null,"Title":"Upgrade to 0.6.0 causes build errors","State":"closed","Body":"Upgrading from 0.5.1 to 0.6.0 gives a build error.\r\n\r\n``/webui/blazor/blazor.csproj : error NU1102: Unable to find package Microsoft.AspNetCore.Blazor.Server with version (>= 0.6.0)\r\nwebui/blazor/blazor.csproj : error NU1102:   - Found 7 version(s) in nuget.org [ Nearest version: 0.5.1 ]\r\n``\r\n\r\nThe problem is with this line in particular:\r\n\r\n`` \r\n<DotNetCliToolReference Include=\"Microsoft.AspNetCore.Blazor.Cli\" Version=\"0.6.0\" />\r\n``\r\n\r\nAdditional info:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.403/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [/usr/share/dotnet/sdk]\r\n  2.1.402 [/usr/share/dotnet/sdk]\r\n  2.1.403 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]","Url":"https://github.com/aspnet/Blazor/issues/1517","RelatedDescription":"Closed issue \"Upgrade to 0.6.0 causes build errors\" (#1517)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-10T05:30:04.7860664Z","RunDurationInMilliseconds":1493}