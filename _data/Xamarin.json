{"Data":{"Blog":{"FeedItems":[{"Title":"Colonial Life Drives Field Sales Productivity with .NET, Mobile, and DevOps","PublishedOn":"2018-01-05T19:59:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET community is millions of developers strong, with people around the world turning ideas into apps across web, mobile, desktop, and the newest connected device platforms. Colonial Life’s...","Href":"https://blog.xamarin.com/colonial-life-drives-field-sales-productivity-net-mobile-devops/","RawContent":null},{"Title":"CoreML Programming with Xamarin.Mac and F#","PublishedOn":"2018-01-04T18:08:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Xamarin technologies are most commonly used to develop mobile applications, Xamarin.Mac makes it easy to use your preferred .NET language to develop desktop Mac apps. There are many C#...","Href":"https://blog.xamarin.com/coreml-programming-xamarin-mac-f/","RawContent":null},{"Title":"Xamarin Developer Events This January","PublishedOn":"2018-01-03T19:10:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s only the beginning of the year, but there are already many opportunities to get out and start building on your mobile app development education! Network with local user groups to learn...","Href":"https://blog.xamarin.com/xamarin-developer-events-january/","RawContent":null},{"Title":"The Top 12 Xamarin Blog Posts of 2017","PublishedOn":"2018-01-02T20:36:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2017 marked our first full year as part of the Microsoft family. Along the way, we saw new operating systems, new devices, and updates to the tools we use every day, and the many authors behind the...","Href":"https://blog.xamarin.com/top-12-xamarin-blog-posts-2017/","RawContent":null},{"Title":"Contest: Get Started with Xamarin","PublishedOn":"2017-12-15T20:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Xamarin, we pride ourselves on creating and providing great educational tools for developers. Between our extensive developer center, and the interactive classes at Xamarin University,...","Href":"https://blog.xamarin.com/contest-get-started-xamarin/","RawContent":null},{"Title":"Introducing the SmartHotel360 Reference Mobile Apps","PublishedOn":"2017-12-14T20:52:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you managed to catch any of Microsoft Connect(); 2017, you probably saw a beautiful suite of apps for a fictitious smart hospitality company called SmartHotel360 that showcases the future of...","Href":"https://blog.xamarin.com/introducing-smarthotel360-reference-mobile-apps/","RawContent":null},{"Title":"Iterate Faster with the Xamarin Live Player and iOS Coded User Interface","PublishedOn":"2017-12-13T17:25:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Live Player is a fantastic tool to rapidly iterate and develop Xamarin applications without ever having to compile. One can easily update an application&#8217;s user interface and business...","Href":"https://blog.xamarin.com/iterate-faster-xamarin-live-player-ios-coded-user-interface/","RawContent":null},{"Title":"Updates to the Xamarin iOS Designer","PublishedOn":"2017-12-12T18:00:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Designer for iOS is a visual designer that allows you to edit Storyboard and Xib files directly in Visual Studio and Visual Studio for Mac. Crafting your UI with a designer instead of...","Href":"https://blog.xamarin.com/updates-xamarin-ios-designer/","RawContent":null},{"Title":"Introduction to tvOS","PublishedOn":"2017-12-11T20:03:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, Apple announced the AppleTV 4K, an improved version of the AppleTV launched in 2015, which brought us a new platform to develop for in tvOS. With the touch-enabled Siri remote, we have a new...","Href":"https://blog.xamarin.com/introduction-to-tvos/","RawContent":null},{"Title":"Native Forms is Polished and Shiny in Xamarin.Forms 2.5.0","PublishedOn":"2017-12-08T20:37:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since we previewed Native Forms in June, we’ve been working to smooth the rough edges and polish it up for Xamarin.Forms 2.5.0 by fixing bugs and integrating the excellent feedback from the community....","Href":"https://blog.xamarin.com/native-forms-polished-shiny-xamarin-forms-2-5-0/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7062333318","Type":"IssuesEvent","CreatedAt":"2018-01-05T16:49:06","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1150","RelatedDescription":"Closed issue \"Early <AndroidAsset> caching results in differences w.r.t. other platforms, use case limits.\" (#1150) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Extract the attached workspace, load the top-level solution.\r\n2. For each of the four client projects (under Clients solution folder), build and run.\r\n3. Observe the on-screen text (Android, iOS, UWP) or command line output (CLI).\r\n\r\n[BuildArtifacts.zip](https://github.com/xamarin/xamarin-android/files/1598945/BuildArtifacts.zip)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nIn all cases, \"This is actual content for asset A.\" is indicated.\r\n\r\n### Actual Behavior\r\n\r\nFor all of { CLI, iOS, UWP }, \"This is actual content for asset A.\" is indicated.\r\nFor { Android }, \"This is a placeholder for asset A.\" is indicated.\r\n\r\n(Further commentary to follow.)\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.5.2\r\nVisualStudio.15.Release/15.5.2+27130.2010\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Community\r\n\r\nVisual Basic 2017   00369-60000-00001-AA028\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA028\r\nMicrosoft Visual C# 2017\r\n\r\nVisual C++ 2017   00369-60000-00001-AA028\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA028\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31125.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27128.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.753 (6575bd113)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.0.25 (HEAD/d8c6e504f)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7062332570","Type":"PullRequestEvent","CreatedAt":"2018-01-05T16:48:56","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1161","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] ReOrder when Assets are Processed.\" (#1161) at xamarin/xamarin-android","RelatedBody":"Context #1150\r\n\r\nThe way the current system works is that the `UpdateAndroidAssets`\r\ntarget is called as part of the `ResolveReferencesDependsOn`. This\r\nmakes it impossible to do any kind of processing of assets after\r\nthe project has already built. It also menas that a straight up\r\ncall to `Build` will result in all the assets being copied into\r\nthe intermediate directory. If your project has a large number\r\nof assets that is going to take time. Note this might also be\r\ncalled as part of a designtime build at the moment... not good.\r\n\r\nSo is there a reason why we call `UpdateAndroidAssets` before\r\n`Compile`? We don't generate any entries in the Designer.cs files\r\nfor them.. We don't clean them up.. we dont appear to do anything\r\nexcept package them! So the anser looks to be a resounding NO!\r\n\r\nSo we shall move the `UpdateAndroidAssets` to be part of the\r\n`_CreateBaseApkDependsOnTargets`. This means they will be\r\nprocessed just before we create the base apk. This will\r\noccur after compilation has completed. So we have a win win..\r\n\r\nThis commit also includes a unit test which does some post processing\r\nafter the `Compile` target to update an asset, it makes sure that\r\npost processing does work."},{"Id":"7062271033","Type":"IssuesEvent","CreatedAt":"2018-01-05T16:35:02","Actor":"marek-safar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1162","RelatedDescription":"Opened issue \"ResolveAssemblies tasks uses reference assemblies\" (#1162) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Get and Build repro https://github.com/marcominerva/XamarinAndroidIssue\r\n\r\nIf you instead the build log you will see that \r\n\r\n```\r\nUsing \"ResolveAssemblies\" task from assembly \"/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Build.Tasks.dll\".\r\n```\r\n\r\nhas few `...ref/netstandard2.0/...` references which is wrong as they should never be used as an input to linker or any post compilation processing\r\n\r\nThis issue is possibly related to #1154 \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nNo error during execution.\r\n\r\n### Actual Behavior\r\n\r\n[Mono] Assembly Loader probing location: 'System.Memory'.\r\n[monodroid-assembly] Could not load assembly 'System.Memory' during startup registration.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nXamarin.Android\r\nVersion: 8.1.0.25 (Visual Studio Community)\r\nAndroid SDK: /Users/marek/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 25.0.5\r\nSDK Build Tools Version: 25.0.3\r\n\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n   ```\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1500,2): warning : Ignoring /Users/marek/.nuget/packages/system.buffers/4.4.0/ref/netstandard2.0 as it is a Reference Assembly\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1500,2): warning : Ignoring /Users/marek/.nuget/packages/system.memory/4.4.0-preview2-25405-01/ref/netstandard2.0 as it is a Reference Assembly\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1500,2): warning : Ignoring /Users/marek/.nuget/packages/system.runtime.compilerservices.unsafe/4.4.0/ref/netstandard2.0 as it is a Reference Assembly\r\n```\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7061163889","Type":"PullRequestEvent","CreatedAt":"2018-01-05T12:02:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1158","RelatedDescription":"Merged pull request \"Bump to mono/2017-10/e70439f1\" (#1158) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=61002\r\nContext: https://github.com/mono/mono/issues/6339"},{"Id":"7061108557","Type":"PullRequestEvent","CreatedAt":"2018-01-05T11:46:36","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1161","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] ReOrder when Assets are Processed.\" (#1161) at xamarin/xamarin-android","RelatedBody":"Context #1150\r\n\r\nThe way the current system works is that the `UpdateAndroidAssets`\r\ntarget is called as part of the `ResolveReferencesDependsOn`. This\r\nmakes it impossible to do any kind of processing of assets after\r\nthe project has already built. It also menas that a straight up\r\ncall to `Build` will result in all the assets being copied into\r\nthe intermediate directory. If your project has a large number\r\nof assets that is going to take time. Note this might also be\r\ncalled as part of a designtime build at the moment... not good.\r\n\r\nSo is there a reason why we call `UpdateAndroidAssets` before\r\n`Compile`? We don't generate any entries in the Designer.cs files\r\nfor them.. We don't clean them up.. we dont appear to do anything\r\nexcept package them! So the anser looks to be a resounding NO!\r\n\r\nSo we shall move the `UpdateAndroidAssets` to be part of the\r\n`_CreateBaseApkDependsOnTargets`. This means they will be\r\nprocessed just before we create the base apk. This will\r\noccur after compilation has completed. So we have a win win..\r\n\r\nThis commit also includes a unit test which does some post processing\r\nafter the `Compile` target to update an asset, it makes sure that\r\npost processing does work."},{"Id":"7060426404","Type":"IssuesEvent","CreatedAt":"2018-01-05T08:42:49","Actor":"paradisehuman","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1160","RelatedDescription":"Opened issue \"eglGetDisplay failed EGL_BAD_PARAMETER\" (#1160) at xamarin/xamarin-android","RelatedBody":"\r\n[EelaTaxi.zip](https://github.com/xamarin/xamarin-android/files/1605941/EelaTaxi.zip)\r\n### Steps to Reproduce\r\n\r\n1. Set linking on SDK and User Assemblies \r\n2. Check AOT Compilation\r\n3. Check Use LLVM Optimizing Compiler\r\n4. Archive the packge\r\n5. Run on Huawei Honor3 or Huawei G700 or Huawei G610 or Huawei Y330\r\n\r\nI attached the APK file.\r\n\r\n### Expected Behavior\r\nRuning\r\n\r\n the Program\r\n### Actual Behavior\r\nForce close on splashview\r\n### Version Information\r\n\r\nVisual Studio 15.5.2\r\n\r\n### Log File\r\n\r\n> android.view.HardwareRenderer$GlRenderer.initializeEgl\r\n> HardwareRenderer.java - line 878\r\n> java.lang.RuntimeException: eglGetDisplay failed EGL_BAD_PARAMETER\r\n> eglGetDisplay failed EGL_BAD_PARAMETER\r\n> 1- android.view.HardwareRenderer$GlRenderer.initializeEgl HardwareRenderer.java:878\r\n> 2- android.view.HardwareRenderer$GlRenderer.initialize HardwareRenderer.java:829\r\n> 3- android.view.ViewRootImpl.performTraversals ViewRootImpl.java:1806\r\n> 4- android.view.ViewRootImpl.doTraversal ViewRootImpl.java:1211\r\n> 5- android.view.ViewRootImpl$TraversalRunnable.run ViewRootImpl.java:5039\r\n> 6- android.view.Choreographer$CallbackRecord.run Choreographer.java:776\r\n> 7- android.view.Choreographer.doCallbacks Choreographer.java:579\r\n> 8- android.view.Choreographer.doFrame Choreographer.java:548\r\n> 9- android.view.Choreographer$FrameDisplayEventReceiver.run Choreographer.java:762\r\n> 10- android.os.Handler.handleCallback Handler.java:800\r\n> 11- android.os.Handler.dispatchMessage Handler.java:100\r\n> 12- android.os.Looper.loop Looper.java:194\r\n> 13- android.app.ActivityThread.main ActivityThread.java:5433\r\n> 14- java.lang.reflect.Method.invokeNative Method.java\r\n> 15- java.lang.reflect.Method.invoke Method.java:525\r\n> 16- com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run ZygoteInit.java:924\r\n> 17- com.android.internal.os.ZygoteInit.main ZygoteInit.java:691\r\n> 18- dalvik.system.NativeStart.main NativeStart.java"},{"Id":"7060108364","Type":"PullRequestEvent","CreatedAt":"2018-01-05T06:49:46","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1159","RelatedDescription":"Opened pull request \"[WIP] Sanitize Xamarin.Android.sln: fix several inconsistency bits.\" (#1159) at xamarin/xamarin-android","RelatedBody":"Manually editing solution file is uncool and error prone, but since the\r\nentire xamarin-android source tree is not designed cleanly it is impossible\r\nto use IDEs to do the right job.\r\n\r\nAs stated at https://github.com/xamarin/xamarin-android/issues/1129 ,\r\nwe should eliminate this Xamarin.Android.sln as a source file and it should\r\nbe only generated, not directly committed to the tree. But to achieve that\r\nwe first need to find the right structure and right content.\r\n\r\nSo far, there were handful of issues that either missed or incorrectly\r\nadded solution items with inconsistent configurations.\r\n\r\nThese inconsistent parts were found by the solution content analyzer at\r\nhttps://github.com/xamarin/xamarin-android/issues/1129#issuecomment-355484902"},{"Id":"7059651108","Type":"PullRequestEvent","CreatedAt":"2018-01-05T03:06:04","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1079","RelatedDescription":"Closed pull request \"[build] fix Novell/*.MonoDroid.*.targets copy during build\" (#1079) at xamarin/xamarin-android","RelatedBody":"For a little while, our build has been copying three files to the root\r\nof our build tree:\r\n- Novell/MonoDroid.FSharp.targets\r\n- Novell/Novell.MonoDroid.Common.targets\r\n- Novell/Novell.MonoDroid.CSharp.targets\r\n\r\nThese files are copied to build output in the\r\nXamarin.Android.Build.Tasks project, but they should go in\r\n`bin/$(Configuration)` not the root of the build tree.\r\n\r\nWhile looking at binary log output, I noticed the\r\nXamarin.Android.Build.Tests project was doing the copy due to having a\r\n`<ProjectReference />` to Xamarin.Android.Build.Tasks.\r\n\r\nAdding `<Private>False</Private>` to the `<ProjectReference />` fixes\r\nthese files from being copied, and doesn't appear to have any other ill\r\neffects."},{"Id":"7058973660","Type":"IssuesEvent","CreatedAt":"2018-01-04T22:43:58","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1145","RelatedDescription":"Closed issue \"[Android 4.0.4|FireOS 8.5.1] App doesn't start after being updated from AOT to non-AOT version\" (#1145) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nAndroid version specific. Reproed on Amazon Kindle Fire HD 8.9 (Android 4.0.4| FireOS 8.5.1)\r\nDidn't reproduce on newer devices.\r\n\r\n1. Build and install AOTed app (attached Artifacts/AOT.LLVM.apk)\r\n2. Update app (for example via adb install -r) to non-AOTed app (attached Artifacts/JIT.apk)\r\n[AOT.zip](https://github.com/xamarin/xamarin-android/files/1593702/AOT.zip)\r\n\r\n### Expected Behavior\r\nApp should work\r\n### Actual Behavior\r\nCrash\r\n\r\n### Version Information\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.2\r\nVisualStudio.15.Release/15.5.2+27130.2010\r\nMicrosoft .NET Framework\r\nVersion 4.7.02046\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00369-60000-00001-AA157\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA157\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA157\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31125.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27128.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.753 (6575bd113)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.0.25 (HEAD/d8c6e504f)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n-->\r\n\r\n### Log File\r\n[log.txt](https://github.com/xamarin/xamarin-android/files/1593723/log.txt)\r\n\r\n  "},{"Id":"7058969455","Type":"PullRequestEvent","CreatedAt":"2018-01-04T22:42:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1158","RelatedDescription":"Opened pull request \"Bump to mono/2017-10/e70439f1\" (#1158) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=61002\r\nContext: https://github.com/mono/mono/issues/6339"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7063236247","Type":"IssuesEvent","CreatedAt":"2018-01-05T20:39:02","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1514","RelatedDescription":"Opened issue \"[Internal] VS2017 does not recognize .NET Standard 2.0 in Xamarin.Forms\" (#1514) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nCan't build Xamarin.Forms after checking it out because VS does not recognize .NET Standard 2.0 in some projects.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Make sure you're running a Windows 10 instance (Enterprise in my case)\r\n2. Install VS2017 Enterprise (15.5.2 with .NET 4.7)\r\n3. Check out Xamarin.Forms\r\n4. Rebuild Xamarin.Forms.ControlGallery.Android\r\n\r\n### Expected Behavior\r\n\r\nCompilation should succeed without errors.\r\n\r\n### Actual Behavior\r\n\r\n11 projects cannot be built because VS does not recognize .NET Standard 2.0 in their target framework list. Right click a project and go to Properties. Note that the dropdown shows 1.6 as the maximum version recognizable by VS. Since it can't find 2.0, the current selection is empty.\r\n\r\n![capture](https://user-images.githubusercontent.com/16855542/34627056-be6b42a2-f224-11e7-89ae-03e2dc079d85.PNG)\r\n\r\n![capture2](https://user-images.githubusercontent.com/16855542/34627153-1bdb3c9e-f225-11e7-93bf-47f4bb816eaf.PNG)\r\n\r\n.NET Core 2.0 is installed. If I create a blank .NET Standard library, VS does recognize .NET Standard 2.0 in that case. This seems to be isolated to XF solution.\r\n\r\n![capture3](https://user-images.githubusercontent.com/16855542/34627173-347bbbd4-f225-11e7-989c-709df3e21982.PNG)\r\n"},{"Id":"7063203223","Type":"IssuesEvent","CreatedAt":"2018-01-05T20:29:58","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1482","RelatedDescription":"Closed issue \"Newtonsoft dependencies incompatible with latest Xamarin.Android.Support.*\" (#1482) at xamarin/Xamarin.Forms","RelatedBody":"Copied from https://github.com/JamesNK/Newtonsoft.Json/issues/1443 @Enoges\r\n\r\n---\r\n\r\n### Expected behavior\r\nInstall Newtonsoft.Json in a Xamarin.Forms PCL project with the version of Xamarin.Android.Suport.* v25.4.2 without problem\r\n\r\n\r\n### Actual behavior\r\nWhen I try to install Newtonsoft.Json in a XamarinForms PCL project whith latest version of Xamarin.Android.Support.* I received an error of dependencies incompatibility.\r\n\r\n### Steps to reproduce\r\nInstall Xamarin.Android.Support.* 25.4.2 from Nugget package.\r\nTry to instal Newtonsoft.Json version 10.0.3.\r\n\r\nThanks a lot.\r\n"},{"Id":"7062976899","Type":"PullRequestEvent","CreatedAt":"2018-01-05T19:30:31","Actor":"michaeldwan","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1513","RelatedDescription":"Opened pull request \"[iOS] Fix for assigning wrong element type to a recycled renderer\" (#1513) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFixes an issue in the iOS `VisualElementPackager` which allows recycled renderers to be assigned elements of the wrong type. The regression was caused by [this change](https://github.com/xamarin/Xamarin.Forms/pull/1136/files#diff-e7ceab256a6b8ec5ca5f9ddc81304defR16) which uses `_element` rather than `Renderer.Element` to look for child elements. When a renderer's element changes, `VisualElementPackager.SetElement` could [update the render pool](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Platform.iOS/VisualElementPackager.cs#L160) before it [assigns `_element`](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Platform.iOS/VisualElementPackager.cs#L178) which causes the wrong children to be compared.\r\n\r\nThis PR assigns `_element` earlier in `VisualElementPackager.SetElement` which ensures we're using the current element before updating the renderer pool.\r\n\r\nI don't know the extent of the issue since the `VisualElementPackager` is pretty low level, but so far I've only seen it when scrolling or reloading a large table view. The attached test case uses a `TableView` containing alternating `ViewCell[Grid[Label,Label]]` and `ViewCell[Grid[Label,Entry]]` cells. Scrolling quickly through the table would inevitably crash when a `LabelRenderer` is assigned an `Entry`.\r\n\r\n### Bugs Fixed ###\r\nFixes #1414\r\nFixes #1424 \r\n\r\n### API Changes ###\r\nNone\r\n\r\n### Behavioral Changes ###\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests ⚠️ _UITests woudn't run on my Mac so I'm not sure if the included test works. Will see after the PR builds..._\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7063151870","Type":"PullRequestEvent","CreatedAt":"2018-01-05T20:15:57","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3168","RelatedDescription":"Opened pull request \"[msbuild] Repack all iOS Task assemblies into Xamarin.iOS.Tasks.dll\" (#3168) at xamarin/xamarin-macios","RelatedBody":"This is the same patch as was committed/accepted in PR #3007 (and later reverted) but should\r\nhopefully work better now that the Move task has been fixed by PR #3104.\r\n"},{"Id":"7063098265","Type":"PullRequestEvent","CreatedAt":"2018-01-05T20:01:16","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3167","RelatedDescription":"Merged pull request \"[foundation] Remove iOS 5.0.1 specific code from NSFileManager\" (#3167) at xamarin/xamarin-macios","RelatedBody":"This was short-lived (changed in iOS 5.1) and it's now below our\nminimum support (iOS 6)"},{"Id":"7062768294","Type":"PullRequestEvent","CreatedAt":"2018-01-05T18:36:53","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3167","RelatedDescription":"Opened pull request \"[foundation] Remove iOS 5.0.1 specific code from NSFileManager\" (#3167) at xamarin/xamarin-macios","RelatedBody":"This was short-lived (changed in iOS 5.1) and it's now below our\nminimum support (iOS 6)"},{"Id":"7062385673","Type":"PullRequestEvent","CreatedAt":"2018-01-05T17:00:24","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3165","RelatedDescription":"Merged pull request \"[Backport][SceneKit] Workaround SCNAnimationEvent breaking change introduced in iOS 11 (#3160)\" (#3165) at xamarin/xamarin-macios","RelatedBody":"This fixes xamarin-macios#3145 and xamarin/xamarin-macios#3146\r\n\r\nThis workarounds an Apple breaking change (since `SCNAnimation` protocol is new in iOS 11):\r\n\r\nThe Old definition was\r\n> typedef void (^SCNAnimationEventBlock)(CAAnimation animation, id _Nonnull animatedObject, BOOL playingBackward)\r\n\r\nThe new ObjC definition is:\r\n> typedef void (^SCNAnimationEventBlock)(id<SCNAnimation> animation, id animatedObject, BOOL playingBackward);\r\n\r\nand it is bound as:\r\n> delegate void SCNAnimationEventHandler (CAAnimation animation, NSObject animatedObject, bool playingBackward);\r\n\r\nand for watchOS and XAMCORE_4_0 it is bound as:\r\n> delegate void SCNAnimationEventHandler (ISCNAnimationProtocol animation, NSObject animatedObject, bool playingBackward);\r\n\r\nFortunatelly `CAAnimation` conforms to `SCNAnimation` protocol and\r\nwe are now abusing this fact and forcing its creation with `GetINativeObject`\r\nthis way we keep a single API and we can always completely fix this\r\nwhen XAMCORE_4_0 happens following suit with apple's breaking change."},{"Id":"7062174914","Type":"IssuesEvent","CreatedAt":"2018-01-05T16:14:18","Actor":"bradumbaugh","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3166","RelatedDescription":"Opened issue \"SCNNode.AddAnimation requires a CAAnimation parameter instead of an ISCNAnimationProtocol\" (#3166) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nThe `SCNAnimatable` protocol declares [`addAnimation(_:forKey:)`](https://developer.apple.com/documentation/scenekit/scnanimatable/1523386-addanimation), which takes an [`SCNAnimationProtocol`](https://developer.apple.com/documentation/scenekit/scnanimationprotocol) object (either `CAAnimation` or `SCNAnimation`) as its first parameter. [`SCNNode`](https://developer.apple.com/documentation/scenekit/scnnode) conforms to `SCNAnimatable`, but on the Xamarin side, `SCNNode`'s `AddAnimation` method requires a `CAAnimation` object instead of an `ISCNAnimationProtocol` object. \r\n\r\n1. Create an instance of `SCNNode`\r\n2. Call `AddAnimation` on the `SCNNode` object\r\n3.  Note that the first required parameter is a `CAAnimation`\r\n\r\nAttached a sample that demonstrates that this won't compile (there's no functionality built in sample, however).\r\n\r\n### Expected Behavior\r\n\r\nThe `AddAnimation` method accepts an `ISCNAnimationProtocol` object\r\n\r\n### Actual Behavior\r\n\r\nThe `AddAnimation` method accepts a `CAAnimation` object\r\n\r\n### Environment\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.3.2 (build 12)\r\n\r\nRuntime:\r\n\tMono 5.4.1.7 (2017-06/e66d9abbb27) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 504010007\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.0.3/Sdks\r\nSDK Version: 2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.0\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.6.1.2 (Visual Studio Enterprise)\r\nHash: 6857dfcc\r\nBranch: xcode9.2\r\nBuild date: 2017-12-04 21:20:41-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.1.0.25 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/bradumbaugh/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.1 (API level 25)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 25.0.5\r\nSDK Build Tools Version: 25.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.3.2\r\nHash: 461f09a\r\nBranch: 1.3-release\r\nBuild date: Tue, 03 Oct 2017 18:26:57 GMT\r\nClient compatibility: 1\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.0.0.214 (Visual Studio Enterprise)\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 703020012\r\nGit revision: 7d0c9d7ad46b125cf4b7bbf9532c0531b6433ce6\r\nBuild date: 2017-12-12 14:03:18-05\r\nXamarin addins: 6dddaa49fbecb2695fcdcd6b712eb269e288518c\r\nBuild lane: monodevelop-lion-d15-5\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.2\r\nDarwin 17.3.0 Darwin Kernel Version 17.3.0\r\n    Thu Nov  9 18:09:22 PST 2017\r\n    root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n### Example Project (If Possible)\r\n\r\n[AddAnimationTest.zip](https://github.com/xamarin/xamarin-macios/files/1607085/AddAnimationTest.zip)\r\n"},{"Id":"7061981477","Type":"PullRequestEvent","CreatedAt":"2018-01-05T15:33:33","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3165","RelatedDescription":"Opened pull request \"[Backport][SceneKit] Workaround SCNAnimationEvent breaking change introduced in iOS 11 (#3160)\" (#3165) at xamarin/xamarin-macios","RelatedBody":"This fixes xamarin-macios#3145 and xamarin/xamarin-macios#3146\r\n\r\nThis workarounds an Apple breaking change (since `SCNAnimation` protocol is new in iOS 11):\r\n\r\nThe Old definition was\r\n> typedef void (^SCNAnimationEventBlock)(CAAnimation animation, id _Nonnull animatedObject, BOOL playingBackward)\r\n\r\nThe new ObjC definition is:\r\n> typedef void (^SCNAnimationEventBlock)(id<SCNAnimation> animation, id animatedObject, BOOL playingBackward);\r\n\r\nand it is bound as:\r\n> delegate void SCNAnimationEventHandler (CAAnimation animation, NSObject animatedObject, bool playingBackward);\r\n\r\nand for watchOS and XAMCORE_4_0 it is bound as:\r\n> delegate void SCNAnimationEventHandler (ISCNAnimationProtocol animation, NSObject animatedObject, bool playingBackward);\r\n\r\nFortunatelly `CAAnimation` conforms to `SCNAnimation` protocol and\r\nwe are now abusing this fact and forcing its creation with `GetINativeObject`\r\nthis way we keep a single API and we can always completely fix this\r\nwhen XAMCORE_4_0 happens following suit with apple's breaking change."},{"Id":"7061852336","Type":"IssuesEvent","CreatedAt":"2018-01-05T15:04:41","Actor":"therealjohn","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3159","RelatedDescription":"Closed issue \"Privacy Strings Not Localized for Location Service\" (#3159) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n* I have attached a sample project for your convenience. Just unzip, open solution and run the iOS project on a simulator.\r\n\r\n1. Create UI with a button to access the user's location. Create a CLLocationManager and call RequestWhenInUseAuthorization.\r\n2. Add NSLocationAlwaysAndWhenInUseUsageDescription and NSLocationWhenInUseUsageDescription to Info.plist. Add localized value in fr-CA for the two values in Info.plist by adding the localization strings in Resources/fr_CA.lproj/InfoPlist.strings. Also, for testing purposes, also setup Resources/en.lproj/InfoPlist.strings with different strings.\r\n3. Switch OS to French (Canada). Open the app and click on the button that prompts user for using their Location when in use.\r\n4. To get the same prompt to show up again, you MUST delete the app from your device/simulator and install the app again.\r\n\r\n### Expected Behavior\r\nSee localized value in Resources/fr_CA.lproj/InfoPlist.strings\r\n### Actual Behavior\r\nSee localized value in Resources/en.lproj/InfoPlist.strings\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n[TestLocationPrivacyLocalization.zip](https://github.com/xamarin/xamarin-macios/files/1605208/TestLocationPrivacyLocalization.zip)\r\n![screen shot 2018-01-04 at 4 41 28 pm](https://user-images.githubusercontent.com/31945079/34590911-93aab252-f16e-11e7-9171-85f7ed252999.png)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n\r\n  "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"949372052758302723","CreatedAt":"2018-01-05T20:08:30+00:00","UserScreenname":"xamarinhq","Text":"Learn how Colonial Life drives field sales productivity with #dotNET and #DevOps using #XamarinForms:… https://t.co/Y1wBTN0TJA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"949323858972233734","CreatedAt":"2018-01-05T16:57:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":17,"RawContent":null},{"Id":"948981959132368901","CreatedAt":"2018-01-04T18:18:24+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/VAkrZo84pP","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":36,"RawContent":null},{"Id":"948961974766972934","CreatedAt":"2018-01-04T16:59:00+00:00","UserScreenname":"xamarinhq","Text":"Add native Android Facebook Authentication to your app using #Azure App Service in this guide from @jamesmontemagno: https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":15,"RawContent":null},{"Id":"948635192490590211","CreatedAt":"2018-01-03T19:20:29+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/sV84us2Np4 https://t.co/tduUDgg9oS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":6,"RawContent":null},{"Id":"948604119945760768","CreatedAt":"2018-01-03T17:17:01+00:00","UserScreenname":"xamarinhq","Text":"Take advantage of #ARKit, an augmented-reality mode on iOS 11 for 6S and up iPhones + 2017 iPads and iPad Pros:… https://t.co/tuqMBJJWpq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":17,"RawContent":null},{"Id":"948294578192437248","CreatedAt":"2018-01-02T20:47:00+00:00","UserScreenname":"xamarinhq","Text":"Did your favorite make the cut? Get the full list of the top #Xamarin blog posts of 2017, and see the top post of t… https://t.co/dVcXEnCo7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":26,"RawContent":null},{"Id":"947216981937319938","CreatedAt":"2017-12-30T21:25:01+00:00","UserScreenname":"xamarinhq","Text":"The countdown is winding down! Post No. 2 in the #12DaysofXamarin walks you through implementing push notifications… https://t.co/uiyyYhL6zW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"946830183532724235","CreatedAt":"2017-12-29T19:48:01+00:00","UserScreenname":"xamarinhq","Text":"Just getting started with #XamarinForms? Let PM @davidortinau show you how to beat the learning curve in post No. 3… https://t.co/0y63QrYo5f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":20,"RawContent":null},{"Id":"946788653736583169","CreatedAt":"2017-12-29T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":15,"RawContent":null},{"Id":"946472572895588353","CreatedAt":"2017-12-28T20:07:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with C# 7 with @jamesmontemagno in the 4th post in our #12DaysofXamarin countdown: https://t.co/nWuAmDsr0R","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":31,"RawContent":null},{"Id":"946430293401067521","CreatedAt":"2017-12-28T17:19:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/VlbopDlbd6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":21,"RawContent":null},{"Id":"946110438961541121","CreatedAt":"2017-12-27T20:08:01+00:00","UserScreenname":"xamarinhq","Text":"Our eBook on building \"Enterprise Application Patterns using #XamarinForms\" takes the 5th spot in our… https://t.co/HPidr9WU7g","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":118,"FavoriteCount":56,"RawContent":null},{"Id":"946049788914683905","CreatedAt":"2017-12-27T16:07:01+00:00","UserScreenname":"xamarinhq","Text":"Update your iOS apps to reflect plugin and permission changes in iOS 11: https://t.co/9DXby5Nxsn https://t.co/YpY9vtHgsp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":17,"RawContent":null},{"Id":"945745033117995009","CreatedAt":"2017-12-26T19:56:01+00:00","UserScreenname":"xamarinhq","Text":"\"5 Ways to Boost #XamarinForms App Startup Time\" from David Ortinau marks the halfway point at No. 6 the… https://t.co/ch9JL4J1fe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":39,"RawContent":null},{"Id":"944704928630693888","CreatedAt":"2017-12-23T23:03:01+00:00","UserScreenname":"xamarinhq","Text":"Today in the #12DaysofXamarin, learn how to make your UIs adaptive with #XamarinForms with the 7th most popular… https://t.co/0g7tgzIrEZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":118,"FavoriteCount":56,"RawContent":null},{"Id":"944297266629705728","CreatedAt":"2017-12-22T20:03:07+00:00","UserScreenname":"xamarinhq","Text":"Get started with async/await in the 8th post of the #12DaysofXamarin: https://t.co/MgpLPtLd2z https://t.co/Yt2iACcgfI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":13,"RawContent":null},{"Id":"944251690777284608","CreatedAt":"2017-12-22T17:02:01+00:00","UserScreenname":"xamarinhq","Text":"Don't miss your chance to win a three-month @XamarinU subscription just for checking out our new Getting Started Gu… https://t.co/QhYiE3ZQJU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":4,"RawContent":null},{"Id":"943931836278935554","CreatedAt":"2017-12-21T19:51:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to add face tracking and live recognition to your Android apps with this tutorial from @nishanil, coming… https://t.co/hAo63TPY8D","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2018-01-06T05:30:38.0947161Z","RunDurationInMilliseconds":3761}