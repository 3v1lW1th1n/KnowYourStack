{"Data":{"Blog":{"FeedItems":[{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7980377557","Type":"PullRequestEvent","CreatedAt":"2018-07-18T03:09:58","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18980","RelatedDescription":"Opened pull request \"Update PgoData to release-20180717-1952 (release/2.1)\" (#18980) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7980055850","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:08:21","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18979","RelatedDescription":"Opened pull request \"JIT: force all local var ref counts to be accessed via API\" (#18979) at dotnet/coreclr","RelatedBody":"This is a preparatory change for auditing and controlling how local\r\nvariable ref counts are observed and manipulated.\r\n\r\nSee #18969 for context.\r\n\r\nNo diffs seen locally. No TP impact expected.\r\n\r\nThere is a small chance we may see some asserts in broader testing\r\nas there were places in original code where local ref counts were\r\nincremented without checking for possible overflows. The new APIs\r\nwill assert for overflow cases."},{"Id":"7979926323","Type":"PullRequestEvent","CreatedAt":"2018-07-18T00:16:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18975","RelatedDescription":"Opened pull request \"Revert \"Improve narrowing of GT_AND nodes. (#18916)\"\" (#18975) at dotnet/coreclr","RelatedBody":"This reverts commit c0bad3c66218f61dd3e4f151b9d2eae22c6d88d2."},{"Id":"7979882471","Type":"IssuesEvent","CreatedAt":"2018-07-18T00:00:20","Actor":"ghosttie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18974","RelatedDescription":"Opened issue \"Publish looks in wrong folder for dependency\" (#18974) at dotnet/coreclr","RelatedBody":"I have a project targeting .NET Core 2.1 that has a reference to a project targeting .NET Standard 2.0.\r\n\r\nEverything compiles and runs fine, but when I try to publish, it fails with this error:\r\n\r\n> Metadata file 'C:\\projects\\asp.net\\Project Name\\Project Name.BusinessLogic\\bin\\Release\\netcoreapp2.1\\Project Name.BusinessLogic.dll' could not be found\r\n\r\nIt appears to be looking for a nonexistent \\netcoreapp2.1\\ directory instead of \\netstandard2.0\\ where the dll actually is.\r\n\r\nI think it might be using the referencing project's target rather than the referenced project's target to construct the path, but I could be wrong."},{"Id":"7979808968","Type":"PullRequestEvent","CreatedAt":"2018-07-17T23:33:39","Actor":"EgorBo","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18972","RelatedDescription":"Closed pull request \"Reduce a few allocations in string.Normalize \" (#18972) at dotnet/coreclr","RelatedBody":"Boosts `string.Normailize` by a few percents.\r\nE.g. `\"ắḉ¾ḉ\".Normalize(NormalizationForm.FormKD)` \r\n\r\nBenchmark:\r\n```csharp\r\npublic class StringNormalizeBenchmarks\r\n{\r\n\t[ParamsSource(nameof(StringsToNormalize))]\r\n\tpublic string Str { get; set; }\r\n\r\n\tpublic IEnumerable<string> StringsToNormalize()\r\n\t{\r\n\t\tyield return \"ắ\"; // see https://msdn.microsoft.com/en-us/library/8eaxk1x2(v=vs.110).aspx#Anchor_3\r\n\t\tyield return \"ắḉ¾ḉắ¾ḉ¾ắắ\";\r\n\t\tyield return string.Join(\"\", Enumerable.Repeat(\"ắḉприветWorld\", 1024));\r\n\t}\r\n\r\n\t[Benchmark] public string Normalize_FormC() => Str.Normalize(NormalizationForm.FormC);\r\n\t[Benchmark] public string Normalize_FormD() => Str.Normalize(NormalizationForm.FormD);\r\n\t[Benchmark] public string Normalize_FormKC() => Str.Normalize(NormalizationForm.FormKC);\r\n\t[Benchmark] public string Normalize_FormKD() => Str.Normalize(NormalizationForm.FormKD);\r\n}\r\n```\r\n\r\n|           Method |    Toolchain |     Mean | Scaled |  Gen 0 | Allocated |\r\n|----------------- |------------- |---------:|-------:|-------:|----------:|\r\n|  Normalize_FormD |      Default | 459.8 ns |   1.03 | 0.0415 |     264 B |\r\n|  Normalize_FormD | CoreCLR-Egor | 446.7 ns |   1.00 | 0.0405 |     256 B |"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7980054412","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:07:49","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9683","RelatedDescription":"Opened pull request \"Update dotnet/sdk\" (#9683) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7980037957","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:01:05","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9681","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9681) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7979921711","Type":"PullRequestEvent","CreatedAt":"2018-07-18T00:14:59","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9682","RelatedDescription":"Opened pull request \"Insert 15.8 Roslyn into CLI 2.1.400\" (#9682) at dotnet/cli","RelatedBody":"I've added a Maestro trigger to automatically insert from dev/15.8 to release/2.1.4xx in the future.\r\n\r\nHowever, adding a trigger doesn't create an initial PR, so this first 15.8 insertion of Roslyn into CLI 2.1.400 was manual.\r\n\r\nVersion obtained from https://github.com/dotnet/versions/blob/master/build-info/dotnet/roslyn/dev15.8/Latest_Packages.txt\r\n\r\nPlease confirm that this build is OK to insert @Shyam-Gupta @jasonmalinowski @jaredpar \r\n\r\n\r\n"},{"Id":"7979886447","Type":"PullRequestEvent","CreatedAt":"2018-07-18T00:01:39","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9681","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9681) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7978989481","Type":"IssuesEvent","CreatedAt":"2018-07-17T20:10:26","Actor":"crummel","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9680","RelatedDescription":"Opened issue \"[source-build] DownloadPackageVersionsProps target is no longer run\" (#9680) at dotnet/cli","RelatedBody":"I think this must have gotten lost in the refactoring - the `DownloadPackageVersionProps` target still [exists](https://github.com/dotnet/cli/blob/master/build/DownloadPackageVersions.targets#L2) but nothing like [InitRepo](https://github.com/dotnet/core-sdk/blob/master/build/InitRepo.targets) depends on it any more, so it is never run.  Additionally, the destination for the props, `OrchestratedPackageVersionsProps` is no longer defined and, in core-sdk, depends on `GeneratedPropsDir`, which also no longer exists.  I tried to prep a PR for this but ended up not know where you would want all of it - let me know if I can help at all.\r\n\r\ncc @nguerrera @dsplaisted"},{"Id":"7978421025","Type":"PullRequestEvent","CreatedAt":"2018-07-17T18:16:03","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9675","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9675) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7979871983","Type":"IssuesEvent","CreatedAt":"2018-07-17T23:56:29","Actor":"JamesNK","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/834","RelatedDescription":"Closed issue \"Newtonsoft.Json in .NET Standard: good idea or no?\" (#834) at dotnet/standard","RelatedBody":"Newtonsoft.Json is the most downloaded and referenced NuGet library. It is also pretty stable. There isn't major development going on at the moment, changes are mostly bug fixes.\r\n\r\nPutting the idea out there to weigh up the pros and the cons: should Newtonsoft.Json be in .NET Standard?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7980725108","Type":"IssuesEvent","CreatedAt":"2018-07-18T05:29:17","Actor":"Porges","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31145","RelatedDescription":"Closed issue \"Support for 128-bit AVX intrinsics\" (#31145) at dotnet/corefx","RelatedBody":"The AVX instructions in `System.Runtime.Intrinsics.Experimental` appear to be missing support for the 128-bit vectors. \r\n\r\nFrom [Intel's guide](https://software.intel.com/sites/default/files/managed/c5/15/architecture-instruction-set-extensions-programming-reference.pdf):\r\n> Applications using AVX and FMA should migrate legacy 128-bit SIMD instructions to their 128-bit AVX equivalents. AVX supplies the full complement of 128-bit SIMD instructions except for AES and PCLMULQDQ. \r\n\r\nSo it sounds like all the 128-bit instructions supplied by the SSE intrinsics should be in the AVX intrinsics too, to help avoid mixing SSE and VEX code?\r\n"},{"Id":"7980700115","Type":"IssuesEvent","CreatedAt":"2018-07-18T05:19:45","Actor":"Porges","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31145","RelatedDescription":"Opened issue \"Support for 128-bit AVX intrinsics\" (#31145) at dotnet/corefx","RelatedBody":"The AVX instructions in `System.Runtime.Intrinsics.Experimental` appear to be missing support for the 128-bit vectors. \r\n\r\nFrom [Intel's guide](https://software.intel.com/sites/default/files/managed/c5/15/architecture-instruction-set-extensions-programming-reference.pdf):\r\n> Applications using AVX and FMA should migrate legacy 128-bit SIMD instructions to their 128-bit AVX equivalents. AVX supplies the full complement of 128-bit SIMD instructions except for AES and PCLMULQDQ. \r\n\r\nSo it sounds like all the 128-bit instructions supplied by the SSE intrinsics should be in the AVX intrinsics too, to help avoid mixing SSE and VEX code?\r\n"},{"Id":"7980677029","Type":"IssuesEvent","CreatedAt":"2018-07-18T05:10:39","Actor":"AArnott","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31144","RelatedDescription":"Opened issue \"PipeWriter: no way to wait for flush to complete\" (#31144) at dotnet/corefx","RelatedBody":"When I use a `Pipe`  as a way to write to something else, there is no way for the `PipeWriter` to *flush* such that it returns a `Task` that signifies when the `PipeReader` has caught up with the `PipeWriter` up to a given point. When I'm writing directly to a stream, I can write several times, then call `await Stream.FlushAsync()` and know that everything I've written has been transmitted before continuing.\r\n\r\nBut when using a `PipeWriter`, there's no way to know when the `PipeReader` is done up to a point, short of *completing* the writer, which of course is not a repeatable thing like flushing is.\r\n\r\nEven completing the writer is really tedious. You can see a test I wrote that demonstrates that it takes **16 lines of code** to do the one-time flush operation of knowing when the reader of the pipe is caught up, as you can see below.\r\n\r\nThe `PipeWriter` has a `FlushAsync` method but from the only docs we have (the blog) [it is hinted at](https://gist.github.com/terrajobst/7e04b424ab279e711eece8f6b1c233d8#file-sample5-cs-L34-L35) that this method doesn't complete when the reader is done, but rather just gives the reader access to what we've written (and I guess serves as a force-slowdown on the writer if the reader is far behind). \r\n\r\nCan we please get a proper `FlushAsync` method that indicates when the reader has caught up with the writer at a given point?\r\n\r\n```cs\r\n[Fact]\r\npublic async Task UsePipeWriter()\r\n{\r\n    byte[] expectedBuffer = GetRandomBuffer(2048);\r\n    var stream = new MemoryStream(expectedBuffer.Length);\r\n    var writer = stream.UsePipeWriter(this.TimeoutToken);\r\n    await writer.WriteAsync(expectedBuffer.AsMemory(0, 1024), this.TimeoutToken);\r\n    await writer.WriteAsync(expectedBuffer.AsMemory(1024, 1024), this.TimeoutToken);\r\n\r\n    // As a means of waiting for the async process that copies what we write onto the stream,\r\n    // complete our writer and wait for the reader to complete also.\r\n    writer.Complete();\r\n    var readerDone = new TaskCompletionSource<object>();\r\n    writer.OnReaderCompleted(\r\n        (ex, tcs) =>\r\n        {\r\n            if (ex != null)\r\n            {\r\n                readerDone.SetException(ex);\r\n            }\r\n            else\r\n            {\r\n                readerDone.SetResult(null);\r\n            }\r\n        },\r\n        null);\r\n    await readerDone.Task.WithCancellation(this.TimeoutToken);\r\n\r\n    Assert.Equal(expectedBuffer, stream.ToArray());\r\n}\r\n```\r\n\r\nWhere `UsePipeWriter` is defined this way:\r\n\r\n```cs\r\npublic static PipeWriter UsePipeWriter(this Stream stream, CancellationToken cancellationToken = default)\r\n{\r\n    Requires.NotNull(stream, nameof(stream));\r\n\r\n    var pipe = new Pipe();\r\n    Task.Run(async delegate\r\n    {\r\n        try\r\n        {\r\n            while (true)\r\n            {\r\n                ReadResult readResult = await pipe.Reader.ReadAsync(cancellationToken);\r\n                if (readResult.Buffer.Length > 0)\r\n                {\r\n                    foreach (ReadOnlyMemory<byte> segment in readResult.Buffer)\r\n                    {\r\n                        await stream.WriteAsync(segment, cancellationToken);\r\n                    }\r\n\r\n                    await stream.FlushAsync(cancellationToken).ConfigureAwait(false);\r\n                }\r\n\r\n                pipe.Reader.AdvanceTo(readResult.Buffer.End);\r\n\r\n                if (readResult.IsCompleted)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            pipe.Reader.Complete();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            pipe.Reader.Complete(ex);\r\n            throw;\r\n        }\r\n    }).Forget();\r\n    return pipe.Writer;\r\n}\r\n```"},{"Id":"7980607102","Type":"IssuesEvent","CreatedAt":"2018-07-18T04:41:14","Actor":"dustinsoftware","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31143","RelatedDescription":"Opened issue \"HttpClient does not always return 'Authorization' header correctly\" (#31143) at dotnet/corefx","RelatedBody":"Simple app to repro this behavior is in [this gist](https://gist.github.com/dustinsoftware/424ba34074f4044a1420713bda37104a), on .NET Core 2.1.302.\r\n\r\nWhen accessing the `Authorization` header in .NET Core 2.1 via `GetValues`, it will be empty:\r\n```cs\r\nresponse.Headers.TryGetValues(_authorizationKey, out var authorization);\r\nConsole.WriteLine(authorization?.First()); // empty string\r\n```\r\n\r\nCalling this method inside netstandard 2.0 library running on .NET 4.7 works as expected.\r\n\r\nThis always works:\r\n```cs\r\nConsole.WriteLine(response.Headers.First(x => x.Key == _authorizationKey).Value.FirstOrDefault());\r\n```\r\n\r\nIs this behavior documented somewhere? Should I be iterating over `Headers` instead?\r\n"},{"Id":"7980519218","Type":"PullRequestEvent","CreatedAt":"2018-07-18T04:04:40","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30740","RelatedDescription":"Merged pull request \"SocketsHttpHandler: Initial cut at HTTP2 support\" (#30740) at dotnet/corefx","RelatedBody":"This PR contains the first cut at HTTP2 support for SocketsHttpHandler.\r\n\r\nThis is disabled by default, and for now can only be enabled by manually modifying the default for HttpHandlerDefaults.DefaultMaxHttpVersion. Eventually, this setting will be made public and will default to 2.0.\r\n\r\nThere is a fair amount of HTTP2 functionality that's not implemented yet. These are tracked by TODOs in the code currently. I will add issues for these once we've got the initial PR complete.\r\n\r\nCurrently, the existing remote endpoint based HTTP2 tests pass for all tests that don't have a request body (basically, GET and POST with no content).\r\n\r\nI've split this into two commits; the first is just a small amount of reorganization in the existing code to enable adding HTTP2.  The second contains the new HTTP2 code and related changes.\r\n\r\nThe HPACK code here is taken from ASP.NET, with only minor modifications.\r\n\r\n@stephentoub @davidsh @dotnet/ncl "},{"Id":"7980496312","Type":"IssuesEvent","CreatedAt":"2018-07-18T03:55:49","Actor":"AaronRobinsonMSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30866","RelatedDescription":"Closed issue \"Marshal API tests failing sporadically\" (#30866) at dotnet/corefx","RelatedBody":"The test fails accidentally in windows, not stable.\r\nFailed test code:\r\n[https://github.com/jiangzeng/corefx/blob/77fced488a141298d362d5204a828835416c7012/src/System.Runtime.InteropServices/tests/System/Runtime/InteropServices/Marshal/GetExceptionForHRTests.cs](https://github.com/jiangzeng/corefx/blob/77fced488a141298d362d5204a828835416c7012/src/System.Runtime.InteropServices/tests/System/Runtime/InteropServices/Marshal/GetExceptionForHRTests.cs)\r\n       `[Theory]\r\n       [InlineData(unchecked((int)0x80020006))]\r\n       [InlineData(unchecked((int)0x80020101))]\r\n       public void GetExceptionForHR_EqualsErrorCode(int err)\r\n       {\r\n              Exception ex = Marshal.GetExceptionForHR(err);\r\n              Assert.Equal(err, ex.HResult);\r\n       }`\r\n \r\nError log:\r\n[https://mc.dot.net/#/user/jiangzeng/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/77fced488a141298d362d5204a828835416c7012/workItem/System.Runtime.InteropServices.Tests/analysis/xunit/System.Runtime.InteropServices.Tests.GetExceptionForHRTests~2FGetExceptionForHR_EqualsErrorCode(err:%20-2147352570)](https://mc.dot.net/#/user/jiangzeng/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/77fced488a141298d362d5204a828835416c7012/workItem/System.Runtime.InteropServices.Tests/analysis/xunit/System.Runtime.InteropServices.Tests.GetExceptionForHRTests~2FGetExceptionForHR_EqualsErrorCode(err:%20-2147352570))\r\n`Assert.Equal() Failure\r\nExpected: -2147352570\r\nActual:   1000`\r\n"},{"Id":"7980495712","Type":"PullRequestEvent","CreatedAt":"2018-07-18T03:55:33","Actor":"AaronRobinsonMSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31136","RelatedDescription":"Merged pull request \"Mitigate exception ambiguity in Marshal test\" (#31136) at dotnet/corefx","RelatedBody":"Address issue 30866\r\nRemove the special case of expecting a `COMException` when the argument\r\nis non-empty or `null` for `Marshal.BindToMoniker()` tests."},{"Id":"7980473850","Type":"PullRequestEvent","CreatedAt":"2018-07-18T03:46:59","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31118","RelatedDescription":"Merged pull request \"System.IO.Pipes: Add additional Create overloads for Mono\" (#31118) at dotnet/corefx","RelatedBody":"Rationale: There are some missing constructor overloads in the pipe classes that deal with `PipeSecurity` (#30170).\r\n\r\n`PipeSecurity` is inherited from `NativeObjectSecurity`, which throws `PlatformNotSupportedException` in `InternalSet` on anything but Windows. Since the implementation doesn't really seem cross-platform it is questionable whether the overloads would make sense on CoreFX.\r\n\r\nHowever, Mono implements the NetFX API surface and thus it has to provide implementation for the constructors. It seems reasonable to limit such implementation to Windows and throw `PlatformNotSupportedException` on anything else. In order to provide the Windows implementation some code must be exposed in CoreFX that would be used in Mono to implement the remaining overloads."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7980061382","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:10:35","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28597","RelatedDescription":null,"RelatedBody":"…on completion window\r\n\r\nFixing issue https://github.com/dotnet/roslyn/issues/23891\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7979875908","Type":"PullRequestEvent","CreatedAt":"2018-07-17T23:57:54","Actor":"chborl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28625","RelatedDescription":"Opened pull request \"WIP - Code Cleanup AB Test\" (#28625) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7979826191","Type":"PullRequestEvent","CreatedAt":"2018-07-17T23:39:47","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28598","RelatedDescription":"Merged pull request \"Update null-coalesce-assignment semantic rewrite form.\" (#28598) at dotnet/roslyn","RelatedBody":"Changes our semantic rewrite from `(a != null) ? a : (a = b)` to `a ?? (a = b)`. This ends up changing the produced IL a bit, using `dup`s in a few places where the previous rewrite captured.\r\n\r\n@dotnet/roslyn-compiler @cston for review."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7979569021","Type":"PullRequestEvent","CreatedAt":"2018-07-17T22:19:27","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6106","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6106) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7978538010","Type":"PullRequestEvent","CreatedAt":"2018-07-17T18:38:34","Actor":"acmyu","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6105","RelatedDescription":"Opened pull request \"Straightforward bugfixes and trivial additions\" (#6105) at dotnet/corert","RelatedBody":"Added some constants to FixupConstants.cs\r\nRemoved dead code from ImportSectionsTableNode.cs\r\nBugfix in VertexArray"},{"Id":"7978336419","Type":"PullRequestEvent","CreatedAt":"2018-07-17T17:59:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6103","RelatedDescription":"Merged pull request \"Add support for embedding runtime configuration\" (#6103) at dotnet/corert","RelatedBody":"Runtime configuration (e.g. whether to use server GC) can currently be provided either through environment variables at runtime, or through a RhConfig.ini file placed next to the executable. This adds another channel where we burn a blob similar to RhConfig.ini format into the executable. The order of precedence is environment variable > RhConfig.ini > embedded config.\r\n\r\nThe `ServerGarbageCollection` project property that is used to determine whether to link with a runtime that supports server GC will be also used to control whether to generate a configuration that enables server GC at runtime by default.\r\n\r\nFixes #6100."},{"Id":"7978336400","Type":"IssuesEvent","CreatedAt":"2018-07-17T17:59:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6100","RelatedDescription":"Closed issue \"Make switching to server GC easier\" (#6100) at dotnet/corert","RelatedBody":"After #5565 we can control whether server GC support is compiled into the executable using a property specified in the CSPROJ (`<ServerGarbageCollection>true</ServerGarbageCollection>`). But this doesn't actually enable server GC; only allows it to be enabled.\r\n\r\nTo actually enable server GC, `RH_UseServerGC=1` environment variable needs to be set before launching the compiled executable. This is rather awkward. Maybe compiling with `ServerGarbageCollection` should also make server GC the default (with a `RH_UseServerGC=0` to opt out)."},{"Id":"7977325214","Type":"PullRequestEvent","CreatedAt":"2018-07-17T15:02:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6104","RelatedDescription":"Merged pull request \"Add DefinePInvokeStubs\" (#6104) at dotnet/corert","RelatedBody":""},{"Id":"7977066643","Type":"PullRequestEvent","CreatedAt":"2018-07-17T14:24:51","Actor":"AtsushiKan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6104","RelatedDescription":"Opened pull request \"Add DefinePInvokeStubs\" (#6104) at dotnet/corert","RelatedBody":""},{"Id":"7975839401","Type":"PullRequestEvent","CreatedAt":"2018-07-17T10:36:41","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6103","RelatedDescription":"Opened pull request \"Add support for embedding runtime configuration\" (#6103) at dotnet/corert","RelatedBody":"Runtime configuration (e.g. whether to use server GC) can currently be provided either through environment variables at runtime, or through a RhConfig.ini file placed next to the executable. This adds another channel where we burn a blob similar to RhConfig.ini format into the executable. The order of precedence is environment variable > RhConfig.ini > embedded config.\r\n\r\nThe `ServerGarbageCollection` project property that is used to determine whether to link with a runtime that supports server GC will be also used to control whether to generate a configuration that enables server GC at runtime by default.\r\n\r\nFixes #6100."},{"Id":"7972283284","Type":"PullRequestEvent","CreatedAt":"2018-07-16T18:47:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6099","RelatedDescription":"Merged pull request \"Optimize {Try}FormatDecimal\" (#6099) at dotnet/corert","RelatedBody":"This improves decimal formatting performance by 1.09x and removes an unused `nMinDigits` parameter from many functions."},{"Id":"7972277978","Type":"PullRequestEvent","CreatedAt":"2018-07-16T18:46:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6095","RelatedDescription":"Merged pull request \"Added System.Runtime.ProfileOptimization\" (#6095) at dotnet/corert","RelatedBody":"contributes to https://github.com/dotnet/corefx/issues/30185\r\n\r\n/cc @jkotas "},{"Id":"7971324266","Type":"PullRequestEvent","CreatedAt":"2018-07-16T15:13:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6102","RelatedDescription":"Merged pull request \"Fix decimal parsing for \"-1e-400\"\" (#6102) at dotnet/corert","RelatedBody":"This fixes an edge case parsing difference between +0/-0 from #6091 (discussion in https://github.com/dotnet/coreclr/pull/18868 and https://github.com/dotnet/corefx/pull/31085)"},{"Id":"7971258795","Type":"PullRequestEvent","CreatedAt":"2018-07-16T15:03:15","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6101","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6101) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7971068718","Type":"PullRequestEvent","CreatedAt":"2018-07-16T14:34:01","Actor":"pentp","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6102","RelatedDescription":"Opened pull request \"Fix decimal parsing for \"-1e-400\"\" (#6102) at dotnet/corert","RelatedBody":"This fixes an edge case parsing difference between +0/-0 from #6091 (discussion in https://github.com/dotnet/coreclr/pull/18868 and https://github.com/dotnet/corefx/pull/31085)"},{"Id":"7970856074","Type":"PullRequestEvent","CreatedAt":"2018-07-16T14:00:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6101","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6101) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7980167312","Type":"IssuesEvent","CreatedAt":"2018-07-18T01:51:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2410","RelatedDescription":"Opened issue \"Implicit netstandard ref bumped to 2.1.0-preview in 2.2 branch\" (#2410) at dotnet/sdk","RelatedBody":"Presumably this is due to version bump in bundled versions in CLI, but is this right?\r\n\r\nTest is disabled for now. \r\n```\r\nMicrosoft.NET.Restore.Tests.GivenThatWeWantToRestoreToUseImplicitPackages.It_uses_NetstandardLibrary20x_as_the_implicit_version_for_NetStandard20 [FAIL]\r\n      Expected string to be \r\n      \"2.0.3\" with a length of 5, but \r\n      \"2.1.0-preview1-25902-01\" has a length of 23.\r\n      Stack Trace:\r\n        C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions.Net45\\Execution\\XUnit2TestFramework.cs(32,0): at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)\r\n        C:\\projects\\fluentassertions-vf06b\\Src\\Core\\Execution\\AssertionScope.cs(197,0): at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)\r\n        C:\\projects\\fluentassertions-vf06b\\Src\\Core\\Primitives\\StringEqualityValidator.cs(30,0): at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstLengthDifferences()\r\n        C:\\projects\\fluentassertions-vf06b\\Src\\Core\\Primitives\\StringValidator.cs(41,0): at FluentAssertions.Primitives.StringValidator.Validate()\r\n        C:\\projects\\fluentassertions-vf06b\\Src\\Core\\Primitives\\StringAssertions.cs(41,0): at FluentAssertions.Primitives.StringAssertions.Be(String expected, String because, Object[] becauseArgs)\r\n        D:\\Src\\sdk\\src\\Tests\\Microsoft.NET.Restore.Tests\\GivenThatWeWantRestoreToUseImplicitPackages.cs(54,0): at Microsoft.NET.Restore.Tests.GivenThatWeWantToRestoreToUseImplicitPackages.It_uses_NetstandardLibrary20x_as_the_implicit_version_for_NetStandard20()\r\n      Output:\r\n        > D:\\Src\\sdk\\.dotnet\\dotnet.exe msbuild /t:restore D:\\Src\\sdk\\artifacts\\Debug\\tmp\\It_uses_Netst---76433CD0\\NetStandard2Library\\NetStandard2Library.csproj\r\n        Microsoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\n        Copyright (C) Microsoft Corporation. All rights reserved.\r\n          Restoring packages for D:\\Src\\sdk\\artifacts\\Debug\\tmp\\It_uses_Netst---76433CD0\\NetStandard2Library\\NetStandard2Library.csproj...\r\n        D:\\Src\\sdk\\artifacts\\Debug\\tmp\\It_uses_Netst---76433CD0\\NetStandard2Library\\NetStandard2Library.csproj : warning NU1603: NetStandard2Library depends on NETStandard.Library (>= 2.0.4-servicing-26522-02) but NETStandard.Library 2.0.4-servicing-26522-02 was not found. An approximate best match of NETStandard.Library 2.1.0-preview1-25902-01 was resolved.\r\n          Generating MSBuild file D:\\Src\\sdk\\artifacts\\Debug\\tmp\\It_uses_Netst---76433CD0\\NetStandard2Library\\obj\\NetStandard2Library.csproj.nuget.g.props.\r\n          Generating MSBuild file D:\\Src\\sdk\\artifacts\\Debug\\tmp\\It_uses_Netst---76433CD0\\NetStandard2Library\\obj\\NetStandard2Library.csproj.nuget.g.targets.\r\n          Restore completed in 2.27 sec for D:\\Src\\sdk\\artifacts\\Debug\\tmp\\It_uses_Netst---76433CD0\\NetStandard2Library\\NetStandard2Library.csproj.\r\n```        "},{"Id":"7980083287","Type":"IssuesEvent","CreatedAt":"2018-07-18T01:19:04","Actor":"mishra14","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2409","RelatedDescription":"Opened issue \"sdk not displaying all NuGet warnings from assets file in VS\" (#2409) at dotnet/sdk","RelatedBody":"## Issue\r\nI am seeing that sdk is not picking up/displaying all the errors from the assets file for a .NET core project in VS.\r\n\r\n## Steps - \r\n1. Download the following zip and change the extension to `.nupkg` -\r\n[SignedPackage.1.0.0.zip](https://github.com/dotnet/sdk/files/2203929/SignedPackage.1.0.0.zip)\r\n2. Install the package in VS to a .NET Core console app.\r\n3. The error list displays 2 warnings - \r\n![image](https://user-images.githubusercontent.com/10507120/42853770-65d4bfae-89ed-11e8-9dd3-3b789a6e636e.png)\r\n4. The assets file actually lists 3 warnings - \r\n```\r\n  \"logs\": [\r\n    {\r\n      \"code\": \"NU3027\",\r\n      \"level\": \"Warning\",\r\n      \"warningLevel\": 1,\r\n      \"message\": \"The signature should be timestamped to enable long-term signature validity after the certificate has expired.\"\r\n    },\r\n    {\r\n      \"code\": \"NU3018\",\r\n      \"level\": \"Warning\",\r\n      \"warningLevel\": 1,\r\n      \"message\": \"The author primary signature found a chain building issue: A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.\"\r\n    },\r\n    {\r\n      \"code\": \"NU3037\",\r\n      \"level\": \"Warning\",\r\n      \"warningLevel\": 1,\r\n      \"message\": \"The author primary signature validity period has expired.\"\r\n    }\r\n```\r\n\r\n## Info - \r\nVS - 15.8 Preview 5 [27912.0.d15.8]"},{"Id":"7979894211","Type":"PullRequestEvent","CreatedAt":"2018-07-18T00:04:31","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2408","RelatedDescription":"Merged pull request \"Localization handback\" (#2408) at dotnet/sdk","RelatedBody":"Replacement for #2407, parented by the right branch.\r\n\r\ncc @khoiph1\r\n\r\n"},{"Id":"7979475124","Type":"PullRequestEvent","CreatedAt":"2018-07-17T21:55:40","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2408","RelatedDescription":"Opened pull request \"loc update\" (#2408) at dotnet/sdk","RelatedBody":"Replacement for #2407, parented by the right branch.\r\n\r\ncc @khoiph1\r\n\r\n"},{"Id":"7979249214","Type":"PullRequestEvent","CreatedAt":"2018-07-17T21:02:14","Actor":"khoiph1","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2407","RelatedDescription":"Opened pull request \"updated localized xliff files\" (#2407) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1019283191507582981","CreatedAt":"2018-07-17T18:10:24+00:00","UserScreenname":"dotnet","Text":"Check out the replay and learn about building reusable business objects in your applications from @RockyLhotka and… https://t.co/VnbmnXt31C","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":6,"RawContent":null},{"Id":"1019254182673436672","CreatedAt":"2018-07-17T16:15:08+00:00","UserScreenname":"dotnet","Text":"Code refactoring support in Visual Studio 2017 with @kuhlenhuth https://t.co/HkaG7b6Ac3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":19,"RawContent":null},{"Id":"1019207783844139010","CreatedAt":"2018-07-17T13:10:46+00:00","UserScreenname":"dotnet","Text":"Always a great time, and two experts that are wonderful to learn from.  Tune in at 10a ET / 7a PT / 14:00 UTC / 8p… https://t.co/PQsuqaJQY4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1018952801953681411","CreatedAt":"2018-07-16T20:17:33+00:00","UserScreenname":"dotnet","Text":"Rocky's got great insight into building Enterprise applications.  Be sure to tune in tomorrow when he pair-programs… https://t.co/cdQT99n8kk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"1018877434584817664","CreatedAt":"2018-07-16T15:18:04+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz will be hosting another one of his FREE workshops this Friday.  This week, tune in and learn about s… https://t.co/06laByebWA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":14,"RawContent":null},{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":21,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":109,"FavoriteCount":94,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":88,"FavoriteCount":78,"RawContent":null},{"Id":"1016363772737273856","CreatedAt":"2018-07-09T16:49:41+00:00","UserScreenname":"dotnet","Text":"https://t.co/EpnUCQtOJb.Pipelines: High performance IO in .NET https://t.co/LLJUxPVWlC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":352,"FavoriteCount":167,"RawContent":null},{"Id":"1016363637726797824","CreatedAt":"2018-07-09T16:49:09+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.3 https://t.co/dLw78XRgcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":91,"RawContent":null}]}},"RunOn":"2018-07-18T05:30:34.0936587Z","RunDurationInMilliseconds":8384}