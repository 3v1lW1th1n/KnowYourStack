{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access build 3632","PublishedOn":"2018-07-19T00:30:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We released the first Early Access build for the .NET Framework 4.8 last month (June-2018) and are happy to announce the next build (3632) for your feedback. This is one of the in-development builds...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/","RawContent":null},{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":33,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7992980023","Type":"PullRequestEvent","CreatedAt":"2018-07-20T05:13:57","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19052","RelatedDescription":"Opened pull request \"Changed internal value to readonly for primitive types\" (#19052) at dotnet/coreclr","RelatedBody":"Fixed for missing readonly attribute.\r\n\r\nSee PR https://github.com/dotnet/corefx/pull/30717 for additional details."},{"Id":"7992628562","Type":"PullRequestEvent","CreatedAt":"2018-07-20T02:42:48","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19047","RelatedDescription":"Merged pull request \"Address issues with COM tests in the helix build.\" (#19047) at dotnet/coreclr","RelatedBody":"Presently COM tests does not appear to run properly on Windows.Nano but\r\nthere is no way to special case that OS so disabling them on all builds.\r\n\r\nsee #19017"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7992648515","Type":"PullRequestEvent","CreatedAt":"2018-07-20T02:50:21","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9709","RelatedDescription":"Merged pull request \"Update the .NET SDK version.\" (#9709) at dotnet/cli","RelatedBody":"Bump the .NET SDK version following the NuGet insertion.\r\n"},{"Id":"7992459235","Type":"PullRequestEvent","CreatedAt":"2018-07-20T01:35:43","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9709","RelatedDescription":"Opened pull request \"Update the .NET SDK version.\" (#9709) at dotnet/cli","RelatedBody":"Bump the .NET SDK version following the NuGet insertion.\r\n"},{"Id":"7992229487","Type":"PullRequestEvent","CreatedAt":"2018-07-20T00:00:58","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9708","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9708) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7992414275","Type":"IssuesEvent","CreatedAt":"2018-07-20T01:17:01","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/782","RelatedDescription":"Closed issue \"dotnet 2.1.300 in  centos 7     The SSL connection could not be established, see inner exception\" (#782) at dotnet/standard","RelatedBody":"Error: One or more errors occurred. (The SSL connection could not be established, see inner exception.)\r\nCode:\r\n            var http = new System.Net.Http.HttpClient();\r\n            http.DefaultRequestHeaders.Add(\"user-agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\");\r\n            http.GetStringAsync(\"https://www.23us.net/90/90325/23873102.html\");\r\n\r\nNormal in Centos7, most of them will produce this error\r\nEverything works fine under Windows"},{"Id":"7992411590","Type":"IssuesEvent","CreatedAt":"2018-07-20T01:15:52","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/778","RelatedDescription":"Closed issue \"[Question] How to prevent copying of ~90 libraries to the TargetDir if NuGet package has NS2.0 library dependency?\" (#778) at dotnet/standard","RelatedBody":"I am working on **.Net 4.7** project. I installed NuGet package (Aspose.Email 17.11.0) that has the following dependency:\r\n\r\n`.NetStandard, Version=v2.0 System.Text.Encoding.CodePages (>=4.4.0).`\r\n\r\nAs a result I get ~90 libraries in the TargetDir including netstandard.dll, System.Collections and other when project is built.\r\n\r\nHow to prevent this behavior? I need only 3 files in the TargetDir: main.EXE, Aspose.Email.dll and System.Text.Encoding.CodePages.dll.\r\n\r\nAnd why this happens? .Net Framework 4.6.1 implements .NET Standard 2.0. That is why I did not expect such behavior in my .Net 4.7 project.\r\n\r\n![NuGet package I install](https://user-images.githubusercontent.com/8511403/41640080-1b65c600-7469-11e8-9c56-9c1110a599b6.png)"},{"Id":"7992397235","Type":"IssuesEvent","CreatedAt":"2018-07-20T01:09:48","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/795","RelatedDescription":"Closed issue \"It's not possible to make a .NET Standard project depend on a .NET Framework project, to ensure build order\" (#795) at dotnet/standard","RelatedBody":"I have a .NET Standard project that needs to depend on a .NET Framework project, to ensure build order of the projects. The .NET Framework project generates a file in an `AfterTargets=\"Build\"` target (using [NSwag.MSBuild](https://github.com/RSuter/NSwag/wiki/MSBuild)), and this file is added as a *linked file* in the .NET Standard project.\r\n\r\n**Solution1.sln**\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27703.2035\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary1\", \"ClassLibrary1\\ClassLibrary1.csproj\", \"{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary2\", \"ClassLibrary2\\ClassLibrary2.csproj\", \"{82F74C55-84D7-4C10-86A8-F04BE16DCB78}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {DC8EDB39-5B76-4A28-BC1A-351F2CA1269C}\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n\r\n**ClassLibrary1\\ClassLibrary1.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n**ClassLibrary2\\ClassLibrary2.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhen running `dotnet build .\\Solution1.sln`, the solution builds as expected.\r\n\r\nNow make ClassLibrary2 depend on ClassLibrary1:\r\n\r\n**Solution1.sln**\r\n```\r\n...\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary2\", \"ClassLibrary2\\ClassLibrary2.csproj\", \"{82F74C55-84D7-4C10-86A8-F04BE16DCB78}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8} = {CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}\r\n\tEndProjectSection\r\nEndProject\r\n...\r\n```\r\n\r\nWhen running `dotnet build .\\Solution1.sln`, the following error is thrown:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.300\\Microsoft.Common.CurrentVersion.targets(1656,5): error : Project 'C:\\...\\Solution1\\ClassLibrary1\\ClassLibrary1.csproj' targets 'net471'. It cannot be referenced by a project that targets '.NETStandard,Version=v2.0'. [C:\\...\\Solution1\\ClassLibrary2\\ClassLibrary2.csproj]\r\n\r\nClassLibrary2 doesn't reference ClassLibrary1 in a way that is technically impossible, so I expect this to work instead of throwing an error."},{"Id":"7992384879","Type":"IssuesEvent","CreatedAt":"2018-07-20T01:04:31","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/797","RelatedDescription":"Closed issue \"[Request] Show value operators on Value Type implementation view\" (#797) at dotnet/standard","RelatedBody":"Hello, It would be nice to see value operators on the implementation view of **value type**s \r\n(F12 in Visual Studio) \r\n\r\nActual view (for uint)\r\n```\r\nnamespace System\r\n{\r\n    public struct UInt32 : IComparable, IComparable<UInt32>, IConvertible, IEquatable<UInt32>, IFormattable\r\n    {\r\n        public const UInt32 MaxValue = 4294967295;\r\n        public const UInt32 MinValue = 0;\r\n\r\n        public static UInt32 Parse(string s, IFormatProvider provider);\r\n        public static UInt32 Parse(string s, NumberStyles style, IFormatProvider provider);\r\n        public static UInt32 Parse(string s, NumberStyles style);\r\n        public static UInt32 Parse(string s);\r\n        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out UInt32 result);\r\n        public static bool TryParse(string s, out UInt32 result);\r\n        public int CompareTo(UInt32 value);\r\n        public int CompareTo(object value);\r\n        public override bool Equals(object obj);\r\n        public bool Equals(UInt32 obj);\r\n        public override int GetHashCode();\r\n        public TypeCode GetTypeCode();\r\n        public override string ToString();\r\n        public string ToString(IFormatProvider provider);\r\n        public string ToString(string format);\r\n        public string ToString(string format, IFormatProvider provider);\r\n    }\r\n}\r\n```\r\nExpected view (for uint)\r\n```\r\nusing System.Globalization;\r\n\r\nnamespace System\r\n{\r\n    public struct UInt32 : IComparable, IComparable<UInt32>, IConvertible, IEquatable<UInt32>, IFormattable\r\n    {\r\n        public const UInt32 MaxValue = 4294967295;\r\n        public const UInt32 MinValue = 0;\r\n...\r\n        public string ToString(string format, IFormatProvider provider);\r\n\r\n        public uint operator +(uint a, uint b)\r\n        public uint operator -(uint a, uint b)\r\n        public uint operator *(uint a, uint b)\r\n        public uint operator /(uint a, uint b)\r\n\r\n        public uint operator %(uint a, uint b)\r\n\r\n        public uint operator <(uint a, uint b)\r\n        public uint operator >(uint a, uint b)\r\n\r\n        public uint operator <=(uint a, uint b)\r\n        public uint operator >=(uint a, uint b)\r\n\r\n        public uint operator ==(uint a, uint b)\r\n        public uint operator !=(uint a, uint b)\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7992371222","Type":"IssuesEvent","CreatedAt":"2018-07-20T00:59:00","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/756","RelatedDescription":"Closed issue \"[Proposal] .NET UI Standard\" (#756) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nThe .NET Standard was a great solution to overcome the various shapes of .NET and all its flavors.\r\n\r\nMaybe it's time to implement a .NET UI standard?\r\nIt will be a library of contracts for controls, layouts, user-input event hooks, navigation, styling, responsive adaptations, animations, shapes, and basically all tools a decent UI library is supposed to offer.\r\nMaybe even an opinionated default theme.\r\n\r\nThis will allow .NET UI Standard providers (be it WPF, UWP, Xamarin.Forms, Avalonia, Uno, or even web technologies, like ASP.NET Core), to implement renderers for the same UI in any platform while giving the developer the option to reuse the same UI structure.\r\nWe may consider using XAML as the language to describe those UIs but the core shouldn't be XAML but rather a CLR-based set of interfaces.\r\n\r\nRelated:\r\n- [Port System.Xaml to .NET Core](https://github.com/dotnet/corefx/issues/5766)\r\n- [Xamarin.Forms Drawing Spec](https://github.com/xamarin/Xamarin.Forms/issues/2452)\r\n- [Is XAML Standard dead?](https://github.com/Microsoft/xaml-standard/issues/230)\r\n- [XAML Standard API](https://github.com/dotnet/standard/issues/696)\r\n- [YouTube: The Future of .NET on the Desktop](https://www.youtube.com/watch?v=tkiPcCHGngY)"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7992988730","Type":"IssuesEvent","CreatedAt":"2018-07-20T05:17:45","Actor":"rjmholt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31217","RelatedDescription":"Opened issue \"ImmutableArray list initialiser throws NullReferenceException\" (#31217) at dotnet/corefx","RelatedBody":"Using .NET Core 2.1.1, I have a line of code like:\r\n```csharp\r\nvar x = new ImmutableArray<int> { 0 };\r\n```\r\n\r\nI get an error like this as a result (actual one is a bit bigger):\r\n```\r\nError Message:\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\nStack Trace:\r\n   at System.Collections.Immutable.ImmutableArray`1.Add(T item)\r\n   at MetadataAnalysis.MetadataAnalyzer..ctor(PEReader peReader) in /home/rob/Documents/Dev/Microsoft/ModuleAnalyzer/MetadataAnalysis/MetadataAnalyzer.cs:line 128\r\n```\r\n\r\nWorkaround of course is to do\r\n```csharp\r\nvar x = new [] { 0 }.ToImmutableArray();\r\n```\r\n\r\n(Or I presume something similar? I couldn't find the nice `Create()` and `CreateRange()` methods in my versions even though they're in the code here -- presume they are pending release? Or do I need another assembly reference?))"},{"Id":"7992985602","Type":"PullRequestEvent","CreatedAt":"2018-07-20T05:16:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31216","RelatedDescription":"Opened pull request \"Update CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview1-26720-01, beta-26720-00, beta-26720-00, respectively (master)\" (#31216) at dotnet/corefx","RelatedBody":""},{"Id":"7992757889","Type":"PullRequestEvent","CreatedAt":"2018-07-20T03:34:16","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31188","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-03020-01, preview1-26720-01, preview1-26719-04, preview1-26719-04, beta-26719-00, beta-26719-00, respectively (master)\" (#31188) at dotnet/corefx","RelatedBody":""},{"Id":"7992420360","Type":"PullRequestEvent","CreatedAt":"2018-07-20T01:19:42","Actor":"AaronRobinsonMSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/31215","RelatedDescription":"Closed pull request \"Disable tests that rely on GetComObjectData() and SetComObjectData() …\" (#31215) at dotnet/corefx","RelatedBody":"…semantics\r\n\r\nFix bug in Prelink_NonRuntimeMethod_ThrowsArgumentException test.\r\n\r\nsee #31188, #31153"},{"Id":"7992365308","Type":"PullRequestEvent","CreatedAt":"2018-07-20T00:56:25","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31210","RelatedDescription":"Merged pull request \"Ensure Windows specific DNS resolution errors throw the correct exception\" (#31210) at dotnet/corefx","RelatedBody":"This fix ensures that the Windows specific error code [WSA_NODATA](https://docs.microsoft.com/en-us/windows/desktop/winsock/windows-sockets-error-codes-2#WSANO_DATA) is correctly recognized as a DNS resolution error. This issue has been causing a recurring failure on Windows 7 CI machines.\r\n\r\nFixes: #31147"},{"Id":"7992365301","Type":"IssuesEvent","CreatedAt":"2018-07-20T00:56:25","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31147","RelatedDescription":"Closed issue \"Test failure: System.Net.Tests.HttpWebRequestTest/GetResponseAsync_ServerNameNotInDns_ThrowsWebException\" (#31147) at dotnet/corefx","RelatedBody":"Opened on behalf of @Sunny-pu\n\nThe test `System.Net.Tests.HttpWebRequestTest/GetResponseAsync_ServerNameNotInDns_ThrowsWebException` has failed.\n\nAssert.Equal() Failure\\r\n    Expected: NameResolutionFailure\\r\n    Actual:   UnknownError\n\n        Stack Trace:\n\n           at System.Net.Tests.HttpWebRequestTest.GetResponseAsync_ServerNameNotInDns_ThrowsWebException() in E:\\A\\_work\\5\\s\\corefx\\src\\System.Net.Requests\\tests\\HttpWebRequestTest.cs:line 1246\n    --- End of stack trace from previous location where exception was thrown ---\nBuild : Master - 20180718.01 (Core Tests)\nFailing configurations:\n- Windows.7.Amd64-x86\n  - Release\n- Windows.7.Amd64-x64\n  - Release\n\nDetails: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180718.01/workItem/System.Net.Requests.Tests/analysis/xunit/System.Net.Tests.HttpWebRequestTest~2FGetResponseAsync_ServerNameNotInDns_ThrowsWebException"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7992972197","Type":"PullRequestEvent","CreatedAt":"2018-07-20T05:10:27","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28669","RelatedDescription":"Merged pull request \"Replace Nonshipping property with IsShipping\" (#28669) at dotnet/roslyn","RelatedBody":"RepoToolset uses `IsShipping` property.\r\nTest projects do not need to specify, they are automatically non-shipping.\r\n\r\nInfrastructure only."},{"Id":"7992806550","Type":"PullRequestEvent","CreatedAt":"2018-07-20T03:55:11","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28724","RelatedDescription":"Merged pull request \"Merge dev15.8.x to dev15.8.x-vs-deps\" (#28724) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.8.x into dev15.8.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.8.x-to-dev15.8.x-vs-deps\ngit reset --hard upstream/dev15.8.x-vs-deps\ngit merge upstream/dev15.8.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.8.x-to-dev15.8.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7992606317","Type":"PullRequestEvent","CreatedAt":"2018-07-20T02:34:21","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28724","RelatedDescription":"Opened pull request \"Merge dev15.8.x to dev15.8.x-vs-deps\" (#28724) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.8.x into dev15.8.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.8.x-to-dev15.8.x-vs-deps\ngit reset --hard upstream/dev15.8.x-vs-deps\ngit merge upstream/dev15.8.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.8.x-to-dev15.8.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7992759616","Type":"IssuesEvent","CreatedAt":"2018-07-20T03:35:03","Actor":"akinohana","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/6123","RelatedDescription":"Reopened issue \"[Possibile bug]Process hang after GC called SuspendAllThreads then pause itself\" (#6123) at dotnet/corert","RelatedBody":"After running for few minutes, I noticed program will hang because of GC Called at SuspendAllThreads then pause itself.\r\n\r\npossible issue  https://github.com/dotnet/corert/issues/2474 in Windows platform  because I see RhpGcProbeHijackScalar in another thread  stuck at 00007FF70CEB2660  mov         edx,dword ptr [_tls_index (07FF70D930BFCh)]    which means it have something to do with TLS?\r\n\r\n\r\n\r\ncorert version: corert_1877195\r\n\r\n```\r\nThread Stack for  SuspendAllThreads\r\n>\tAkiClient.exe!ThreadStore::SuspendAllThreads(CLREventStatic * pCompletionEvent, bool fireDebugEvent) Line 286\tC++\r\n \tAkiClient.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35147\tC++\r\n \tAkiClient.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\tC++\r\n \t[Inline Frame] AkiClient.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\tC++\r\n \t[Inline Frame] AkiClient.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\tC++\r\n \tAkiClient.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\tC++\r\n \tAkiClient.exe!RhpNewArrayRare() Line 245\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_Utilities_BufferUtils__RentBuffer\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonTextReader__EnsureBuffer\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonTextReader__Read\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonReader__ReadAndMoveToContent\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonReader__ReadForType\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_Serialization_JsonSerializerInternalReader__Deserialize\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonSerializer__DeserializeInternal\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonSerializer__Deserialize_2\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_6\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_4<System___Canon>\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_2<System___Canon>\u001e()\tUnknown\r\n\r\n\r\n\r\n```\r\n\r\nFull Process thread state\r\n\r\n```\r\nNot Flagged\t\t16944\t0\tWorker Thread\tAkiClient.exe!FinalizerStart\t[Inline Frame] AkiClient.exe!PalWaitForSingleObjectExNot Flagged\t>\t68796\t0\tMain Thread\tMain Thread\tAkiClient.exe!AkiClient_AkiClient_AkiUnitTest__Test3\r\nNot Flagged\t\t72208\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!PalCompatibleWaitAny\r\nNot Flagged\t\t72604\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!PalCompatibleWaitAny\r\nNot Flagged\t\t72520\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!PalCompatibleWaitAny\r\nNot Flagged\t\t6948\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!ThreadStore::SuspendAllThreads\r\nNot Flagged\t\t50860\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tmswsock.dll!00007fff41b96a42\r\nNot Flagged\t\t32756\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t69216\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72428\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72600\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72616\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72400\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t68104\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\n\r\n\r\n```\r\n\r\n\r\nRhpGcProbeHijackScalar in another thread:\r\n\r\n\r\n```\r\n \tAkiClient.exe!AkiClient_AkiClient_AkiUnitTest__Test3() Line 83\tUnknown\r\n>\tAkiClient.exe!RhpGcProbeHijackScalar() Line 153\tUnknown\r\n \tAkiClient.exe!00007ff70d920d48()\tUnknown\r\n \tAkiClient.exe!00007ff70d920d58()\tUnknown\r\n\r\n\r\n```\r\n\r\n```\r\n--- e:\\a\\_work\\73\\s\\corert_1877195\\src\\native\\runtime\\typemanager.cpp ----------\r\n00007FF70CEB2650  mov         al,1  \r\n00007FF70CEB2652  ret  \r\n--- No source file -------------------------------------------------------------\r\n00007FF70CEB2653  int         3  \r\n00007FF70CEB2654  int         3  \r\n00007FF70CEB2655  int         3  \r\n00007FF70CEB2656  int         3  \r\n00007FF70CEB2657  int         3  \r\n00007FF70CEB2658  int         3  \r\n00007FF70CEB2659  int         3  \r\n00007FF70CEB265A  int         3  \r\n00007FF70CEB265B  int         3  \r\n00007FF70CEB265C  int         3  \r\n00007FF70CEB265D  int         3  \r\n00007FF70CEB265E  int         3  \r\n00007FF70CEB265F  int         3  \r\n--- E:\\A\\_work\\73\\s\\corert_1877195\\src\\Native\\Runtime\\amd64\\GcProbe.asm --------\r\n00007FF70CEB2660  mov         edx,dword ptr [_tls_index (07FF70D930BFCh)]   //Stuck at here\r\n00007FF70CEB2666  mov         rcx,qword ptr gs:[58h]  \r\n00007FF70CEB266F  mov         rcx,qword ptr [rcx+rdx*8]  \r\n00007FF70CEB2673  mov         edx,20h  \r\n00007FF70CEB2678  add         rdx,rcx  \r\n00007FF70CEB267B  mov         rcx,qword ptr [rdx+70h]  \r\n00007FF70CEB267F  push        rcx  \r\n00007FF70CEB2680  xor         ecx,ecx  \r\n00007FF70CEB2682  mov         qword ptr [rdx+68h],rcx  \r\n00007FF70CEB2686  mov         qword ptr [rdx+70h],rcx  \r\n00007FF70CEB268A  mov         ecx,80F7h  \r\n00007FF70CEB268F  jmp         RhpGcProbe (07FF70CEB2720h)  \r\n--- No source file -------------------------------------------------------------\r\n00007FF70CEB2694  nop         word ptr [rax+rax]  \r\n--- E:\\A\\_work\\73\\s\\corert_1877195\\src\\Native\\Runtime\\amd64\\GcProbe.asm --------\r\n00007FF70CEB26A0  mov         edx,dword ptr [_tls_index (07FF70D930BFCh)]  \r\n00007FF70CEB26A6  mov         rcx,qword ptr gs:[58h]  \r\n00007FF70CEB26AF  mov         rcx,qword ptr [rcx+rdx*8]  \r\n00007FF70CEB26B3  mov         edx,20h  \r\n\r\n```"},{"Id":"7992756675","Type":"IssuesEvent","CreatedAt":"2018-07-20T03:33:47","Actor":"akinohana","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6123","RelatedDescription":"Closed issue \"[Possibile bug]Process hang after GC called SuspendAllThreads then pause itself\" (#6123) at dotnet/corert","RelatedBody":"After running for few minutes, I noticed program will hang because of GC Called at SuspendAllThreads then pause itself.\r\n\r\npossible issue  https://github.com/dotnet/corert/issues/2474 in Windows platform  because I see RhpGcProbeHijackScalar in another thread  stuck at 00007FF70CEB2660  mov         edx,dword ptr [_tls_index (07FF70D930BFCh)]    which means it have something to do with TLS?\r\n\r\n\r\n\r\ncorert version: corert_1877195\r\n\r\n```\r\nThread Stack for  SuspendAllThreads\r\n>\tAkiClient.exe!ThreadStore::SuspendAllThreads(CLREventStatic * pCompletionEvent, bool fireDebugEvent) Line 286\tC++\r\n \tAkiClient.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35147\tC++\r\n \tAkiClient.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\tC++\r\n \t[Inline Frame] AkiClient.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\tC++\r\n \t[Inline Frame] AkiClient.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\tC++\r\n \tAkiClient.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\tC++\r\n \tAkiClient.exe!RhpNewArrayRare() Line 245\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_Utilities_BufferUtils__RentBuffer\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonTextReader__EnsureBuffer\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonTextReader__Read\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonReader__ReadAndMoveToContent\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonReader__ReadForType\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_Serialization_JsonSerializerInternalReader__Deserialize\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonSerializer__DeserializeInternal\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonSerializer__Deserialize_2\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_6\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_4<System___Canon>\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_2<System___Canon>\u001e()\tUnknown\r\n\r\n\r\n\r\n```\r\n\r\nFull Process thread state\r\n\r\n```\r\nNot Flagged\t\t16944\t0\tWorker Thread\tAkiClient.exe!FinalizerStart\t[Inline Frame] AkiClient.exe!PalWaitForSingleObjectExNot Flagged\t>\t68796\t0\tMain Thread\tMain Thread\tAkiClient.exe!AkiClient_AkiClient_AkiUnitTest__Test3\r\nNot Flagged\t\t72208\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!PalCompatibleWaitAny\r\nNot Flagged\t\t72604\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!PalCompatibleWaitAny\r\nNot Flagged\t\t72520\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!PalCompatibleWaitAny\r\nNot Flagged\t\t6948\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tAkiClient.exe!ThreadStore::SuspendAllThreads\r\nNot Flagged\t\t50860\t0\tWorker Thread\tAkiClient.exe!S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint\u001e()\tmswsock.dll!00007fff41b96a42\r\nNot Flagged\t\t32756\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t69216\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72428\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72600\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72616\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t72400\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\nNot Flagged\t\t68104\t0\tWorker Thread\tntdll.dll thread\tntdll.dll!00007fff4609d804\r\n\r\n\r\n```\r\n\r\n\r\nRhpGcProbeHijackScalar in another thread:\r\n\r\n\r\n```\r\n \tAkiClient.exe!AkiClient_AkiClient_AkiUnitTest__Test3() Line 83\tUnknown\r\n>\tAkiClient.exe!RhpGcProbeHijackScalar() Line 153\tUnknown\r\n \tAkiClient.exe!00007ff70d920d48()\tUnknown\r\n \tAkiClient.exe!00007ff70d920d58()\tUnknown\r\n\r\n\r\n```\r\n\r\n```\r\n--- e:\\a\\_work\\73\\s\\corert_1877195\\src\\native\\runtime\\typemanager.cpp ----------\r\n00007FF70CEB2650  mov         al,1  \r\n00007FF70CEB2652  ret  \r\n--- No source file -------------------------------------------------------------\r\n00007FF70CEB2653  int         3  \r\n00007FF70CEB2654  int         3  \r\n00007FF70CEB2655  int         3  \r\n00007FF70CEB2656  int         3  \r\n00007FF70CEB2657  int         3  \r\n00007FF70CEB2658  int         3  \r\n00007FF70CEB2659  int         3  \r\n00007FF70CEB265A  int         3  \r\n00007FF70CEB265B  int         3  \r\n00007FF70CEB265C  int         3  \r\n00007FF70CEB265D  int         3  \r\n00007FF70CEB265E  int         3  \r\n00007FF70CEB265F  int         3  \r\n--- E:\\A\\_work\\73\\s\\corert_1877195\\src\\Native\\Runtime\\amd64\\GcProbe.asm --------\r\n00007FF70CEB2660  mov         edx,dword ptr [_tls_index (07FF70D930BFCh)]   //Stuck at here\r\n00007FF70CEB2666  mov         rcx,qword ptr gs:[58h]  \r\n00007FF70CEB266F  mov         rcx,qword ptr [rcx+rdx*8]  \r\n00007FF70CEB2673  mov         edx,20h  \r\n00007FF70CEB2678  add         rdx,rcx  \r\n00007FF70CEB267B  mov         rcx,qword ptr [rdx+70h]  \r\n00007FF70CEB267F  push        rcx  \r\n00007FF70CEB2680  xor         ecx,ecx  \r\n00007FF70CEB2682  mov         qword ptr [rdx+68h],rcx  \r\n00007FF70CEB2686  mov         qword ptr [rdx+70h],rcx  \r\n00007FF70CEB268A  mov         ecx,80F7h  \r\n00007FF70CEB268F  jmp         RhpGcProbe (07FF70CEB2720h)  \r\n--- No source file -------------------------------------------------------------\r\n00007FF70CEB2694  nop         word ptr [rax+rax]  \r\n--- E:\\A\\_work\\73\\s\\corert_1877195\\src\\Native\\Runtime\\amd64\\GcProbe.asm --------\r\n00007FF70CEB26A0  mov         edx,dword ptr [_tls_index (07FF70D930BFCh)]  \r\n00007FF70CEB26A6  mov         rcx,qword ptr gs:[58h]  \r\n00007FF70CEB26AF  mov         rcx,qword ptr [rcx+rdx*8]  \r\n00007FF70CEB26B3  mov         edx,20h  \r\n\r\n```"},{"Id":"7992719036","Type":"IssuesEvent","CreatedAt":"2018-07-20T03:18:20","Actor":"akinohana","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6123","RelatedDescription":"Opened issue \"Process hang after GC called SuspendAllThreads then pause itself\" (#6123) at dotnet/corert","RelatedBody":"After running for few minutes , I noticed program will hang because of GC Stuck at SuspendAllThreads\r\n\r\n```\r\n\r\n>\tAkiClient.exe!ThreadStore::SuspendAllThreads(CLREventStatic * pCompletionEvent, bool fireDebugEvent) Line 286\tC++\r\n \tAkiClient.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35147\tC++\r\n \tAkiClient.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\tC++\r\n \t[Inline Frame] AkiClient.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\tC++\r\n \t[Inline Frame] AkiClient.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\tC++\r\n \tAkiClient.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\tC++\r\n \tAkiClient.exe!RhpNewArrayRare() Line 245\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_Utilities_BufferUtils__RentBuffer\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonTextReader__EnsureBuffer\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonTextReader__Read\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonReader__ReadAndMoveToContent\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonReader__ReadForType\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_Serialization_JsonSerializerInternalReader__Deserialize\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonSerializer__DeserializeInternal\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonSerializer__Deserialize_2\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_6\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_4<System___Canon>\u001e()\tUnknown\r\n \tAkiClient.exe!Newtonsoft_Json_Newtonsoft_Json_JsonConvert__DeserializeObject_2<System___Canon>\u001e()\tUnknown\r\n\r\n\r\n\r\n```\r\n\r\n\r\n\r\n"},{"Id":"7992484227","Type":"IssuesEvent","CreatedAt":"2018-07-20T01:46:04","Actor":"akinohana","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6122","RelatedDescription":"Opened issue \"Struct 'PERF_DATA_BLOCK' requires non-trivial marshalling that is not yet supported by this compiler.\" (#6122) at dotnet/corert","RelatedBody":"Just trying to read current memory usage information via Windows API however, it seems this struct is not implemented. \r\n\r\nI did some search about this and it seems to need to modify src/Common/src/TypeSystem/Interop/IL/Marshaller.cs ,  however, I am not sure how to implement this and make it a new ilc.exe\r\n\r\nany guide about how to implement this or any other workaround will be appreciated!\r\n\r\n\r\n\r\n`\t    [DllImport(\"psapi.dll\", SetLastError = true)]\r\n\t    [return: MarshalAs(UnmanagedType.Bool)]\r\n\t    public static extern bool GetPerformanceInfo([Out] out PerformanceInformation PerformanceInformation, [In] int Size);\r\n\r\n\t    [StructLayout(LayoutKind.Sequential)]\r\n\t    public struct PerformanceInformation\r\n\t    {\r\n\t\t    public int Size;\r\n\t\t    public IntPtr CommitTotal;\r\n\t\t    public IntPtr CommitLimit;\r\n\t\t    public IntPtr CommitPeak;\r\n\t\t    public IntPtr PhysicalTotal;\r\n\t\t    public IntPtr PhysicalAvailable;\r\n\t\t    public IntPtr SystemCache;\r\n\t\t    public IntPtr KernelTotal;\r\n\t\t    public IntPtr KernelPaged;\r\n\t\t    public IntPtr KernelNonPaged;\r\n\t\t    public IntPtr PageSize;\r\n\t\t    public int HandlesCount;\r\n\t\t    public int ProcessCount;\r\n\t\t    public int ThreadCount;\r\n\t    }\r\n\r\n\t    public static Int64 GetPhysicalAvailableMemoryInMiB()\r\n\t    {\r\n\t\t    PerformanceInformation pi = new PerformanceInformation();\r\n\t\t    if (GetPerformanceInfo(out pi, Marshal.SizeOf(pi)))\r\n\t\t    {\r\n\t\t\t    return Convert.ToInt64((pi.PhysicalAvailable.ToInt64() * pi.PageSize.ToInt64() / 1048576));\r\n\t\t    }\r\n\t\t    else\r\n\t\t    {\r\n\t\t\t    return -1;\r\n\t\t    }\r\n\r\n\t    }\r\n\r\n\t    public static Int64 GetTotalMemoryInMiB()\r\n\t    {\r\n\t\t    PerformanceInformation pi = new PerformanceInformation();\r\n\t\t    if (GetPerformanceInfo(out pi, Marshal.SizeOf(pi)))\r\n\t\t    {\r\n\t\t\t    return Convert.ToInt64((pi.PhysicalTotal.ToInt64() * pi.PageSize.ToInt64() / 1048576));\r\n\t\t    }\r\n\t\t    else\r\n\t\t    {\r\n\t\t\t    return -1;\r\n\t\t    }\r\n\r\n\t    }`"},{"Id":"7992022130","Type":"PullRequestEvent","CreatedAt":"2018-07-19T22:47:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6113","RelatedDescription":"Closed pull request \"Add ILanguageExceptionStackBackTrace as WellKnown CCW interface\" (#6113) at dotnet/corert","RelatedBody":"The change will enable managed Exception always implicit implements ILanguageExceptionStackBackTrace when exception works as CCW in WinRT scenario for ProjectN.\r\n"},{"Id":"7992021590","Type":"PullRequestEvent","CreatedAt":"2018-07-19T22:47:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6121","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6121) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7992017204","Type":"PullRequestEvent","CreatedAt":"2018-07-19T22:46:10","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6121","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6121) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7991479658","Type":"PullRequestEvent","CreatedAt":"2018-07-19T20:35:21","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6120","RelatedDescription":"Opened pull request \"CorInfoImpl refactoring part #1\" (#6120) at dotnet/corert","RelatedBody":"1) Refactor ComputeLookup to pass around references to the\r\nCORINFO_RESOLVED_TOKEN instead of its tokenContext. This will be\r\nneeded in the next change to implement R2R variants of the methods.\r\n\r\n2) Add new CanInline method to the Compilation class to be used\r\nby CorInfoImpl to query inline-ability.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"7991421576","Type":"PullRequestEvent","CreatedAt":"2018-07-19T20:23:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6119","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6119) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7991415406","Type":"PullRequestEvent","CreatedAt":"2018-07-19T20:22:25","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6119","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6119) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7992378512","Type":"PullRequestEvent","CreatedAt":"2018-07-20T01:01:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2415","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.8.0-rtm.5348 into sdk\" (#2415) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-rtm.5348 into sdk release/2.1.4xx branch"},{"Id":"7992255706","Type":"IssuesEvent","CreatedAt":"2018-07-20T00:10:43","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2420","RelatedDescription":"Opened issue \"MicrosoftNETPlatformLibrary does not flow across ProjectReference\" (#2420) at dotnet/sdk","RelatedBody":"The value for the `MicrosoftNETPlatformLibrary` property does not flow across project references. This typically means that test projects will run on a shared framework that is different from the app they are testing.\r\n\r\nExample scenario:\r\n\r\n```\r\nsrc/WebApp.csproj\r\n\r\n\t<TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.1\" />\r\n\r\ntest/WebAppTests.csproj\r\n\r\n\t<TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"2.1.1\" />\r\n\t<ProjectReference Include=\"../src/WebApp.csproj\" />\r\n```\r\n\r\n* WebApp.runtimeconfig.json will contain `\"framework\": { \"name\": \"Microsoft.AspNetCore.App\", \"version\": \"2.1.1\" }`\r\n* WebAppTests.runtimeconfig.json contains `\"framework\": { \"name\": \"Microsoft.NETCore.App\", \"version\": \"2.1.0\" }`\r\n\r\nThe result is that WebAppTests will run ASP.NET Core binaries out of NuGet packages, but the WebApp will execute off a shared runtime. Because of patch and minor runtime rollforward, this can mean the tests are executing something very different than the app.\r\n\r\ncc @dsplaisted "},{"Id":"7991515815","Type":"IssuesEvent","CreatedAt":"2018-07-19T20:43:01","Actor":"rcamp48","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2419","RelatedDescription":"Opened issue \"Error\tCS5001\tProgram does not contain a static 'Main' method suitable for an entry point\tIDADOS Decompiler\" (#2419) at dotnet/sdk","RelatedBody":"I am trying to compile IDADOS with Visual Studio 2017 and when I run dosbox.cpp as the main project I get the error in the title above. How do I compile this program with Visual Studio 2017, I am totally new to this and would like to get IDADOS version of Dosbox compiled to an EXE file so I can recover the source code from my program, LOTTO54B,.EXE (compiled with QB45 20 years ago, source is long gone). Any help would be appreciated.  Russ Campbell\r\n[idados_dosbox-master.zip](https://github.com/dotnet/sdk/files/2211594/idados_dosbox-master.zip)\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1019942507344482305","CreatedAt":"2018-07-19T13:50:18+00:00","UserScreenname":"dotnet","Text":"Our @csharpfritz is hosting another workshop tomorrow, and his guest at 12 ET / 11 CT / 9 PT is @jbogard.  Tune in… https://t.co/0aqBYfhA08","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"1019598416861544453","CreatedAt":"2018-07-18T15:03:00+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is back for 2018! 3 days of free #dotnet #developer content streaming live around the globe. Save the d… https://t.co/tloJwxPMb9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":450,"FavoriteCount":308,"RawContent":null},{"Id":"1019283191507582981","CreatedAt":"2018-07-17T18:10:24+00:00","UserScreenname":"dotnet","Text":"Check out the replay and learn about building reusable business objects in your applications from @RockyLhotka and… https://t.co/VnbmnXt31C","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null},{"Id":"1019254182673436672","CreatedAt":"2018-07-17T16:15:08+00:00","UserScreenname":"dotnet","Text":"Code refactoring support in Visual Studio 2017 with @kuhlenhuth https://t.co/HkaG7b6Ac3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":26,"RawContent":null},{"Id":"1019207783844139010","CreatedAt":"2018-07-17T13:10:46+00:00","UserScreenname":"dotnet","Text":"Always a great time, and two experts that are wonderful to learn from.  Tune in at 10a ET / 7a PT / 14:00 UTC / 8p… https://t.co/PQsuqaJQY4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1018952801953681411","CreatedAt":"2018-07-16T20:17:33+00:00","UserScreenname":"dotnet","Text":"Rocky's got great insight into building Enterprise applications.  Be sure to tune in tomorrow when he pair-programs… https://t.co/cdQT99n8kk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"1018877434584817664","CreatedAt":"2018-07-16T15:18:04+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz will be hosting another one of his FREE workshops this Friday.  This week, tune in and learn about s… https://t.co/06laByebWA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":13,"RawContent":null},{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":21,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":109,"FavoriteCount":95,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":88,"FavoriteCount":78,"RawContent":null}]}},"RunOn":"2018-07-20T05:30:34.9568124Z","RunDurationInMilliseconds":8208}