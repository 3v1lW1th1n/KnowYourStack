{"Data":{"GitHub":{"Issues":[{"Id":"526934018","IsPullRequest":true,"CreatedAt":"2019-11-22T01:30:13","Actor":"maryamariyan","Number":"4496","RawContent":null,"Title":"Adds mlnet src and test projects from feature branch","State":"open","Body":"Adds mlnet src and test projects from features/automl into master branch\r\n\r\n- [ ] Add packaging for Microsoft.ML.CLI \r\n \r\n\r\ncc: @LittleLittleCloud @eerhardt ","Url":"https://github.com/dotnet/machinelearning/pull/4496","RelatedDescription":"Open PR \"Adds mlnet src and test projects from feature branch\" (#4496)"},{"Id":"526273043","IsPullRequest":false,"CreatedAt":"2019-11-21T23:16:55","Actor":"daholste","Number":"4491","RawContent":null,"Title":"Ignore hidden columns in AutoML schema checks of validation data","State":"closed","Body":"When the AutoML API consumes data, it validates schema consistency between the train and validation data.\r\n\r\nThere are two bugs in this logic:\r\n1. The API asserts that the count of columns in the train and validation data must be equal. This throws an exception if the two data views have the same number of active columns but a different number of hidden columns. This should be updated to assert that the # of active (not hidden) columns in the train and validation data are equal.\r\n\r\n2. If either the train or validation data has a hidden column with a type that differs from an active column of the same name, an exception is thrown. Type consistency checks should be restricted to active columns only.","Url":"https://github.com/dotnet/machinelearning/issues/4491","RelatedDescription":"Closed issue \"Ignore hidden columns in AutoML schema checks of validation data\" (#4491)"},{"Id":"526266701","IsPullRequest":true,"CreatedAt":"2019-11-21T23:16:55","Actor":"daholste","Number":"4490","RawContent":null,"Title":"Ignore hidden columns in AutoML schema checks of validation data","State":"closed","Body":"Closes #4491\r\n\r\nWhen the AutoML API consumes data, it validates schema consistency between the train and validation data.\r\n\r\nThere are two bugs in this logic:\r\n\r\n1. The API asserts that the count of columns in the train and validation data must be equal. This throws an exception if the two data views have the same number of active columns but a different number of hidden columns. This PR updates to assert that the # of active (not hidden) columns in the train and validation data are equal.\r\n\r\n2. If either the train or validation data has a hidden column with a type that differs from an active column of the same name, an exception is thrown. This PR restricts type consistency checks to active columns only.","Url":"https://github.com/dotnet/machinelearning/pull/4490","RelatedDescription":"Closed or merged PR \"Ignore hidden columns in AutoML schema checks of validation data\" (#4490)"},{"Id":"526885975","IsPullRequest":true,"CreatedAt":"2019-11-21T22:51:20","Actor":"frank-dong-ms","Number":"4495","RawContent":null,"Title":"Only for test - disable test parallelization ","State":"open","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4495","RelatedDescription":"Open PR \"Only for test - disable test parallelization \" (#4495)"},{"Id":"526770949","IsPullRequest":true,"CreatedAt":"2019-11-21T18:36:39","Actor":"ashbhandare","Number":"4494","RawContent":null,"Title":"Add SQL command timeout option to database loader.","State":"open","Body":"Fixes #4484 \r\n\r\nThis change adds a way to specify the SQL command timeout https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.commandtimeout?view=netframework-4.8\r\nwhile creating the DatabaseSource.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4494","RelatedDescription":"Open PR \"Add SQL command timeout option to database loader.\" (#4494)"},{"Id":"526660716","IsPullRequest":false,"CreatedAt":"2019-11-21T15:18:47","Actor":"eerhardt","Number":"4493","RawContent":null,"Title":"model saving can't handle datetime columns","State":"open","Body":"@FranzBl commented on [Wed Nov 20 2019](https://github.com/dotnet/machinelearning-samples/issues/746)\n\nSorry I couldn't answer earlier. To change column type of database, I had to change the program that generates it (in many places) and to setup a new database.\r\nIndeed with data type real instead of float the program works incl. evaluating, training etc. With one exception: Trying to save the model to a zip file for later use on end fails. Reason: One table column is type datetime (in SQL). During generation of the data view this is converted into string, and training works. Saving the model attempts to change these column data back from string to datetime, so an exception is thrown.\r\nIs this as should be? If model saving tries to reconstruct the original data types, so I think it should be able to parse a string as datetime.\r\nIn fact I could store the timestamps as simple strings in the database. But many database queries use datetime arithmetics, e. g. retrieving all data between two timestamps (SQL can do this very easy, while the date arithmetics on strings would be a little tricky).\r\n\r\n_Originally posted by @FranzBl in https://github.com/dotnet/machinelearning-samples/issues/744#issuecomment-556653945_\n\n","Url":"https://github.com/dotnet/machinelearning/issues/4493","RelatedDescription":"Open issue \"model saving can't handle datetime columns\" (#4493)"},{"Id":"526282350","IsPullRequest":true,"CreatedAt":"2019-11-21T05:22:19","Actor":"codemzs","Number":"4492","RawContent":null,"Title":"Disable tests on macOS that depend on GDI+ library.","State":"closed","Body":"Disabling bitmap related tests temporarily on macOS to unblock PRs that are stalled because macOS CI images don't seem to have GDI+ or related library.","Url":"https://github.com/dotnet/machinelearning/pull/4492","RelatedDescription":"Closed or merged PR \"Disable tests on macOS that depend on GDI+ library.\" (#4492)"},{"Id":"525965178","IsPullRequest":true,"CreatedAt":"2019-11-20T17:42:58","Actor":"antoniovs1029","Number":"4489","RawContent":null,"Title":"Test MacOS pipeline problem","State":"open","Body":"Do not approve this branch.\r\n\r\nIt's only meant for testing the problems with the MacOS pipeline\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4489","RelatedDescription":"Open PR \"Test MacOS pipeline problem\" (#4489)"},{"Id":"525343749","IsPullRequest":false,"CreatedAt":"2019-11-20T00:18:31","Actor":"aslotte","Number":"4488","RawContent":null,"Title":"Error loading Tensorflow Session in Jupyter Notebooks","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Home\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 3.0\r\n- **ML.NET Version**: v1.4.0.0\r\n### Issue\r\n\r\nI wasn't sure if this issue belonged in `/dotnet/try` or here, but I figured I start here as I think it may be ML.NET related.\r\n\r\n- **What did you do?** Ran a Transfer Learning sample in Jupyter Notebooks\r\n- **What happened?** Got an exception from Tensorflow loading the TF model\r\n- **What did you expect?** `.Fit()` to work as expected\r\n\r\n### Source code / logs\r\nSource code can be found here\r\nhttps://github.com/aslotte/mlnet-jupyter/blob/master/src/image%20classification.ipynb\r\n\r\nException:\r\n![image](https://user-images.githubusercontent.com/30201569/69198007-45ac1600-0b01-11ea-8500-76e5d3e2764d.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4488","RelatedDescription":"Open issue \"Error loading Tensorflow Session in Jupyter Notebooks\" (#4488)"},{"Id":"525111121","IsPullRequest":false,"CreatedAt":"2019-11-19T16:14:00","Actor":"mayoatte","Number":"4487","RawContent":null,"Title":"QuestionL Handling Comma Separated List Of Ids Per Row","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  3.0.0\r\n\r\n### Issue\r\n\r\n**I'm trying to use the FieldAwareFactorizationMachine for classification. One of my most important features is a list of comma separated ids e.g. \"3499430, 3499435, 34995430\" (these are ids of items in a shopping cart) that are passed in (as a single column) with each row in the dataset. \r\n\r\nI'm struggling with the right transformations to use on this column so that the feature can have the proper effect during training. So far i've only been able to use a OneHotHashEncoding but i'm not sure if that's right.  Seems like i should be splitting up the list and converting the values to keys and then to vectors but the resulting vectors do not have fixed sizes (which FFM requires). \r\n\r\nThe general idea is to classify if some other item goes with this shopping cart.\r\n\r\nCan you please help with some ideas on how to proceed?**\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4487","RelatedDescription":"Open issue \"QuestionL Handling Comma Separated List Of Ids Per Row\" (#4487)"},{"Id":"524674219","IsPullRequest":true,"CreatedAt":"2019-11-18T23:11:00","Actor":"harishsk","Number":"4486","RawContent":null,"Title":"Added onnx export support for CopyColumns","State":"open","Body":"Fixes #4218 ","Url":"https://github.com/dotnet/machinelearning/pull/4486","RelatedDescription":"Open PR \"Added onnx export support for CopyColumns\" (#4486)"},{"Id":"524652987","IsPullRequest":true,"CreatedAt":"2019-11-18T22:18:48","Actor":"antoniovs1029","Number":"4485","RawContent":null,"Title":"Fixes #4385 about calling the Create methods when loading models from disk","State":"open","Body":"Fixes #4385 \r\n\r\nAs concluded in the discussion there, if a class has both a constructor and a create method that matches the parameter types that the `ComponentCatalog `is looking for, then it should use the one which is public. If both are non-public, then it should use the internal one. If both have the same visibility then it should throw an exception.\r\n\r\nFor this to happen, I modified the `ComponentCatalog ` to work as described. I also had to change the visibility of several methods and constructors to work as described. Since, as per @yaeldekel 's instructions, the create method should be called instead of the constructor in all cases, then I did the following:\r\n1. For most classes, the case was that both the conflictive constructor and create method were private, so I simply made the create method internal.\r\n2. For LabelIndicatorTransform and SkipTakeFilter the conflictive constructors and create methods were public, so I made the constructors internal.\r\n3. For the following classes the constructor was internal, and the create method was private. In these cases I made the constructor private, and the create methods internal.\r\n\r\n```\r\nMicrosoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer\r\nMicrosoft.ML.Transforms.TimeSeries.IidChangePointDetector\r\nMicrosoft.ML.Transforms.TimeSeries.IidSpikeDetector\r\nMicrosoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetector\r\nMicrosoft.ML.Transforms.TimeSeries.SsaChangePointDetector\r\nMicrosoft.ML.Transforms.TimeSeries.SsaForecastingTransformer\r\nMicrosoft.ML.Transforms.TimeSeries.SsaSpikeDetector\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/4485","RelatedDescription":"Open PR \"Fixes #4385 about calling the Create methods when loading models from disk\" (#4485)"},{"Id":"522576606","IsPullRequest":true,"CreatedAt":"2019-11-18T21:16:55","Actor":"frank-dong-ms","Number":"4477","RawContent":null,"Title":"Only for test: open system diagnotise log","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4477","RelatedDescription":"Closed or merged PR \"Only for test: open system diagnotise log\" (#4477)"},{"Id":"524309265","IsPullRequest":false,"CreatedAt":"2019-11-18T11:34:46","Actor":"mayoatte","Number":"4484","RawContent":null,"Title":"Command Timeouts While Using The Database Loader","State":"open","Body":"### System information\r\n\r\n- **Windows 10**:\r\n- **.NET Core 3.0**: \r\n\r\n### Issue\r\n\r\n- Loaded training data from SQL Server (1m rows)\r\n- SqlException Execution timeout in less than a minute\r\n- The query should complete even if it's slow (based on volume). There should also be a way to modify the sql command timeout.\r\n\r\n### Source code / logs\r\n\r\n`          string connectionString = _config[\"Database.ConnectionString\"];\r\n\r\n            string sqlCommand = await GetSql(\"OrderHistory.sql\");\r\n\r\n            DatabaseSource dbSource = new DatabaseSource(SqlClientFactory.Instance, connectionString, sqlCommand);\r\n\r\n            return dbSource;`","Url":"https://github.com/dotnet/machinelearning/issues/4484","RelatedDescription":"Open issue \"Command Timeouts While Using The Database Loader\" (#4484)"},{"Id":"523872970","IsPullRequest":false,"CreatedAt":"2019-11-16T17:35:35","Actor":"samcode22","Number":"4483","RawContent":null,"Title":"Unable to Load CpuMathNative","State":"open","Body":"Exception thrown: 'System.DllNotFoundException' in Microsoft.ML.CpuMath.dll\r\nAn exception of type 'System.DllNotFoundException' occurred in Microsoft.ML.CpuMath.dll but was not handled in user code\r\nUnable to load DLL 'CpuMathNative': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n\r\nthe above error is shown at this line:\r\n            ModelOutput result = predEngine.Predict(input);\r\n\r\n\r\ntrying to implement sentimental analysis on input comments in ASP.NET WEB APPLICATION(.NET FRAMEWORK) but getting these error even though it is seen in solution explorer.\r\nSolution platform is AnyCPU.also tried x64,x86 but no change.\r\nIs there any other solution?\r\n\r\n_Originally posted by @samcode22 in https://github.com/dotnet/machinelearning/issues/3764#issuecomment-554657340_","Url":"https://github.com/dotnet/machinelearning/issues/4483","RelatedDescription":"Open issue \"Unable to Load CpuMathNative\" (#4483)"},{"Id":"523274691","IsPullRequest":false,"CreatedAt":"2019-11-16T00:01:35","Actor":"kevencarneiro","Number":"4480","RawContent":null,"Title":"LoadColumn should not be required when loading from a file with headers","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 (10.0.18362)\r\n- **.NET Version (eg., dotnet --info)**:  3.0.100\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCreated a type anottated with `LoadColumnName`\r\nCreated a `TextLoader` from this type and `useHeaders` set to `true` and called the `Load` method\r\n\r\n- **What happened?**\r\nSystem.InvalidOperationException: 'Property 'IESCode' is missing the LoadColumnAttribute attribute'\r\n\r\n- **What did you expect?**\r\nThe Load method should map the properties from the file headers when available, not forcing the use of column index.\r\n\r\n### Source code / logs\r\n\r\n```fsharp\r\nSystem.InvalidOperationException: 'Property 'IESCode' is missing the LoadColumnAttribute attribute'\r\n```\r\n\r\n```fsharp\r\ntype EnadeMicrodata =\r\n    {\r\n        [<LoadColumnName(\"CO_IES\")>]\r\n        IESCode: int\r\n\r\n        [<LoadColumnName(\"CO_CATEGAD\")>]\r\n        AdministrativeCategory: int\r\n    }\r\n\r\nlet mlContext = MLContext ()\r\nlet _textLoader = mlContext.Data.CreateTextLoader<EnadeMicrodata>(hasHeader = true).Load(\"MICRODADOS_ENADE_2017.txt\")\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4480","RelatedDescription":"Closed issue \"LoadColumn should not be required when loading from a file with headers\" (#4480)"},{"Id":"521641647","IsPullRequest":false,"CreatedAt":"2019-11-15T22:07:50","Actor":"apilatau","Number":"4469","RawContent":null,"Title":"problems with retraining model","State":"closed","Body":"### System information\r\n\r\n- **Windows10**:\r\n- **Microsoft.NetCore.App(2.1.0)/Microsoft.ML(1.4.0)**: \r\n\r\n### Issue \r\nit is observed\r\n**System.ArgumentOutOfRangeException:** '_Features column 'Feature' not found by_  <mlContext.Model.CreatePredictionEngine> _call after retraining the model_\r\n \r\n- **What did you do?**\r\nWe need to retrain a model with small increment of data in comparison with previously retrained dataset based on the example project **TaxiFarePrediction** https://github.com/dotnet/machinelearning-samples based on the steps, described in on the page https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net\r\nWe have undertaken the following steps to retrain the model with small increment (10 rows addition, as example) of data:\r\n1) rewrite the function `BuildTrainEvaluateAndSaveModel` in order to save datapreparation pipeline and trained model\r\n` var dataPrepTransformer = trainingPipeline.Fit(trainingDataView);\r\nIDataView predictions = dataPrepTransformer.Transform(testDataView);\r\nvar sdcaEstimator = mlContext.Regression.Trainers.Sdca();\r\nRegressionPredictionTransformer<LinearRegressionModelParameters> trainedModel = sdcaEstimator.Fit(predictions);\r\nmlContext.Model.Save(dataPrepTransformer, trainingDataView.Schema, Data_PreparationModelPath);\r\n mlContext.Model.Save(trainedModel, predictions.Schema, ModelPath);\r\n`\r\n2) load pretrained model \r\n`var dataPrevPipeline = mlContext.Model.Load(Data_PreparationModelPath, out var dataPrepPipelineSchema);\r\nITransformer trainedModel = mlContext.Model.Load(ModelPath, out modelSchema);`\r\n\r\n3) Extract pretrained model parameters\r\n` LinearRegressionModelParameters originalModelParameters =\r\n                ((ISingleFeaturePredictionTransformer<object>)trainedModel).Model as LinearRegressionModelParameters;`\r\n4) and finally, retrain model just only with small obfuscated data. It doesn't matter what, but it matter the amount in comparison with the whole previous dataset \r\n```\r\nTaxiTrip[] newTaxiTripsData = new TaxiTrip[10];\r\n for (var i = 0; i < 10; i++)\r\n {\r\n      newTaxiTripsData[i] = new TaxiTrip()\r\n      {\r\n                    VendorId = \"VTS\",\r\n                    RateCode = \"1\",\r\n                    PassengerCount = 1,\r\n                    TripTime = 1140,\r\n                    TripDistance = 3.75f,\r\n                    PaymentType = \"CRD\",\r\n                    FareAmount = 0 // To predict. Actual/Observed = 15.5\r\n                };\r\n        }\r\n\r\nIDataView newData = mlContext.Data.LoadFromEnumerable<TaxiTrip>(newTaxiTripsData);            \r\n // Preprocess Data\r\n IDataView transformedNewData = dataPrevPipeline.Transform(newData);\r\n // Retrain model\r\n RegressionPredictionTransformer<LinearRegressionModelParameters> retrainedModel =\r\n mlContext.Regression.Trainers.OnlineGradientDescent(\"Label\", featureColumnName: \"Features\")\r\n                .Fit(transformedNewData, originalModelParameters);\r\nmlContext.Model.Save(retrainedModel, modelSchema, ModelPathAfterRetrain);\r\n```\r\n\r\n- **What happened?**\r\nWhen we had a go at testing a single prediction, the call of creating prediction engine \r\n\r\n```\r\nITransformer trainedModel = mlContext.Model.Load(ModelPathAfterRetrain, out modelSchema);\r\n\r\nvar predEngine = mlContext.Model.CreatePredictionEngine<TaxiTrip, TaxiTripFarePrediction>(trainedModel); \r\n```\r\n<---_this call_\r\n\r\nthrows a _System.ArgumentOutOfRangeException_ - Features column 'Feature' not found by_  <mlContext.Model.CreatePredictionEngine>\r\n\r\nCould you ask what wrong I did with the retraining?\r\nThankful in advance,\r\nAlex\r\n\r\n- **guessworks**\r\n1) I have a feeling that something wrong with my trained model files  `model_after_retrain.zip` and the same `model.zip` which was saved after datapreparation pipeline and has significant smaller size `data_preparation_pipeline.zip`\r\nhttps://github.com/apilatau/retraining-example/tree/master/TaxiFarePrediction/MLModels\r\n2) Maybe, increment / ingection of small amount of data in previously trained  model is impossible at all and we have to retain the model every time from scratch with sufficient data set ( I have investigated the count is about thousands rows, but not 10 \r\n\r\n### Source code / logs\r\nhttps://github.com/apilatau/retraining-example/blob/master/TaxiFarePrediction/TaxiFarePredictionConsoleApp/Program.cs\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4469","RelatedDescription":"Closed issue \"problems with retraining model\" (#4469)"},{"Id":"522936921","IsPullRequest":false,"CreatedAt":"2019-11-15T20:42:51","Actor":"donaldhessing","Number":"4478","RawContent":null,"Title":"OnnxTransformer fails running on GPU","State":"closed","Body":"I'm trying to detect objects in images by using an exported ONNX model from Custom Vision on GPU but getting the following exception:\r\n\r\nSystem.EntryPointNotFoundException: 'Unable to find an entry point named 'OrtSessionOptionsAppendExecutionProvider_CUDA' in DLL 'onnxruntime'.'\r\n\r\nBased on the documentation the ApplyOnnxModel method provides an overload for GPU:\r\npublic static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string modelFile, Nullable gpuDeviceId = null, bool fallbackToCpu = false);\r\n\r\nThe model works perfectly fine when using the CPU, but when the gpuDeviceID and fallbackToCpu parameters are provided it fails with the above execption. I understand that for the OnnxRuntime to support GPU you need to also install the ML.OnnxRuntime.GPU nuget package but i noticed that ML.OnnxTransformer has a dependency with ML.OnnxRuntime 0.5.1.\r\n\r\n**Enviroment:**\r\nOS Platform: Windows 10 professional build 1809\r\nONNX Runtime: 1.4.0 and has dependency with ML.OnnxRuntime 0.5.1, tried ML.OnnxRuntime.GPU 1.0.0 but need OnnxTransformer.\r\nPlatform: .NET Core 3.0\r\nVisual Studio version (if applicable): 2019\r\nCUDA/cuDNN version: CUDA 10.0.130, cuDNN 7.6.0.34\r\nGPU model and memory: NVidia Quadro P1000\r\n\r\n**Failing code:**\r\nvar pipeline = mlContext.Transforms.ResizeImages(resizing: ImageResizingEstimator.ResizingKind.Fill, outputColumnName: onnxModel.ModelInput, imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: nameof(ImageInputData.Image))\r\n.Append(mlContext.Transforms.ExtractPixels(outputColumnName: onnxModel.ModelInput))\r\n.Append(mlContext.Transforms.ApplyOnnxModel(onnxModel.ModelOutput, onnxModel.ModelInput, onnxModel.ModelPath, 1, true));\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4478","RelatedDescription":"Closed issue \"OnnxTransformer fails running on GPU\" (#4478)"},{"Id":"523620077","IsPullRequest":false,"CreatedAt":"2019-11-15T18:23:14","Actor":"eerhardt","Number":"4482","RawContent":null,"Title":"Replace usages of TPL DataFlow BufferBlock with Threading.Channels","State":"open","Body":"There are 2 places we are using `BufferBlock<T>` today:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/b7db4fa475ba4bd52824eb98bbf5f5bf4a0a6f7a/src/Microsoft.ML.Data/Transforms/RowShufflingTransformer.cs#L486-L487\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/b7db4fa475ba4bd52824eb98bbf5f5bf4a0a6f7a/src/Microsoft.ML.Sweeper/AsyncSweeper.cs#L171\r\n\r\n\r\nWe should consider replacing this dependency with https://www.nuget.org/packages/System.Threading.Channels/ instead. Channels are a bit simpler, and more performant than BufferBlock.\r\n\r\nSee:\r\n\r\n* https://github.com/dotnet/machinelearning/pull/4479#discussion_r346845557\r\n* https://github.com/dotnet/corefx/issues/24715\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4482","RelatedDescription":"Open issue \"Replace usages of TPL DataFlow BufferBlock with Threading.Channels\" (#4482)"},{"Id":"523279423","IsPullRequest":true,"CreatedAt":"2019-11-15T06:21:31","Actor":"natke","Number":"4481","RawContent":null,"Title":"Improve key value mapping api docs","State":"open","Body":"We received many comments that the documentation for value to key mapping and the reverse is not clear, including this issue: https://github.com/dotnet/docs/issues/13590.\r\n\r\nThis PR attempts to address those concerns.\r\n\r\nPlease review with a focus in clarity for the user of this API:\r\n- what does this API do?\r\n- when would I use each of the different methods?\r\n- how does this API fit into the larger ML.NET framework?","Url":"https://github.com/dotnet/machinelearning/pull/4481","RelatedDescription":"Open PR \"Improve key value mapping api docs\" (#4481)"},{"Id":"523143103","IsPullRequest":true,"CreatedAt":"2019-11-14T22:34:20","Actor":"eerhardt","Number":"4479","RawContent":null,"Title":"Ensure BufferBlocks are completed and empty in RowShufflingTransformer.","State":"open","Body":"If BufferBlock doesn't get completed and drained of its items, it will have non-completed Tasks. When debugging in VS, this will appear to be a memory leak because VS adds all running Tasks to a static Dictionary, and then removes them when the Task is complete. If the Task doesn't get completed, it won't be removed from the Dictionary - thus it looks like a leak.\r\n\r\nNote there is no leak when the VS Debugger isn't attached because the non-completed Tasks don't get added to the static Dictionary.\r\n\r\nFix #4399","Url":"https://github.com/dotnet/machinelearning/pull/4479","RelatedDescription":"Open PR \"Ensure BufferBlocks are completed and empty in RowShufflingTransformer.\" (#4479)"},{"Id":"521828372","IsPullRequest":true,"CreatedAt":"2019-11-14T03:17:14","Actor":"harishsk","Number":"4472","RawContent":null,"Title":"Fixed model saving and loading of OneVersusAllTrainer to include SoftMax","State":"closed","Body":"When the model parameters from OnVersusAllTrainer are persisted, it currently writes a single bool byte to indicate what type of output formula to use during prediction. If that byte is false, it outputs raw values else it outputs probability values normalized to one. \r\nThe sample code in this bug uses AutoML to request a softmax output. The code currently only checks whether the output type is ImplDist which excludes softmax output.\r\n\r\nThis PR changes the saved model format in a backward compatible way by continuing to write a single byte for output type and continues to use 0 for raw output, 1 for probability normalization but also adds 2 to indicate SoftMax. These values are already in alignment with the OutputFormula enum.\r\n\r\nFixes #4450 \r\nFixes #3647\r\nFixes #4051 ","Url":"https://github.com/dotnet/machinelearning/pull/4472","RelatedDescription":"Closed or merged PR \"Fixed model saving and loading of OneVersusAllTrainer to include SoftMax\" (#4472)"},{"Id":"522239295","IsPullRequest":true,"CreatedAt":"2019-11-14T01:26:49","Actor":"JakeRadMSFT","Number":"4474","RawContent":null,"Title":"Add Model Builder's GPU version of the AutoMLService to the InternalsVisibleTo.","State":"closed","Body":"Add Model Builder's GPU version of the AutoMLService to the InternalsVisibleTo. This allows Model Builder to run AutoML and call into CodeGen.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4474","RelatedDescription":"Closed or merged PR \"Add Model Builder's GPU version of the AutoMLService to the InternalsVisibleTo.\" (#4474)"},{"Id":"522492190","IsPullRequest":true,"CreatedAt":"2019-11-13T21:48:32","Actor":"ashbhandare","Number":"4476","RawContent":null,"Title":"Add Entrypoint for ImageClassification Trainer.","State":"open","Body":"This change adds a NimbusML entrypoint to the ImageClassification Trainer. It modifies the ImageLoader transform to add an option to load in-memory images. This change also adds a unit test to test the entrypoint.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4476","RelatedDescription":"Open PR \"Add Entrypoint for ImageClassification Trainer.\" (#4476)"},{"Id":"522426246","IsPullRequest":true,"CreatedAt":"2019-11-13T19:32:24","Actor":"bpstark","Number":"4475","RawContent":null,"Title":"Change the dataset used for unit test to fix issue on Linux","State":"open","Body":"There is an issue with how some of the images were saved in the dataset\r\nsuch that they were not being read properly on linux. As such accuracy\r\nwas dramatically reduced given the small size of the dataset to begin\r\nwith. Have corrected the images and made a new dataset such that this\r\nissue should now be resolved.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4475","RelatedDescription":"Open PR \"Change the dataset used for unit test to fix issue on Linux\" (#4475)"},{"Id":"521768164","IsPullRequest":false,"CreatedAt":"2019-11-13T17:18:03","Actor":"leidadpig","Number":"4471","RawContent":null,"Title":"Is the TPE algo available in ML.NET?","State":"closed","Body":"Is the TPE algo available in ML.NET? Or is there any library available which implement TPE algo in C# to tune hyper params? Thanks!","Url":"https://github.com/dotnet/machinelearning/issues/4471","RelatedDescription":"Closed issue \"Is the TPE algo available in ML.NET?\" (#4471)"},{"Id":"522029773","IsPullRequest":false,"CreatedAt":"2019-11-13T08:12:32","Actor":"hahsm","Number":"4473","RawContent":null,"Title":"Issue with Label Column (Prediction Label)  - ML 1.4","State":"open","Body":"Hi. When I try to train a dataset that consists a unique sequential number column as the Label (Predicted Label) column, the train model fails. But when I change the Label Column to non-unique column, the model train succeeds. Why is this happening. I am using AutoML feature of ML.Net to train the Model.\r\n\r\nThank you","Url":"https://github.com/dotnet/machinelearning/issues/4473","RelatedDescription":"Open issue \"Issue with Label Column (Prediction Label)  - ML 1.4\" (#4473)"},{"Id":"521684409","IsPullRequest":false,"CreatedAt":"2019-11-12T17:16:49","Actor":"T3rr0rByte13","Number":"4470","RawContent":null,"Title":"ML.Net Type Load Exception","State":"closed","Body":"### System information\r\n-Windows 10 1903\r\n-.Net Framework 4.7.x\r\n-Microsoft.ML v1.4.0\r\n-Microsoft.ML.DNN v0.16.0 - preview 2\r\n\r\n### Issue\r\nI was using the code found in this video: https://www.youtube.com/watch?v=bXTN-rnwDso to get a test project up and running and ran into this error:\r\n\r\nSystem.TypeLoadException: 'Method 'MakeRowMapper' on type 'Microsoft.ML.Transforms.ImageClassificationTransformer' from assembly 'Microsoft.ML.DNN, version 1.0.0.0, culture=neutral, Public Key Token=cc7b13ffcd2ddd51' is overriding a method that is not visible from that assembly.\r\n\r\nThis occurs when using either a forms application or a console application, I have tried removing and re-adding the various NuGet packages and different verisons to try and get around this issue. It occurs on startup of the application.\r\n\r\n### Source code / logs\r\n\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var imagesFolder = Path.Combine(Environment.CurrentDirectory, \"..\", \"..\", \"..\", \"..\", \"images\");\r\n            var file = Directory.GetFiles(imagesFolder, \"*\", SearchOption.AllDirectories);\r\n            var images = file.Select(f => new ImageData\r\n            {\r\n                ImagePath = f,\r\n                Label = Directory.GetParent(f).Name\r\n            });\r\n\r\n            var context = new MLContext();\r\n\r\n            var imageData = context.Data.LoadFromEnumerable(images);\r\n            var imageDataShuffle = context.Data.ShuffleRows(imageData);\r\n            var testTrainData = context.Data.TrainTestSplit(imageDataShuffle, testFraction: 0.2);\r\n            var validateData = context.Transforms.Conversion.MapValueToKey(\"LabelKey\", \"Label\", keyOrdinality: Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue).Fit(testTrainData.TestSet).Transform(testTrainData.TestSet);\r\n            var pipeline = context.Transforms.Conversion.MapValueToKey(\"LabelKey\", \"Label\", keyOrdinality: Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue).Append(context.Model.ImageClassification(\"ImagePath\", \"LabelKey\", arch: Microsoft.ML.Transforms.ImageClassificationEstimator.Architecture.ResnetV2101, epoch: 100, metricsCallback: Console.WriteLine, batchSize: 10, validationSet: validateData));\r\n            var model = pipeline.Fit(testTrainData.TestSet);\r\n            var predictions = model.Transform(testTrainData.TestSet);\r\n            var metrics = context.MulticlassClassification.Evaluate(predictions, labelColumnName: \"LabelKey\", predictedLabelColumnName: \"PredictedLabel\");\r\n\r\n            Console.WriteLine($\"Log Loss - {metrics.LogLoss}\");\r\n\r\n            var predictionEngine = context.Model.CreatePredictionEngine<ImageData, Image_Prediction>(model);\r\n            var testImagesFolder = Path.Combine(Environment.CurrentDirectory, \"..\", \"..\", \"..\", \"test\");\r\n            var testFiles = Directory.GetFiles(testImagesFolder, \"*\", SearchOption.AllDirectories);\r\n            var testImages = testFiles.Select(f => new ImageData\r\n            {\r\n                ImagePath = f\r\n            });\r\n            VBuffer<ReadOnlyMemory<char>> keys = default;\r\n            predictionEngine.OutputSchema[\"LabelKey\"].GetKeyValues(ref keys);\r\n            var originalLabels = keys.DenseValues().ToArray();\r\n            foreach (var image in testImages)\r\n            {\r\n                var prediction = predictionEngine.Predict(image);\r\n                var labelIndex = prediction.PredictedLabel;\r\n                Console.WriteLine($\"Image: {Path.GetFileName(image.ImagePath)}, Score: {prediction.score.Max()}\" + $\"$Predicted Label: {originalLabels[labelIndex]}\");\r\n                Console.ReadLine();\r\n            }\r\n        }\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4470","RelatedDescription":"Closed issue \"ML.Net Type Load Exception\" (#4470)"},{"Id":"521132417","IsPullRequest":false,"CreatedAt":"2019-11-11T19:04:08","Actor":"vnarula","Number":"4468","RawContent":null,"Title":"FeatureContribution transformation currently returns vector of all feature and their contribution while calling PredictionEngine.Predict method ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nFeatureContribution transformation currently returns vector of all feature and their contribution while calling PredictionEngine.Predict method\r\n\r\n- **What happened?**\r\nReturned vector of 8 million feature which degraded the overall service of prediction service\r\n- **What did you expect?**\r\nit should only return the feature contribution of feature top x or bottom y which were requested instead of returning contribution of all features.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4468","RelatedDescription":"Open issue \"FeatureContribution transformation currently returns vector of all feature and their contribution while calling PredictionEngine.Predict method \" (#4468)"},{"Id":"521105913","IsPullRequest":false,"CreatedAt":"2019-11-11T18:02:28","Actor":"natke","Number":"4467","RawContent":null,"Title":"Resolve warnings in API docs generation","State":"open","Body":"Warnings listed here: https://opbuildstorageprod.blob.core.windows.net/report/2019%5C11%5C7%5C1a61acc2-fbc9-ceaf-75d3-cfca51e72d2c%5CCommit%5C201911071723275565-live%5Cworkflow_report.html?sv=2016-05-31&sr=b&sig=yltSQyLDqTJjXnrIiDqcLmJiQHS0zWN6WOn4PhKff%2FA%3D&st=2019-11-11T17%3A56%3A55Z&se=2019-12-12T18%3A01%3A55Z&sp=r","Url":"https://github.com/dotnet/machinelearning/issues/4467","RelatedDescription":"Open issue \"Resolve warnings in API docs generation\" (#4467)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-11-22T05:30:40.5669013Z","RunDurationInMilliseconds":745}