{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7375050767","Type":"IssuesEvent","CreatedAt":"2018-03-13T22:30:50","Actor":"pranavkm","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2956","RelatedDescription":"Opened issue \"[Diagnostics]: Add support for providing pdb sources for assemblies in DeveloperExceptionPage\" (#2956) at aspnet/Home","RelatedBody":"DeveloperExceptionPage has smarts to read portable pdbs for assemblies on disk. The bulk of this code lives in this type - https://github.com/aspnet/Common/blob/dev/shared/Microsoft.Extensions.StackTrace.Sources/StackFrame/PortablePdbReader.cs#L15. Unfortunately, this API does not have a way to support reading pdbs for assemblies that are not emitted to disk such as runtime compiled Razor Views. To provide a good developer exception page experience, we're consequently forced to produce views with full pdbs on desktop.\r\n\r\nOne solution to this would be to have a provider model for portable pdbs given an assembly. The default one looks at files on disk. Mvc's view compilation can register a second one which would provide pdbs for views that it compiled. This would allow us to continue producing the pdb of our choice without having to compromise the exception page experience."},{"Id":"7370050623","Type":"IssuesEvent","CreatedAt":"2018-03-13T06:38:50","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2953","RelatedDescription":"Closed issue \"OneDrive on the roadmap?\" (#2953) at aspnet/Home","RelatedBody":"_From @SQL-MisterMagoo on Tuesday, October 13, 2015 2:54:28 AM_\r\n\r\nHi, Just wondering if anyone is planning on implementing OneDrive webhooks into this project?\nThanks\n\r\n\r\n_Copied from original issue: aspnet/WebHooks#15_"},{"Id":"7370050393","Type":"IssuesEvent","CreatedAt":"2018-03-13T06:38:45","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2952","RelatedDescription":"Closed issue \"OneDrive on the roadmap?\" (#2952) at aspnet/Home","RelatedBody":"_From @SQL-MisterMagoo on Tuesday, October 13, 2015 2:54:28 AM_\r\n\r\nHi, Just wondering if anyone is planning on implementing OneDrive webhooks into this project?\nThanks\n\r\n\r\n_Copied from original issue: aspnet/WebHooks#15_"},{"Id":"7370024030","Type":"IssuesEvent","CreatedAt":"2018-03-13T06:30:20","Actor":"aspnet-hello","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2953","RelatedDescription":"Opened issue \"OneDrive on the roadmap?\" (#2953) at aspnet/Home","RelatedBody":"_From @SQL-MisterMagoo on Tuesday, October 13, 2015 2:54:28 AM_\r\n\r\nHi, Just wondering if anyone is planning on implementing OneDrive webhooks into this project?\nThanks\n\r\n\r\n_Copied from original issue: aspnet/WebHooks#15_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7376148301","Type":"IssuesEvent","CreatedAt":"2018-03-14T04:53:09","Actor":"Bohirjon","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1593","RelatedDescription":"Opened issue \"Need heelp: can't create an HubConnection client, targetting .net standart 2.0.\" (#1593) at aspnet/SignalR","RelatedBody":"Hey dears I'm new at signalR ineed ur help, can't create an HubConnection couse of there no implementation of IConnection i've installed  \"Microsoft.AspNetCore.SignalR.Client.Core version 1.0.0-preview1-final\"  into my .net standart 2.0, or should I create my own implementation if yes how, is there anyone have using client side targetting net standart 2.0? can u share that ? "}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7376218416","Type":"PullRequestEvent","CreatedAt":"2018-03-14T05:21:36","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7475","RelatedDescription":"Opened pull request \"Do not bind `\"[index]\"` in `CollectionModelBinder` subsetting feature\" (#7475) at aspnet/Mvc","RelatedBody":"- #7091\r\n- add `IKeyRewriterValueProvider` to remove rewritten keys or value providers containing such keys\r\n  - similar to `IBindingSourceValueProvider` except `CompositeValueProvider` keeps non-implementers around\r\n\r\nnits:\r\n- remove Linq use in `CompositeValueProvider`\r\n- do not create an unnecessary dictionary in `CompositeValueProvider.Filter(...)` methods"},{"Id":"7375520648","Type":"IssuesEvent","CreatedAt":"2018-03-14T00:57:46","Actor":"chgi","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7474","RelatedDescription":"Opened issue \"HttpContext obtained via IHttpContextAccessor (from DI) contains an empty user identity\" (#7474) at aspnet/Mvc","RelatedBody":"I hope this is the right place to post this. The issue seems to be somewhere between Mvc, Identity and DI.\r\n\r\n### Functional impact\r\nCan not obtain user info inside the DbContext Constuctor for use in QueryFilter.\r\n\r\n### Minimal repro steps\r\n\r\n1. In Visual Studio 2017 (v15.6.1) create a new Project\r\n2. Select ASP.NET Core Web Application\r\n3. Use settings: .Net Core, ASP.NET Core 2.1, Web Application, Individual User Accounts (Store user accounts in-app), uncheck Docker Support.\r\n   This should yield a project depending on Nuget Microsoft.AspNerCore.App 2.1.0-preview1-final and SDK Microsoft.NETCore.App 2.1.0-preview1-26216-03.\r\n4. Modify the /Data/ApplicationDbContext constructor to receive an IHttpContextAccessor (see below) \r\n5. Try to read user info from contextAccessor.HttpContext.User.Identity\r\n6. Start the app (IIS or Kestrel doesn't seem to matter)\r\n7. Create a user and login\r\n8. Put a breakpoint at the end of DbContext ctor and onto the get method of some page (e.g. About)\r\n9. Navigate to that page\r\n10. The breakpoint in DbContext will be hit first. Observe that _userName will always be null. The Identity seems to be an empty default identity\r\n11. The breakpoint in the page get method is hit. Observe, that the Page.HttpContext contains a populated instance of ClaimsPrincipal with the correct claims\r\n\r\n```\r\npublic class ApplicationDbContext : IdentityDbContext\r\n{\r\n    private readonly string _userName;\r\n        \r\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, IHttpContextAccessor contextAccessor)\r\n        : base(options)\r\n    {\r\n        var user = contextAccessor.HttpContext.User;\r\n        _userName = user.Identity.IsAuthenticated ? user.Identity.Name : null;\r\n    }\r\n}\r\n```\r\n\r\n### Expected result\r\nIn the DbContext ctor, Identity should be populated with claims for the currently logged in user (if logged in)\r\n\r\n### Actual result\r\nIn the DbContext ctor, Identiy seems to be empty no matter what, so _userName will always remain null.\r\n\r\n### Further technical details\r\nNo other changes where made to the project template\r\n\r\n"},{"Id":"7374781294","Type":"IssuesEvent","CreatedAt":"2018-03-13T21:29:08","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7465","RelatedDescription":"Reopened issue \"ActionDescription.BoundProperties not working as expected for FromQuery\" (#7465) at aspnet/Mvc","RelatedBody":"```cs\r\n[Route(\"api/values\")]\r\npublic class ValuesController : Controller\r\n{\r\n    [HttpGet]\r\n    [CustomMethodSelector]\r\n    public IActionResult Get([FromQuery] int? number)\r\n    {\r\n        return Ok(number);\r\n    }\r\n}\r\n\r\npublic class CustomMethodSelectorAttribute : ActionMethodSelectorAttribute\r\n{\r\n    public CustomMethodSelectorAttribute()\r\n    {\r\n    }\r\n\r\n    public override bool IsValidForRequest(RouteContext routeContext, ActionDescriptor action)\r\n    {\r\n        var boundProps = action.BoundProperties\r\n            .Select(x => x.Name)\r\n            .ToList();\r\n\r\n        Console.WriteLine($\"[{String.Join(\",\", boundProps)}]\");\r\n\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n`GET api/values`\r\n\\> []\r\n\r\n`GET api/values?number`\r\n\\> []\r\n\r\n`GET api/values?number=`\r\n\\> []\r\n\r\n`GET api/values?number=1`\r\n\\> []\r\n\r\nI'd expect it to be [], [number], [number], [number] respectively, or at least [number] on the last one judging how ASP.Net handles empty query values.\r\n\r\nDoes this only work for FromBody/FromForm?"},{"Id":"7373439407","Type":"PullRequestEvent","CreatedAt":"2018-03-13T17:16:17","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7473","RelatedDescription":"Opened pull request \"Use ParameterInfo for getting metadata of a parameter to show the corâ¦\" (#7473) at aspnet/Mvc","RelatedBody":"â¦rect information in ApiExplorer\r\n\r\n[Fixes #7435] 2.1-Preview 1: IsBindingRequired and IsRequired still false with RequiredAttribute on controller parameter."},{"Id":"7373422799","Type":"PullRequestEvent","CreatedAt":"2018-03-13T17:13:52","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7385","RelatedDescription":"Closed pull request \"Add ViewDataAttribute\" (#7385) at aspnet/Mvc","RelatedBody":"* Support ViewDataAttribute on controllers and Razor Page models\r\n* Share infrastructure between ViewDataAttribute and TempDataAttribute"},{"Id":"7373348260","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:43","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7465","RelatedDescription":"Closed issue \"ActionDescription.BoundProperties not working as expected for FromQuery\" (#7465) at aspnet/Mvc","RelatedBody":"```cs\r\n[Route(\"api/values\")]\r\npublic class ValuesController : Controller\r\n{\r\n    [HttpGet]\r\n    [CustomMethodSelector]\r\n    public IActionResult Get([FromQuery] int? number)\r\n    {\r\n        return Ok(number);\r\n    }\r\n}\r\n\r\npublic class CustomMethodSelectorAttribute : ActionMethodSelectorAttribute\r\n{\r\n    public CustomMethodSelectorAttribute()\r\n    {\r\n    }\r\n\r\n    public override bool IsValidForRequest(RouteContext routeContext, ActionDescriptor action)\r\n    {\r\n        var boundProps = action.BoundProperties\r\n            .Select(x => x.Name)\r\n            .ToList();\r\n\r\n        Console.WriteLine($\"[{String.Join(\",\", boundProps)}]\");\r\n\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n`GET api/values`\r\n\\> []\r\n\r\n`GET api/values?number`\r\n\\> []\r\n\r\n`GET api/values?number=`\r\n\\> []\r\n\r\n`GET api/values?number=1`\r\n\\> []\r\n\r\nI'd expect it to be [], [number], [number], [number] respectively, or at least [number] on the last one judging how ASP.Net handles empty query values.\r\n\r\nDoes this only work for FromBody/FromForm?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7374911663","Type":"PullRequestEvent","CreatedAt":"2018-03-13T21:57:33","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1678","RelatedDescription":"Opened pull request \"Skip flaky tests\" (#1678) at aspnet/Identity","RelatedBody":""},{"Id":"7374391010","Type":"IssuesEvent","CreatedAt":"2018-03-13T20:12:12","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1409","RelatedDescription":"Closed issue \"Refactor AddIdentity splitting out Authentication from core identity\" (#1409) at aspnet/Identity","RelatedBody":"ASP.NET Identity is a library, and should not have such an opinion and side-effect on a hosting application. By setting the default signin scheme to external, you're making assumptions about the hosting application. If the hosting app wants to use external cookies, then it should do that configuration itself. \r\n\r\nI understand why it was added in here -- it makes the templates easier. But it's a bad library design choice (especially since the behavior is not relied upon anywhere in the ASP.NET Identity library itself). You might have an app that uses some NuGet library with a transitive dependency on ASP.NET Identity and it'd be incredibly confusing to have this behavioral change in the hosting app as a result of just adding a library."},{"Id":"7374387491","Type":"PullRequestEvent","CreatedAt":"2018-03-13T20:11:30","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1442","RelatedDescription":"Merged pull request \"Split Auth into AddIdentityCookies\" (#1442) at aspnet/Identity","RelatedBody":"Work for https://github.com/aspnet/Identity/issues/1409\r\n\r\nNew startup code for refactored identity:\r\n\r\n```C#            \r\n            services.AddIdentityCore<ApplicationUser>()\r\n                .AddRoles<IdentityRole>()\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddSignInManager()\r\n                .AddDefaultTokenProviders();\r\n\r\n            services.AddAuthentication(o =>\r\n            {\r\n                o.DefaultScheme = IdentityConstants.ApplicationScheme;\r\n                o.DefaultSignInScheme = IdentityConstants.ExternalScheme;\r\n            })\r\n            .AddIdentityCookies(o => \r\n            {\r\n                // This would be empty typically, just demonstrating the new API per cookie\r\n                o.ApplicationCookie.Configure(c => c.Cookie.Name = \"MainCookie\");\r\n                o.ExternalCookie.Configure(c => c.Cookie.Name = \"SocialCookie\");\r\n                o.TwoFactorRememberMeCookie.Configure(c => c.Cookie.Name = \"RememberBrowser\");\r\n                o.TwoFactorUserIdCookie.Configure(c => c.Cookie.Name = \"2falogin\");\r\n            });\r\n```\r\n\r\nThoughts @ajcvickers @davidfowl @blowdart ?"},{"Id":"7369582630","Type":"IssuesEvent","CreatedAt":"2018-03-13T03:38:01","Actor":"slaneyrw","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1677","RelatedDescription":"Opened issue \"Support Async password hashers\" (#1677) at aspnet/Identity","RelatedBody":"The latest set of hashing algorithms ( like Argon2 ) feature work, memory and parallelism hardness.  \r\n\r\nThe C# / .NET Core implementation of Argon2 hashing is Task based, but the IPasswordHasher interface isn't.\r\n\r\nAny plans on making the IPasswordHasher async ?  I know this would be a breaking change"},{"Id":"7368697819","Type":"PullRequestEvent","CreatedAt":"2018-03-12T22:34:40","Actor":"alexandre-spieser","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1676","RelatedDescription":"Opened pull request \"Added my ASP.NET Identity MongoDB Provider\" (#1676) at aspnet/Identity","RelatedBody":"Hi, \r\n\r\nI have implemented an ASP.NET Identity MongoDB Provider and would like to add it to the readme file.\r\n\r\nIt's covered by more than 800 integration tests and unit tests from the modified Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test test suite."},{"Id":"7361863349","Type":"IssuesEvent","CreatedAt":"2018-03-11T12:51:03","Actor":"Tamaletjie","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1675","RelatedDescription":"Opened issue \"Lockout doesn't work if email address is invalid.\" (#1675) at aspnet/Identity","RelatedBody":"I'm developing an ASP.NET MVC app using ASP.Net Identity 2.2.1 in Visual Studio 2017. The app is for internal use only, does not use 2FA or password recovery and will have accounts managed by the user's manager. \r\n\r\nIn light of this I changed the login page to use the UserName field instead of the Email address field to identify the user. When I create users in dbo.AspNetUsers I populated the Email field with the same value as the UserName field e.g. JoeB. Doing so does not affect the login process but when it comes to triggering Automatic Lockouts for failed login attempts, this feature fails to trigger.\r\n\r\nThe following email addresses won't trigger a Lockout:\r\n\r\n**NULL\r\nJoeB\r\nJoeB@**\r\n\r\nAnything of the form _alphanumberic@alphanumberic_ seems to be OK (e.g. _JoeB@example_).\r\n\r\nTaking a look at the ASP.Net identity source code I think this bug is related to the last method in this call chain:\r\n\r\n-     SignInManager.CheckPasswordSignInAsync()\r\n-       UserManager.AccessFailedAsync(user)\r\n-         UserManager.UpdateUserAsync()\r\n-           UserManager.UpdateNormalizedEmailAsync(user)\r\n\r\nSince the email address doesn't exist or is invalid (according to some internal check?), the UpdateNormalizedEmailAsync(user) fails in some way causing the following record store.IncrementAccessFailedCountAsync(user, CancellationToken) to not be committed to the database.\r\n\r\nRunning SQL Profiler confirms that the SQL to update dbo.AspNetUsers.AccessFailedCount is never sent to the database if the email address is invalid.\r\n\r\nThis behavior may be by design (for reasons not obvious to me) but I've wasted many hours wrestling with this issue so I though I would log it here in case anyone else gets tripped up by it.\r\n\r\nP.S. The ApplicationManager.SupportsUserEmail is read-only so I can't use this to signal that Email address is not relevant."},{"Id":"7361636132","Type":"IssuesEvent","CreatedAt":"2018-03-11T10:11:41","Actor":"MonaLarsen","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1674","RelatedDescription":"Opened issue \"AggregateException occurs after converting User Id to int in ApplicationUser/ApplicationRole\" (#1674) at aspnet/Identity","RelatedBody":"By following this tutorial [Here](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-primary-key-configuration?tabs=aspnetcore2x) I got to succesfully convert the User Id to int so i can use Linq with operations done on users in my application.\r\n\r\nEverything worked fine here, but after creating default users in startup.cs like this:\r\n\r\n`    public async Task CreateUsersAndRoles(IServiceScope serviceScope)\r\n        {\r\n            var userManager = serviceScope.ServiceProvider.GetService<UserManager<ApplicationUser>>();\r\n            var roleManager = serviceScope.ServiceProvider.GetService<RoleManager<IdentityRole>>();\r\n\r\n            //Creating Admin role\r\n            await roleManager.CreateAsync(new IdentityRole(\"TopUser\"));\r\n            var TopUsers = new ApplicationUser { UserName = \"xxxxx@xx.com\", \r\n                                                  Email = \"xxx@xxxx.com\",  \r\n                                                  };\r\n\r\n\r\n            await userManager.CreateAsync(adminUser, \"xxxxxx\");\r\n            await userManager.AddToRoleAsync(TopUsers, \"TopUser\");\r\n\r\n}`\r\n\r\ni am getting an error in ` CreateUsersAndRoles(serviceScope).Wait();` that is not clear and i don't know why the compiling is failing as eveything seems to be logically working.\r\n\r\nHere is the error: `An exception of type 'System.AggregateException' occurred in System.Private.CoreLib.dll but was not handled in user code: 'One or more errors occurred.' Inner exceptions found, see $exception in variables window for more details. Innermost exception System.NullReferenceException : Object reference not set to an instance of an object.`\r\n\r\nWhat am i doing wrong? And how do i find the error that is causing the code to fail?"},{"Id":"7361489918","Type":"IssuesEvent","CreatedAt":"2018-03-11T08:18:39","Actor":"jenyayel","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1673","RelatedDescription":"Opened issue \"Compiled Razor views won't override default UI\" (#1673) at aspnet/Identity","RelatedBody":"I wonder if it is by design. \r\n\r\nIf I override, for instance, by adding a new file in my app `Areas/Identity/Pages/Account/Register.cshtml`, it will work fine when running/debugging locally. \r\n\r\nI noticed that when the app published, the override won't work. I made sure that the `<Something>.PrecompiledViews.dll` is generated and contains those views that I added to override. When I added `<MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>` to csproj the overrides work again."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7375801072","Type":"PullRequestEvent","CreatedAt":"2018-03-14T02:37:40","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2388","RelatedDescription":"Merged pull request \"Handle posting to the libuv thread after StopAsync\" (#2388) at aspnet/KestrelHttpServer","RelatedBody":"- Check if the post handle is disposed and noop if it is.\r\nWe also catch an ObjectDisposedException because it's an inherent race condition.\r\n\r\nFixes https://github.com/aspnet/KestrelHttpServer/issues/2386"},{"Id":"7375801061","Type":"IssuesEvent","CreatedAt":"2018-03-14T02:37:40","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2386","RelatedDescription":"Closed issue \"Handle posting to the LibuvThread after shutdown\" (#2386) at aspnet/KestrelHttpServer","RelatedBody":"Since doing https://github.com/aspnet/KestrelHttpServer/commit/e7d3b0c5f971d6367ccec438407e91807a31447c, it exposed a crash we have on shutdown where we're posting to the libuv thread after it's disposed.\r\n\r\n```\r\nThe active test run was aborted. Reason: Unhandled Exception: System.AggregateException: One or more errors occurred. (Safe handle has been closed) ---> System.ObjectDisposedException: Safe handle has been closed\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.NativeMethods.uv_async_send(UvAsyncHandle handle)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.async_send(UvAsyncHandle handle) in /_/src/Kestrel.Transport.Libuv/Internal/Networking/LibuvFunctions.cs:line 179\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread.Post[T](Action`1 callback, T state) in /_/src/Kestrel.Transport.Libuv/Internal/LibuvThread.cs:line 193\r\n   at System.IO.Pipelines.Pipe.CancelPendingRead()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1OutputProducer.Abort(Exception error) in /_/src/Kestrel.Core/Internal/Http/Http1OutputProducer.cs:line 157\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.Abort(Exception error) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 420\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.Abort(Exception ex) in /_/src/Kestrel.Core/Internal/HttpConnection.cs:line 285\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```"},{"Id":"7375510057","Type":"PullRequestEvent","CreatedAt":"2018-03-14T00:54:02","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2389","RelatedDescription":"Merged pull request \"Pass ReadOnlySequence via in\" (#2389) at aspnet/KestrelHttpServer","RelatedBody":"Its a chunky `readonly struct`"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7375360517","Type":"IssuesEvent","CreatedAt":"2018-03-14T00:01:39","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2157","RelatedDescription":"Opened issue \"Re-enable MonoDevelop FilePath based tests when proper strong named dlls are available.\" (#2157) at aspnet/Razor","RelatedBody":"This is the commit that skipped the tests: https://github.com/aspnet/Razor/commit/a6d03bd4071052c535d51c783ef88cf5150c0a7b\r\n\r\n/cc @KirillOsenkov"},{"Id":"7375121736","Type":"IssuesEvent","CreatedAt":"2018-03-13T22:49:25","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2156","RelatedDescription":"Opened issue \"Add a couple of tests to Razor.Design for multi-targeting projects \" (#2156) at aspnet/Razor","RelatedBody":"This should ensure Sdk and package being consumed from a multi targeted project work"},{"Id":"7375056696","Type":"IssuesEvent","CreatedAt":"2018-03-13T22:32:21","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2081","RelatedDescription":"Closed issue \"Add VS4Mac implementation of our host based project system.\" (#2081) at aspnet/Razor","RelatedBody":"We have a windows project system which associated host projects with Roslyn projects; we also need this in VS4Mac."},{"Id":"7375054270","Type":"PullRequestEvent","CreatedAt":"2018-03-13T22:31:46","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2137","RelatedDescription":"Merged pull request \"Add host project system for VS4Mac.\" (#2137) at aspnet/Razor","RelatedBody":"- Tied into VS4Macs ProjectExtensions in order to bootstrap our Razor world.\r\n- We currently watch all DotNet projects with the expectation that they're the only ones that can potentially turn into Razor compatible projects.\r\n- Added a fallback Razor project host which is used for pre-Razor SDK Razor versions (< 2.1).\r\n- Added a default Razor project host which consumes all MSBuild data from the users packages and sets up the Razor world accordingly.\r\n- Had to modify some existing contracts to work better with new expectations. one of these was the VS4Mac specific Workspace accessor; essentially we needed to be able to lookup a workspace from a solution.\r\n- Some of our previous expectations about addins were wrong (not being able to directly reference your libraries). To avoid using reflection to bootstrap our types I tried out directly referencing our libraries and all worked fine.\r\n\r\n#2081"},{"Id":"7374646512","Type":"PullRequestEvent","CreatedAt":"2018-03-13T21:01:24","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2155","RelatedDescription":"Merged pull request \"Fix typo in Razor.props\" (#2155) at aspnet/Razor","RelatedBody":""},{"Id":"7374623321","Type":"PullRequestEvent","CreatedAt":"2018-03-13T20:56:48","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2155","RelatedDescription":"Opened pull request \"Fix typo in Razor.props\" (#2155) at aspnet/Razor","RelatedBody":""},{"Id":"7374608719","Type":"PullRequestEvent","CreatedAt":"2018-03-13T20:54:03","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2154","RelatedDescription":"Merged pull request \"Avoid generating RelatedAssemblyAttribute when RazorSdk isn't in play\" (#2154) at aspnet/Razor","RelatedBody":""}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7373364495","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:04:24","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_"},{"Id":"7352155171","Type":"IssuesEvent","CreatedAt":"2018-03-08T19:37:26","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/199","RelatedDescription":"Closed issue \"ASP.NET/EF Core feeds renamed and moved to dotnet.myget.org\" (#199) at aspnet/Announcements","RelatedBody":"The ASP.NET and EF Core MyGet feeds have moved from www.myget.org to dotnet.myget.org. There are automatic redirects from the old feeds to the new feeds so no _immediate_ change is needed. If you use the nightly feeds for packages, please move to the new feeds ASAP. The redirects will be available for at least a few weeks.\n\n| https://www.myget.org/f/ (Before) | https://dotnet.myget.org/f/ (After) |\n| --- | --- |\n| aspnetvnext | aspnetcore-dev |\n| aspnetrelease | aspnetcore-release |\n| aspnetmaster | aspnetcore-master |\n| aspnetcidev | aspnetcore-ci-dev |\n| aspnetcirelease | aspnetcore-ci-release |\n\nPlease use https://github.com/aspnet/Home/issues/1708 for further discussion.\n"},{"Id":"7340008772","Type":"IssuesEvent","CreatedAt":"2018-03-06T20:07:16","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Opened issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292) at aspnet/Announcements","RelatedBody":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":9,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":7,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":4,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"963559608869568512","CreatedAt":"2018-02-13T23:44:47+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2018-03-14T05:30:10.3268505Z","RunDurationInMilliseconds":9031}