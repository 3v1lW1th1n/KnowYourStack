{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7292569336","Type":"PullRequestEvent","CreatedAt":"2018-02-25T02:54:14","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16553","RelatedDescription":"Opened pull request \"Update CoreFx to preview2-26225-01 (master)\" (#16553) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7292553013","Type":"IssuesEvent","CreatedAt":"2018-02-25T02:40:22","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/10441","RelatedDescription":"Closed issue \"SignalAndWait is not implemented for Unix\" (#10441) at dotnet/coreclr","RelatedBody":"We believe this is possible to implement for Unix but it's a low priority as the API is flawed and it has extremely low usage.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/WaitHandle.cs#L451\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/WaitHandle.cs#L464\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/WaitHandle.cs#L483\r\n\r\n\r\n====\r\n> @kouvel SignalAndWait is a bit complicated because it has to work on any WaitHandle created by the user, which can have any handle value. So it’s not as simple as just calling the respective Signal method followed by the Wait method, instead we would have to implement this in PAL and determined that it’s not worth doing at the time.\r\n\r\n>However, we could potentially do this as a simple compromise:\r\n-\tCheck the type of the wait handle to signal\r\no\tIf it’s an EventWaitHandle, call SetEvent\r\no\tIf it’s a Semaphore, call Release\r\no\tIf it’s a Mutex, call ReleaseMutex\r\no\tIf it’s none of the above, throw PNSE\r\n-\tWait on the handle to wait on\r\n\r\n>Users can still change the handle of a Mutex/Semaphore/EventWaitHandle object, which is bizarre, but they would get the appropriate behavior of the signal methods in that case.\r\n----\r\n@jkotas \r\n>It is not that much harder to do switch on the handle type in the PAL to avoid the problem you have mentioned… .\r\n>I do not have a much opinion on this one. I will leave it up to you to decide what to do about this one. It is somewhat broken API even on Windows because of it does not work on STA threads (for no good reason). I would expect it to be used very rarely because of that.\r\n----\r\n@kouvel \r\n>Agreed, it’s not far off from just implementing it properly in the PAL.\r\n\r\n>I’ll discuss with Gaurav. I plan on implementing it properly for CoreRT Unix since there are no such issues there, so maybe for consistency it would make sense to implement it in CoreCLR as well.\r\n"},{"Id":"7292350825","Type":"PullRequestEvent","CreatedAt":"2018-02-24T23:52:54","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16552","RelatedDescription":"Opened pull request \"Fixed mixed mode attach/JIT debugging.\" (#16552) at dotnet/coreclr","RelatedBody":"The mixed mode debugging attach uses TLS slot to communicate between debugger break-in thread and\r\nthe right side. Unfortunately, the __thread static variables cannot be used on debugger breakin\r\nthread because of it does not have storage allocated for them.\r\n\r\nThe fix is to switch the storage for debugger word to classic TlsAlloc allocated slot that works\r\nfine on debugger break-in thread.\r\n\r\nThere was also problem (that is also in 2.0) where the WINNT_OFFSETOF__TEB__ThreadLocalStoragePointer\r\nwas using the define for 64/32 bit and ended up always the 32 bit Windows value. This caused the right\r\nside GetEEThreadValue, GetEETlsDataBlock unmanaged thread functions to always fail."},{"Id":"7292306478","Type":"PullRequestEvent","CreatedAt":"2018-02-24T23:18:58","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13781","RelatedDescription":"Closed pull request \"Fixed NaN's GetHashCode and Equals invariant issue.\" (#13781) at dotnet/coreclr","RelatedBody":"This PR keeps the invariant of GetHashCode and Equals for NaNs. We always return 1 for GetHashCode of NaNs so that all NaNs have the same hash code.\r\n\r\nFix #6237"},{"Id":"7292281997","Type":"PullRequestEvent","CreatedAt":"2018-02-24T23:00:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16551","RelatedDescription":"Opened pull request \"Fixed NaN's GetHashCode and Equals invariant issue.\" (#16551) at dotnet/coreclr","RelatedBody":"Fix #6237"},{"Id":"7292067807","Type":"PullRequestEvent","CreatedAt":"2018-02-24T20:38:23","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16529","RelatedDescription":"Merged pull request \"Return empty array if length is zero\" (#16529) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/27412"},{"Id":"7292064589","Type":"PullRequestEvent","CreatedAt":"2018-02-24T20:36:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16550","RelatedDescription":"Opened pull request \"Use overriden double/float GetHashCode for default struct hashcodes\" (#16550) at dotnet/coreclr","RelatedBody":"Fixes #16545"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7292667662","Type":"IssuesEvent","CreatedAt":"2018-02-25T04:19:48","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8681","RelatedDescription":"Opened issue \"Cannot add packages to a specific project\" (#8681) at dotnet/cli","RelatedBody":"I cannot get this command to work:\r\n\r\n```console\r\nC:\\git\\dotnet-docker\\samples\\dotnetapp>dotnet add package dotnetapp.csproj ILLink.Tasks -v 0.1.4-preview-981901 -s https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n```\r\n\r\nI am typing this command from this directory (on windows): https://github.com/dotnet/dotnet-docker/tree/samples/samples/dotnetapp\r\n\r\nI've tried variants of the command and also tried multiple versions of the SDK ... 2.0.2 and 2.1.300-preview2-008020. All fail.\r\n\r\nThis is what I see:\r\n\r\n```console\r\nC:\\git\\dotnet-docker\\samples\\dotnetapp>dotnet add package dotnetapp\\dotnetapp.csproj ILLink.Tasks -v 0.1.4-preview-981901 -s https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\nPlease specify one package reference to add.\r\nUsage: dotnet add <PROJECT> package [options] <PACKAGE_NAME>\r\n\r\nArguments:\r\n  <PROJECT>        The project file to operate on. If a file is not specified, the command will search the current directory for one.\r\n  <PACKAGE_NAME>   The package reference to add.\r\n\r\nOptions:\r\n  -h, --help                                Show help information.\r\n  -v, --version <VERSION>                   Version for the package to be added.\r\n  -f, --framework <FRAMEWORK>               Adds reference only when targeting a specific framework.\r\n  -n, --no-restore                          Adds reference without performing restore preview and compatibility check.\r\n  -s, --source <SOURCE>                     Specifies NuGet package sources to use during the restore.\r\n  --package-directory <PACKAGE_DIRECTORY>   Restores the packages to the specified directory.\r\n```\r\n"},{"Id":"7292434472","Type":"PullRequestEvent","CreatedAt":"2018-02-25T00:59:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8675","RelatedDescription":"Merged pull request \"Version and preview bundled properties\" (#8675) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/7051\r\nEnables fixing https://github.com/dotnet/cli/issues/8457\r\n"},{"Id":"7292434469","Type":"IssuesEvent","CreatedAt":"2018-02-25T00:59:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7051","RelatedDescription":"Closed issue \"Define a property to identify the SDK version\" (#7051) at dotnet/cli","RelatedBody":"_From @AArnott on December 19, 2016 5:2_\n\nThe cross-targeting / SDK project type offer new functionality that a build extension may want to detect in order to reliably leverage (as opposed to setting properties and blindly hoping the new functionality is present).\r\n\r\nPlease define a new property that a build extension can check for to detect the use of the new SDK attribute in the project file.\r\n\r\nPer a brief side discussion on #528 with @nguerrera.\n\n_Copied from original issue: dotnet/sdk#534_"},{"Id":"7292369318","Type":"IssuesEvent","CreatedAt":"2018-02-25T00:06:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8679","RelatedDescription":"Closed issue \"restore dependencies without the project\" (#8679) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nCould you please give me a hint on how can I download all dependencies defined in dependency manifest file (*.deps.json) without the project (solution)? Like \"self-contained deployment (SCD)\" does this with `dotnet publish`, but manually on target server.\r\n"},{"Id":"7292347759","Type":"PullRequestEvent","CreatedAt":"2018-02-24T23:50:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8659","RelatedDescription":"Merged pull request \"Update the WebSdk Version to 2.0.0-rel-20180221-676\" (#8659) at dotnet/cli","RelatedBody":"https://dotnet.myget.org/feed/dotnet-web/package/nuget/Microsoft.NET.Sdk.Web/2.0.0-rel-20180221-676\r\n\r\nThis websdk update contains changes that needs to be included inbox with the next VS update.\r\n\r\n@mlorbetske @livarcocc \r\n"},{"Id":"7291864115","Type":"IssuesEvent","CreatedAt":"2018-02-24T18:35:01","Actor":"sebastienros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8680","RelatedDescription":"Opened issue \"Locally cached runtime/sdk images for dotnet-install\" (#8680) at dotnet/cli","RelatedBody":"I could use a new feature in `dotnet-install` that would cache the files locally as the filenames vary for each version. \r\n\r\nI run dotnet-install during CI jobs, and it downloads the image on every call where it could be cached locally instead. I believe that passing a custom cache folder would be enough, and if the file is found locally the azure feed would not be used.\r\n\r\nThis would be opt-in so any wrong behavior would be on the user's responsibility to clear the cache."},{"Id":"7291408703","Type":"IssuesEvent","CreatedAt":"2018-02-24T13:47:07","Actor":"avoidik","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8679","RelatedDescription":"Opened issue \"restore dependencies without the project\" (#8679) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nCould you please give me a hint on how can I download all dependencies defined in dependency manifest file (*.deps.json) without the project (solution)? Like \"self-contained deployment (SCD)\" does this with `dotnet publish`, but manually on target server.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7289990134","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:54:43","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/658","RelatedDescription":"Merged pull request \"Update BuildTools to 2.1.0-preview2-02522-03\" (#658) at dotnet/standard","RelatedBody":"This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734"},{"Id":"7289897216","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:28:21","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/658","RelatedDescription":"Opened pull request \"Update BuildTools to 2.1.0-preview2-02522-03\" (#658) at dotnet/standard","RelatedBody":"This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734"},{"Id":"7289502975","Type":"PullRequestEvent","CreatedAt":"2018-02-23T20:50:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/656","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02522-02 (master)\" (#656) at dotnet/standard","RelatedBody":""},{"Id":"7278544876","Type":"IssuesEvent","CreatedAt":"2018-02-21T23:23:41","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/657","RelatedDescription":"Opened issue \"Update CI scripts to use vswhere\" (#657) at dotnet/standard","RelatedBody":"From a recent BuildTools change that depended on msbuild 15 features it was clear that we haven't updated the standard repo to correctly detect which msbuild to use. We should update netci.groovy to not call vsdevcmd and instead update the run scripts similar to corefx. "},{"Id":"7272997768","Type":"PullRequestEvent","CreatedAt":"2018-02-21T02:06:34","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/656","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02521-01 (master)\" (#656) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7292737738","Type":"IssuesEvent","CreatedAt":"2018-02-25T05:24:14","Actor":"roji","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27447","RelatedDescription":"Opened issue \"Clarify persistency of prepared commands across pooled connection lifespan\" (#27447) at dotnet/corefx","RelatedBody":"ADO.NET has an explicit `Prepare()` API which can be very important for performance - the effect is dramatic on PostgreSQL and there's a potential for big gains also on Sqlite and on SqlServer (where the operation is currently a no-op, but could obviate sending the query SQL and resultset shape description on each query).\r\n\r\nUnfortunately, this feature currently isn't very compatible with short-lived connection scenarios such as web applications: since `Prepare()` is invoked on `DbCommand`, the reasonable expectation from the API is that once the instance is disposed or the DbConnection is closed/disposed, the benefits of preparation disappear. So the benefits of prepare are currently restricted to applications which call `Prepare()` on a `DbCommand` instance, and then re-execute that instance many times on the same `DbConnection` - the opposite of how web applications work.\r\n\r\nSince preparation is so important with PostgreSQL, Npgsql works around this problem by internally persisting command - when a prepared `NpgsqlCommand` is disposed, the prepared resources are kept internally on the physical connection, keyed on the SQL, even when the connection is returned to the pool. A subsequent call to `Prepare()` on the same physical connection will just look up those resources and reuse them.\r\n\r\nIt's worth thinking about this problem in a more general way in ADO.NET, to make sure that other providers benefit from prepared command persistency. This could mean the introduction of a new preparation API or something else."},{"Id":"7292716971","Type":"IssuesEvent","CreatedAt":"2018-02-25T05:05:07","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27446","RelatedDescription":"Closed issue \"Add SafeFindHandle\" (#27446) at dotnet/corefx","RelatedBody":"## Motivation\r\nHandles returned by FindFirstFile on Windows should be closed with FindClose, not CloseHandle. Therefore a SafeFileHandle or similar is not appropriate for it. We have a SafeFindHandle internally, if we expose it publicly it is not necessary to reinvent it.\r\n\r\n## API\r\n\r\n```c#\r\nnamespace Microsoft.Win32.SafeHandles\r\n{\r\n    public sealed partial class SafeFindHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\r\n    {\r\n        protected override bool ReleaseHandle() { throw null; }\r\n    }\r\n}\r\n```\r\n\r\n## Implementation \r\n\r\n```c#\r\n    internal sealed class SafeFindHandle : SafeHandle\r\n    {\r\n        protected override bool ReleaseHandle()\r\n        {\r\n            return Interop.Kernel32.FindClose(handle);\r\n        }\r\n    }\r\n```\r\n\r\ncc @JeremyKuhne "},{"Id":"7292693035","Type":"IssuesEvent","CreatedAt":"2018-02-25T04:42:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27446","RelatedDescription":"Opened issue \"Add SafeFindHandle\" (#27446) at dotnet/corefx","RelatedBody":"## Motivation\r\nHandles returned by FindFirstFile on Windows should be closed with FindClose, not CloseHandle. Therefore a SafeFileHandle or similar is not appropriate for it. We have a SafeFindHandle internally, if we expose it publicly it is not necessary to reinvent it.\r\n\r\n## API\r\n\r\n```c#\r\nnamespace Microsoft.Win32.SafeHandles\r\n{\r\n    public sealed partial class SafeFindHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\r\n    {\r\n        protected override bool ReleaseHandle() { throw null; }\r\n    }\r\n}\r\n```\r\n\r\n## Implementation \r\n\r\n```c#\r\n    internal sealed class SafeFindHandle : SafeHandle\r\n    {\r\n        protected override bool ReleaseHandle()\r\n        {\r\n            return Interop.Kernel32.FindClose(handle);\r\n        }\r\n    }\r\n```\r\n\r\ncc @JeremyKuhne "},{"Id":"7292594189","Type":"PullRequestEvent","CreatedAt":"2018-02-25T03:15:29","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27444","RelatedDescription":"Opened pull request \"Fix PauseAndContinue failure?\" (#27444) at dotnet/corefx","RelatedBody":"Attempt to fix #27071\r\n\r\nI cannot repro, at least when I run the test library (or test) individually, on the repro machine. \r\n\r\nI increased the time we wait for the service to stop from 30 sec to 120 sec in case it is machine slowness. (On the repro machine, it usually takes less than 1 sec)\r\n\r\nI also added explicit verification of the state of the test service in this test."},{"Id":"7292566617","Type":"PullRequestEvent","CreatedAt":"2018-02-25T02:51:49","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27443","RelatedDescription":"Opened pull request \"Update CoreFx to preview2-26225-01 (master)\" (#27443) at dotnet/corefx","RelatedBody":""},{"Id":"7292553018","Type":"PullRequestEvent","CreatedAt":"2018-02-25T02:40:22","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27118","RelatedDescription":"Merged pull request \"Enable WaitHandle.SignalAndWait tests on Unix\" (#27118) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/16383\r\nFixes https://github.com/dotnet/coreclr/issues/10441"},{"Id":"7292489672","Type":"PullRequestEvent","CreatedAt":"2018-02-25T01:45:58","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26647","RelatedDescription":"Merged pull request \"Enable blob comparison for TimeZoneInfo* & fix comment\" (#26647) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/23804\r\n\r\nminor change"},{"Id":"7292489668","Type":"IssuesEvent","CreatedAt":"2018-02-25T01:45:58","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23804","RelatedDescription":"Closed issue \"Converge TimeZoneInfo sources (coreclr & corert)\" (#23804) at dotnet/corefx","RelatedBody":"This is a reminder to finish the convergence of the TimeZoneInfo source files.\r\n\r\nWIP here: https://github.com/ViktorHofer/coreclr/tree/TimeZoneInfoConverganceBackup\r\n\r\nWhen finished, remove this line https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Formatters/tests/BinaryFormatterHelper.cs#L139 and update the blobs."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7292680188","Type":"IssuesEvent","CreatedAt":"2018-02-25T04:31:04","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24497","RelatedDescription":"Closed issue \"Unit-tests for implementing interface in derived interfaces are broken with new CoreCLR packages\" (#24497) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/coreclr/issues/16064 for more information.\r\nThe tests are disabled and should be re-enabled once a fix is available"},{"Id":"7292679432","Type":"IssuesEvent","CreatedAt":"2018-02-25T04:30:28","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20084","RelatedDescription":"Closed issue \"Adjust tests once https://github.com/dotnet/coreclr/issues/12149 is fixed\" (#20084) at dotnet/roslyn","RelatedBody":"Related to https://github.com/dotnet/coreclr/issues/12149"},{"Id":"7292678568","Type":"IssuesEvent","CreatedAt":"2018-02-25T04:29:45","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20083","RelatedDescription":"Closed issue \"Adjust tests once https://github.com/dotnet/coreclr/issues/12147 is addressed\" (#20083) at dotnet/roslyn","RelatedBody":""},{"Id":"7292673953","Type":"PullRequestEvent","CreatedAt":"2018-02-25T04:25:16","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24771","RelatedDescription":"Merged pull request \"Move to a new CoreCLR package for tests and enable tests blocked by bugs fixed in runtime\" (#24771) at dotnet/roslyn","RelatedBody":"Closes #20083.\r\nCloses #20084.\r\nCloses #24497.\r\n"},{"Id":"7292064735","Type":"PullRequestEvent","CreatedAt":"2018-02-24T20:36:30","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25027","RelatedDescription":"Merged pull request \"Merge 'upstream/dev15.6.x' into 'features/NullableReferenceTypes'\" (#25027) at dotnet/roslyn","RelatedBody":""},{"Id":"7292024829","Type":"IssuesEvent","CreatedAt":"2018-02-24T20:11:57","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25039","RelatedDescription":"Opened issue \"Bugs in SwitchStatementHighlighter\" (#25039) at dotnet/roslyn","RelatedBody":"#### 1. It highlights unrelated goto statements\r\n\r\n```c#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        unrelated:\r\n        switch (true)\r\n        {\r\n            case true:\r\n                goto case true;\r\n                goto unrelated;\r\n        }\r\n    }\r\n}\r\n```\r\nClick on switch. Second goto is highlighted. It shouldn't be.\r\n\r\n#### 2. It doesn't highlight nested break/goto statements.\r\n```c#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        switch (true)\r\n        {\r\n            default:\r\n            case true:\r\n                if (true)\r\n                {\r\n                    break;\r\n                    goto case true;\r\n                    goto default;\r\n                }\r\n                break;\r\n                goto case true;\r\n                goto default;\r\n        }\r\n    }\r\n}\r\n```\r\nClick on switch. Top-level break/goto get highlighted, but not those inside the if statement."},{"Id":"7291946108","Type":"IssuesEvent","CreatedAt":"2018-02-24T19:24:07","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24993","RelatedDescription":"Reopened issue \"Terrible code completion suggestion for implementing interface explicitly.\" (#24993) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.5.5\r\n\r\n**Steps to Reproduce**:\r\n\r\nSuppose I have a class and an interface. this class has implemented all interface members except one (or a few).\r\n\r\n    public interface IInterface\r\n    {\r\n        void DoFoo();\r\n        void DoBar();\r\n    }\r\n\r\n    public class MyClass : IInterface\r\n    {\r\n        public void DoFoo()\r\n        {\r\n        }\r\n    }\r\n\r\nThis class is missing a member. Quick action works fine if I choose `Implement interface`. I get what is expected. a method that throws `NotImplementedException`.\r\n\r\nHow ever if I choose `Implement interface explicitly` this is what I get.\r\n\r\n\r\n![wrong suggestion 2](https://user-images.githubusercontent.com/15255162/36542597-81cc6d10-17f6-11e8-95cc-a871ce87f447.JPG)\r\n\r\n**Actual Behavior**:\r\n\r\nIt will try to implement **all** interfaces explicitly and it will, you can try it your self. after this completion ill have 3 methods and I have to remove `DoFoo` manually.\r\n\r\nThis kind of completion is not practical, when interface contains more than 3 members, it just makes bunch of trouble.\r\n\r\n**Expected Behavior**:\r\n\r\nonly the missing member should be implemented explicitly without affecting any other members."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7292366079","Type":"PullRequestEvent","CreatedAt":"2018-02-25T00:04:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5444","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5444) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7292073521","Type":"PullRequestEvent","CreatedAt":"2018-02-24T20:42:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5444","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5444) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7292028584","Type":"PullRequestEvent","CreatedAt":"2018-02-24T20:14:24","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5443","RelatedDescription":"Opened pull request \"Add tests for building native shared and static libraries\" (#5443) at dotnet/corert","RelatedBody":"This PR tests the functionality of building native shared (.dll, .dylib, .so) and static (.lib, .a) libraries using CoreRT.\r\n\r\nThe static library tests pass on Windows, macOS and Ubuntu, shared library tests pass on Windows and macOS, Ubuntu won't pass until #4988 is fixed\r\n\r\nFixes #4985 "},{"Id":"7291040713","Type":"PullRequestEvent","CreatedAt":"2018-02-24T09:12:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5442","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5442) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7290795123","Type":"PullRequestEvent","CreatedAt":"2018-02-24T06:14:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5442","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5442) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7290303065","Type":"PullRequestEvent","CreatedAt":"2018-02-24T00:51:22","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1991","RelatedDescription":"Opened pull request \"Do not pack platform\" (#1991) at dotnet/sdk","RelatedBody":""},{"Id":"7290125527","Type":"PullRequestEvent","CreatedAt":"2018-02-23T23:38:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1990","RelatedDescription":"Merged pull request \"Set version to 2.2.200-preview in 2.1.2xx branch\" (#1990) at dotnet/sdk","RelatedBody":""},{"Id":"7289980010","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:51:42","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1990","RelatedDescription":"Opened pull request \"Set version to 2.2.200-preview in 2.1.2xx branch\" (#1990) at dotnet/sdk","RelatedBody":""},{"Id":"7289967942","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:48:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1986","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/2.1\" (#1986) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7289662745","Type":"PullRequestEvent","CreatedAt":"2018-02-23T21:28:51","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1988","RelatedDescription":"Merged pull request \"Enhance the 'BenchViewName' for easier searching at BenchView.\" (#1988) at dotnet/sdk","RelatedBody":"@DrewScoggins"},{"Id":"7289522627","Type":"PullRequestEvent","CreatedAt":"2018-02-23T20:54:54","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1978","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1978) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"967455752855027712","CreatedAt":"2018-02-24T17:46:40+00:00","UserScreenname":"dotnet","Text":"Please take a moment and think of all the office chairs that were destroyed in the office olympics.\n\n@gotheap’s tea… https://t.co/8RvGxAQI5o","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":25,"FavoriteCount":4,"RawContent":null},{"Id":"966205758831554561","CreatedAt":"2018-02-21T06:59:38+00:00","UserScreenname":"dotnet","Text":"Are you following these amazing people already? Expand your list :-) https://t.co/g02dmPDLsX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":12,"RawContent":null},{"Id":"965964952375873544","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"dotnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/ioBP2nkstm","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"965646227764232192","CreatedAt":"2018-02-19T17:56:16+00:00","UserScreenname":"dotnet","Text":"Interactive learning with Try .NET with @LadyNaggaga https://t.co/8btikidagq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":24,"RawContent":null},{"Id":"964556484267868162","CreatedAt":"2018-02-16T17:46:01+00:00","UserScreenname":"dotnet","Text":"How can #VisualStudio help you get started building #dotNET apps in #Azure? Join @PaulYuki99 &amp; @andrewBrianHall at… https://t.co/Sws9Apkm6t","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":19,"FavoriteCount":13,"RawContent":null}]}},"RunOn":"2018-02-25T05:30:20.163584Z","RunDurationInMilliseconds":7696}