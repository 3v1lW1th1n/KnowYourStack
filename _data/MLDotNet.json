{"Data":{"GitHub":{"Issues":[{"Id":"459764260","IsPullRequest":false,"CreatedAt":"2019-06-24T08:41:36","Actor":"antonfr","Number":"3904","RawContent":null,"Title":"Error while creating PredictionEngine for SSD model in ONNX format","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: macOS 10.13.6\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.2.4 \r\n\r\n### Issue\r\n\r\n- I trying to use SSD model in ONNX format for object detection from [ONNX model zoo](https://github.com/onnx/models/tree/master/ssd) ML.NET\r\n- I got the following error: `Can't bind the IDataView column 'labels' of type 'Vector<Int64, 1, 1>' to field or property 'PredictedLabels' of type 'System.Int32[,]'.` while creation of prediction engine\r\n- I was able to run successfully tiny YOLO model ONNX model zoo, here I expect the same result\r\n\r\n### Source code / logs\r\n\r\nHere is the definition of outputs of model:\r\n```C#\r\nnamespace SSD_onnx.DataStructures\r\n{\r\n    public class ImagePredictions\r\n    {\r\n        [ColumnName(SSDDetector.SSDSettings.SSDBoxesOutput)]\r\n        public float[,,] PredictedBoxes;\r\n\r\n        [ColumnName(SSDDetector.SSDSettings.SSDLabelsOutput)]\r\n        public int[,] PredictedLabels;\r\n\r\n        [ColumnName(SSDDetector.SSDSettings.SSDScoresOutput)]\r\n        public float[,] PredictedScores;\r\n    }\r\n}\r\n```\r\n\r\nHere is the function that creates prediction engine:\r\n\r\n```C#\r\nnamespace SSD_onnx\r\n{\r\n    public class SSDDetector\r\n    {\r\n        private readonly string modelLocation;\r\n        private readonly string labelsLocation;\r\n        private readonly string imagesLocation;\r\n        private readonly string tagsLocation;\r\n\r\n        private IList<SSDBox> SSDBoxes = new List<SSDBox>();\r\n        private readonly SSDPredictions ssdPredictions = new SSDPredictions();\r\n        private readonly MLContext mLContext;\r\n\r\n        public SSDDetector(string modelLocation,\r\n                           string labelsLocation,\r\n                           string imagesLocation,\r\n                           string tagsLocation)\r\n        {\r\n            this.modelLocation = modelLocation;\r\n            this.labelsLocation = labelsLocation;\r\n            this.imagesLocation = imagesLocation;\r\n            this.tagsLocation = tagsLocation;\r\n\r\n            mLContext = new MLContext();\r\n        }\r\n\r\n        public struct ImageSettings\r\n        {\r\n            public const int ImageWidth = 1200;\r\n            public const int ImageHeight = 1200;\r\n        }\r\n\r\n        public struct SSDSettings\r\n        {\r\n            public const string SSDInput = \"image\";\r\n            public const string SSDBoxesOutput = \"bboxes\";\r\n            public const string SSDLabelsOutput = \"labels\";\r\n            public const string SSDScoresOutput = \"scores\";\r\n        }\r\n\r\n        public PredictionEngine<ImageData, ImagePredictions> LoadModel(string modelLocation,\r\n                                                                       string imagesLocation,\r\n                                                                       string tagsLocation)\r\n        {\r\n            IDataView data = mLContext.Data.LoadFromTextFile<ImageData>(path: tagsLocation,\r\n                                                                        hasHeader: false);\r\n            var pipeline = mLContext.Transforms.LoadImages(outputColumnName: \"image\",\r\n                                                           imageFolder: imagesLocation,\r\n                                                           inputColumnName: nameof(ImageData.ImagePath))\r\n                   .Append(mLContext.Transforms.ResizeImages(outputColumnName: \"image\",\r\n                                                             imageWidth: ImageSettings.ImageWidth,\r\n                                                             imageHeight: ImageSettings.ImageHeight,\r\n                                                             inputColumnName: \"image\"))\r\n                   .Append(mLContext.Transforms.ExtractPixels(outputColumnName: \"image\"))\r\n                   .Append(mLContext.Transforms.ApplyOnnxModel(modelFile: modelLocation,\r\n                                                               outputColumnNames: new[] { SSDSettings.SSDBoxesOutput,\r\n                                                                                          SSDSettings.SSDLabelsOutput,\r\n                                                                                          SSDSettings.SSDScoresOutput },\r\n                                                               inputColumnNames: new[] { SSDSettings.SSDInput }));\r\n\r\n            var model = pipeline.Fit(data);\r\n\r\n            var predictionEngine = mLContext.Model.CreatePredictionEngine<ImageData, ImagePredictions>(model);\r\n            return predictionEngine;\r\n        }\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3904","RelatedDescription":"Open issue \"Error while creating PredictionEngine for SSD model in ONNX format\" (#3904)"},{"Id":"459359956","IsPullRequest":true,"CreatedAt":"2019-06-24T06:21:26","Actor":"harishsk","Number":"3896","RawContent":null,"Title":"Checked in a better fix based on code review","State":"closed","Body":"Fixes #3893 \r\n\r\nThe earlier fix was clobbering theCMake defaults. @janvorli  suggested a better fix to simply replace the offending flag. This checkin has that fix.","Url":"https://github.com/dotnet/machinelearning/pull/3896","RelatedDescription":"Closed or merged PR \"Checked in a better fix based on code review\" (#3896)"},{"Id":"459560647","IsPullRequest":false,"CreatedAt":"2019-06-23T10:30:59","Actor":"mphollas","Number":"3903","RawContent":null,"Title":"Unable to load shared library 'MklImports' or one of its dependencies.","State":"open","Body":"### System information\r\n\r\n- Mac 0S Mojave 10.14.3:\r\n- dotnet --version\r\n   2.2.300\r\n- Project references\r\n - Microsoft.ML\r\n - Microsoft.ML.Mkl.Redis\r\n - Microsoft.ML.TimeSeries\r\n\r\n### Issue\r\n- Possible that this is of the same origin as #3694 but in case it is a separate case I have posted this issue.\r\n\r\n- **What did you do?**\r\nFollowed new forecasting tutorial for ML.Net 1.1\r\nhttps://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/Forecasting.cs\r\n- **What happened?**\r\nDll not found exception\r\n- **What did you expect?**\r\nProgram to run successfully\r\n\r\n### Source code / logs\r\n\r\nUnable to load shared library 'MklImports' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(libMklImports, 1): image not found\r\n\r\n at Microsoft.ML.Transforms.TimeSeries.EigenUtils.Dsytrd(Layout matrixLayout, Uplo uplo, Int32 n, Double[] a, Int32 lda, Double[] d, Double[] e, Double[] tau)\\n   at Microsoft.ML.Transforms.TimeSeries.EigenUtils.MklSymmetricEigenDecomposition(Single[] input, Int32 size, Single[]& eigenValues, Single[]& eigenVectors)\\n   at Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.ComputeSvd(Single[]& singularValues, Single[]& leftSingularvectors)\\n   at Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModeler.AdaptiveSingularSpectrumSequenceModelerInternal.TrainCore(Single[] dataArray, Int32 originalSeriesLength)\\n   at Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModeler.AdaptiveSingularSpectrumSequenceModelerInternal.Train(RoleMappedData data)\\n \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3903","RelatedDescription":"Open issue \"Unable to load shared library 'MklImports' or one of its dependencies.\" (#3903)"},{"Id":"459521313","IsPullRequest":false,"CreatedAt":"2019-06-22T23:58:30","Actor":"justinormont","Number":"3902","RawContent":null,"Title":"Ensure Sanitized Column Names are Unique in AutoML","State":"open","Body":"When creating sanitized column names, we have to ensure the column names are distinct.\r\n\r\n### Error\r\nWe generate non-compilable C# code when there are naming collisions.\r\n\r\nExample build error:\r\n`/private/tmp/out/CivicHonesty/CivicHonesty.Model/DataModels/ModelInput.cs(23,23): Error CS0102: The type 'ModelInput' already contains a definition for 'Country' (CS0102) (CivicHonesty.Model)`\r\n\r\n### Repro\r\nIn the [Civic Honesty dataset](https://dataverse.harvard.edu/api/access/datafile/3451248?format=original&gbrecs=true) (CSV), we cause a naming collision in the generated C# code:\r\n```C#\r\nnamespace CivicHonesty.Model.DataModels\r\n{\r\n    public class ModelInput\r\n    {\r\n        [ColumnName(\"id\"), LoadColumn(0)]\r\n        public float Id { get; set; }\r\n\r\n        [ColumnName(\"country\"), LoadColumn(1)]\r\n        public float Country { get; set; }\r\n\r\n        [ColumnName(\"Country\"), LoadColumn(2)]\r\n        public string Country { get; set; }\r\n\r\n        [ColumnName(\"city\"), LoadColumn(3)]\r\n        public float City { get; set; }\r\n```\r\n\r\nYou'll note the two variables both called `Country`.\r\n\r\nThis comes from the dataset using \"country\" and \"Country\":\r\n> ![image](https://user-images.githubusercontent.com/4080826/59969829-60f00680-950c-11e9-8eeb-141981ae43c3.png)\r\n\r\nDataset: https://dataverse.harvard.edu/api/access/datafile/3451248?format=original&gbrecs=true\r\n\r\nCLI command:\r\n`mlnet auto-train --dataset \"behavioral data (csv file).csv\"  --label-column-name response --mltask multiclass-classification --ignore-columns responsetime,id --max-exploration-time 60 --output-path /tmp/out/ --name CivicHonesty`\r\n\r\n### Cause\r\nCurrently, we have no detection for duplicate column names. \r\n\r\nThe above \"country\" vs. \"Country\" is a rather direct example. This will occur less directly and more often due to our name sanitization where we map, for example, \"$ spent\" and \"% spent\" both to \"__spent\":\r\nhttps://github.com/dotnet/machinelearning/blob/227da9d7db2ce80b073cc64bfd067b04e6189de1/src/mlnet/Utilities/Utils.cs#L67-L83\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/227da9d7db2ce80b073cc64bfd067b04e6189de1/src/mlnet/Utilities/Utils.cs#L47-L50\r\n\r\n\r\n\r\n### Work\r\nTodo:\r\n* Check that sanitized column names are unique\r\n* Check that when converted to C# variable names, the sanitized column names will be unique and valid C# variables","Url":"https://github.com/dotnet/machinelearning/issues/3902","RelatedDescription":"Open issue \"Ensure Sanitized Column Names are Unique in AutoML\" (#3902)"},{"Id":"459480261","IsPullRequest":false,"CreatedAt":"2019-06-22T14:39:22","Actor":"isaacwalkercox","Number":"3901","RawContent":null,"Title":"Why does using statement need to be included?","State":"open","Body":"I was struggling to use the instance of MLContext to create a trainer by writing context.MulticlassClassification.Trainers because the methods were not appearing at the end of Trainers. As soon as I put \"using Microsoft.ML\" at the top of my code after loads of fiddling about, it worked. Can someone please explain why?","Url":"https://github.com/dotnet/machinelearning/issues/3901","RelatedDescription":"Open issue \"Why does using statement need to be included?\" (#3901)"},{"Id":"459444265","IsPullRequest":false,"CreatedAt":"2019-06-22T06:44:48","Actor":"crvkumar","Number":"3900","RawContent":null,"Title":"\"Onnx Type not supported\" error while importing Custom Vision ONNX model","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10 Pro Build 17763.503\r\n- **.NET Version (eg., dotnet --info)**: .Net FrameWork 4.7.2\r\n- **ML.NET Version**:1.1.0\r\n- **ONNX Version::** 1.0 / 1.2 \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nExported a image classification(General(Compact)) ONNX model from Custom Vision and attempted to generate a ONNX Estimator in ML.NET\r\n\r\n- **What happened?**\r\nThe model loading failed with error \"Onnx type not supported\".\r\nThis happens with all image classification ONNX models exported from Custom Vision.\r\nCorresponding Tensorflow models work well in ML.NET.\r\n\r\n- **What did you expect?**\r\nIt is possible to load ONNX models exported from Tensorflow/Scikit-learn. ML.NET should be able to accept ONNX models from Custom Vision.\r\n\r\n### Source code / logs\r\n\r\nvar onnxEstimator = mLContext.Transforms.ApplyOnnxModel(OutputColumnNames, InputColumnNames, OnnxModelPath);\r\n\r\n### Files\r\n[onnx12.zip](https://github.com/dotnet/machinelearning/files/3316591/onnx12.zip)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3900","RelatedDescription":"Open issue \"\"Onnx Type not supported\" error while importing Custom Vision ONNX model\" (#3900)"},{"Id":"459402747","IsPullRequest":true,"CreatedAt":"2019-06-21T23:16:30","Actor":"natke","Number":"3899","RawContent":null,"Title":"Fix #3898 (remove crefs to internal methods)","State":"open","Body":"A new API docs build and rendering system is being rolled out (Schema Driven Processor). This new build system discovered some invalid cross references in the ML.NET code. This PR fixes those.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3899","RelatedDescription":"Open PR \"Fix #3898 (remove crefs to internal methods)\" (#3899)"},{"Id":"459402053","IsPullRequest":false,"CreatedAt":"2019-06-21T23:12:30","Actor":"natke","Number":"3898","RawContent":null,"Title":"Unresolved crefs using new API build and render (SDP)","State":"open","Body":"Errors on the following pages:\r\n\r\nhttps://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.valuemappingestimator-2?branch=SDPTest&view=ml-dotnet\r\n - `xref:Microsoft.ML.ConversionsExtensionsCatalog.MapValue%60%602(Microsoft.ML.TransformsCatalog.ConversionTransforms%2cSystem.Collections.Generic.IEnumerable%7bSystem.Collections.Generic.KeyValuePair%7b%60%600%2c%60%601%7d%7d%2cMicrosoft.ML.InputOutputColumnPair%5b%5d)`\r\n\r\n- `xref:Microsoft.ML.ConversionsExtensionsCatalog.MapValue%60%602(Microsoft.ML.TransformsCatalog.ConversionTransforms%2cSystem.Collections.Generic.IEnumerable%7bSystem.Collections.Generic.KeyValuePair%7b%60%600%2c%60%601%5b%5d%7d%7d%2cMicrosoft.ML.InputOutputColumnPair%5b%5d)`\r\n\r\n- Generated from: https://github.com/dotnet/machinelearning/blob/5163413f3cfab430e49f6fb2a690c160fde46b58/src/Microsoft.ML.Data/Transforms/ValueMapping.cs#L164\r\n\r\nhttps://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.approximatedkernelmappingestimator?branch=SDPTest&view=ml-dotnet\r\n\r\n- `xref:Microsoft.ML.KernelExpansionCatalog.ApproximatedKernelMap(Microsoft.ML.TransformsCatalog%2cMicrosoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions%5b%5d)`\r\n\r\n- Generated from https://github.com/dotnet/machinelearning/blob/5163413f3cfab430e49f6fb2a690c160fde46b58/src/Microsoft.ML.Transforms/RandomFourierFeaturizing.cs#L627\r\n\r\nhttps://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.columncopyingestimator?branch=SDPTest&view=ml-dotnet\r\n\r\n- `xref:Microsoft.ML.TransformExtensionsCatalog.CopyColumns(Microsoft.ML.TransformsCatalog%2cMicrosoft.ML.InputOutputColumnPair%5b%5d)`\r\n\r\n- Generated from https://github.com/dotnet/machinelearning/blob/5163413f3cfab430e49f6fb2a690c160fde46b58/src/Microsoft.ML.Data/Transforms/ColumnCopying.cs#L54","Url":"https://github.com/dotnet/machinelearning/issues/3898","RelatedDescription":"Open issue \"Unresolved crefs using new API build and render (SDP)\" (#3898)"},{"Id":"459383486","IsPullRequest":false,"CreatedAt":"2019-06-21T21:43:46","Actor":"famschopman","Number":"3897","RawContent":null,"Title":"Guidance on simple binaryclassification","State":"open","Body":"Trying to get a very simple binary classification to work. And while I feel I am just touching on the ABC's I am running into various issues. This shouldn't be rocket science.\r\n\r\nThe issue I get is \"Schema mismatch for feature column 'Features': expected Vector<Single>, got Vector<String>\r\nParameter name: inputSchema\"\r\n\r\nTo make sure the classification would work I made sure the Label column that I want to eventually predict is a boolean type. (I couldn't find clear docs on why the label column was needed but I assumed the training requires a single potential target for predictions which is the label, and if you want to predict other properties you need to train a model specifically for that property).\r\n\r\nI also made sure I transformed the string property first. \r\n\r\n```\r\npublic class Employee\r\n        {\r\n            [LoadColumn(0)]\r\n            public float Age { get; set; }\r\n            [LoadColumn(1), ColumnName(\"Label\")]\r\n            public bool Attrition { get; set; }\r\n            [LoadColumn(2)]\r\n            public string BusinessTravel { get; set; }\r\n            [LoadColumn(3)]\r\n            public float DailyRate { get; set; }\r\n        }\r\n\r\n        public ActionResult Turnover()\r\n        {\r\n            MLContext mlContext = new MLContext();\r\n\r\n            var _appPath = AppDomain.CurrentDomain.BaseDirectory;\r\n            var _dataPath = Path.Combine(_appPath, \"Datasets\", \"attrition_small_dataset.csv\");\r\n            IDataView dataView = mlContext.Data.LoadFromTextFile<Employee2>(_dataPath, separatorChar: ',', hasHeader: true);\r\n\r\n            var categoricalEstimator = mlContext.Transforms.Categorical.OneHotEncoding(\"BusinessTravel\");\r\n            IDataView transformedData = categoricalEstimator.Fit(dataView).Transform(dataView);\r\n            \r\n            string[] featureColumnNames =\r\n                dataView.Schema\r\n                    .Select(column => column.Name)\r\n                    .Where(columnName => columnName != \"Label\").ToArray();\r\n\r\n            IEstimator<ITransformer> dataPrepEstimator = mlContext.Transforms.Concatenate(\"Features\", featureColumnNames);\r\n            IDataView preprocessedTrainData = dataPrepEstimator.Fit(dataView).Transform(dataView);\r\n\r\n            var sdcaEstimator = mlContext.BinaryClassification.Trainers.SdcaLogisticRegression();\r\n            var sdcaModel = sdcaEstimator.Fit(preprocessedTrainData);\r\n\r\n            return View(\"Turnover\");\r\n        }\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3897","RelatedDescription":"Open issue \"Guidance on simple binaryclassification\" (#3897)"},{"Id":"459091316","IsPullRequest":true,"CreatedAt":"2019-06-21T17:40:23","Actor":"harishsk","Number":"3894","RawContent":null,"Title":"Fixed build errors resulting from upgrading to VS2019 compilers","State":"closed","Body":"Fixes #3893 \r\n\r\nThe default CMAKE_C_FLAG for debug configuration sets /ZI to generate a PDB capable of edit and continue. In the new compilers, this is incompatible with /guard:cf which we set for security reasons. So to fix, we need to go back to a regular pdb generated by the /Zi flag. \r\n\r\nSince this part of the default CMake rules, we need to override the full default set and update only that particular flag.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3894","RelatedDescription":"Closed or merged PR \"Fixed build errors resulting from upgrading to VS2019 compilers\" (#3894)"},{"Id":"458913689","IsPullRequest":false,"CreatedAt":"2019-06-21T17:40:22","Actor":"wschin","Number":"3893","RawContent":null,"Title":"Visual Studio 2019 Building Problem","State":"closed","Body":"I got a clean machine and installed the latest Visual Studio 2019. After calling `.\\build.cmd`, I got the following error message.\r\n```\r\n  \"Repos\\machinelearning\\bin\\obj\\x64.Debug\\Native\\INSTALL.vcxproj\" (rebuild target) (1) ->\r\n  \"Repos\\machinelearning\\bin\\obj\\x64.Debug\\Native\\ALL_BUILD.vcxproj\" (default target) (3:2) ->\r\n  \"Repos\\machinelearning\\bin\\obj\\x64.Debug\\Native\\SymSgdNative\\SymSgdNative.vcxproj\" (default target) (10:2) ->\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.CppCommon.targets(429,5): error MSB6006: \"CL.exe\" exited with code 2. [Repos\\machinelearning\\bin\\obj\\x64.Debug\\Native\\SymSgdNative\\SymSgdNative.vcxproj] [Repos\\machinelearning\\src\\Native\\build.proj]\r\n```\r\nDid I do something naïve? To resolve that bug, I remove one line below the it works.\r\n```\r\ndiff --git a/src/Native/CMakeLists.txt b/src/Native/CMakeLists.txt\r\nindex a814277e..87b0606c 100644\r\n--- a/src/Native/CMakeLists.txt\r\n+++ b/src/Native/CMakeLists.txt\r\n@@ -21,8 +21,6 @@ if(WIN32)\r\n     add_compile_options($<$<CONFIG:Debug>:/MTd>) # /MT will static link the VC runtime library, so it doesn't need to be installed on the target machine\r\n     add_compile_options($<$<CONFIG:Release>:/MT>)\r\n     add_compile_options($<$<CONFIG:RelWithDebInfo>:/MT>)\r\n-    add_compile_options(/guard:cf)\r\n     add_compile_options(/d2Zi+) # make optimized builds debugging easier\r\n     add_compile_options(/nologo) # Suppress Startup Banner\r\n     add_compile_options(/W3) # set warning level to 3\r\n     add_compile_options(/WX) # treat warnings as errors\r\n@@ -46,9 +44,6 @@ if(WIN32)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3893","RelatedDescription":"Closed issue \"Visual Studio 2019 Building Problem\" (#3893)"},{"Id":"459154707","IsPullRequest":false,"CreatedAt":"2019-06-21T11:38:07","Actor":"famschopman","Number":"3895","RawContent":null,"Title":"PermutationFeatureImportance returns more features than model provides","State":"open","Body":"I have a model, with 35 features. After transforming the string values into vectors, I end up with a transformed model with 54 features.\r\n\r\nAfter training I want to evaluate the feature weight, however I end up with much more features (104, so twice) than available. An \"index out of bounds\" on finding the corresponding feature column is the result.\r\n\r\nIs this an issue with ML.net or case of 'incompatible user'?\r\n\r\n```\r\npublic class Employee\r\n        {\r\n            [LoadColumn(0)]\r\n            public float Age { get; set; }\r\n            [LoadColumn(1)]\r\n            [ColumnName(\"Label\")]\r\n            public float Attrition { get; set; }\r\n            [LoadColumn(2)]\r\n            public string BusinessTravel { get; set; }\r\n            [LoadColumn(3)]\r\n            public float DailyRate { get; set; }\r\n            [LoadColumn(4)]\r\n            public string Department { get; set; }\r\n            [LoadColumn(5)]\r\n            public float DistanceFromHome { get; set; }\r\n            [LoadColumn(6)]\r\n            public float Education { get; set; }\r\n            [LoadColumn(7)]\r\n            public string EducationField { get; set; }\r\n            [LoadColumn(8)]\r\n            public float EmployeeCount { get; set; }\r\n            [LoadColumn(9)]\r\n            public float EmployeeNumber { get; set; }\r\n            [LoadColumn(10)]\r\n            public float EnvironmentSatisfaction { get; set; }\r\n            [LoadColumn(11)]\r\n            public string Gender { get; set; }\r\n            [LoadColumn(12)]\r\n            public float HourlyRate { get; set; }\r\n            [LoadColumn(13)]\r\n            public float JobInvolvement { get; set; }\r\n            [LoadColumn(14)]\r\n            public float JobLevel { get; set; }\r\n            [LoadColumn(15)]\r\n            public string JobRole { get; set; }\r\n            [LoadColumn(16)]\r\n            public float JobSatisfaction { get; set; }\r\n            [LoadColumn(17)]\r\n            public string MaritalStatus { get; set; }\r\n            [LoadColumn(18)]\r\n            public float MonthlyIncome { get; set; }\r\n            [LoadColumn(19)]\r\n            public float MonthlyRate { get; set; }\r\n            [LoadColumn(20)]\r\n            public float NumCompaniesWorked { get; set; }\r\n            [LoadColumn(21)]\r\n            public string Over18 { get; set; }\r\n            [LoadColumn(22)]\r\n            public string OverTime { get; set; }\r\n            [LoadColumn(23)]\r\n            public float PercentSalaryHike { get; set; }\r\n            [LoadColumn(24)]\r\n            public float PerformanceRating { get; set; }\r\n            [LoadColumn(25)]\r\n            public float RelationshipSatisfaction { get; set; }\r\n            [LoadColumn(26)]\r\n            public float StandardHours { get; set; }\r\n            [LoadColumn(27)]\r\n            public float StockOptionLevel { get; set; }\r\n            [LoadColumn(28)]\r\n            public float TotalWorkingYears { get; set; }\r\n            [LoadColumn(29)]\r\n            public float TrainingTimesLastYear { get; set; }\r\n            [LoadColumn(30)]\r\n            public float WorkLifeBalance { get; set; }\r\n            [LoadColumn(31)]\r\n            public float YearsAtCompany { get; set; }\r\n            [LoadColumn(32)]\r\n            public float YearsInCurrentRole { get; set; }\r\n            [LoadColumn(33)]\r\n            public float YearsSinceLastPromotion { get; set; }\r\n            [LoadColumn(34)]\r\n            public float YearsWithCurrManager { get; set; }\r\n        }\r\n        public class EmployeeTransformed\r\n        {\r\n            public float Age { get; set; }\r\n            [ColumnName(\"Label\")]\r\n            public float Attrition { get; set; }\r\n            public float[] BusinessTravel { get; set; }\r\n            public float DailyRate { get; set; }\r\n            public float[] Department { get; set; }\r\n            public float DistanceFromHome { get; set; }\r\n            public float Education { get; set; }\r\n            public float[] EducationField { get; set; }\r\n            public float EmployeeCount { get; set; }\r\n            public float EmployeeNumber { get; set; }\r\n            public float EnvironmentSatisfaction { get; set; }\r\n            public float[] Gender { get; set; }\r\n            public float HourlyRate { get; set; }\r\n            public float JobInvolvement { get; set; }\r\n            public float JobLevel { get; set; }\r\n            public float[] JobRole { get; set; }\r\n            public float JobSatisfaction { get; set; }\r\n            public float[] MaritalStatus { get; set; }\r\n            public float MonthlyIncome { get; set; }\r\n            public float MonthlyRate { get; set; }\r\n            public float NumCompaniesWorked { get; set; }\r\n            public float[] Over18 { get; set; }\r\n            public float[] OverTime { get; set; }\r\n            public float PercentSalaryHike { get; set; }\r\n            public float PerformanceRating { get; set; }\r\n            public float RelationshipSatisfaction { get; set; }\r\n            public float StandardHours { get; set; }\r\n            public float StockOptionLevel { get; set; }\r\n            public float TotalWorkingYears { get; set; }\r\n            public float TrainingTimesLastYear { get; set; }\r\n            public float WorkLifeBalance { get; set; }\r\n            public float YearsAtCompany { get; set; }\r\n            public float YearsInCurrentRole { get; set; }\r\n            public float YearsSinceLastPromotion { get; set; }\r\n            public float YearsWithCurrManager { get; set; }\r\n\r\n        }\r\n\r\n        public ActionResult Turnover()\r\n        {\r\n            MLContext mlContext = new MLContext();\r\n\r\n            var _appPath = AppDomain.CurrentDomain.BaseDirectory;\r\n            //var _dataPath = Path.Combine(_appPath, \"Datasets\", \"WA_Fn-UseC_-HR-Employee-Attrition.csv\");\r\n            var _dataPath = Path.Combine(_appPath, \"Datasets\", \"attrition_small_dataset.csv\");\r\n\r\n            // Load data from file\r\n            IDataView dataView = mlContext.Data.LoadFromTextFile<Employee>(_dataPath, separatorChar: ',', hasHeader: true);\r\n            var a = mlContext.Data.CreateEnumerable<Employee>(dataView, true).ToList();\r\n\r\n            // Define categorical transform estimator\r\n            var categoricalEstimator = mlContext.Transforms.Categorical.OneHotEncoding(\"BusinessTravel\")\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Department\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"EducationField\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Gender\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"JobRole\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"MaritalStatus\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Over18\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"OverTime\"));\r\n            IDataView transformedData = categoricalEstimator.Fit(dataView).Transform(dataView);\r\n\r\n            // Split into train and test dataset\r\n            DataOperationsCatalog.TrainTestData dataSplit = mlContext.Data.TrainTestSplit(transformedData, testFraction: 0.2);\r\n            IDataView trainData = dataSplit.TrainSet;\r\n            IDataView testData = dataSplit.TestSet;\r\n\r\n            // Get the column names of input features.\r\n            string[] featureColumnNames =\r\n                trainData.Schema\r\n                    .Select(column => column.Name)\r\n                    .Where(columnName => columnName != \"Label\").ToArray();\r\n\r\n            // Define estimator with data pre-processing steps\r\n            IEstimator<ITransformer> dataPrepEstimator =\r\n                mlContext.Transforms.Concatenate(\"Features\", featureColumnNames)\r\n                    .Append(mlContext.Transforms.NormalizeMinMax(\"Features\"));\r\n\r\n            IDataView preprocessedTrainData = dataPrepEstimator.Fit(trainData).Transform(trainData);\r\n            var e = mlContext.Data.CreateEnumerable<EmployeeTransformed>(preprocessedTrainData, true).ToList();\r\n\r\n            /*\r\n            //  Define Stochastic Dual Coordinate Ascent machine learning estimator\r\n            //var sdcaEstimator = mlContext.Regression.Trainers.Sdca(labelColumnName: \"Age\", featureColumnName: \"Features\");\r\n            //var sdcaEstimator = mlContext.Regression.Trainers.Sdca(labelColumnName: \"Attrition\", maximumNumberOfIterations: 100);\r\n            //var sdcaEstimator = mlContext.BinaryClassification.Trainers.FastTree(labelColumnName : \"Attrition\", featureColumnName : \"Features\", numberOfLeaves: 50, numberOfTrees: 50, minimumExampleCountPerLeaf: 20);\r\n            */\r\n            var sdcaEstimator = mlContext.Regression.Trainers.Sdca();\r\n\r\n            // Train machine learning model\r\n            var sdcaModel = sdcaEstimator.Fit(preprocessedTrainData);\r\n\r\n            // Explain the model with Permutation Feature Importance (PFI)\r\n            ImmutableArray<RegressionMetricsStatistics> permutationFeatureImportance =\r\n            mlContext\r\n                .Regression\r\n                .PermutationFeatureImportance(sdcaModel, preprocessedTrainData, permutationCount: 3);\r\n\r\n            // Order features by importance\r\n            var featureImportanceMetrics =\r\n                permutationFeatureImportance\r\n                    .Select((metric, index) => new { index, metric.RSquared })\r\n                    .OrderByDescending(myFeatures => Math.Abs(myFeatures.RSquared.Mean));\r\n\r\n            var line = \"Feature\\tPFI <br>\";\r\n\r\n            var z = featureColumnNames;\r\n            foreach (var feature in featureImportanceMetrics)\r\n            {\r\n                line += $\"{featureColumnNames[feature.index],-20}|\\t{feature.RSquared.Mean:F6} <br>\";\r\n            }\r\n\r\n            return Content(line);\r\n        }\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3895","RelatedDescription":"Open issue \"PermutationFeatureImportance returns more features than model provides\" (#3895)"},{"Id":"458779277","IsPullRequest":true,"CreatedAt":"2019-06-20T17:24:53","Actor":"artidoro","Number":"3892","RawContent":null,"Title":"Tree based trainers implement ICanGetSummaryAsIDataView","State":"open","Body":"Fixes #3755.\r\n\r\nNimbusML did not have access to the details on the tree structure.\r\nThis PR implements the `ICanGetSummaryAsIDataView` interface which is used in the `Summarize` entrypoint to pass a summary of the model parameters to NimbusML in the form of an `IDataView`.\r\n\r\nI create a utility method that does the conversion from `RegressionTreeBase` to `IDataView` with special treatment for `QuantileRegressionTrees` which have additional information.\r\n\r\nIn the `IDataView`, each node has its own row and the columns correspond to the fields describing each node. To determine which tree the node belongs to there is a `TreeID` column.","Url":"https://github.com/dotnet/machinelearning/pull/3892","RelatedDescription":"Open PR \"Tree based trainers implement ICanGetSummaryAsIDataView\" (#3892)"},{"Id":"458736735","IsPullRequest":false,"CreatedAt":"2019-06-20T15:49:17","Actor":"eerhardt","Number":"3891","RawContent":null,"Title":"Examples need high-level explanation/summary","State":"open","Body":"The examples look well written, but there are a few things I would like to see:\n\n1. There should be a high-level explanation of each one, what is it doing and why. There are 5 different examples here. The first 2 and the last 2 appear to be duplicates - I can't tell the difference between them by reading them.  Even between the first 2, it is subtle what the difference is (the first one you can't save and load the model, the second you can). It would be great to explicitly call this out before each example.\n2. The 3rd example is fairly complicated, but with no explanation of what is happening. What defines a super alien? What is the overall scenario being achieved? What are the attributes for? It takes quite a bit to try to figure all these things out from the code without a high-level summary of the scenario.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 2af85725-9d23-0cff-c8ca-f915a94663bd\n* Version Independent ID: 8afa2992-aa5b-4bb1-7841-6dcf26151288\n* Content: [CustomMappingCatalog.CustomMapping(TransformsCatalog, Action&lt;TSrc,TDst&gt;, String, SchemaDefinition, SchemaDefinition) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.custommappingcatalog.custommapping?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML/CustomMappingCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/CustomMappingCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3891","RelatedDescription":"Open issue \"Examples need high-level explanation/summary\" (#3891)"},{"Id":"457887633","IsPullRequest":false,"CreatedAt":"2019-06-20T08:58:31","Actor":"magicdict","Number":"3884","RawContent":null,"Title":"How to set metric for lightgbm?","State":"closed","Body":"I compare the python lightgbm and ml.net,some parm can't set.\r\n```python\r\nparams = {\r\n    \"boosting_type\": \"gbdt\",\r\n    \"objective\": \"binary\",\r\n    \"metric\": \"binary_logloss\",\r\n    \"num_leaves\": 32,\r\n    \"learning_rate\": 0.05,\r\n    \"feature_fraction\": 0.9,\r\n    \"bagging_fraction\": 0.8,\r\n    \"bagging_freq\": 5,\r\n    \"verbose\": 1,\r\n}\r\n```\r\nmetric is one of miss parm.\r\n\r\nBy the way,how to display the progress of training lightgbm at console like python?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3884","RelatedDescription":"Closed issue \"How to set metric for lightgbm?\" (#3884)"},{"Id":"458305426","IsPullRequest":false,"CreatedAt":"2019-06-20T08:48:13","Actor":"magicdict","Number":"3889","RawContent":null,"Title":"How to set Chinese RemoveDefaultStopWords? ","State":"closed","Body":"How to set Chinese RemoveDefaultStopWords? \r\nI Guess I can load a stop word list form a external file.","Url":"https://github.com/dotnet/machinelearning/issues/3889","RelatedDescription":"Closed issue \"How to set Chinese RemoveDefaultStopWords? \" (#3889)"},{"Id":"458393354","IsPullRequest":false,"CreatedAt":"2019-06-20T07:19:50","Actor":"magicdict","Number":"3890","RawContent":null,"Title":"some questions about PredictionEngine and others","State":"open","Body":"### System information\r\n\r\n- Win7:\r\n- NetCore 3.0 Preview6\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTry to create PredictionEngine\r\n\r\n- **What happened?**\r\n\r\nAn unhandled exception of type 'System.ArgumentOutOfRangeException' occurred in Microsoft.ML.Core.dll: 'Features column 'Feature' not found'\r\n\r\n```CSharp\r\nPredictionEngine<Survey, SurveyPrediction> predictionFunction =\r\n             mlContext.Model.CreatePredictionEngine<Survey, SurveyPrediction>\r\n\r\n```\r\n- **What did you expect?**\r\n\r\npredictionFunction is create \r\n\r\n### Source code / logs\r\n\r\n```Csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers.LightGbm;\r\n\r\nnamespace Happiness\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext(seed: 2019);\r\n            var trainingDataView = mlContext.Data.LoadFromTextFile<Survey>(@\"F:\\Happiness\\data\\happiness_train_abbr.csv\", hasHeader: true, separatorChar: ',');\r\n            var SubmitDataView = mlContext.Data.LoadFromTextFile<SurveyTest>(@\"F:\\Happiness\\data\\happiness_test_abbr.csv\", hasHeader: true, separatorChar: ',');\r\n\r\n            //数据准备\r\n            //特征项目\r\n            var dataProcessPipeline = mlContext.Transforms.Concatenate(\"Features\", nameof(Survey.birth),\r\n                                                                                   nameof(Survey.car),\r\n                                                                                   nameof(Survey.class_1),\r\n                                                                                   nameof(Survey.county)\r\n                                                                                   );\r\n\r\n            var DataTransformer = dataProcessPipeline.Fit(trainingDataView);\r\n            trainingDataView = DataTransformer.Transform(trainingDataView);\r\n            SubmitDataView = DataTransformer.Transform(SubmitDataView);\r\n\r\n            DataOperationsCatalog.TrainTestData dataSplit = mlContext.Data.TrainTestSplit(trainingDataView, testFraction: 0.2);\r\n            IDataView trainData = dataSplit.TrainSet;\r\n            IDataView testData = dataSplit.TestSet;\r\n\r\n            IEnumerable<Survey> HappinessDataEnumerable =\r\n                mlContext.Data.CreateEnumerable<Survey>(trainData, reuseRowObject: true);\r\n\r\n            int MaxCnt = 10;\r\n            int Current = 0;\r\n            // Iterate over each row\r\n            foreach (Survey row in HappinessDataEnumerable)\r\n            {\r\n                // Do something (print out Size property) with current Housing Data object being evaluated\r\n                Console.WriteLine(row.id + \":\" + row.height_cm + \",\" + row.happiness);\r\n                Current++;\r\n                if (Current == MaxCnt) break;\r\n            }\r\n\r\n\r\n            // Define trainer options.\r\n            var options = new LightGbmRegressionTrainer.Options\r\n            {\r\n                LabelColumnName = nameof(Survey.happiness),\r\n                FeatureColumnName = \"Features\",\r\n                // How many leaves a single tree should have.\r\n                NumberOfLeaves = 64,\r\n                NumberOfIterations = 100,\r\n                EvaluationMetric = LightGbmRegressionTrainer.Options.EvaluateMetricType.RootMeanSquaredError,\r\n                LearningRate = 0.001,\r\n                Booster = new Microsoft.ML.Trainers.LightGbm.GossBooster.Options()\r\n                {\r\n                    TopRate = 0.3,\r\n                    OtherRate = 0.2\r\n                }\r\n            };\r\n\r\n            var LightGBMEstimator = mlContext.Regression.Trainers.LightGbm(options);\r\n            var LightGBMTransformer = LightGBMEstimator.Fit(trainData);\r\n            testData = LightGBMTransformer.Transform(testData);\r\n            var metrics = mlContext.Regression.Evaluate(testData, labelColumnName: nameof(Survey.happiness));\r\n            Common.ConsoleHelper.PrintRegressionMetrics(LightGBMEstimator.ToString(), metrics);\r\n\r\n            PredictionEngine<Survey, SurveyPrediction> predictionFunction =\r\n             mlContext.Model.CreatePredictionEngine<Survey, SurveyPrediction>(LightGBMTransformer);\r\n            var Submit = LightGBMTransformer.Transform(SubmitDataView);\r\n            HappinessDataEnumerable =\r\n                mlContext.Data.CreateEnumerable<Survey>(Submit, reuseRowObject: true);\r\n\r\n            Current = 0;\r\n            foreach (Survey row in HappinessDataEnumerable)\r\n            {\r\n                // Do something (print out Size property) with current Housing Data object being evaluated\r\n                var predictions = predictionFunction.Predict(row);\r\n                Console.WriteLine(predictions.id + \":\" + predictions.height_cm + \",\" + predictions.Prediction);\r\n                Current++;\r\n                if (Current == MaxCnt) break;\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\nThe LightGBM look can work and I get the Metrics,so I think the model is no problem...\r\n```shell\r\n*************************************************\r\n*       Metrics for Microsoft.ML.Trainers.LightGbm.LightGbmRegressionTrainer regression model      \r\n*------------------------------------------------\r\n*       LossFn:        1.09\r\n*       R2 Score:      0.02\r\n*       Absolute loss: .61\r\n*       Squared loss:  1.09\r\n*       RMS loss:      1.04\r\n*************************************************\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3890","RelatedDescription":"Open issue \"some questions about PredictionEngine and others\" (#3890)"},{"Id":"458195107","IsPullRequest":false,"CreatedAt":"2019-06-19T19:46:46","Actor":"luisquintanilla","Number":"3888","RawContent":null,"Title":"exampleWeightColumnName parameter name and description may be confusing","State":"open","Body":"The purpose or use of this parameter may be confusing for users as to what the intent of it is based on the name and description. \r\n\r\n- It would be good to keep the name inline with the other column names (i.e. featureColumnName, labelColumnName). \r\n- Adding what type is expected by the column in the description would help as well (The column data must be Single). \r\n- Finally, it would help to describe the function of this parameter. Is this applying a weight to the individual observation, is it meant to set the initial weights of the features, or is it meant to set the importance of the features? To my knowledge this is to set the importance of the individual observation but clarification would help.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: ca42bd00-b107-5a38-06c2-5b33e5e361fc\r\n* Version Independent ID: 9eceb504-86f7-3e71-7ddd-97e21254c026\r\n* Content: [StandardTrainersCatalog.Sdca Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.standardtrainerscatalog.sdca?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML/StandardTrainersCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/StandardTrainersCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3888","RelatedDescription":"Open issue \"exampleWeightColumnName parameter name and description may be confusing\" (#3888)"},{"Id":"458182738","IsPullRequest":false,"CreatedAt":"2019-06-19T19:15:26","Actor":"justinormont","Number":"3887","RawContent":null,"Title":"SymSGD IndexOutOfRangeException","State":"open","Body":"I get an error when using OVA-SymSGD on an internal dataset. Other learners, like SDCA and OVA-AveragedPerceptron work successfully (though LightGBM dies due to https://github.com/dotnet/machinelearning/issues/1625).\r\n\r\n## Error:\r\n```md\r\nException: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.OneVersusAllTrainer.TrainOne(IChannel ch, ITrainerEstimator`2 trainer, RoleMappedData data, Int32 cls)\r\n   at Microsoft.ML.Trainers.OneVersusAllTrainer.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n```\r\n\r\n## Pipeline\r\nBelow is the same pipeline but using SDCA, which runs successfully.\r\n```C#\r\nvar dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"label_col\", \"label_col\")\r\n                  .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"col1\", \"col1\"), new InputOutputColumnPair(\"col2\", \"col2\"), new InputOutputColumnPair(\"col3\", \"col3\"), new InputOutputColumnPair(\"col4\", \"col4\"), new InputOutputColumnPair(\"col5\", \"col5\") }))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col6_tf\", \"col6\"))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col7_tf\", \"col7\"))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col8_tf\", \"col8\"))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col9_tf\", \"col9\"))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col10_tf\", \"col10\"))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col11_tf\", \"col11\"))\r\n                  .Append(mlContext.Transforms.Text.FeaturizeText(\"col12_tf\", \"col12\"))\r\n                  .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"col1\", \"col2\", \"col3\", \"col4\", \"col5\", \"col6_tf\", \"col7_tf\", \"col8_tf\", \"col9_tf\", \"col10_tf\", \"col11_tf\", \"col12_tf\", \"col13\", \"col14\", \"col15\", \"col16\", \"col17\", \"col18\", \"col19\", \"col20\", \"col21\" }))\r\n                  .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"))\r\n                  .AppendCacheCheckpoint(mlContext);\r\n\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName: \"label_col\", featureColumnName: \"Features\")\r\n                  .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3887","RelatedDescription":"Open issue \"SymSGD IndexOutOfRangeException\" (#3887)"},{"Id":"458151759","IsPullRequest":false,"CreatedAt":"2019-06-19T18:11:06","Actor":"CyberFranck","Number":"3886","RawContent":null,"Title":"Fit endlessly loop if code in a form","State":"open","Body":"I have create a small winform project. made a very basic SDCA regression for one property of an object. So far the code has been in the program.cs Main() method. Now i created an empty new form called Form1. There is no control yet and i just copied the code from the program.cs Main() directly into the Form1_Load().\r\n\r\nThe problem is that the code endless loop on the `IEstimator<ITransformer>.Fit(IDataView Input)`.\r\n\r\nin program.cs the code takes about 3 seconds to complete every single time and CPU reach about 75%. When it run from the form the code run indefinitely (longest i waited was 45 min while away on lunch break). Tried couple hundreds of time on 2 different PC and we both have the same issue. It never completes.\r\n\r\nI tried removing [STAThread] on the program.cs Main() just for the fun and the code still runs fine there so it's not necessary (anyway not for the Fit() method).","Url":"https://github.com/dotnet/machinelearning/issues/3886","RelatedDescription":"Open issue \"Fit endlessly loop if code in a form\" (#3886)"},{"Id":"458133705","IsPullRequest":false,"CreatedAt":"2019-06-19T17:25:44","Actor":"justinormont","Number":"3885","RawContent":null,"Title":"Rationalize Infinity handling in Normalizers","State":"open","Body":"A while back, I looked in to how can we handle values of Infinity & -Infinity in our normalizers. We should standardize the handling of +/- Infinity in our normalizers.\r\n\r\n## Background\r\nValues of Infinity are rather hard for users to handle as NAHandle ignores the Infinity & -Infinity values. I believe you would need a custom mapping transform to deal with these values.\r\n\r\nThe comes up in a dataset where I'm calculating pairwise features, eg: { x+y, x*y, x*y*y, x*e^y, ... }. I am overflowing into Infinity. This leads to FastTree ignoring rows, and SDCA dying w/ Infinite bias terms. \r\n\r\n## Summary\r\nMinMaxNormalizer+NAHandleTransform seems to be the best option to handle data values of ±Infinity. This option isn't perfect, as it is slow (causes an additional full pass of the data), and doubles your number of features.  \r\n\r\nCurrently, when a user applies normalization which replaces Infinity data values with NA we then silently skips rows. This is confusing to users and hard to debug.\r\n\r\n## Recommendation\r\n* Have MinMaxNormalizer replace +/- Infinity w/ 0.00 (default on with option to disable). \r\nThis will cause the (recommended to add before many learners) normalization to no longer replace Infinity with NA, which currently causes the learners to ignore the rows. \r\n* Modify the other normalization transforms to have consistent handling of Infinity data values.\r\n \r\n## Transforms' handling of Infinity\r\n\r\n**NAHandleTransform:**\r\n🔴 Bad: Ignores Infinity (maps Infinity => Infinity). \r\nAll learners work, but some skip rows w/ Infinity\r\n\r\n \r\n\r\n**MinMaxNormalizer:**\r\n📒 Not good: Replaces Infinity w/ NA. But this transform is recommended to add just before linear learners, which causes the learner to see NA, and drop the row (for either training or prediction). \r\nAll learners work, but skips rows w/ NA in it. \r\n\r\n \r\n\r\n**MeanVarNormalizer:**\r\n🔴 Bad: Ignores Infinity (maps Infinity => Infinity), but normalizes the other numbers correctly. \r\nAll learners work, but some skip rows w/ Infinity in it.\r\n\r\n \r\n\r\n**LogMeanVarNormalizer:**\r\n✅ Good: Replaces Infinity w/ 0. Could be better w/ an indicator column for the imputing. \r\nAll learners work. \r\n\r\n \r\n\r\n**BinNormalizer:**\r\n🔴 Very bad: Replaces Infinity w/ 1, but replaces all other values in the column w/ 0 also. Effectively wipes out the column. \r\nNo learners die, but the column is wiped out.\r\n\r\n \r\n\r\n**SupervisedBinNormalizer:**\r\n🔴 Very bad: Replaces Infinity w/ 0, but replaces all other values in the column w/ 0 also. Effectively wipes out the column. \r\nNo learners die, but the column is wiped out.\r\n\r\n \r\n\r\n**MinMaxNormalizer+NAHandleTransform:**\r\n✅ Very good: Replaces Infinity w/ 0 (NA then 0), and also adds an indicator column for the imputing. Double the size of the feature column though and causes a full pass of the data (trainable transform).\r\nAll learners work great.\r\n\r\n------\r\n\r\nThe above analysis is on the internal version of ML.NET, but I don't expect there has been changes to the behavior. ","Url":"https://github.com/dotnet/machinelearning/issues/3885","RelatedDescription":"Open issue \"Rationalize Infinity handling in Normalizers\" (#3885)"},{"Id":"457885125","IsPullRequest":false,"CreatedAt":"2019-06-19T08:49:08","Actor":"siddusri1990","Number":"3883","RawContent":null,"Title":"Schema mismatch for label column '': expected Single, got Key<UInt32> Parameter name: labelCol","State":"open","Body":"I am trying to create my first ML regression model using ML.Net (.net core 2.1), getting above error message when fitting the pipeline with data view. Could you please help with correct solution. please find the code which I was trying, here I have to predict the Name result based on Name and Duplicate name values.\r\n public class FeatureData\r\n    {\r\n        [LoadColumn(3)]\r\n        public string Name;\r\n\r\n        [LoadColumn(20)]\r\n        public string DuplicateName;\r\n        [LoadColumn(31)]\r\n        public string NameResult;\r\n    }\r\n    public class LabelData\r\n    {\r\n        [ColumnName(\"Score\")]\r\n        public string NameResult;\r\n    }\r\n\r\n      IDataView dataView = mlContext.Data.LoadFromTextFile<FeatureData>(dataPath, hasHeader: true, separatorChar: ',',allowQuoting:true);\r\n   \r\n            var pipeline = mlContext.Transforms.CopyColumns(outputColumnName: \"Label\", inputColumnName: \"NameResult\")\r\n .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"NameEncoded\", inputColumnName: \"Name\"))\r\n.Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"DuplicateNameEncoded\", inputColumnName: \"DuplicateName\"))\r\n.Append(mlContext.Transforms.Concatenate(\"Features\", \"NameEncoded\", \"DuplicateNameEncoded\"))\r\n.Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n            var model = pipeline.Fit(dataView); ///getting above error here","Url":"https://github.com/dotnet/machinelearning/issues/3883","RelatedDescription":"Open issue \"Schema mismatch for label column '': expected Single, got Key<UInt32> Parameter name: labelCol\" (#3883)"},{"Id":"457778085","IsPullRequest":true,"CreatedAt":"2019-06-19T02:37:40","Actor":"Dmitry-A","Number":"3882","RawContent":null,"Title":"[AutoML] bring AutoML API library to master","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3882","RelatedDescription":"Open PR \"[AutoML] bring AutoML API library to master\" (#3882)"},{"Id":"457749970","IsPullRequest":true,"CreatedAt":"2019-06-19T00:15:53","Actor":"wschin","Number":"3881","RawContent":null,"Title":"ONNXTransform Upgrade to Enable Non-tensor Types","State":"open","Body":"The current ONNXTransform only operates on tensor types. As many ONNX models (especially classifiers) produce Seq<Map<T, float>> where T can be either int or string, we should remove that limitation.\r\n\r\nThis should fix #3900.","Url":"https://github.com/dotnet/machinelearning/pull/3881","RelatedDescription":"Open PR \"ONNXTransform Upgrade to Enable Non-tensor Types\" (#3881)"},{"Id":"457740736","IsPullRequest":true,"CreatedAt":"2019-06-18T23:33:26","Actor":"justinormont","Number":"3880","RawContent":null,"Title":"[WIP] Improve column purpose detection for sparse text datasets","State":"open","Body":"Fixes #3879 by not counting empty text values when calculating the column statistics.\r\n\r\nBackground from #3879:\r\n> AutoML does poorly on a few text datasets. For example, a text dataset we benchmark on has an accuracy of 0.60 vs. an expected accuracy of 0.85. \r\n> \r\n> This is caused by us detecting the text columns columns as **categorical** instead of **free text**. For the this dataset, this is due to the text column being 84% blank (a sparsely filled out column). \r\n> \r\n> **To fix:** \r\n> We need to detect the column purpose only on the set (non-blank) values.\r\n> \r\n> Recommend subtracting the blank values from `data.Count`:\r\n> https://github.com/dotnet/machinelearning/blob/227da9d7db2ce80b073cc64bfd067b04e6189de1/src/Microsoft.ML.AutoML/ColumnInference/PurposeInference.cs#L148-L158\r\n> \r\n> Currently `avgLength`, `cardinalityRatio`, `avgSpaces` are artificially lower due to the missing values.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3880","RelatedDescription":"Open PR \"[WIP] Improve column purpose detection for sparse text datasets\" (#3880)"},{"Id":"457736707","IsPullRequest":false,"CreatedAt":"2019-06-18T23:17:45","Actor":"justinormont","Number":"3879","RawContent":null,"Title":"Improving column purpose detection for sparse datasets","State":"open","Body":"AutoML does poorly on a few text datasets. For example, a text dataset we benchmark on has an accuracy of 0.60 vs. an expected accuracy of 0.85. \r\n\r\nThis is caused by us detecting the text columns columns as **categorical** instead of **free text**. For the this dataset, this is due to the text column being 84% blank (a sparsely filled out column). \r\n\r\n**To fix:** \r\nWe need to detect the column purpose only on the set (non-blank) values.\r\n\r\nRecommend subtracting the blank values from `data.Count`:\r\nhttps://github.com/dotnet/machinelearning/blob/227da9d7db2ce80b073cc64bfd067b04e6189de1/src/Microsoft.ML.AutoML/ColumnInference/PurposeInference.cs#L148-L158\r\n\r\nCurrently `avgLength`, `cardinalityRatio`, `avgSpaces` are artificially lower due to the missing values.","Url":"https://github.com/dotnet/machinelearning/issues/3879","RelatedDescription":"Open issue \"Improving column purpose detection for sparse datasets\" (#3879)"},{"Id":"457658265","IsPullRequest":false,"CreatedAt":"2019-06-18T19:34:03","Actor":"yaeldekel","Number":"3878","RawContent":null,"Title":"Multiclass LightGBM bug","State":"open","Body":"LightGBM trainer has two non-readonly fields called `_numClass` and `_tlcNumClass`. The second one is used to determine the number of predictors in the OVA predictor. However, the value of `_tlcNumClass` is only updated once, so if `Fit` is called again on the same estimator, it might give the wrong number of classes.","Url":"https://github.com/dotnet/machinelearning/issues/3878","RelatedDescription":"Open issue \"Multiclass LightGBM bug\" (#3878)"},{"Id":"457223476","IsPullRequest":true,"CreatedAt":"2019-06-18T17:24:26","Actor":"codemzs","Number":"3875","RawContent":null,"Title":"Add bindings for RowImpl in time series SequentialTransformerBase","State":"closed","Body":"fixes #3874\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3875","RelatedDescription":"Closed or merged PR \"Add bindings for RowImpl in time series SequentialTransformerBase\" (#3875)"},{"Id":"457603180","IsPullRequest":false,"CreatedAt":"2019-06-18T17:20:40","Actor":"JomanjiPT","Number":"3877","RawContent":null,"Title":"DLL not found","State":"open","Body":"I have this problem : https://stackoverflow.com/questions/56654046/system-dllnotfoundexception-unable-to-load-dll-the-specified-module-could-not\r\n\r\nAnd I think that can be something related with a problem on this web API, or else I woudn't post here.","Url":"https://github.com/dotnet/machinelearning/issues/3877","RelatedDescription":"Open issue \"DLL not found\" (#3877)"},{"Id":"457564793","IsPullRequest":false,"CreatedAt":"2019-06-18T15:56:16","Actor":"konabuta","Number":"3876","RawContent":null,"Title":"Object reference not set to an instance of an object.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 1903\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 2.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRun the following Examples with ONNX model from Azure Custom Vision service.\r\n\r\nhttps://docs.microsoft.com/ja-jp/dotnet/api/microsoft.ml.onnxcatalog.applyonnxmodel?view=ml-dotnet-preview#Microsoft_ML_OnnxCatalog_ApplyOnnxModel_Microsoft_ML_TransformsCatalog_System_String_System_Nullable_System_Int32__System_Boolean_\r\n\r\n- **What happened?**\r\nFailed in ApplyOnnxModel with the following message.\r\nObject reference not set to an instance of an object.\r\n\r\n\r\n### Source code / logs\r\n```cs\r\nusing System;\r\nusing System.Linq;\r\nusing System.IO;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n\r\nnamespace Samples.Dynamic\r\n{\r\n    public static class ApplyOnnxModel\r\n    {\r\n        public static void Main()\r\n        {\r\n            string strCurDir = System.Environment.CurrentDirectory;\r\n            Console.WriteLine(strCurDir);\r\n            // Download the squeeznet image model from ONNX model zoo, version 1.2\r\n            // https://github.com/onnx/models/tree/master/squeezenet or use\r\n            // Microsoft.ML.Onnx.TestModels nuget.\r\n            var assetsRelativePath = @\"../../../squeezenet\";\r\n            string assetsPath = GetAbsolutePath(assetsRelativePath);\r\n\r\n            var modelPath = Path.Combine(assetsPath, \"catdog.onnx\");\r\n\r\n            // Create ML pipeline to score the data using OnnxScoringEstimator\r\n            var mlContext = new MLContext();\r\n\r\n            // Generate sample test data.\r\n            var samples = GetTensorData();\r\n            // Convert training data to IDataView, the general data type used in ML.NET.\r\n            var data = mlContext.Data.LoadFromEnumerable(samples);\r\n            // Create the pipeline to score using provided onnx model.\r\n            //var pipeline = mlContext.Transforms.ApplyOnnxModel(modelPath);\r\n            var pipeline = mlContext.Transforms.ApplyOnnxModel(\"classLabel\",\"data\", modelPath);\r\n            // Fit the pipeline and get the transformed values\r\n            var transformedValues = pipeline.Fit(data).Transform(data);\r\n            // Retrieve model scores into Prediction class\r\n            var predictions = mlContext.Data.CreateEnumerable<Prediction>(transformedValues, reuseRowObject: false);\r\n\r\n            // Iterate rows\r\n            foreach (var prediction in predictions)\r\n            {\r\n                int numClasses = 0;\r\n                foreach (var classScore in prediction.classLabel.Take(5))\r\n                {\r\n                    Console.WriteLine($\"Class #{numClasses++} score = {classScore}\");\r\n                }\r\n                Console.WriteLine(new string('-', 10));\r\n            }\r\n\r\n            // Results look like below...\r\n            // Class #0 score = 4.544065E-05\r\n            // Class #1 score = 0.003845858\r\n            // Class #2 score = 0.0001249467\r\n            // ----------\r\n            // Class #0 score = 4.491953E-05\r\n            // Class #1 score = 0.003848222\r\n            // Class #2 score = 0.0001245592\r\n            // ----------\r\n        }\r\n\r\n        // inputSize is the overall dimensions of the model input tensor.\r\n        private const int inputSize = 224 * 224 * 3;\r\n\r\n        // A class to hold sample tensor data. Member name should match  \r\n        // the inputs that the model expects (in this case, data_0)\r\n        public class TensorData\r\n        {\r\n            [VectorType(inputSize)]\r\n            public float[] data_0 { get; set; }\r\n        }\r\n\r\n        // Method to generate sample test data. Returns 2 sample rows.\r\n        public static TensorData[] GetTensorData()\r\n        {\r\n            // This can be any numerical data. Assume image pixel values.\r\n            var image1 = Enumerable.Range(0, inputSize).Select(x => (float)x / inputSize).ToArray();\r\n            var image2 = Enumerable.Range(0, inputSize).Select(x => (float)(x + 10000) / inputSize).ToArray();\r\n            return new TensorData[] { new TensorData() { data_0 = image1 }, new TensorData() { data_0 = image2 } };\r\n        }\r\n        public static string GetAbsolutePath(string relativePath)\r\n        {\r\n            FileInfo _dataRoot = new FileInfo(typeof(ApplyOnnxModel).Assembly.Location);\r\n            string assemblyFolderPath = _dataRoot.Directory.FullName;\r\n\r\n            string fullPath = Path.Combine(assemblyFolderPath, relativePath);\r\n\r\n            return fullPath;\r\n        }\r\n\r\n        // Class to contain the output values from the transformation.\r\n        // This model generates a vector of 1000 floats.\r\n        class Prediction\r\n        {\r\n            [VectorType(1000)]\r\n            //public float[] softmaxout_1 { get; set; }\r\n            public float[] classLabel { get; set; }\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n[catdog.zip](https://github.com/dotnet/machinelearning/files/3302363/catdog.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3876","RelatedDescription":"Open issue \"Object reference not set to an instance of an object.\" (#3876)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-25T05:30:39.3967908Z","RunDurationInMilliseconds":659}