{"Data":{"GitHub":{"Issues":[{"Id":"449014559","IsPullRequest":false,"CreatedAt":"2019-05-27T23:59:36","Actor":"Mrnikbobjeff","Number":"770","RawContent":null,"Title":"Reduce Heap allocations","State":"open","Body":"I have found several instances where we can eliminate heap allocations via simple changes such as iterating over an IList via for loop to avoid the boxing allocation for the enumerator or calling ToString on value types to be passed of to string formatting. ","Url":"https://github.com/dotnet/wpf/issues/770","RelatedDescription":"Open issue \"Reduce Heap allocations\" (#770)"},{"Id":"448996408","IsPullRequest":false,"CreatedAt":"2019-05-27T21:38:43","Actor":"Mrnikbobjeff","Number":"769","RawContent":null,"Title":"Improve allocation with System.Buffers","State":"open","Body":"I mainly looked through windowbase and there are various array allocations to read stream or similar. Other small arrays are so small that they could be stackallocated as they are constant length. For a perfect example check CFStream. These allocations could be removed with System.Buffers which would not have a detrimental impact on anything as far as i can tell","Url":"https://github.com/dotnet/wpf/issues/769","RelatedDescription":"Open issue \"Improve allocation with System.Buffers\" (#769)"},{"Id":"448933174","IsPullRequest":false,"CreatedAt":"2019-05-27T16:29:13","Actor":"Mrnikbobjeff","Number":"768","RawContent":null,"Title":"Improvements to Quaternion and other structs","State":"open","Body":"After looking over Quaternion I realised that it could heavily benefit from vectorization with new hardware intrinsics in .net core. I started on vectorizing some funcions there and have massive speedups measured in Benchmark.Net. Also, Why does Quaternion not implement IEquatable<Quaternion> as suggested per Microsoft struct guidelines? This enables EqualityComparer<T> to take a faster path, which improves creation time of HashSet<Quaternion> and similar. Finally, we could use the new HashCode.Combine<> in a lot of places, which would be superior to rolling out manual implementations for so many types. Finally, we could improve performance of GetHashCode in its current implementation by not calling the getter method for all properties and using the fields instead, as IsDistinguishedIdentity is already checked.","Url":"https://github.com/dotnet/wpf/issues/768","RelatedDescription":"Open issue \"Improvements to Quaternion and other structs\" (#768)"},{"Id":"448462879","IsPullRequest":true,"CreatedAt":"2019-05-25T13:17:34","Actor":"dotnet-maestro[bot]","Number":"767","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190524.12\r\n- **Date Produced**: 5/25/2019 3:55 AM\r\n- **Commit**: e91179b30f5e79f82d2ac96fa0ba73277bac8442\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview6.19274.12\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/767","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#767)"},{"Id":"448436620","IsPullRequest":true,"CreatedAt":"2019-05-25T08:07:43","Actor":"rusamentiaga","Number":"766","RawContent":null,"Title":"Fix indentation related issue","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/766","RelatedDescription":"Open PR \"Fix indentation related issue\" (#766)"},{"Id":"448282898","IsPullRequest":true,"CreatedAt":"2019-05-25T01:01:40","Actor":"vatsan-madhavan","Number":"760","RawContent":null,"Title":"Add missing CoherentParentDependency=Microsoft.NETCore.App for Microsoft.Private.Winforms","State":"closed","Body":"- Move `Microsoft.Private.Winforms` from `Product` to `Toolset` Dependency\r\n - Add `CoherentParentDependency=Microsoft.NETCore.App` \r\n- Note: Not adding a `CoherentParentDependency=Microsoft.NETCore.App` for `Microsoft.DotNet.Wpf.DncEng` - this is a cycle from dotnet-wpf-int => dotnet/wpf used for testing purposes only.","Url":"https://github.com/dotnet/wpf/pull/760","RelatedDescription":"Closed or merged PR \"Add missing CoherentParentDependency=Microsoft.NETCore.App for Microsoft.Private.Winforms\" (#760)"},{"Id":"448395541","IsPullRequest":false,"CreatedAt":"2019-05-25T00:56:48","Actor":"vatsan-madhavan","Number":"765","RawContent":null,"Title":"Theme assemblies cannot be referenced","State":"open","Body":"**Background:** \r\n\r\nWPF's theme assemblies (`PresentationFramework.Aero`, `PresentationFramework.Aero2`, `PresentationFramework.AeroLite`, `PresentationFramework.Classic`, `PresentationFramework.Luna` and `PresentationFramework.Royale`) expose the same types. \r\n\r\nFor e.g., [DataGridHeaderBorder](https://docs.microsoft.com/en-us/dotnet/api/microsoft.windows.themes.datagridheaderborder?view=netframework-4.8). \r\n\r\nThese assemblies can be used in two ways. \r\n\r\nTypically, they are used as resource assemblies. i.e., they are not referenced from the project, and instead, XAML resources within them are consumed  as resources using `<ResourceDictionary ..>`. When used this way, all of these assemblies can (and often are) used in to supply themes contextually (i.e., depending on the system theme, for e.g., or some other user preference). \r\n\r\nLess commonly, they are directly referenced and their types are either consumed in XAML or directly in code. When used this way, only one assembly can be referenced directly. If more than one assembly needs to be referenced, namespace aliasing has to be used. \r\n\r\n**Problem:** \r\n\r\nThe current SDK/FrameworkReference design in .NET Core _always_ enables references to each of these assemblies. This makes them virtually unusable. We need a better scheme/solution. \r\n\r\n**Related:**\r\n\r\n- #746 \r\n- https://github.com/dotnet/sdk/issues/3265\r\n- https://github.com/dotnet/sdk/pull/3259\r\n\r\n**Note:** \r\n\r\nPart of the solution [lies in the SDK](https://github.com/dotnet/sdk/issues/3265), and part of the solution would likely have to be implemented in `Microsoft.NET.Sdk.WindowsDesktop` targets.\r\n\r\n/cc @miguep, @rladuca ","Url":"https://github.com/dotnet/wpf/issues/765","RelatedDescription":"Open issue \"Theme assemblies cannot be referenced\" (#765)"},{"Id":"448391897","IsPullRequest":true,"CreatedAt":"2019-05-25T00:44:42","Actor":"vatsan-madhavan","Number":"764","RawContent":null,"Title":"Fix PBT build - workaround for corefx/37943","State":"closed","Body":"Workaround for https://github.com/dotnet/corefx/issues/37943 \r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/764","RelatedDescription":"Closed or merged PR \"Fix PBT build - workaround for corefx/37943\" (#764)"},{"Id":"448390901","IsPullRequest":false,"CreatedAt":"2019-05-25T00:12:28","Actor":"vatsan-madhavan","Number":"763","RawContent":null,"Title":"System.Reflection.MetadataLoadContext has an incoherent dependency on System.Memory -> causes build breaks in PresentationBuildTasks","State":"open","Body":"See https://github.com/dotnet/corefx/issues/37943 for context. \r\n\r\n- [x] Implement a workaround\r\n  - #764 \r\n- [ ] Wait for corefx to fix  https://github.com/dotnet/corefx/issues/37943\r\n- [ ] Undo the workaround ","Url":"https://github.com/dotnet/wpf/issues/763","RelatedDescription":"Open issue \"System.Reflection.MetadataLoadContext has an incoherent dependency on System.Memory -> causes build breaks in PresentationBuildTasks\" (#763)"},{"Id":"448318098","IsPullRequest":false,"CreatedAt":"2019-05-24T19:15:56","Actor":"vatsan-madhavan","Number":"762","RawContent":null,"Title":"Open Source BamlReflector tool ","State":"open","Body":"`BamlReflector` is a test tool used by the WPF team to decompile BAML to XAML. This issue tracks open-sourcing of this tools. \r\n\r\nIn the near term (.NET Core 3.x timeframe), we will not be able to develop a full-blown set of API's to provide this functionality (related: #445), but the sources for this tool should help anyone who would like to build their own decompilation functionality. ","Url":"https://github.com/dotnet/wpf/issues/762","RelatedDescription":"Open issue \"Open Source BamlReflector tool \" (#762)"},{"Id":"448285425","IsPullRequest":false,"CreatedAt":"2019-05-24T17:49:26","Actor":"vatsan-madhavan","Number":"761","RawContent":null,"Title":"eng\\Version.Details.xml is missing CoherentParentDependency attribute for some packages","State":"open","Body":"`eng\\Version.Details.xml` is missing `CoherentParentDependency` attribute for some packages (Winforms, Wpf.DncEng, Wpf.GitHub). \r\n\r\nThese should be added to ensure that DARC updates are coherent. \r\n\r\n- [x] Add dependencies to dotnet/wpf- \r\n- [ ] Flow changes from dotnet/wpf => dotnet-wpf-int\r\n- [ ] Add CoherentParentDependency attributes in dotnet-wpf-int","Url":"https://github.com/dotnet/wpf/issues/761","RelatedDescription":"Open issue \"eng\\Version.Details.xml is missing CoherentParentDependency attribute for some packages\" (#761)"},{"Id":"448264021","IsPullRequest":false,"CreatedAt":"2019-05-24T17:08:22","Actor":"vatsan-madhavan","Number":"759","RawContent":null,"Title":"test","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/759","RelatedDescription":"Closed issue \"test\" (#759)"},{"Id":"448247788","IsPullRequest":false,"CreatedAt":"2019-05-24T16:09:42","Actor":"tim-fernico","Number":"758","RawContent":null,"Title":"Cannot compile WPF with parameterized App constructor","State":"open","Body":"* .NET Core Version: 3.0 Preview5\r\n* Windows version: Windows 10 Pro (1903)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.7.2?: No\r\n\r\n **Problem description:**\r\nCannot compile WPF app with parameterized App constructor.  My App constructor is defined as\r\n```\r\n public App(object param1, ...)\r\n``` \r\n\r\n **Actual behavior:** \r\nBuild fails with following error:\r\n``` \r\n>obj\\Debug\\netcoreapp3.0\\App.g.cs(74,35,74,46): error CS7036: There is no argument given that corresponds to the required formal parameter 'param1' of 'App.App(object param1)'\r\n``` \r\nThis is due to the generated Main method in app.g.cs calling the App constructor without any parameters.\r\n\r\n **Expected behavior:**\r\nWith .NET 4.7, I specify that the App.xaml build action is 'Page' rather than 'Application definition' to make sure duplicate Main is not generated.  I cannot change the build action in a dot net 3.0 csproj as I get:\r\n\r\n    error NETSDK1022: Duplicate 'Compile' items were included.\r\n \r\n **Related discussion**\r\nhttps://github.com/dotnet/wpf/issues/192","Url":"https://github.com/dotnet/wpf/issues/758","RelatedDescription":"Open issue \"Cannot compile WPF with parameterized App constructor\" (#758)"},{"Id":"448158565","IsPullRequest":true,"CreatedAt":"2019-05-24T13:10:25","Actor":"dotnet-maestro[bot]","Number":"757","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190523.7\r\n- **Date Produced**: 5/23/2019 1:30 PM\r\n- **Commit**: 70fedf3368a36691118e0f1ebc565f222d0ca932\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview6.19273.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/757","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#757)"},{"Id":"448155081","IsPullRequest":false,"CreatedAt":"2019-05-24T12:52:37","Actor":"grubioe","Number":"756","RawContent":null,"Title":"[netcore3] AssemblyHelper depends on obsolete dlls to be loaded in order to load extensions","State":"open","Body":"Copied from VSO ID: 831354\r\nProblem:\r\n\r\n\\WindowsBase\\MS\\Internal\\AssemblyHelper.cs expects certain obsolete assemblies to be loaded (such as System.Data.dll) in order to load extension dlls.\r\n\r\nThis is a problem when someone uses types that used to be contained in these assemblies, as the extension functionality does not get loaded and the extension methods cannot be called. \r\n\r\nSteps to reproduce:\r\n\r\n1. Run DrtDataSrv \r\n2. Observe Exception:\r\nSystem.Exception: 'Assert failed: Target value has wrong value for target String, source SQLStruct, property SqlDouble Expected: null  Got:  [Suite: markup  Test: TestTargetNullValue\r\n]'\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/756","RelatedDescription":"Open issue \"[netcore3] AssemblyHelper depends on obsolete dlls to be loaded in order to load extensions\" (#756)"},{"Id":"448151838","IsPullRequest":true,"CreatedAt":"2019-05-24T12:45:44","Actor":"dotnet-maestro[bot]","Number":"755","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190523.08\r\n- **Date Produced**: 5/24/2019 4:52 AM\r\n- **Commit**: 20426e8c486d8715337cb6438ec70bc3619a514d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27723-08\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190524.03\r\n- **Date Produced**: 5/25/2019 5:20 AM\r\n- **Commit**: 4122653611ecb6e7f964af762b4280ba0e1421c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27724-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190524.03\r\n- **Date Produced**: 5/25/2019 5:20 AM\r\n- **Commit**: 4122653611ecb6e7f964af762b4280ba0e1421c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27724-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190524.03\r\n- **Date Produced**: 5/25/2019 5:20 AM\r\n- **Commit**: 4122653611ecb6e7f964af762b4280ba0e1421c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27724-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/755","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#755)"},{"Id":"448136516","IsPullRequest":true,"CreatedAt":"2019-05-24T12:18:58","Actor":"dotnet-maestro[bot]","Number":"754","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190523.11\r\n- **Date Produced**: 5/24/2019 5:52 AM\r\n- **Commit**: 02a90cc69d2d32bbde9e6e0e41186711c591de27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19273.11\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/754","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#754)"},{"Id":"448108984","IsPullRequest":true,"CreatedAt":"2019-05-24T10:58:26","Actor":"facebamm","Number":"753","RawContent":null,"Title":"Type equivalent performance","State":"open","Body":"## Output \r\n|  | sourceByte | sourceInt |\r\n| -- | -- | -- |\r\n| TypecastingPtrDesc | 350ms  | 600ms  | \r\n| PtrDesc | 290ms | 276ms |\r\n\r\n## Type equivalent performance test case \r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n        {\r\n            Array sourceByte = new Byte[] { 5, 6, 7 };\r\n            Array sourceInt = new int[] { 1, 2, 3 };\r\n            Stopwatch watch = new Stopwatch();\r\n\r\n            Console.WriteLine(\"## sourceByte ##\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                TypecastingPtrDesc(sourceByte);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"TypecastingPtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                PtrDesc((byte[])sourceByte);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"PtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n\r\n            Console.WriteLine(\"## sourceInt ##\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                TypecastingPtrDesc(sourceInt);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"TypecastingPtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                PtrDesc((int[])sourceInt);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"PtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n        }\r\n\r\n\r\n        private unsafe static void TypecastingPtrDesc(System.Array value)\r\n        {\r\n            switch (value)\r\n            {\r\n                case byte[] byteArray:\r\n                    fixed (void* valuePtr = byteArray)\r\n                    {\r\n                        for (int iElement = 0, nElement = byteArray.Length; iElement < nElement; iElement++)\r\n                        {\r\n                            *((int*)valuePtr + iElement) = iElement;\r\n                        }\r\n                    }\r\n                    break;\r\n                case int[] intArray:\r\n                    fixed (void* valuePtr = intArray)\r\n                    {\r\n                        for (int iElement = 0, nElement = intArray.Length; iElement < nElement; iElement++)\r\n                        {\r\n                            *((int*)valuePtr + iElement) = iElement;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        private unsafe static void PtrDesc<T>(T[] pixels) where T : unmanaged\r\n        {\r\n            fixed (void* pixelsPtr = pixels)\r\n            {\r\n                for (int iElement = 0, nElement = pixels.Length; iElement < nElement; iElement++)\r\n                {\r\n                    *((byte*) pixelsPtr + iElement) = (byte) iElement;\r\n                }\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/wpf/pull/753","RelatedDescription":"Open PR \"Type equivalent performance\" (#753)"},{"Id":"447971039","IsPullRequest":false,"CreatedAt":"2019-05-24T04:12:05","Actor":"dotMorten","Number":"752","RawContent":null,"Title":"Add implicit conversion between System.Drawing.Color and System.Windows.Media.Color","State":"open","Body":"Currently System.Windows.Media.Color is the color type used throughout WPF. This type however is not part of .NET Standard, which uses System.Drawing.Color instead.\r\n\r\nIt would be very useful that there's an implicit conversion between these two types, so that we can use either to bind in XAML or parse into for instance a color brush etc, so we can reuse these properties for various object models across multiple platforms.\r\n\r\nExample:\r\n```cs\r\npublic class MyViewModel\r\n{\r\n    public System.Drawing.Color Color { get; set; }\r\n}\r\n```\r\n```xml\r\n <Grid>\r\n   <Grid.DataContext>\r\n        <local:MyViewModel />\r\n   </Grid.DataContext>\r\n   <Ellipse Width=\"40\" Height=\"40\" Fill=\"{Binding Color}\" />\r\n</Grid>\r\n```\r\n\r\nThis currently produces a binding error like this:\r\n```\r\nSystem.Windows.Data Error: 1 : Cannot create default converter to perform 'one-way' conversions between types 'System.Drawing.Color' and 'System.Windows.Media.Brush'. Consider using Converter property of Binding. BindingExpression:Path=Color; DataItem='MyViewModel' (HashCode=64844482); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')\r\nSystem.Windows.Data Error: 5 : Value produced by BindingExpression is not valid for target property.; Value='Color [Red]' BindingExpression:Path=Color; DataItem='MyViewModel' (HashCode=64844482); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')\r\n```\r\n\r\nI added something similar to Xamarin.Forms as well https://github.com/xamarin/Xamarin.Forms/pull/1359\r\n(Also hoping we can add this to UWP too, so everyone plays nice with .NET Standard).\r\n\r\nImplementation suggestion:\r\n```cs\r\nnamespace System.Windows.Media\r\n{\r\n   public struct Color\r\n   {\r\n        public static implicit operator System.Drawing.Color(Color color) => \r\n            System.Drawing.Color.FromArgb(color.A, color.R, color.G, color.B);\r\n\r\n        public static implicit operator Color(System.Drawing.Color color) => \r\n            FromArgb(color.A, color.R, color.G, color.B);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/752","RelatedDescription":"Open issue \"Add implicit conversion between System.Drawing.Color and System.Windows.Media.Color\" (#752)"},{"Id":"447967656","IsPullRequest":false,"CreatedAt":"2019-05-24T03:54:48","Actor":"dotMorten","Number":"751","RawContent":null,"Title":"Cannot use local build of WPF in an application","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nWhen trying to use the locally built binaries using the approach [described here](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md#testing-api-changes), the application compiles and launches, but before any breakpoint is hit (even in App.Xaml.cs' constructor) the app terminates.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe app terminates with code -532462766 (0xe0434352) before even hitting the first line of code. EventViewer shows the following:\r\n```\r\nApplication: WpfTest.exe\r\nCoreCLR Version: 4.6.27622.75\r\n.NET Core Version: 3.0.0-preview5-27626-15\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.IO.FileNotFoundException: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n```\r\n PresentationFramework.dll is present in the output folder, and identical to the one built from the repo, so it appears it's looking for a different assembly (version doesn't match either).\r\n\r\n **Expected behavior:**\r\nApp launches\r\n \r\n **Minimal repro:**\r\nInstall latest .NET Core 3.0 SDK (Preview 5)\r\nThen from commandline:\r\n```\r\n  git clone https://github.com/dotnet/wpf \r\n  wpf\\restore.cmd\r\n  wpf\\build.cmd -pack\r\n  md WpfTest\r\n  cd WpfTest\r\n  dotnet new wpf\r\n```\r\nOpen the generated project and add the following (based on the dev doc, but note the doc left out the `\\Debug\\` part of the paths):\r\n```xml\r\n <PropertyGroup>\r\n     <!-- Change this value based on where your local repo is located -->\r\n     <WpfRepoRoot>..\\wpf</WpfRepoRoot>\r\n     <!-- Publishing a self-contained app ensures our binaries are used. -->\r\n     <SelfContained>true</SelfContained>\r\n    <!-- The runtime identifier needs to match the architecture you built WPF assemblies for. -->\r\n    <RuntimeIdentifier>win-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\ref\\netcoreapp3.0\\*.dll\" Private=\"false\" />\r\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\lib\\netcoreapp3.0\\*.dll\" />\r\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\lib\\$(RuntimeIdentifier)\\*.dll\" />\r\n  </ItemGroup>\r\n```\r\n\r\nRun the app (it'll exit almost immediately). \r\n\r\nI also tried with the nightly build of the SDK, but `ReferenceCopyLocalPaths` because the version is newer than what you build locally (that's fixable, but then you also need to override you nuget package sources, and at that point you're back to the above problem)\r\n\r\n@stevenbrix [reported](https://twitter.com/steven_brix/status/1131695332511760384) he's also seeing the same behavior.","Url":"https://github.com/dotnet/wpf/issues/751","RelatedDescription":"Open issue \"Cannot use local build of WPF in an application\" (#751)"},{"Id":"447928060","IsPullRequest":true,"CreatedAt":"2019-05-24T00:27:41","Actor":"MattGal","Number":"750","RawContent":null,"Title":"Update to pool-provider sourced machines","State":"open","Body":"@vatsan-madhavan FYI","Url":"https://github.com/dotnet/wpf/pull/750","RelatedDescription":"Open PR \"Update to pool-provider sourced machines\" (#750)"},{"Id":"447914205","IsPullRequest":false,"CreatedAt":"2019-05-23T23:23:22","Actor":"vatsan-madhavan","Number":"749","RawContent":null,"Title":"GenerateTemplates target in PresentationFramework.csproj is flaky","State":"open","Body":"On local builds, `GenerateTemplates` target in `PresentationFramework.csproj` sometimes generates empty `$(IntermediateOutputPath)ColumnDefinition.cs` and `$(IntermediateOutputPath)RowDefinition.cs` files. \r\n\r\nThis leads to failures like the one reported in #748 \r\n\r\n```\r\n------ Build started: Project: PresentationFramework, Configuration: Debug Any CPU ------\r\nSystem\\Windows\\Controls\\Grid.cs(309,16,309,42): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(324,16,324,39): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3347,22,3347,48): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3348,22,3348,45): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4151,21,4151,47): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4152,21,4152,44): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nDone building project \"PresentationFramework.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/wpf/issues/749","RelatedDescription":"Open issue \"GenerateTemplates target in PresentationFramework.csproj is flaky\" (#749)"},{"Id":"447899125","IsPullRequest":false,"CreatedAt":"2019-05-23T23:12:07","Actor":"LinkDoyle","Number":"748","RawContent":null,"Title":"Failed to build PresentationFramework: Missing type `ColumnDefinitionCollection` and `RowDefinitionCollection` in `Grid.cs`","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n3.0.100-preview5-011568\r\n\r\n* Windows version: (`winver`)\r\nWindows 10 Version 1903\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nNo\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nFailed to build PresentationFramework: the type `ColumnDefinitionCollection` and `RowDefinitionCollection` could not be found in `Grid.cs`.\r\nSee: [Grid.cs](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/Grid.cs#L309)\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n```\r\n------ Build started: Project: PresentationFramework, Configuration: Debug Any CPU ------\r\nSystem\\Windows\\Controls\\Grid.cs(309,16,309,42): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(324,16,324,39): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3347,22,3347,48): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3348,22,3348,45): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4151,21,4151,47): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4152,21,4152,44): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nDone building project \"PresentationFramework.csproj\" -- FAILED.\r\n```\r\n\r\n **Expected behavior:**\r\n The type `ColumnDefinitionCollection` and `RowDefinitionCollection` could be found in the project PresentationFramework.\r\n\r\n **Minimal repro:**\r\n Build the project PresentationFramework.\r\n","Url":"https://github.com/dotnet/wpf/issues/748","RelatedDescription":"Closed issue \"Failed to build PresentationFramework: Missing type `ColumnDefinitionCollection` and `RowDefinitionCollection` in `Grid.cs`\" (#748)"},{"Id":"447884075","IsPullRequest":false,"CreatedAt":"2019-05-23T21:35:30","Actor":"vatsan-madhavan","Number":"747","RawContent":null,"Title":"Add intellisense xml's to ref-pack ","State":"open","Body":"This issue tracks the inclusion of intellisense xmls' in our ref-assembly nuget package. \r\n\r\nWe still need to define the following: \r\n\r\n- [ ] Who produces the intellisense xml's\r\n- [ ] How do we consume them (checked into our repo vs. consumed as a nuget package)\r\n- [ ] Where do we put them (presumptively, into the reference assembly packages, `Microsoft.DotNet.Wpf.GitHub`, and `Microsoft.DotNet.Wpf.DncEng`. => These will get consumed by core-sdk, unpacked and repacked into the core-sdk re-packs. ","Url":"https://github.com/dotnet/wpf/issues/747","RelatedDescription":"Open issue \"Add intellisense xml's to ref-pack \" (#747)"},{"Id":"447865027","IsPullRequest":false,"CreatedAt":"2019-05-23T20:44:49","Actor":"vatsan-madhavan","Number":"746","RawContent":null,"Title":"Incorporate WPF and WinForms Specific FrameworkReferences in Microsoft.NET.Sdk.WindowsDesktop","State":"open","Body":"See https://github.com/dotnet/sdk/pull/3259 \r\n\r\nMight require additional work to incorporate theme-assembly specific FrameworkReferences as well. ","Url":"https://github.com/dotnet/wpf/issues/746","RelatedDescription":"Open issue \"Incorporate WPF and WinForms Specific FrameworkReferences in Microsoft.NET.Sdk.WindowsDesktop\" (#746)"},{"Id":"447855215","IsPullRequest":true,"CreatedAt":"2019-05-23T20:20:35","Actor":"thomasclaudiushuber","Number":"745","RawContent":null,"Title":"Define Value property of Setter as XAML content property","State":"open","Body":"Fixes issue https://github.com/dotnet/wpf/issues/84","Url":"https://github.com/dotnet/wpf/pull/745","RelatedDescription":"Open PR \"Define Value property of Setter as XAML content property\" (#745)"},{"Id":"447794878","IsPullRequest":false,"CreatedAt":"2019-05-23T17:51:04","Actor":"grubioe","Number":"744","RawContent":null,"Title":"\\PenImc SxS COM registration failure message should be localized","State":"open","Body":"Copied from VSO ID: 670084\r\n\r\nSteps to reproduce:\r\n\r\n/src/WPF/src/PresentationCore/CSharp/MS/Win32/UnsafeNativeMethodsPenimc.cs:106\r\n\r\n            if (activationContextCookie == IntPtr.Zero)\r\n            {\r\n                throw new InvalidOperationException(\"SxS COM registration of PenIMC3_v0400.dll failed.\");\r\n            }\r\n        }","Url":"https://github.com/dotnet/wpf/issues/744","RelatedDescription":"Open issue \"\\PenImc SxS COM registration failure message should be localized\" (#744)"},{"Id":"447789313","IsPullRequest":false,"CreatedAt":"2019-05-23T17:37:11","Actor":"grubioe","Number":"743","RawContent":null,"Title":"Remove null conditionals from SystemXmlLinqExtension.cs","State":"open","Body":"Copied from VSO ID: 713546\r\n\r\nDue to https://github.com/dotnet/corefx/issues/32641, we added a spot fix null conditional to SYstemXmlLinqExtension.cs in the constructor.\r\n\r\nWhen the above is fixed, we should remove this null conditional we will then fail immediately if something is wrong in the type descriptors.\r\n\r\nSee VSO ID 713546 for PR with change to be reverted","Url":"https://github.com/dotnet/wpf/issues/743","RelatedDescription":"Open issue \"Remove null conditionals from SystemXmlLinqExtension.cs\" (#743)"},{"Id":"447785021","IsPullRequest":false,"CreatedAt":"2019-05-23T17:27:00","Actor":"grubioe","Number":"742","RawContent":null,"Title":"During multi-touch, lifting primary touch point before non-primary points crashes.","State":"open","Body":"Copied from VSO ID: 672856\r\n\r\n\r\n **Problem description: & Repro Steps**\r\n===================================\r\nRun the attached touch move test application against .NET Core 3 WPF builds.\r\n\r\nTouch down with multiple touch points.  Ensure that you lift the primary (first down) finger prior to any non-primary point.\r\n\r\nObserve the following crash:\r\n\r\nat System.Windows.Input.StylusWisp.WispLogic.PromoteMainToMouse(StagingAreaInputItem stagingItem)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PromoteMainUpToTouch(WispStylusDevice stylusDevice, StagingAreaInputItem stagingItem)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PromoteMainToTouch(ProcessInputEventArgs e, StylusEventArgs stylusEventArgs)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PromoteMainToOther(ProcessInputEventArgs e)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PostProcessInput(Object sender, ProcessInputEventArgs e)\r\n   at System.Windows.Input.InputManager.RaiseProcessInputEventHandlers(ProcessInputEventHandler postProcessInput, ProcessInputEventArgs processInputEventArgs)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.StylusWisp.WispLogic.InputManagerProcessInputEventArgs(InputEventArgs input)\r\n   at System.Windows.Input.StylusWisp.WispLogic.InputManagerProcessInput(Object oInput)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, Object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at MovePerfTester.App.Main()\r\n \r\n \r\n[TouchMoveSample.zip](https://github.com/dotnet/wpf/files/3213428/TouchMoveSample.zip)\r\n\r\nInitial Investigation:\r\n===============\r\nThere is a debug assert that fails in this code path.  Something about either NetCore3 or SxS COM is causing this prior assumption to be invalid.\r\n\r\nWhen tested in the netfxdev1 SxS COM prototype, this failure did not occur, leading me to believe this is something to do with NetCore3.\r\n\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/742","RelatedDescription":"Open issue \"During multi-touch, lifting primary touch point before non-primary points crashes.\" (#742)"},{"Id":"447764003","IsPullRequest":true,"CreatedAt":"2019-05-23T16:36:41","Actor":"rladuca","Number":"741","RawContent":null,"Title":"WIP Inject Module Constructor into PCore","State":"open","Body":"Fixes #334 \r\n\r\nWill dupe related issues to #334 as I scrape issues for them.\r\n\r\nVerified DLL loads with latest bits.  PCore loads DWriteFwder through the module constructor.  This gives us the same DPI initialization semantics as .NET Framework.","Url":"https://github.com/dotnet/wpf/pull/741","RelatedDescription":"Open PR \"WIP Inject Module Constructor into PCore\" (#741)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-28T05:30:46.6140599Z","RunDurationInMilliseconds":759}