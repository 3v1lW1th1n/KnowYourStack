{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6823588799","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Closed issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds [about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs"},{"Id":"6823588782","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Closed issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https://github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n### Unit tests projects\r\n\r\nBy default, binding redirects aren't added to class library projects. This is problematic for unit testing projects as they are essentially like apps. So in addition to what's outlined in [automatic binding redirects][abrg] you also need to specify `GenerateBindingRedirectsOutputType`:\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n</PropertyGroup>\r\n```\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/standard/issues/481."},{"Id":"6823588769","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/29","RelatedDescription":"Closed issue \".NET Core Runtime ARM32 builds now available\" (#29) at dotnet/announcements","RelatedBody":"# .NET Core Runtime ARM32 builds now available\r\n\r\nThe .NET Core team is now producing ARM32 builds for .NET Core Runtime 2.0+, for both Linux and Windows. These builds are great for using on Raspberry Pi. The builds are not yet supported by Microsoft and have preview status. Please give us feedback.\r\n\r\nDocker ARM32 images are also available at [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/). See [microsoft/dotnet Docker Hub README adopts segmented OS/Arch style](https://github.com/dotnet/announcements/issues/27) for a related announcement.\r\n\r\nThere are two good sources of .NET Core ARM32 samples that you can use to get started:\r\n\r\n* [.NET Core on Raspberry Pi](https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md)\r\n* [.NET Core Docker Raspberry Pi Samples](https://github.com/dotnet/dotnet-docker-samples#arm32--raspberry-pi)\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/coreclr #13369](https://github.com/dotnet/coreclr/issues/13369)\r\n\r\n## Details\r\n\r\n* [dotnet/coreclr label:arch-arm32](https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&q=label%3Aarch-arm32%20)\r\n\r\nThe team is producing Runtime and not SDK builds for .NET Core. As a result, you need to build your applications on another operating system and then copy to a Raspberry Pi (or similar device) to run. The samples provided above show you how to do that.\r\n\r\nYou can get builds from the following links. Official builds are not yet provided.\r\n\r\n* [.NET Core 2.0.0 ARM32 build](https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-arm.tar.gz)\r\n* [.NET Core 2.0 servicing builds](https://github.com/dotnet/core/blob/master/daily-builds-servicing.md)\r\n* [.NET Core 2.1 daily builds](https://github.com/dotnet/core/blob/master/daily-builds.md)\r\n\r\nNote that ARM32 is sometimes referred to as `armhf`, which refers to [hardware floating point capability](https://en.wikipedia.org/wiki/ARM_architecture#VFP).\r\n\r\nThe SDK has not been made available for ARM32 to yet as it doesn't fit within a reasonable performance envelope (space and time) for ARM32. We will resolve this although it isn't a top priority currently (unless feedback suggests otherwise). Our belief is that building on a desktop or build machine will be both more efficient and a reasonable work around to doing development on the Pi for the time being. We also wanted to prioritize the runtime being available since it's necessary for anything to work.\r\n\r\nA more near-term need is unit testing on ARM32. There is no replacement for running tests on device. We intend to publish short-term workarounds for this and work on a longer-term solution that is easy to use."},{"Id":"6823588709","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:24","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/16","RelatedDescription":"Closed issue \".NET Core 2.0 multi-arch tags now use Debian Stretch\" (#16) at dotnet/announcements","RelatedBody":"# .NET Core 2.0 multi-arch tags now use Debian Stretch\r\n\r\n## Summary\r\n\r\n[.NET Core 2.0 Docker multi-arch tags](https://hub.docker.com/r/microsoft/dotnet/) now use [Debian Stretch](https://www.debian.org/releases/stretch/) instead of [Debian Jessie](https://www.debian.org/releases/jessie/). .NET Core 2.0 Debian Jessie tags will still be provided. Debian Stretch is considered by the .NET Core team to be a better default choice for .NET Core Docker Linux image users for the lifetime of .NET Core 2.x.  There are no plans to update .NET Core 1.x in the same way.\r\n\r\n## Details\r\n\r\n- [Debian 9 Stretch released](https://www.debian.org/News/2017/20170617)\r\n- [Change 2.0 multi-arch tags to be based on stretch -- dotnet/dotnet-docker-nightly #322](https://github.com/dotnet/dotnet-docker-nightly/pull/322)\r\n- [.NET Core Docker images will move to multi-arch based tags -- dotnet/announcements #14](https://github.com/dotnet/announcements/issues/14)\r\n\r\n## Impact\r\n\r\nThe impact of this change should be minimal. It is possible that you may notice differences in Debian Stretch relative to Debian Jessie. This change would be considered a breaking change if it was made for existing 1.x multi-arch tags. It is considered acceptable because it is being made between major .NET versions (during .NET Core 2.0 preview phase).\r\n\r\nThe `latest` tag will be switched to the .NET Core 2.0 SDK when .NET Core 2.0 ships as RTM. This change will result in `latest` changing from Debian Jessie to Debian Stretch."},{"Id":"6823588682","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/12","RelatedDescription":"Closed issue \"Microsoft Security Advisory 4021279: Vulnerabilities in .NET Core, ASP.NET Core Could Allow Elevation of Privilege \" (#12) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory 4021279: Vulnerabilities in .NET Core, ASP.NET Core Could Allow Elevation of Privilege\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about vulnerabilities in public .NET Core and ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\n.NET Core & ASP.NET Core are the next generation of .NET that provide a familiar and modern framework for web and cloud scenarios. These products are actively developed by the .NET and ASP.NET team in collaboration with a community of open source developers, running on Windows, Mac OS X and Linux. When .NET Core was released, the version number was reset to 1.0.0 to reflect the fact that it is a separate product from its predecessor -.NET.\r\n\r\n## Discussion\r\nTo discuss the ASP.NET Core issues please see https://github.com/aspnet/Mvc/issues/6246\r\nTo discuss the CoreFX Core issues please see https://github.com/dotnet/corefx/issues/19535\r\n\r\n## Issue CVEs and Description\r\nCVE\t| Description\r\n----|-------------\r\n[CVE-2017-0248](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0248) | Security Feature Bypass\r\n[CVE-2017-0247](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0247) | Denial of Service\r\n[CVE-2017-0249](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249) | Elevation of Privilege \r\n[CVE-2017-0256](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0256) | Spoofing\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nSystem.Text.Encodings.Web | 4.0.0<br />4.3.0  | 4.0.1<br />4.3.1\r\nSystem.Net.Http | 4.1.1<br />4.3.1  | 4.1.2<br />4.3.2|\r\nSystem.Net.Http.WinHttpHandler | 4.0.1<br />4.3.0 |  4.0.2<br />4.3.1\r\nSystem.Net.Security | 4.0.0<br />4.3.0 |  4.0.1<br />4.3.1\r\nSystem.Net.WebSockets.Client | 4.0.0<br />4.3.0 |  4.0.1<br />4.3.1\r\nMicrosoft.AspNetCore.Mvc | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Abstractions | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.ApiExplorer | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.DataAnnotations | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Formatters.Json | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Formatters.Xml | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Localization | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Razor.Host | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Razor | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.TagHelpers | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.WebApiCompatShim | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version according to the affected versions table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2 or 1.0.3 you should update your package version to 1.0.4. If you are using version 1.1.0, 1.1.1 or 1.1.2 you should update your package version to 1.1.3. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on one of the vulnerable packages, `Microsoft.AspNetCore.Mvc` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc` to 1.0.4.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.4\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has two direct package dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows two packages `Microsoft.AspNetCore` version 1.1.1, and `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on one of the vulnerable packages, `Microsoft.AspNetCore.Mvc` version 1.1.2.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc` to 1.1.3.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Routing` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.4, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.4 expected Microsoft.AspNetCore.Routing >= 1.0.4 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for each of the vulnerable packages, using the format `AssemblyName/`. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Core/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Core`.   If your `project.lock.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.Net.Security` version 4.0.0 you would add a reference to the appropriate fixed version, 4.0.1. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.Net.Security\": \"4.0.1\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.1\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `AssemblyName/`. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Core/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Core`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.Net.Security` version 4.3.0 you would add a reference to the appropriate fixed version, 4.3.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Security\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\nMicrosoft [thanks](https://go.microsoft.com/fwlink/?LinkId=21127) the following for working with us to help protect customers:\r\n\r\n- David Fernandez of [Sidertia Solutions](https://www.sidertia.com/Home) for reporting the ASP.NET Core Denial of Service Vulnerability (CVE-2017-0247)\r\n- Joonwoo Yu, Hyoung-Kee Choi of [Sungkyunkwan University](http://hit.skku.edu/~hkchoi/) for reporting the .NET Security Feature Bypass (CVE-2017-0248)\r\n- [Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov) for reporting the ASP.NET Core Spoofing Vulnerability (CVE-2017-0256)\r\n\r\n### Revisions\r\n\r\n- V1.0 (May 9, 2017): Advisory published.\r\n- V1.1 (May 10, 2017): Advisory revised to include a table of issue CVEs and their descriptions. This is an informational change only."},{"Id":"6823588661","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/6","RelatedDescription":"Closed issue \"Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\" (#6) at dotnet/announcements","RelatedBody":"# Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'\r\n\r\n## Summary\r\n\r\nUsing System.Net.Http 4.1.0-4.3.0 results in an exception when starting a web app that's .NET 4.6.1:\r\n* Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\r\n\r\nDetails in https://github.com/dotnet/corefx/issues/11100\r\nUpdated [System.Net.Http 4.3.1 package](https://www.nuget.org/packages/System.Net.Http/4.3.1) contains a fix and is available on nuget.\r\n\r\n## Impact\r\n\r\nHere's list of technical breaking changes caused by the solution withworkarounds for each.\r\nNote that these new behaviors are specific when running on net46 / Desktop. When you run on .NET Core, the behavior is intact.\r\n\r\n1. `HttpClientHandler.CheckCertificateRevocationList` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.CheckCertificateRevocationList` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n2. `HttpClientHandler.SslProtocols` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.SecurityProtocol` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n3. `HttpClientHandler.ServerCertificateCustomValidationCallback` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Works fine, except that the first parameter of type `HttpRequestMessage` is always `null`\r\n    * Workaround: Use `ServicePointManager.ServerCertificateValidationCallback`\r\n4. HTTP/2.0 support (introduced in System.Net.Http 4.1)\r\n    * New behavior: System.Net.Http (for net46 = Desktop) no longer supports HTTP/2.0 protocol on Windows 10.\r\n    * Workaround: Target System.Net.Http.WinHttpHandler NuGet package instead.\r\n    * Details:\r\n      * HTTP/2.0 support is part of the new CoreFx HTTP stack which on Windows is based on WinHTTP.  The original HTTP stack in .NET Framework 4.6 did not support HTTP/2.0 protocol.  If HTTP/2.0 protocol is needed, there is a separate NuGet package, System.Net.Http.WinHttpHandler which provides a new HttpClient handler. This handler is similar in features to `HttpClientHandler` (the normal default handler for HttpClient) but will support HTTP/2.0 protocol.  When using HttpClient on .NET Core runtime, the WinHttpHandler is actually built-in to HttpClientHandler.  But on .NET Framework, you need to explicitly use WinHttpHandler.\r\n      * Regardless of whether you are running using .NET Framework runtime (with WinHttpHandler) or .NET Core runtime using HttpClientHandler (or WinHttpHandler), there are additional requirements in order to get HTTP/2.0 protocol working on Windows:\r\n        * The client must be running on Windows 10 Anniversary Build (build 14393 or later).\r\n        * The `HttpRequestMessage.Version` must be explicitly set to 2.0 (the default is normally 1.1). Sample code:\r\n\r\n```c#\r\n            var handler = new WinHttpHandler();\r\n            var client = new HttpClient(handler);\r\n            var request = new HttpRequestMessage(HttpMethod.Get, \"http://www.example.com\");\r\n            request.Version = new Version(2, 0);\r\n\r\n            HttpResponseMessage response = await client.SendAsync(request);\r\n```\r\n\r\n## Rationale\r\n\r\nAfter much discussion it was decided the best way forward would be to revert the HttpClientHandler implementation in net46 build of CoreFX back to using original .NET Framework HTTP stack instead of WinHTTP (WinHttpHandler) based stack.\r\n\r\nAdditionally, we will revise the implementation of the new APIs on HttpClientHandler we introduced in 4.1.0.0 OOB package so that it works accordingly for the net46 build. [Details and tracking progress](https://github.com/dotnet/corefx/issues/11100#issuecomment-276293185).\r\n\r\n---\r\n\r\n*As a reminder, announcement threads are locked. Please use the [original issue](https://github.com/dotnet/corefx/issues/11100) for feedback and questions. Thanks!*"},{"Id":"6818829276","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:50:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/10","RelatedDescription":"Closed issue \"RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\" (#10) at dotnet/announcements","RelatedBody":"# RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\r\n\r\n## Summary\r\n\r\nThe RyuJIT JIT compiler will be used for all platform combinations for .NET Core 2.0 and beyond. JIT32 will be removed from the product. For .NET Core 1.x, RyuJIT is used for x64 and JIT32 is used for x86 chip support.\r\n\r\nWe intend for RyuJIT to be a 100% functionally compatible replacement for JIT32. RyuJIT has gone through extensive stress testing. This brings the .NET Core 32-bit product behavior much closer to the 64-bit product behavior.\r\n\r\nWe will publish more information on this change later. For now, this is just the announcement.\r\n\r\nNote: Windows is the only supported 32-bit platform for .NET Core 1.x and 2.x.\r\n\r\n### Details:\r\n\r\n- [Make RyuJIT/x86 the default x86 JIT (dotnet/coreclr #8260)](https://github.com/dotnet/coreclr/pull/8260)\r\n\r\n## Impact\r\n\r\n**Open Source** - RyuJIT is open source. JIT32 is not open source.\r\n\r\n**Single JIT Codebase** - There is now a single codebase for the CoreCLR JIT. This helps everyone who is working on platform expansion and who is investing in JIT improvements. An example is Samsung, who is investing in Linux x86 with RyuJIT x86.\r\n\r\n**Performance** - RyuJIT generally takes longer to compile than JIT32, but its optimizer can generate faster code. The performance difference may not be significant, depending on the application. In initial testing with ASP.NET, we found that the difference didn't matter. Please help us make RyuJIT faster! We will continue investing in RyuJIT performance (which often helps all architectures). If you notice performance regressions, we’re very interested to hear your results. Please contact us.\r\n\r\n**Features!** - RyuJIT has more features than JIT32. The feature gap with JIT32 will grow over time. The following features are now available to x86 workloads (due to this change): \r\n- SIMD\r\n- Fast Span&lt;T&gt; support\r\n- Inlining improvements\r\n- Devirtualization\r\n- Significantly better floating point performance\r\n- Better performance with value types (structs)\r\n\r\n**Possible compatibility concerns:** \r\n- floating-point precision\r\n- undefined behaviors (programs that happened to work that had bugs in them) especially around interop, inlining differences (GetCallerAssembly intrinsic).\r\n\r\nPlease test! If an x86 program was working in 1.x, and failing in 2.x, please report it on GitHub or at ryujit@microsoft.com. \r\n\r\nPlease see some of our past [blog posts on RyuJIT](https://blogs.msdn.microsoft.com/dotnet/tag/ryujit/) to learn more about it.\r\n\r\n## Rationale\r\n\r\nRyuJIT is the current and future platform of JIT compilation for .NET. We will use it for all platform combinations going forward. We're  more efficient as a developer community if we have a single codebase to learn, work on and improve."},{"Id":"6818827976","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:50:13","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/15","RelatedDescription":"Closed issue \".NET Framework 4.7 Docker Image Now Available\" (#15) at dotnet/announcements","RelatedBody":"## 4.7 image is now available on [Docker Hub](https://hub.docker.com/r/microsoft/dotnet-framework/).\r\n\r\n### Summary\r\n- The latest tag of the .NET Framework image now points to the 4.7 image.\r\n- The way our images layer is now different (although this shouldn’t affect anyone). Read more on the [design and discussion](https://github.com/dotnet/designs/issues/7).\r\n- Check it out with the [4.7 Docker Image Sample](https://github.com/Microsoft/dotnet-framework-docker-samples/tree/master/dotnetapp-4.7)\r\n\r\n### Feedback\r\nPlease try it out! General feedback can be logged in the [.NET Framework Docker issues](https://github.com/Microsoft/dotnet-framework-docker/issues).\r\n[Microsoft/dotnet-framework-docker #22 ](https://github.com/Microsoft/dotnet-framework-docker/issues/22) is open for discussion.\r\n"},{"Id":"6818827238","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:50:00","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/22","RelatedDescription":"Closed issue \".NET Core Support for macOS High Sierra\" (#22) at dotnet/announcements","RelatedBody":"# .NET Core Support for macOS High Sierra\r\n\r\n## Summary\r\n\r\n.NET Core 1.x and 2.0 do not currently support macOS High Sierra (version 10.13, currently in beta) due to changes in macOS. The .NET Core team has been testing macOS High Sierra builds and has filed bugs with Apple so that the two products can work better together.\r\n\r\nWe intend to have both .NET Core 1.x and 2.0 supporting macOS High Sierra by the time Apple ships the final production release. We are hoping to ship .NET Core 2.0 RTW with High Sierra support.\r\n\r\nAs .NET Core support for macOS High Sierra is improved, this announcement will be updated with the new status.\r\n\r\n## Impact\r\n\r\n.NET Core does not work on macOS High Sierra.\r\n\r\n## Details\r\n\r\n* [dotnet/core #677](https://github.com/dotnet/core/issues/677) -- tracking bug\r\n* [dotnet/corefx #22243](https://github.com/dotnet/corefx/pull/22243) -- workaround for issue 33294006, listed below.\r\n\r\nWe have reported the following issues to Apple as part of supporting .NET Core on macOS High Sierra.\r\n\r\n> Note: The issue links can only be accessed by Apple employees.\r\n\r\n* [33275095](https://bugreport.apple.com/web/?problemID=33275095) SSL Failure: macOS 10.13 (17A291j) SecureTransport in server mode can select ciphersuites not applicable to the TLS version.\r\n\r\n    **.NET Core Note:** When hosting an [SslStream](https://docs.microsoft.com/dotnet/api/system.net.security.sslstream?view=netcore-2.0) limited to TLS 1.0 or TLS 1.1 clients other than Apple SecureTransport may fail to connect.\r\n\r\n* [33143630](https://bugreport.apple.com/web/?problemID=33143630) macOS 10.13 (17A291j) SecTrustExecute fails with no error building revocation-enabled chain against a self-issued certificate.\r\n    \r\n    **.NET Core Note:** In this situation an Apple-specific derived type of CryptographicException will be thrown with a message of “No error”.\r\n\r\n* [33294006](https://bugreport.apple.com/web/?problemID=33294006) macOS 10.13 (17A291j) libcurl changing to LibreSSL changes thread-safety model from safe to unsafe \r\n    \r\n    **.NET Core Note:** A functioning workaround is in place, but it may regress performance for parallel HTTP requests (to avoid crashes caused by the loss of thread safety).\r\n\r\n* [32948209](https://bugreport.apple.com/web/?problemID=32948209) CCCryptorReset returns kCCUnimplemented for ECB on 10.13.\r\n\r\n    **.NET Core Note:** .NET Core has worked around this regression, so it should not be user-impacting."},{"Id":"6818826376","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:49:43","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Closed issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."},{"Id":"6818825541","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:49:27","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/11","RelatedDescription":"Closed issue \".NET Designs Repository Created\" (#11) at dotnet/announcements","RelatedBody":"# .NET Designs Repository Created\r\n\r\n## Summary\r\n\r\n.NET designs now have a home on GitHub at [dotnet/designs](https://github.com/dotnet/designs). This repository and the process it uses is intended to be very similar to [dotnet/csharplang](https://github.com/dotnet/csharplang). We want to share .NET design documents and get much earlier feedback on plans.\r\n\r\n## Details\r\n\r\nThe repository was just created. You can see two designs that you can participate on. More designs will show up over time. These two designs were selected as the initial set since the current behavior for both has received significant feedback.\r\n\r\n- [.NET Core 2+ Naming and Versioning](https://github.com/dotnet/designs/issues/2)\r\n- [.NET Core 2+ Version Binding](https://github.com/dotnet/designs/issues/3)\r\n\r\nA separate repository was created for a few reasons:\r\n\r\n- .NET designs may need to be implemented in multiple repos, including runtime, framework and language repos.\r\n- .NET designs may or may not be specific to .NET Core.\r\n\r\nThanks in advance for your participation in this repository."},{"Id":"6803910341","Type":"IssuesEvent","CreatedAt":"2017-11-03T04:47:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/37","RelatedDescription":"Opened issue \"microsoft/dotnet nanoserver images now support Windows Server 1709\" (#37) at dotnet/announcements","RelatedBody":"# microsoft/dotnet nanoserver images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released in October. [microsoft/nanoserver](https://hub.docker.com/r/microsoft/nanoserver/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `nanoserver-1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/) substring.\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #330](https://github.com/dotnet/dotnet-docker/issues/330)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker #321](https://github.com/dotnet/dotnet-docker/pull/321)\r\n* [dotnet/dotnet-docker #322](https://github.com/dotnet/dotnet-docker/issues/322)\r\n* [dotnet/dotnet-docker #329](https://github.com/dotnet/dotnet-docker/pull/329)\r\n\r\n.NET Core Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\nYou can see an example of 1709-based images in the following example.\r\n\r\n![.NET Core nanoserver 1709 images](https://user-images.githubusercontent.com/2608468/32360772-61680cec-c016-11e7-851d-0d962c35fe41.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Core images with the tag substring `nanoserver-1709` and Windows Server 2016 images with the tag substring `nanoserver-sac2016`.\r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Core images will adopt [manifest lists](https://github.com/dotnet/dotnet-docker/issues/322) so that a single logical tag, like `2.0-runtime`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet:2.0-runtime` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines.\r\n\r\n[.NET Framework](https://github.com/dotnet/announcements/issues/36) Docker images are also using manifest lists for the same reason.\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be.\r\n"},{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6824324158","Type":"PullRequestEvent","CreatedAt":"2017-11-08T05:26:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14920","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02208-03 (master)\" (#14920) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6824278586","Type":"PullRequestEvent","CreatedAt":"2017-11-08T05:06:33","Actor":"karajas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14919","RelatedDescription":"Merged pull request \"Download pkg and symbolpkg flat\" (#14919) at dotnet/coreclr","RelatedBody":"@weshaggard @jcagme "},{"Id":"6824157325","Type":"PullRequestEvent","CreatedAt":"2017-11-08T04:13:57","Actor":"jcagme","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14896","RelatedDescription":"Merged pull request \"Update BuildTools, CoreFx, PgoData to prerelease-02207-02, preview1-25907-04, master-20171107-0019, respectively (master)\" (#14896) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`a584751`](https://github.com/dotnet-maestro-bot/coreclr/commits/a584751450dcfb9f680164f53f9b6d2921fe7234) Update BuildTools, CoreFx, PgoData to prerelease-02207-02, preview1-25907-04, master-20171107-0019, respectively\r\n   * :hourglass: **CentOS7.1 x64 Checked Innerloop Build and Test** Triggered.\r\n   * :hourglass: **CentOS7.1 x64 Debug Innerloop Build** Triggered.\r\n   * :hourglass: **CROSS Check** Triggered.\r\n   * :hourglass: **OSX10.12 x64 Checked Innerloop Build and Test** Triggered.\r\n   * :hourglass: **Perf Build and Test** Triggered.\r\n   * :hourglass: **Tizen armel Cross Checked Innerloop Build and Test** Triggered.\r\n   * :hourglass: **Ubuntu arm64 Cross Debug Innerloop Build** Triggered.\r\n   * :hourglass: **Ubuntu armlb Cross Debug Innerloop Build** Triggered.\r\n   * :hourglass: **Ubuntu x64 Checked Innerloop Build and Test** Triggered.\r\n   * :hourglass: **Ubuntu x64 Innerloop Formatting** Triggered.\r\n   * :hourglass: **Ubuntu16.04 armlb Cross Debug Innerloop Build** Triggered.\r\n   * :hourglass: **Windows_NT x64 Checked Innerloop Build and Test** Triggered.\r\n   * :hourglass: **Windows_NT x64 Innerloop Formatting** Triggered.\r\n   * :hourglass: **Windows_NT x86 Checked Innerloop Build and Test** Triggered.\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/coreclr?pullRequest=14896)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`b20c592`](https://github.com/dotnet-maestro-bot/coreclr/commits/b20c5924a56a6c4cb7e06c07a6b35c1a9c0f6695) Update BuildTools, PgoData to prerelease-02207-01, master-20171107-0019, respectively\r\n   * :hourglass: **OSX10.12 x64 Checked Innerloop Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_osx10.12_flow_prtest/9079/)\r\n   * :hourglass: **Perf Build and Test** Started. [Details](https://ci2.dot.net/job/dotnet_coreclr/job/master/job/perf-pipeline_prtest/1293/)\r\n   * :hourglass: **Tizen armel Cross Checked Innerloop Build and Test** Triggered.\r\n   * :hourglass: **Ubuntu armlb Cross Debug Innerloop Build** Triggered.\r\n   * :hourglass: **Ubuntu16.04 armlb Cross Debug Innerloop Build** Triggered.\r\n   * :heavy_check_mark: **CentOS7.1 x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_centos7.1_flow_prtest/648/)\r\n   * :heavy_check_mark: **CentOS7.1 x64 Debug Innerloop Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/debug_centos7.1_prtest/12465/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/CROSS_check_prtest/7766/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/coreclr?pullRequest=14896)\r\n   * :heavy_check_mark: **Ubuntu arm64 Cross Debug Innerloop Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_debug_small_page_size_prtest/2055/)\r\n   * :heavy_check_mark: **Ubuntu x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_ubuntu_flow_prtest/12859/)\r\n   * :heavy_check_mark: **Ubuntu x64 Innerloop Formatting** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_ubuntu_formatting_prtest/12570/)\r\n   * :heavy_check_mark: **Windows_NT x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_windows_nt_prtest/631/)\r\n   * :heavy_check_mark: **Windows_NT x64 Innerloop Formatting** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_windows_nt_formatting_prtest/12512/)\r\n   * :heavy_check_mark: **Windows_NT x86 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_checked_windows_nt_prtest/12219/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`99f0711`](https://github.com/dotnet-maestro-bot/coreclr/commits/99f071176aeaf6587930041d28f35a20cd7fcb1b) Update PgoData to master-20171107-0019\r\n   * :x: **Perf Build and Test** Build finished.  [Details](https://ci2.dot.net/job/dotnet_coreclr/job/master/job/perf-pipeline_prtest/1253/)\r\n   * :heavy_check_mark: **CentOS7.1 x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_centos7.1_flow_prtest/610/)\r\n   * :heavy_check_mark: **CentOS7.1 x64 Debug Innerloop Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/debug_centos7.1_prtest/12428/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/CROSS_check_prtest/7727/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met.\r\n   * :heavy_check_mark: **OSX10.12 x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_osx10.12_flow_prtest/9041/)\r\n   * :heavy_check_mark: **Tizen armel Cross Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/armel_cross_checked_tizen_prtest/513/)\r\n   * :heavy_check_mark: **Ubuntu arm64 Cross Debug Innerloop Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_debug_small_page_size_prtest/2017/)\r\n   * :heavy_check_mark: **Ubuntu armlb Cross Debug Innerloop Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/armlb_cross_debug_ubuntu_prtest/599/)\r\n   * :heavy_check_mark: **Ubuntu x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_ubuntu_flow_prtest/12822/)\r\n   * :heavy_check_mark: **Ubuntu x64 Innerloop Formatting** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_ubuntu_formatting_prtest/12533/)\r\n   * :heavy_check_mark: **Ubuntu16.04 armlb Cross Debug Innerloop Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/armlb_cross_debug_ubuntu16.04_prtest/1809/)\r\n   * :heavy_check_mark: **Windows_NT x64 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_windows_nt_prtest/593/)\r\n   * :heavy_check_mark: **Windows_NT x64 Innerloop Formatting** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_windows_nt_formatting_prtest/12474/)\r\n   * :heavy_check_mark: **Windows_NT x86 Checked Innerloop Build and Test** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_checked_windows_nt_prtest/12182/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6824119513","Type":"PullRequestEvent","CreatedAt":"2017-11-08T03:57:47","Actor":"karajas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14919","RelatedDescription":"Opened pull request \"Download pkg and symbolpkg flat\" (#14919) at dotnet/coreclr","RelatedBody":"@weshaggard @jcagme "},{"Id":"6824064747","Type":"PullRequestEvent","CreatedAt":"2017-11-08T03:35:51","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14347","RelatedDescription":"Merged pull request \"Fixed trash register usage at PollGC helper\" (#14347) at dotnet/coreclr","RelatedBody":"Fixes issue #13213.\r\n\r\nThe problem was about killing trash registers at PollGC call.\r\nThe original code of the method `Xunit.Sdk.GeneralDigest:Reset` where helper call trashes R0 register which is obviously led to `NullReferenceException`\r\n```\r\nG_M35775_IG01:        ; func=00, offs=000000H, size=0004H, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG\r\n\r\nIN001a: 000000      push    {lr}\r\nIN001b: 000002      sub     sp, 12\r\n\r\nG_M35775_IG02:        ; offs=000004H, size=0018H, gcrefRegs=0001 {r0}, byrefRegs=0000 {}, byref, isz\r\n\r\nIN0001: 000004      movs    r3, 0\r\nIN0002: 000006      str     r3, [r0+8]\r\nIN0003: 000008      movs    r3, 0\r\nIN0004: 00000A      str     r3, [r0+12]\r\nIN0005: 00000C      str     r3, [r0+20]\r\nIN0006: 00000E      movw    r3, 0x54dc\r\nIN0007: 000012      movt    r3, 0x6743\r\nIN0008: 000016      ldr     r2, [r3]\r\nIN0009: 000018      cmp     r2, 0\r\nIN000a: 00001A      bne     SHORT G_M35775_IG04  <=== branch to PollGC\r\n\r\nG_M35775_IG03:        ; offs=00001CH, size=0022H, gcrefRegs=0001 {r0}, byrefRegs=0000 {}, byref\r\n\r\nIN000b: 00001C      ldr     r2, [r0+16]  <=== uses trashed R0\r\nIN000c: 00001E      ldr     r3, [r2+4]   <=== access violation produces NullReferenceException\r\nIN000d: 000020      str     r3, [sp]\r\nIN000e: 000022      movw    r0, 0x9479\r\nIN000f: 000026      movt    r0, 0xcb\r\nIN0010: 00002A      movs    r3, 0\r\nIN0011: 00002C      movw    r1, 0xb021\r\nIN0012: 000030      movt    r1, 0x6712\r\nIN0013: 000034      movw    lr, 0xe051\r\nIN0014: 000038      movt    lr, 0x66f0\r\nIN0015: 00003C      blx     lr          // CORINFO_HELP_TAILCALL\r\n\r\nG_M35775_IG04:        ; offs=00003EH, size=000CH, gcrefRegs=0001 {r0}, byrefRegs=0000 {}, byref, isz\r\n\r\nIN0016: 00003E      movw    r3, 0xb61\r\nIN0017: 000042      movt    r3, 0x66f1\r\nIN0018: 000046      blx     r3          // CORINFO_HELP_POLL_GC <=== trashes R0\r\nIN0019: 000048      b       SHORT G_M35775_IG03   <=== go back to execution, R0 contains garbage\r\n```\r\n\r\nAfter the fix\r\n```\r\nG_M35775_IG01:        ; func=00, offs=000000H, size=0004H, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG\r\n\r\nIN001a: 000000      push    {r2,r3,r4,lr}\r\nIN001b: 000002      mov     r4, r0   <=== saves R0 into callee-saved R4\r\n\r\nG_M35775_IG02:        ; offs=000004H, size=0018H, gcrefRegs=0010 {r4}, byrefRegs=0000 {}, byref, isz\r\n\r\nIN0001: 000004      movs    r3, 0\r\nIN0002: 000006      str     r3, [r4+8] \r\nIN0003: 000008      movs    r3, 0\r\nIN0004: 00000A      str     r3, [r4+12]\r\nIN0005: 00000C      str     r3, [r4+20]\r\nIN0006: 00000E      movw    r3, 0x54dc\r\nIN0007: 000012      movt    r3, 0x6743\r\nIN0008: 000016      ldr     r2, [r3]\r\nIN0009: 000018      cmp     r2, 0\r\nIN000a: 00001A      bne     SHORT G_M35775_IG04\r\n\r\nG_M35775_IG03:        ; offs=00001CH, size=0022H, gcrefRegs=0010 {r4}, byrefRegs=0000 {}, byref\r\n\r\nIN000b: 00001C      ldr     r2, [r4+16] <=== uses restored R4\r\nIN000c: 00001E      ldr     r3, [r2+4]\r\nIN000d: 000020      str     r3, [sp]\r\nIN000e: 000022      movw    r0, 0xb5f9\r\nIN000f: 000026      movt    r0, 0x6ce\r\nIN0010: 00002A      movs    r3, 0\r\nIN0011: 00002C      movw    r1, 0xb0d1\r\nIN0012: 000030      movt    r1, 0x6712\r\nIN0013: 000034      movw    r4, 0xe051\r\nIN0014: 000038      movt    r4, 0x66f0\r\nIN0015: 00003C      blx     r4          // CORINFO_HELP_TAILCALL\r\n\r\nG_M35775_IG04:        ; offs=00003EH, size=000CH, gcrefRegs=0010 {r4}, byrefRegs=0000 {}, byref, isz\r\n\r\nIN0016: 00003E      movw    r3, 0xb61\r\nIN0017: 000042      movt    r3, 0x66f1\r\nIN0018: 000046      blx     r3          // CORINFO_HELP_POLL_GC  <=== keeps R4 as callee saved\r\nIN0019: 000048      b       SHORT G_M35775_IG03\r\n```\r\n\r\nJIT_PollGC prolog:\r\n```\r\ncoreclr!JIT_PollGC [c:\\git\\coreclr\\src\\vm\\jithelpers.cpp @ 5627]:\r\n 5627 63c10b60 e92d4ff0 push        {r4-r11,lr}\r\n```"},{"Id":"6823992606","Type":"PullRequestEvent","CreatedAt":"2017-11-08T03:08:46","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14918","RelatedDescription":"Opened pull request \"Don't allow unsafe CpBlk for legacy backend\" (#14918) at dotnet/coreclr","RelatedBody":"The arm32 legacy backend does not implement the code to disable/re-enable\r\nGC interruptibility based on the gtBlkOpGcUnsafe flag. So, disable\r\nthat mode of OBJ to BLK morphing.\r\n\r\nFixes an arm32 legacy backend GCStress=C case in #14856."},{"Id":"6823991606","Type":"IssuesEvent","CreatedAt":"2017-11-08T03:08:21","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14917","RelatedDescription":"Opened issue \"[RyuJIT/arm32] Add protojit build to cross components build\" (#14917) at dotnet/coreclr","RelatedBody":"We need to be able to use `COMPlus_AltJitNgen=*` when running x86-hosted arm-targeted crossgen of System.Private.CoreLib.dll (and others), so we need a proper JIT to be built and dropped to the bin\\Product\\Windows_NT.arm.debug\\x86 directory (for example), next to crossgen.exe as with clrjit.dll.\r\n"},{"Id":"6823898701","Type":"IssuesEvent","CreatedAt":"2017-11-08T02:35:28","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14916","RelatedDescription":"Opened issue \"[RyuJIT/arm32] Do arm32 crossgen testing\" (#14916) at dotnet/coreclr","RelatedBody":"Currently, crossgen of System.Private.CoreLib.dll is done using the legacy arm32 JIT.\r\n\r\nWe need to test crossgen using RyuJIT/arm32:\r\n\r\n1. Crossgen System.Private.CoreLib.dll and run all test flavors with this.\r\n2. Crossgen all framework assemblies: (a) check for asserts, (b) run tests this way.\r\n\r\nbuild.cmd contains an old \"altjitcrossgen\" argument that we used for (1), probably for RyuJIT/x86 testing a long time ago. We might want to bring this back.\r\n"},{"Id":"6823758418","Type":"IssuesEvent","CreatedAt":"2017-11-08T01:45:56","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14915","RelatedDescription":"Opened issue \"[Local GC] Unhandled exception in standalone GC causes a deadlock\" (#14915) at dotnet/coreclr","RelatedBody":"When not running standalone, an unhandled exception in the GC is caught by the vectored exception handler [here](https://github.com/dotnet/coreclr/blob/master/src/vm/excep.cpp#L7802) which ultimately causes an assert failure, e.g. (seen here with an AV inserted into `WKS::GCHeap::Promote`):\r\n\r\n```\r\nAssert failure(PID 29968 [0x00007510], Thread: 20984 [0x51f8]): Consistency check failed: AV in clr at this callstack: ------\r\nCORECLR! WKS::GCHeap::Promote + 0x41 (0x00007ffe`4a210c01)\r\nCORECLR! GcEnumObject + 0xC3 (0x00007ffe`4a0ca4c3)\r\nCORECLR! GcInfoDecoder::ReportStackSlotToGC + 0x55E (0x00007ffe`4a1305ee)\r\nCORECLR! GcInfoDecoder::ReportSlotToGC + 0x1B5 (0x00007ffe`4a130015)\r\nCORECLR! GcInfoDecoder::ReportUntrackedSlots + 0x82 (0x00007ffe`4a130682)\r\nCORECLR! GcInfoDecoder::EnumerateLiveSlots + 0x1070 (0x00007ffe`4a12e8f0)\r\nCORECLR! EECodeManager::EnumGcRefs + 0x5D8 (0x00007ffe`49dbd658)\r\nCORECLR! GcStackCrawlCallBack + 0x485 (0x00007ffe`4a0cab95)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x6C (0x00007ffe`49aae3cc)\r\nCORECLR! Thread::StackWalkFramesEx + 0x17B (0x00007ffe`49ab14db)\r\nCORECLR! Thread::StackWalkFrames + 0x2F4 (0x00007ffe`49ab1344)\r\nCORECLR! ScanStackRoots + 0x32F (0x00007ffe`4a2b4ebf)\r\nCORECLR! GCToEEInterface::GcScanRoots + 0x1F9 (0x00007ffe`4a2b3ae9)\r\nCORECLR! GCScan::GcScanRoots + 0x2F (0x00007ffe`4a2be2cf)\r\nCORECLR! WKS::gc_heap::mark_phase + 0x322 (0x00007ffe`4a23a212)\r\nCORECLR! WKS::gc_heap::gc1 + 0x1AA (0x00007ffe`4a22e35a)\r\nCORECLR! WKS::gc_heap::garbage_collect + 0x5CA (0x00007ffe`4a22e14a)\r\nCORECLR! WKS::GCHeap::GarbageCollectGeneration + 0x1DC (0x00007ffe`4a20ee7c)\r\nCORECLR! WKS::GCHeap::GarbageCollectTry + 0xE0 (0x00007ffe`4a20eff0)\r\n-----\r\n.AV on tid=0x51f8 (20984), cxr=0000003800979B00, exr=0000003800979FF0\r\nFAILED: false\r\n\r\nCORECLR! CHECK::Trigger + 0x26A (0x00007ffe`497fc24a)\r\nCORECLR! CLRVectoredExceptionHandlerPhase3 + 0x2F6 (0x00007ffe`4990a466)\r\nCORECLR! CLRVectoredExceptionHandlerPhase2 + 0x8C (0x00007ffe`49909e8c)\r\nCORECLR! CLRVectoredExceptionHandler + 0x262 (0x00007ffe`49909de2)\r\nCORECLR! CLRVectoredExceptionHandlerShim + 0x172 (0x00007ffe`4990a702)\r\nNTDLL! RtlUserThreadStart + 0x132 (0x00007ffe`a74df0a2)\r\nNTDLL! RtlWalkFrameChain + 0x122B (0x00007ffe`a748cecb)\r\nNTDLL! KiUserExceptionDispatcher + 0x2E (0x00007ffe`a7513b6e)\r\nCORECLR! WKS::GCHeap::Promote + 0x41 (0x00007ffe`4a210c01)\r\nCORECLR! GcEnumObject + 0xC3 (0x00007ffe`4a0ca4c3)\r\n    File: e:\\github\\coreclr\\src\\vm\\excep.cpp Line: 7930\r\n    Image: E:\\GitHub\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nWhen running standalone, for whatever reason, this vectored exception handler is not invoked and instead we end up in the normal CLR exception path, which results in us attempting to allocate a managed exception object. On debug builds, this asserts:\r\n\r\n```\r\nAssert failure(PID 43992 [0x0000abd8], Thread: 43532 [0xaa0c]): CONTRACT VIOLATION by ExceptionTracker::GetOrCreateTracker at \"e:\\github\\coreclr\\src\\vm\\exceptionhandling.cpp\" @ 3682\r\n\r\nGC_TRIGGERS encountered in a GC_NOTRIGGER scope\r\n\r\n                        CONTRACT in ExceptionTracker::GetOrCreateTracker at \"e:\\github\\coreclr\\src\\vm\\exceptionhandling.cpp\" @ 3682\r\nVIOLATED-->  CONTRACT in EECodeManager::EnumGcRefs at \"e:\\github\\coreclr\\src\\vm\\eetwain.cpp\" @ 4919\r\n                        FAULT_FORBID in standalone::ScanStackRoots at \"e:\\github\\coreclr\\src\\vm\\gcenv.ee.cpp\" @ 83\r\n                        GCX_NOTRIGGER in standalone::ScanStackRoots at \"e:\\github\\coreclr\\src\\vm\\gcenv.ee.cpp\" @ 83\r\n                        CANNOTTHROW in standalone::ScanStackRoots at \"e:\\github\\coreclr\\src\\vm\\gcenv.ee.cpp\" @ 83\r\n                        CONTRACT in Alloc at \"e:\\github\\coreclr\\src\\vm\\gchelpers.cpp\" @ 218\r\n                        CONTRACT in SlowAllocateString at \"e:\\github\\coreclr\\src\\vm\\gchelpers.cpp\" @ 1011\r\n                        OVERRIDE_TYPE_LOAD_LEVEL_LIMIT in MethodDescCallSite::CallTargetWorker at \"e:\\github\\coreclr\\src\\vm\\callhelpers.cpp\" @ 371\r\n                        CONTRACT in MethodDescCallSite::CallTargetWorker at \"e:\\github\\coreclr\\src\\vm\\callhelpers.cpp\" @ 361\r\n                        CONTRACT in AppDomain::DoSetup at \"e:\\github\\coreclr\\src\\vm\\appdomain.cpp\" @ 4642\r\n                        GCX_COOP in CorHost2::_CreateAppDomain at \"e:\\github\\coreclr\\src\\vm\\corhost.cpp\" @ 671\r\n                        GCX_COOP_THREAD_EXISTS in CorHost2::_CreateAppDomain at \"e:\\github\\coreclr\\src\\vm\\corhost.cpp\" @ 647\r\n                        CONTRACT in CorHost2::_CreateAppDomain at \"e:\\github\\coreclr\\src\\vm\\corhost.cpp\" @ 617\r\n\r\n\r\n\r\nCORECLR! CONTRACT_ASSERT + 0x342 (0x00007ffe`489faab2)\r\nCORECLR! EEContract::DoChecks + 0x3DE (0x00007ffe`48b59ace)\r\nCORECLR! ExceptionTracker::GetOrCreateTracker + 0x327 (0x00007ffe`48cf1937)\r\nCORECLR! ProcessCLRException + 0x62F (0x00007ffe`48cfd57f)\r\nNTDLL! chkstk + 0x11D (0x00007ffe`a7514c3d)\r\nNTDLL! RtlWalkFrameChain + 0x1518 (0x00007ffe`a748d1b8)\r\nNTDLL! KiUserExceptionDispatcher + 0x2E (0x00007ffe`a7513b6e)\r\nCLRGC! WKS::GCHeap::Promote + 0x3B (0x00007ffe`6c98625b)\r\nCORECLR! PromoteCarefully + 0xE1 (0x00007ffe`48f9b751)\r\nCORECLR! GcEnumObject + 0x92 (0x00007ffe`492ea492)\r\n    File: e:\\github\\coreclr\\src\\vm\\exceptionhandling.cpp Line: 3682\r\n    Image: E:\\GitHub\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nOn non-debug builds, this will deadlock since crashes in the GC generally occur when *doing* GCs and the allocating thread needs to switch to cooperative mode to allocate.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6823565456","Type":"PullRequestEvent","CreatedAt":"2017-11-08T00:40:33","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7978","RelatedDescription":"Opened pull request \"Removing Tier 1 repos from Nuget.config\" (#7978) at dotnet/cli","RelatedBody":"Removing Tier 1 repos from Nuget.config; Tier 1 packages are coming from the internal 'dotnet-core' feed.\r\n\r\n\r\n"},{"Id":"6823431479","Type":"PullRequestEvent","CreatedAt":"2017-11-07T23:55:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7977","RelatedDescription":"Opened pull request \"Update SDK to 15.5.0-preview-20171107-4\" (#7977) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6822870179","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:36:56","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7976","RelatedDescription":"Closed pull request \"Fixing the 'PublishNupkgToTransportFeed' target\" (#7976) at dotnet/cli","RelatedBody":"Isolating the 'PublishNupkgToTransportFeed' into as few files as possible; calling the DLL directly as the 'dotnet-cli-build.dll' no longer pulls this referenced assembly into its bin directory.\r\n\r\n\r\n"},{"Id":"6822582306","Type":"PullRequestEvent","CreatedAt":"2017-11-07T20:35:45","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7968","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25907-02 (master)\" (#7968) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6821921596","Type":"PullRequestEvent","CreatedAt":"2017-11-07T18:18:06","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7976","RelatedDescription":"Opened pull request \"Fixing the 'PublishNupkgToTransportFeed' target\" (#7976) at dotnet/cli","RelatedBody":"Isolating the 'PublishNupkgToTransportFeed' into as few files as possible; calling the DLL directly as the 'dotnet-cli-build.dll' no longer pulls this referenced assembly into its bin directory.\r\n\r\n\r\n"},{"Id":"6821798281","Type":"PullRequestEvent","CreatedAt":"2017-11-07T17:52:18","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7964","RelatedDescription":"Merged pull request \"Removing two stage build\" (#7964) at dotnet/cli","RelatedBody":"- Changed how we version by using the BUILD_BUILDNUMBER like the SDK instead of commit count. We don't need commit count as we don't have multiple legs on this repo anymore.\r\n\r\n- Removed two staged build, now that commit count is not needed. Also removed HostInfo and BuildInfo needs from the build.\r\n"},{"Id":"6821789439","Type":"PullRequestEvent","CreatedAt":"2017-11-07T17:50:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7970","RelatedDescription":"Merged pull request \"MSBuild 15.5.178\" (#7970) at dotnet/cli","RelatedBody":"Approved in shiproom, pending RPS. Will reply here when that passes.\r\n\r\nInsertion contains:\r\n\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/516280 | https://github.com/Microsoft/msbuild/pull/2671\r\n-- | --\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/520593 | https://github.com/Microsoft/msbuild/pull/2702\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?id=520591&_a=edit | https://github.com/Microsoft/msbuild/pull/2698\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?id=520627&_a=edit | https://github.com/Microsoft/msbuild/pull/2692\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/520633 | https://github.com/Microsoft/msbuild/pull/2695\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/520640 | https://github.com/Microsoft/msbuild/pull/2676\r\n\r\nVS PR: https://devdiv.visualstudio.com/DevDiv/MSBuild/_git/VS/pullrequest/92895\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6822836123","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:29:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/577","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02207-01 (master)\" (#577) at dotnet/standard","RelatedBody":""},{"Id":"6822322355","Type":"IssuesEvent","CreatedAt":"2017-11-07T19:40:46","Actor":"twtdev","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/576","RelatedDescription":"Opened issue \"WPF Design-time exceptions with NET Standard 2.0 class library, citing System.ComponentModel.Annotations, Version=4.2.0.0\" (#576) at dotnet/standard","RelatedBody":"I have posted [this](https://stackoverflow.com/q/46865023/1628429) StackOverflow question, but to no avail. \r\nTL;DR I only experience problems at _design-time_, not run-time. I only started experiencing the problem after upgrading my PCL projects to NET Standard 2.0 and my NuGet format to PackageReference.\r\nAs a result, pretty much all of my dialog boxes are crippled at design-time. \r\n\r\nHere is a simple repro:\r\n[WpfAppToTestDesignTimeError.zip](https://github.com/dotnet/standard/files/1451363/WpfAppToTestDesignTimeError.zip)\r\n\r\nOpen the solution, compile, open MainWindow.xaml--no problem.\r\nNow, open MainWindowViewModel and uncomment the 2nd property (the one whose type comes from the NET Standard 2 library), compile and note the exception in MainWindow.\r\n"},{"Id":"6819512071","Type":"IssuesEvent","CreatedAt":"2017-11-07T10:28:41","Actor":"WalterEbbers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/575","RelatedDescription":"Opened issue \".NET Standard 2.0 / .NET Framework 4.6.1 Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\" (#575) at dotnet/standard","RelatedBody":"Hi,\r\nI have a .NET Standard 2.0 library which references a few NET 4.6.1 libraries. \r\nThe .NET Standard library will be used in a .NET Core web application. \r\nThe .NET 4.6.1 Framework uses library 'System.ServiceModel.dll' FOR WCF calls.\r\n\r\nI try to do the following. \r\nMy .NET Core webapp goes to the .NET Standard library which calls something from my .NET Framework 4.6.1 project. But at that moment i get the following error: \r\n'Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.'\r\n\r\nThe 'System.ServiceModel.dll' is referenced as a assemblyreference in the .NET Standard project and the .NET Core webapp. \r\n\r\nI really thought that this would work but sadly it doesn't. Is this a issue with the .NET libraries?\r\nDo i need to change things in my .NET Standard / Core project?\r\n\r\nThnx in advance :) \r\n\r\nWalter\r\n\r\n\r\n\r\n"},{"Id":"6818599708","Type":"IssuesEvent","CreatedAt":"2017-11-07T06:35:50","Actor":"JasonGLYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/574","RelatedDescription":"Closed issue \"Serializing DataTable object to Json  with different results between .net framework 4 and .NetCore 2.0\" (#574) at dotnet/standard","RelatedBody":"We will get different result while do serializing works for system.Data.DataTable  objects .\r\n\r\n----------dotnet core ------------------\r\n{\"DataTable.RemotingVersion\":{\"Major\":2,\"Minor\":0,\"Build\":-1,\"Revision\":-1,\"MajorRevision\":-1,\"MinorRevision\":-1},\"XmlSchema\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>\\r\\n<xs:schema xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">\\r\\n  <xs:element name=\\\"RECORDSET\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        <xs:element name=\\\"ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_CODE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_ALIAS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_VALUE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARENT_PARAM_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"STATE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_CREATED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_CREATED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_MODIFIED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_MODIFIED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"ORG_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"SEQ\\\" type=\\\"xs:int\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"IS_SYS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"Parent_Param_Code\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n      </xs:sequence>\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n  <xs:element name=\\\"tmpDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"RECORDSET\\\" msdata:UseCurrentLocale=\\\"true\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\" />\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>\",\"XmlDiffGram\":\"<diffgr:diffgram xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\" xmlns:diffgr=\\\"urn:schemas-microsoft-com:xml-diffgram-v1\\\">\\r\\n  <tmpDataSet>\\r\\n    <RECORDSET diffgr:id=\\\"RECORDSET1\\\" msdata:rowOrder=\\\"0\\\">\\r\\n      <ID>2CD297F1338F473EB3A532ACC976DD3C</ID>\\r\\n      <PARAM_CODE>NO_FINISHED_BY_MO</PARAM_CODE>\\r\\n      <PARAM_DESC>NO_FINISHED_BY_MO</PARAM_DESC>\\r\\n      <PARAM_GROUP_ID>017dfbc924c811e787ddfa163e3e120a</PARAM_GROUP_ID>\\r\\n      <PARAM_ALIAS>NO_FINISHED_BY_MO</PARAM_ALIAS>\\r\\n      <PARAM_VALUE>Y</PARAM_VALUE>\\r\\n      <STATE>A</STATE>\\r\\n      <USER_CREATED>MGE</USER_CREATED>\\r\\n      <DATETIME_CREATED>2017-11-07T09:33:52+08:00</DATETIME_CREATED>\\r\\n      <ORG_ID>dc7b73bb81f644d4b9ef58445130505d</ORG_ID>\\r\\n      <SEQ>2</SEQ>\\r\\n      <IS_SYS>N</IS_SYS>\\r\\n    </RECORDSET>\\r\\n  </tmpDataSet>\\r\\n</diffgr:diffgram>\"}\r\n\r\n\r\n-------------.net framework -------------------------\r\n[\r\n{\r\n\"ID\": \"2CD297F1338F473EB3A532ACC976DD3C\",\r\n\"PARAM_CODE\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_DESC\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_GROUP_ID\": \"017dfbc924c811e787ddfa163e3e120a\",\r\n\"PARAM_ALIAS\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_VALUE\": \"Y\",\r\n\"PARENT_PARAM_ID\": null,\r\n\"STATE\": \"A\",\r\n\"USER_CREATED\": \"MGE\",\r\n\"DATETIME_CREATED\": \"2017-11-07T09:33:52\",\r\n\"DATETIME_MODIFIED\": null,\r\n\"USER_MODIFIED\": null,\r\n\"ORG_ID\": \"dc7b73bb81f644d4b9ef58445130505d\",\r\n\"SEQ\": 2,\r\n\"IS_SYS\": \"N\",\r\n\"Parent_Param_Code\": null,\r\n\"PARAM_GROUP_DESC\": null\r\n}\r\n]\r\n\r\n\r\n------------------------------------\r\ncould we align it to the .net Framework one?\r\n\r\n"},{"Id":"6818144609","Type":"IssuesEvent","CreatedAt":"2017-11-07T03:25:15","Actor":"JasonGLYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/574","RelatedDescription":"Opened issue \"DataTable Serialized with different results between .net framework 4 and .NetCore 2.0\" (#574) at dotnet/standard","RelatedBody":"We will get different result while do serializing works for system.Data.DataTable  objects .\r\n----------dotnet core ------------------\r\n{\"DataTable.RemotingVersion\":{\"Major\":2,\"Minor\":0,\"Build\":-1,\"Revision\":-1,\"MajorRevision\":-1,\"MinorRevision\":-1},\"XmlSchema\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>\\r\\n<xs:schema xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">\\r\\n  <xs:element name=\\\"RECORDSET\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        <xs:element name=\\\"ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_CODE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_ALIAS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_VALUE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARENT_PARAM_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"STATE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_CREATED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_CREATED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_MODIFIED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_MODIFIED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"ORG_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"SEQ\\\" type=\\\"xs:int\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"IS_SYS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"Parent_Param_Code\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n      </xs:sequence>\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n  <xs:element name=\\\"tmpDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"RECORDSET\\\" msdata:UseCurrentLocale=\\\"true\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\" />\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>\",\"XmlDiffGram\":\"<diffgr:diffgram xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\" xmlns:diffgr=\\\"urn:schemas-microsoft-com:xml-diffgram-v1\\\">\\r\\n  <tmpDataSet>\\r\\n    <RECORDSET diffgr:id=\\\"RECORDSET1\\\" msdata:rowOrder=\\\"0\\\">\\r\\n      <ID>2CD297F1338F473EB3A532ACC976DD3C</ID>\\r\\n      <PARAM_CODE>NO_FINISHED_BY_MO</PARAM_CODE>\\r\\n      <PARAM_DESC>NO_FINISHED_BY_MO</PARAM_DESC>\\r\\n      <PARAM_GROUP_ID>017dfbc924c811e787ddfa163e3e120a</PARAM_GROUP_ID>\\r\\n      <PARAM_ALIAS>NO_FINISHED_BY_MO</PARAM_ALIAS>\\r\\n      <PARAM_VALUE>Y</PARAM_VALUE>\\r\\n      <STATE>A</STATE>\\r\\n      <USER_CREATED>MGE</USER_CREATED>\\r\\n      <DATETIME_CREATED>2017-11-07T09:33:52+08:00</DATETIME_CREATED>\\r\\n      <ORG_ID>dc7b73bb81f644d4b9ef58445130505d</ORG_ID>\\r\\n      <SEQ>2</SEQ>\\r\\n      <IS_SYS>N</IS_SYS>\\r\\n    </RECORDSET>\\r\\n  </tmpDataSet>\\r\\n</diffgr:diffgram>\"}\r\n-------------.net framework -------------------------\r\n[\r\n{\r\n\"ID\": \"2CD297F1338F473EB3A532ACC976DD3C\",\r\n\"PARAM_CODE\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_DESC\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_GROUP_ID\": \"017dfbc924c811e787ddfa163e3e120a\",\r\n\"PARAM_ALIAS\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_VALUE\": \"Y\",\r\n\"PARENT_PARAM_ID\": null,\r\n\"STATE\": \"A\",\r\n\"USER_CREATED\": \"MGE\",\r\n\"DATETIME_CREATED\": \"2017-11-07T09:33:52\",\r\n\"DATETIME_MODIFIED\": null,\r\n\"USER_MODIFIED\": null,\r\n\"ORG_ID\": \"dc7b73bb81f644d4b9ef58445130505d\",\r\n\"SEQ\": 2,\r\n\"IS_SYS\": \"N\",\r\n\"Parent_Param_Code\": null,\r\n\"PARAM_GROUP_DESC\": null\r\n}\r\n]\r\n------------------------------------\r\ncould we align it to the .net Framework one?\r\n\r\n"},{"Id":"6817738225","Type":"PullRequestEvent","CreatedAt":"2017-11-07T01:01:08","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/515","RelatedDescription":"Merged pull request \"Merge Dev/release/2.0.0 into release/2.0.0\" (#515) at dotnet/standard","RelatedBody":"cc @eerhardt \r\n\r\nJust putting this PR to be ready to merge and test it in CI. "},{"Id":"6817737491","Type":"PullRequestEvent","CreatedAt":"2017-11-07T01:00:55","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/570","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02203-01 (master)\" (#570) at dotnet/standard","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`1e8ed77`](https://github.com/dotnet-maestro-bot/standard/commits/1e8ed77dc7e02d878de3cb7dc1db65ec4a401dc0) Update BuildTools to prerelease-02202-02\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/99/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/167/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/167/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`2a3aa0e`](https://github.com/dotnet-maestro-bot/standard/commits/2a3aa0ee6bb63c6a758ca7cc732022675c9d7dc3) Update BuildTools to prerelease-02202-01\r\n   * :x: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/166/)\r\n   * :x: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/166/)\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/98/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`7a573da`](https://github.com/dotnet-maestro-bot/standard/commits/7a573dae6852c30dc7ad48cd54d3cff6a85bcc1f) Update BuildTools to prerelease-02201-05\r\n   * :x: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/97/)\r\n   * :x: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/165/)\r\n   * :x: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/165/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`cb4d6a3`](https://github.com/dotnet-maestro-bot/standard/commits/cb4d6a336e3f97ef50f67ddb744d035c96521d48) Update BuildTools to prerelease-02201-04\r\n   * :hourglass: **OSX10.12** Triggered. (27/35 on osx-10.12||OSX.1012.Amd64.Open)\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/164/)\r\n   * :hourglass: **Windows_NT** Triggered. (13/43 on win2012-20171003)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6811119146","Type":"IssuesEvent","CreatedAt":"2017-11-05T14:51:49","Actor":"jp2masa","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/465","RelatedDescription":"Closed issue \"Question - Using .NET Standard 2.0 libraries in VSIX projects\" (#465) at dotnet/standard","RelatedBody":"I want to know what is the correct way of distributing a Visual Studio extension with .NET Standard 2.0 libraries.\r\nThe libraries I use were targeting .NET Standard 1.5 and I would add references to System.Runtime, System.Reflection,... in the VSIX project, then set `ForceIncludeInVSIX` metadata to `true` and the references were included in the VSIX.\r\nAfter upgrading Visual Studio 2017 to version 15.3 and installing the .NET Core 2.0 SDK, this no longer works, resulting in missing references.\r\nNow I'm upgrading the libraries to .NET Standard 2.0, what should I do to make sure the extension will work? Should I include `netstandard.dll`?\r\nCurrently I'm using this MSBuild target in the VSIX project:\r\n```xml\r\n<Target Name=\"IncludeNETStandardFacadeInVSIX\" AfterTargets=\"ImplicitlyExpandNETStandardFacades\">\r\n  <ItemGroup>\r\n    <Content Include=\"@(_NETStandardLibraryNETFrameworkLib)\" Condition=\"%(Filename) == 'netstandard'\">\r\n      <IncludeInVSIX>True</IncludeInVSIX>\r\n      <VSIXSubPath>/</VSIXSubPath>\r\n    </Content>\r\n  </ItemGroup>\r\n</Target>\r\n```"},{"Id":"6811047787","Type":"IssuesEvent","CreatedAt":"2017-11-05T14:07:11","Actor":"alden-menzalgy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/573","RelatedDescription":"Opened issue \"There's no way to get managed object size in memory\" (#573) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nThere is no way to get the actual (or even an approximate) size of the cached object in the memory.\r\n\r\nThe case is, we have +100 customized cache for different purposes to accelerate our platform, for each cache we have\r\n- Cache MaxSize\r\n- Cache ConsumedSize\r\n- Cache RemainingSize\r\n\r\nWhenever we insert some object to be cached, we should detect its size to re-calculate aforementioned cache properties.\r\n\r\nI know that's a complex issue and depends on many factors, so far we have some workarounds but non of them is official and we afraid to be changed in any minor or major release.\r\n\r\nShould you add any API to get the object size in the memory ? or at least Type size and then we can add the object-specific data length.\r\n\r\nRelated Topics\r\n[Workaround 1](https://stackoverflow.com/questions/1128315/find-size-of-object-instance-in-bytes-in-c-sharp)\r\n\r\n[What Microsoft says about this issue](https://blogs.msdn.microsoft.com/cbrumme/2003/04/15/size-of-a-managed-object/)"},{"Id":"6809945575","Type":"IssuesEvent","CreatedAt":"2017-11-04T22:44:48","Actor":"michaelsogos","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/572","RelatedDescription":"Opened issue \"Cannot open class diagram .cd file\" (#572) at dotnet/standard","RelatedBody":"Dear,\r\n\r\nIn a .net standard library project, on vs2017 15.4, we cannot open a class diagram file."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6824311917","Type":"PullRequestEvent","CreatedAt":"2017-11-08T05:20:58","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25119","RelatedDescription":"Opened pull request \"Fixing a bad typo in PhysicalMemoryMonitor\" (#25119) at dotnet/corefx","RelatedBody":"copy-paste error that would disable physical memory monitor :|"},{"Id":"6824167664","Type":"IssuesEvent","CreatedAt":"2017-11-08T04:18:29","Actor":"LHCGreg","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24941","RelatedDescription":"Closed issue \"Segfault when calling Dispose() on a socket asynchronously accepting connections in AssemblyLoadContext.Default.Unloading\" (#24941) at dotnet/corefx","RelatedBody":"Operating system: Debian Stretch\r\nTested with both dotnet-runtime-2.0.0 debian package and git master (coreclr SHA 67a66156d0307b49522a13618522d289268bc1f9 and corefx SHA 389d7ee0630e71ff868b4d9ebcdcf8111d5acee3)\r\n\r\nReproduction code: https://gist.github.com/LHCGreg/e2e044ae28f6cb5f786de742378c66ed\r\n\r\nReproduction steps:\r\n\r\n```\r\ndotnet AsyncSocketStopTest.dll\r\n(from another terminal, replace 1008 with actual PID of program) kill -SIGTERM 1008\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nStarting listening socket\r\nStarted listening\r\nRegistering SIGTERM handler\r\nRegistering SIGINT handler\r\nSocket is accepting asynchronously. Kill this process with kill -SIGTERM 1008\r\nIn SIGTERM handler.\r\nUnregistered SIGTERM and SIGINT handlers in SIGTERM handler\r\nSignalling socket to stop accepting connections.\r\nDisposing of listening socket\r\nCaught OperationCanceledException from waiting on AcceptAsync(), good\r\nUnregistered SIGTERM and SIGINT handlers in Main\r\nSleeping for 5 seconds.\r\nSegmentation fault\r\n```\r\n\r\nA stack trace from lldb:\r\n\r\n```\r\nOS Thread Id: 0x3ba (5)\r\n        Child SP               IP Call Site\r\n00007FFFEF7FB6D0 00007ffff627ee40 [InlinedCallFrame: 00007fffef7fb6d0] System.Diagnostics.Tracing.EventPipeInternal.CreateProvider(System.Guid, EtwEnableCallback)\r\n00007FFFEF7FB6D0 00007fff7cc753c1 [InlinedCallFrame: 00007fffef7fb6d0] System.Diagnostics.Tracing.EventPipeInternal.CreateProvider(System.Guid, EtwEnableCallback)\r\n00007FFFEF7FB6C0 00007FFF7CC753C1 DomainNeutralILStubClass.IL_STUB_PInvoke(System.Guid, EtwEnableCallback)\r\n00007FFFEF7FB780 00007FFF7CD00DBE System.Diagnostics.Tracing.EventPipeEventProvider.System.Diagnostics.Tracing.IEventProvider.EventRegister(System.Guid ByRef, EtwEnableCallback, Void*, Int64 ByRef)\r\n00007FFFEF7FB7C0 00007FFF7CC3EE08 System.Diagnostics.Tracing.EventProvider.Register(System.Guid)\r\n00007FFFEF7FB800 00007FFF7CC129E9 System.Diagnostics.Tracing.EventSource.Initialize(System.Guid, System.String, System.String[])\r\n00007FFFEF7FB890 00007FFF7CC4DA8C System.Diagnostics.Tracing.FrameworkEventSource..cctor()\r\n00007FFFEF7FBBE0 00007ffff6344f07 [GCFrame: 00007fffef7fbbe0]\r\n00007FFFEF7FC510 00007ffff6344f07 [HelperMethodFrame: 00007fffef7fc510]\r\n00007FFFEF7FC650 00007FFF7CC1D3E4 System.Threading.ThreadPoolWorkQueue..ctor()\r\n00007FFFEF7FC680 00007FFF7CD0BDCE System.Threading.ThreadPoolGlobals..cctor()\r\n00007FFFEF7FCA40 00007ffff6344f07 [GCFrame: 00007fffef7fca40]\r\n00007FFFEF7FD370 00007ffff6344f07 [HelperMethodFrame: 00007fffef7fd370]\r\n00007FFFEF7FD4B0 00007FFF7CC1CD03 System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback, System.Object)\r\n00007FFFEF7FD4F0 00007FFF7D27FC96 System.Net.Sockets.SocketAsyncContext+AsyncOperation.TryCompleteOrAbortAsync(System.Net.Sockets.SocketAsyncContext, Boolean)\r\n00007FFFEF7FD520 00007FFF7D280836 System.Net.Sockets.SocketAsyncContext+OperationQueue`1[[System.__Canon, System.Private.CoreLib]].StopAndAbort()\r\n00007FFFEF7FD570 00007FFF7D27CB3C System.Net.Sockets.SocketAsyncContext.Close()\r\n00007FFFEF7FD5A0 00007FFF7D27B832 System.Net.Sockets.SafeCloseSocket.ReleaseHandle()\r\n00007FFFEF7FD680 00007ffff6344f07 [GCFrame: 00007fffef7fd680]\r\n00007FFFEF7FD7F8 00007ffff6344f07 [GCFrame: 00007fffef7fd7f8]\r\n00007FFFEF7FD890 00007ffff6344f07 [HelperMethodFrame_1OBJ: 00007fffef7fd890] System.Runtime.InteropServices.SafeHandle.InternalDispose()\r\n00007FFFEF7FD9C0 00007FFF7D27B900 System.Net.Sockets.SafeCloseSocket.CloseAsIs()\r\n00007FFFEF7FD9F0 00007FFF7D26C07F System.Net.Sockets.Socket.Dispose(Boolean)\r\n00007FFFEF7FDAD0 00007FFF7D26C5EF System.Net.Sockets.Socket.Dispose()\r\n00007FFFEF7FDB00 00007FFF7D169F27 AsyncSocketStopTest.Program.SigtermHandler(System.Runtime.Loader.AssemblyLoadContext) [D:\\documents\\Visual Studio 2017\\Projects\\SocketStoptest\\AsyncSocketStopTest\\Program.cs @ 29]\r\n00007FFFEF7FDC30 00007ffff6344f07 [GCFrame: 00007fffef7fdc30]\r\n00007FFFEF7FDCE8 00007ffff6344f07 [GCFrame: 00007fffef7fdce8]\r\n```\r\n\r\n\r\nThe segfault only occurs when Disposing the socket in a handler for AssemblyLoadContext.Default.Unloading (SIGTERM). Disposing in a handler for Console.CancelKeyPress (SIGINT) does not segfault and works as expected, as does Disposing in response to user input."},{"Id":"6823910462","Type":"PullRequestEvent","CreatedAt":"2017-11-08T02:39:48","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25118","RelatedDescription":"Opened pull request \"Add sni implementation for client sslstream.\" (#25118) at dotnet/corefx","RelatedBody":"fixes #23731 \r\n\r\ncc @stephentoub @Tratcher \r\nfyi @Drawaes "},{"Id":"6823753005","Type":"PullRequestEvent","CreatedAt":"2017-11-08T01:44:03","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25097","RelatedDescription":"Merged pull request \"Improve throughput of Enumerable.Contains for default comparer\" (#25097) at dotnet/corefx","RelatedBody":"When no comparer or a null comparer is specified to Enumerable.Contains with a non-collection enumerable, `EqualityComparer<TSource>.Default` is used.  However, with recent improvements to the JIT around devirtualization and inlining of `EqualityComparer<TSource>.Default`, we can do much better for this case by having a loop dedicated to the comparer==null case.  For an enumerable of ints, this speeds up Contains in my measurements by up to 33% (which logically makes sense, as we're effectively eliminating one of three interface calls invoked per element).\r\n\r\ncc: @VSadov, @OmarTawfik, @AndyAyersMS "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6824089929","Type":"PullRequestEvent","CreatedAt":"2017-11-08T03:45:52","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23068","RelatedDescription":"Opened pull request \"Rewrite IPlaceholderOperation to IConditionalAccessInstanceOperation …\" (#23068) at dotnet/roslyn","RelatedBody":"…when in that context. Fixes https://github.com/dotnet/roslyn/issues/21671."},{"Id":"6824014490","Type":"PullRequestEvent","CreatedAt":"2017-11-08T03:16:50","Actor":"natidea","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23064","RelatedDescription":"Merged pull request \"Merges/master to dev15.5.x 20171107 manual\" (#23064) at dotnet/roslyn","RelatedBody":""},{"Id":"6823979862","Type":"PullRequestEvent","CreatedAt":"2017-11-08T03:04:04","Actor":"eerhardt","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23067","RelatedDescription":"Opened pull request \"Ensure the RunCsc and RunVbc scripts use quoted paths.\" (#23067) at dotnet/roslyn","RelatedBody":"When `%HOST_PATH%` contains a space, the call to the compiler fails.\r\n\r\nFix #23066\r\n\r\n**Customer scenario**\r\n\r\nWhen invoking RunCsc from a dotnet.exe that is installed to `C:\\Program Files`, the call to the compiler fails because of the space in the path.\r\n\r\n**Bugs this fixes:**\r\n\r\n#23066\r\n\r\n**Workarounds, if any**\r\n\r\nDon't install .NET Core SDK to a path with a space in it.\r\n\r\n\r\n**Risk**\r\n\r\nShould be very low.  Just adding quotes around two paths in RunCsc and RunVbc.\r\n\r\n**Performance impact**\r\n\r\nNo performance impact, as this is simply quoting two paths in two scripts.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes, the scenario listed in the bug worked with earlier versions of the .NET Core SDK.\r\n\r\n**Root cause analysis:**\r\n\r\n> How did we miss it?  \r\n\r\nSimple mistake when writing a script.\r\n\r\n> What tests are we adding to guard against it in the future?\r\n\r\nNone as of now.  I'm not sure how to test these scripts in the repo, nor how to test them using a path to `dotnet.exe` with spaces in it.\r\n\r\n**How was the bug found?**\r\n\r\nDogfooding in dotnet/corefxlab, which uses a specific version of the Microsoft.NETCore.Compilers package.  I updated to the latest .NET Core SDK, and my build started failing.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n\r\n/cc @khyperia "},{"Id":"6823954712","Type":"IssuesEvent","CreatedAt":"2017-11-08T02:55:13","Actor":"eerhardt","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23066","RelatedDescription":"Opened issue \"RunCsc.cmd needs to quote %HOST_PATH%\" (#23066) at dotnet/roslyn","RelatedBody":"**Version Used**: 2.6.0-beta2-62211-02\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Install https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.2.0-preview1-007522/dotnet-sdk-2.2.0-preview1-007522-win-x64.exe to `C:\\Program Files`.\r\n2. `dotnet build` the following project\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.Compilers\" Version=\"2.6.0-beta2-62211-02\" PrivateAssets=\"All\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n**Expected Behavior**:\r\nBuild is successful.\r\n\r\n**Actual Behavior**:\r\nThe build fails with\r\n\r\n```\r\nF:\\DotNetTest\\ClassLib>dotnet build\r\nMicrosoft (R) Build Engine version 15.5.172.19382 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 22.64 ms for F:\\DotNetTest\\ClassLib\\ClassLib.csproj.\r\nC:\\Users\\eerhardt\\.nuget\\packages\\microsoft.netcore.compilers\\2.6.0-beta2-62211-02\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"RunCsc.cmd\" exited with code 1. [F:\\DotNetTest\\ClassLib\\ClassLib.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Users\\eerhardt\\.nuget\\packages\\microsoft.netcore.compilers\\2.6.0-beta2-62211-02\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"RunCsc.cmd\" exited with code 1. [F:\\DotNetTest\\ClassLib\\ClassLib.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nDoing a `/v:diag` build log, you can see the problem:\r\n\r\n```\r\n                     C:\\Users\\eerhardt\\.nuget\\packages\\microsoft.netcore.compilers\\2.6.0-beta2-62211-02\\build\\..\\tools\\bincore\\RunCsc.cmd /noconfig /unsafe+ /checked- /nowarn:1701,1702,1705 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;DEBUG;NETSTANDARD1_1 /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.collections.concurrent\\4.3.0\\ref\\netstandard1.1\\System.Collections.Concurrent.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.collections\\4.3.0\\ref\\netstandard1.0\\System.Collections.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.diagnostics.debug\\4.3.0\\ref\\netstandard1.0\\System.Diagnostics.Debug.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.diagnostics.tools\\4.3.0\\ref\\netstandard1.0\\System.Diagnostics.Tools.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.diagnostics.tracing\\4.3.0\\ref\\netstandard1.1\\System.Diagnostics.Tracing.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.globalization\\4.3.0\\ref\\netstandard1.0\\System.Globalization.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.io.compression\\4.3.0\\ref\\netstandard1.1\\System.IO.Compression.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.io\\4.3.0\\ref\\netstandard1.0\\System.IO.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.linq\\4.3.0\\ref\\netstandard1.0\\System.Linq.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.linq.expressions\\4.3.0\\ref\\netstandard1.0\\System.Linq.Expressions.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.memory\\4.5.0-preview1-25816-01\\ref\\netstandard1.1\\System.Memory.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\netstandard1.1\\System.Net.Http.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.net.primitives\\4.3.0\\ref\\netstandard1.1\\System.Net.Primitives.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.objectmodel\\4.3.0\\ref\\netstandard1.0\\System.ObjectModel.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.reflection\\4.3.0\\ref\\netstandard1.0\\System.Reflection.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.reflection.extensions\\4.3.0\\ref\\netstandard1.0\\System.Reflection.Extensions.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.reflection.primitives\\4.3.0\\ref\\netstandard1.0\\System.Reflection.Primitives.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.resources.resourcemanager\\4.3.0\\ref\\netstandard1.0\\System.Resources.ResourceManager.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.runtime\\4.3.0\\ref\\netstandard1.0\\System.Runtime.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.runtime.extensions\\4.3.0\\ref\\netstandard1.0\\System.Runtime.Extensions.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.runtime.interopservices\\4.3.0\\ref\\netstandard1.1\\System.Runtime.InteropServices.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.runtime.interopservices.runtimeinformation\\4.3.0\\ref\\netstandard1.1\\System.Runtime.InteropServices.RuntimeInformation.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.runtime.numerics\\4.3.0\\ref\\netstandard1.1\\System.Runtime.Numerics.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.text.encoding\\4.3.0\\ref\\netstandard1.0\\System.Text.Encoding.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.text.encoding.extensions\\4.3.0\\ref\\netstandard1.0\\System.Text.Encoding.Extensions.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.text.regularexpressions\\4.3.0\\ref\\netstandard1.0\\System.Text.RegularExpressions.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.threading\\4.3.0\\ref\\netstandard1.0\\System.Threading.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.threading.tasks\\4.3.0\\ref\\netstandard1.0\\System.Threading.Tasks.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.xml.readerwriter\\4.3.0\\ref\\netstandard1.0\\System.Xml.ReaderWriter.dll /reference:C:\\Users\\eerhardt\\.nuget\\packages\\system.xml.xdocument\\4.3.0\\ref\\netstandard1.0\\System.Xml.XDocument.dll /debug+ /debug:portable /filealign:512 /keyfile:F:\\git\\corefxlab\\tools\\Key.snk /nologo /optimize- /out:obj\\Debug\\netstandard1.1\\System.Numerics.Tensors.dll /target:library /warnaserror- /utf8output /deterministic+ /langversion:7.2 System\\Numerics\\ArrayUtilities.cs System\\Numerics\\ArrayTensorExtensions.cs System\\Numerics\\DenseTensor.cs System\\Numerics\\CompressedSparseTensor.cs System\\Numerics\\Range.cs System\\Numerics\\SparseTensor.cs System\\Numerics\\Tensor.cs System\\Numerics\\TensorShape.cs System\\Numerics\\TensorView.cs System\\Numerics\\TensorArithmetic.cs System\\Numerics\\Tensor.Operations.cs \"C:\\Users\\eerhardt\\AppData\\Local\\Temp\\.NETStandard,Version=v1.1.AssemblyAttributes.cs\" obj\\Debug\\netstandard1.1\\System.Numerics.Tensors.AssemblyInfo.cs /warnaserror+:NU1605 (TaskId:58)\r\n                     'C:\\Program' is not recognized as an internal or external command, (TaskId:58)\r\n                     operable program or batch file. (TaskId:58)\r\n17:32:24.736  1:10>C:\\Users\\eerhardt\\.nuget\\packages\\microsoft.netcore.compilers\\2.6.0-beta2-62211-02\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"RunCsc.cmd\" exited with code 1. [F:\\git\\corefxlab\\src\\System.Numerics.Tensors\\System.Numerics.Tensors.csproj]\r\n                     Output Item(s): CscCommandLineArgs= (TaskId:58)\r\n                   Done executing task \"Csc\" -- FAILED. (TaskId:58)\r\n```\r\n\r\nAdding quotes around `%HOST_PATH%` in https://github.com/dotnet/roslyn/blob/master/build/NuGetAdditionalFiles/RunCsc.cmd#L7 fixes the issue."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6823381753","Type":"PullRequestEvent","CreatedAt":"2017-11-07T23:40:10","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4887","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4887) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6823281358","Type":"IssuesEvent","CreatedAt":"2017-11-07T23:11:16","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4860","RelatedDescription":"Closed issue \"Template type loader interface dispatch dependency tracking\" (#4860) at dotnet/corert","RelatedBody":"This will throw a `MissingMetadataException` because we never generated native layout for the `IFoo<__Canon>` interface, but the dispatch cell in `Gen<__Canon>.DoFrob` refers to it. We get away with this bug because normally something that implements this interface gets allocated with `newobj`. Not here.\r\n\r\nI had some fix in mind, but I got pulled into other projects and don't have time to investigate size on disk impact. The fix is to make sure `NativeLayoutInterfaceDispatchGenericDictionarySlotNode` depends on the template for the interface type. We might want to pull that into the `TemplateConstructableTypes` helper?\r\n\r\nThis is the underlying issue for why the set of RD.XML workarounds from @sergiy-k in #4444 need to refer to specific instances of `Microsoft.Extensions.Options.OptionsFactory[[shtik.ShtikOptions,shtik]]` instead of just letting the type loader create the types at runtime.\r\n\r\n```csharp\r\ninterface IFoo<T>\r\n{\r\n    void Frob();\r\n}\r\n\r\nclass Gen<T>\r\n{\r\n    public void DoFrob(IFoo<T> o)\r\n    {\r\n        if (o != null)\r\n            o.Frob();\r\n    }\r\n}\r\n\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        new Gen<object>().DoFrob(null);\r\n        typeof(Gen<>).MakeGenericType(new[] { typeof(string) });\r\n    }\r\n}\r\n```\r\n"},{"Id":"6823281274","Type":"PullRequestEvent","CreatedAt":"2017-11-07T23:11:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4884","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4884) at dotnet/corert","RelatedBody":""},{"Id":"6823022265","Type":"PullRequestEvent","CreatedAt":"2017-11-07T22:09:34","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4886","RelatedDescription":"Opened pull request \"Add \"start\" to ThrowHelper\" (#4886) at dotnet/corert","RelatedBody":"Non-shared part of https://github.com/dotnet/coreclr/pull/14906"},{"Id":"6823016447","Type":"IssuesEvent","CreatedAt":"2017-11-07T22:08:16","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/1497","RelatedDescription":"Closed issue \"CCWAddRef symbol not defined\" (#1497) at dotnet/corert","RelatedBody":"I am trying to compile a rather complex CoreRT-based project (private repo) when it suddenly started failing on the stage where it links the object file with the CoreRT support libraries. The complaint is this:\n\n```\nLNK2001: unresolved external symbol CCWAddRef\n```\n\nI have found the P/Invoke that references this symbol [here](https://github.com/dotnet/corert/blob/master/src/System.Private.Interop/src/Shared/StandardInterfaces.cs#L171-L174), but nowhere in the native support code is this function defined. I do not know why this error just started occurring; this is not a new project and it compiled and linked just fine until now. I do know, however, that I am not performing any COM interop from C# in this project, because COM interop is not fully implemented in CoreRT last time I checked. (Any required COM interop I perform via a C++ helper library using standard P/Invoke entrypoints.) Therefore, I do not know why this symbol just started showing up in the CoreRT object, as it seems to be related to C# COM interop. Any pointers?\n"},{"Id":"6822908050","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:44:54","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4881","RelatedDescription":"Merged pull request \"Remove WinRT references in S.P.Interop in non-WinRT environments\" (#4881) at dotnet/corert","RelatedBody":"Fixes #2601."},{"Id":"6822906105","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:44:28","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4885","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4885) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6822850472","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:32:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4885","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4885) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6822499730","Type":"PullRequestEvent","CreatedAt":"2017-11-07T20:17:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4884","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4884) at dotnet/corert","RelatedBody":""},{"Id":"6822330306","Type":"PullRequestEvent","CreatedAt":"2017-11-07T19:42:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4883","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4883) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6822300373","Type":"PullRequestEvent","CreatedAt":"2017-11-07T19:36:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4883","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4883) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6823707474","Type":"IssuesEvent","CreatedAt":"2017-11-08T01:28:29","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1716","RelatedDescription":"Opened issue \"Duplicate ProjectReference's breaks cross-targeting frameworks\" (#1716) at dotnet/sdk","RelatedBody":"When there are duplicate ProjectReference's, MSBuild will use the wrong TargetFrameworks value when building P2P references. This used to work in 2.0.0 but started failing in nightly builds of 2.2.0.\r\n\r\n**Repro:**\r\n```\r\nMicrosoft.AspNetCore.Authentication.Test (netcoreapp2.0;net461) \r\n   ProjectReferences\r\n   ---> Microsoft.AspNetCore.Authentication.Cookies  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.Facebook  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.Google  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.JwtBearer  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.MicrosoftAccount  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.OpenIdConnect  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.MicrosoftAccount  (netstandard2.0)  (DUPLICATE)\r\n   ---> Microsoft.AspNetCore.Authentication.JwtBearer  (netstandard2.0) (DUPLICATE)\r\n   ---> Microsoft.AspNetCore.Authentication.Twitter  (netstandard2.0)\r\n```\r\n\r\n1. Install nightly build of the CLI: https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.2.0-preview1-007522/dotnet-sdk-2.2.0-preview1-007522-win-x64.zip\r\n1. `git clone https://github.com/aspnet/Security`\r\n2. `git checkout 72e1cb1385c982e6dba90c839d1a1455e2813e6c`\r\n3. `cd Security/test/Microsoft.AspNetCore.Authentication.Test`\r\n4. `dotnet restore`\r\n5. `dotnet build --no-restore`\r\n\r\n**Expected**\r\nMicrosoft.AspNetCore.Authentication.MicrosoftAccount and Microsoft.AspNetCore.Authentication.JwtBearer should be built using TargetFramework=netstandard2.0\r\n\r\nOr, produce an error about duplicate ProjectReferences are ignored or produce some kind of warning.\r\n\r\n**Actual**\r\nMSBuild attempts to compile Microsoft.AspNetCore.Authentication.MicrosoftAccount and Microsoft.AspNetCore.Authentication.JwtBearer  with both net461 and netcoreapp2.0.\r\n\r\n\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj]\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\Microsoft.AspNetCore.Authentication.JwtBearer.csproj]\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.6.1'. Ensure that restore has run and that you have included 'net461' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj]\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.6.1'. Ensure that restore has run and that you have included 'net461' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\Microsoft.AspNetCore.Authentication.JwtBearer.csproj]\r\n```\r\n\r\n**Details**\r\n\r\n[Microsoft.AspNetCore.Authentication.Test.csproj](https://github.com/aspnet/Security/blob/72e1cb1385c982e6dba90c839d1a1455e2813e6c/test/Microsoft.AspNetCore.Authentication.Test/Microsoft.AspNetCore.Authentication.Test.csproj)\r\n[Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj](https://github.com/aspnet/Security/blob/72e1cb1385c982e6dba90c839d1a1455e2813e6c/src/Microsoft.AspNetCore.Authentication.MicrosoftAccount/Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj)\r\n[Microsoft.AspNetCore.Authentication.JwtBearer.csproj](https://github.com/aspnet/Security/blob/72e1cb1385c982e6dba90c839d1a1455e2813e6c/src/Microsoft.AspNetCore.Authentication.JwtBearer/Microsoft.AspNetCore.Authentication.JwtBearer.csproj)\r\n\r\nBuild log: [msbuild.binlog.zip](https://github.com/dotnet/sdk/files/1452260/msbuild.binlog.zip)\r\n\r\n"},{"Id":"6823491034","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:15:14","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1709","RelatedDescription":"Closed issue \"Want to migrate on dnx to cli with entity framework core\" (#1709) at dotnet/sdk","RelatedBody":"Hi Team,\r\n\r\nI have followed below url as reference\r\nhttps://github.com/dotnet/cli/blob/master/Documentation/ProjectJsonToCSProj.md\r\n\r\nand found below issue with migrate command\r\nError :\r\nPS C:\\yoyo-center-management-system-master\\CenterManagementSystem\\DEV\\src\\CenterManagementSystem.Platform> dotnet migrate\r\nNo executable found matching command \"dotnet-migrate\"\r\n\r\nI have created separate console application with the use of below cli command\r\n\r\n    dotnet new\r\n    dotnet restore\r\n    dotnet build\r\n    dotnet run\r\n    All command working fine but unable to proceed further like What is my next step ?\r\n    I am sharing you my powershall command and status as below\r\n\r\nPS C:\\test3\\myApp> dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nmyApp -> C:\\test3\\myApp\\bin\\Debug\\netcoreapp2.0\\myApp.dll\r\n\r\nBuild succeeded.\r\n0 Warning(s)\r\n0 Error(s)\r\n\r\nTime Elapsed 00:00:01.02\r\nPS C:\\test3\\myApp> dotnet run\r\nHello World!\r\nPS C:\\test3\\myApp> dotnet migrate\r\nNo project.json file found in 'C:\\test3\\myApp'.\r\nMigration failed.\r\nPS C:\\test3\\myApp>\r\n\r\nPlease suggest me for same ?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"927634989499301888","CreatedAt":"2017-11-06T20:33:10+00:00","UserScreenname":"dotnet","Text":"Windows Docker Tag Scheme Changed https://t.co/ULufUyjXq6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":35,"RawContent":null},{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":74,"FavoriteCount":41,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2017-11-08T05:30:22.3304361Z","RunDurationInMilliseconds":8500}