{"Data":{"GitHub":{"Issues":[{"Id":"612966251","IsPullRequest":true,"CreatedAt":"2020-05-06T00:01:38","Actor":"JeremyKuhne","Number":"3225","RawContent":null,"Title":"Provide internals test utilities","State":"open","Body":"Add internals accessor helpers\r\n\r\nIntroduces ITestAccessor and related classes to keep test specific code out of the shipping assemblies.\r\n\r\nAllows easy dynamic access to private/internal fields and members and provides a pattern for writing typed accessors.\r\n\r\nAlso supports creating of delegates, which allows for access to members that utilize ref structs which are not yet supported in reflection.\r\n\r\nRemoves existing TestAccessor classes from the shipping code. Updates most of the internal virtual methods on TextBox to private protected to encapsulate. Various comment / line spacing fixes to TextBox.\r\n\r\nThere are three commits in this PR. The first two clean up tests and internal access for the EventHandlerService. I kept them separate as they don't depend on the new functionality as I removed all of the internals access there.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3225)","Url":"https://github.com/dotnet/winforms/pull/3225","RelatedDescription":"Open PR \"Provide internals test utilities\" (#3225)"},{"Id":"612679361","IsPullRequest":true,"CreatedAt":"2020-05-05T23:08:59","Actor":"hughbe","Number":"3220","RawContent":null,"Title":"Move Application_VisualStyleState_Set_ReturnsExpected to RemoteExecutor","State":"closed","Body":"Fixes #2192\r\n\r\nThis should make the test resilient in the future\r\n\r\n/cc @weltkante \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3220)","Url":"https://github.com/dotnet/winforms/pull/3220","RelatedDescription":"Closed or merged PR \"Move Application_VisualStyleState_Set_ReturnsExpected to RemoteExecutor\" (#3220)"},{"Id":"612899739","IsPullRequest":true,"CreatedAt":"2020-05-05T21:15:19","Actor":"M-Lipin","Number":"3224","RawContent":null,"Title":"Adding MultipleView UIA pattern support to WinForms.","State":"open","Body":"Implementing UIA for ListView control.\r\nMoving ListView accessible objects to separate files.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3223 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding UIA accessibility support for ListView control.\r\n- Moving ListView accessibility to separate files.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for Button control accessibility.\r\n- Prerequisite to fix #2164\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81116178-94256380-8f2d-11ea-8b59-c2c25d9291a2.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81116685-7c021400-8f2e-11ea-93d1-36c7fa11bdb2.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- Automation tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3224)","Url":"https://github.com/dotnet/winforms/pull/3224","RelatedDescription":"Open PR \"Adding MultipleView UIA pattern support to WinForms.\" (#3224)"},{"Id":"612896718","IsPullRequest":false,"CreatedAt":"2020-05-05T21:09:21","Actor":"M-Lipin","Number":"3223","RawContent":null,"Title":"ListView control does not support UIA accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Providers:**\r\n[pid:28344,providerId:0x31378 Main:Nested [pid:26684,providerId:0x31378 Main(parent link):Microsoft: ListView Proxy (unmanaged:UIAutomationCore.dll)];\r\nNonclient:Microsoft: Non-Client Proxy (unmanaged:uiautomationcore.dll);\r\nHwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81116178-94256380-8f2d-11ea-8b59-c2c25d9291a2.png)\r\n\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with ListView control and analyze it using Inspect.\r\n\r\n**Related item:**\r\nThis work item is the sub of #2164","Url":"https://github.com/dotnet/winforms/issues/3223","RelatedDescription":"Open issue \"ListView control does not support UIA accessibility\" (#3223)"},{"Id":"612775640","IsPullRequest":false,"CreatedAt":"2020-05-05T17:35:26","Actor":"kpreisser","Number":"3222","RawContent":null,"Title":"TaskDialog.ShowDialog() should install WindowsFormsSynchronizationContext","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.5.20255.2\r\n\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nCurrently, `TaskDialog.ShowDialog()` doesn't install the `WindowsFormsSynchronizationContext`, so when showing the task dialog from a thread that didn't call a `Control` constructor and which currently isn't running a message loop e.g. with `Form.ShowDialog()` or `Application.Run()`, continuations of async methods that were initiated from an task dialog event won't run on the same thread used to show the task dialog.\r\n\r\n\r\n**Expected behavior:**\r\n\r\nI think `TaskDialog.ShowDialog` should install the `WindowsFormsSynchronizationContext` before actually showing the dialog if `SynchronizationContext.Current` isn't an `WindowsFormsSynchronizationContext`, and in that case, should also uninstall it after the native `TaskDialogIndirect` returns.\r\n\r\nNote: It seems `MessageBox.Show()` also doesn't install the `WindowsFormsSynchronizationContext`, but there it's probably not that important since yout normally don't handle events within `MessageBox.Show()`.\r\n\r\nWhat do you think?\r\n\r\n**Minimal repro:**\r\n```c#\r\n[STAThread]\r\nstatic void Main()\r\n{\r\n    Application.EnableVisualStyles();\r\n    var mainThread = Thread.CurrentThread;\r\n\r\n    var myPage = new TaskDialogPage();\r\n    myPage.Created += async (s, e) =>\r\n    {\r\n        Console.WriteLine(\"TaskDialog.ShowDialog():\");\r\n        Console.WriteLine(\"Is WindowsFormsSynchronizationContext: \" +\r\n            (SynchronizationContext.Current is WindowsFormsSynchronizationContext));\r\n\r\n        await Task.Yield();\r\n\r\n        Console.WriteLine(\"Is Main Thread: \" + (Thread.CurrentThread == mainThread));\r\n        Console.WriteLine();\r\n        myPage.BoundDialog!.Close();\r\n    };\r\n    TaskDialog.ShowDialog(myPage);\r\n\r\n    using var myForm = new Form();\r\n    myForm.Load += async (s, e) =>\r\n    {\r\n        Console.WriteLine(\"Form.ShowDialog():\");\r\n        Console.WriteLine(\"Is WindowsFormsSynchronizationContext: \" +\r\n            (SynchronizationContext.Current is WindowsFormsSynchronizationContext));\r\n\r\n        await Task.Yield();\r\n\r\n        Console.WriteLine(\"Is Main Thread: \" + (Thread.CurrentThread == mainThread));\r\n        Console.WriteLine();\r\n        myForm.Close();\r\n    };\r\n    myForm.ShowDialog();\r\n}\r\n```\r\n\r\n**Actual output:**\r\n\r\n```\r\nTaskDialog.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: False\r\nIs Main Thread: False\r\n\r\nForm.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: True\r\nIs Main Thread: True\r\n```\r\n\r\n**Expected output:**\r\n\r\n```\r\nTaskDialog.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: True\r\nIs Main Thread: True\r\n\r\nForm.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: True\r\nIs Main Thread: True\r\n```","Url":"https://github.com/dotnet/winforms/issues/3222","RelatedDescription":"Open issue \"TaskDialog.ShowDialog() should install WindowsFormsSynchronizationContext\" (#3222)"},{"Id":"612719109","IsPullRequest":true,"CreatedAt":"2020-05-05T16:07:01","Actor":"hughbe","Number":"3221","RawContent":null,"Title":"Dispose everything in DesignerSurface related tests","State":"open","Body":"\r\nSo I'm investigating #1460 and #1151. \r\n\r\nIt seems like the failure in `DesignerHost_Add_ComponentDisposeThrowsDuringUnloadingDispose_ThrowsInvalidOperationException` and `DesignSurface_View_GetWithInvalidSupportedTechnologies_ThrowsNotSupportedException` etc. etc. are related to locking of `LicenseManager`. Not really sure how to fix this in the tests.\r\n\r\nIt seems like the failure in `DesignerHost_Add_DuringUnload_ThrowsException` and `SiteNestedContainer_Add_Unloading_Nop` are unrelated to this and instead related to `DesignSurface.CreateDesigner` returning null. See https://github.com/dotnet/winforms/issues/1460#issuecomment-515985498\r\n\r\nLooking at the stack trace of the failure in #1560\r\n```cs\r\n  System.Exception : There is no designer for the class System.ComponentModel.Design.Tests.DesignerHostTests+DesignerComponent.\r\n  Stack Trace:\r\n    /_/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs(244,0): at System.ComponentModel.Design.DesignerHost.AddToContainerPostProcess(IComponent component, String name, IContainer containerToAddTo)\r\n    /_/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs(151,0): at System.ComponentModel.Design.DesignerHost.PerformAdd(IComponent component, String name)\r\n    /_/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs(141,0): at System.ComponentModel.Design.DesignerHost.Add(IComponent component, String name)\r\n       at System.ComponentModel.Container.Add(IComponent component)\r\n    /_/src/System.Windows.Forms.Design/tests/UnitTests/System/ComponentModel/Design/DesignerHostTests.cs(874,0): at System.ComponentModel.Design.Tests.DesignerHostTests.DesignerHost_Add_DuringUnload_ThrowsException()\r\n```\r\n\r\nFor the record, the failing test is below, and we fail at `host.Container.Add`\r\n```cs\r\npublic void DesignerHost_Add_DuringUnload_ThrowsException()\r\n{\r\n    using var surface = new SubDesignSurface();\r\n    IDesignerLoaderHost2 host = surface.Host;\r\n    surface.BeginLoad(typeof(RootDesignerComponent));\r\n\r\n    using var component = new DesignerComponent();\r\n    host.Container.Add(component);\r\n    int callCount = 0;\r\n    component.Disposed += (sender, e) =>\r\n    {\r\n        using var newComponent = new DesignerComponent();\r\n        Assert.Throws<Exception>(() => host.Container.Add(newComponent));\r\n        callCount++;\r\n    };\r\n    surface.Dispose();\r\n    Assert.Equal(1, callCount);\r\n    Assert.False(surface.IsLoaded);\r\n    Assert.Empty(surface.LoadErrors);\r\n    Assert.False(host.Loading);\r\n}\r\n```\r\n\r\nI had a little theory that this could be because of the code in `AddToContainerPostProcess`. Basically, it seems like we are `_rootComponent == null`, even though I'm fairly sure we don't expect it to be. Problems happen because we look for `IRootDesigner`, which the components we're adding don't implement.\r\n \r\n```cs\r\nIDesigner designer;\r\n// Is this the first component the loader has created?  If so, then it must be the root component (by definition) so we will expect there to be a root designer associated with the component.  Otherwise, we search for a normal designer, which can be optionally provided.\r\nif (_rootComponent == null)\r\n{\r\n    designer = _surface.CreateDesigner(component, true) as IRootDesigner;\r\n    if (designer == null)\r\n    {\r\n        Exception ex = new Exception(string.Format(SR.DesignerHostNoTopLevelDesigner, component.GetType().FullName))\r\n        {\r\n            HelpLink = SR.DesignerHostNoTopLevelDesigner\r\n        };\r\n        throw ex;\r\n    }\r\n}\r\n```\r\n\r\nI looked at the code and saw nothing was being disposed in any of the test code.\r\n\r\nSo in terms of the locking problem, I thought that this might be a problem because `LicenseManager` lock may have been held and not released because we didn't dispose of anything. However, this didn't seem to be the case.\r\n- I don't really have much of an idea about how to fix these tests. It seems odd that they only failed in the tests that we disabled, and not be disabled again (I could repro a test failure in `DesignSurface_View_GetWithInvalidSupportedTechnologies_ThrowsNotSupportedException` but this test has been enabled for 9+ months on the CI)\r\n- Maybe we could wrap each test in `RemoteExecutor.Invoke` but I am a bit reluctant to do this as it creates additional strains on test execution and seems a bit odd.\r\n\r\nI then suspected that something was problematic in that we were not disposing of any components within the classes and this could cause `_rootComponent` to equal null somehow\r\n- This didn't seem to be the case either.\r\n\r\nAll in all, I fell back stumped. However, its good practice to dispose of anything in test code, so I kept the changes here and am submitting them.\r\n\r\nI'm not sure if this will fix anything, but ah well\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3221)","Url":"https://github.com/dotnet/winforms/pull/3221","RelatedDescription":"Open PR \"Dispose everything in DesignerSurface related tests\" (#3221)"},{"Id":"612674294","IsPullRequest":true,"CreatedAt":"2020-05-05T15:04:14","Actor":"hughbe","Number":"3219","RawContent":null,"Title":"Remove invalid debug assert in GetSystemMetricsForDpi","State":"open","Body":"We shouldn't have this throw an error because some machines run on windows 8, for example, which we support\r\n\r\nFixes #534\r\nContributes to #3121 \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3219)","Url":"https://github.com/dotnet/winforms/pull/3219","RelatedDescription":"Open PR \"Remove invalid debug assert in GetSystemMetricsForDpi\" (#3219)"},{"Id":"612671807","IsPullRequest":true,"CreatedAt":"2020-05-05T15:00:44","Actor":"hughbe","Number":"3218","RawContent":null,"Title":"Fix BindingContext tests","State":"open","Body":"## Proposed Changes\r\n- Don't reuse theory data in same `IEnumerable<T>`. Move test out of `Theory` and into a `Fact` - I think there were some `WeakReference` bugs in that the lifetime of a `WeakReference` is only in the theory data and not in the test\r\n\r\nAlso dispose of all `IDisposable` objects.\r\nAlso reduce calling of `internal` APIs by using subclasses (this let me copy-paste the test into .NET Framework and everything built successfully)\r\n\r\nFixes https://github.com/dotnet/winforms/issues/1031\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3218)","Url":"https://github.com/dotnet/winforms/pull/3218","RelatedDescription":"Open PR \"Fix BindingContext tests\" (#3218)"},{"Id":"612655842","IsPullRequest":true,"CreatedAt":"2020-05-05T14:40:54","Actor":"hughbe","Number":"3217","RawContent":null,"Title":"Fix skipping TableLayoutSettings_Serialize_InvalidStringConverter_DeserializeThrowsSerializationException","State":"open","Body":"Fixes #3046 \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3217)","Url":"https://github.com/dotnet/winforms/pull/3217","RelatedDescription":"Open PR \"Fix skipping TableLayoutSettings_Serialize_InvalidStringConverter_DeserializeThrowsSerializationException\" (#3217)"},{"Id":"612653734","IsPullRequest":true,"CreatedAt":"2020-05-05T14:38:02","Actor":"hughbe","Number":"3216","RawContent":null,"Title":"Change Assert.Same for font to Assert.Equal","State":"open","Body":"This can occasionally fail, e.g. https://dev.azure.com/dnceng/public/_build/results?buildId=631405&view=ms.vss-test-web.build-test-results-tab&runId=19691272&resultId=100052&paneView=debug\r\n\r\n```\r\nAssert.Same() Failure\r\nExpected: [Font: Name=Segoe UI, Size=9, Units=3, GdiCharSet=1, GdiVerticalFont=False]\r\nActual: [Font: Name=Segoe UI, Size=9, Units=3, GdiCharSet=1, GdiVerticalFont=False]\r\n   at System.Windows.Forms.Tests.FontDialogTests.FontDialog_Reset_Invoke_Success() in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/FontDialogTests.cs:line 620\r\n```\r\n\r\nSee https://github.com/dotnet/winforms/issues/1222\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3216)","Url":"https://github.com/dotnet/winforms/pull/3216","RelatedDescription":"Open PR \"Change Assert.Same for font to Assert.Equal\" (#3216)"},{"Id":"612649254","IsPullRequest":true,"CreatedAt":"2020-05-05T14:31:37","Actor":"M-Lipin","Number":"3215","RawContent":null,"Title":"Fixng 3214 - UIA providers support for Button control","State":"open","Body":"Adding UIA providers support for Button's accessibility.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3214\r\n\r\n\r\n## Proposed changes\r\n\r\n- Moving ButtonAccessibleObject to a separate file.\r\n- Moving ButtonBaseAccessibleObject to a separate file.\r\n- Adding UIA providers support for Button control accessi\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for Button control accessibility.\r\n- Prerequisite to fix #2164 \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Miniaml\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81074322-84882980-8ef1-11ea-98c1-ec750b5ea3a1.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81077788-1bef7b80-8ef6-11ea-9caa-8a67d9f6e39d.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- Automation tests (to be implemented).\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3215)","Url":"https://github.com/dotnet/winforms/pull/3215","RelatedDescription":"Open PR \"Fixng 3214 - UIA providers support for Button control\" (#3215)"},{"Id":"612625585","IsPullRequest":false,"CreatedAt":"2020-05-05T13:59:43","Actor":"M-Lipin","Number":"3214","RawContent":null,"Title":"Button control does not support UIA accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n![image](https://user-images.githubusercontent.com/23213980/81074322-84882980-8ef1-11ea-98c1-ec750b5ea3a1.png)\r\n\r\nAccessibility providers:\r\n[pid:43924,providerId:0x12AC8 Main:Nested [pid:1456,providerId:0x12AC8 Main(parent link):Microsoft: MSAA Proxy (unmanaged:UIAutomationCore.dll)];\r\nHwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with Button control and analyze it using Inspect.\r\n\r\n**Related item:**\r\nThis work item is the sub of #2164\r\n","Url":"https://github.com/dotnet/winforms/issues/3214","RelatedDescription":"Open issue \"Button control does not support UIA accessibility\" (#3214)"},{"Id":"612621739","IsPullRequest":true,"CreatedAt":"2020-05-05T13:54:34","Actor":"hughbe","Number":"3213","RawContent":null,"Title":"Cleanup DataGridViewRow tests and add sync with DataGridViewColumn","State":"open","Body":"## Proposed Changes\r\n- Contributes to #3209\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3213)","Url":"https://github.com/dotnet/winforms/pull/3213","RelatedDescription":"Open PR \"Cleanup DataGridViewRow tests and add sync with DataGridViewColumn\" (#3213)"},{"Id":"612508674","IsPullRequest":false,"CreatedAt":"2020-05-05T10:47:47","Actor":"kirsan31","Number":"3212","RawContent":null,"Title":"SplitterWidth set in designer not preserve for nested splitContainers","State":"open","Body":"* .NET Core Version: **3.1.3**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**Problem description:**\r\n\r\nSplitterWidth set in designer not preserve for splitContainer inside other splitContainer:\r\n![Snipaste_2020-05-05_13-38-28](https://user-images.githubusercontent.com/17767561/81058101-6d880e00-8ed6-11ea-8226-aecd71d060fb.png)\r\nWorkaround - set `splitContainer2.SplitterWidth` in constructor after `InitializeComponent();`\r\n\r\n\r\n**Expected behavior:**\r\nRun time SplitterWidth must be the same as in designer.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest_spliter.zip](https://github.com/dotnet/winforms/files/4580258/WinFormsCoreTest_spliter.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3212","RelatedDescription":"Open issue \"SplitterWidth set in designer not preserve for nested splitContainers\" (#3212)"},{"Id":"612112859","IsPullRequest":true,"CreatedAt":"2020-05-05T03:53:19","Actor":"hughbe","Number":"3207","RawContent":null,"Title":"Fix invalid ComVisible attributes","State":"closed","Body":"## Proposed Changes\r\n- Fix invalid ComVisible attributes\r\n\r\nFixes #1878 \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3207)","Url":"https://github.com/dotnet/winforms/pull/3207","RelatedDescription":"Closed or merged PR \"Fix invalid ComVisible attributes\" (#3207)"},{"Id":"611617394","IsPullRequest":true,"CreatedAt":"2020-05-05T03:46:35","Actor":"dotnet-maestro[bot]","Number":"3201","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200503.7\r\n- **Date Produced**: 5/4/2020 5:07 AM\r\n- **Commit**: 8527a991b91cabc9bec6f6abe57a52b5bb5e154d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20253.6 to 5.0.0-preview.5.20253.7\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3201)","Url":"https://github.com/dotnet/winforms/pull/3201","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3201)"},{"Id":"612264835","IsPullRequest":true,"CreatedAt":"2020-05-05T02:01:19","Actor":"RussKie","Number":"3211","RawContent":null,"Title":"Disable dealocking tests","State":"closed","Body":"Refer to #3209\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3211)","Url":"https://github.com/dotnet/winforms/pull/3211","RelatedDescription":"Closed or merged PR \"Disable dealocking tests\" (#3211)"},{"Id":"612263448","IsPullRequest":true,"CreatedAt":"2020-05-05T01:12:14","Actor":"RussKie","Number":"3210","RawContent":null,"Title":"Make default encoding retrieval resilient","State":"open","Body":"Relates to #3032 and #3100\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Make default encoding retrieval resilient in cases where user's encoding is not recognised by .NET's implementation, e.g. `codepage = 65001`. Refer to the [docs](https://docs.microsoft.com/dotnet/api/system.text.codepagesencodingprovider).\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3210)","Url":"https://github.com/dotnet/winforms/pull/3210","RelatedDescription":"Open PR \"Make default encoding retrieval resilient\" (#3210)"},{"Id":"612246643","IsPullRequest":false,"CreatedAt":"2020-05-05T00:08:42","Actor":"RussKie","Number":"3209","RawContent":null,"Title":"Flaky test: `DataGridViewRow_PaintCells_Invoke_Success` deadlock","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n\r\n\r\n**Problem description:**\r\n\r\nObserving almost permanent test deadlocks locally and on build agents, especially after correcting test decorations in https://github.com/dotnet/winforms/pull/3064.\r\nInspecting a memory dump of a locally hung test process I got the following:\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/81024826-f9d70880-8eb7-11ea-9d2e-cf0fe33bd3ec.png)\r\n\r\n```\r\n \tSystem.Windows.Forms.Primitives.dll!Interop.User32.SendMessageW(IHandle hWnd = {System.Windows.Forms.DataGridView}, Interop.User32.WM Msg = CHANGEUISTATE, System.IntPtr wParam = 0x0000000000030001, System.IntPtr lParam = 0x0000000000000000) Line 36\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ShowFocusCues.get() Line 3710\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewTextBoxCell.PaintPrivate(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle cellBounds = {X = 42 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates cellState = Displayed, object formattedValue = \"\", string errorText = \"\", System.Windows.Forms.DataGridViewCellStyle cellStyle = {System.Windows.Forms.DataGridViewCellStyle}, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle = {System.Windows.Forms.DataGridViewAdvancedBorderStyle}, System.Windows.Forms.DataGridViewPaintParts paintParts = All, bool computeContentBounds = false, bool computeErrorIconBounds = false, bool paint = true) Line 705\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewTextBoxCell.Paint(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle cellBounds = {X = 42 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates cellState = Displayed, object value = null, object formattedValue = \"\", string errorText = \"\", System.Windows.Forms.DataGridViewCellStyle cellStyle = {System.Windows.Forms.DataGridViewCellStyle}, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle = {System.Windows.Forms.DataGridViewAdvancedBorderStyle}, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 606\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewCell.PaintWork(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle cellBounds = {X = 42 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates cellState = Displayed, System.Windows.Forms.DataGridViewCellStyle cellStyle = {System.Windows.Forms.DataGridViewCellStyle}, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle = {System.Windows.Forms.DataGridViewAdvancedBorderStyle}, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 4287\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewRow.PaintCells(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle rowBounds = {X = 1 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates rowState = Displayed, bool isFirstDisplayedRow = true, bool isLastVisibleRow = false, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 1617\tC#\tSymbols loaded.\r\n>\tSystem.Windows.Forms.Tests.dll!System.Windows.Forms.Tests.DataGridViewRowTests.DataGridViewRow_PaintCells_Invoke_Success(System.Windows.Forms.DataGridViewRow row = {System.Windows.Forms.DataGridViewRow}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle rowBounds = {X = 1 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates rowState = Displayed, bool isFirstDisplayedRow = true, bool isLastVisibleRow = false, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 3263\tC#\tSymbols loaded.\r\n```\r\n\r\nThere doesn't appear any other threads with code from System.Windows.Forms, so it looks like this code deadlocks on itself.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3209","RelatedDescription":"Open issue \"Flaky test: `DataGridViewRow_PaintCells_Invoke_Success` deadlock\" (#3209)"},{"Id":"611949363","IsPullRequest":true,"CreatedAt":"2020-05-04T21:29:45","Actor":"hughbe","Number":"3203","RawContent":null,"Title":"Extract WeakRefCollection to its own file","State":"closed","Body":"## Proposed Changes\r\n- Denestify WeakRefCollection out of ClientUtils\r\n- Move WeakRefCollection to its own class.\r\n\r\nOne step closer to killing of ClientUtils. Personal view, but there's nothing I hate more than a random file with a bunch of unrelated helper functions :))\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3203)","Url":"https://github.com/dotnet/winforms/pull/3203","RelatedDescription":"Closed or merged PR \"Extract WeakRefCollection to its own file\" (#3203)"},{"Id":"612119455","IsPullRequest":true,"CreatedAt":"2020-05-04T19:40:02","Actor":"M-Lipin","Number":"3208","RawContent":null,"Title":"Fixing issue 3206: Label control accessibility reworking","State":"open","Body":"Adding unit tests.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3206 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Moving LabelAccessibleObject to a separate file.\r\n- Ensured UIA accessibility support.\r\n- Adding unit tests.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for Label control accessibility. \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/80997736-716e4e80-8e4a-11ea-8c75-6ebf11bffc97.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81006352-0deb1d80-8e58-11ea-969a-962677440207.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing;\r\n- Unit testing;\r\n- UIA automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\n\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.20072.3\r\n  Commit:  c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3208)","Url":"https://github.com/dotnet/winforms/pull/3208","RelatedDescription":"Open PR \"Fixing issue 3206: Label control accessibility reworking\" (#3208)"},{"Id":"612063661","IsPullRequest":false,"CreatedAt":"2020-05-04T18:04:41","Actor":"M-Lipin","Number":"3206","RawContent":null,"Title":"Label control does not support UIA accessiblility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core 5.0\r\n\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.20072.3\r\n  Commit:  c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/80997736-716e4e80-8e4a-11ea-8c75-6ebf11bffc97.png)\r\n\r\nAccessibility providers:\r\n\"[pid:31748,providerId:0x11CFA Main:Nested [pid:31900,providerId:0x11CFA Annotation(parent link):Microsoft: Annotation Proxy (unmanaged:uiautomationcore.dll);\r\nMain:Microsoft: MSAA Proxy (unmanaged:uiautomationcore.dll)];\r\nHwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with Label control and analyze it using Inspect.\r\n\r\n**Related item:**\r\nThis work item is the sub of #2164  ","Url":"https://github.com/dotnet/winforms/issues/3206","RelatedDescription":"Open issue \"Label control does not support UIA accessiblility\" (#3206)"},{"Id":"611977217","IsPullRequest":false,"CreatedAt":"2020-05-04T15:50:41","Actor":"WinformsWizard","Number":"3205","RawContent":null,"Title":"Support Partial Classes","State":"closed","Body":"I Made a new method in my partial class\r\n![1](https://user-images.githubusercontent.com/53128787/80984784-5379fd00-8dfc-11ea-95f7-e5bd05e05b2a.PNG)\r\nHere is the partial class that has the design code\r\n![2](https://user-images.githubusercontent.com/53128787/80984867-6ee50800-8dfc-11ea-9d99-b6273131a819.PNG)\r\nAdded method to event handler (Did not show up on autocomplete)\r\n![3](https://user-images.githubusercontent.com/53128787/80984955-8b814000-8dfc-11ea-9961-16ada7c9eb88.PNG)\r\nDesigner generated method in the designer partial class\r\n![4](https://user-images.githubusercontent.com/53128787/80985021-a653b480-8dfc-11ea-89c0-b203c1026819.PNG)\r\nCaused error in the other partial class where the error already existed\r\n![5](https://user-images.githubusercontent.com/53128787/80985072-b8355780-8dfc-11ea-88b5-f9d719ed8eea.PNG)\r\nRequest: Make it so the designer can detect methods in partial classes, and has an option to select which partial class the designer goes in\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3205","RelatedDescription":"Closed issue \"Support Partial Classes\" (#3205)"},{"Id":"611972797","IsPullRequest":true,"CreatedAt":"2020-05-04T15:40:40","Actor":"hughbe","Number":"3204","RawContent":null,"Title":"Cleanup Enum validation across winfroms","State":"open","Body":"## Proposed Changes\r\n- In corefx (runtime), we decided to remove `ClientUtils.IsEnumValid` and friends because, frankly, they're just a bit unnecessary and a bit ugly\r\n- Also improves performance by avoiding allocation an int[] array each time we set the value. Bleh\r\n- Also adds support for non sequential enums to `GetEnumTheoryTypeTestDataInvalid`\r\n\r\nExample regex\r\n\r\nVSCode Search and Replace\r\n```\r\nif \\(!ClientUtils.IsEnumValid\\((.+?(?=,)), \\(int\\).+?(?=,), \\(int\\)(.+?(?=,)), \\(int\\)(.+?(?=\\)))\\)\\)\r\n```\r\nReplace with\r\n```\r\nif ($1 < $2 || $1 > $3)\r\n```\r\n```","Url":"https://github.com/dotnet/winforms/pull/3204","RelatedDescription":"Open PR \"Cleanup Enum validation across winfroms\" (#3204)"},{"Id":"611738117","IsPullRequest":false,"CreatedAt":"2020-05-04T09:40:26","Actor":"kirsan31","Number":"3202","RawContent":null,"Title":"DPI scaling is broken if font of the form set in designer","State":"open","Body":"* .NET Core Version: **3.1.3**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**Problem description:**\r\n\r\nDPI scaling is broken if font of the form set in designer. Or you can read it as: DPI scaling is broken if font of the form set **after** DPI scaling logic code, even in `SuspendLayout` and before very first `PerformLayout`.\r\n![Snipaste_2020-05-04_11-46-25](https://user-images.githubusercontent.com/17767561/80950205-1878c900-8dfe-11ea-948c-7e14b227bd49.png)\r\nIf you put yellow code in front of pink, or in constructor **before** `InitializeComponent();`  - all will be ok.\r\n\r\n**The bug appear only if this font is different from current system font.**\r\nWin10 pro 1809/1909.\r\n![Snipaste_2020-05-04_11-35-08](https://user-images.githubusercontent.com/17767561/80950458-92a94d80-8dfe-11ea-8a9a-27fdd324e516.png)\r\n\r\nRelated old [stackoverflow post](https://stackoverflow.com/a/33600787/6075536).\r\nMy personal opinion is that this is not designer problem, this is the problem of DPI scaling logic that depends on instructions order even in `SuspendLayout`...\r\n\r\n**Expected behavior:**\r\nForm must be scaled correctly.\r\n\r\n**Minimal repro:**\r\nThis test project was created in VS 16.6 preview 5 with using of new core designer: [WindowsFormsAppDesignerDPI.zip](https://github.com/dotnet/winforms/files/4573692/WindowsFormsAppDesignerDPI.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3202","RelatedDescription":"Open issue \"DPI scaling is broken if font of the form set in designer\" (#3202)"},{"Id":"611565804","IsPullRequest":true,"CreatedAt":"2020-05-04T05:13:03","Actor":"dotnet-maestro[bot]","Number":"3199","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200503.6\r\n- **Date Produced**: 5/4/2020 1:46 AM\r\n- **Commit**: 6d40a8ff5139c59815304487f1dc9dd4ead752ae\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20253.4 to 5.0.0-preview.5.20253.6\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3199)","Url":"https://github.com/dotnet/winforms/pull/3199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3199)"},{"Id":"611593276","IsPullRequest":true,"CreatedAt":"2020-05-04T04:18:16","Actor":"cston","Number":"3200","RawContent":null,"Title":"Implement WindowsFormsApplicationBase.IsSingleInstance","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes [---]\r\n\r\n## Proposed changes\r\n\r\nImplement support for `WindowsFormsApplicationBase` single-instance behavior. \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nAllows applications using the VisualBasic application model to opt-in to single-instance behavior.\r\n\r\n## Regression? \r\n\r\nNot implemented when porting Microsoft.VisualBasic to .NET Core previously.\r\n\r\n## Risk\r\n\r\nMedium risk when opted-in; low risk otherwise.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nUnit tests.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3200)","Url":"https://github.com/dotnet/winforms/pull/3200","RelatedDescription":"Open PR \"Implement WindowsFormsApplicationBase.IsSingleInstance\" (#3200)"},{"Id":"611446033","IsPullRequest":true,"CreatedAt":"2020-05-04T01:45:29","Actor":"dotnet-maestro[bot]","Number":"3196","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200503.4\r\n- **Date Produced**: 5/3/2020 7:30 PM\r\n- **Commit**: 82eff518113a7c38064aa20bfe2fb8f81641f323\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20253.1 to 5.0.0-preview.5.20253.4\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3196)\r\n","Url":"https://github.com/dotnet/winforms/pull/3196","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3196)"},{"Id":"611483547","IsPullRequest":true,"CreatedAt":"2020-05-04T01:12:53","Actor":"hughbe","Number":"3198","RawContent":null,"Title":"Extract InternalAccessibleObject","State":"closed","Body":"## Proposed Changes\r\n- Extract InternalAccessibleObject\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3198)","Url":"https://github.com/dotnet/winforms/pull/3198","RelatedDescription":"Closed or merged PR \"Extract InternalAccessibleObject\" (#3198)"},{"Id":"611482924","IsPullRequest":true,"CreatedAt":"2020-05-03T19:02:54","Actor":"hughbe","Number":"3197","RawContent":null,"Title":"Fix VARIANT code and add tests","State":"open","Body":"## Proposed Changes\r\n- Fix porting bug: `VARENUM vtType = vt & ~VARENUM.TYPEMASK;` check should have been `VARENUM vtType = vt & VARENUM.TYPEMASK;` \r\n- Structify `VARIANT` by moving finalizer into disposer\r\n- Fix overflow exceptions in conversion to unsigned numbers\r\n- Implement conversion to float/double\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3197)","Url":"https://github.com/dotnet/winforms/pull/3197","RelatedDescription":"Open PR \"Fix VARIANT code and add tests\" (#3197)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-06T05:30:54.0505055Z","RunDurationInMilliseconds":587}