{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10213458469","Type":"IssuesEvent","CreatedAt":"2019-08-14T22:16:52","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7415","RelatedDescription":"Closed issue \"Locked out, unable to convert nuget.org account to use Microsoft sign in\" (#7415) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nOur corporate nuget.org account username is \"accusoft\". This is currently a nuget.org account, not a Microsoft account.\r\n\r\nWe can sign in using our NuGet.org account, but after signing in we are shown the home page with a warning banner telling us we need to go to Account Settings and switch to using a Microsoft account to sign in. However, we can't actually open our account settings. In fact, nearly the entire UI of the home page is disabled (links don't work, cursor changes to indicate a clickable link or text field in strange places, etc.). \r\n\r\nAfter signing in via NuGet.org, we've tried manually navigating to https://www.nuget.org/account, but this simply redirects back to the home page.\r\n\r\nWe seem to be locked out of our account, without any way forward to convert to using a Microsoft account for sign in.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\r\n1. Navigate to https://www.nuget.org (using private/incognito mode to ensure no cookies are set)\r\n2. Click the \"sign in\" link in the top right\r\n3. Because we do not yet have a Microsoft account setup, click \"Sign in using NuGet.org account\"\r\n4. Sign in with our username and password\r\n5. Observe that we are signed in and see this at the top of the page when it loads:\r\n\r\n![image](https://user-images.githubusercontent.com/443020/62481472-85ccd000-b780-11e9-929a-76ea2930b178.png)\r\n\r\n6. Try to click the \"Account Settings\" link and observe it does not function. Try doing anything significant on this page and notice it does not function (open the profile menu in top right, click on links in top nav bar, etc.).\r\n7. Manually navigate to https://www.nuget.org/account. Observe that the account page does not load. Instead, the home page is loaded. \r\n\r\n### Expected behavior\r\nWe should be able to sign in with our NuGet.org account and edit our account settings to switch over to using a Microsoft account.\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/443020/62481598-d6442d80-b780-11e9-9a58-e22b17f27db0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/443020/62481626-ea882a80-b780-11e9-9ba1-23d03e5ba7e6.png)\r\n\r\n![image](https://user-images.githubusercontent.com/443020/62481662-068bcc00-b781-11e9-9f61-24d38b0e52d7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/443020/62481717-3044f300-b781-11e9-8bb5-393e672fa8c8.png)\r\n\r\nAdditionally, manually navigating to https://www.nuget.org/account does not load the account details page. Instead, replies with an HTTP 302, redirecting to the (still non-functional) home page."},{"Id":"10213308518","Type":"PullRequestEvent","CreatedAt":"2019-08-14T21:47:11","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7453","RelatedDescription":"Merged pull request \"GitHub Usage expander should be tabbable\" (#7453) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/nugetgallery/issues/7452\r\n\r\nThis was the only difference between the other expanders on the page and this one."},{"Id":"10213303532","Type":"PullRequestEvent","CreatedAt":"2019-08-14T21:46:15","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7454","RelatedDescription":"Merged pull request \"Add aria-label to Add Organization page logo\" (#7454) at NuGet/NuGetGallery","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/904941\r\n\r\nI misread this bug--turns out they were talking about the organization image's tooltip and not the logo icon's tooltip (which we've removed)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10211875948","Type":"IssuesEvent","CreatedAt":"2019-08-14T18:02:13","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7163","RelatedDescription":"Closed issue \"NU5012 error -SolutionDirectory option for nuget pack\" (#7163) at NuGet/Home","RelatedBody":"## Details about Problem\r\nThe [GetSolutionDir](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.CommandLine/Common/ProjectHelper.cs#L47) method used by `nuget pack` could return wrong `SolutionDir` if there is a \"unrelated\" `.sln` file in the project folder or in the folder structure \"before\" the real `.sln` file. It causes `NU5012` error unable to find the nupkg file because the wrong `SolutionDir` value.\r\n\r\nWe may need a `-SolutionDirectory` option like in `nuget restore` command to specify `SolutionDirectory` explicity.\r\n\r\n"},{"Id":"10211024295","Type":"IssuesEvent","CreatedAt":"2019-08-14T15:57:18","Actor":"kzu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8322","RelatedDescription":"Closed issue \"Nugetizer3000 includes reference-only content in package\" (#8322) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet + NuGet.Build.Packaging\r\n\r\nNuGet.Build.Packaging - 0.2.3\r\n\r\ndotnet.exe --version (if appropriate):\r\n2.2.107\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a netstandard2.0 class library, use following project file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageId>n3000</PackageId>\r\n    <Description>n3000 test nuget package</Description>\r\n    <RestoreSources>$(RestoreSources);https://ci.appveyor.com/nuget/nugetizer3000</RestoreSources>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGet.Build.Packaging\" Version=\"0.2.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2.  dotnet build\r\n\r\nExpect: package with only lib\r\nActual: package contains all netstandard reference only libraries.\r\n\r\nBug is here: https://github.com/NuGet/NuGet.Build.Packaging/blob/abbff50b9b64d708945a726405e70351035cadb5/src/Build/NuGet.Build.Packaging.Tasks/NuGet.Build.Packaging.Inference.targets#L186-L190\r\n\r\nThis shouldn't be packing referencepath, but instead something like ReferenceCopyLocalPaths."},{"Id":"10211023662","Type":"IssuesEvent","CreatedAt":"2019-08-14T15:57:13","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8449","RelatedDescription":"Closed issue \"Remove PDBGit warnings\" (#8449) at NuGet/Home","RelatedBody":"Our builds are full of warnings like this:\r\n\r\n> ##[warning]C:\\Users\\dlab14\\.nuget\\packages\\pdbgit\\3.0.41\\tools\\PdbGit.targets(9,5): Warning : File \"e:\\a\\_work\\260\\s\\build\\shared\\equalityutility.cs\" missing or changed since the PDB was compiled.\r\n\r\nIt appears that every single `.cs` file in the repo gets this warning.\r\n\r\nWe should resolve the issue, so it's easier to find real issues when looking at our build logs"},{"Id":"10210424141","Type":"IssuesEvent","CreatedAt":"2019-08-14T14:46:25","Actor":"devinvisible","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8456","RelatedDescription":"Opened issue \"\"Error occurred while restoring NuGet Package\" and InvalidOperationException in Tests Output window when the assembly name is different than the project name in multi-target build\" (#8456) at NuGet/Home","RelatedBody":"I get the following message on the Package Manager Output window when I open my project in Visual Studio 2019 (16.2.2):\r\n```\r\nError occurred while restoring NuGet packages: The operation failed as details for project Foo could not be loaded.\r\n```\r\n\r\nThe same message precedes the _1>------ Rebuild All started: Project: Foo, Configuration: Release Any CPU ------_ line on the Build Output window when I rebuild my project.\r\n\r\nI see the following in my Tests Output window:\r\n```\r\n[8/14/2019 10:22:03.270 AM Informational] Store opened in 1.189 sec.\r\n[8/14/2019 10:22:06.987 AM Error] System.InvalidOperationException: The operation failed as details for project Foo could not be loaded.\r\n   at NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\n   at NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\n   at Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\n   at NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\n   at Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[8/14/2019 10:22:07.039 AM Informational] ---------- Discovery started ----------\r\n[8/14/2019 10:22:07.182 AM Informational] ========== Discovery skipped: All test containers are up to date ==========\r\n```\r\n\r\nHere is my .csproj file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net461;netcoreapp2.0</TargetFrameworks>\r\n    <AssemblyName>Foo</AssemblyName>\r\n    <SignAssembly>true</SignAssembly>\r\n    <AssemblyOriginatorKeyFile>AwDotNetCore.snk</AssemblyOriginatorKeyFile>\r\n    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>\r\n    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>\r\n    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>\r\n    <GenerateAssemblyDescriptionAttribute>false</GenerateAssemblyDescriptionAttribute>\r\n    <GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>\r\n    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>\r\n    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>\r\n    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>\r\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\r\n    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(TargetFramework)'=='net461'\">\r\n    <AssemblyName>Foo4</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <Optimize>false</Optimize>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"'$(TargetFramework)'=='net461'\">\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Data\" />    \r\n    <Reference Include=\"System.EnterpriseServices\" />\r\n    <Reference Include=\"System.Runtime.Remoting\" />\r\n    <Reference Include=\"System.Security\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting.Abstractions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Razor\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Runtime\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Win32.Registry\" Version=\"4.4.0\" />\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.4.0\" />\r\n    <PackageReference Include=\"System.Security.Principal.Windows\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n  \r\n  <ItemGroup>\r\n    <Compile Include=\"..\\..\\Version\\generated\\cpp\\ProductVersion.cs\">\r\n      <Link>ProductVersion.cs</Link>\r\n    </Compile>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis seems to be related to the conditional PropertyGroup where the AssemblyName is different than the project name. When I remove the following lines from my .csproj file the errors go away:\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(TargetFramework)'=='net461'\">\r\n    <AssemblyName>Foo4</AssemblyName>\r\n  </PropertyGroup>\r\n```"},{"Id":"10205994197","Type":"PullRequestEvent","CreatedAt":"2019-08-14T01:37:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/8455","RelatedDescription":"Opened pull request \"Prep the Home repo for the designs. \" (#8455) at NuGet/Home","RelatedBody":"Cleaning up the home repo to prep it to become the home for all the designs. \r\n\r\nI don't think my proposed structure is any good right now. \r\n\r\nThis PR is just a way to start the discussion. \r\n\r\nI'll come up with a better proposal soon. "},{"Id":"10205383198","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:49:26","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8454","RelatedDescription":"Opened issue \"Invalid options message outdated/deprecated for list package should be the same for dotnet cli and dotnet nuget\" (#8454) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/pull/3003/files#diff-0bcb0e6b25126ef631b9e118f853abebL213\r\n\r\nListPkg_InvalidOptionsOutdatedAndDeprecated and it's cli counterpart should be the exact same string. \r\n\r\n//cc @xavierdecoster @donnie-msft "},{"Id":"10205369235","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:46:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8453","RelatedDescription":"Opened issue \"Recursively touch all SDK files to fix the PackCommand_PackTarget_IsIncremental flakiness\" (#8453) at NuGet/Home","RelatedBody":"TBD"},{"Id":"10204505237","Type":"IssuesEvent","CreatedAt":"2019-08-13T20:13:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6229","RelatedDescription":"Closed issue \"NuGet Pack is not deterministic\" (#6229) at NuGet/Home","RelatedBody":"**Background**\r\nSome environments require build to be deterministic, meaning that each tool involved in the build process must produce exactly the same output given the same inputs. Furthermore the build should not depend on the ambient state of the environment such as the current time, a global random number generator state, the machine name the build is running on, the root directory the repository is built from, etc.\r\n\r\nFor example, Roslyn compilers support deterministic builds by implementing ```/deterministic``` switch. This is also supported by csc/vbc msbuild tasks via property ```Deterministic```. \r\n\r\n**Issue**\r\n```NuGet pack``` is not deterministic in the above sense. I identified several non-deterministic properties, but there might be more:\r\n\r\n1) ```ZipArchive.CreateEntry``` API is used for creating zip parts and the call is not followed by setting ```ZipArchiveEntry.LastWriteTime``` to a deterministic value. The ```CreateEntry``` API initializes this property to the current time. As a result the current time is written to the .nupkg for some parts:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L556\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L770\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L797\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L839\r\n\r\n2) ```PhysicalPackageFile``` uses ```File.GetLastWriteTimeUtc``` or ```DateTimeOffset.UtcNow``` to determine what value to set to ```ZipArchiveEntry.LastWriteTime```.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PhysicalPackageFile.cs#L82\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PhysicalPackageFile.cs#L87\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L576\r\n\r\nIf this is a required feature there should be a switch to disable it: e.g. adding nuget.exe command line argument ```/deterministic``` and respecting msbuild property ```Deterministic``` in PackTask.\r\n\r\n3) Random GUIDs are used for named entities written to the .nupkg: \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L340,\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L876.\r\n"},{"Id":"10204059569","Type":"IssuesEvent","CreatedAt":"2019-08-13T19:05:14","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8427","RelatedDescription":"Closed issue \"OptProfV2:  enable optimization\" (#8427) at NuGet/Home","RelatedBody":""},{"Id":"10203177388","Type":"IssuesEvent","CreatedAt":"2019-08-13T16:55:44","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8452","RelatedDescription":"Opened issue \"Remove .NET Framework TFM from NuGet.CommandLine.XPlat\" (#8452) at NuGet/Home","RelatedBody":"NuGet.CommandLine.XPlat is intended to be used only by the dotnet cli, although searching github we can find multiple customers who use it and call our `Program.Main()` in their code. I can't verify that all existing usage is used by netcoreapp projects, so we'll wait until the next major release before removing the .NET Framework TFM."},{"Id":"10203102582","Type":"IssuesEvent","CreatedAt":"2019-08-13T16:44:42","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8426","RelatedDescription":"Closed issue \"OptProfV2:  write test for internal bug 890791\" (#8426) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-08-15T05:30:40.4037023Z","RunDurationInMilliseconds":1695}