{"Data":{"Blog":{"FeedItems":[{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio 2017","PublishedOn":"2018-04-11T18:30:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 previews are now available, featuring significant improvements to the XAML experience for mobile developers. The Xamarin.Forms XAML editing experience is now powered by...","Href":"https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2017 Version 15.7 Preview 3","PublishedOn":"2018-04-09T21:32:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 Preview 3 was released today (April 9, 2018) and includes many improvements for mobile developers in Visual Studio. This release sports a brand new IntelliSense...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-7-preview-3/","RawContent":null},{"Title":"Right-To-Left Localization in Xamarin.Forms","PublishedOn":"2018-04-06T20:05:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re making apps that support right-to-left languages, we have great news for you: Xamarin.Forms 3.0 makes it easier than ever to flip layouts to match language direction! We&#8217;ll use...","Href":"https://blog.xamarin.com/right-to-left-localization-xamarin-forms/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 3 – Mono","PublishedOn":"2018-04-04T18:38:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the third post of four in the Debugging Xamarin Open Source Frameworks series, debugging Mono. Part 1 covers building Xamarin.Forms from the source and debugging that code, Part 2 covers...","Href":"https://blog.xamarin.com/debugging-xamarin-mono/","RawContent":null},{"Title":"Find Local Xamarin and .NET Developer Events This April","PublishedOn":"2018-04-02T18:42:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Spring into action this April by finding a Xamarin or .NET user group hosting Xamarin (and related technology) events near you! Get the latest news on exciting releases, tooling, and updates all month...","Href":"https://blog.xamarin.com/xamarin-developer-community-events-april/","RawContent":null},{"Title":"Update to Xamarin.Forms 3.0 Pre-Release Available Today!","PublishedOn":"2018-03-30T19:02:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that the latest update to the Xamarin.Forms 3.0 Pre-release is now available! Help us make this our best Xamarin.Forms release ever by updating today and giving it a...","Href":"https://blog.xamarin.com/update-to-xamarin-forms-3-0-pre-release-available-today/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 2 – Xamarin.iOS","PublishedOn":"2018-03-28T19:17:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the second part in a four-part series. In the first post, we covered building Xamarin.Forms from the source and then stepping into and debugging that code. In this post, we&#8217;ll explore...","Href":"https://blog.xamarin.com/debugging-xamarin-ios/","RawContent":null},{"Title":"New Xamarin.Android and Xamarin.iOS Project Templates Now Available","PublishedOn":"2018-03-26T18:31:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Whether you&#8217;re new or a seasoned Xamarin developer, project templates are an important part of the app building journey. They should be easy to find and set you up for success from the start. As...","Href":"https://blog.xamarin.com/new-xamarin-android-ios-templates/","RawContent":null},{"Title":"Performing Geospatial Calculations with Azure CosmosDB","PublishedOn":"2018-03-23T15:56:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Azure CosmosDB is a multi-model, globally distributed database, as well as a geospatial calculation powerhouse. It can calculate the distance between two points, determine whether a road runs through...","Href":"https://blog.xamarin.com/performing-geospatial-calculations-azure-cosmosdb/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 1 – Xamarin.Forms","PublishedOn":"2018-03-21T18:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At some point, while working with Xamarin to build awesome mobile apps, you may have received an exception or error notification from the Xamarin framework code, Mono runtime, or Base Class Library...","Href":"https://blog.xamarin.com/debugging-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7523658850","Type":"PullRequestEvent","CreatedAt":"2018-04-13T02:22:25","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1552","RelatedDescription":"Opened pull request \" [build-tools] Allow various bundle download and unzip properties to be overridden\" (#1552) at xamarin/xamarin-android","RelatedBody":"The intent here is to make it easier to fetch bcl-test artifacts for PR builds. QA's current bcl-test harness relies on the `_DownloadAndExtractBundle` target to download and extract the bcl-test\r\nassemblies to the correct location. However, this falls apart when attempting to test a PR build as the mono bundle is not uploaded. One solution to this problem is to allow us to override the file \"bundle\" that is downloaded, as PR builds do upload a zipped up build output which contains the relevant test assemblies.\r\n\r\nNow that the bundle download URI properties can be overridden, we quickly run in to max path length limitations when attempting to `SystemUnzip` the entirety of the XA build on Windows. A new property for a temporary bundle extraction location has been added to address this.\r\n\r\nExample property values:\r\n```\r\n/p:XABundleDownloadPrefix=\"https://xamjenkinsartifact.blob.core.windows.net/xamarin-android/2889/xamarin-android\"\r\n/p:XABundleFileName=\"xamarin.android-oss_v8.3.99.161_Darwin-x86_64_HEAD_b88ba02.zip\"\r\n/p:XABundleUnzipPath=\"C:\\x\"\r\n```\r\n"},{"Id":"7522641433","Type":"PullRequestEvent","CreatedAt":"2018-04-12T21:07:28","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1551","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] better ResolveAssemblies errors\" (#1551) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1532\r\n\r\nIn discussion around this issue, we realized the error message given by\r\nthe `<ResolveAssemblies />` MSBuild task is confusing for developers.\r\n\r\nCurrently users are getting:\r\n\r\n    Could not load assembly XYZ. Perhaps it doesn't exist in the Mono for Android profile?\r\n\r\nThis message makes sense for `System.*` or framework assemblies.\r\n\r\nWe were thinking in some cases we could give an error such as:\r\n\r\n    Could not load assembly XYZ. Are you missing a reference or nuget package?\r\n\r\nAdditionally we should list an assembly \"resolution path\", so we can\r\neasily figure out where the missing assembly came from.\r\n\r\nIn order to make this work:\r\n- Keep a `List<Tuple<int, string>>` to store the \"resolution path\" and\r\nindention of each assembly\r\n- Catch `FileNotFoundException` specifically\r\n- Check `MonoAndroidHelper.IsFrameworkAssembly` to decide if we show the\r\nold message, or the new/improved message\r\n- We have to track the `resolutionPath` variable as we go, passing it\r\nthrough recursively as well as removing items as we \"un-indent\"\r\n\r\nThe full error message wil now read:\r\n```\r\nException while loading assemblies: Could not load assembly 'Microsoft.Azure.Services.AppAuthentication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Are you missing a reference or nuget package?\r\nAssembly resolution path:\r\n  Microsoft.Azure.EventHubs, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7e34167dcc6d6d8c\r\n    netstandard\r\n    netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n    Microsoft.Azure.Amqp\r\n    System.Diagnostics.DiagnosticSource\r\n    Microsoft.IdentityModel.Clients.ActiveDirectory\r\n    Microsoft.Azure.Services.AppAuthentication\r\n```\r\n\r\nOther changes:\r\n- Added a unit test specifically for the NuGet used in #1532\r\n- `StringAssertEx` should give some reasonable default assertion message\r\nif `message` is not supplied\r\n- `<PackageReference />` elements had this odd `xmlns=\"\"` attribute, so\r\nI included the msbuild XML namespace to fix this"},{"Id":"7522639271","Type":"IssuesEvent","CreatedAt":"2018-04-12T21:07:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1545","RelatedDescription":"Closed issue \"Weak global reference table overflow on Android 7.0 and 7.1 only\" (#1545) at xamarin/xamarin-android","RelatedBody":"We've received messages from a lot of our users running Android 7.0 and 7.1 devices that our app crashes randomly. \r\n\r\nAfter investigating  issue seems to be this error \"JNI ERROR (app bug): weak global reference table overflow (max=51200)\" resulting in 'tgkill' app crash reports in Google Play \r\n\r\nWe do add some views in our code programmatically and given information from our users, it occurs after working with the app for a while on random moments.\r\n\r\nI've tried reproducing this issue by making a project in which I can reproduce this issue.\r\nIn this code I add 5000 TextViews in a loop to a LinearLayout after clicking a button. Before starting the loop I call  RemoveAllViews on the LinearLayout.\r\nThis works on all Android versions I've tested (4.4, 5.1, 60, 8.1) but on Android 7.0 and 7.1 the 5th time I click this button.\r\nIn \"Steps to Reproduce\" I've attached the repro project with steps to reproduce.\r\n\r\nI've also contacted Microsoft support about this, with as last insight: \r\n\"We investigated this further now and it seems that the native implementation (which depends on the OS) is different for the controls on Android 7,\r\nwhich might explain why it’s not Disposed correctly in Java.\r\n\r\nActually Xamarin creates OS-specific controls; as I understand it’s up to Android to handle the Java stack correctly.\r\nThe different results we see on different Android OS versions might depend on implementation differences between the Android versions,  or it might depend on the OS-specific Xamarin controls\r\n\"\r\nAfter this message I was given the advise to create a bug report here.\r\n\r\n### Steps to Reproduce\r\n\r\n[sampleproject.zip](https://github.com/xamarin/xamarin-android/files/1902054/sampleproject.zip)\r\n\r\n1. Open the attached sample project, run on an Android 7 or 7.1 device (not on emulator because this has a lower weak global references limit)\r\n2. Click the add views button 4 times\r\n3. This works\r\n4. Click it the fifth time, now it crashes due to a global ref table overflow\r\n\r\n5. Run the same code on another Android version (I've tested on 4.4, 5.1, 6.0 and 8.1)\r\n6. The app does not crash after clicking the button the fifth time.\r\n\r\n### Expected Behavior\r\nWhen nearing the weak global ref limit, the garbage collector should clean this, like it does on other Android versions\r\n### Actual Behavior\r\nIt doesn't clean up, so a weak global ref table overflow error occurs\r\n\r\n### Version Information\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.4.2 (build 12)\r\nInstallation UUID: e3620547-d246-4b4c-a6e4-6560e88cc3ec\r\nRuntime:\r\n\tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508010000\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Version: 2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.Mac ===\r\n\r\nXamarin.Mac not installed. Can't find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.1.24 (Visual Studio Enterprise)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.16 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/jordyvanvijfeijken/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.1   (API level 16)\r\n\t\t4.2   (API level 17)\r\n\t\t4.3   (API level 18)\r\n\t\t4.4   (API level 19)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\t\t8.0   (API level 26)\r\n\t\t8.1   (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_111\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704020012\r\nGit revision: 0d8e3f0a4d683771f17959739956fa09c7ba21e3\r\nBuild date: 2018-03-30 10:45:17-04\r\nXamarin addins: 958839ea56ab1e331caf7c92b6ad50fb9e6ee9d2\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.3\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0\r\n    Sun Dec 17 09:19:54 PST 2017\r\n    root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nOpen With 0.1\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n[logfile.txt](https://github.com/xamarin/xamarin-android/files/1902084/logfile.txt)\r\n\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7522366148","Type":"PullRequestEvent","CreatedAt":"2018-04-12T20:11:18","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1550","RelatedDescription":"Opened pull request \"[Android.Runtime] Use JniTypeManager to register natives\" (#1550) at xamarin/xamarin-android","RelatedBody":"The new code uses `JniTypeManager`'s `RegisterNativeMembers` method to\r\nregister native marshaling methods. The type manager itself uses the\r\nregister method generated by *jnimarshalmethod-gen* tool or method(s)\r\nof the given type, which have\r\n`JniAddNativeMethodRegistrationAttribute`.\r\n\r\nWhen no such register method exists (`registered` = *false*), we\r\nfallback to the original (old) code.\r\n\r\nExample register method generated by the *jnimarshalmethod-gen* tool:\r\n\r\n```\r\n[JniAddNativeMethodRegistration]\r\npublic static void __RegisterNativeMembers (JniNativeMethodRegistrationArguments args)\r\n{\r\n\targs.AddRegistrations (new JniNativeMethodRegistration[] {\r\n\t\tnew JniNativeMethodRegistration (\"n_onCreate\", \"(Landroid/os/Bundle;)V\", new Action<IntPtr, IntPtr, IntPtr> (MainActivity.__<$>_jni_marshal_methods.n_onCreate_Landroid_os_Bundle_))\r\n\t});\r\n}\r\n```"},{"Id":"7522054831","Type":"IssuesEvent","CreatedAt":"2018-04-12T19:09:05","Actor":"IoTFier","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1549","RelatedDescription":"Opened issue \"Android SDK Tools are empty VS 15.6.6\" (#1549) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Install or upgrade to VS 15.6.6 and install / upgrade VS preview to 15.7.3.\r\nAccessing Android SDK tools shows empty platform / tools.\r\n2. \r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nI upgraded my VS stable to 15.6.6 and preview to 15.7.3 and now back to square one.\r\nClick on Tools -> Android -> Android SDK Manager. \r\nIt should show android platforms and tools.\r\n\r\n### Actual Behavior\r\nAndroid SDK tools are empty. See the screenshot.\r\nIt should shows empty android platforms and tools.\r\n\r\n### Version Information\r\n(stable)VS 15.6.6 ; (preview) VS 17.3\r\n![vs 15 6 6 and vs 15 7 3 andorid sdk empty](https://user-images.githubusercontent.com/26844611/38698535-04fa43d0-3e5b-11e8-938b-a880caade164.JPG)\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7521777056","Type":"PullRequestEvent","CreatedAt":"2018-04-12T18:16:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1548","RelatedDescription":"Merged pull request \"[BUILD] Create a bundle of build status files\" (#1548) at xamarin/xamarin-android","RelatedBody":"There are times when post-mortem analysis of a failed build requires access to\r\nfiles generated by the build process which are not otherwise part of\r\ndistribution. The files include autotools caches, logs, cmake cache, ninja logs\r\netc. This commit adds a make target executed at the end of each build which\r\ncreates an archive of those files named `build-status-$GIT_COMMIT.{zip,tar.bz2}`"},{"Id":"7520602806","Type":"PullRequestEvent","CreatedAt":"2018-04-12T14:52:31","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1548","RelatedDescription":"Opened pull request \"[BUILD] Create a bundle of build status files\" (#1548) at xamarin/xamarin-android","RelatedBody":"There are times when post-mortem analysis of a failed build requires access to\r\nfiles generated by the build process which are not otherwise part of\r\ndistribution. The files include autotools caches, logs, cmake cache, ninja logs\r\netc. This commit adds a make target executed at the end of each build which\r\ncreates an archive of those files named `build-status-$GIT_COMMIT.{zip,tar.bz2}`"},{"Id":"7520254044","Type":"IssuesEvent","CreatedAt":"2018-04-12T14:01:55","Actor":"kjeremy","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1547","RelatedDescription":"Opened issue \"Debugging hangs on \"Starting Android application\"\" (#1547) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Select run from VS2017\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nApp should build and then run, immediately going into the debugger.\r\n\r\n### Actual Behavior\r\nOutput says \"Starting Android application\" and then the Run button becomes enabled again.  Some amount of time (30 seconds or so) goes by and all of a sudden the Run button becomes disabled again and the debugger starts.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.6.6\r\nVisualStudio.15.Release/15.6.6+27428.2037\r\nMicrosoft .NET Framework\r\nVersion 4.7.02558\r\n\r\nInstalled Version: Professional\r\n\r\nVisual C++ 2017   00369-60000-00001-AA214\r\nMicrosoft Visual C++ 2017\r\n\r\n.NET Portability Analyzer   1.1.10808.0\r\nEvaluates portability of assemblies across .NET platforms.\r\n\r\nApplication Insights Tools for Visual Studio Package   8.11.10402.2\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40314.0\r\nASP.NET and Web Tools 2017\r\n\r\nC# Tools   2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2017.3.5    Build 111.0.20180323.160610\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nTypeScript Tools   15.6.20202.3\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27428.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.9.0.753 (f0f46392f)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.10.96 (a702a9ceb)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.9.1.24 (f62de47)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n[xamarin-logs.zip](https://github.com/xamarin/xamarin-android/files/1903448/xamarin-logs.zip)\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7520026456","Type":"IssuesEvent","CreatedAt":"2018-04-12T13:26:40","Actor":"joj","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1546","RelatedDescription":"Opened issue \"App not refreshing on simulator when FastDev is disabled\" (#1546) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open CrossDebuggingSample (I can share a link privately)\r\n2. Set Configuration to Debug-Automatic\r\n3. Run App\r\n4. Modify code (I commented the first part of MainActivity.cs)\r\n5. Run again\r\n\r\n### Expected Behavior\r\nApp will be modified on the device, commented code will not run.\r\n\r\n### Actual Behavior\r\nCommented code is still there and running. If you set a breakpoint on the base.OnCreate() and then step over it, you'll notice the next executed line is on a comment.\r\n\r\n### Version Information\r\nThis is happening on master.\r\n\r\n### Log File\r\nBuild log on Run: https://gist.github.com/joj/040631a66b0b11760e8171114425dd4a"},{"Id":"7518498063","Type":"IssuesEvent","CreatedAt":"2018-04-12T08:37:02","Actor":"jvv-aip","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1545","RelatedDescription":"Opened issue \"Weak global reference table overflow on Android 7.0 and 7.1 only\" (#1545) at xamarin/xamarin-android","RelatedBody":"We've received messages from a lot of our users running Android 7.0 and 7.1 devices that our app crashes randomly. \r\n\r\nAfter investigating  issue seems to be this error \"JNI ERROR (app bug): weak global reference table overflow (max=51200)\" resulting in 'tgkill' app crash reports in Google Play \r\n\r\nWe do add some views in our code programmatically and given information from our users, it occurs after working with the app for a while on random moments.\r\n\r\nI've tried reproducing this issue by making a project in which I can reproduce this issue.\r\nIn this code I add 5000 TextViews in a loop to a LinearLayout after clicking a button. Before starting the loop I call  RemoveAllViews on the LinearLayout.\r\nThis works on all Android versions I've tested (4.4, 5.1, 60, 8.1) but on Android 7.0 and 7.1 the 5th time I click this button.\r\nIn \"Steps to Reproduce\" I've attached the repro project with steps to reproduce.\r\n\r\nI've also contacted Microsoft support about this, with as last insight: \r\n\"We investigated this further now and it seems that the native implementation (which depends on the OS) is different for the controls on Android 7,\r\nwhich might explain why it’s not Disposed correctly in Java.\r\n\r\nActually Xamarin creates OS-specific controls; as I understand it’s up to Android to handle the Java stack correctly.\r\nThe different results we see on different Android OS versions might depend on implementation differences between the Android versions,  or it might depend on the OS-specific Xamarin controls\r\n\"\r\nAfter this message I was given the advise to create a bug report here.\r\n\r\n### Steps to Reproduce\r\n\r\n[sampleproject.zip](https://github.com/xamarin/xamarin-android/files/1902054/sampleproject.zip)\r\n\r\n1. Open the attached sample project, run on an Android 7 or 7.1 device (not on emulator because this has a lower weak global references limit)\r\n2. Click the add views button 4 times\r\n3. This works\r\n4. Click it the fifth time, now it crashes due to a global ref table overflow\r\n\r\n5. Run the same code on another Android version (I've tested on 4.4, 5.1, 6.0 and 8.1)\r\n6. The app does not crash after clicking the button the fifth time.\r\n\r\n### Expected Behavior\r\nWhen nearing the weak global ref limit, the garbage collector should clean this, like it does on other Android versions\r\n### Actual Behavior\r\nIt doesn't clean up, so a weak global ref table overflow error occurs\r\n\r\n### Version Information\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.4.2 (build 12)\r\nInstallation UUID: e3620547-d246-4b4c-a6e4-6560e88cc3ec\r\nRuntime:\r\n\tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508010000\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Version: 2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.Mac ===\r\n\r\nXamarin.Mac not installed. Can't find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.1.24 (Visual Studio Enterprise)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.16 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/jordyvanvijfeijken/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.1   (API level 16)\r\n\t\t4.2   (API level 17)\r\n\t\t4.3   (API level 18)\r\n\t\t4.4   (API level 19)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\t\t8.0   (API level 26)\r\n\t\t8.1   (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_111\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704020012\r\nGit revision: 0d8e3f0a4d683771f17959739956fa09c7ba21e3\r\nBuild date: 2018-03-30 10:45:17-04\r\nXamarin addins: 958839ea56ab1e331caf7c92b6ad50fb9e6ee9d2\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.3\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0\r\n    Sun Dec 17 09:19:54 PST 2017\r\n    root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nOpen With 0.1\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n[logfile.txt](https://github.com/xamarin/xamarin-android/files/1902084/logfile.txt)\r\n\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7523985040","Type":"IssuesEvent","CreatedAt":"2018-04-13T04:29:19","Actor":"MelbourneDeveloper","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2454","RelatedDescription":"Opened issue \"ListView Grouping Enhancement\" (#2454) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nThe groupingSampleListView shows some cool functionality that ListView is capable of. The UI is great. We want to implement this in our app. Unfortunately, the functionality requires a second model to be written in code. For example, in this sample there is a \"VeggieModel\", and a \"GroupedVeggieModel\". So, even if the app already had a VeggieModel that is groupable with Linq, the programmer needs to create the GroupedVeggieModel class to get the benefit of grouping. In this sample, the grouping is on ShortName/LongName, but in reality, a class may have many properties for grouping, and to leverage any of them, the programmer would need to write a class for each one.\r\n\r\nOur application is 100% XAML driven. We define all of our UI in XAML. So, we don't write any code. Someone who is configuring our system would not have access to add a new class like GroupedVeggieModel. So, I propose that if the grouping model is not specified, then Linq should be used to group on a given property of the model that is not grouped. \r\n\r\nThis particular code does not work, but it is an example of how I think it should work behind the scenes. I.e. the model should be grouped up by some property specified at the XAML level via reflection. The groupingPropertyName variable would be moved on to the ListView class as a property to be set in XAML.\r\n\r\n```\r\n    public class VeggieModel\r\n\t{\r\n\t\tpublic string Name { get; set; }\r\n\t\tpublic string Comment { get; set; }\r\n\t\tpublic string Type { get; set; }\r\n\t\tpublic string Image { get; set; }\r\n\t\tpublic VeggieModel ()\r\n\t\t{\r\n\t\t}\r\n\t}\r\n\r\n    public partial class GroupedListXaml : ContentPage\r\n\t{\r\n\t\tpublic GroupedListXaml ()\r\n\t\t{\r\n\t\t\tInitializeComponent ();\r\n\r\n            var groupingPropertyName = \"Type\";\r\n\r\n\t\t\tvar veggies  = new List<VeggieModel> ();\r\n\r\n            veggies.Add (new VeggieModel () { Name = \"celery\", Type = \"Veggie\", Comment = \"try ants on a log\" });\r\n            veggies.Add (new VeggieModel () { Name = \"tomato\", Type = \"Fruit\", Comment = \"pairs well with basil\" });\r\n            veggies.Add (new VeggieModel () { Name = \"zucchini\", Type = \"Veggie\", Comment = \"zucchini bread > bannana bread\" });\r\n            veggies.Add (new VeggieModel () { Name = \"peas\", Type = \"Veggie\", Comment = \"like peas in a pod\" });\r\n            veggies.Add (new VeggieModel () {Name = \"banana\", Type = \"Fruit\", Comment = \"available in chip form factor\"});\r\n            veggies.Add (new VeggieModel () {Name = \"strawberry\", Type = \"Fruit\", Comment = \"spring plant\"});\r\n            veggies.Add (new VeggieModel () {Name = \"cherry\", Type = \"Fruit\", Comment = \"topper for icecream\"});\r\n\r\n            var grouped = veggies.GroupBy(v => v.GetType().GetRuntimeProperty(groupingPropertyName).GetValue(v));\r\n\r\n            lstView.ItemsSource = grouped;\r\n\t\t}\r\n\t}\r\n\r\n```\r\n\r\n```\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"GroupingSampleListView.GroupedListXaml\">\r\n\t<ContentPage.Content>\r\n        <ListView x:Name =\"lstView\" IsGroupingEnabled=\"true\" GroupDisplayBinding=\"{Binding Key}\" GroupShortNameBinding=\"{Binding Key}\">\r\n\t\t\t<ListView.ItemTemplate>\r\n\t\t\t\t<DataTemplate><TextCell Text=\"{Binding Name}\" Detail = \"{Binding Comment}\" /></DataTemplate>\r\n\t\t\t</ListView.ItemTemplate>\r\n\t\t</ListView>\r\n\t</ContentPage.Content>\r\n</ContentPage>\r\n\r\n```\r\n\r\nThis is what the object model looks like when grouped by Linq:\r\n![image](https://user-images.githubusercontent.com/16697547/38716915-ca24513e-3f26-11e8-9395-1666ffa6fe75.png)\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/16697547/38716306-5085f6aa-3f23-11e8-8075-928c0d3997fb.png)\r\n\r\n![image](https://user-images.githubusercontent.com/16697547/38716307-551919c2-3f23-11e8-9a29-1bf0ac484550.png)\r\n\r\n\r\n"},{"Id":"7523464694","Type":"PullRequestEvent","CreatedAt":"2018-04-13T01:12:14","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2453","RelatedDescription":"Opened pull request \"[UWP'\" (#2453) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUWP ListView's DataContext is being reset on every CollectionChanged event; this change limits those resets to `NotifyCollectionChangedAction.Reset`.\r\n\r\n### Bugs Fixed ###\r\n\r\n- #2332 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7523440993","Type":"IssuesEvent","CreatedAt":"2018-04-13T01:02:59","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2450","RelatedDescription":"Closed issue \"OnAppearing still called even if I go back from second page\" (#2450) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nSuppose I have two pages with NavigationPage, then I override OnAppearing method in the second page:\r\n```csharp\r\nprotected override async void OnAppearing()\r\n{\r\n    base.OnAppearing();\r\n    await Task.Delay(10000);\r\n    Debug.WriteLine(\"OnAppearing\");\r\n}\r\n```\r\nThe weird thing is that, if I navigate from first page to second page and then go back to first page as much as I can before `10000` delay , the `Debug.WriteLine(\"OnAppearing\")` code still be called, so am I missing something here?\r\n\r\n### Expected Behavior\r\nThe `Debug.WriteLine(\"OnAppearing\")` code not be called even if go back from second page\r\n\r\n### Actual Behavior\r\nThe `Debug.WriteLine(\"OnAppearing\")` still be called\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122203 in this reproduction (but I have a project that use 3.0.0.354232-pre3 which has the same issue)\r\n- IDE: Visual Studio Community 2017 15.5.3\r\n- Platform Target Frameworks:\r\n  - iOS:  11.6.1.2\r\n  - Android: 8.1.3.0\r\n  - UWP:  16299\r\n\r\n### Gif how to test\r\n![2018-04-13-02-32-14](https://user-images.githubusercontent.com/19399214/38700317-db911856-3ec4-11e8-8b56-ac0ea72c06e5.gif)\r\n\r\n\r\n### Reproduction Link\r\n[App4.zip](https://github.com/xamarin/Xamarin.Forms/files/1904636/App4.zip)\r\n\r\n"},{"Id":"7523049275","Type":"IssuesEvent","CreatedAt":"2018-04-12T22:47:00","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2452","RelatedDescription":"Opened issue \"Xamarin.Forms Drawing Spec\" (#2452) at xamarin/Xamarin.Forms","RelatedBody":"# Xamarin.Forms Drawing Spec\r\n\r\n# Theming\r\n\r\nTo make MaterialShell work it not only needs a shell which appears to be material design, but all of its contents also should be material design. Today that means Custom Renderers. This is heavy and undesired from a user work perspective. Instead a better approach is required.\r\n\r\n## Simple drawing API sample\r\n```xaml\r\n<Button x:Class=\"Local.MyButton\">\r\n  <Button.Template>\r\n    <DrawingTemplate>\r\n      <Drawing>\r\n        <Grid>\r\n          <RoundedRectangle Background=\"{x:Bind BackgroundColor}\" />\r\n          <Ellipse x:Name=\"TouchFeedback\" Opacity=\"0\" />\r\n          <Text Content=\"{x:Bind Text}\" />\r\n        </Grid>\r\n      </Drawing>\r\n    </DrawingTemplate>\r\n  </Button>\r\n</Button>\r\n```\r\nView templates, at least for now, must be a `DrawingTemplate`. The first child of a `DrawingTemplate` is always a `Drawing`. Inside of a `Drawing` you may use Layouts and drawing primitives.\r\n\r\nDrawing primitives may be x:named and looked up by name and manipulated in code behind as any other `View`. In effect a drawing primitive is simply a view who has no renderer but rather must be inside a `Drawing` in order to work. `Drawing` is limited to children it can support as all are collapsed into simple drawing commands.\r\n\r\nDrawing primative objects may use a Brush type rather than a Color type for providing colors/backgrounds/etc.\r\n\r\nWhen using a MaterialShell, all relevant controls will receive a default `Template` which themes them according to the Material design guidelines and unifies their look and feel across platform. This theme can be overridden at any layer of the hierarchy simply by blocking its propagation in resource dictionaries.\r\n\r\nOnce realized a Control may not have its Template changed as DrawingTemplated controls may at times require different renderers.\r\n\r\n## Types\r\n\r\n### DrawingTemplate\r\nThis is mostly a marker type. In the future we will eliminate the requirement that Templates be DrawingTemplates.\r\n```csharp\r\npublic class DrawingTemplate : ControlTemplate {}\r\n```\r\n### Drawing\r\nA View which has no renderer and is instead consumed by its parent view as a native drawing. Drawing is a very basic layout which can be measured but always sizes all of its children to the same size as itself when laid out.\r\n```csharp\r\npublic class Drawing : Layout<View> {}\r\n```\r\n### New API for Drawing in View\r\n```csharp\r\npublic class View : VisualElement // new API only\r\n{\r\n  public ControlTemplate Template { get; set; }\r\n\r\n  protected BindableObject GetTemplateChild(string childName);\r\n\r\n  protected virtual void OnApplyTemplate ();\r\n}\r\n```\r\n### Brush\r\n```csharp\r\npublic class Brush : BindableObject\r\n{\r\n  public static readonly BindableProperty OpacityProperty;\r\n  public double Opacity { get; set; }\r\n}\r\n```\r\n### SolidColorBrush\r\n```csharp\r\npublic class SolidColorBrush : Brush\r\n{\r\n  public static readonly BindableProperty ColorProperty;\r\n  public Color Color { get; set; }\r\n}\r\n```\r\n### GradientBrush\r\n```csharp\r\npublic class LinearGradientBrush : Brush\r\n{\r\n  public static readonly BindableProperty GradientStopsProperty;\r\n  [Content]\r\n  public GradientStopCollection GradientStops { get; set; }\r\n}\r\n```\r\n### GradientStopCollection\r\n```csharp\r\npublic sealed class GradientStopCollection : IEnumerable<GradientStop>, IList<GradientStop>\r\n```\r\n### GradientStop\r\n```csharp\r\npublic sealed class GradientStop : BindableObject\r\n{\r\n  public static readonly BindableProperty ColorProperty;\r\n  public Color Color { get; set; }\r\n\r\n  public static readonly BindableProperty OffsetProperty;\r\n  public double Offset { get; set; }\r\n\r\n  public static readonly BindableProperty StartPointProperty;\r\n  public Point StartPoint { get; set; }\r\n\r\n  public static readonly BindableProperty EndPointProperty;\r\n  public Point EndPoint { get; set; }\r\n}\r\n```\r\n### Drawing Primitives\r\nThere will be a need for a large number of drawing primitives with associated properties. This document does not attempt to define all of them, just note some of the obvious ones that will need to exist. The drawing primitive API is not intended to be a wholesale replacement for SkiaSharp. It is however intended to be agnostic to the usage of Skia or native drawing backends for the paltform.\r\n\r\nA good path forward for Skia would be to add a SkiaDrawing element that would instruct the Drawing to be rendered via Skia. Skia could then render all the stock primitives as well as provide a Skia drawing element which allows for coded drawing.\r\n\r\n### Shape\r\n```csharp\r\nnamespace Xamarin.Forms.Shapes \r\n{\r\n  public class Shape : View\r\n  {\r\n    public static readonly BindableProperty FillProperty;\r\n    public Brush Fill { get; set; }\r\n\r\n    public static readonly BindableProperty StrokeProperty;\r\n    public Brush Stroke { get; set; }\r\n\r\n    public static readonly BindableProperty StrokeThicknessProperty;\r\n    public double StrokeThickness { get; set; }\r\n  }\r\n}\r\n```\r\n\r\n### Line\r\n```csharp\r\nnamespace Xamarin.Forms.Shapes \r\n{\r\n  public sealed class Line : Shape\r\n  {\r\n    public Point Start { get; set; }\r\n    public Point End { get; set; }\r\n  }\r\n}\r\n```\r\n\r\n### Ellipse\r\n```csharp\r\nnamespace Xamarin.Forms.Shapes \r\n{\r\n  public sealed class Ellipse : Shape\r\n  {\r\n  }\r\n}\r\n```\r\n\r\n### Text\r\n```csharp\r\npublic sealed class Text : Shape \r\n{\r\n  // All the same properties as Label more or less\r\n}\r\n\r\n```\r\n\r\n### Rectangle\r\n```csharp\r\nnamespace Xamarin.Forms.Shapes \r\n{\r\n  public sealed class Rectangle : Shape\r\n  {\r\n    public CornerRadius CornerRadius { get; set; }\r\n  }\r\n}\r\n```\r\n\r\n### BezierLine\r\nThis differs quite a bit from UWP, however this is capable of drawing an Bezier curved path/shape, as well as regular polygons and polylines.\r\n```csharp\r\nnamespace Xamarin.Forms.Shapes \r\n{\r\n  public sealed class BezierLine : Shape\r\n  {\r\n    public IList<BezierPoint> Points { get; }\r\n    public bool ShouldClose { get; set; }\r\n  }\r\n}\r\n\r\n```\r\n\r\n### BezierPoint\r\n```csharp\r\nnamespace Xamarin.Forms.Shapes \r\n{\r\n  public sealed class BezierPoint : Point\r\n  {\r\n    public Size LeftControlOffset { get; set; }\r\n    public Size RightControlOffset { get; set; }\r\n  }\r\n}\r\n\r\n```\r\n\r\n# TODO\r\n- [x] Add API for drawing\r\n- [x] Fill out brush API\r\n\r\n# Issues\r\n\r\n## Shapes\r\n\r\nThere is not currents a great way to draw just an arc. The mechanism in UWP for doing this is a bit... uhg just not fun.\r\n\r\nThere is also something to be said for the fact that Shapes are currently Views. This is to make sure they can be consumed by standard Layout's which is nice because the user does not need to learn new layouting mechanisms. The downside is drawing primitives only work in the context of a Drawing, but the compiler will not stop you from using them external to one. The counter case is to make Drawing specific layouts which currently seems to be the greater evil.\r\n\r\nIdeally Layout would allow any child which implements some ILayoutable interface, of which View and and Drawing Primitives would implement. This would however be a breaking change, so at the moment it seems View is the only viable option.\r\n\r\n## Brush\r\n\r\nImageBrush is probably going to be needed. Research needs to be done to ensure that every platform can support ImageBrush everywhere brushes are used.\r\n\r\n## DrawingTemplate\r\n\r\nThere currently exists no mechanism in core to switch the renderer based on a property as this will require. That will need to be added. Ideally this should be more generic than a switch based on the Template."}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7521928498","Type":"IssuesEvent","CreatedAt":"2018-04-12T18:44:34","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3930","RelatedDescription":"Opened issue \"[XI]WatchOS Intent sample fail to build with an error \"could not register the assembly Xamarin.WatchOS\"\" (#3930) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build watch intent sample from IDE or command line\r\n\r\n### Expected Behavior\r\nApp should build successfully\r\n### Actual Behavior\r\nApp fails to build with an error could not register the assembly xamarin.watchOS. This issue occurs only with watch intent sample. Watchkitcatalog is building successfully\r\n### Environment\r\n```\r\nhttps://gist.github.com/GouriKumari/49a33b1658478361ce0b177808b7fdbb\r\n```\r\n\r\n### Build Logs\r\n\r\nBuild Log: https://gist.github.com/GouriKumari/cca1bfb3a64d77a64e6e164b414e63b5\r\n\r\n### Regression:\r\nThis is working with d15-6, hence it is a regression in watch intent sample. "},{"Id":"7519452063","Type":"IssuesEvent","CreatedAt":"2018-04-12T11:40:04","Actor":"alanmcgovern","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3929","RelatedDescription":"Opened issue \"Resources are always considered as 'newer than output'\" (#3929) at xamarin/xamarin-macios","RelatedBody":"The step for me is to build any ios project with resources. If you then build it a second time it complains that the input file is newer than the output file for all resources, so we copy them all instead of doing a no-op.\r\n\r\nI uploaded a 200mb log file here: https://xamarinhq.slack.com/files/U03CFBR1A/FA4T824L8/output\r\n\r\nMy repro project was the ios designer's `MTDesigner.sln`."},{"Id":"7518430362","Type":"IssuesEvent","CreatedAt":"2018-04-12T08:24:00","Actor":"CarLoOSX","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3928","RelatedDescription":"Opened issue \"WKWebView RunJavaScriptConfirmPanel Unable to locate the block to delegate conversion method ...\" (#3928) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nhttps://developer.xamarin.com/recipes/ios/content_controls/web_view/handle_javascript_alerts/ \r\nMethod : \r\nRunJavaScriptConfirmPanel\r\n\r\n### Expected Behavior\r\nIt should show an Action sheet like iOS Simulator\r\n\r\n### Actual Behavior\r\nApp crashes\r\n### Environment\r\nios 11.3\r\nXcode 9.3\r\nXamarin.iOS : Version: 11.9.1.24 (Visual Studio Community)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\nVisual Studio Mac 7.4.2 (build 12)\r\n\r\n\r\n\r\n\r\nHello, Im trying to capture confirm panels in Xamarin.iOS App but it only works in simulator.\r\n\r\n    ```\r\n[Foundation.Export(\"webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:\")]\r\n    public void RunJavaScriptConfirmPanel(WKWebView webView, string message, WKFrameInfo frame, Action<bool> completionHandler)\r\n    {\r\n\r\n        var alertController = UIAlertController.Create(null, message, UIAlertControllerStyle.ActionSheet);\r\n\r\n        alertController.AddAction(UIAlertAction.Create(\"Sí\", UIAlertActionStyle.Destructive, okAction =>\r\n        {\r\n            completionHandler(true);\r\n        }));\r\n        alertController.AddAction(UIAlertAction.Create(\"No\", UIAlertActionStyle.Default, cancelAction =>\r\n        {\r\n            completionHandler(false);\r\n        }));\r\n\r\n        _controller.PresentViewController(alertController, true, null);\r\n\r\n    }\r\n```\r\n\r\nI'm following the next example from xamarin official page ( https://developer.xamarin.com/recipes/ios/content_controls/web_view/handle_javascript_alerts/ ) but when I run the app on my iPhone 8 plus I'm getting this error:\r\n\r\nObjCRuntime.RuntimeException:\r\nUnable to locate the block to delegate conversion method for the method XXXX.iOS.Infrastructure.JSDelegate.RunJavaScriptConfirmPanel's parameter #4. Please file a bug at http://bugzilla.xamarin.com.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"984463408073408513","CreatedAt":"2018-04-12T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/tX03cw88GD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":11,"RawContent":null},{"Id":"984140279061020672","CreatedAt":"2018-04-11T18:45:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with new #XamarinForms #XAML IntelliSense functionality in #VisualStudio 2017: https://t.co/EPKoitU5bA https://t.co/JnlquxCZN9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"983738884319334400","CreatedAt":"2018-04-10T16:10:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build Xamarin.iOS from the source code in the second part of our four-part series on debugging… https://t.co/uVkITyoInQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":11,"RawContent":null},{"Id":"983374729166934016","CreatedAt":"2018-04-09T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/O4ILyulYAJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":25,"RawContent":null},{"Id":"983104477468266496","CreatedAt":"2018-04-08T22:09:07+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your Xamarin apps with Azure CosmosDB: https://t.co/acrN8gdJdS https://t.co/7dgtdHbqn9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":13,"RawContent":null},{"Id":"982728475831390208","CreatedAt":"2018-04-07T21:15:01+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/FGw0WVLZMU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":20,"RawContent":null},{"Id":"982351517544996870","CreatedAt":"2018-04-06T20:17:07+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/0hyFj6caS2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":26,"RawContent":null},{"Id":"982287570737315842","CreatedAt":"2018-04-06T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/jQc7aGUfzQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"981917376756232193","CreatedAt":"2018-04-05T15:32:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"981605676123344896","CreatedAt":"2018-04-04T18:53:25+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/eB7EyBcngh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":14,"RawContent":null},{"Id":"981383112331493377","CreatedAt":"2018-04-04T04:09:01+00:00","UserScreenname":"xamarinhq","Text":"Add cloud storage to your #Xamarin apps with #Azure Blob Storage: https://t.co/xM3dAE2jRZ https://t.co/pKafHtrM4C","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":26,"RawContent":null},{"Id":"981202163941761024","CreatedAt":"2018-04-03T16:10:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to merge multiple resource dictionaries in the most recent stable release of #XamarinForms for even great… https://t.co/Kg5Dh5x1pO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":22,"RawContent":null},{"Id":"980881805221007371","CreatedAt":"2018-04-02T18:57:00+00:00","UserScreenname":"xamarinhq","Text":"Jump into #Xamarin with an event near you this April: https://t.co/Tg8HHIbUDA https://t.co/OJW7RynVmV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"980838018474020864","CreatedAt":"2018-04-02T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how you can contribute to Xamarin.iOS and Xamarin.Mac—no code necessary! Get started: https://t.co/XU5OJkcXCt https://t.co/gY8s2v6cYg","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":18,"RawContent":null},{"Id":"980547128639541254","CreatedAt":"2018-04-01T20:47:07+00:00","UserScreenname":"xamarinhq","Text":"Check out the new, feature-packed release of #UrhoSharp 1.8: https://t.co/ZxSIstdhNE https://t.co/y4p0bmVENZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":56,"FavoriteCount":19,"RawContent":null},{"Id":"979799673417424907","CreatedAt":"2018-03-30T19:17:00+00:00","UserScreenname":"xamarinhq","Text":"The #XamarinForms 3.0 pre-release is now available! Download and get started today: https://t.co/oMrz45f2XW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":152,"FavoriteCount":109,"RawContent":null},{"Id":"979752111947722753","CreatedAt":"2018-03-30T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:… https://t.co/cS0ZDvkieM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"979078173127331841","CreatedAt":"2018-03-28T19:30:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/2os3iP5NYD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":86,"FavoriteCount":30,"RawContent":null}]}},"RunOn":"2018-04-13T05:30:40.5174157Z","RunDurationInMilliseconds":4672}