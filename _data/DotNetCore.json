{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7162985370","Type":"PullRequestEvent","CreatedAt":"2018-01-29T04:21:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16067","RelatedDescription":"Merged pull request \"Update CoreClr to preview2-26129-01 (master)\" (#16067) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7162823634","Type":"IssuesEvent","CreatedAt":"2018-01-29T03:08:51","Actor":"gafter","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16068","RelatedDescription":"Opened issue \"SIMD 64 Bit Memory-Alignment Bug\" (#16068) at dotnet/coreclr","RelatedBody":"@Gallimathias commented on [Sun Jan 14 2018](https://github.com/dotnet/roslyn/issues/24233)\n\n**Version Used**: .NET 4.7.1 C# 7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install engenious via nuget or wrote your own packed Vector3 or use a other packed Vector3\r\n2. Cast with pointer to System.Numerics.Vector3 or own unpacked Vector3\r\n3.  Just do the same thing, just put the pointer in a variable before it.\r\n4. Compare the results\r\n\r\n**A brief example:**\r\n\r\nC#-Code:\r\n\r\n````CSharp\r\n        static unsafe void Test()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var a = *(Numerics.Vector3*)(&value);\r\n        }\r\n\r\n        static unsafe void TestB()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var d = &value;\r\n            var a = *(Numerics.Vector3*)d;\r\n        }\r\n````\r\n\r\nIL-Code:\r\n\r\n````CIL\r\n                 .method private hidebysig static \r\n\t\t\tvoid Test () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2144\r\n\t\t\t// Code size 33 (0x21)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_001f: stloc.1\r\n\t\t\tIL_0020: ret\r\n\t\t} // end of method Program::Test\r\n\r\n\t\t.method private hidebysig static \r\n\t\t\tvoid TestB () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2174\r\n\t\t\t// Code size 35 (0x23)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [engenious]engenious.Vector3* d,\r\n\t\t\t\t[2] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: stloc.1\r\n\t\t\tIL_001b: ldloc.1\r\n\t\t\tIL_001c: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_0021: stloc.2\r\n\t\t\tIL_0022: ret\r\n\t\t} // end of method Program::TestB\r\n````\r\n\r\n**Expected Behavior**: Both methods should produce the same result on all systems.\r\n\r\nMethod Test: a should be <0. 0. -41>\r\nMethod TestB: a should be <0. 0. -41>\r\n\r\n**Actual Behavior**: When you cast a packed vector into an unpacked vector, the result will always be a zero vector on some computers with 64 Bit and the use of a direct assignment.\r\n\r\nMethod TestB works on all systems no matter if 32 Bit or 64 Bit.\r\nMethod Test does not work as 64 bit version on some systems. Could this be related to the CPU used?\r\n\r\nMy Results compiled as 64 Bit:\r\n\r\nMethod Test: a is <0. 0. 0>\r\nMetod TestB: a is <0. 0. -41>\r\n\r\nOn my PC, Method Test doesn't work. My CPU is Intel i7-5960X.\r\n\r\nThe only difference in CIL are the following lines:\r\n\r\nIL_001a: stloc.1\r\nIL_001b: ldloc.1\n\n---\n\n@mikedn commented on [Sun Jan 14 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-357528189)\n\nThis looks more like a JIT bug so it probably belongs in the coreclr repository.\r\n\r\nAlso, it's not clear how did you figure out that the result is sometimes <0, 0, 0>. Your example code does not do anything with `a`, it does not display it, it does not return it etc.\n\n---\n\n@jvbsl commented on [Tue Jan 16 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358108378)\n\nIt was tested with the results shown by the debugger. As well as in another Project where these values where used for further calculation of forces. Which on some systems(all 64 Bit) worked perfectly fine and on other systems there wasn't any movement at all(no movement is the same as no forces and as zero vectors).\n\n---\n\n@mikedn commented on [Tue Jan 16 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358213852)\n\nCan you post the assembly code generated for method Test()? You should be able to get it from the VS debugger by using \"go to disassembly\". On my system everything I tried seems to be working fine.\r\n\r\nOn a side note - I'm not sure if what you're trying to do in that project makes sense. There's a good chance that the `USE_SIMD` code is not as fast as you may expect it to be. Especially in the case of `Vector3`.\r\n\r\n\n\n---\n\n@jvbsl commented on [Wed Jan 17 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358396784)\n\nYou mean you aren't sure that it makes sense because it could be slower than the original Code?\r\nThat's true if the system doesn't support SIMD, because unfortunately C# jitter doesn't seem to be able to optimize readonly boolean variables like I would want to(of course you could change it with Reflection -> Undefined behaviour please^^) so it get's a lot slower than using my own actual code if SIMD is not supported. Otherwise it gets a lot faster though, so it does exactly what I want.\r\n\r\nIf you mean it does not make sense to pack my Vectors. It does at first memory Usage, and secondly I need it packed for OpenGL, otherwise I would need to make a transform method on which I would lose a lot of performance as well.\n\n---\n\n@mikedn commented on [Wed Jan 17 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358405137)\n\n> You mean you aren't sure that it makes sense because it could be slower than the original Code?\r\n\r\nYes. Taking the address of the value basically ensures that the value will be forced into memory (if it was in register). Then it has to be loaded back as `System.Numerics.Vector3` and that's not very cheap either because there's no such thing as a \"SIMD vector with 3 components\" in SSE/AVX so you basically get 2 separate loads than are then stitched together into a SSE register.\r\n\r\nI'm not sure what readonly, reflection and packing have to do with this. To be clear, I'm referring to this type of code:\r\n```asm\r\nFast.Vector3 res= (*(Fast.Vector3*)&value1 + *(Fast.Vector3*)&value2); \r\n```\n\n---\n\n@jvbsl commented on [Wed Jan 17 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358446181)\n\nI can assure you that the code still is faster than not using SIMD. Of course I'm clear on the part, that all the casting isn't that nice, but I can't use System.Numerics. Vector directly, and I'm not able to directly use SIMD in C# either. So in theory I could always create the new value explicitly, but is that really faster? I know that in C++ it wouldn't be. But yeah C# isn't that good at optimizing of course.\r\n\r\nWhat i was referring to with readonly and reflection is that:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Numerics.Vectors/src/System/Numerics/Vector3.cs#L116\r\nhttps://github.com/dotnet/corefx/blob/76dd41773b0ac79f6cde2bd681eaa8b1aeb91298/src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs#L528\r\nSo the jitter doesn't seem to be able to optimize the path of the if, even if the returned value is constant. So the code if there isn't any SIMD is always gonna be slower as it would normally be, because of additional value checks and jumps. Even if it was possible to change the value at runtime in my opinion the jitter should be able to optimize it to compile it as a constant path(so no value check and no jump, cause the value never changes anyway). It is possible to change these values with reflection though and if someone would change normally unchangeable values, the jitter should just have undefined behavior in my opinion, because the benefits of the optimization are more important than behavior of stuff, which shouldn't even be possible anyway^^\r\n\r\nAnd I exactly knew which code you was referring to, but it seems that you don't understand what I'm talking about. The cycle count of the division itself should for a Vector3 still be a lot less, even combined with the needed cycles for the casts. As I said before I already measured the difference of time needed.\r\n\r\nApart from that, thats not even the Point the issue is making. It's not about if the code makes sense or it could be done better. But about the determinability of the IL/C#-code which should theoretically be the same on all platforms, and which it definitely is not.\r\nThe thing is that the two different codes shown above should(at least in my opinion) logically result in the same outcome, which it does not, and that is actually what the whole issue is about. What MS wants to do about it is on their part. And it is quite possible that my whole casting won't be possible platform-independant anymore, by what I still would be completely fine, as long as it is deterministic.\n\n---\n\n@mikedn commented on [Wed Jan 17 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358451493)\n\n> So the jitter doesn't seem to be able to optimize the path of the if, even if the returned value is constant.\r\n\r\nAs far as I can see it does that. If I add 2 `System.Numerics.Vector3` in .NET 4.7.1 x86 I don't see any trace of that `if` in the generate code.\r\n\r\n> Apart from that, thats not even the Point the issue is making.\r\n\r\nI know, that's why I said \"On a side note - I'm not sure if what you're trying to do ...\". If you measured it and it's faster, good.\r\n\r\n>  But about the determinability of the IL/C#-code which should theoretically be the same on all platforms, and which it definitely is not.\r\n\r\nI said in my first post - this looks like a JIT bug. It's very unlikely that it has anything to do with IL, C# and Roslyn. I can't reproduce it myself and you haven't posted the assembly code so I can only guess. AFAIR, the JIT did have some issues with Vector3 in the past.\r\n\n\n---\n\n@jvbsl commented on [Wed Jan 17 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358463811)\n\n> As far as I can see it does that. If I add 2 System.Numerics.Vector3 in .NET 4.7.1 x86...\r\n\r\nAnd it does make sense that it works with x86, because the alignment should be on full register size(32-bit == sizeof(float)) anyway, so there wouldn't be any alignment in both structs, so the memory layout of both structs should be the same anywhere with x86. It's about x64, where the jitter produces different Code on different platforms(or same Code and different results, will need to look into that, need to ask a friend for his assembly results again).\r\n\r\n> ...I don't see any trace of that if in the generate code.\r\n\r\nthan it's possibly the casts that cost the additional time, but there are other cases in which it couldn't do it(on older .Net versions at least).\r\n\r\nThe difference we saw on one platform was that it uses AVX to move while using the temporary variable. But why isn't it done with the other code, that's what I'm still curious about.\r\nActually we hoped for an answer of a Microsoft developer before opening another issue, but you where persistent enough to let us do it now, and we will link the issues together ;)\n\n---\n\n@mikedn commented on [Wed Jan 17 2018](https://github.com/dotnet/roslyn/issues/24233#issuecomment-358469224)\n\n> And it does make sense that it works with x86,\r\n\r\nThe reason why it works on x86 is that the x86 JIT used by the .NET Framework doesn't support hardware acceleration. Anyway, my comment about x86 was related to the `if (IsHardwareAccelerated)` line you pointed to.\r\n\r\n> The difference we saw on one platform was that it uses AVX to move while using the temporary variable. But why isn't it done with the other code, that's what I'm still curious about.\r\n\r\nWell, it uses AVX if it's available. Otherwise it uses SSE2.\r\n\n\n"},{"Id":"7162617490","Type":"IssuesEvent","CreatedAt":"2018-01-29T01:36:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15592","RelatedDescription":"Reopened issue \"Bogus SynchronizationLockException thrown in thread intensive workloads\" (#15592) at dotnet/coreclr","RelatedBody":"In x64 Windows release testing in the CI:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt\r\n\r\nThere are many cases of the TryEnter01, TryEnter03, and TryEnter05 tests failing:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3556/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3553/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3549/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3546/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3538/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3586\r\n"},{"Id":"7162586996","Type":"PullRequestEvent","CreatedAt":"2018-01-29T01:20:30","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16067","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26129-01 (master)\" (#16067) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7162405990","Type":"PullRequestEvent","CreatedAt":"2018-01-28T23:29:20","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16066","RelatedDescription":"Opened pull request \"Adding basic codegen support for the SSE Store intrinsics.\" (#16066) at dotnet/coreclr","RelatedBody":"This allows the Sse ISA to be marked as \"fully implemented\"."},{"Id":"7162362166","Type":"IssuesEvent","CreatedAt":"2018-01-28T23:01:43","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16065","RelatedDescription":"Opened issue \"JIT: bug in CSE with multiple conditional defs\" (#16065) at dotnet/coreclr","RelatedBody":"The jit's CSE algorithm allows for expressions with multiple defs and uses. A given use may be reachable by more than one def. Imagine we have a CSE cse1 with two conditional defs D1, D2 that can reach a use.\r\n\r\nNow suppose D1 is nested inside a more complex CSE cse2.  The jit processes CSEs from more complex to less complex (outer to inner) and so will tackle cse2 first. While processing cse2, D1 will be unmarked as the IR it refers to has been replaced. Then when processing cse1, the jit will skip the unmarked D1 and only handle D2, and so creates bad code where the use can end up with the wrong value.\r\n\r\nExample thanks to @jeffreysax who ran into this on desktop 4.7.1.\r\n\r\n The pattern above occurs in `Array2D.Diagonal`.\r\n```C#\r\n// .NET 4.7.1 64-bit\r\n// Works correctly when \"optimize code\" is disabled.\r\n// Works incorrectly when \"optimize code\" is enabled.\r\n//\r\n// This is a minimal reproduction of original code that still shows the problem.\r\n// MethodImpl attributes and their effects are in comments.\r\n//\r\n// Jeffrey Sax (jeffrey@extremeoptimization.com)\r\n\r\nusing System;\r\n\r\nnamespace RyuJITbug\r\n{\r\n    struct Array2D\r\n    {\r\n        public int Offset { get; }\r\n        public int LeadingDimension { get; }\r\n\r\n        public Array2D(int offset, int leadingDimension)\r\n        {\r\n            this.Offset = offset;\r\n            this.LeadingDimension = leadingDimension;\r\n        }\r\n\r\n        // Works: [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\r\n        public int GetIndex(int row, int column) \r\n            => this.Offset + row + this.LeadingDimension * column;\r\n\r\n        // Works: [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoOptimization)]\r\n        // Doesn't work: [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\r\n        public ArraySlice Diagonal(int index)\r\n        {\r\n            int offset = (index > 0) ? GetIndex(0, index) : GetIndex(-index, 0);\r\n            // The problem is with this line:\r\n            int stride = this.LeadingDimension + 1;\r\n            return new ArraySlice(offset, stride);\r\n        }\r\n        public ArraySlice GetStride(int index)\r\n        {\r\n            int offset = (index > 0) ? GetIndex(0, index) : GetIndex(-index, 0);\r\n            // The problem is with this line, when inlined:\r\n            int stride = this.LeadingDimension + 1;\r\n            return new ArraySlice(offset, stride);\r\n        }\r\n    }\r\n    struct ArraySlice\r\n    {\r\n        public int Offset { get; }\r\n        public int Stride { get; }\r\n\r\n        public ArraySlice(int offset, int stride)\r\n        {\r\n            this.Offset = offset;\r\n            this.Stride = stride;\r\n        }\r\n    }\r\n\r\n    class Vector\r\n    {\r\n        public ArraySlice Storage { get; }\r\n        public Vector(ArraySlice storage)\r\n        {\r\n            this.Storage = storage;\r\n        }\r\n    }\r\n    class Matrix\r\n    {\r\n        public Array2D Storage { get; }\r\n\r\n        public Matrix(Array2D storage)\r\n        {\r\n            this.Storage = storage;\r\n        }\r\n        public Vector GetDiagonal(int index)\r\n        {\r\n            ArraySlice storage = this.Storage.Diagonal(index);\r\n            return new Vector(storage);\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var A = new Matrix(new Array2D(0, 4));\r\n            var d = A.GetDiagonal(0);\r\n            Console.WriteLine(\"Expected: 0:5\");\r\n            Console.WriteLine(\"Actual: {0}:{1}\", d.Storage.Offset, d.Storage.Stride);\r\n        }\r\n    }\r\n}\r\n```\r\ncc @dotnet/jit-contrib \r\n"},{"Id":"7162068155","Type":"IssuesEvent","CreatedAt":"2018-01-28T20:11:28","Actor":"AlekseyTs","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16064","RelatedDescription":"Opened issue \"MethodTableBuilder::HasDefaultInterfaceImplementation hangs when an interface implements methods from two different base interfaces\" (#16064) at dotnet/coreclr","RelatedBody":"The scenario used to work as expected with 2.1.0-dev-di-25326-0 package, about 50 existing C# compiler unit-tests are broken because of that.\r\n\r\nCompile and run the following C# code (IL is below):\r\n```\r\npublic interface I2\r\n{\r\n    void M1(); \r\n}\r\n\r\npublic interface I4\r\n{\r\n    void M1(); \r\n}\r\n\r\npublic interface I1 : I2, I4\r\n{\r\n    void I2.M1() \r\n    {\r\n        System.Console.WriteLine(\"I2.M1\");\r\n    }\r\n    void I4.M1() \r\n    {\r\n        System.Console.WriteLine(\"I4.M1\");\r\n    }\r\n}\r\n\r\nclass Test1 : I1\r\n{\r\n    static void Main()\r\n    {\r\n        I2 i2 = new Test1();\r\n        i2.M1();\r\n        I4 i4 = new Test1();\r\n        i4.M1();\r\n    }\r\n}\r\n```\r\n\r\nExpected output:\r\n```\r\nI2.M1\r\nI4.M1\r\n```\r\n\r\nObserved:\r\nExecution hangs \r\n```\r\n0:000> k\r\n # Child-SP          RetAddr           Call Site\r\n00 (Inline Function) --------`-------- coreclr!RelativePointer<MethodDesc *>::GetValueMaybeNull [e:\\a\\_work\\1592\\s\\src\\inc\\fixuppointer.h @ 94] \r\n01 (Inline Function) --------`-------- coreclr!RelativePointer<MethodDesc *>::GetValueMaybeNullAtPtr [e:\\a\\_work\\1592\\s\\src\\inc\\fixuppointer.h @ 116] \r\n02 00000053`aa20c100 00007ffa`7fc050b9 coreclr!MethodImpl::GetMethodDesc+0x1d [e:\\a\\_work\\1592\\s\\src\\vm\\methodimpl.cpp @ 92] \r\n03 (Inline Function) --------`-------- coreclr!MethodImpl::Iterator::GetMethodDesc+0x10 [e:\\a\\_work\\1592\\s\\src\\vm\\methodimpl.h @ 50] \r\n04 00000053`aa20c130 00007ffa`7facab27 coreclr!MethodTableBuilder::HasDefaultInterfaceImplementation+0x159 [e:\\a\\_work\\1592\\s\\src\\vm\\methodtablebuilder.cpp @ 10735] \r\n05 00000053`aa20c1b0 00007ffa`7f9bf787 coreclr!MethodTableBuilder::VerifyVirtualMethodsImplemented+0x10d36b [e:\\a\\_work\\1592\\s\\src\\vm\\methodtablebuilder.cpp @ 10823] \r\n06 00000053`aa20c250 00007ffa`7f9cb564 coreclr!MethodTableBuilder::SetupMethodTable2+0x1ec7 [e:\\a\\_work\\1592\\s\\src\\vm\\methodtablebuilder.cpp @ 10611] \r\n07 00000053`aa20c790 00007ffa`7f9b7be6 coreclr!MethodTableBuilder::BuildMethodTableThrowing+0x3084 [e:\\a\\_work\\1592\\s\\src\\vm\\methodtablebuilder.cpp @ 1839] \r\n08 00000053`aa20cd10 00007ffa`7f99e60f coreclr!ClassLoader::CreateTypeHandleForTypeDefThrowing+0x4e6 [e:\\a\\_work\\1592\\s\\src\\vm\\methodtablebuilder.cpp @ 12095] \r\n09 00000053`aa20d020 00007ffa`7f99f4d8 coreclr!ClassLoader::CreateTypeHandleForTypeKey+0x6f [e:\\a\\_work\\1592\\s\\src\\vm\\clsload.cpp @ 3589] \r\n0a 00000053`aa20d120 00007ffa`7f9a0e64 coreclr!ClassLoader::DoIncrementalLoad+0x88 [e:\\a\\_work\\1592\\s\\src\\vm\\clsload.cpp @ 3517] \r\n0b 00000053`aa20d450 00007ffa`7f9a1f5a coreclr!ClassLoader::LoadTypeHandleForTypeKey_Body+0xa84 [e:\\a\\_work\\1592\\s\\src\\vm\\clsload.cpp @ 4325] \r\n0c 00000053`aa20d9b0 00007ffa`7f964d0d coreclr!ClassLoader::LoadTypeHandleForTypeKey+0x9a [e:\\a\\_work\\1592\\s\\src\\vm\\clsload.cpp @ 4044] \r\n0d 00000053`aa20da50 00007ffa`7f94874b coreclr!ClassLoader::LoadTypeDefThrowing+0x21d [e:\\a\\_work\\1592\\s\\src\\vm\\clsload.cpp @ 2887] \r\n0e 00000053`aa20dba0 00007ffa`7f9bca1d coreclr!ClassLoader::LoadTypeDefOrRefThrowing+0x41b [e:\\a\\_work\\1592\\s\\src\\vm\\clsload.cpp @ 3065] \r\n0f 00000053`aa20dcf0 00007ffa`7f9bd11a coreclr!Assembly::GetEntryPoint+0x1a1 [e:\\a\\_work\\1592\\s\\src\\vm\\assembly.cpp @ 1918] \r\n10 00000053`aa20e200 00007ffa`7f95d058 coreclr!Assembly::ExecuteMainMethod+0x92 [e:\\a\\_work\\1592\\s\\src\\vm\\assembly.cpp @ 1792] \r\n11 00000053`aa20e4e0 00007ffa`7fa4606e coreclr!CorHost2::ExecuteAssembly+0x188 [e:\\a\\_work\\1592\\s\\src\\vm\\corhost.cpp @ 482] \r\n12 00000053`aa20e5f0 00007ffa`9dfede29 coreclr!coreclr_execute_assembly+0xde [e:\\a\\_work\\1592\\s\\src\\dlls\\mscoree\\unixinterface.cpp @ 407] \r\n13 00000053`aa20e680 00007ffa`9dfee4f4 hostpolicy!corehost_unload+0x12179\r\n14 00000053`aa20ec40 00007ffa`a8aebca5 hostpolicy!corehost_main+0x164\r\n15 00000053`aa20edc0 00007ffa`a8af427d hostfxr+0x1bca5\r\n16 00000053`aa20ee90 00007ffa`a8af3234 hostfxr!hostfxr_resolve_sdk+0x837d\r\n17 00000053`aa20f5e0 00007ffa`a8af0809 hostfxr!hostfxr_resolve_sdk+0x7334\r\n18 00000053`aa20f770 00007ff7`0d0c9b52 hostfxr!hostfxr_resolve_sdk+0x4909\r\n19 00000053`aa20f900 00007ff7`0d0ce229 dotnet+0x9b52\r\n1a 00000053`aa20fa10 00007ffa`b02913d2 dotnet+0xe229\r\n1b 00000053`aa20fa50 00007ffa`b2c154f4 KERNEL32!BaseThreadInitThunk+0x22 [d:\\9147\\base\\win32\\client\\thread.c @ 78] \r\n1c 00000053`aa20fa80 00000000`00000000 ntdll!RtlUserThreadStart+0x34 [d:\\blue\\minkernel\\ntdll\\rtlstrt.c @ 1026] \r\n```\r\n\r\nIL:\r\n```\r\n\r\n//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.6.1055.0\r\n//  Copyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n\r\n\r\n// Metadata version: v4.0.30319\r\n.assembly extern mscorlib\r\n{\r\n  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\\V.4..\r\n  .ver 4:0:0:0\r\n}\r\n.assembly debug\r\n{\r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) \r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx\r\n                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.\r\n\r\n  // --- The following custom attribute is added automatically, do not uncomment -------\r\n  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) \r\n\r\n  .hash algorithm 0x00008004\r\n  .ver 0:0:0:0\r\n}\r\n.module debug.exe\r\n// MVID: {DBA9D405-16A7-47FD-AEBC-05C48DC5F509}\r\n.imagebase 0x00400000\r\n.file alignment 0x00000200\r\n.stackreserve 0x00100000\r\n.subsystem 0x0003       // WINDOWS_CUI\r\n.corflags 0x00000001    //  ILONLY\r\n// Image base: 0x01620000\r\n\r\n\r\n// =============== CLASS MEMBERS DECLARATION ===================\r\n\r\n.class interface public abstract auto ansi I2\r\n{\r\n  .method public hidebysig newslot abstract virtual \r\n          instance void  M1() cil managed\r\n  {\r\n  } // end of method I2::M1\r\n\r\n} // end of class I2\r\n\r\n.class interface public abstract auto ansi I4\r\n{\r\n  .method public hidebysig newslot abstract virtual \r\n          instance void  M1() cil managed\r\n  {\r\n  } // end of method I4::M1\r\n\r\n} // end of class I4\r\n\r\n.class interface public abstract auto ansi I1\r\n       implements I2,\r\n                  I4\r\n{\r\n  .method private hidebysig virtual final \r\n          instance void  I2.M1() cil managed\r\n  {\r\n    .override I2::M1\r\n    // Code size       13 (0xd)\r\n    .maxstack  8\r\n    IL_0000:  nop\r\n    IL_0001:  ldstr      \"I2.M1\"\r\n    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)\r\n    IL_000b:  nop\r\n    IL_000c:  ret\r\n  } // end of method I1::I2.M1\r\n\r\n  .method private hidebysig virtual final \r\n          instance void  I4.M1() cil managed\r\n  {\r\n    .override I4::M1\r\n    // Code size       13 (0xd)\r\n    .maxstack  8\r\n    IL_0000:  nop\r\n    IL_0001:  ldstr      \"I4.M1\"\r\n    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)\r\n    IL_000b:  nop\r\n    IL_000c:  ret\r\n  } // end of method I1::I4.M1\r\n\r\n} // end of class I1\r\n\r\n.class private auto ansi beforefieldinit Test1\r\n       extends [mscorlib]System.Object\r\n       implements I1,\r\n                  I2,\r\n                  I4\r\n{\r\n  .method private hidebysig static void  Main() cil managed\r\n  {\r\n    .entrypoint\r\n    // Code size       28 (0x1c)\r\n    .maxstack  1\r\n    .locals init (class I2 V_0,\r\n             class I4 V_1)\r\n    IL_0000:  nop\r\n    IL_0001:  newobj     instance void Test1::.ctor()\r\n    IL_0006:  stloc.0\r\n    IL_0007:  ldloc.0\r\n    IL_0008:  callvirt   instance void I2::M1()\r\n    IL_000d:  nop\r\n    IL_000e:  newobj     instance void Test1::.ctor()\r\n    IL_0013:  stloc.1\r\n    IL_0014:  ldloc.1\r\n    IL_0015:  callvirt   instance void I4::M1()\r\n    IL_001a:  nop\r\n    IL_001b:  ret\r\n  } // end of method Test1::Main\r\n\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void  .ctor() cil managed\r\n  {\r\n    // Code size       8 (0x8)\r\n    .maxstack  8\r\n    IL_0000:  ldarg.0\r\n    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()\r\n    IL_0006:  nop\r\n    IL_0007:  ret\r\n  } // end of method Test1::.ctor\r\n\r\n} // end of class Test1\r\n\r\n\r\n// =============================================================\r\n\r\n// *********** DISASSEMBLY COMPLETE ***********************\r\n```\r\n"},{"Id":"7161944574","Type":"PullRequestEvent","CreatedAt":"2018-01-28T18:58:59","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16058","RelatedDescription":"Merged pull request \"Improve Interlocked.Exchange<T>\" (#16058) at dotnet/coreclr","RelatedBody":"Replace `TypedReference` with `Unsafe.As`, it generates far less code and, with the help of `AggresiveInlining`, it allows `Exchange<T>` to inline.\r\n\r\nFixes #16051\r\n"},{"Id":"7161944566","Type":"IssuesEvent","CreatedAt":"2018-01-28T18:58:59","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16051","RelatedDescription":"Closed issue \"Interlocked.Exchange<T> is slower than Interlocked.CompareExchange<T>\" (#16051) at dotnet/coreclr","RelatedBody":"See this SO: https://stackoverflow.com/questions/48470081/interlocked-exchange-slower-than-interlocked-compareexchange\r\n\r\nLong story short, microbenchmarking `Interlocked.Exchange<T>` against `Interlocked.CompareExchange<T>` shows that the former is quite a bit slower, apparently `CompareExchange<T>` has an optimization that could also be applied to `Exchange<T>`.\r\n\r\nThe performance difference does not show with other overloads (e.g. `Exchange<T>` vs. `CompareExchange<int>`)"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7162819639","Type":"PullRequestEvent","CreatedAt":"2018-01-29T03:07:07","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8494","RelatedDescription":"Opened pull request \"use stronger type, replace string with FilePath\" (#8494) at dotnet/cli","RelatedBody":""},{"Id":"7162361515","Type":"IssuesEvent","CreatedAt":"2018-01-28T23:01:21","Actor":"tintoy","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8493","RelatedDescription":"Opened issue \"Machine-parseable output format for \"dotnet --info\"?\" (#8493) at dotnet/cli","RelatedBody":"Hi.\r\n\r\nApologies if this has been covered before - I tried searching but, of course, `dotnet --info` is part of the issue template and so appears in pretty much _every_ issue :)\r\n\r\nThe most reliable (especially WRT cross-platform) way I've found to determine the location and version of the current .NET SDK / Runtime is to run `dotnet --info` and [parse the resulting output](https://github.com/tintoy/msbuild-project-tools-server/blob/725fa0b702f50cf3f8e92fbca421fad5e9c4ef8c/src/LanguageServer.Common/Utilities/DotNetRuntimeInfo.cs#L35-L113). I guess I'm a little worried that the output format is going to change at some point, and so I was wondering if you might be interested in offering an additional switch (e.g. `--json`) that would output this in JSON format to make it easier to parse. I had to work out how to do this a long time ago, so there may be a better way to detect the \"current\" .NET Core SDK information but if there isn't then this would probably be quite useful.\r\n\r\nFWIW, the thing I like about running `dotnet --info` to obtain this information is that it's much more likely to be consistent with the information used by the rest of the CLI tooling."},{"Id":"7161576420","Type":"IssuesEvent","CreatedAt":"2018-01-28T15:24:22","Actor":"dasMulli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8492","RelatedDescription":"Opened issue \"Tool management experience - update, list, uninstall\" (#8492) at dotnet/cli","RelatedBody":"Since `dotnet install tool -g` allows installing commands, there should be additional commands to manage the installed tools.\r\n\r\nThis includes:\r\n* Listing installed tool packages and command names they provide.\r\n* Updating tools (one specific or all)\r\n* Listing outdated tools (could as well be update with a \"pretend\"/\"whatif\" flag or included in a listing command)\r\n* Uninstalling tools\r\n\r\ndoes `dotnet install tool -g` record any metadata at the moment? If any of the experiences above will be enabled in future updates/previews, metadata should already have been recorded for versions that didn't provide these management experiences.\r\n\r\ncc @wli3 @livarcocc @KathleenDollard"},{"Id":"7161210839","Type":"PullRequestEvent","CreatedAt":"2018-01-28T11:30:34","Actor":"matthid","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8491","RelatedDescription":"Opened pull request \"Add support for git bash running on windows.\" (#8491) at dotnet/cli","RelatedBody":"This makes it possible to run `curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel Current` in a git bash on windows (as given in the [documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script)) \r\n\r\n"},{"Id":"7160494187","Type":"IssuesEvent","CreatedAt":"2018-01-28T01:19:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8490","RelatedDescription":"Closed issue \"asp.net mvc template app crashes with exceptions on raspian ARM\" (#8490) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n    1. create example mvc app with \"dotnet new mvc -n test\"\r\n    2. Disable HttpsRedirect comment out (//app.UseHttpsRedirection();)\r\n    3. Disable Cookie Policies comment out (//app.UseCookiePolicy();)\r\n    4. publish with \"dotnet publish -r linux-arm\" and deploy it to the raspberry pi\r\n    5. run app on raspberry device with ./test\r\n    6. place a webrequest from any browser to the server\r\n\r\n\r\n## Expected  behavior\r\nMVC Example App shows up in browser window\r\n\r\n## Actual behavior\r\n- Exceptions get thrown.\r\n\r\n- Even without modifying the example app (not deactivating https) the app is throwing exceptions on requests.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nProduct Information:\r\nVersion: 2.2.0-preview1-007947\r\nCommit SHA-1 hash: e8f7ddd01b\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.10586\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.2.0-previe\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\nVersion : 2.1.0-preview1-26116-04\r\nBuild : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n\r\n\r\n\r\n[Exception.log](https://github.com/dotnet/cli/files/1670022/Exception.log)\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7159717258","Type":"PullRequestEvent","CreatedAt":"2018-01-27T16:48:11","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/634","RelatedDescription":"Opened pull request \"Add MarshallAs attributes to IStream\" (#634) at dotnet/standard","RelatedBody":"Upon further testing I realized that my previous IStream fix was insufficient. This adds back the required 'MarshalAs' attributes to finish the scenario."},{"Id":"7158290796","Type":"PullRequestEvent","CreatedAt":"2018-01-26T23:43:37","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/631","RelatedDescription":"Merged pull request \"Fix marshalling declarations of System.Runtime.InteropServices.ComTypes.IStream in netstandard reference dll\" (#631) at dotnet/standard","RelatedBody":"The IStream definition in contract definition of System.Runtime.InteropServices.ComTypes had incorrect marshalling declarations which meant that COM marshalling generator tools would output incorrect code.\r\n\r\nThis corrects the definition.\r\n\r\nNote: There are other types in the ComTypes namespace that also have incorrect marshalling. But from what I could tell, none of them looked like they would be relevant in X-Plat scenarios, and fixing them was somewhat involved and I didn't have a good way to test them. So I left them alone."},{"Id":"7157638186","Type":"PullRequestEvent","CreatedAt":"2018-01-26T20:39:30","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/633","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02426-04 (master)\" (#633) at dotnet/standard","RelatedBody":""},{"Id":"7157065182","Type":"IssuesEvent","CreatedAt":"2018-01-26T18:31:36","Actor":"mquelcutti","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/632","RelatedDescription":"Opened issue \"DataAnnotaions in .net core misbehaving\" (#632) at dotnet/standard","RelatedBody":"Hi the range for dataannotaions does not seem to work or the (0) for the display attib correctly if you put in range of 1 250 it always errors after you enter any chars. Additionally if you try to use the {0} {1} {2} the param (0) never shows the display attrib. The {0] is puling in min length and {1) max length and you cant get the display name  eg \r\n\r\n      [Required(ErrorMessage =\"{0} is required\")]\r\n\r\n        [Display(Name = \"Message\")]\r\n\r\n        [Range(1,250, ErrorMessage = \"{0) should be between {1} and {2}\")]\r\n\r\n        public string Message { get; set; }\r\n\r\nas you type in the text area and tab off it errors with \r\n\r\n1 should be between 250 and {2}:\r\n\r\nbut i would expect is 'Message should be between 1 and 250'\r\n\r\nbut only error if nothing is in the text area and or max has exceed not if the range of text is correct\r\n\r\nEdit (0)"},{"Id":"7156541792","Type":"PullRequestEvent","CreatedAt":"2018-01-26T16:37:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/630","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02425-02 (master)\" (#630) at dotnet/standard","RelatedBody":""},{"Id":"7154108089","Type":"PullRequestEvent","CreatedAt":"2018-01-26T06:36:12","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/631","RelatedDescription":"Opened pull request \"Fix marshalling declarations of System.Runtime.InteropServices.ComTypes.IStream in netstandard reference dll\" (#631) at dotnet/standard","RelatedBody":"The IStream definition in contract definition of System.Runtime.InteropServices.ComTypes had incorrect marshalling declarations which meant that COM marshalling generator tools would output incorrect code.\r\n\r\nThis corrects the definition.\r\n\r\nNote: There are other types in the ComTypes namespace that also have incorrect marshalling. But from what I could tell, none of them looked like they would be relevant in X-Plat scenarios, and fixing them was somewhat involved and I didn't have a good way to test them. So I left them alone."},{"Id":"7151351258","Type":"PullRequestEvent","CreatedAt":"2018-01-25T17:13:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/630","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02425-01 (master)\" (#630) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7163027536","Type":"PullRequestEvent","CreatedAt":"2018-01-29T04:41:49","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26534","RelatedDescription":"Merged pull request \"Remove skeletal caching from ExprVisitorBase in Microsoft.CSharp\" (#26534) at dotnet/corefx","RelatedBody":"Methods exist to build caching layer out of, but without actually implementing it. Any such cache would almost never have a cache hit, so remove it."},{"Id":"7162930745","Type":"PullRequestEvent","CreatedAt":"2018-01-29T03:55:31","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26491","RelatedDescription":"Merged pull request \"Remove orphaned methods from Microsoft.CSharp\" (#26491) at dotnet/corefx","RelatedBody":"Remove some methods that are unused due to their call sites being removed by other dead-code removal. The sort of completely-dead code that would be identified in #17905 if the reports for that were run again.\r\n\r\nThe first couple of commits here make use of methods that aren't being used, but were using them makes an improvement, and a further refactoring that doing that suggested, the last is just simple removal of methods that are never called.\r\n\r\n* Switch on `MethodSymbol.MethKind` instead of repeated tests.\r\n\r\nAnd make it a property.\r\n\r\n* Make `isConversionOperator` an assertion and remove `isExplicit`\r\n\r\n`isExplicit` is only used to assert the symbol is a conversion, so make the method itself an assertion property.\r\n\r\n* Use binary `MethWithType` ctor\r\n\r\nRather than the nullary, only to set properties.\r\n\r\n* Make `UdConvInfo` a readonly struct\r\n\r\n* Remove orphaned methods."},{"Id":"7162907195","Type":"PullRequestEvent","CreatedAt":"2018-01-29T03:45:06","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26489","RelatedDescription":"Merged pull request \"Refactor Microsoft.CSharp's SubstContext\" (#26489) at dotnet/corefx","RelatedBody":"* Remove `SubstTypeFlags.NoRefOutDifference`\r\n\r\nLooked for, but never set.\r\n\r\n* Remove `SubstTypeFlags.DenormClass`\r\n\r\nLooked for, but never set.\r\n\r\n* Remove `SubstTypeFlags.Norm*`\r\n\r\nLooked for, but never set.\r\n\r\n* Remove `_stvcClass`\r\n\r\nNo longer used.\r\n\r\n* Move init into ctor and make fields readonly\r\n\r\n* Remove unused ctors\r\n\r\n* Remove counts from `SubsContext`\r\n\r\nJust get them from the arrays.\r\n\r\n* `FNop()` method to `IsNop` property\r\n\r\n* Rename context's arrays\r\n\r\nNon-Hungarian based.\r\n\r\n* Remove `SubstTypeFlags`\r\n\r\nOnly two values in use, so use boolean.\r\n\r\n* Remove `denormMeth` argument to `SubstEqualTypeArrays`\r\n\r\nAlways true\r\n\r\n* Remove most uses of context in `ErrAppendType`\r\n\r\nInstead of setting to null, just use null.\r\n"},{"Id":"7162399889","Type":"PullRequestEvent","CreatedAt":"2018-01-28T23:25:28","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25691","RelatedDescription":"Closed pull request \"Explore making state part of the find data\" (#25691) at dotnet/corefx","RelatedBody":"Making the change to put state in RawFindData as suggested by @svick on https://github.com/dotnet/designs/pull/24#issuecomment-348785224. I think this way is better- note that I haven't added state to the transform delegate before, but it is intended to have it per the spec.\r\n\r\n@svick, @danmosemsft, @terrajobst  "},{"Id":"7162377140","Type":"IssuesEvent","CreatedAt":"2018-01-28T23:10:54","Actor":"gafter","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26624","RelatedDescription":"Opened issue \"CSC doesn't care if out parameter not assigned\" (#26624) at dotnet/corefx","RelatedBody":"@carlreinke commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493)\n\n**Version Used**: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nc:\\temp>type Program.cs\r\nclass C\r\n{\r\n    static bool M( out System.ReadOnlyMemory<byte> x )\r\n    {\r\n        return false;  // No error here!?\r\n    }\r\n}\r\n\r\nc:\\temp>csc.exe /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\netstandard.dll\" /reference:C:\\Users\\User\\.nuget\\packages\\system.memory\\4.5.0-preview1-26011-01\\ref\\netstandard2.0\\System.Memory.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\System.Runtime.dll\" /out:Test.dll /target:library Program.cs\r\nMicrosoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\r\nc:\\temp>\r\n```\r\n\r\n**Expected Behavior**: Show error message and fail to compile.\r\n\r\n**Actual Behavior**: Compilation succeeds.\r\n\n\n---\n\n@gafter commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361022229)\n\nPlease check to see what fields, if any, are contained in `System.Collections.Generic.KeyValuePair` inside of `C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\System.Runtime.dll`. If it contains no fields in that reference assembly, then the compiler is correct. In that case the `out` parameter is definitely assigned because all (zero) of its fields are definitely assigned.\n\n---\n\n@gafter commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361022331)\n\nTo clarify, if that is the case then it is a bug in the reference assembly.\n\n---\n\n@carlreinke commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361023866)\n\nIndeed, there are no fields in `KeyValuePair<TKey, TValue>` in the reference assembly.  I replaced the original comment with a different example.  `ReadOnlyMemory<T>` does have fields.\n\n---\n\n@carlreinke commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361024011)\n\nErr, I guess the *reference* assembly for `ReadOnlyMemory<T>` doesn't have fields either... the assembly that gets used when it actually runs has fields; otherwise it wouldn't work.\r\n\r\nWhy are there no fields in the reference assemblies?\r\n\r\n(IntelliSense/MSBuild seem to also use the ref assembly, so when I'm building in Visual Studio, I don't get any error message about the out parameter not being assigned there either.)\n\n---\n\n@gafter commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361025653)\n\nThat is a bug. We’ll move this bug to an appropriate repository.\n\n---\n\n@tannergooding commented on [Sat Jan 27 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361025904)\n\n@gafter, I believe the issue has already been dealt with on the CoreFX side: https://github.com/dotnet/corefx/pull/26286 and https://github.com/dotnet/buildtools/pull/1859.\r\n\r\nHowever, it was only merged 15 days ago, so nothing has shipped with the fix yet.\n\n---\n\n@gafter commented on [Sun Jan 28 2018](https://github.com/dotnet/roslyn/issues/24493#issuecomment-361105192)\n\n@tannergooding I don't see anything specifically changing `KeyValuePair`'s reference assembly. Isn't its reference assembly produced based on hand-written source?\n\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7162982577","Type":"IssuesEvent","CreatedAt":"2018-01-29T04:19:53","Actor":"velociwabbit","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24503","RelatedDescription":"Opened issue \"Roslyn is acting like a selfish b___ :) \" (#24503) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2017 latest release 4.7.02556\r\n**Steps to Reproduce**:\r\n\r\n1. Virtually every single javascript.js file has this problem\r\n2. scroll down to the bottom of the file open then ctrl f to open the find window\r\n3. the system hangs for 20 seconds or more\r\n\r\n**Expected Behavior**:\r\nthat it work without delay\r\n**Actual Behavior**:\r\nthat it reminds me of  software when balmer was in charge\r\n\r\nI have reviewed this issue online and even though i am not using c++ or csharp I cannot turn of roslyn...   then the app has the unmitigated cheek to even tell me that roslyn is taking up slowing things down. And then the button to turn it off is disabled...\r\n\r\n![image](https://user-images.githubusercontent.com/9357805/35493469-701a54f2-0468-11e8-9d59-31cb2c8e86b8.png)\r\n\r\n\r\n"},{"Id":"7162823654","Type":"IssuesEvent","CreatedAt":"2018-01-29T03:08:52","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24233","RelatedDescription":"Closed issue \"SIMD 64 Bit Memory-Alignment Bug\" (#24233) at dotnet/roslyn","RelatedBody":"**Version Used**: .NET 4.7.1 C# 7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install engenious via nuget or wrote your own packed Vector3 or use a other packed Vector3\r\n2. Cast with pointer to System.Numerics.Vector3 or own unpacked Vector3\r\n3.  Just do the same thing, just put the pointer in a variable before it.\r\n4. Compare the results\r\n\r\n**A brief example:**\r\n\r\nC#-Code:\r\n\r\n````CSharp\r\n        static unsafe void Test()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var a = *(Numerics.Vector3*)(&value);\r\n        }\r\n\r\n        static unsafe void TestB()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var d = &value;\r\n            var a = *(Numerics.Vector3*)d;\r\n        }\r\n````\r\n\r\nIL-Code:\r\n\r\n````CIL\r\n                 .method private hidebysig static \r\n\t\t\tvoid Test () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2144\r\n\t\t\t// Code size 33 (0x21)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_001f: stloc.1\r\n\t\t\tIL_0020: ret\r\n\t\t} // end of method Program::Test\r\n\r\n\t\t.method private hidebysig static \r\n\t\t\tvoid TestB () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2174\r\n\t\t\t// Code size 35 (0x23)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [engenious]engenious.Vector3* d,\r\n\t\t\t\t[2] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: stloc.1\r\n\t\t\tIL_001b: ldloc.1\r\n\t\t\tIL_001c: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_0021: stloc.2\r\n\t\t\tIL_0022: ret\r\n\t\t} // end of method Program::TestB\r\n````\r\n\r\n**Expected Behavior**: Both methods should produce the same result on all systems.\r\n\r\nMethod Test: a should be <0. 0. -41>\r\nMethod TestB: a should be <0. 0. -41>\r\n\r\n**Actual Behavior**: When you cast a packed vector into an unpacked vector, the result will always be a zero vector on some computers with 64 Bit and the use of a direct assignment.\r\n\r\nMethod TestB works on all systems no matter if 32 Bit or 64 Bit.\r\nMethod Test does not work as 64 bit version on some systems. Could this be related to the CPU used?\r\n\r\nMy Results compiled as 64 Bit:\r\n\r\nMethod Test: a is <0. 0. 0>\r\nMetod TestB: a is <0. 0. -41>\r\n\r\nOn my PC, Method Test doesn't work. My CPU is Intel i7-5960X.\r\n\r\nThe only difference in CIL are the following lines:\r\n\r\nIL_001a: stloc.1\r\nIL_001b: ldloc.1"},{"Id":"7162818513","Type":"IssuesEvent","CreatedAt":"2018-01-29T03:06:36","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24470","RelatedDescription":"Closed issue \"Clarity on the design process for VB and C#\" (#24470) at dotnet/roslyn","RelatedBody":"Both the VB and C# language repositories have a read me document that outlines the process for language features. I've extracted out two sections that I think did further clarity.\r\n\r\n>3. A prototype owner (who may or may not be proposal owner) should implement a prototype in their own fork of the Roslyn repo and share it with the design team and community for feedback. A prototype must meet the following bar:\r\n>\r\n> * Parsing (if applicable) should be resilient to experimentation--typing should not cause crashes.\r\n> * Include minimal tests demonstrating the feature at work end-to-end.\r\n> * Include minimal IDE support (keyword coloring, formatting, completion).\r\n>\r\n>4. Once a prototype has proven out the proposal and the proposal has been approved-in-principle by the design team, a feature owner (who may or may not be proposal or prototype owner(s)) implemented in a feature branch of the Roslyn repo. The bar for implementation quality can be found here.\r\n\r\nEspecially the following part of `3` \r\n > share it with the design team and community for feedback\r\n\r\nHow can they share it with the design team and community for feedback?\r\nSubmitting a PR to the Roslyn repo, seems to go against section 4. \r\nFeedback could be a useful especially if the need eyes and helping hands of their communities to overcome tricky parts. They may just be out of reach for the current level of knowledge. \r\n\r\n"},{"Id":"7162528806","Type":"PullRequestEvent","CreatedAt":"2018-01-29T00:48:33","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24502","RelatedDescription":"Opened pull request \"WIP: editor completion\" (#24502) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7162377148","Type":"IssuesEvent","CreatedAt":"2018-01-28T23:10:54","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24493","RelatedDescription":"Closed issue \"CSC doesn't care if out parameter not assigned\" (#24493) at dotnet/roslyn","RelatedBody":"**Version Used**: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nc:\\temp>type Program.cs\r\nclass C\r\n{\r\n    static bool M( out System.ReadOnlyMemory<byte> x )\r\n    {\r\n        return false;  // No error here!?\r\n    }\r\n}\r\n\r\nc:\\temp>csc.exe /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\netstandard.dll\" /reference:C:\\Users\\User\\.nuget\\packages\\system.memory\\4.5.0-preview1-26011-01\\ref\\netstandard2.0\\System.Memory.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\System.Runtime.dll\" /out:Test.dll /target:library Program.cs\r\nMicrosoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\r\nc:\\temp>\r\n```\r\n\r\n**Expected Behavior**: Show error message and fail to compile.\r\n\r\n**Actual Behavior**: Compilation succeeds.\r\n"},{"Id":"7162295812","Type":"IssuesEvent","CreatedAt":"2018-01-28T22:21:58","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24501","RelatedDescription":"Closed issue \"Completion on array declaration should not offer \"nameof\"\" (#24501) at dotnet/roslyn","RelatedBody":"![image](https://user-images.githubusercontent.com/12466233/35487875-c8c857f8-0435-11e8-96cc-b0e8ac05bc93.png)\r\n\r\nRemoving \"nameof\" hopefully will bring \"new\" to the top, but I'm not certain."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7163045208","Type":"PullRequestEvent","CreatedAt":"2018-01-29T04:50:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5302","RelatedDescription":"Opened pull request \"Fix ProjectN build break\" (#5302) at dotnet/corert","RelatedBody":""},{"Id":"7162956263","Type":"IssuesEvent","CreatedAt":"2018-01-29T04:07:02","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4546","RelatedDescription":"Closed issue \"Implement ldlen opcode\" (#4546) at dotnet/corert","RelatedBody":"Implement the ldlen opcode, which loads the length of an array. The method to fill in is:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L1108\r\n\r\nThis may depend on #4540 for testing."},{"Id":"7162948546","Type":"PullRequestEvent","CreatedAt":"2018-01-29T04:03:40","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5172","RelatedDescription":"Merged pull request \"Implemented Array instructions for WebAssembly\" (#5172) at dotnet/corert","RelatedBody":"Fix #4547, #4546, #4545, #4544, #4540 \r\nThis depends on #5143 + some modifications on top of that to unify the native callable method name/MethodDesc. I was hoping to get the review started.\r\n\r\nThis is a little bit bigger than I was hoping for, I wanted to make 3 pull requests (Array instructions, managed runtime allocation (not pinvoke), managed runtime boxing) but they all ended up depending on each other.  \r\n\r\nI'm not entirely certain that I'm doing the internal calling convention stuff right, and I ended up having to ensure only one MethodDesc is ever used for pinvoked methods.\r\n"},{"Id":"7162397215","Type":"PullRequestEvent","CreatedAt":"2018-01-28T23:23:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5301","RelatedDescription":"Merged pull request \"Port dotnet/coreclr#15902 and dotnet/coreclr#15938 - Cache Invariant CompareInfo\" (#5301) at dotnet/corert","RelatedBody":"- Cache Invariant CompareInfo\r\n\r\nThe Invariant CompareInfo is used in number of places. It is fetched via virtual method on CultureInfo. Caching it avoids the virtual method calls and extra indirections.\r\n\r\n- Break current culture initialization cycle"},{"Id":"7162117190","Type":"PullRequestEvent","CreatedAt":"2018-01-28T20:39:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5301","RelatedDescription":"Opened pull request \"Port dotnet/coreclr#15902 and dotnet/coreclr#15938 - Cache Invariant CompareInfo\" (#5301) at dotnet/corert","RelatedBody":"- Cache Invariant CompareInfo\r\n\r\nThe Invariant CompareInfo is used in number of places. It is fetched via virtual method on CultureInfo. Caching it avoids the virtual method calls and extra indirections.\r\n\r\n- Break current culture initialization cycle"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7158839453","Type":"IssuesEvent","CreatedAt":"2018-01-27T05:28:49","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1453","RelatedDescription":"Closed issue \"GetFileDependsOnNETStandard holds handles to assemblies after it returns\" (#1453) at dotnet/sdk","RelatedBody":"I believe this is the root cause of https://github.com/NuGet/Home/issues/5609.\r\n\r\nI've been looking at this with @mishra14. \r\n\r\nIt appears that [GetFileDependsOnNETStandard](https://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/GetDependsOnNETStandard.netstandard.cs#L14), introduced to support .NET Standard 2.0 in VS 15.3, holds locks on files longer than it should.\r\n\r\nIt [appears](https://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/GetDependsOnNETStandard.net46.cs#L130) to close the handle to the files it's inspecting, but we can observe through the debugger that they don't get closed immediately--stepping over that line and running a `handle.exe` search shows the handle still open.\r\n\r\nWhen `devenv.exe` is started from an environment with `set ImplicitlyExpandNETStandardFacades=false`, project creation succeeds. That property [disables calling `GetDependsOnNETStandard`](https://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/msbuildExtensions/Microsoft/Microsoft.NET.Build.Extensions/Microsoft.NET.Build.Extensions.NETFramework.targets#L24)."},{"Id":"7158828091","Type":"IssuesEvent","CreatedAt":"2018-01-27T05:18:28","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1554","RelatedDescription":"Closed issue \"InvalidOperationException: Cannot find compilation library location for package\" (#1554) at dotnet/sdk","RelatedBody":"I am working on asp.net core 2.0  and stuck on above issue .i have added class library using services.AddMvc().AddApplicationPart  and return view from class library project\r\n\r\n\r\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List<string> assemblies)\r\n\r\n\r\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart+<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n\r\n\r\nSystem.Linq.Enumerable+SelectManySingleSelectorIterator.MoveNext()\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable<ApplicationPart> parts, MetadataReferenceFeature feature)\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature<TFeature>(TFeature feature)\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n\r\n\r\n"},{"Id":"7158820546","Type":"IssuesEvent","CreatedAt":"2018-01-27T05:11:33","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1906","RelatedDescription":"Closed issue \".NET Core can't build AnyCPU exes\" (#1906) at dotnet/sdk","RelatedBody":"(I may be misunderstanding how things are supposed to work here; apologies if this is more of a question than a bug.)\r\n\r\nConsider the following project file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net47</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n    <RuntimeIdentifier>win</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis project builds/runs correctly and generates an AnyCPU exe. Now change the target framework to .NET Core:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n    <RuntimeIdentifier>win</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis project generates a build error:\r\nProject is targeting runtime 'win' but did not resolve any runtime-specific packages for the 'Microsoft.NETCore.App' package.  This runtime may not be supported by .NET Core.\r\n\r\nIf RuntimeIdentifier is win-x86 or win-x64, it builds, but at publish time I suspect (though couldn't confirm) that the assemblies it generates are not AnyCPU, even though the Platform in the project file was explicitly AnyCPU.\r\n\r\nI believe .NET Core still supports AnyCPU for DLLs. But does it really support AnyCPU for EXEs? It looks like today there isn't a clear answer - you can say you're building an AnyCPU exe, but you don't actually get an exe unless you do publish on a Self-Contained Deployment by using a RuntimeIdentifier, and no AnyCPU RuntimeIdentifier (aka just \"win\"?) is currently supported.\r\n\r\nHow should this work? Should .NET Core allow creating AnyCPU EXEs? If not, should the build generate an error when OutputType=Exe and Platform=AnyCPU?"},{"Id":"7158811038","Type":"PullRequestEvent","CreatedAt":"2018-01-27T05:02:58","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1908","RelatedDescription":"Opened pull request \"Update CLI version to 2.1.100-preview-007341\" (#1908) at dotnet/sdk","RelatedBody":"We need the new CLI so that we can take the matching NuGet on the SDK side."},{"Id":"7158805756","Type":"PullRequestEvent","CreatedAt":"2018-01-27T04:58:42","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1893","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-rtm-4859 into sdk\" (#1893) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4859 into sdk release/2.1.1xx branch"},{"Id":"7158805019","Type":"PullRequestEvent","CreatedAt":"2018-01-27T04:58:06","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1902","RelatedDescription":"Merged pull request \"Adding the Runtime Identifier and PlatformTarget to the error message\" (#1902) at dotnet/sdk","RelatedBody":"Adding the Runtime Identifier and PlatformTarget to the error message for when they don't match.\r\n\r\nFixes https://github.com/dotnet/sdk/issues/1616"},{"Id":"7158805017","Type":"IssuesEvent","CreatedAt":"2018-01-27T04:58:06","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1616","RelatedDescription":"Closed issue \"CheckForMismatchingPlatform should log the RuntimeIdentifier and PlatformTarget on error\" (#1616) at dotnet/sdk","RelatedBody":"I've run into a situation where I get this error:\r\n\r\n`  /home/eerhardt/git/source-build/src/vstest/tools/dotnet/sdk/2.0.0-preview3-006845/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.RuntimeIdentifierInference.targets(125,5): error : The RuntimeIdentifier platform and the PlatformTarget must match. [/home/eerhardt/git/source-build/src/vstest/src/testhost.x86/testhost.x86.csproj] [/home/eerhardt/git/source-build/targets/repository.proj]\r\n `\r\n\r\nThis is coming from this code:\r\n\r\nhttps://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.RuntimeIdentifierInference.targets#L121-L128\r\n\r\nIt would be helpful if this error would log what the `$(RuntimeIdentifier)` and `$(PlatformTarget)` values where, in order to help users debug what went wrong in their builds."},{"Id":"7158804717","Type":"PullRequestEvent","CreatedAt":"2018-01-27T04:57:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1892","RelatedDescription":"Merged pull request \"Updating the branding to 2.1.100, to match the CLIs branding.\" (#1892) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-01-29T05:30:20.8551983Z","RunDurationInMilliseconds":7595}