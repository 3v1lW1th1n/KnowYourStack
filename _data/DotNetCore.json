{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7241836467","Type":"PullRequestEvent","CreatedAt":"2018-02-14T03:44:35","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16379","RelatedDescription":"Opened pull request \"Add ReadOnlySpan string-like ToLower/ToUpper API with globalization support\" (#16379) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138\r\n\r\n- ToLower\r\n- ToLowerInvariant\r\n- ToUpper\r\n- ToUpperInvariant\r\n\r\n**TODO:**\r\n- Add the allocating counterpart for slow span in corefx and add tests there.\r\n\r\nRelated corefx PR: TODO\r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne "},{"Id":"7241761743","Type":"PullRequestEvent","CreatedAt":"2018-02-14T03:12:35","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16378","RelatedDescription":"Opened pull request \"Simplify test dependencies for benchmarks\" (#16378) at dotnet/coreclr","RelatedBody":"Remove the special benchmark configs and update benchmark projects accordingly.\r\nAlso update other random projects that were referencing benchmark configs.\r\n\r\nBenchmarks now build against netstandard 2.0.\r\n\r\nAddresses #14124, #16126."},{"Id":"7241625170","Type":"PullRequestEvent","CreatedAt":"2018-02-14T02:18:47","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16223","RelatedDescription":"Merged pull request \"Add ReadOnlySpan string-like StartsWith and EndsWith API with globalization support\" (#16223) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138\r\n\r\n- StartsWith\r\n- EndsWith\r\n\r\n**TODO:**\r\n- ~Add the allocating counterpart for slow span in corefx and~ ~add tests there.~\r\n- OrdinalComparison will be implemented once we get all MemoryExtensions available in core (see https://github.com/dotnet/corefx/issues/25182).\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/26880\r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne "},{"Id":"7241560225","Type":"IssuesEvent","CreatedAt":"2018-02-14T01:55:11","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16377","RelatedDescription":"Opened issue \"Test failure in CI: Assertion failed in System.Tests.ValueTupleTests:LongTuplesWithNull()\" (#16377) at dotnet/coreclr","RelatedBody":"See https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_baseline_prtest/25/consoleFull#62222254079fe3b83-f408-404c-b9e7-9207d232e5fc from https://github.com/dotnet/coreclr/pull/16223\r\n```text\r\n17:51:12   Discovered:  System.ValueTuple.Tests\r\n17:51:13   Starting:    System.ValueTuple.Tests\r\n17:51:19   \r\n17:51:19 \r\n  Assert failure(PID 9188 [0x000023e4], Thread: 3328 [0x0d00]): Assertion failed 'varDsc->lvOnFrame && !varDsc->lvRegister' in 'System.Tests.ValueTupleTests:LongTuplesWithNull()' (IL size 741)\r\n17:51:19   \r\n17:51:19       File: d:\\j\\workspace\\x64_arm64_alt---e876825d\\src\\jit\\codegenarmarch.cpp Line: 753\r\n17:51:19       Image: D:\\j\\workspace\\x64_arm64_alt---e876825d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x64\\dotnet.exe\r\n17:51:19   \r\n17:51:19   Finished running tests.  End time=17:51:18.86, Exit code = 123456789\r\n17:51:19 D:\\j\\workspace\\x64_arm64_alt---e876825d\\_\\fx\\Tools\\tests.targets(492,5): warning MSB3073: The command \"D:\\j\\workspace\\x64_arm64_alt---e876825d\\_\\fx\\bin/tests/System.ValueTuple.Tests/netcoreapp-Windows_NT-Release-x64//RunTests.cmd D:\\j\\workspace\\x64_arm64_alt---e876825d\\_\\fx\\bin/testhost/netcoreapp-Windows_NT-Release-x64/\" exited with code 123456789. [D:\\j\\workspace\\x64_arm64_alt---e876825d\\_\\fx\\src\\System.ValueTuple\\tests\\System.ValueTuple.Tests.csproj]\r\n```"},{"Id":"7241510254","Type":"IssuesEvent","CreatedAt":"2018-02-14T01:37:28","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16376","RelatedDescription":"Opened issue \"GCStress failure: Loader\\classloader\\DefaultInterfaceMethods\\sharedgenerics\\sharedgenerics_r\" (#16376) at dotnet/coreclr","RelatedBody":"x86 checked `GCStress=4` failure in Loader\\classloader\\DefaultInterfaceMethods\\sharedgenerics\\sharedgenerics_r:\r\n\r\n```\r\ne:\\gh\\coreclr3\\bin\\tests\\Windows_NT.x86.Checked\\Loader\\classloader\\DefaultInterfaceMethods\\sharedgenerics\\sharedgenerics_r>sharedgenerics_r.cmd -coreroot e:\\gh\\coreclr3\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\nBEGIN EXECUTION\r\n \"e:\\gh\\coreclr3\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" sharedgenerics_r.exe\r\nCalling IFoo<string>.Foo on FooBar<string, object> - expecting default method IFoo<string>.Foo\r\n\r\nAssert failure(PID 28984 [0x00007138], Thread: 27232 [0x6a60]): Precondition failure: FAILED: !IsNull()\r\n\r\nCORECLR! CHECK::Trigger + 0x310 (0x0f8a944b)\r\nCORECLR! RelativePointer<Module *>::GetValue + 0x90 (0x0f912589)\r\nCORECLR! GcStackCrawlCallBack + 0x3AD (0x0fd62dbd)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x45 (0x0f9f70f0)\r\nCORECLR! Thread::StackWalkFramesEx + 0x16E (0x0f9f8789)\r\nCORECLR! Thread::StackWalkFrames + 0x16A (0x0f9f8598)\r\nCORECLR! ScanStackRoots + 0x18D (0x0fe692bb)\r\nCORECLR! GCToEEInterface::GcScanRoots + 0x118 (0x0fe68856)\r\nCORECLR! WKS::gc_heap::mark_phase + 0x1C7 (0x0fe32fd1)\r\nCORECLR! WKS::gc_heap::gc1 + 0x1A9 (0x0fe2dab8)\r\n    File: e:\\gh\\coreclr3\\src\\inc\\fixuppointer.h Line: 67\r\n    Image: e:\\gh\\coreclr3\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n\r\nExpected: 100\r\nActual: 123456789\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc/67/testReport/junit/Loader_classloader/_DefaultInterfaceMethods_sharedgenerics_sharedgenerics_r_sharedgenerics_r_/_DefaultInterfaceMethods_sharedgenerics_sharedgenerics_r_sharedgenerics_r_cmd/\r\n"},{"Id":"7241498332","Type":"IssuesEvent","CreatedAt":"2018-02-14T01:33:16","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16375","RelatedDescription":"Opened issue \"GCStress failure: test147911_cmd\" (#16375) at dotnet/coreclr","RelatedBody":"x86 checked `GCStress=C` failure:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc/67/testReport/junit/baseservices_exceptions/_regressions_Dev11_147911_test147911_test147911_/_regressions_Dev11_147911_test147911_test147911_cmd/\r\n\r\nRelated to #12522?\r\n\r\n(Also see #15883)\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7241725369","Type":"IssuesEvent","CreatedAt":"2018-02-14T02:57:41","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/2645","RelatedDescription":"Closed issue \"Cannot invoke project dependency command on a library\" (#2645) at dotnet/cli","RelatedBody":"**Update:** the error is only on libraries, not standalone. \n\n~~It looks like https://github.com/dotnet/cli/pull/2617 broke PackagedCommandSpecFactory in tools on standalone apps.~~\n## Steps to reproduce\n\nCreate a tool that invokes tries to execute a dependency command where projectContext is a netstandard **library**.\n\n``` c#\n                new ProjectDependenciesCommandFactory(\n                        projectContext.TargetFramework,\n                        Constants.DefaultConfiguration,\n                        null,\n                        null,\n                        projectContext.ProjectDirectory\n                    )\n                    .Create(\"dotnet-my-tool\", \n                            new []{\"--dispatch\", \"--verbose\"}, \n                            projectContext.TargetFramework, \n                            Constants.DefaultConfiguration)\n```\n\nRepro project: https://github.com/natemcmaster/dotnet-sample-tool/tree/issue2645. \n## Expected behavior\n\nProjectDependenciesCommandFactory should create and execute a command on the netstandard library.\n## Actual behavior\n\nOn a library project\n\n```\nRunning C:\\Users\\namc\\dev\\dotnet-sample-tool\\.dotnet\\shared\\Microsoft.NETCore.App\\1.0.0-rc2-3002476\\corehost.exe --runtimeconfig C:\\Users\\namc\\dev\\dotnet-sample-tool\\SampleLibrary\\bin\\Debug\\netstandard1.5\\SampleLibrary.runtimeconfig.json --depsfile C:\\Users\\namc\\dev\\dotnet-sample-tool\\SampleLibrary\\bin\\Debug\\netstandard1.5\\SampleLibrary.deps.json --additionalprobingpath C:\\Users\\namc\\.nuget\\packages C:\\Users\\namc\\.nuget\\packages\\dotnet-my-tool\\1.0.0-tmp1461321718.66929\\lib\\netstandard1.5\\dotnet-my-tool.dll --dispatch --verbose\nProcess ID: 55528\nCould not resolve coreclr path\n```\n## Environment data\n\nMicrosoft.DotNet.Cli.Utils/1.0.0-rc2-002476\n\n`dotnet --info` output:\n\n```\n.NET Command Line Tools (1.0.0-rc2-002476)\n\nProduct Information:\n Version:     1.0.0-rc2-002476\n Commit Sha:  1a8d393b9b\n\n```\n\nFails on windows and linux.\n\nTrace: [corehost_trace.log.txt](https://github.com/dotnet/cli/files/232360/corehost_trace.log.txt)\n\ncc @schellap @piotrpMSFT \n"},{"Id":"7241282541","Type":"PullRequestEvent","CreatedAt":"2018-02-14T00:21:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8601","RelatedDescription":"Merged pull request \"Signing nupkg contents (Cli.Utils and MSBuildResolver)\" (#8601) at dotnet/cli","RelatedBody":"Signing nupkg contents (Cli.Utils and MSBuildResolver) along with the rest of the compiled assemblies.\r\n\r\n"},{"Id":"7241281928","Type":"IssuesEvent","CreatedAt":"2018-02-14T00:21:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8603","RelatedDescription":"Opened issue \"Remove SignNupkg and SignSDKResolverContents targets\" (#8603) at dotnet/cli","RelatedBody":"We have changed our sign project to sign all assemblies together, however, we had to keep the targets above around so as not to break build definitions that still invoke them.\r\n\r\nOnce this change permeates to other branches, we can then remove the steps from the build defs and delete these empty targets.\r\n\r\nSee PR https://github.com/dotnet/cli/pull/8601"},{"Id":"7241156254","Type":"IssuesEvent","CreatedAt":"2018-02-13T23:42:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8521","RelatedDescription":"Closed issue \"Extensibility Tool search path different between Windows and Linux/OSX systems\" (#8521) at dotnet/cli","RelatedBody":"## Backstory\r\n\r\nI was aiming to write a quality of life script to help with the development of a particular project. This script (or rather the pair of scripts) would be included in the project's repository. Basically, I want a per-project based extensibility tool but in script format instead of NuGet package.\r\n\r\n## Steps to reproduce\r\n\r\n1. Write a pair of scripts `dotnet-hello.cmd` and `dotnet-hello` (contents below) and save them in the root of a project.\r\n\r\n```cmd\r\necho \"Hello World\"\r\n```\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\necho \"Hello World\"\r\n```\r\n\r\n2. Run `dotnet hello` in the project folder in on a Windows system and Linux/OSX system.\r\n\r\n## Expected  behavior\r\n\r\n`Hello World` should print in both systems\r\n\r\n## Actual behavior\r\n\r\n`Hello World` only prints on a Windows system\r\n\r\nA Linux/OSX system says `No executable found matching command \"dotnet-hello\"`\r\n\r\nThe Linux/OSX systems do not look in the CWD for extensibility tools while the Windows system does.\r\n\r\n## Environment data\r\n\r\nWindows `dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\nLinux `dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n"},{"Id":"7241128745","Type":"PullRequestEvent","CreatedAt":"2018-02-13T23:34:11","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8598","RelatedDescription":"Merged pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#8598) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7241082223","Type":"PullRequestEvent","CreatedAt":"2018-02-13T23:21:08","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8602","RelatedDescription":"Opened pull request \"Add \"PB_RESTORESOURCE\" to docker environmental variables.\" (#8602) at dotnet/cli","RelatedBody":"The \"PB_RESTORESOURCE\" value needs to be set in the internal call to 'build.sh' [see reference below]. Another way to say this is: since 'build.sh' writes a new Nuget.Config for the 'SandBox' working directory; \"PB_RESTORESOURCE\" needs to be set in the docker container.\r\n\r\nReference: https://github.com/dotnet/cli/blob/2a493c1318cc26cb68fefb3613309d14e859ef2c/build/SandBoxAndPackage.proj#L50\r\n\r\nTesting:\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1381420"},{"Id":"7240691362","Type":"PullRequestEvent","CreatedAt":"2018-02-13T21:49:58","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8597","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx to release/2.1.2xx\" (#8597) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.1xx into release/2.1.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.1xx-to-release/2.1.2xx\ngit reset --hard upstream/release/2.1.2xx\ngit merge upstream/release/2.1.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.1xx-to-release/2.1.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7240680834","Type":"PullRequestEvent","CreatedAt":"2018-02-13T21:47:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8601","RelatedDescription":"Opened pull request \"Signing nupkg contents (Cli.Utils and MSBuildResolver)\" (#8601) at dotnet/cli","RelatedBody":"Signing nupkg contents (Cli.Utils and MSBuildResolver) along with the rest of the compiled assemblies.\r\n\r\n"},{"Id":"7240633490","Type":"PullRequestEvent","CreatedAt":"2018-02-13T21:37:38","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8600","RelatedDescription":"Opened pull request \"Fix README.md for 2.1.1xx\" (#8600) at dotnet/cli","RelatedBody":"It was still pointing to 15.5 downloads\r\n"},{"Id":"7240474586","Type":"IssuesEvent","CreatedAt":"2018-02-13T21:04:29","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7690","RelatedDescription":"Closed issue \"Deploy pdb symbols for dependant assemblies from nuget packages (via PackageReference)\" (#7690) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet publish` in a project with nuget dependencies\r\n\r\n## Expected  behavior\r\nA folder with \"published\" version contains not only *.dll from nuget dependencies but *.pdb as well (they do exist in packages of cause).\r\n\r\n## Actual behavior\r\nNo pdb's deployed for package dependencies. Symbols do deployed for application itself (current project and its dependent projects) but not for nuget dependencies. While symbols exist in packages.\r\n\r\n## \r\nActually it should not make deference what dependencies I'm publishing (project or package). If symbols exist they should be published as well.\r\n\r\nProject1 \r\n  -- ProjectReference --> Project2 - symbols deployed\r\n  -- PackageReference --> Project3 - no symbols deployed\r\n\r\nAlso it would make sense to control symbols publishing for nuget dependencies via an option (for example `--include-symbols` or/and `--exclude-symbols`).\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7238206586","Type":"IssuesEvent","CreatedAt":"2018-02-13T13:54:17","Actor":"Ruud-cb","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/650","RelatedDescription":"Opened issue \"Duplicate 'Compile' items were included. Resources\" (#650) at dotnet/standard","RelatedBody":"I am getting the known error that is listed on this page:\r\nhttps://github.com/dotnet/core/blob/master/release-notes/1.0/sdk/1.0-rc3-default-compile-items.md\r\n\r\nWhile it sounds obvious to delete all the Compile items, it simply doesn't work. When you remove them the Resources.resx and the Resources.Designer.cs become separate items and after that I am unable to refer to them from all my other 10 projects.\r\nAlso the fact that the above link is regarding **dot.net CORE** and not **STANDARD** gives me a strange feeling that things have been sorted out correctly.\r\n\r\nWhat else, other then disabeling EnableDefaultCompileItems, can I do?\r\n\r\nMy Language.csproj:\r\n\r\n```\r\n <ItemGroup>\r\n    <Compile Include=\"Resources\\Resources.de.Designer.cs\">\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n      <DependentUpon>Resources.de.resx</DependentUpon>\r\n    </Compile>\r\n    <Compile Include=\"Resources\\Resources.Designer.cs\">\r\n      <DependentUpon>Resources.resx</DependentUpon>\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n    </Compile>\r\n    <Compile Include=\"Resources\\Resources.fr.Designer.cs\">\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n      <DependentUpon>Resources.fr.resx</DependentUpon>\r\n    </Compile>\r\n    <Compile Include=\"Resources\\Resources.tr.Designer.cs\">\r\n      <DependentUpon>Resources.tr.resx</DependentUpon>\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n    </Compile>\r\n    <Compile Include=\"Resources\\Resources.en.Designer.cs\">\r\n      <DependentUpon>Resources.en.resx</DependentUpon>\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n    </Compile>\r\n    <Compile Include=\"T4\\CreateLocolizedKeys.cs\">\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n      <DependentUpon>CreateLocolizedKeys.tt</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n<ItemGroup>\r\n    <EmbeddedResource Include=\"Resources\\Resources.de.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.de.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n    <EmbeddedResource Include=\"Resources\\Resources.fr.resx\">\r\n      <CustomToolNamespace>Resources</CustomToolNamespace>\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.fr.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n    <EmbeddedResource Include=\"Resources\\Resources.tr.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.tr.Designer.cs</LastGenOutput>\r\n      <CustomToolNamespace>Resources</CustomToolNamespace>\r\n    </EmbeddedResource>\r\n    <EmbeddedResource Include=\"Resources\\Resources.en.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.en.Designer.cs</LastGenOutput>\r\n      <CustomToolNamespace>Resources</CustomToolNamespace>\r\n    </EmbeddedResource>\r\n    <EmbeddedResource Include=\"Resources\\Resources.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n      <CustomToolNamespace>Babywatcher.Language</CustomToolNamespace>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n```\r\n\r\nI am unknown what consequences this has to the rest, but the current workaround is by adding these 2 property groups:\r\n\r\n```\r\n  <PropertyGroup>\r\n    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\r\n</PropertyGroup>\r\n  <PropertyGroup>\r\n    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>\r\n  </PropertyGroup>\r\n```"},{"Id":"7234553536","Type":"IssuesEvent","CreatedAt":"2018-02-12T21:00:10","Actor":"chadAtGA","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/649","RelatedDescription":"Opened issue \".net core console app reference .net standard class library with nuget pkg by file not project. \" (#649) at dotnet/standard","RelatedBody":"I created a simple .net core 2.0 console project and a simple .net standard 2.0 class library. I add a ref to the nuget package StackExchange.Redis and then use the redis in my class library. I build the release version of my standard 2.0 class library. Then I try and reference that dll by browsing not by project. I startup my console and it says that it cannot find the stackexchange redis dll. I have tried publishing it so all of the dlls are in the but it does not seem to make a difference. Calling ReturnInt no problems calling RetStringRetString it fails. I'm sure I'm missing something simple.\r\n\r\nHere is my class library\r\n\r\n public class Class1\r\n    {\r\n\t\tpublic int ReturnInt()\r\n\t\t{\r\n\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\r\n\t\tpublic string RetString()\r\n\t\t{\r\n\t\t\tStackExchange.Redis.ConnectionMultiplexer connectionMultiplexer = StackExchange.Redis.ConnectionMultiplexer.Connect(\"localhost\");\r\n\r\n\t\t\tif(connectionMultiplexer.IsConnected)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Connecte\");\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n    }"},{"Id":"7227994914","Type":"PullRequestEvent","CreatedAt":"2018-02-11T03:28:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/648","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02511-01 (master)\" (#648) at dotnet/standard","RelatedBody":""},{"Id":"7227937564","Type":"IssuesEvent","CreatedAt":"2018-02-11T02:43:52","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/647","RelatedDescription":"Closed issue \"[Feature-Request] N-bit sized int and floating point types\" (#647) at dotnet/standard","RelatedBody":"I propose we should be able to have N-bit sized int and floating point types.\r\nHere is how it could work:\r\n\r\nObviously we already have the following:\r\n- int 1 / uint 1 (bool)\r\n- uint 8 (byte)\r\n- int 8 (sbyte)\r\n- uint 16, 32 and 64 (ushort, uint and ulong)\r\n- int 16, 32 and 64 (short, int and long)\r\n- float 32 (single)\r\n- float 64 (double)\r\n\r\nBut what about the following:\r\n- (u)int 2 (2 bits)\r\n- (u)int 4 (4 bits)\r\n- (u)int 128 (128 bits)\r\n- (u)int 256 (256 bits)\r\n- (u)int 2^n (2^n bits)\r\n- (float 1 makes no sense but you could still add it)\r\n- float 2 (2 bits)\r\n- float 4 (4 bits)\r\n- float 8 (8 bits)\r\n- float 16 (16 bits)\r\n- float 128 (128 bits)\r\n- float 256 (256 bits)\r\n- float 2^n (2^n bits)\r\n\r\nThe classes could be called the following:\r\nFor integers: `intj` where j is a power of 2 for a j bit integer\r\nFor unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer\r\nFor floats: `floatj` where j is a power of 2 for a j bit float\r\nAnd there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`\r\n\r\nWhy do I need this in my beloved c#?\r\n1. Because it will give you more/less precise floats to use\r\n2. It will give you more integers to use\r\n3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway\r\n\r\nWon't this ruin my IDE with millions of different type names?\r\n1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested"},{"Id":"7225871739","Type":"IssuesEvent","CreatedAt":"2018-02-10T01:47:23","Actor":"hamarb123","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/647","RelatedDescription":"Opened issue \"[Feature-Request] N-bit sized int and floating point types\" (#647) at dotnet/standard","RelatedBody":"I propose we should be able to have N-bit sized int and floating point types.\r\nHere is how it could work:\r\n\r\nObviously we already have the following:\r\n- int 1 / uint 1 (bool)\r\n- uint 8 (byte)\r\n- int 8 (sbyte)\r\n- uint 16, 32 and 64 (ushort, uint and ulong)\r\n- int 16, 32 and 64 (short, int and long)\r\n- float 32 (single)\r\n- float 64 (double)\r\n\r\nBut what about the following:\r\n- (u)int 2 (2 bits)\r\n- (u)int 4 (4 bits)\r\n- (u)int 128 (128 bits)\r\n- (u)int 256 (256 bits)\r\n- (u)int 2^n (2^n bits)\r\n- (float 1 makes no sense but you could still add it)\r\n- float 2 (2 bits)\r\n- float 4 (4 bits)\r\n- float 8 (8 bits)\r\n- float 16 (16 bits)\r\n- float 128 (128 bits)\r\n- float 256 (256 bits)\r\n- float 2^n (2^n bits)\r\n\r\nThe classes could be called the following:\r\nFor integers: `intj` where j is a power of 2 for a j bit integer\r\nFor unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer\r\nFor floats: `floatj` where j is a power of 2 for a j bit float\r\nAnd there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`\r\n\r\nWhy do I need this in my beloved c#?\r\n1. Because it will give you more/less precise floats to use\r\n2. It will give you more integers to use\r\n3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway\r\n\r\nWon't this ruin my IDE with millions of different type names?\r\n1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested"},{"Id":"7225726207","Type":"IssuesEvent","CreatedAt":"2018-02-10T00:34:37","Actor":"laksh-parab","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/646","RelatedDescription":"Opened issue \"Referencing  NET Standard 1.6 project causes web api to return json\" (#646) at dotnet/standard","RelatedBody":"This is one of the weird issue i have seen and here are the steps to reproduce\r\n\r\n1> Create new Web API project in VS 2017 with Target Framework 4.6.2\r\n2> Add Controller that returns a Stream\r\n```\r\npublic class ReportController : ApiController\r\n    {\r\n        [HttpGet]\r\n        public HttpResponseMessage Download()\r\n        {\r\n            var filePath = \"C:\\\\Report.xlsx\";\r\n            var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);\r\n            var result = new HttpResponseMessage(HttpStatusCode.OK)\r\n            {\r\n                Content = new StreamContent(fs)\r\n            };\r\n            result.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n            return result;\r\n        }\r\n    }\r\n```\r\n3> Run the application and invoke the api in IE 11 (use correct port #)\r\nhttp://localhost:40005/api/report/download\r\n\r\nThe browser should download a EXCEL file and you should be able to open EXCEL file.\r\n\r\n5> Stop visual studio\r\n\r\n5> In the same solution create a new project with target framework .NET Standard 1.6\r\n\r\n6> In the Web API Project, add project reference to newly created NET Standard library project\r\n\r\n7> Run the application and invoke api in IE 11\r\nhttp://localhost:40005/api/report/download\r\n\r\nNotice that browser will get json back instead of excel file.\r\n\r\nIf you try with google chrome then instead of json i get exception\r\n\r\n> Type 'System.Net.Http.StreamContent' cannot be serialized. Consider marking it with the DataContractAttribute attribute, and marking all of its members you want serialized with the DataMemberAttribute attribute. If the type is a collection, consider marking it with the CollectionDataContractAttribute. See the Microsoft .NET Framework documentation for other supported types.\r\n\r\nI don't know why just by referencing .NET Standard 1.6 project changes the behavior. If i remove the reference to .NET Standard 1.6 project then everything works fine.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7242078721","Type":"PullRequestEvent","CreatedAt":"2018-02-14T05:29:15","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27115","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#27115) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7241930517","Type":"PullRequestEvent","CreatedAt":"2018-02-14T04:25:56","Actor":"brianrob","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27107","RelatedDescription":"Merged pull request \"Fix and Enable Most ETW EventSource Tests\" (#27107) at dotnet/corefx","RelatedBody":"This change bumps the version of TraceEvent to 2.0.4 and enables almost all of the ETW EventSource tests, with small fixes for several of them.\r\n\r\nSystem.Diagnostics.Tracing.Tests is also OS-specific now since it references ETW-only code.\r\n\r\nFixes #4864."},{"Id":"7241930511","Type":"IssuesEvent","CreatedAt":"2018-02-14T04:25:56","Actor":"brianrob","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/4864","RelatedDescription":"Closed issue \"Vaildation of ETW events need TraceEvent\" (#4864) at dotnet/corefx","RelatedBody":"EventSource needs TraceEvent to validate ETW events in the tests.\n"},{"Id":"7241929540","Type":"IssuesEvent","CreatedAt":"2018-02-14T04:25:30","Actor":"brianrob","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27116","RelatedDescription":"Opened issue \"Remove USE_ETW Compilation Constant from System.Diagnostics.Tracing.Tests\" (#27116) at dotnet/corefx","RelatedBody":"It may be possible to remove USE_ETW and just mark the tests as Windows only.  We should see if this is possible to simplify the test code."},{"Id":"7241710085","Type":"PullRequestEvent","CreatedAt":"2018-02-14T02:51:18","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27115","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#27115) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7241680968","Type":"PullRequestEvent","CreatedAt":"2018-02-14T02:39:52","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27105","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#27105) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7241912061","Type":"IssuesEvent","CreatedAt":"2018-02-14T04:17:47","Actor":"cartermp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24825","RelatedDescription":"Opened issue \"Rename buffers are slow in the F# editor in a .NET Core SDK project\" (#24825) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS 15.6 Preview 4\r\n\r\n**Steps to Reproduce**:\r\n\r\nCode:\r\n\r\n```fsharp\r\nmodule DataAccess\r\n\r\nmodule Sql =\r\n    open System\r\n\r\n    let rec private containsClause (value : string) (str : string)  =\r\n        let checkLeft idx =\r\n            idx < 0 || Char.IsWhiteSpace(str.[idx]) || str.[idx] = ';' || str.[idx] = '/'\r\n        let checkRight idx =\r\n            idx = str.Length || Char.IsWhiteSpace(str.[idx]) || str.[idx] = '/'\r\n        let rec impl idx value (str : string) =\r\n            match str.IndexOf(value, idx, StringComparison.OrdinalIgnoreCase) with\r\n            | idx when idx < 0 ->\r\n                Ok str\r\n            | idx when checkLeft (idx - 1) && checkRight (idx + value.Length) ->\r\n                Error (\"SQL query script contains illegal clause \" + value)\r\n            | idx -> impl (idx + value.Length) value str\r\n        \r\n        impl 0 value str\r\n\r\n    let private validateClauses keywords (sql : string) =\r\n        keywords |> Seq.fold (fun s k -> s |> Result.bind (containsClause k)) (Ok sql)\r\n\r\n    let validateQuery =\r\n        validateClauses [\"UPDATE\";\"DELETE\";\"MERGE\";\"INSERT\";\"CREATE\";\"ALTER\";\"DROP\"]\r\n\r\nlet foo = Sql.validateQuery \"foobar\"\r\n```\r\n\r\nRename on `validateQuery` and type fast-ish. Then do it again.\r\n\r\n**Expected Behavior**:\r\n\r\nAll buffers in the editor change as I type.\r\n\r\n**Actual Behavior**:\r\n\r\nSevere lag:\r\n\r\n![rename-buffer-slow](https://user-images.githubusercontent.com/6309070/36187567-f369d8f2-10fa-11e8-9b1d-c22140a3c07b.gif)\r\n"},{"Id":"7241780971","Type":"PullRequestEvent","CreatedAt":"2018-02-14T03:20:49","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24824","RelatedDescription":"Opened pull request \"Enable ExtractViaCodeActionWithMoveLocal\" (#24824) at dotnet/roslyn","RelatedBody":"Closes #20382\r\n"},{"Id":"7241655123","Type":"IssuesEvent","CreatedAt":"2018-02-14T02:29:50","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24816","RelatedDescription":"Closed issue \"csc.runtimeconfig.json is not correctly generated and is broken by additional deps light-up\" (#24816) at dotnet/roslyn","RelatedBody":"In Azure AppService ASP.NET Core ligthup scenario we bring additional deps and runtime store for 2.1-* runtime and set `DOTNET_ADDITIONAL_DEPS/ASPNETCORE_HOSTINGSTARTUPASSEMBLIES` environment variables that affect all dotnet processes \r\n\r\n`csc.runtimeconfig.json` has TFM set to `netcoreapp2.0` but shared framework version `2.1.0-preview1-26116-04` which causes additional deps file to be resolved from `2.1.0-preview1-26116-04` hive while runtime store is resolved from `netcoreapp2.0` hive that doesn't even exists (we only care about 2.1). Corehost running csc.dll is unable to resolve libraries from additional deps and crashes.\r\n\r\n# csc.runtimeconfig.json \r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"2.1.0-preview1-26116-04\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n/cc @eerhardt"},{"Id":"7241648413","Type":"IssuesEvent","CreatedAt":"2018-02-14T02:27:15","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24823","RelatedDescription":"Opened issue \"Add CamelHumps selection similar to that of resharper\" (#24823) at dotnet/roslyn","RelatedBody":"ReSharper has a CamelHumps option which lets you select segments of text based on the casing. Using Ctrl+Shift + left or right will select segments of CamelCasedText instead of the entire thing. I'd really like to see visual studio support this out of the box.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/46440/add-camelhumps-selection-similar-to-that-of-reshar.html\nVSTS ticketId: 419362_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7240916164","Type":"PullRequestEvent","CreatedAt":"2018-02-13T22:39:35","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5384","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5384) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7236522754","Type":"IssuesEvent","CreatedAt":"2018-02-13T07:29:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5382","RelatedDescription":"Closed issue \"Enum.GetValues(Type) results in '{Type}[]' is missing metadata.\" (#5382) at dotnet/corert","RelatedBody":"Continuing my exploration of CoreRT, I'm currently stuck on the following exception:\r\n\r\n> An error occurred while loading the license file. 'Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm[]' is missing metadata. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=392859\r\n>   at System.Enum.GetValues(Type) + 0x64\r\n>   at Org.BouncyCastle.Utilities.Enums.GetEnumValues(Type) + 0x2a\r\n>   at Org.BouncyCastle.Utilities.Enums.GetArbitraryValue(Type) + 0x9\r\n\r\nI have the following in `rd.xml` which doesn't seem to be sufficient:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application>\r\n    <Assembly Name=\"CoreCompat.BouncyCastle\">\r\n      <Type Name=\"Org.BouncyCastle.Security.DigestUtilities+DigestAlgorithm\" Browse=\"Required All\" Serialize=\"Required All\" Dynamic=\"Required All\" XmlSerializer=\"Required All\"/>\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\nThings I noticed, perhaps not relevant:\r\n- The exception message mentions `Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm[]`, so this seems to reference an array?\r\n- `Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm` is an enum, and a child type of `Org.BouncyCastle.Security.DigestUtilities`, so the proper way to reference this type seems to be `Org.BouncyCastle.Security.DigestUtilities+DigestAlgorithm` (i.e. using a `+` to denote a child type instead of a `.`).\r\n\r\nAny pointers on how to tackle this error would be welcome 😄 ."},{"Id":"7236462656","Type":"PullRequestEvent","CreatedAt":"2018-02-13T07:09:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5383","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5383) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7236212769","Type":"PullRequestEvent","CreatedAt":"2018-02-13T05:37:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5380","RelatedDescription":"Merged pull request \"[ObjWriter] Add IMAGE_REL_BASED_RELPTR32 relocs support\" (#5380) at dotnet/corert","RelatedBody":"\t- https://github.com/dotnet/corert/issues/3278\r\n\t- Enabled only for ARM32. When ObjWriter is remotely updated,\r\n\tit will be possible to completely remove this workaround for other archs.\r\n\r\n@jkotas Need to rebuild and update ObjWriter remotely in repos, so that we can enable it for all architectures, including x64.\r\n@dotnet/arm32-corert-contrib please review"},{"Id":"7236124333","Type":"PullRequestEvent","CreatedAt":"2018-02-13T05:01:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5383","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5383) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7235914800","Type":"PullRequestEvent","CreatedAt":"2018-02-13T03:33:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5381","RelatedDescription":"Merged pull request \"accurancy -> accuracy\" (#5381) at dotnet/corert","RelatedBody":""},{"Id":"7235046169","Type":"IssuesEvent","CreatedAt":"2018-02-12T22:48:05","Actor":"qmfrederik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5382","RelatedDescription":"Opened issue \"Enum.GetValues(Type) results in '{Type}[]' is missing metadata.\" (#5382) at dotnet/corert","RelatedBody":"Continuing my exploration of CoreRT, I'm currently stuck on the following exception:\r\n\r\n> An error occurred while loading the license file. 'Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm[]' is missing metadata. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=392859\r\n>   at System.Enum.GetValues(Type) + 0x64\r\n>   at Org.BouncyCastle.Utilities.Enums.GetEnumValues(Type) + 0x2a\r\n>   at Org.BouncyCastle.Utilities.Enums.GetArbitraryValue(Type) + 0x9\r\n\r\nI have the following in `rd.xml` which doesn't seem to be sufficient:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application>\r\n    <Assembly Name=\"CoreCompat.BouncyCastle\">\r\n      <Type Name=\"Org.BouncyCastle.Security.DigestUtilities+DigestAlgorithm\" Browse=\"Required All\" Serialize=\"Required All\" Dynamic=\"Required All\" XmlSerializer=\"Required All\"/>\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\nThings I noticed, perhaps not relevant:\r\n- The exception message mentions `Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm[]`, so this seems to reference an array?\r\n- `Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm` is an enum, and a child type of `Org.BouncyCastle.Security.DigestUtilities`, so the proper way to reference this type seems to be `Org.BouncyCastle.Security.DigestUtilities+DigestAlgorithm` (i.e. using a `+` to denote a child type instead of a `.`).\r\n\r\nAny pointers on how to tackle this error would be welcome 😄 ."},{"Id":"7232985605","Type":"PullRequestEvent","CreatedAt":"2018-02-12T15:50:39","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5381","RelatedDescription":"Opened pull request \"accurancy -> accuracy\" (#5381) at dotnet/corert","RelatedBody":""},{"Id":"7232369755","Type":"PullRequestEvent","CreatedAt":"2018-02-12T14:01:54","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5380","RelatedDescription":"Opened pull request \"[ObjWriter] Add IMAGE_REL_BASED_RELPTR32 relocs support\" (#5380) at dotnet/corert","RelatedBody":"\t- https://github.com/dotnet/corert/issues/3278\r\n\t- Enabled only for ARM32. When ObjWriter is remotely updated,\r\n\tit will be possible to completely remove this workaround for other archs.\r\n\r\n@jkotas Need to rebuild and update ObjWriter remotely in repos, so that we can enable it for all architectures, including x64.\r\n@dotnet/arm32-corert-contrib please review"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7241221434","Type":"IssuesEvent","CreatedAt":"2018-02-14T00:01:48","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1405","RelatedDescription":"Closed issue \"When using .NET Standard facades on .NET Framework, automatic binding redirects should be enabled\" (#1405) at dotnet/sdk","RelatedBody":"We now automatically inject facades into the .NET Framework compilation when consuming a library that targets .NET Standard.\r\n\r\nWe need to make sure that when these facades are injected, that we forcefully enable automatic generation of binding redirects. That's necessary because we deploy files that might have higher versions then what the .NET Standard binary is referencing. These files aren't necessarily part of the runtime unification table or are explicitly opted-out by a minor version bump.\r\n\r\nIn non-SDK-style projects, the property `<AutoGenerateBindingRedirects>` is defaulted to `false` and relies on project templates to be set. The latter is only the case when the project got created targeting .NET Framework 4.5.1 or later. When an existing project is upgraded to 4.5.1 or later, the property is still `false`. I suggest we set it to `true` when we [detect .NET Standard facades are needed](https://github.com/dotnet/sdk/blob/release/2.0.0/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/msbuildExtensions/Microsoft/Microsoft.NET.Build.Extensions/Microsoft.NET.Build.Extensions.NETFramework.targets#L23-L25).\r\n\r\nMy understanding is that in SDK-style projects the `<AutoGenerateBindingRedirects>` is already `true` if the project is targeting .NET Framework and producing an application."},{"Id":"7241210000","Type":"IssuesEvent","CreatedAt":"2018-02-13T23:58:27","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1911","RelatedDescription":"Closed issue \"Inconsistency between VS publish and dotnet CLI publish:  Could not load file or assembly 'System.IO.FileSystem, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definiti    on does not match the assembly reference. (Exception from HRESULT: 0x80131040)\" (#1911) at dotnet/sdk","RelatedBody":"Getting below exception on ubuntu 16.04 when trying to run ASP.NET Core MVC project (dotnet core 2.0 version). VS version 15.5.4. Runtime on ubuntu 2.1.3. However published package using CLI command works fine.\r\n\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.IO.FileSystem, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definiti    on does not match the assembly reference. (Exception from HRESULT: 0x80131040)"},{"Id":"7241186859","Type":"IssuesEvent","CreatedAt":"2018-02-13T23:51:25","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1593","RelatedDescription":"Closed issue \"Net core compilation fails with files generated during prebuild tasks\" (#1593) at dotnet/sdk","RelatedBody":"_From @EPinci on September 18, 2017 22:32_\n\nHello,\r\n\r\nI have a .Net Core project with a prebuild task that generate a class file (.cs) needed during the actual compilation. Since this class is generated on a per build basis, it is also excluded from source control so is that is absent on repository clones.\r\n\r\nProblem is that:\r\n- during the first attempt the build fails not finding that class although the pre build task generated it successfully.\r\n- Following builds run fine.\r\n- Deleting the file, show the first build problem again.\r\n\r\nI tried explicitly including the class file in the project but the behavior is reversed for now I get a \"Duplicate 'Compile' items were included.\" error in the \"following\" builds.\r\n\r\n**Now this breaks CI/CD scenarios**: in a case I fail on build, in the other I fail on publishing.\r\nThis behavior does not happen on full framework project that do not have default globs enabled.\r\n\r\nLooks like the dotnet build command enumerates the files to build before the pre build task and not after. Is this a bug?\r\nIs there a way to allow this scenario without disabling globs?\r\n\r\nThank you.\r\n\n\n_Copied from original issue: dotnet/project-system#2839_"},{"Id":"7241137202","Type":"PullRequestEvent","CreatedAt":"2018-02-13T23:36:38","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1958","RelatedDescription":"Merged pull request \"Removes InferredFromUsage Configs from the SDK.\" (#1958) at dotnet/sdk","RelatedBody":"Fixes https://github.com/dotnet/sdk/issues/1001"},{"Id":"7241137192","Type":"IssuesEvent","CreatedAt":"2018-02-13T23:36:37","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Closed issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7240738867","Type":"PullRequestEvent","CreatedAt":"2018-02-13T21:59:55","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1958","RelatedDescription":"Opened pull request \"Removes InferredFromUsage Configs from the SDK.\" (#1958) at dotnet/sdk","RelatedBody":"Fixes https://github.com/dotnet/sdk/issues/1001"},{"Id":"7239793738","Type":"IssuesEvent","CreatedAt":"2018-02-13T18:42:21","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1739","RelatedDescription":"Closed issue \"Reference assemblies are incorrectly being marked as references\" (#1739) at dotnet/sdk","RelatedBody":"Seems like the opposite of #1738 \r\n\r\nI'm working on updating AspNetCore's repositories to use the 2.2 SDK. With the 2.0.0 SDK, when attempting to publish a Mvc application (https://github.com/aspnet/MvcPrecompilation/blob/dev/testapps/RazorPagesApp/RazorPagesApp.csproj for reference) for `net461`, `Microsoft.Win32.Primitives` (among others) is recorded as a `referenceassembly` in the deps file:\r\n\r\n```js\r\n\"Microsoft.Win32.Primitives/4.0.3.0\": {\r\n  \"type\": \"referenceassembly\",\r\n  \"serviceable\": false,\r\n  \"sha512\": \"\"\r\n},\r\n```\r\n\r\nWith 2.2.0-preview1-007522 SDK, it ends up in the deps file as a `reference`:\r\n```js\r\n\"Microsoft.Win32.Primitives/4.0.3.0\": {\r\n  \"type\": \"reference\",\r\n  \"serviceable\": false,\r\n  \"sha512\": \"\"\r\n},\r\n```\r\n\r\nThis in turn causes view compilation to fail, with \r\n```C#\r\nCannot find compilation library location for package 'Microsoft.Win32.Primitives'\r\n     at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n     at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n     at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n```\r\n\r\n"},{"Id":"7239777855","Type":"IssuesEvent","CreatedAt":"2018-02-13T18:38:58","Actor":"jnm2","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1957","RelatedDescription":"Opened issue \"Improve implicit .NET standard facade references\" (#1957) at dotnet/sdk","RelatedBody":"If you reference [System.Collections.Immutable 1.4.0](https://www.nuget.org/packages/System.Collections.Immutable/1.4.0) in a net462 project, it picks the netstandard2.0 System.Collections.Immutable dll. Unfortunately, the build system copies not just `netstandard.dll` but all the .NET Standard 1.\\* facade assemblies as well. This means 72 unreferenced, unused System.\\* and Microsoft.\\* DLLs show up for deployment. This is decidedly unpleasant.\r\n\r\nWould you please make the SDK smart enough to only add the netstandard1.\\* assemblies if there is at least one reference to a netstandard1.\\* assembly?\r\nAnd, independently, add `netstandard.dll` only if there is at least one reference to a netstandard2.\\* assembly?\r\n\r\nHere is the target which currently lumps both 1.\\* and 2.\\* in at once or none at all:\r\n\r\nhttps://github.com/dotnet/sdk/blob/83ba345017d368c80e2d24090a2507a0f4627001/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/msbuildExtensions/Microsoft/Microsoft.NET.Build.Extensions/Microsoft.NET.Build.Extensions.NETFramework.targets#L90-L95"},{"Id":"7236625191","Type":"PullRequestEvent","CreatedAt":"2018-02-13T08:00:54","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1956","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1956) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7235593405","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:34:26","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Reopened issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7235544721","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:18:03","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Closed issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7235532599","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:14:04","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Reopened issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"963413986954895360","CreatedAt":"2018-02-13T14:06:08+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz at 10am ET / 15:00 UTC to learn more about @AspNet Core and get your .NET related questions answe… https://t.co/l9RlPrj5Ep","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"963128572595519489","CreatedAt":"2018-02-12T19:12:00+00:00","UserScreenname":"dotnet","Text":"You can run your application anywhere with .NET Core – join @coolsch as he talks about .NET in 2018 at… https://t.co/0sSc3B7yOQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":11,"RawContent":null},{"Id":"963083274636554240","CreatedAt":"2018-02-12T16:12:00+00:00","UserScreenname":"dotnet","Text":"Update your existing .NET application to take advantage of new features in Windows Forms and WPF with @csharpfritz… https://t.co/yjqbIthkKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":16,"RawContent":null},{"Id":"961657885137698816","CreatedAt":"2018-02-08T17:48:01+00:00","UserScreenname":"dotnet","Text":"Tomorrow is NOW! @DEVintersection Take a deep dive with the Microsoft’s AI team into machine learning, predictive a… https://t.co/5AcI4VRNyG","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"961596291942961154","CreatedAt":"2018-02-08T13:43:16+00:00","UserScreenname":"dotnet","Text":"Our @csharpfritz and ASPInsider @brendoneus will be showing unit testing patterns and structure practices LIVE onli… https://t.co/kWer0gYtOp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":10,"RawContent":null},{"Id":"961382608914518016","CreatedAt":"2018-02-07T23:34:10+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz and ASPInsider Brendan Enrick for a LIVE CODING stream talking about how to write better unit t… https://t.co/dMJ5QcKEcp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"960930092372381696","CreatedAt":"2018-02-06T17:36:01+00:00","UserScreenname":"dotnet","Text":"Register now for @DEVintersection for a workshop package and go home with an awesome piece of hardware Xbox One X,… https://t.co/PqoYqNI5Ga","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":81,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":245,"FavoriteCount":191,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":76,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":211,"FavoriteCount":162,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":81,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-02-14T05:30:20.9540218Z","RunDurationInMilliseconds":8234}