{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It‚Äôs been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11569695851","Type":"IssuesEvent","CreatedAt":"2020-02-20T18:03:22","Actor":"anangaur","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7850","RelatedDescription":"Opened issue \"Add fuget.org link to package details page\" (#7850) at NuGet/NuGetGallery","RelatedBody":"This is the issue tracking the community PR: https://github.com/NuGet/NuGetGallery/pull/7832 as it needs some UX and messaging work before going live.\r\n\r\nRationale for the feature: \r\nfuget.org shows API level data for the packages and lets you compare the APIs across versions. This has been super useful for developers and they have already been using this. It would make sense for developers to directly explore their package on fuget.org from nuget.org's package details page."},{"Id":"11561559355","Type":"PullRequestEvent","CreatedAt":"2020-02-19T23:39:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7000","RelatedDescription":"Closed pull request \"[PROPOSAL] Tool to determine if a .nupkg has valid Microsoft metadata\" (#7000) at NuGet/NuGetGallery","RelatedBody":"This is minimal effort to make a tool that will allow teams to check the metadata of their package before pushing it to nuget.org. This is optional but will help teams catch metadata problems before shipping.\r\n\r\nWe can formalize the tool later, perhaps with `nuget.exe verify` and some kind of rules abstraction. But this is the cheap first step.\r\n\r\nIt's a old style tools package and requires .NET Framework 4.6.2. The .exe is here inside the package:\r\n\r\n```\r\ntools\\NuGet.VerifyMicrosoftPackage.exe\r\n```\r\n\r\nIn other words, it can be used like `NuGet.CommandLine` or `xunit.runner.console` where the user just hard codes the path inside the package of where the .exe is.\r\n\r\nTeams with non-standard rules can specify a path to their custom rule set using `--rule-set`. We can communicate in a doc what owners have non-standard rule sets and what they are. There are 4 non-standard 4 rule sets in the PROD DB today.\r\n\r\nWe should also document that this does not cover author signature verification. This can easily be done with `nuget.exe verify -Signatures -CertificateFingerprint`.\r\n\r\n## Open Questions\r\n\r\n- How to know if the rules compiled into the tool are out of date?\r\n   - We would release a new package to nuget.org after every master merge. Customers would just take latest package version\r\n- Wouldn't a verify endpoint be easier? üê± \r\n\r\n## Example output - invalid\r\n\r\nExit code is 1 (the number of bad packages).\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\n\r\nINVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\nThe package TestPackage-65ed825e-dd81-4964-9599-f6a28d67171d 1.0.0 is not compliant.\r\nThere is 1 problem.\r\n  - The package metadata defines 'Not Microsoft' as one of the authors which is not allowed by policy.\r\n\r\nValid package count: 0\r\nInvalid package count: 1\r\n\r\nThe metadata validation used the following property names and JSON ruleset.\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.\",\r\n    \"¬© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"¬© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"¬© Microsoft Corporation. V≈°echna pr√°va vyhrazena.\",\r\n    \"¬© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"¬© Microsoft Corporation. Wszelkie prawa zastrze≈ºone.\",\r\n    \"¬© Microsoft Corporation. Tous droits r√©serv√©s.\",\r\n    \"¬© Microsoft Corporation„ÄÇ ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ\",\r\n    \"¬© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"¬© –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –ú–∞–π–∫—Ä–æ—Å–æ—Ñ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\r\n    \"¬© Microsoft Corporation„ÄÇ Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n\r\n## Example output - all valid\r\n\r\nExit code is 0.\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\n\r\nVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\nThe package TestPackage-9be3d65e-7aa0-40e5-9cdb-6f5dc2fd8318 1.0.0 is compliant.\r\n\r\nValid package count: 1\r\nInvalid package count: 0\r\n```\r\n\r\n## Help text\r\n\r\nExit code is -1.\r\n\r\n```\r\nNuGet.VerifyMicrosoftPackage 0.0.1-jver-verify\r\n\r\nUsage: NuGet.VerifyMicrosoftPackage [arguments] [options]\r\n\r\nArguments:\r\n  PATHS  One or more file paths to a package (.nupkg).\r\n\r\nOptions:\r\n  -v | --version            Show version information.\r\n  -? | -h | --help          Show help information.\r\n  --recursive               Evaluate wildcards recursively into child directories.\r\n  --rule-set                A path to a JSON rule set file. See the default below.\r\n  --write-default-rule-set  Write the default rule set to the provided --rule-set file path.\r\n\r\nThis tool determines if a .nupkg meets the metadata requirements for Microsoft packages\r\non nuget.org. Relative paths and wildcards in the file name are supported. Globbing and\r\nwildcards in the directory are not supported.\r\n\r\nThe default rule set used for validation is the following:\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.\",\r\n    \"¬© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"¬© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"¬© Microsoft Corporation. V≈°echna pr√°va vyhrazena.\",\r\n    \"¬© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"¬© Microsoft Corporation. Wszelkie prawa zastrze≈ºone.\",\r\n    \"¬© Microsoft Corporation. Tous droits r√©serv√©s.\",\r\n    \"¬© Microsoft Corporation„ÄÇ ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ\",\r\n    \"¬© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"¬© –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –ú–∞–π–∫—Ä–æ—Å–æ—Ñ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\r\n    \"¬© Microsoft Corporation„ÄÇ Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n"},{"Id":"11561516348","Type":"IssuesEvent","CreatedAt":"2020-02-19T23:32:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7844","RelatedDescription":"Closed issue \"Incorrect error message when PDB does not match DLL\" (#7844) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nA user wants to update their .snupkg associated with an already pushed package:\r\nhttps://www.nuget.org/packages/tusdotnet/2.2.2\r\n\r\nThere is an existing .snupkg that was accepted but subsequent attempts fail with this error:\r\n\r\n> The uploaded symbols package contains one or more pdbs that are not portable.\r\n\r\nHowever upon closer investigation, the failure is not because the PDBs are portable but because the PEReader saw that the PDB and DLL do not match.\r\n\r\nI think the error is here:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/dbd927c309005b63b82c1017ff6bfcfec96434cf/src/Validation.Symbols/SymbolsValidatorService.cs#L251\r\n\r\nThis should use the error message `ValidationIssue.SymbolErrorCode_MatchingAssemblyNotFound`.\r\n\r\n### To Reproduce\r\n\r\nUpload a snupkg with a portable PDB that matches in name but does not match according to `PEReader.TryOpenAssociatedPortablePdb`.\r\n\r\n### Expected behavior\r\n\r\nThe validation should fail with a more helpful error message.\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/94054/74369714-b2465200-4d8a-11ea-8bed-bffec4118b73.png)\r\n\r\n\r\n### Additional context\r\nAdd any other context about the problem here."},{"Id":"11548731683","Type":"IssuesEvent","CreatedAt":"2020-02-18T19:00:23","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7848","RelatedDescription":"Closed issue \"Can't publish symbols because name collision on nuget.org\" (#7848) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI can no longer publish symbols on nuget.smbsrc.net because someone published (and later delisted) a package with the same name.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Download MSI nupkg from https://dev.azure.com/heaths/public/_build/results?buildId=210&view=artifacts&type=publishedArtifacts\r\n2. Regenerate my key (it had expired), copy it, and try to publish to wither www.nuget.org (either package or symbol package) or nuget.smbsrc.net (symbol package).\r\n\r\n### Expected behavior\r\nI can publish the symbol package.\r\n\r\n### Actual behavior\r\nI get an HTTP 403 error. Seems someone published https://www.nuget.org/packages/msi, which is the name of my package for powershellgallery.com. I've been publishing symbols this way for a while, but no longer can because of a name collision on nuget.org. There was never a need to publish the package to nuget.org (it's a PowerShell module). Seems authentication and authorization shouldn't necessarily be tied together. Is there some other way?\r\n\r\nI can't seem to log into www.symbolsource.org anymore either. I can't remember account information (it's been a long time since I logged in), but http://www.symbolsource.org/Public/Account/SendPasswordMail says it requires a secure connection, but www.symbolsource.org doesn't respond via HTTPS.\r\n\r\n### Additional context\r\nAdd any other context about the problem here.\r\n\r\nLink to MSI package on PowerShell Gallery: https://www.powershellgallery.com/packages/MSI"},{"Id":"11548268252","Type":"IssuesEvent","CreatedAt":"2020-02-18T18:04:50","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7849","RelatedDescription":"Opened issue \"[2020-02-18] Deployment\" (#7849) at NuGet/NuGetGallery","RelatedBody":"### Azure Search Service\r\n\r\nChanges:\r\n- Use managed identity for KeyVault access: https://github.com/NuGet/Engineering/issues/2972\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=579684\r\n\r\n- [ ] DEV\r\n- [ ] INT\r\n- [ ] PROD\r\n\r\n### CDNRedirect service\r\n\r\nChanges:\r\n- Use KeyVault integrated certificate: https://github.com/NuGet/Engineering/issues/2995\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=580913\r\n\r\n- [x] DEV\r\n- [ ] PROD\r\n\r\n### Licenses service\r\n\r\nChanges:\r\n- Use KeyVault integrated certificate: https://github.com/NuGet/Engineering/issues/2995\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=580910\r\n\r\n- [x] DEV\r\n- [ ] PROD"},{"Id":"11532462620","Type":"IssuesEvent","CreatedAt":"2020-02-17T05:19:19","Actor":"heaths","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7848","RelatedDescription":"Opened issue \"Can't publish symbols because name collision on nuget.org\" (#7848) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI can no longer publish symbols on nuget.smbsrc.net because someone published (and later delisted) a package with the same name.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Download MSI nupkg from https://dev.azure.com/heaths/public/_build/results?buildId=210&view=artifacts&type=publishedArtifacts\r\n2. Regenerate my key (it had expired), copy it, and try to publish to wither www.nuget.org (either package or symbol package) or nuget.smbsrc.net (symbol package).\r\n\r\n### Expected behavior\r\nI can publish the symbol package.\r\n\r\n### Actual behavior\r\nI get an HTTP 403 error. Seems someone published https://www.nuget.org/packages/msi, which is the name of my package for powershellgallery.com. I've been publishing symbols this way for a while, but no longer can because of a name collision on nuget.org. There was never a need to publish the package to nuget.org (it's a PowerShell module). Seems authentication and authorization shouldn't necessarily be tied together. Is there some other way?\r\n\r\n### Additional context\r\nAdd any other context about the problem here."},{"Id":"11527333541","Type":"IssuesEvent","CreatedAt":"2020-02-15T21:02:12","Actor":"robertmuehsig","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7847","RelatedDescription":"Opened issue \"Accessibility: Color-Contrast too low on package page\" (#7847) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI played around with [Accessibility Insights](https://accessibilityinsights.io/) and tried it on NuGet.org. The site seems (at least from the \"Fast pass\") quite good regarding accessibility, but the color on the package page for the currently released package is too low.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. On this URL 'https://www.nuget.org/packages/Newtonsoft.Json/'\r\n2. Perform this operation 'FastPass with https://accessibilityinsights.io/'\r\n3. See error\r\n\r\n### Expected behavior\r\n\"Congratulations!\r\nNo failed automated checks were found.\"\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/756703/74595115-19d7f800-503e-11ea-8730-fb319a456680.png)\r\n\r\n### Additional context\r\nThe link color and the background color (this blue-ish color) are problematic. I'm not sure if this combination is used on other pages as well. I would guess that the best fix would be to change the background color of the \"bg-info\" class. \r\n\r\nI could try to find a color combination, but I guess there is not \"right\" or \"wrong\", but if you would like that I should try something just give me a comment here. :)"},{"Id":"11524077052","Type":"IssuesEvent","CreatedAt":"2020-02-14T23:11:34","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7657","RelatedDescription":"Closed issue \"[Epic] Improve search results for Visual Studio (VS) client\" (#7657) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11516030661","Type":"PullRequestEvent","CreatedAt":"2020-02-14T03:23:36","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7846","RelatedDescription":"Merged pull request \"Removed some hot path logs\" (#7846) at NuGet/NuGetGallery","RelatedBody":"This was logging *every* time a search service request was sent. This line alone produces 500k-1m log lines per hour and duplicates the `dependencies` logging that is populated automatically."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11572627757","Type":"IssuesEvent","CreatedAt":"2020-02-21T00:41:05","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9196","RelatedDescription":"Closed issue \"[Test Failure] Auto refresh in the ‚ÄòBrowse‚Äô tab of PU UI doesn't work\" (#9196) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet Version: NuGet Client Release-5.5.x\\5.5.0.6449  \r\nVS Version: D16.5 - 29819.164\r\nOS Version: Windows-10-Enterprise-RS5\r\n\r\n## Installation steps: \r\n1. Install VS: [https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3486273&view=result](url)\r\n2. Install NuGet Client: [\\\\ddfiles\\Drops\\NuGet\\Drops\\CI\\NuGet.Client\\Release-5.5.x\\5.6.0.6449\\artifacts\\VS15\\NuGet.Tools.vsix](url)\r\n## Repro steps:\r\n1.\tCreate a C# Console App (.Net Framework) project.\r\n2.\tOpen PM UI and go to ‚ÄòBrowser‚Äô tab. \r\n3.\tInstall a 'Newtonsoft.Json' package into the project.\r\n4.\tObserve the 'Newtonsoft.Json' package under ‚ÄòBrowser‚Äô tab. (Don‚Äôt refresh this page)\r\n\r\n## Expected:\r\nAuto refresh should work correctly.\r\n\r\n## Actual:\r\nAuto refresh in the ‚ÄòBrowse‚Äô tab of PU UI doesn't work as below screenshot.\r\n![Bug](https://user-images.githubusercontent.com/20632775/74936324-e540b380-5424-11ea-9df9-d089ee5c72f0.png)\r\n\r\n\r\n## Notes:\r\n1. The issue only repro on browse tab.\r\n2. The issue repro when updating/uninstalling a package in step3.\r\n3.\tThe issue **not repro** on .Net Core project.\r\n4.\tThe issue **not repro** on VS D16.5 - 29819.164 implicit NuGet Client Dev\\5.5.0.6422.\r\n\r\n\r\n"},{"Id":"11572500769","Type":"IssuesEvent","CreatedAt":"2020-02-21T00:16:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8150","RelatedDescription":"Closed issue \"Mono nuGet init hangs several minutes after having successfully installed packages\" (#8150) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: **nuget.exe** with **mono**\r\n\r\nNuGet version: **NuGet Version: 5.0.2.5988**\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): **alpine linux 3.9** (also tested on strech and ubuntu xenial)\r\n\r\nDockerfile in which command in ran:\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2-alpine3.9\r\n\r\nRUN apk add --no-cache mono --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing && \\\r\n    apk add --no-cache --virtual=.build-dependencies ca-certificates curl && \\\r\n    cert-sync /etc/ssl/certs/ca-certificates.crt && \\\r\n    curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe && \\\r\n    apk del .build-dependencies && \\\r\n    apk add --no-cache nodejs~=10.14.2 yarn~=1.12.3 git ca-certificates openssh-client\r\n\r\nCOPY aliases.sh /etc/profile.d/aliases.sh\r\nCMD [\"/bin/sh\", \"-l\"]\r\n```\r\n\r\nUseful information: **It runs on a CI/CD pipeline under gitlab-ci with no possible user input**\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Command used: `mono /usr/local/bin/nuget.exe init /srv/build/local_packages /srv/localnugetrepo/packages`\r\n\r\n2. nuget installs in milliseconds the packages (log with detailed verbosity):\r\n```\r\nNuGet Version: 5.0.2.5988\r\nAcquiring lock for the installation of sync-model 1.0.0-latest\r\nAcquired lock for the installation of sync-model 1.0.0-latest\r\nInstalling sync-model 1.0.0-latest.\r\nCompleted installation of sync-model 1.0.0-latest\r\nSuccessfully added package '/srv/build/local_packages/sync-model.1.0.0-latest.nupkg' to feed /srv/localnugetrepo/packages'.\r\nAcquiring lock for the installation of batch-model 1.0.0-latest\r\nAcquired lock for the installation of batch-model 1.0.0-latest\r\nInstalling batch-model 1.0.0-latest.\r\nCompleted installation of batch-model 1.0.0-latest\r\nSuccessfully added package '/srv/build/local_packages/batch-model.1.0.0-latest.nupkg' to feed '/srv/localnugetrepo/packages'.\r\n --- HANG HERE DURING ABOUT 2-3 MIN ---\r\n```\r\n\r\nThen it hangs for several minutes, doing nothing. Then stopping without non-0 exit code. So everything works properly but it hangs with no reasons during several times. \r\n\r\nIt slows down our pipeline a lot. Machine running the process is a 6 core 64gb ram with NVMe."},{"Id":"11572479356","Type":"IssuesEvent","CreatedAt":"2020-02-21T00:12:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8983","RelatedDescription":"Closed issue \"GeneratePackageOnBuild is transitive through ProjectReference\" (#8983) at NuGet/Home","RelatedBody":"It appears that `GeneratePackageOnBuild` is transitive through a `ProjectReference`. For example,\r\n- Given a project A with `GeneratePackageOnBuild`, `a.nupkg` will be generated in the output folder of A\r\n- Given a project B with a `ProjectReference` to A, `a.nupkg` will _also_ be generated in the output folder of B\r\n\r\nThis seems like a bug (though maybe it's by design?). It's particularly problematic in CI scenarios where you want to build all projects and then crawl for packages to push. Because of this behavior, all your test project outputs will have the packages of the projects they're testing. Likewise, you'll end up with multiple copies of packages if any projects reference other projects.\r\n\r\nIn my opinion the behavior should be to generate and output a package only for the project that contains `GeneratePackageOnBuild`. Maybe I'm missing a way to disable that behavior?"},{"Id":"11572470963","Type":"IssuesEvent","CreatedAt":"2020-02-21T00:10:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8064","RelatedDescription":"Closed issue \"Adding a reference to source package depending on another source package\" (#8064) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nVS UI:\r\n![image](https://user-images.githubusercontent.com/41759/56776667-7eaa2500-6782-11e9-93ed-4a4a9903767b.png)\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\nNo.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .NET Standard 2.0 class library.\r\n2. Add a package reference via VS UI to package `Microsoft.CodeAnalysis.Debugging` `3.2.0-beta1-19225-01` from feed `https://dotnet.myget.org/F/roslyn/api/v3/index.json`\r\n3. NuGet correctly discovers two packages to add:\r\n![image](https://user-images.githubusercontent.com/41759/56776733-b913c200-6782-11e9-972d-17e40aefcfff.png)\r\n4. Confirm dialogs and open project file once finished:\r\n![image](https://user-images.githubusercontent.com/41759/56776767-dfd1f880-6782-11e9-9d90-545a5d5c0424.png)\r\n\r\nReference to `Microsoft.CodeAnalysis.PooledObjects` is missing. \r\n\r\n"},{"Id":"11572392208","Type":"IssuesEvent","CreatedAt":"2020-02-20T23:56:24","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8517","RelatedDescription":"Closed issue \"[Accessibility] Tab navigation skips certain PackageDetails metadata causing it to be missed by narrator\" (#8517) at NuGet/Home","RelatedBody":"Found while testing the new deprecated metadata. \r\n\r\nNote that  the description metadata gets skipped as well. It only goes to the information that's hyperlinked.\r\n\r\nThis is not a regression but just discovered due to it. "},{"Id":"11571167459","Type":"IssuesEvent","CreatedAt":"2020-02-20T20:58:02","Actor":"jaredpar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9199","RelatedDescription":"Opened issue \"EvaluateCacheFile is causing restore crashes on \" (#9199) at NuGet/Home","RelatedBody":"# Details about Problem\r\nRestore during build using `dotnet msbuild` is crashing with an unhandled exception on Unix operating systems. The problem appears to be a simple unhandled exception. \r\n\r\n```\r\n/__w/1/s/.dotnet/sdk/5.0.100-preview.1.20112.7/MSBuild.dll /nologo -maxcpucount /m -verbosity:m /v:minimal /bl:/__w/1/s/artifacts/log/Release/ToolsetRestore.binlog /clp:Summary /clp:ErrorsOnly;NoSummary /nr:false /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=true /p:__ToolsetLocationOutputFile=/__w/1/s/artifacts/toolset/5.0.0-beta.20117.3.txt /t:__WriteToolsetLocation /warnaserror /__w/1/s/artifacts/toolset/restore.proj\r\nClearing NuGet HTTP cache: /home/helixbot_azpcontainer/.local/share/NuGet/v3-cache\r\nLocal resources cleared.\r\n/__w/1/s/.dotnet/sdk/5.0.100-preview.1.20112.7/MSBuild.dll /nologo -logger:/__w/1/s/.packages/microsoft.dotnet.arcade.sdk/5.0.0-beta.20117.3/tools/netcoreapp2.1/Microsoft.DotNet.Arcade.Sdk.dll -maxcpucount /m -verbosity:m /v:minimal /bl:/__w/1/s/artifacts/log/Release/Build.binlog /clp:Summary /nr:false /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=true /p:Configuration=Release /p:RepoRoot=/__w/1/s /p:Restore=true /p:Build=true /p:Rebuild=false /p:Test=false /p:Pack=false /p:IntegrationTest=false /p:PerformanceTest=false /p:Sign=false /p:Publish=false /p:SubsetCategory=mono /p:ConfigurationGroup=Release /p:ArchGroup=x64 /p:TargetArchitecture=x64 /p:CMakeArgs= /p:MonoEnableLLVM=false /warnaserror /__w/1/s/.packages/microsoft.dotnet.arcade.sdk/5.0.0-beta.20117.3/tools/Build.proj\r\n  Restore completed in 16.48 sec for /__w/1/s/tools-local/tasks/installer.tasks/installer.tasks.csproj.\r\n  installer.tasks -> /__w/1/s/artifacts/bin/installer.tasks/Debug/netstandard2.0/installer.tasks.dll\r\n  Tool 'coverlet.console' (version '1.7.0') was restored. Available commands: coverlet\r\n  Tool 'dotnet-reportgenerator-globaltool' (version '4.4.2') was restored. Available commands: reportgenerator\r\n  Tools restore was successful.\r\n  Restore completed in 5.11 sec for /__w/1/s/.packages/microsoft.dotnet.arcade.sdk/5.0.0-beta.20117.3/tools/Tools.proj.\r\n  Restore completed in 11.44 ms for /__w/1/s/src/mono/netcore/System.Private.CoreLib/System.Private.CoreLib.csproj.\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error : System.AggregateException: One or more errors occurred. (Could not find a part of the path '/tmp/NuGetScratch/fddf3c7a91d54497a7b711c945fe60d3/b8178b951e2f4151a1758acd7ba7326f.proj.nuget.dgspec.json'.)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :  ---> System.IO.DirectoryNotFoundException: Could not find a part of the path '/tmp/NuGetScratch/fddf3c7a91d54497a7b711c945fe60d3/b8178b951e2f4151a1758acd7ba7326f.proj.nuget.dgspec.json'.\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at System.IO.FileStream..ctor(String path, FileMode mode)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.ProjectModel.DependencyGraphSpec.Save(String path)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.Commands.NoOpRestoreUtilities.PersistDGSpecFile(DependencyGraphSpec spec, String dgPath, ILogger log)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.Commands.RestoreCommand.EvaluateCacheFile()\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at NuGet.Commands.RestoreRunner.RunWithoutCommit(IEnumerable`1 restoreRequests, RestoreArgs restoreContext)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    --- End of inner exception stack trace ---\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n/__w/1/s/src/mono/netcore/nuget/packages.builds : error :    at Microsoft.Build.NuGetSdkResolver.NuGetSdkResolver.NuGetAbstraction.GetSdkResult(SdkReference sdk, Object nuGetVersion, SdkResolverContext context, SdkResultFactory factory)\r\n##[error]src/mono/netcore/nuget/packages.builds(0,0): error : System.AggregateException: One or more errors occurred. (Could not find a part of the pa\r\n```\r\n\r\nBuilds where this has occurred\r\n- https://dev.azure.com/dnceng/public/_build/results?buildId=529965&view=logs&jobId=6164c92f-30fd-595a-34ac-982c8db24ee3\r\n- https://dev.azure.com/dnceng/public/_build/results?buildId=530069&view=logs&jobId=40f773ae-1f50-5e5e-c198-773a224261de\r\n- https://dev.azure.com/dnceng/public/_build/results?buildId=528278&view=logs&j=da3b6fae-2b9c-515e-f961-941b19f305e4&t=e211c71e-116d-5222-99f8-68e08c58ca66\r\n\r\nThis is starting to become a bit of a blocking issue for the dotnet/runtime repository. Started showing up yesterday and now I'm seeing it across a number of builds. \r\n\r\nThe runs do have binlogs available from the restores but they don't really seem to have helpful information in them. Example\r\n\r\nhttps://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_apis/build/builds/529965/artifacts?artifactName=BuildLogs_Mono_Linux_x64_release&fileId=50260E1C6BB8177752CB6690A24F7D636CC8A076F6FB6CC6FAB6F5DB3AED4BC502&fileName=Build.binlog&api-version=5.0-preview.3\r\n\r\n"},{"Id":"11570974884","Type":"IssuesEvent","CreatedAt":"2020-02-20T20:34:17","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9143","RelatedDescription":"Closed issue \"Code Review polish from `Dotnet nuget add|remove|* source`\" (#9143) at NuGet/Home","RelatedBody":"Fix the rest of the feedback that we didn't have time to address before checkin: https://github.com/NuGet/NuGet.Client/pull/3206"},{"Id":"11570957477","Type":"IssuesEvent","CreatedAt":"2020-02-20T20:32:05","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9192","RelatedDescription":"Closed issue \"[Test Failure] There is an error ‚ÄúThe calling thread cannot access this object because a different thread owns it‚Äù after installing/updating/uninstalling package in the PM UI\" (#9192) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: dev-donnie-msft-a11yPmuiTabs\\5.6.0.10272\r\nVS Version: Master\\29818.127\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps so we can see the same problem\r\n1. Launch VS and create a project [e.g. Console App (.NET Core)].\r\n2. Open the PM UI of the project or the solution.\r\n3. Install/Update/Uninstall a package in the PM UI.\r\n4. Observe the Error List window.\r\n## Expected\r\nThere is no error in the Error List window.\r\n## Actual\r\nThere is an error ‚ÄúThe calling thread cannot access this object because a different thread owns it‚Äù after installing/updating/uninstalling package in the PM UI as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/74833300-2ddc6c00-5354-11ea-8df1-04cc517b842f.png)\r\n\r\n## Note\r\n1.\tThe error will disappear after building the project/solution.\r\n2.\tThe operation of installing/updating/uninstalling package is successful even the error appears.\r\n\r\n"},{"Id":"11570957426","Type":"IssuesEvent","CreatedAt":"2020-02-20T20:32:05","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9078","RelatedDescription":"Closed issue \"PMUI Tabs have Accessibility Issues\" (#9078) at NuGet/Home","RelatedBody":"Various VS Feedback accessibility issues relating to the Tabs in the Package Manager UI:\r\n\r\n- [ ] After pressing on \"Browse\" tab focus is not navigating inside the tab  (**1049188**)\r\n\r\n- [ ] Narrator is reading \"1 of 1\" for \"browse\",\"install\",\"update\" tabs (**1049208**)\r\n\r\n- [ ] Narrator is announcing incorrect state for the non selected tab item. (**994450**)\r\n"},{"Id":"11570398655","Type":"IssuesEvent","CreatedAt":"2020-02-20T19:26:28","Actor":"whoiskevinrich","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9198","RelatedDescription":"Opened issue \"Question: NetStandard Resolution when consuming multi-target package\" (#9198) at NuGet/Home","RelatedBody":"Given a consuming application:\r\n`<TargetFramework>netcoreapp2.1</TargetFramework>`\r\n\r\nthat has a reference to a NuGet Package that is targeting multiple netstandard frameworks:\r\n`<TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>`\r\n\r\nwould the consuming application resolve the netstandard1.3 implementation or the netstandard2.0?"},{"Id":"11570230160","Type":"IssuesEvent","CreatedAt":"2020-02-20T19:06:57","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9031","RelatedDescription":"Closed issue \"Restore:  large strings created on large object heap (LOH)\" (#9031) at NuGet/Home","RelatedBody":"[`DependencyGraphSpec.Save(‚Ä¶)`](https://github.com/NuGet/NuGet.Client/blob/feceff9099e6f02dd2a6d76b26ed68a6029959f5/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L241) serializes the DGSpec to a string before writing the JSON to file.  A DGSpec string can be quite large.  In one customer memory dump I counted 401 such strings in the large object heap (LOH) with an average string size of 505,208 bytes and a total string size of 202,588,752 bytes.\r\n\r\nRecommendations:\r\n1.  Delete [`DependencyGraphSpec.GetJson()`](https://github.com/NuGet/NuGet.Client/blob/feceff9099e6f02dd2a6d76b26ed68a6029959f5/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L250-L257).\r\n2.  Modify [`DependencyGraphSpec.Save(‚Ä¶)`](https://github.com/NuGet/NuGet.Client/blob/feceff9099e6f02dd2a6d76b26ed68a6029959f5/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L239) to serialize to disk incrementally using `Newtonsoft.Json.JsonTextWriter`.  To ensure file consistency in the presence of errors, it would be wise to first serialize to a temporary file and then use `NuGet.Common.FileUtility` to replace the destination file with the temporary file.\r\n\r\n"},{"Id":"11570208526","Type":"IssuesEvent","CreatedAt":"2020-02-20T19:04:24","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9197","RelatedDescription":"Opened issue \"Remove from public members parameter types that leak implementation details\" (#9197) at NuGet/Home","RelatedBody":"We have many public members with implementation-specific parameter types.  This makes it difficult to fix bugs or improve performance without introducing breaking changes.  Examples are `DependencyGraphSpec` or `JsonPackageSpecReader`.  We should be able to replace a JLinq implementation with `JsonTextReader` or the`System.Text.Json` equivalent to fix a bug or improve performance without making a public change.  Ideally, these NuGet types would accept only primitive abstractions like `FileInfo` or `Stream`."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to‚Ä¶ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto‚Ä¶ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are‚Ä¶ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-02-21T05:30:43.6795235Z","RunDurationInMilliseconds":2115}