{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11194546727","Type":"PullRequestEvent","CreatedAt":"2020-01-03T01:36:46","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7795","RelatedDescription":"Opened pull request \"Improve the display package page's performance\" (#7795) at NuGet/NuGetGallery","RelatedBody":"⚠ I need to test this on the PROD PERF environment to ensure there are no regressions.\r\n\r\nThese changes include:\r\n\r\n1. The first SQL query for the display page gets the metadata for all versions of the package. This was an expensive query that also loaded the packages' deprecations. I've simplified this query.\r\n1. I reduced the number of lazily loaded SQL queries.\r\n\r\nBuild: TODO\r\nRelease: TODO\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/2910"},{"Id":"11194064112","Type":"IssuesEvent","CreatedAt":"2020-01-02T23:16:13","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7753","RelatedDescription":"Closed issue \"[PackageType]Update Azure Search models to include [Filterable] package type\" (#7753) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11194057369","Type":"IssuesEvent","CreatedAt":"2020-01-02T23:14:34","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7702","RelatedDescription":"Closed issue \"[PackageType]Update Catalog2AzureSearch\" (#7702) at NuGet/NuGetGallery","RelatedBody":"Catalog2AzureSearch needs to be updated to insert the new packageTypes document field."},{"Id":"11194057186","Type":"IssuesEvent","CreatedAt":"2020-01-02T23:14:31","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7704","RelatedDescription":"Closed issue \"[PackageType]Update DB2AzureSearch\" (#7704) at NuGet/NuGetGallery","RelatedBody":"DB2AzureSearch needs to be updated to make the same document insertions that Catalog2AzureSearch will be making (see https://github.com/NuGet/NuGetGallery/issues/7702)\r\n\r\nAfter the update is complete, a new index with the updated documents will need to be spun up to backfill the packagetype data."},{"Id":"11194056946","Type":"IssuesEvent","CreatedAt":"2020-01-02T23:14:27","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7574","RelatedDescription":"Closed issue \"Support packageTypes property in catalog\" (#7574) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nThe [`packageTypes` nuspec property](https://docs.microsoft.com/en-us/nuget/reference/nuspec#packagetypes) is used to distinguish between regular dependency packages, .NET CLI tools, and .NET CLI templates. Today, this property is always `\"\"` on catalog leafs.\r\n\r\n### To Reproduce\r\n\r\nSee the `packageTypes` property on the following catalog leafs:\r\n\r\n* .NET CLI tool: https://api.nuget.org/v3/catalog0/data/2018.10.17.01.01.10/dotnet-xunit.2.4.0-beta.1.build3958.json\r\n* .NET CLI template: https://api.nuget.org/v3/catalog0/data/2018.11.30.06.14.50/giraffe-template.0.1.0-alpha007.json\r\n\r\n### Expected behavior\r\nThe catalog leaf should be a JSON array of all the package type names in the nuspec. For example:\r\n\r\n```\r\n\"packageTypes\": [\r\n    \"DotnetCliTool\"\r\n]\r\n```\r\n\r\n### Additional context\r\nThis is necessary to properly support package type filtering (see https://github.com/NuGet/NuGetGallery/issues/5762). Today, the job mutating the search index must guess the package type from the catalog leafs' `packageEntries` property. This approach isn't ideal as the search index must be rebuilt when a new package type is introduced."},{"Id":"11191797733","Type":"IssuesEvent","CreatedAt":"2020-01-02T16:23:30","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7755","RelatedDescription":"Closed issue \"[PackageType]Add E2E test to push and then search by a DotnetTool package\" (#7755) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11185296134","Type":"IssuesEvent","CreatedAt":"2020-01-01T00:07:53","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7794","RelatedDescription":"Opened issue \"Permission system does n+1 queries to fetch users' organizations\" (#7794) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nThis line performs n+1 SQL queriers, where n is the number of organizations the user is in:\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/90f8fbea00217db2e5d918e140621c0aea0ca12d/src/NuGetGallery.Services/Permissions/ActionRequiringEntityPermissions.cs#L79\r\n\r\nFor example, if I am a user in two organizations, the following SQL queries will be generated:\r\n\r\n```sql\r\n// Get my memberships\r\nexec sp_executesql N'SELECT \r\n    [Extent1].[OrganizationKey] AS [OrganizationKey], \r\n    [Extent1].[MemberKey] AS [MemberKey], \r\n    [Extent1].[IsAdmin] AS [IsAdmin]\r\n    FROM [dbo].[Memberships] AS [Extent1]\r\n    WHERE [Extent1].[MemberKey] = @EntityKeyValue1',N'@EntityKeyValue1 int',@EntityKeyValue1=1\r\n\r\n// Load the first organization\r\nexec sp_executesql N'SELECT \r\n    ''0X0X'' AS [C1], \r\n    [Extent1].[Key] AS [Key], \r\n    [Extent2].[EmailAddress] AS [EmailAddress], \r\n    [Extent2].[UnconfirmedEmailAddress] AS [UnconfirmedEmailAddress], \r\n    [Extent2].[Username] AS [Username], \r\n    [Extent2].[EmailAllowed] AS [EmailAllowed], \r\n    [Extent2].[IsDeleted] AS [IsDeleted], \r\n    [Extent2].[EnableMultiFactorAuthentication] AS [EnableMultiFactorAuthentication], \r\n    [Extent2].[NotifyPackagePushed] AS [NotifyPackagePushed], \r\n    [Extent2].[EmailConfirmationToken] AS [EmailConfirmationToken], \r\n    [Extent2].[PasswordResetToken] AS [PasswordResetToken], \r\n    [Extent2].[PasswordResetTokenExpirationDate] AS [PasswordResetTokenExpirationDate], \r\n    [Extent2].[CreatedUtc] AS [CreatedUtc], \r\n    [Extent2].[LastFailedLoginUtc] AS [LastFailedLoginUtc], \r\n    [Extent2].[FailedLoginCount] AS [FailedLoginCount]\r\n    FROM  [dbo].[Organizations] AS [Extent1]\r\n    INNER JOIN [dbo].[Users] AS [Extent2] ON [Extent1].[Key] = [Extent2].[Key]\r\n    WHERE [Extent1].[Key] = @EntityKeyValue1',N'@EntityKeyValue1 int',@EntityKeyValue1=3\r\n\r\n//Load the second organization\r\nexec sp_executesql N'SELECT \r\n    ''0X0X'' AS [C1], \r\n    [Extent1].[Key] AS [Key], \r\n    [Extent2].[EmailAddress] AS [EmailAddress], \r\n    [Extent2].[UnconfirmedEmailAddress] AS [UnconfirmedEmailAddress], \r\n    [Extent2].[Username] AS [Username], \r\n    [Extent2].[EmailAllowed] AS [EmailAllowed], \r\n    [Extent2].[IsDeleted] AS [IsDeleted], \r\n    [Extent2].[EnableMultiFactorAuthentication] AS [EnableMultiFactorAuthentication], \r\n    [Extent2].[NotifyPackagePushed] AS [NotifyPackagePushed], \r\n    [Extent2].[EmailConfirmationToken] AS [EmailConfirmationToken], \r\n    [Extent2].[PasswordResetToken] AS [PasswordResetToken], \r\n    [Extent2].[PasswordResetTokenExpirationDate] AS [PasswordResetTokenExpirationDate], \r\n    [Extent2].[CreatedUtc] AS [CreatedUtc], \r\n    [Extent2].[LastFailedLoginUtc] AS [LastFailedLoginUtc], \r\n    [Extent2].[FailedLoginCount] AS [FailedLoginCount]\r\n    FROM  [dbo].[Organizations] AS [Extent1]\r\n    INNER JOIN [dbo].[Users] AS [Extent2] ON [Extent1].[Key] = [Extent2].[Key]\r\n    WHERE [Extent1].[Key] = @EntityKeyValue1',N'@EntityKeyValue1 int',@EntityKeyValue1=5\r\n```\r\n\r\n### Expected behavior\r\nThe user's organizations should be fetched with a single SQL query.\r\n\r\n### Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n### Additional context\r\nAdd any other context about the problem here."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11201324926","Type":"IssuesEvent","CreatedAt":"2020-01-04T02:19:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9001","RelatedDescription":"Opened issue \"Consider a cadence for ingesting VS & MSBuild dependencies \" (#9001) at NuGet/Home","RelatedBody":"The client libraries have dependencies on 3 groups of packages. \r\n\r\n1. Platform packages (slowly going away with 3.0 anyways)\r\n1. MSBuild dependencies\r\n1. Visual Studio dependencies\r\n\r\n\r\nThe cadence at which we upgrade these is:\r\n- every major release. For example: https://github.com/NuGet/NuGet.Client/pull/2565/, https://github.com/NuGet/NuGet.Client/pull/2580\r\n- when we need to ingest a new feature https://github.com/NuGet/NuGet.Client/pull/3172\r\n\r\nGiven that we are pretty low level, we don't really have bleeding edge dependencies so it's acceptable that we don't rev things super quickly (after all, all of our dependencies insert their latest bits in the products, so we are never out of sync. \r\n\r\nOur tests on the other hand...not so much. \r\nSee https://github.com/NuGet/NuGet.Client/pull/3182 as proof. \r\n\r\nWe should consider a regular cadence for updating our dependencies, so we don't run into too many of these issues. \r\n"},{"Id":"11201280328","Type":"IssuesEvent","CreatedAt":"2020-01-04T01:56:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9000","RelatedDescription":"Opened issue \"Functional tests are broken due to a machine upgrade to 16.4\" (#9000) at NuGet/Home","RelatedBody":"Specifically: \r\n\r\nAddPkg_ConditionalAddAsUpdate_Success\r\nAddPkg_UnconditionalAddAsUpdate_Succcess\r\nAddPkg_UnconditionalAddTwoPackages_Success\r\n\r\nThe root cause is: \r\n\r\n```console\r\nSystem.AggregateException : One or more errors occurred.\\r\\n---- Microsoft.Build.Exceptions.InvalidProjectFileException : The expression \\\"\\\"E:\\\\A\\\\_work\\\\345\\\\s\\\\.test\\\\work\\\\3358da78\\\\9313099e\\\\globalPackages\\\\pkgx\\\\1.0.0\\\\contentFiles\\\\cs\\\\net45\\\\code.cs\\\".GetPathsOfAllDirectoriesAbove()\\\" cannot be evaluated. Method 'System.String.GetPathsOfAllDirectoriesAbove' not found. C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Enterprise\\\\MSBuild\\\\Current\\\\Bin\\\\Roslyn\\\\Microsoft.Managed.Core.targets\r\n\r\n```\r\n\r\nLikely same rootcause as https://github.com/dotnet/roslyn/issues/40532. \r\n\r\n/cc @rainersigwald, some of our tests are broken because the Microsoft.Build.Runtime API fails. "},{"Id":"11201028725","Type":"IssuesEvent","CreatedAt":"2020-01-04T00:15:02","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8999","RelatedDescription":"Opened issue \"Bugfixes\" (#8999) at NuGet/Home","RelatedBody":""},{"Id":"11200876411","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:29:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7858","RelatedDescription":"Closed issue \"Download NuGet package for every build in Jenkins\" (#7858) at NuGet/Home","RelatedBody":"\r\n\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):4.3.2\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):win 10\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n\r\n1. Trying to download fresh NuGet packages every time i build the job in the Jenkins I tried all the commands but i am not getting the output. Can you let me know if there is a command to download fresh packages via NuGet  \r\n\r\nCommands Used\r\nC :\\Path to nuget.exe restore .sln : Only downloads new packages that are needed\r\nhttps://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference\r\nUsed all the commands from above link only restore command is working.\r\n\r\nNote: Please respond to my email aaronyeddula@gmail.com as soon as possible because this is priority issue.\r\n\r\n"},{"Id":"11200872470","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:28:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8075","RelatedDescription":"Closed issue \"Downloads count of IPackageSearchMetadata \" (#8075) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nI using Nuget.Protocol.Core.v3.dll in a .NET Standard lib for my powershell cmdlets like.\r\n\r\n```cs\r\n private IObservable<IPackageSearchMetadata> PackageSourceSearchMetadatas(string source,string name,\r\n            List<Lazy<INuGetResourceProvider>> providers){\r\n            var metadatas = new SourceRepository(new PackageSource(source), providers)\r\n                .GetResourceAsync<PackageMetadataResource>().ToObservable()\r\n                .SelectMany(resource => resource\r\n                    .GetMetadataAsync(name, IncludePrerelease, IncludeUnlisted, NullLogger.Instance,CancellationToken.None).ToObservable()\r\n                    .SelectMany(enumerable => enumerable.ToArray())\r\n                );\r\n            return metadatas;\r\n        }\r\n```\r\n\r\nthe method works fine and can list all metadat, however for Nuget.org the DownloadsCount is null and for my custom Nuget.Server is -1. Is there a way to make it work with Nuget.Protocol.Core.v3.dll?"},{"Id":"11200871457","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:28:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8307","RelatedDescription":"Closed issue \"PackageReference from a Build Package\" (#8307) at NuGet/Home","RelatedBody":"Hello,\r\ni know that package references inside build packages are explicitly disabled, to avoid endless restores. I read, that it might be possible to get package references inside build packages working by restoring a second time. Can somebody explain, whats the best way to do that? My scenario is simple: I have a build package and based on some conditions i want that a second package is referenced automatically. So making the second package as a dependency of the build package won't work, because of the conditional thing.\r\n\r\nMany thanks in advance."},{"Id":"11200869322","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:27:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8548","RelatedDescription":"Closed issue \"cannot install xamarin.googleplayservice\" (#8548) at NuGet/Home","RelatedBody":"I tried to install Xamarin.GooglePlayServices.Base. \r\nBut these error appears.\r\n\r\nError\t\tPackage restore failed. Rolling back package changes for 'PushNotification'.\t\t\t\t\r\nError\tNU1202\tPackage Xamarin.GooglePlayServices.Base 71.1610.0 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Package Xamarin.GooglePlayServices.Base 71.1610.0 supports: monoandroid90 (MonoAndroid,Version=v9.0)\tPushNotification\tF:\\Task\\Android\\Xamarin\\PushNotification\\PushNotification\\PushNotification\\PushNotification.csproj\t1\t\r\n\r\nPlease help me."},{"Id":"11200868719","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:27:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8624","RelatedDescription":"Closed issue \"Automatically reinstall packages during build in Visual Studio\" (#8624) at NuGet/Home","RelatedBody":"There is a huge monolithic application on which 400 developers actively work. It's an ASP.NET Web Application project and it has 35 modules and 1 `.sln` file. Each module has 5 class library projects and is located under its folder. Modules depend on each other via project references. I have to say that there is a dependency hell that makes development difficult.\r\n\r\nNow, I'm replacing these project references with nuget references and am creating nuget package for every projects and `.sln` file for every module so that developers can focus on their modules and work on small projects instead of a huge monolithic. My aim is to increase dependency between modules with using messaging queue or streaming in the future. In that scenario I'll remove nuget references from projects but, I can't say when it'll be possible.\r\n\r\nAnyway, I'm creating 5 nuget packages for one module and install these packages to ASP.NET Web Application project. After every commit, I create a new version of nuget packages with commit id like `1.0.0-beta.1871248`. It seems that I'll be in trouble with this versioning, because I want every module and web application project to work with latest versions of other modules. In order to do that, developers need to update nuget packages in Visual Studio Package Manager. And right there I have to say that there is a version hell :) To solve this problem, I've decided to create nuget packages with only one specific version like `1.0.0-beta` and [reinstall ](https://docs.microsoft.com/en-us/nuget/consume-packages/reinstalling-and-updating-packages) every packages during build from Visual Studio but there is no easy way to achieve this.\r\n \r\nIt seems that [Package restore in Visual Studio](https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore#enable-and-disable-package-restore-in-visual-studio) does not use MSBuild targets. It would be easier if there were some MSBuild targets for that purpose, I could override one of them and just delete packages folder before restoring. So, here is my workaround:\r\n\r\nI've disabled automatically check for missing packages during build in Visual Studio with adding `automatic` key to `NuGet.Config` to avoid double installation.\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org-proxy\" value=\"http://internal-nexus/repository/nuget.org-proxy/\" />\r\n    <add key=\"nuget-hosted\" value=\"http://internal-nexus/repository/nuget-hosted/\" />\r\n    <add key=\"automatic\" value=\"False\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <add key=\"nuget.org\" value=\"true\" />\r\n    <add key=\"Microsoft and .NET\" value=\"true\" />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n\r\nI've added new target to `.csproj` file to delete packages folder and reinstall packages. I'm doing this for only debug mode because my CI/CD pipeline never gets packages folder from source control. \r\n\r\n```\r\n<Target Name=\"DeletePackagesFolderTarget\" BeforeTargets=\"Build\" Condition=\"'$(Configuration)' == 'Debug'\">\r\n  <Exec Command=\"rd /s /q $(SolutionDir)\\packages\" />\r\n  <Exec Command=\"$(SolutionDir)\\nuget\\nuget.exe restore $(SolutionPath)\" />\r\n</Target>\r\n```\r\n\r\nIt would be great if I could make it happen by just adding a key to `NuGet.Config`. It would be perfect if I could set it for one package source.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console):\r\n\r\nNuGet version (x.x.x.xxx): 4.9.2.5706\r\n\r\nVS version (if appropriate): Enterprise 2017 Version 15.9.14\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1703\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n"},{"Id":"11200866231","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:26:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7805","RelatedDescription":"Closed issue \"XML documentation files not Published for Dependency DLLS\" (#7805) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen publishing a WebApi that references a dependency NuGet package, the XML comment files for dependency packages are not copied to the Publish folder.\r\n\r\nThis happens in the official Microsoft Docker builds.\r\n\r\n```\r\nFROM microsoft/dotnet:2.1-sdk AS build-env\r\nARG VERSION\r\nWORKDIR /app\r\nCOPY . ./\r\nRUN dotnet restore\r\nRUN dotnet publish /p:Version=${VERSION} -c Release -o out \r\nRUN ls -lR ~/.nuget/packages\r\nRUN ls -lR /app/customer/out\r\n```\r\nThe NuGet cache folder contains the following for the dependency package, notice the XML is not extracted.\r\n\r\n```\r\n/root/.nuget/packages/tp.net.core:\r\ntotal 0\r\ndrwxr-xr-x. 3 root root 117 Feb 15 13:48 1.0.82\r\n\r\n/root/.nuget/packages/tp.net.core/1.0.82:\r\ntotal 288\r\n-rw-r--r--. 1 root root 281585 Feb 15 13:48 tp.net.core.1.0.82.nupkg\r\n-rw-r--r--. 1 root root     88 Feb 15 13:48 tp.net.core.1.0.82.nupkg.sha512\r\n-rwxrw-rw-. 1 root root   4447 Feb 14 14:59 tp.net.core.nuspec\r\ndrwxr-xr-x. 3 root root     28 Feb 15 13:48 lib\r\n\r\n/root/.nuget/packages/tp.net.core/1.0.82/lib:\r\ntotal 0\r\ndrwxr-xr-x. 2 root root 54 Feb 15 13:48 netstandard2.0\r\n\r\n/root/.nuget/packages/tp.net.core/1.0.82/lib/netstandard2.0:\r\ntotal 624\r\n-rwxrw-rw-. 1 root root 460800 Feb 14 14:59 TP.Net.Core.dll\r\n-rwxrw-rw-. 1 root root 173892 Feb 14 14:59 TP.Net.Core.pdb\r\n```\r\n\r\n/app/customer/out only contains the DLL and the PDB\r\n\r\nI tried microsoft/dotnet:2.1-sdk, microsoft/dotnet:2.1-sdk-alpine, microsoft/dotnet:2.2-sdk, all showed the same behaviour.\r\n\r\nPublishing from a Windows Desktop, or MacOs desktop gets the correct result, with the dependency package's XML file extracted and copied into the publish folder  \r\n\r\nContents of the nupkg\r\n```\r\nMetadata:\r\n  id: TP.Net.Core\r\n  version: 1.0.82\r\n  authors: TP.Net.Core\r\n  owners: TP.Net.Core\r\n  requireLicenseAcceptance: 'false'\r\n  description: Package Description\r\n  copyright: '2018'\r\nDependencies:\r\n  .NETStandard2.0:\r\n \r\n...\r\n\r\nContents:\r\n  - File:    _rels/.rels\r\n  - File:    [Content_Types].xml\r\n  - File:    TP.Net.Core.nuspec\r\n  - File:    lib/netstandard2.0/TP.Net.Core.dll\r\n  - File:    lib/netstandard2.0/TP.Net.Core.pdb\r\n  - File:    lib/netstandard2.0/TP.Net.Core.xml\r\n  - File:    package/services/metadata/core-properties/0a83a049e8a84378843f907cf66f8d8f.psmdcp\r\n```\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\ndotnet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet nuget --version\r\nNuGet Command Line\r\n4.8.1.0\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\ndotnet --version\r\n2.1.403\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. create a netstandard2.0 class lib, create a NuGet package, publish it (Nexus, NuGet)\r\n\r\n2. add properties to the project\r\n```\r\n      <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n```\r\n3. create a console app, reference the class lib\r\n\r\n4.  Add the following target to the console app project\r\n```\r\n  <Target Name=\"_ResolvePublishNuGetPackagePdbsAndXml\" AfterTargets=\"RunResolvePublishAssemblies\">\r\n    <ItemGroup>\r\n      <ResolvedFileToPublish Include=\"@(ResolvedAssembliesToPublish->'%(RootDir)%(Directory)%(Filename).pdb')\" RelativePath=\"$([System.IO.Path]::ChangeExtension(%(ResolvedAssembliesToPublish.DestinationSubPath), '.pdb'))\" DestinationSubPath=\"$([System.IO.Path]::ChangeExtension(%(ResolvedAssembliesToPublish.DestinationSubPath), '.pdb'))\" Condition=\"'%(ResolvedAssembliesToPublish.PackageName)' != ''                     and Exists('%(RootDir)%(Directory)%(Filename).pdb')\" />\r\n      <ResolvedFileToPublish Include=\"@(ResolvedAssembliesToPublish->'%(RootDir)%(Directory)%(Filename).xml')\" RelativePath=\"$([System.IO.Path]::ChangeExtension(%(ResolvedAssembliesToPublish.DestinationSubPath), '.xml'))\" DestinationSubPath=\"$([System.IO.Path]::ChangeExtension(%(ResolvedAssembliesToPublish.DestinationSubPath), '.xml'))\" Condition=\"'%(ResolvedAssembliesToPublish.PackageName)' != ''                     and Exists('%(RootDir)%(Directory)%(Filename).xml')\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n5.  Publish the project in Visual Studio/Rider/VsCode, the XML file for the class lib is published\r\n\r\n6.  Build the project using Docker.\r\n\r\n```\r\nFROM microsoft/dotnet:2.1-sdk AS build-env\r\n\r\nARG VERSION\r\n\r\nWORKDIR /app\r\n\r\nCOPY . ./\r\nRUN dotnet publish /p:Version=${VERSION} -c Release -o out \r\n\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /\r\nCOPY --from=build-env /app/customer/out .\r\nENTRYPOINT [\"dotnet\", \"customer.dll\"]\r\n```\r\n\r\nExamine the image, notice the XML file for the class library is missing\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nverbose logs added below\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nproject added below\r\n\r\n"},{"Id":"11200854356","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:23:32","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7904","RelatedDescription":"Closed issue \"IconUrl defined as AssemlyMetadata isn't copied into generated nuspec file\" (#7904) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet.exe version (4.9.4.5839)\r\n\r\nAt some point NuGet got the ability to read authors, owners and id from AssemblyMetadata attribute in AssemblyInfo.cs but other metadata like iconUrl are still not read from there. I guess something like this needs to be added to AssemblyMetadataExtractor.ExtractMetadata\r\n\r\n`if (builder.Properties.ContainsKey(\"iconUrl\")) builder.IconUrl = builder.Properties[\"iconUrl\"];`\r\n\r\nThis also goes for metadata like projectUrl, licenceUrl, summary, tags...\r\n"},{"Id":"11200802643","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:08:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7012","RelatedDescription":"Closed issue \"Path to non-existing NuGetPackagesFallback folder generated into .nuget.g.props\" (#7012) at NuGet/Home","RelatedBody":"MSBuild 15.7.179.6572\r\n\r\nMSBuild of an SDK-style project with PackageReference fails because the generated .csproj.nuget.g.props file contains this line:\r\n\r\n```\r\n<NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\kirillo\\.nuget\\packages\\;C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackagesFallback\\</NuGetPackageFolders>\r\n```\r\n\r\nThe NuGetPackagesFallback folder doesn't exist on my machine, causing NuGet to fail the build with the exception:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.201\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018: The \"ResolvePackageDependencies\" task failed unexpectedly.\r\nNuGet.Packaging.Core.PackagingException: Unable to find fallback package folder 'C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackagesFallback\\'.\r\n   at NuGet.Packaging.FallbackPackagePathResolver..ctor(String userPackageFolder, IEnumerable`1 fallbackPackageFolders)\r\n   at Microsoft.NET.Build.Tasks.NuGetPackageResolver.CreateResolver(LockFile lockFile, String projectPath)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.get_PackageResolver()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.ResolvePackagePath(LockFileLibrary package)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.GetPackageAndFileDefinitions()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [C:\\monodevelop\\main\\external\\RefactoringEssentials\\RefactoringEssentials\\RefactoringEssentials.csproj]\r\n```\r\n\r\nNone of the nuget.config files on my machine contain anything related to the fallback folder.\r\n\r\nI don't have any environment variables set that start with NuGet*.\r\n\r\nMy VS offline package cache is a similar folder, but without the fallback:\r\n![image](https://user-images.githubusercontent.com/679326/41178607-a6f49062-6b1c-11e8-8b03-052d58ae5c01.png)\r\n\r\nWhy does NuGet decide to generate that non-existing folder into my .g.props files? \r\n\r\nWhere does that value come from?"},{"Id":"11200765228","Type":"IssuesEvent","CreatedAt":"2020-01-03T23:00:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7911","RelatedDescription":"Closed issue \"PM UI - right click on tab heading and clicking \" (#7911) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"11200740499","Type":"IssuesEvent","CreatedAt":"2020-01-03T22:54:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8305","RelatedDescription":"Closed issue \"Ambiguity with multiple files with the same license filename\" (#8305) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.0.2.5988\r\n\r\nOS version: Microsoft Windows [Version 10.0.18917.1000]\r\n\r\nWorked before? No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nTake the following nuspec:\r\n\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<package>\r\n  <metadata>\r\n    <id>test.license.nuspec</id>\r\n    <version>0.0.1</version>\r\n    <title>test.license.nuspec</title>\r\n    <authors>dominoFire</authors>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package test for license file</description>\r\n    <releaseNotes>Test of license file</releaseNotes>\r\n    <copyright>Copyright 2019</copyright>\r\n    <tags>test license</tags>\r\n    <license type=\"file\">license.txt</license>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"cell\\*.txt\" />\r\n    <file src=\"wall\\*.txt\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\nSave the nuspec in the following folder structure:\r\n\r\n```\r\nC:.\r\n│   Package.nuspec\r\n│\r\n├───cell\r\n│       license.txt\r\n│       wawa.txt\r\n│\r\n└───wall\r\n        license.txt\r\n        xyz.txt\r\n```\r\n\r\nBoth files will be present in the nupkg but, it's not clear which file should be referred as the license file.\r\n"},{"Id":"11200734037","Type":"IssuesEvent","CreatedAt":"2020-01-03T22:52:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8833","RelatedDescription":"Closed issue \"Downgrading transitive PackageReferences\" (#8833) at NuGet/Home","RelatedBody":"_From @jhudsoncedaron on Friday, November 15, 2019 7:52:06 PM_\r\n\r\nWe have a DLL that contains downgrade instructions, so despite being built in the project containing the latest version, it must inherently be loadable on the oldest version we ever shipped. In order to do so, we used PackageReference Update= to pin reference of dlls when building that version.\r\n\r\nUnfortunately this doesn't really work for some reason we don't know. The Update= version force is ignored and the higher version in the dependent dll is used instead. This actually causes the dynamic load to fail whenever we need to update the packages. For some reason, despite the same artifact being present in the dll refrenced by PackageVersion, the dynamic load succeeds there (or we would have noticed the very first time we tried this).\r\n\r\nDon't let netstandard2.0 fool you; we are building with the 3.0 toolchain and the executable (omitted from the sample) is linked against netcoreapp3.0. You can check the dependencies of DynamicLoaded.dll with ildasm. It should reference Demo.dll version 1.0.0 but it references Demo.dll version 2.0.0\r\n\r\nThe real If.dll is not an interface-only dll. It contains quite a bit of code for upgrade and downgrade, and the current version of If.dll used during upgrade can't function with the older version of Demo.dll.\r\n\r\nThis issue is newly discovered a few days ago, thankfully not by a customer.\r\n\r\n[downgradedemo.zip](https://github.com/dotnet/sdk/files/3852941/downgradedemo.zip)\r\n\r\n\r\n_Copied from original issue: dotnet/sdk#3918_"},{"Id":"11200725432","Type":"IssuesEvent","CreatedAt":"2020-01-03T22:50:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8470","RelatedDescription":"Closed issue \"NU5030 error when pack package with NuGet.exe\" (#8470) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n- NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n- 5.1.0.6013\r\n\r\ndotnet.exe --version (if appropriate):\r\n- 2.2.401\r\n\r\nVS version (if appropriate):\r\n- VS 2019 16.2.2\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n- Windows 10, V18362.295\r\n\r\nWorked before? If so, with which NuGet version:\r\nNo\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. My .nuspec use embeded license like this, which the licence file is located in the parent folder\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package>\r\n  <metadata>\r\n    ...\r\n    <license type=\"file\">LICENSE</license>\r\n    ...\r\n  </metadata>\r\n  <files>\r\n    <file src=\"..\\LICENSE\" target=\"\"/>\r\n    ...\r\n  </files>\r\n</package>\r\n```\r\n\r\n2. run nuget pack command, and throw the NU5030 error:\r\nError NU5030: The license file 'LICENSE' does not exist in the package.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"11200717669","Type":"IssuesEvent","CreatedAt":"2020-01-03T22:48:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8789","RelatedDescription":"Closed issue \"NuGet.Configuration dependency (System.Security.Cryptography.ProtectedData) is not copied to output directory\" (#8789) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.Configuration\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1\r\n\r\ndotnet.exe --version: 3.0.100\r\n\r\nVS version: 16.3.1\r\n\r\nOS version: Win 10 1903\r\n\r\nWorked before? If so, with which NuGet version: Not that I know\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new .netstandard2.0 lib\r\n\r\n2. Reference NuGet.Configuration\r\n\r\n3. Add the following MsBuild properties to the csproj:\r\n`<GeneratePackageOnBuild>true</GeneratePackageOnBuild>`\r\n`<IsTool>True</IsTool>`\r\n`<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>`\r\n\r\nSystem.Security.Cryptography.ProtectedData is not included in output directory, even if it is listed as a dependency. \r\nAs a result I get a FileNotFoundException when trying to load ApiKeys from NuGet.config.\r\n"},{"Id":"11200642337","Type":"IssuesEvent","CreatedAt":"2020-01-03T22:30:23","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1518","RelatedDescription":"Closed issue \"Alt+S in VS Tools->Options->NuGet Package Manager->\"Package Sources\" jumps to wrong text box\" (#1518) at NuGet/Home","RelatedBody":"VS\nTools->Options->NuGet Package Manager -> Package Sources\nPress Alt+S\nFocus should be set to the Source text box. Instead, it focuses on the Name textbox.\n\n![image](https://cloud.githubusercontent.com/assets/3548/10287939/dbbae258-6b4a-11e5-96f0-be3b41967eac.png)\n"},{"Id":"11200283763","Type":"IssuesEvent","CreatedAt":"2020-01-03T21:16:28","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8998","RelatedDescription":"Opened issue \"Signing: Set up development/project management plan and epics\" (#8998) at NuGet/Home","RelatedBody":"This is a very large project, and we need to spend some time just managing the tasks that need done and aim our cannons towards releases at the priorities we need them.\n\nThe following sub-epics to #7939 should be created, each representing an individual deliverable, and will be done in order:\n\n### Signature verification during restore\nThis is where the bulk of verification tests will be ported, and is simply a matter of enabling this functionality and making sure all associated tests pass. For any tests that currently require signing functionality, we should make it not require any signing in the test, and instead opt to use static data that can be verified on each platform the tests are run.\n\n### Implement `dotnet verify`\nHot on the tail of signature verification will be the `dotnet verify` command, which should be released pretty soon after overall verification ships. As part of this task, we should do design work on **both** `dotnet verify` and `dotnet sign` to make sure the commands have a good, complementary UX, even though we won't be shipping `dotnet sign` yet.\n\n### Implement `dotnet sign`\nThis is the final, big epic that will involve re-enabling all the signing tests and making sure they all pass. Again, the tests should stop relying on calling verification code and should simply be checks against static, pre-generated signed data."},{"Id":"11200277337","Type":"IssuesEvent","CreatedAt":"2020-01-03T21:15:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8997","RelatedDescription":"Opened issue \"Clearly call out that the NuGet package manager settings are not part of import and export settings\" (#8997) at NuGet/Home","RelatedBody":"Motivation from https://developercommunity.visualstudio.com/content/problem/860482/nuget-package-sources-not-included-in-settings.html"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-01-04T05:30:47.6032178Z","RunDurationInMilliseconds":2195}