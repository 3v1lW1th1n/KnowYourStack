{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10529187913","Type":"IssuesEvent","CreatedAt":"2019-10-01T00:14:34","Actor":"karann-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7594","RelatedDescription":"Opened issue \"Surface PackageType in the search API and NuGet.org search syntax\" (#7594) at NuGet/NuGetGallery","RelatedBody":"Users can specify a package type - https://docs.microsoft.com/en-us/nuget/create-packages/set-package-type\r\n\r\nIt should be possible to search for all DotnetCliTool packages on NuGet.org\r\n\r\nProposal\r\nExpose a new query parameter called  `packageType`\r\n\r\nFor example, the following query would return all dotnet CLI tools on NuGet.org that match the search term\r\n```\r\nhttps://azuresearch-usnc.nuget.org/query?q=codegenerator&packageType=DotnetCliTool\r\n```"},{"Id":"10528356760","Type":"IssuesEvent","CreatedAt":"2019-09-30T21:23:56","Actor":"nkolev92","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7593","RelatedDescription":"Opened issue \"NuGetGallery (and other service builds) do not lock down the sources properly\" (#7593) at NuGet/NuGetGallery","RelatedBody":"### For issues regarding the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), file a bug on [NuGet Home](https://github.com/nuget/home/issues).\r\n\r\n### Describe the bug\r\n\r\nNuGetGallery builds do not lock down the sources. \r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/dev/NuGet.config\r\nshould be: \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <config>\r\n    <add key=\"repositorypath\" value=\".\\packages\" />\r\n  </config>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"True\" />\r\n    <add key=\"automatic\" value=\"True\" />\r\n  </packageRestore>\r\n  <packageSources>\r\n    <clear/>\r\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"nugetbuild\" value=\"https://dotnet.myget.org/F/nuget-build/api/v3/index.json\" />\r\n    <add key=\"dotnetcore\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n  <activePackageSource>\r\n    <add key=\"All\" value=\"(Aggregate source)\" />\r\n  </activePackageSource>\r\n  <disabledPackageSources>\r\n\t    <clear />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n\r\nNote the clear tags in disabledPackageSources and package sources. \r\n\r\n//cc @loic-sharma @joelverhagen \r\n\r\n### To Reproduce\r\nRun restore :)\r\n\r\n### Expected behavior\r\nDon't use machine specific sources. \r\n\r\n### Screenshots\r\nN/A\r\n\r\n### Additional context\r\nEncountered this while investigating the issues with builds in the NuGet Deployment repo. \r\nI can fix the gallery one with a PR, but I can't easily change all the public/private repos as I simply don't know them all :) "},{"Id":"10528246291","Type":"IssuesEvent","CreatedAt":"2019-09-30T21:07:45","Actor":"devlead","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7592","RelatedDescription":"Opened issue \"Package download stats not updating\" (#7592) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\n2 days ago we released Cake version 0.35.0, normally it should at least be a couple of thousands of downloads, it's still 0.\r\n\r\n### To Reproduce\r\n\r\nhttps://www.nuget.org/packages/Cake.Tool/0.35.0\r\nhttps://www.nuget.org/packages/Cake.CoreCLR/0.35.0\r\nhttps://www.nuget.org/packages/Cake/0.35.0\r\n\r\n### Expected behavior\r\n\r\nDownload count to increase each day.\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/1647294/65917169-0dc50400-e3d7-11e9-8bdb-c0ed1bb2e1b7.png)\r\n![image](https://user-images.githubusercontent.com/1647294/65917004-bb83e300-e3d6-11e9-85b5-fe15e387906c.png)\r\n![image](https://user-images.githubusercontent.com/1647294/65917094-ea9a5480-e3d6-11e9-8db5-85357e39b3b1.png)\r\n"},{"Id":"10528156384","Type":"PullRequestEvent","CreatedAt":"2019-09-30T20:55:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7591","RelatedDescription":"Merged pull request \"[HOTFIX] Show pending organization members\" (#7591) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10527944154","Type":"PullRequestEvent","CreatedAt":"2019-09-30T20:26:34","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7591","RelatedDescription":"Opened pull request \"[HOTFIX] Show pending organization members\" (#7591) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10527510745","Type":"IssuesEvent","CreatedAt":"2019-09-30T19:28:06","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7590","RelatedDescription":"Opened issue \"Orchestrator validation sets can be stuck when two processor copies happen in parallel\" (#7590) at NuGet/NuGetGallery","RelatedBody":"## Bug Hit Count\r\n\r\nEnvironment | Count\r\n-- | --\r\nDEV | 1\r\nINT | 0\r\nPROD | 0\r\n\r\n## Explanation\r\n\r\nA validation set (`dccf5bef-f050-4655-a3df-148ae192605e`) became stuck when two parallel threads we processing the completion of the `ScanAndSign` processor. From the orchestrator's perspective, this was the sequence of events:\r\n\r\nThread | Event\r\n-- | --\r\n1 | Received message\r\n1 | Determined `ScanAndSign` is complete\r\n1 | Start the copy of the `ScanAndSign` .nupkg to the `validation-set` location\r\n2 | Received message\r\n2 | Determined `ScanAndSign` is complete\r\n2 | Start the copy of the `ScanAndSign` .nupkg to the `validation-set` location\r\n1 | Clean up the `ScanAndSign` .nupkg\r\n1 | Start `PackageSigningValidator2`\r\n1 | Complete message\r\n2 | **Copy fails with source missing**\r\n\r\nWhen the copy on thread 2 fails, it has already set the destination blob to zero bytes.\r\n\r\nThe copy process uses an empty etag condition so it has no problem clobbering the validation set package with a \"duplicate\" copy operation. The line of code is here:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/c3912a04df42ab4146b1cd8069f3baf8a3793d9b/src/NuGet.Services.Validation.Orchestrator/ValidationPackageFileService.cs#L226\r\n\r\nWhen the `PackageSigningValidator2` wakes up to validate the package, it sees an empty blob and fails.\r\n\r\n## Mitigation\r\n\r\nIf this happens a lot, we can do our best to reduce message duplication by turning off queue-back. Note that this will increase validation times.\r\n\r\n## Fix\r\n\r\nI talked to @agr and we came up with three solutions, one which was ruled out.\r\n\r\n1. Add a `validation-set` package etag so that one of the copies fails with etag mismatch.\r\n1. Add a lease on the `validation-set` package.\r\n1. ~~Don't clean up the `ScanAndSign` copy and less blob storage cleanup do it's thing~~. We can't do this one because you can still have a slow processor completion clobber a subsequent blob. For example, processor A is being completed still but the `validation-set` blob has already been updated with work from processor B."},{"Id":"10526095433","Type":"PullRequestEvent","CreatedAt":"2019-09-30T16:20:22","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7581","RelatedDescription":"Merged pull request \"Batch sign the binaries\" (#7581) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1821"},{"Id":"10514022511","Type":"IssuesEvent","CreatedAt":"2019-09-27T22:29:54","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7589","RelatedDescription":"Opened issue \"Stats.CollectAzureChinaCDNLogs fails if blob is already in archive\" (#7589) at NuGet/NuGetGallery","RelatedBody":"Stats.CollectAzureChinaCDNLogs fails if it tries to copy the blob into the archive folder, but the blob is already in the archive folder. This causes the job to eternally get stuck on that blob, because it always fails to process it.\n\nConsider the following:\n1. Job begins processing blob\n2. Job copies blob into folder monitored by ImportCdnStatistics\n3. Job copies blob into archive folder\n4. Job crashes (reason unknown...likely intermittent)\n5. Job restarts and begins processing blob again\n6. Job copies blob into folder monitored by ImportCdnStatistics\n7. Job fails because blob is already in archive folder\n8. Go back to step 5.\n\nThe job only processes 4 blobs at once, and processes the oldest blobs first. After this bug occurs, the capacity of the job is essentially reduced from 4 blobs per run to 3 blobs per run. Eventually, after the bug occurs 4 times, the job gets stuck on the same blobs eternally and stops processing new blobs."},{"Id":"10513995824","Type":"PullRequestEvent","CreatedAt":"2019-09-27T22:23:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7587","RelatedDescription":"Merged pull request \"[SDL] Validate HTTPS certificates in functional tests\" (#7587) at NuGet/NuGetGallery","RelatedBody":"Test: [NuGetBuild#62604](https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=62604) ([Build](https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3088470), [Release](https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=460628))\r\n\r\nPart of https://github.com/nuget/engineering/issues/2686"},{"Id":"10512332929","Type":"IssuesEvent","CreatedAt":"2019-09-27T17:38:18","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7588","RelatedDescription":"Opened issue \"[Gravatar Proxy] Add functional test\" (#7588) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10512195297","Type":"IssuesEvent","CreatedAt":"2019-09-27T17:16:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6622","RelatedDescription":"Reopened issue \"Preview of new nuget package. Incorrect display of multiline description and release note\" (#6622) at NuGet/NuGetGallery","RelatedBody":"Preview page displays a multiline text (description and release note of new package) in single line.\r\n\r\nThe page of published package displays a multiline text without problems.\r\n\r\nIt is creates some inconvenience.\r\n\r\nSee screenshots.\r\n![2018_11_04--nuget-01-preview_page](https://user-images.githubusercontent.com/4594554/47965093-92869100-e053-11e8-8756-72e9c2b750ce.PNG)\r\n![2018_11_04--nuget-02-package_page](https://user-images.githubusercontent.com/4594554/47965094-92869100-e053-11e8-8d56-674c19f5b190.PNG)\r\n"},{"Id":"10512187388","Type":"IssuesEvent","CreatedAt":"2019-09-27T17:15:29","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6622","RelatedDescription":"Closed issue \"Preview of new nuget package. Incorrect display of multiline description and release note\" (#6622) at NuGet/NuGetGallery","RelatedBody":"Preview page displays a multiline text (description and release note of new package) in single line.\r\n\r\nThe page of published package displays a multiline text without problems.\r\n\r\nIt is creates some inconvenience.\r\n\r\nSee screenshots.\r\n![2018_11_04--nuget-01-preview_page](https://user-images.githubusercontent.com/4594554/47965093-92869100-e053-11e8-8756-72e9c2b750ce.PNG)\r\n![2018_11_04--nuget-02-package_page](https://user-images.githubusercontent.com/4594554/47965094-92869100-e053-11e8-8d56-674c19f5b190.PNG)\r\n"},{"Id":"10512187216","Type":"PullRequestEvent","CreatedAt":"2019-09-27T17:15:27","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7584","RelatedDescription":"Merged pull request \"[ReleasePrep][2019.09.26]RI of dev into master\" (#7584) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10528494863","Type":"IssuesEvent","CreatedAt":"2019-09-30T21:45:46","Actor":"xuzhg","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8647","RelatedDescription":"Opened issue \"Certificate error on https://nuget.smbsrc.net\" (#8647) at NuGet/Home","RelatedBody":"It's failed to upload the symbols to the symbols sever, the error message:\r\n\r\n![image](https://user-images.githubusercontent.com/9426627/65919348-e4818500-e390-11e9-87df-4ac052329dcc.png)\r\n\r\n\r\nI tried the nuget.exe 5.2.0 version. It's same error message. \r\n\r\nHow can we upload the symbols server again?\r\n"},{"Id":"10527679402","Type":"IssuesEvent","CreatedAt":"2019-09-30T19:50:51","Actor":"jirikopecky","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8646","RelatedDescription":"Opened issue \"Restoring packages from GitHub Package Repository generates warnings\" (#8646) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe, dotnet restore and Visual Studio\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.6260\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 16.3.1\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 v1903 (18362.356) and Linux Docker container (sdk:3.0-alpine)\r\n\r\nWorked before? If so, with which NuGet version: first try at this\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Configure solution to use GitHub package repository via nuget.config\r\n2. Add package references to the project (for example to Newtonsoft.Json)\r\n3. Restore the project witch caches cleared\r\n3.1. Either run `dotnet nuget locals all --clear` or build inside Docker\r\n4. Get warning like this: `NuGet.targets(123,5): warning : NAME_UNKNOWN:Package with name 'newtonsoft.json' was not found in the package source 'organizationName' [/path/to/solution.sln]\r\n\r\n## Other suggested things\r\n\r\nPackages are actually restored successfully, only these warnings show up with every restore/build commands and I haven't found any way to suppress it.\r\n\r\n### Verbose Logs\r\n\r\nDetailed logs from Docker build of attached project\r\n[docker-build-output.log](https://github.com/NuGet/Home/files/3672963/docker-build-output.log)\r\n\r\n### Sample Project\r\nIssue repro. You need to update nuget.config with GitHub PAT that can download packages.\r\n[nuget-restore-issue-repro.zip](https://github.com/NuGet/Home/files/3672978/nuget-restore-issue-repro.zip)\r\n\r\n"},{"Id":"10527536197","Type":"IssuesEvent","CreatedAt":"2019-09-30T19:31:21","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8597","RelatedDescription":"Reopened issue \"[Test Failure] Clicking “Open Containing Folder” on Web Site project level PM UI goes to solution folder\" (#8597) at NuGet/Home","RelatedBody":"##  Details about Problem\r\nVS Version: Master 29316.39\r\nOS Version: Windows-10-Enterprise-19H1-04-05-2019.\r\nNuGet Version: Dev\\5.4.0.6246\r\n## Detailed repro steps \r\n1. Launch Visual Studio 2019.\r\n2. Create a C# ASP.NET Web Forms Site project and open PM UI for project.\r\n3. Right click the tab “NuGet: WebSite” and click “Open Containing Folder”.\r\n## Expected\r\nClicking “Open Containing Folder” on Web Site project level PM UI should goes to the project’s folder. \r\n## Actual\r\nClicking “Open Containing Folder” on Web Site project level PM UI goes to solution as below screenshot. \r\n![image](https://user-images.githubusercontent.com/40230425/65030123-940e2e80-d971-11e9-9d6a-59f0fee04db1.png)\r\n## Notes\r\n1.The issue repro on all Web Site templates. \r\n2.The issue doesn’t repro on ASP.NET Web Application (.NET Framework) templates. \r\n3. It's not a regression issue.\r\n"},{"Id":"10526913477","Type":"IssuesEvent","CreatedAt":"2019-09-30T18:08:48","Actor":"carpnick","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8645","RelatedDescription":"Opened issue \"Lock File not properly generated - VS and MSBuild Integration\" (#8645) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):**\r\nVS UI, MSBuild CLI, Nuget.exe\r\n\r\n**NuGet version (x.x.x.xxx):**\r\n- nuget version  5.3.0.6260\r\n- MSBuild  version - 16.3.0+0f4c62fea for .NET Framework\r\n   - Nuget CommonExtension installed version - Nuget.Commands.dll - 5.3.0.6251\r\n\r\n**VS version (if appropriate):**\r\n [Information](https://gist.github.com/carpnick/a275bf0be54960cfa8892eeee9916e0c#file-vs-versioning) \r\n\r\n**OS version (i.e. win10 v1607 (14393.321)):**\r\n10.0.17763 Build 17763 -  Windows Server 2019 Datacenter\r\n\r\n**Worked before? If so, with which NuGet version:**\r\nMSbuild based restore - 15.9.21+g9802d43bc3\r\n  - Project dependend on - NuGet.Build.Tasks.Pack 4.9.2\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nRun all these steps from within Visual Studio 2019 (See version info)\r\n1. Create a new .NET solution with a class library (full framework).\r\n2. Add a nuget reference to Newtonsoft.json (any will do)\r\n3. Edit csproj file and add `<RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>`\r\n4. Reload project.  Build.\r\n5.  Validate the packages.lock.json is generated.  See [example](https://gist.github.com/carpnick/a275bf0be54960cfa8892eeee9916e0c#file-packages-lock-json).\r\n6. Edit CSPROJ again, this time add the following line:\r\n` <RestoreLockedMode>true</RestoreLockedMode>`\r\n7. Reload the project, and attempt to rebuild, 2 times.\r\n\r\nError Received:\r\n`Error\tNU1004\tThe packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\t\t\t1\t\t\r\n`\r\n\r\nMSBuild CLI to reproduce: `& 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe' /t:\"clean;Restore\" /p:Configuration=\"Release\" /p:Platform=\"Any CPU\" /p:RestoreLockedMode=\"true\" /p:RestoreNoCache=\"true\"`\r\n\r\nNOTE: We did not stumble on this issue like this, we stumbled on this setting RestoreLockedMode in our CI process to true.  But the above steps produce a reliable easy way to reproduce.\r\n\r\n\r\n## Other suggested things\r\n\r\nOther notes:\r\n\r\n- When you allow MSBuild or VS to ForceEvaluate - it keeps generating incorrect package lock files.\r\n- nuget.exe works as expected  - CLI `C:\\nuget.exe restore -lockedmode -NoCache`\r\n- **Root Cause Identified** - Copied Nuget.Clients Source privately from this [tag](https://github.com/NuGet/NuGet.Client/tree/5.3.0.6251).\r\n    - At [this location](https://github.com/NuGet/NuGet.Client/blob/5.3.0.6251/src/NuGet.Core/NuGet.ProjectModel/ProjectLockFile/PackagesLockFileUtilities.cs#L105-L108) I added [this code](https://gist.github.com/carpnick/a275bf0be54960cfa8892eeee9916e0c#file-privatepatch) to my private copy.  When I run with my private version with Visual Studio or MSBuild CLI, I get the [following](https://gist.github.com/carpnick/a275bf0be54960cfa8892eeee9916e0c#file-msbuild-custom-output).  Notice the order is different.  When I run with my private version of nuget.exe I get [this](https://gist.github.com/carpnick/a275bf0be54960cfa8892eeee9916e0c#file-custom-nuget-exe).\r\n\r\n### Workaround available\r\n - Modify lock file after it is generated and modify the order of the .NETFrameworks. (This would be very painful from a developer point of view, but does offer a workaround).\r\n - Another option is to not use MSbuild /t:restore and instead use nuget.exe\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n[ExampleSolution.zip](https://github.com/NuGet/Home/files/3672626/ExampleSolution.zip)\r\n"},{"Id":"10526688192","Type":"IssuesEvent","CreatedAt":"2019-09-30T17:38:59","Actor":"3F","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8644","RelatedDescription":"Opened issue \"Unnecessary NU1202. PackageReference versus Reference\" (#8644) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nCan someone clarify NU1202 restriction? I still don't understand, Why this https://github.com/dotnet/standard/blob/master/docs/versions.md#net-standard-versions is not possible for nuget project?\r\n\r\nJust for the cases like this https://github.com/3F/MvsSln/pull/21 and other?\r\n\r\nWhy/ if **I can** like this:\r\n\r\n```xml\r\n<ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.1' \">\r\n  <Reference Include=\"Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\">\r\n    <HintPath>..\\packages\\microsoft.build.15.9.20\\lib\\net46\\Microsoft.Build.dll</HintPath>\r\n    <Private>True</Private>\r\n  </Reference>\r\n</ItemGroup>\r\n```\r\n\r\nBut **not** like this:\r\n\r\n```xml\r\n<ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.1' \">\r\n  <PackageReference Include=\"Microsoft.Build\" Version=\"15.9.20\" />\r\n</ItemGroup>\r\n```\r\n\r\nThanks,\r\n\r\n\r\n\r\n```\r\nNuGet Package Manager 5.2.0\r\nVisualStudio.16.Release/16.2.2+29209.62\r\n```\r\n\r\n```\r\nNuGet Package Manager 4.6.0\r\nVisualStudio.15.Release/15.9.16+28307.858\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-01T05:30:48.1161376Z","RunDurationInMilliseconds":2753}