{"Data":{"Blog":{"FeedItems":[{"Title":"Using .NET and Docker Together – DockerCon 2019 Update","PublishedOn":"2019-04-30T05:19:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"DockerCon 2019 is being held this week, in San Francisco. We posted a DockerCon 2018 update last year, and it is time to share how we&#8217;ve improved the experience of using .NET and Docker together...","Href":"https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/","RawContent":null},{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:15:51+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we are making the fourth preview of Entity Framework Core 3.0 available on NuGet, alongside .NET Core 3.0 Preview 4 and ASP.NET Core 3.0 Preview 4. We encourage you to install this preview to...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-4/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 4","PublishedOn":"2019-04-18T22:13:01+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 4. It includes a chart control for Windows Forms, HTTP/2 support, GC updates to use less memory, support for CPU limits with Docker, the addition of...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-4/","RawContent":null},{"Title":"Announcing the .NET Framework 4.8","PublishedOn":"2019-04-18T20:12:27+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"We are thrilled to announce the release of the .NET Framework 4.8 today. It’s included in the Windows 10 May 2019 Update. .NET Framework 4.8 is also available on Windows 7+ and Windows Server 2008...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/","RawContent":null},{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9567257899","Type":"IssuesEvent","CreatedAt":"2019-05-06T02:51:36","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24410","RelatedDescription":"Opened issue \"Test Failure: JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh\" (#24410) at dotnet/coreclr","RelatedBody":"Test **JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh** has failed.\r\n\r\nMessage :\r\n```\r\ncmdLine:/root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh Timed Out\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/JIT/Performance/Reports/JIT.Performance/CodeQuality/Linq/Linq/Linq.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun Linq.exe ''\r\n\r\ncmdLine:/root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh Timed Out\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh\r\nExpected: True\r\nActual:   False\r\n```\r\nStack Trace :\r\n```\r\nat JIT_Performance._CodeQuality_Linq_Linq_Linq_._CodeQuality_Linq_Linq_Linq_sh() in /__w/1/s/bin/tests/Linux.arm64.Release/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs:line 6129\r\n```\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190505.72/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_Linq_Linq_Linq_~2F_CodeQuality_Linq_Linq_Linq_sh"},{"Id":"9567094859","Type":"IssuesEvent","CreatedAt":"2019-05-06T01:43:14","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24409","RelatedDescription":"Opened issue \"[arm64] Test failed: readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\" (#24409) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_gcstress15_tst/53/\r\n\r\n**Failed tests:**\r\nreadytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\r\n"},{"Id":"9567060686","Type":"IssuesEvent","CreatedAt":"2019-05-06T01:27:15","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24408","RelatedDescription":"Opened issue \"[arm64] IOError: getaddrinfo failed\" (#24408) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_jitstress1_tst/53/\r\n\r\n**Log:**\r\n```\r\nRunning tests R2R\r\nSetting RunCrossGen=true\r\nSetting __TestTimeout=900000\r\nSetting CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\nSetting __TestEnv=c:\\users\\helixa~1\\appdata\\local\\temp\\tmpbexshz.bat\r\nDownload and overwrite xunit.console.dll in Core_Root\r\nTraceback (most recent call last):\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2431, in <module>\r\n    sys.exit(main(args))\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2405, in main\r\n    lambda path: do_setup(host_os,\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 538, in create_and_use_test_env\r\n    ret_code = func(test_env.name)\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2414, in <lambda>\r\n    path))\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2363, in do_setup\r\n    run_in_context=unprocessed_args.run_in_context)\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 1124, in run_tests\r\n    urlretrieve(url, zipfilename)\r\n  File \"c:\\python\\lib\\urllib.py\", line 98, in urlretrieve\r\n    return opener.retrieve(url, filename, reporthook, data)\r\n  File \"c:\\python\\lib\\urllib.py\", line 245, in retrieve\r\n    fp = self.open(url, data)\r\n  File \"c:\\python\\lib\\urllib.py\", line 213, in open\r\n    return getattr(self, name)(url)\r\n  File \"c:\\python\\lib\\urllib.py\", line 443, in open_https\r\n    h.endheaders(data)\r\n  File \"c:\\python\\lib\\httplib.py\", line 1049, in endheaders\r\n    self._send_output(message_body)\r\n  File \"c:\\python\\lib\\httplib.py\", line 893, in _send_output\r\n    self.send(msg)\r\n  File \"c:\\python\\lib\\httplib.py\", line 855, in send\r\n    self.connect()\r\n  File \"c:\\python\\lib\\httplib.py\", line 1266, in connect\r\n    HTTPConnection.connect(self)\r\n  File \"c:\\python\\lib\\httplib.py\", line 832, in connect\r\n    self.timeout, self.source_address)\r\n  File \"c:\\python\\lib\\socket.py\", line 557, in create_connection\r\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\r\nIOError: [Errno socket error] [Errno 11001] getaddrinfo failed\r\n```"},{"Id":"9567054317","Type":"IssuesEvent","CreatedAt":"2019-05-06T01:24:18","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24407","RelatedDescription":"Opened issue \"[arm64] Test failed: System.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey\" (#24407) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/33/\r\n\r\n**Failed tests:**\r\nSystem.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey\r\n\r\n**Log:**\r\n```\r\nSystem.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey [FAIL]\r\n      Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : A device attached to the system is not functioning.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\CapiHelper.Windows.cs(1214,0): at Internal.NativeCrypto.CapiHelper.SignValue(SafeProvHandle hProv, SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\RSACryptoServiceProvider.Windows.cs(483,0): at System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] rgbHash, Int32 calgHash)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\RSACryptoServiceProvider.Windows.cs(678,0): at System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Algorithms\\src\\System\\Security\\Cryptography\\RSA.cs(120,0): at System.Security.Cryptography.RSA.TrySignHash(ReadOnlySpan`1 hash, Span`1 destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Algorithms\\src\\System\\Security\\Cryptography\\RSA.cs(201,0): at System.Security.Cryptography.RSA.TrySignData(ReadOnlySpan`1 data, Span`1 destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.netcoreapp.cs(10,0): at System.Security.Cryptography.Rsa.Tests.SignVerify_Span.<>c__DisplayClass0_0.<SignData>b__0(Byte[] dest)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.netcoreapp.cs(26,0): at System.Security.Cryptography.Rsa.Tests.SignVerify_Span.TryWithOutputArray(Func`2 func)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.netcoreapp.cs(10,0): at System.Security.Cryptography.Rsa.Tests.SignVerify_Span.SignData(RSA rsa, Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.cs(83,0): at System.Security.Cryptography.Rsa.Tests.SignVerify.InvalidKeySize_DoesNotInvalidateKey()\r\n```"},{"Id":"9566774334","Type":"PullRequestEvent","CreatedAt":"2019-05-05T22:53:16","Actor":"mjsabby","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24406","RelatedDescription":"Opened pull request \"Fixes AV when accessing LoaderModule for some objects\" (#24406) at dotnet/coreclr","RelatedBody":"`GetGCSafeTypeHandleIfPossible` is called by the Profiler API (and some ETW event code) when the profiler calls `GetClassFromObject`.\r\n\r\nFor whatever reason, some `ObjectID`s (discovered by calling `GetGenerationBounds`) fail in `GetClassFromObject` and an AV occurs when doing `ReadPointer(this, &MethodTable::m_pLoaderModule)`.\r\n\r\nI'm adding a new function that returns NULL instead of AVing. This function is only called from `GetGCSafeTypeHandleIfPossible` which in turn is only called by ProfAPI and ETW code and they both are allowed to return null to their callers."},{"Id":"9566466764","Type":"PullRequestEvent","CreatedAt":"2019-05-05T20:15:21","Actor":"VSadov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24405","RelatedDescription":"Opened pull request \"[Test] Consider remaining unused space in calculation of the next limit when extending a segment.\" (#24405) at dotnet/coreclr","RelatedBody":"Test PR"},{"Id":"9566434841","Type":"PullRequestEvent","CreatedAt":"2019-05-05T20:01:08","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24403","RelatedDescription":"Merged pull request \"Move AsyncMethodBuilder.SetStateMachine to non-generic\" (#24403) at dotnet/coreclr","RelatedBody":"Doesn't need the struct reference\r\n\r\n/cc @stephentoub @jkotas "},{"Id":"9566243609","Type":"PullRequestEvent","CreatedAt":"2019-05-05T18:31:22","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24404","RelatedDescription":"Opened pull request \"Use same Task for Task.CompletedTask and ATMB.Completed\" (#24404) at dotnet/coreclr","RelatedBody":"/cc @stephentoub "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9565484289","Type":"PullRequestEvent","CreatedAt":"2019-05-05T12:54:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11249","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/templating\" (#11249) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190424.1\r\n- **Date Produced**: 4/24/2019 12:53 PM\r\n- **Commit**: 7949e578e828aa16d1491c726c5b536ecfa14e42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19224.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 12:50 PM\r\n- **Commit**: 10a7e623ce57b95db5f420b2cabf59e0d58bf83d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19225.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190429.1\r\n- **Date Produced**: 4/29/2019 12:53 PM\r\n- **Commit**: 03d6acdbfe3cdec39eb4012026ad8d32f5cea6c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19229.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190430.1\r\n- **Date Produced**: 4/30/2019 12:54 PM\r\n- **Commit**: 23006ade4803401de4774f962ff77dbf698bf5c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19230.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190501.1\r\n- **Date Produced**: 5/1/2019 12:48 PM\r\n- **Commit**: 2d6a302797acecc0dd16f413f7e57aaf64439f53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19251.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190501.1\r\n- **Date Produced**: 5/1/2019 12:48 PM\r\n- **Commit**: 2d6a302797acecc0dd16f413f7e57aaf64439f53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19251.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190503.1\r\n- **Date Produced**: 5/3/2019 12:50 PM\r\n- **Commit**: 7a235b8de1dd8229db9b2cf5acc6796cb80d3339\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19253.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:47 PM\r\n- **Commit**: d5996b8bf5c13e43cd21f8c0d31869fc2b75a31e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19254.1\r\n\r\n"},{"Id":"9565469113","Type":"PullRequestEvent","CreatedAt":"2019-05-05T12:47:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11283","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/sdk\" (#11283) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190502.4\r\n- **Date Produced**: 5/3/2019 4:03 AM\r\n- **Commit**: 231a861bd96b5e4fbe287956be76697f5f900680\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19252.4\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190503.3\r\n- **Date Produced**: 5/4/2019 12:00 AM\r\n- **Commit**: 6a8d9c303ad4eb6cfb86a467e992de8b0b4779ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19253.3\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 3:35 PM\r\n- **Commit**: 4cbbca75493efccdb57de63597e3e4ee452471ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19254.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9561606365","Type":"IssuesEvent","CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Opened issue \"Consider asymmetric key import/export API for NS2.1\" (#1178) at dotnet/standard","RelatedBody":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)"},{"Id":"9559532526","Type":"PullRequestEvent","CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Merged pull request \"Move to Azure DevOps for public CI\" (#1177) at dotnet/standard","RelatedBody":""},{"Id":"9554715007","Type":"IssuesEvent","CreatedAt":"2019-05-02T23:09:49","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174) at dotnet/standard","RelatedBody":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?"},{"Id":"9554648645","Type":"PullRequestEvent","CreatedAt":"2019-05-02T22:53:19","Actor":"mmitche","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Opened pull request \"Move to Azure DevOps for public CI\" (#1177) at dotnet/standard","RelatedBody":""},{"Id":"9554557553","Type":"PullRequestEvent","CreatedAt":"2019-05-02T22:31:54","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Opened pull request \"Prevent non-framework code from extending BaseNumberConverter\" (#1176) at dotnet/standard","RelatedBody":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9567638262","Type":"PullRequestEvent","CreatedAt":"2019-05-06T05:20:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37459","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27706-00, beta-27706-00, respectively (master)\" (#37459) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9567201815","Type":"PullRequestEvent","CreatedAt":"2019-05-06T02:28:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37458","RelatedDescription":"Merged pull request \"Add FlushAsync in XDocument.SaveAsync to prevent blocking calls in Dispose\" (#37458) at dotnet/corefx","RelatedBody":"/fix #37457 "},{"Id":"9567201804","Type":"IssuesEvent","CreatedAt":"2019-05-06T02:28:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37457","RelatedDescription":"Closed issue \"XDocument.SaveAsync has a blocking call\" (#37457) at dotnet/corefx","RelatedBody":"`XDocument.SaveAsync` has a blocking call. In ASP.NET Core 3 this is not allowed (by default).\r\n\r\n````\r\nSystem.Net.Http.HttpRequestException: Error while copying content to a stream. ---> System.IO.IOException:  ---> System.InvalidOperationException: Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true.\r\n\r\nat Microsoft.AspNetCore.TestHost.ResponseStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.Flush()\r\n   at System.Xml.XmlWellFormedWriter.Close()\r\n   at System.Xml.XmlWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlAsyncCheckWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlWriter.Dispose()\r\n   at System.Xml.Linq.XDocument.SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n   at MyCode(Stream stream, XDocument document, CancellationToken cancellationToken)\r\n````\r\n\r\nI think `SaveAsync` should call `FlushAsync` before calling `Dispose` (or maybe `XmlWriter` should implement `IAsyncDisposable`).\r\n\r\n```c#\r\n        public async Task SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n        {\r\n            XmlWriterSettings ws = GetXmlWriterSettings(options);\r\n\r\n            ws.Async = true;\r\n\r\n            if (_declaration != null && !string.IsNullOrEmpty(_declaration.Encoding))\r\n            {\r\n                try\r\n                {\r\n                    ws.Encoding = Encoding.GetEncoding(_declaration.Encoding);\r\n                }\r\n                catch (ArgumentException)\r\n                {\r\n                }\r\n            }\r\n\r\n            using (XmlWriter w = XmlWriter.Create(stream, ws))\r\n            {\r\n                await WriteToAsync(w, cancellationToken).ConfigureAwait(false);\r\n\r\n                // I think we should add FlushAsync here\r\n                await w.FlushAsync().ConfigureAwait(false);\r\n            }\r\n        }\r\n```\r\n"},{"Id":"9567107841","Type":"PullRequestEvent","CreatedAt":"2019-05-06T01:49:14","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37441","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#37441) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 12:57 AM\r\n- **Commit**: 214f424c1821c4b8979b37762098defe17ac0db6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19253.8\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19253.8\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190504.7\r\n- **Date Produced**: 5/5/2019 2:09 AM\r\n- **Commit**: 464097cfc9c970c7ce31288fbd7e7cd8930364ca\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19254.7\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19254.7\r\n\r\n"},{"Id":"9567073510","Type":"PullRequestEvent","CreatedAt":"2019-05-06T01:33:08","Actor":"meziantou","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37458","RelatedDescription":"Opened pull request \"Add FlushAsync in XDocument.SaveAsync to prevent blocking calls in Dispose\" (#37458) at dotnet/corefx","RelatedBody":"/fix #37457 "},{"Id":"9567047624","Type":"IssuesEvent","CreatedAt":"2019-05-06T01:21:13","Actor":"meziantou","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/37457","RelatedDescription":"Opened issue \"XDocument.SaveAsync has a blocking call\" (#37457) at dotnet/corefx","RelatedBody":"`XDocument.SaveAsync` has a blocking call. In ASP.NET Core 3 this is not allowed (by default).\r\n\r\n````\r\nSystem.Net.Http.HttpRequestException: Error while copying content to a stream. ---> System.IO.IOException:  ---> System.InvalidOperationException: Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true.\r\n\r\nat Microsoft.AspNetCore.TestHost.ResponseStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.Flush()\r\n   at System.Xml.XmlWellFormedWriter.Close()\r\n   at System.Xml.XmlWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlAsyncCheckWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlWriter.Dispose()\r\n   at System.Xml.Linq.XDocument.SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n   at MyCode(Stream stream, XDocument document, CancellationToken cancellationToken)\r\n````\r\n\r\nI think `SaveAsync` should call `FlushAsync` before calling `Dispose` (or maybe `XmlWriter` should implement `IAsyncDisposable`).\r\n\r\n```c#\r\n        public async Task SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n        {\r\n            XmlWriterSettings ws = GetXmlWriterSettings(options);\r\n\r\n            ws.Async = true;\r\n\r\n            if (_declaration != null && !string.IsNullOrEmpty(_declaration.Encoding))\r\n            {\r\n                try\r\n                {\r\n                    ws.Encoding = Encoding.GetEncoding(_declaration.Encoding);\r\n                }\r\n                catch (ArgumentException)\r\n                {\r\n                }\r\n            }\r\n\r\n            using (XmlWriter w = XmlWriter.Create(stream, ws))\r\n            {\r\n                await WriteToAsync(w, cancellationToken).ConfigureAwait(false);\r\n\r\n                // I think we should add FlushAsync here\r\n                await w.FlushAsync().ConfigureAwait(false);\r\n            }\r\n        }\r\n```\r\n"},{"Id":"9566987278","Type":"PullRequestEvent","CreatedAt":"2019-05-06T00:50:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37454","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#37454) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9566718842","Type":"PullRequestEvent","CreatedAt":"2019-05-05T22:22:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7395) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams"},{"Id":"9566439998","Type":"PullRequestEvent","CreatedAt":"2019-05-05T20:03:20","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7395) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9561784176","Type":"PullRequestEvent","CreatedAt":"2019-05-04T02:03:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Merged pull request \"Fix ProjectN build breaks\" (#7392) at dotnet/corert","RelatedBody":""},{"Id":"9561783857","Type":"PullRequestEvent","CreatedAt":"2019-05-04T02:03:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7394) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @GrabYourPitchforks @filipnavara"},{"Id":"9561061488","Type":"PullRequestEvent","CreatedAt":"2019-05-03T21:35:54","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7394) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9560913243","Type":"PullRequestEvent","CreatedAt":"2019-05-03T21:05:15","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Opened pull request \"Fix inlined field access outside version bubble\" (#7393) at dotnet/corert","RelatedBody":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle."},{"Id":"9560728069","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:30:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Opened pull request \"Fix ProjectN build breaks\" (#7392) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9566849376","Type":"IssuesEvent","CreatedAt":"2019-05-05T23:35:43","Actor":"imsmart-tech","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3204","RelatedDescription":"Opened issue \"Internal error: new deps file generation did not produce the same result as the old logic\" (#3204) at dotnet/sdk","RelatedBody":"Got this error which said to file issue here. So here it goes.\r\n\r\n[ImSmart.deps.json.txt](https://github.com/dotnet/sdk/files/3146159/ImSmart.deps.json.txt)\r\n\r\n[ImSmart.deps.new.json.txt](https://github.com/dotnet/sdk/files/3146160/ImSmart.deps.new.json.txt)\r\n\r\n"},{"Id":"9565582615","Type":"PullRequestEvent","CreatedAt":"2019-05-05T13:39:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3203) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n"},{"Id":"9565378740","Type":"PullRequestEvent","CreatedAt":"2019-05-05T12:04:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#3203) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"440523300","IsPullRequest":false,"CreatedAt":"2019-05-06T02:51:35","Actor":"AriNuer","Number":"24410","RawContent":null,"Title":"Test Failure: JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh","State":"open","Body":"Test **JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh** has failed.\r\n\r\nMessage :\r\n```\r\ncmdLine:/root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh Timed Out\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/JIT/Performance/Reports/JIT.Performance/CodeQuality/Linq/Linq/Linq.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun Linq.exe ''\r\n\r\ncmdLine:/root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh Timed Out\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh\r\nExpected: True\r\nActual:   False\r\n```\r\nStack Trace :\r\n```\r\nat JIT_Performance._CodeQuality_Linq_Linq_Linq_._CodeQuality_Linq_Linq_Linq_sh() in /__w/1/s/bin/tests/Linux.arm64.Release/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs:line 6129\r\n```\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190505.72/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_Linq_Linq_Linq_~2F_CodeQuality_Linq_Linq_Linq_sh","Url":"https://github.com/dotnet/coreclr/issues/24410","RelatedDescription":"Open issue \"Test Failure: JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh\" (#24410)"},{"Id":"440515193","IsPullRequest":false,"CreatedAt":"2019-05-06T01:43:13","Actor":"VincentBu","Number":"24409","RawContent":null,"Title":"[arm64] Test failed: readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_gcstress15_tst/53/\r\n\r\n**Failed tests:**\r\nreadytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\r\n\r\n**Log:**\r\n```\r\nNative image fileversionpreservation.exe generated successfully.\r\n         \"C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\Tests\\Core_Root\\corerun.exe\" fileversionpreservation.exe \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\Tests\\Core_Root\r\n        > C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm_cross_che---57645b35\\bin\\tests\\Windows_NT.arm.Checked\\TestWrappers\\readytorun.tests\\readytorun.tests.XUnitWrapper.cs(129,0): at readytorun_tests._fileversionpreservation_fileversionpreservation_fileversionpreservation_._fileversionpreservation_fileversionpreservation_fileversionpreservation_cmd()\r\n        Output:\r\n          \r\n          Assert failure(PID 7060 [0x00001b94], Thread: 8920 [0x22d8]): !\"About to FailFast. set ComPlus_AssertOnFailFast=0 if this is expected\"\r\n          \r\n          <no module>! <no symbol> + 0x0 (0x00000000)\r\n              File: d:\\j\\workspace\\arm_cross_che---57645b35\\src\\vm\\jithelpers.cpp Line: 5091\r\n              Image: C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n          \r\n          \r\n          Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24409","RelatedDescription":"Open issue \"[arm64] Test failed: readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\" (#24409)"},{"Id":"440513529","IsPullRequest":false,"CreatedAt":"2019-05-06T01:27:15","Actor":"VincentBu","Number":"24408","RawContent":null,"Title":"[arm64] IOError: getaddrinfo failed","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_jitstress1_tst/53/\r\n\r\n**Log:**\r\n```\r\nRunning tests R2R\r\nSetting RunCrossGen=true\r\nSetting __TestTimeout=900000\r\nSetting CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\nSetting __TestEnv=c:\\users\\helixa~1\\appdata\\local\\temp\\tmpbexshz.bat\r\nDownload and overwrite xunit.console.dll in Core_Root\r\nTraceback (most recent call last):\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2431, in <module>\r\n    sys.exit(main(args))\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2405, in main\r\n    lambda path: do_setup(host_os,\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 538, in create_and_use_test_env\r\n    ret_code = func(test_env.name)\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2414, in <lambda>\r\n    path))\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2363, in do_setup\r\n    run_in_context=unprocessed_args.run_in_context)\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 1124, in run_tests\r\n    urlretrieve(url, zipfilename)\r\n  File \"c:\\python\\lib\\urllib.py\", line 98, in urlretrieve\r\n    return opener.retrieve(url, filename, reporthook, data)\r\n  File \"c:\\python\\lib\\urllib.py\", line 245, in retrieve\r\n    fp = self.open(url, data)\r\n  File \"c:\\python\\lib\\urllib.py\", line 213, in open\r\n    return getattr(self, name)(url)\r\n  File \"c:\\python\\lib\\urllib.py\", line 443, in open_https\r\n    h.endheaders(data)\r\n  File \"c:\\python\\lib\\httplib.py\", line 1049, in endheaders\r\n    self._send_output(message_body)\r\n  File \"c:\\python\\lib\\httplib.py\", line 893, in _send_output\r\n    self.send(msg)\r\n  File \"c:\\python\\lib\\httplib.py\", line 855, in send\r\n    self.connect()\r\n  File \"c:\\python\\lib\\httplib.py\", line 1266, in connect\r\n    HTTPConnection.connect(self)\r\n  File \"c:\\python\\lib\\httplib.py\", line 832, in connect\r\n    self.timeout, self.source_address)\r\n  File \"c:\\python\\lib\\socket.py\", line 557, in create_connection\r\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\r\nIOError: [Errno socket error] [Errno 11001] getaddrinfo failed\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24408","RelatedDescription":"Open issue \"[arm64] IOError: getaddrinfo failed\" (#24408)"},{"Id":"440513200","IsPullRequest":false,"CreatedAt":"2019-05-06T01:24:18","Actor":"VincentBu","Number":"24407","RawContent":null,"Title":"[arm64] Test failed: System.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/33/\r\n\r\n**Failed tests:**\r\nSystem.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey\r\n\r\n**Log:**\r\n```\r\nSystem.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey [FAIL]\r\n      Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : A device attached to the system is not functioning.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\CapiHelper.Windows.cs(1214,0): at Internal.NativeCrypto.CapiHelper.SignValue(SafeProvHandle hProv, SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\RSACryptoServiceProvider.Windows.cs(483,0): at System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] rgbHash, Int32 calgHash)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\RSACryptoServiceProvider.Windows.cs(678,0): at System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Algorithms\\src\\System\\Security\\Cryptography\\RSA.cs(120,0): at System.Security.Cryptography.RSA.TrySignHash(ReadOnlySpan`1 hash, Span`1 destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Security.Cryptography.Algorithms\\src\\System\\Security\\Cryptography\\RSA.cs(201,0): at System.Security.Cryptography.RSA.TrySignData(ReadOnlySpan`1 data, Span`1 destination, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding, Int32& bytesWritten)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.netcoreapp.cs(10,0): at System.Security.Cryptography.Rsa.Tests.SignVerify_Span.<>c__DisplayClass0_0.<SignData>b__0(Byte[] dest)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.netcoreapp.cs(26,0): at System.Security.Cryptography.Rsa.Tests.SignVerify_Span.TryWithOutputArray(Func`2 func)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.netcoreapp.cs(10,0): at System.Security.Cryptography.Rsa.Tests.SignVerify_Span.SignData(RSA rsa, Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\SignVerify.cs(83,0): at System.Security.Cryptography.Rsa.Tests.SignVerify.InvalidKeySize_DoesNotInvalidateKey()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24407","RelatedDescription":"Open issue \"[arm64] Test failed: System.Security.Cryptography.Rsa.Tests.SignVerify_Span.InvalidKeySize_DoesNotInvalidateKey\" (#24407)"},{"Id":"440500073","IsPullRequest":true,"CreatedAt":"2019-05-05T22:53:16","Actor":"mjsabby","Number":"24406","RawContent":null,"Title":"Fixes AV when accessing LoaderModule for some objects","State":"open","Body":"`GetGCSafeTypeHandleIfPossible` is called by the Profiler API (and some ETW event code) when the profiler calls `GetClassFromObject`.\r\n\r\nFor whatever reason, some `ObjectID`s (discovered by calling `GetGenerationBounds`) fail in `GetClassFromObject` and an AV occurs when doing `ReadPointer(this, &MethodTable::m_pLoaderModule)`.\r\n\r\nI'm adding a new function that returns NULL instead of AVing. This function is only called from `GetGCSafeTypeHandleIfPossible` which in turn is only called by ProfAPI and ETW code and they both are allowed to return null to their callers.","Url":"https://github.com/dotnet/coreclr/pull/24406","RelatedDescription":"Open PR \"Fixes AV when accessing LoaderModule for some objects\" (#24406)"},{"Id":"440485233","IsPullRequest":true,"CreatedAt":"2019-05-05T20:15:21","Actor":"VSadov","Number":"24405","RawContent":null,"Title":"[Test] Consider remaining unused space in calculation of the next limit when extending a segment.","State":"open","Body":"Test PR","Url":"https://github.com/dotnet/coreclr/pull/24405","RelatedDescription":"Open PR \"[Test] Consider remaining unused space in calculation of the next limit when extending a segment.\" (#24405)"},{"Id":"440468249","IsPullRequest":true,"CreatedAt":"2019-05-05T20:01:08","Actor":"benaadams","Number":"24403","RawContent":null,"Title":"Move AsyncMethodBuilder.SetStateMachine to non-generic","State":"closed","Body":"Doesn't need the struct reference\r\n\r\n/cc @stephentoub @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/24403","RelatedDescription":"Closed or merged PR \"Move AsyncMethodBuilder.SetStateMachine to non-generic\" (#24403)"},{"Id":"440474837","IsPullRequest":true,"CreatedAt":"2019-05-05T18:31:22","Actor":"benaadams","Number":"24404","RawContent":null,"Title":"Use same Task for Task.CompletedTask and ATMB.Completed","State":"open","Body":"Keep it hotter in cache rather than alternating between the two for manually and compiler generated async methods\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/24404","RelatedDescription":"Open PR \"Use same Task for Task.CompletedTask and ATMB.Completed\" (#24404)"},{"Id":"440462686","IsPullRequest":false,"CreatedAt":"2019-05-05T16:21:54","Actor":"martincostello","Number":"24402","RawContent":null,"Title":"OpenCover code coverage broken in 3.0 preview 4","State":"open","Body":"I've just noticed in some 3.0 branches of some applications I'm maintaining as the previews ship, that code coverage metrics have stopped being reported with OpenCover in preview 4. The code coverage was being reported using preview 3.\r\n\r\nBelow are links to two commits of an application and its AppVeyor CI build showing code coverage being reported with preview 3, but not with preview 4. I've observed this with multiple applications, so I do not believe it is specific to this particular application.\r\n\r\n| Release | Commit | Build |\r\n|:-:|:-:|:-:|\r\n| 3.0.100-preview3-010431 | https://github.com/martincostello/website/pull/254/commits/f1e71c056818cbc1d7470b3e8806745601dd6cd6 | [Logs](https://ci.appveyor.com/project/martincostello/website/builds/22879215#L218) |\r\n| 3.0.100-preview4-011223 | https://github.com/martincostello/website/pull/254/commits/ac210c0baa6bd56a0826e275056928105107e5be | [Logs](https://ci.appveyor.com/project/martincostello/website/builds/23967773#L229) |","Url":"https://github.com/dotnet/coreclr/issues/24402","RelatedDescription":"Open issue \"OpenCover code coverage broken in 3.0 preview 4\" (#24402)"},{"Id":"440441953","IsPullRequest":true,"CreatedAt":"2019-05-05T14:55:15","Actor":"dotnet-maestro[bot]","Number":"24401","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 11:01 AM\r\n- **Commit**: ae67e92d954578d6c8a2ba8bab0481288e04f967\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190505.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190505.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24401","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24401)"},{"Id":"440389056","IsPullRequest":true,"CreatedAt":"2019-05-05T01:58:05","Actor":"EgorBo","Number":"24400","RawContent":null,"Title":"Remove String IsASCII flag from the object header","State":"open","Body":"Not sure if this PR should be merged but at least it's a nice diff to understand how this feature works.\r\nI even made a schema (click to zoom in):\r\n\r\n![image](https://user-images.githubusercontent.com/523221/57187036-d0c11800-6ef1-11e9-84cf-41385dd19a51.png)\r\n\r\nThis control bit in the object header signals if the string is checked that it doesn't contain any high char (>0x80), see this comment from syncblk.cpp:\r\n```csharp\r\n    //the highest 2 bits have reloaded meaning\r\n    //for string objects:\t\r\n    //         BIT_SBLK_STRING_HAS_NO_HIGH_CHARS   0x80000000\t\r\n    //         BIT_SBLK_STRING_HIGH_CHARS_KNOWN    0x40000000\t\r\n    //         BIT_SBLK_STRING_HAS_SPECIAL_SORT    0xC0000000\t\r\n    //for other objects:\t\r\n    //         BIT_SBLK_FINALIZER_RUN              0x40000000\r\n```\r\nCurrently this flag works only on .Unix systems and can be checked via `String.IsFastSort` internal call used by internal IndexOf for the invariant cultures and for example `String.Replace(string,string,Invariant)` uses it.\r\n\r\n\r\nso when we do:\r\n```csharp\r\nstring str2 = str.Replace(\"a\", \"b\", StringComparison.InvariantCulture);\r\n```\r\nif we call `Replace` for the first time it scans `str` for the \"high chars\" and sets the bit to 0x80 (no high chars) or to 0x40 (has high chars) - see [IsFastSort](https://github.com/dotnet/coreclr/blob/0e15f47d8e1c2be4919c49fe35f9d50ede66a057/src/classlibnative/bcltype/stringnative.cpp#L44-L46) (IsFastSort is called from [here](https://github.com/dotnet/coreclr/blob/de68c9ddd18f863fd67098ab28d19206c9c66627/src/System.Private.CoreLib/shared/System/Globalization/CompareInfo.Unix.cs#L249-L258))\r\nso next time we call `Replace` for this string the call will be a little bit faster (since `IsFastSort` will be O(1) instead of O(N)).\r\n\r\nBTW, if we want to keep this flag why string literals don't have it set by default?\r\nBTW2, if a string is checked that it doesn't contain any high char and has this flag set to 0x80 and we then modify the string via e.g.:\r\n```\r\nfixed (char* c = str) *c = 'Й';\r\n```\r\nThe `IsAscii` flag will remain and the comparison logic will be broken (I know, modifying strings this way is not a good idea but anyway).\r\n\r\ncc: @jkotas @filipnavara ","Url":"https://github.com/dotnet/coreclr/pull/24400","RelatedDescription":"Open PR \"Remove String IsASCII flag from the object header\" (#24400)"},{"Id":"440388394","IsPullRequest":false,"CreatedAt":"2019-05-05T01:46:40","Actor":"VincentBu","Number":"24399","RawContent":null,"Title":"[x64] Test failed: tracing\\tracevalidation\\inducedgc\\inducedgc\\inducedgc.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_minopts/841/\r\n\r\n**Failed tests:**\r\ntracing\\tracevalidation\\inducedgc\\inducedgc\\inducedgc.cmd\r\n\r\n**Log:**\r\n```\r\ntracing\\tracevalidation\\inducedgc\\inducedgc\\inducedgc.cmd [FAIL]\r\n        \r\n        Unhandled Exception: System.Exception: Read past end of stream.\r\n           at FastSerialization.IOStreamStreamReader.Fill(Int32 minimum)\r\n           at FastSerialization.PinnedStreamReader.GetPointer(Int32 length)\r\n           at Microsoft.Diagnostics.Tracing.EventPipeEventSource.ReadEvent(PinnedStreamReader reader)\r\n           at Microsoft.Diagnostics.Tracing.EventPipeEventBlock.FromStream(Deserializer deserializer)\r\n           at FastSerialization.Deserializer.ReadObjectDefinition(Tags tag, StreamLabel objectLabel)\r\n           at FastSerialization.Deserializer.ReadObject()\r\n           at Microsoft.Diagnostics.Tracing.EventPipeEventSource.Process()\r\n           at Tracing.Tests.TraceValidationInducedGC.Main(String[] args) in D:\\j\\workspace\\x64_checked_w---a16971a7\\tests\\src\\tracing\\tracevalidation\\inducedgc\\InducedGC.cs:line 60\r\n        \r\n        Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24399","RelatedDescription":"Open issue \"[x64] Test failed: tracing\\tracevalidation\\inducedgc\\inducedgc\\inducedgc.cmd\" (#24399)"},{"Id":"440386487","IsPullRequest":false,"CreatedAt":"2019-05-05T01:35:50","Actor":"VincentBu","Number":"24398","RawContent":null,"Title":"error CS1513","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_corefx_jitstress1/75/\r\n\r\n**Log:**\r\nHttpClientHandlerTest.Http2.cs(1352,10): error CS1513: } expected [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress1/_/fx/src/System.Net.Http/tests/FunctionalTests/System.Net.Http.Functional.Tests.csproj]","Url":"https://github.com/dotnet/coreclr/issues/24398","RelatedDescription":"Closed issue \"error CS1513\" (#24398)"},{"Id":"440383514","IsPullRequest":false,"CreatedAt":"2019-05-05T00:19:07","Actor":"cup","Number":"24397","RawContent":null,"Title":"Reduce size of PublishSingleFile binary","State":"open","Body":"With C++ you can make a single file executable:\r\n\r\n~~~c\r\n$ cat alpha.cpp\r\n#include <iostream>\r\nint main() {\r\n   std::cout << \"beta gamma\" << std::endl;\r\n}\r\n\r\n$ x86_64-w64-mingw32-g++ -s -static -std=c++14 -o alpha.exe alpha.cpp\r\n$ ./alpha.exe\r\nbeta gamma\r\n~~~\r\n\r\nwith a decent size:\r\n\r\n~~~\r\n$ wc -c alpha.exe\r\n868864 alpha.exe\r\n~~~\r\n\r\nwith C# you can make a single file executable:\r\n\r\n~~~sh\r\n$ dotnet new console -o alpha\r\n$ dotnet publish -r win-x64 /p:PublishSingleFile=true alpha\r\n$ cd alpha/bin/Debug/netcoreapp3.0/win-x64/publish\r\n$ ./alpha.exe\r\nHello World!\r\n~~~\r\n\r\nbut the size is 80 times larger:\r\n\r\n~~~\r\n$ wc -c alpha.exe\r\n70272264 alpha.exe\r\n~~~\r\n\r\nit seems that DLLs are being loaded that dont need to be. Using these commands:\r\n\r\n~~~sh\r\ncd alpha/bin/Debug/netcoreapp3.0/win-x64\r\nldd alpha.exe |\r\nawk '{print $1}' |\r\nwhile read each\r\ndo\r\n   if [ -f \"$each\" ]\r\n   then\r\n      echo \"$each\"\r\n   fi\r\ndone |\r\nxargs wc -c alpha.exe\r\n~~~\r\n\r\nResult:\r\n\r\n~~~\r\n 337408 alpha.exe\r\n  23304 api-ms-win-crt-runtime-l1-1-0.dll\r\n1016584 ucrtbase.DLL\r\n  21256 api-ms-win-core-localization-l1-2-0.dll\r\n  19208 api-ms-win-core-processthreads-l1-1-1.dll\r\n  18696 api-ms-win-core-file-l1-2-0.dll\r\n  19208 api-ms-win-core-timezone-l1-1-0.dll\r\n  18696 api-ms-win-core-file-l2-1-0.dll\r\n  19208 api-ms-win-core-synch-l1-2-0.dll\r\n  19720 api-ms-win-crt-heap-l1-1-0.dll\r\n  27912 api-ms-win-crt-math-l1-1-0.dll\r\n  24840 api-ms-win-crt-stdio-l1-1-0.dll\r\n  24840 api-ms-win-crt-string-l1-1-0.dll\r\n  19208 api-ms-win-crt-locale-l1-1-0.dll\r\n  20744 api-ms-win-crt-filesystem-l1-1-0.dll\r\n  22792 api-ms-win-crt-convert-l1-1-0.dll\r\n  21256 api-ms-win-crt-time-l1-1-0.dll\r\n1674880 total\r\n~~~\r\n\r\nSo if we only use required DLL the size is 40 times smaller. Does\r\n**dotnet publish** have a way to \"strip\" the executable, or only include needed\r\nDLL?","Url":"https://github.com/dotnet/coreclr/issues/24397","RelatedDescription":"Open issue \"Reduce size of PublishSingleFile binary\" (#24397)"},{"Id":"440363642","IsPullRequest":true,"CreatedAt":"2019-05-04T19:48:27","Actor":"dschinde","Number":"24396","RawContent":null,"Title":"Improved perf of MemoryExtensions.Contains()","State":"open","Body":"Improved performance of `MemoryExtensions.Contains()` for `byte`s and\r\n`char`s.\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)\r\nIntel Core i7-8700K CPU 3.70GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\r\nFrequency=3609378 Hz, Resolution=277.0560 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-preview5-011281\r\n  [Host]     : .NET Core 3.0.0-preview5-27613-06 (CoreCLR 4.6.27613.71, CoreFX 4.700.19.21214), 64bit RyuJIT\r\n  Job-BAAJAC : .NET Core ? (CoreCLR 4.6.27704.0, CoreFX 4.700.19.21911), 64bit RyuJIT\r\n  Job-CTXWTG : .NET Core ? (CoreCLR 4.6.27704.0, CoreFX 4.700.19.21911), 64bit RyuJIT\r\n\r\n\r\n```\r\n|                  Type |        Method | Toolchain |      Mean |     Error |    StdDev |    Median |       Min |       Max | Ratio |\r\n|---------------------- |-------------- |---------- |----------:|----------:|----------:|----------:|----------:|----------:|------:|\r\n| ContainsByteBenchmark |  ContainsTrue |    Master |  2.240 us | 0.0068 us | 0.0060 us |  2.240 us |  2.227 us |  2.249 us |  1.00 |\r\n| ContainsByteBenchmark |  ContainsTrue |      Test |  1.286 us | 0.0091 us | 0.0085 us |  1.284 us |  1.270 us |  1.302 us |  0.57 |\r\n|                       |               |           |           |           |           |           |           |           |       |\r\n| ContainsCharBenchmark |  ContainsTrue |    Master |  6.953 us | 0.0315 us | 0.0295 us |  6.941 us |  6.917 us |  7.011 us |  1.00 |\r\n| ContainsCharBenchmark |  ContainsTrue |      Test |  6.527 us | 0.0108 us | 0.0095 us |  6.526 us |  6.513 us |  6.546 us |  0.94 |\r\n|                       |               |           |           |           |           |           |           |           |       |\r\n| ContainsByteBenchmark | ContainsFalse |    Master |  3.189 us | 0.0069 us | 0.0058 us |  3.188 us |  3.183 us |  3.203 us |  1.00 |\r\n| ContainsByteBenchmark | ContainsFalse |      Test |  2.936 us | 0.0075 us | 0.0067 us |  2.935 us |  2.929 us |  2.951 us |  0.92 |\r\n|                       |               |           |           |           |           |           |           |           |       |\r\n| ContainsCharBenchmark | ContainsFalse |    Master | 11.950 us | 0.0178 us | 0.0158 us | 11.953 us | 11.929 us | 11.983 us |  1.00 |\r\n| ContainsCharBenchmark | ContainsFalse |      Test |  9.406 us | 0.0569 us | 0.0475 us |  9.391 us |  9.347 us |  9.487 us |  0.79 |\r\n","Url":"https://github.com/dotnet/coreclr/pull/24396","RelatedDescription":"Open PR \"Improved perf of MemoryExtensions.Contains()\" (#24396)"},{"Id":"440352959","IsPullRequest":false,"CreatedAt":"2019-05-04T18:10:13","Actor":"GSPP","Number":"24395","RawContent":null,"Title":"Add a managed API to enumerate and mutate the heap","State":"open","Body":"In https://github.com/dotnet/coreclr/issues/14208 we are discussing deduplicating identical string objects for performance reasons. It was mentioned by @maoni that this would not have to be implemented in the GC. It could be done in managed code if the runtime provided an API to enumerate heap objects and mutate references to those objects.\r\n\r\nSuch an API would have multiple use cases:\r\n\r\n1. Deduplication\r\n   * Strings\r\n   * Boxed primitives and boxed custom structs\r\n   * Empty arrays\r\n   * Immutable collections\r\n   * Custom application objects\r\n   * Completed `Task` instances\r\n1. Debugging\r\n   * Finding memory leaks and reference chains\r\n1. Profiling\r\n   * You could have an entire profiler as a library\r\n   * A web page could have a button \"display allocations for this request\" similar to SQL profilers\r\n1. Cache eviction (determine that no user references to a cache item exist. No need for GC handles or resourrection)\r\n1. Logging\r\n1. Validation of data structure invariants\r\n\r\nAll of this could be done in a library with no further runtime complication. There could be a variety of libraries in competition. Libraries could create custom policies for what to deduplicate (e.g. based on string length).\r\n\r\nAlso, all of this would be opt-in. This is important because breaking object identity is a fundamental change. Not only is there compatibility impact, it fundamentally makes managed code more brittle.\r\n\r\nThere is a risk that such a powerful API would be abused. Reaching into 3rd party code and mutating internal references can break their assumptions. It can also lead to reliance on library internals. This could lead to an increased compatibility burden and more breakage when upgrading to new library versions.\r\n\r\nThe API could support the following features:\r\n\r\n1. Enumeration of heap objects\r\n1. Enumeration of references to objects\r\n1. Mutation of references. This could be done through reflection but surely it can be done faster as part of the enumeration API\r\n1. Inspection of the object header for hash code information. This can be used to not deduplicate objects that look like they are being used in a hash table.\r\n1. Finding roots (thread stacks, statics, etc.)\r\n","Url":"https://github.com/dotnet/coreclr/issues/24395","RelatedDescription":"Open issue \"Add a managed API to enumerate and mutate the heap\" (#24395)"},{"Id":"440295476","IsPullRequest":true,"CreatedAt":"2019-05-04T16:43:36","Actor":"am11","Number":"24391","RawContent":null,"Title":"Minor tweaks for gcc","State":"closed","Body":"* Fix a consistency check condition (debug configuration)\r\n    > error: enum constant in boolean context [-Werror=int-in-bool-context]\r\n* Apply -Wno-register only to CXX flags\r\n  ```\r\n  [ 96%] Building C object src/ilasm/CMakeFiles/ilasm.dir/__/__/version.c.o\r\n  cc1: error: command line option -Wno-register is valid for C++/ObjC++ but not for C [-Werror]\r\n  cc1: all warnings being treated as errors\r\n  src/ilasm/CMakeFiles/ilasm.dir/build.make:254: recipe for target 'src/ilasm/CMakeFiles/ilasm.dir/__/__/version.c.o' failed\r\n  make[2]: *** [src/ilasm/CMakeFiles/ilasm.dir/__/__/version.c.o] Error 1\r\n  CMakeFiles/Makefile2:5710: recipe for target 'src/ilasm/CMakeFiles/ilasm.dir/all' failed\r\n  make[1]: *** [src/ilasm/CMakeFiles/ilasm.dir/all] Error 2\r\n  ```\r\n\r\n* Remove extra parantheses from variable declaration … \r\n  > error: unnecessary parentheses in declaration of m_HashedModules [-Werror=parentheses]\r\n\r\n* Use macro instead of const in C\r\n  > error: variably modified collatorsPerOption at file scope\r\n       UCollator* collatorsPerOption[CompareOptionsMask + 1];\r\n\r\n  Besides, in CoreFX, and other places in Globalization, `#define` is being used instead of `const`\r\n\r\n* Cast to uintptr_t before (32-bit) DWORD\r\n    Usually DWORD is `unsigned long`, but here it is typedef'd as `unsigned int`, so direct narrowing was failing:\r\n  > error: cast from LPCWSTR {aka const char16_t*} to DWORD {aka unsigned int} loses precision [-fpermissive]\r\n\r\ncc @jkotas, @janvorli","Url":"https://github.com/dotnet/coreclr/pull/24391","RelatedDescription":"Closed or merged PR \"Minor tweaks for gcc\" (#24391)"},{"Id":"440320696","IsPullRequest":true,"CreatedAt":"2019-05-04T14:50:47","Actor":"dotnet-maestro[bot]","Number":"24393","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 11:47 AM\r\n- **Commit**: e8942bef6d28b9ca4eed093e1501264b85451e8a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190504.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190504.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24393","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24393)"},{"Id":"440324711","IsPullRequest":false,"CreatedAt":"2019-05-04T13:45:19","Actor":"jeffschwMSFT","Number":"24394","RawContent":null,"Title":"ComRegisterFunctionAttribute doesn't work with regsvr32","State":"open","Body":"from @saschanaz (copied from https://github.com/dotnet/core-setup/issues/6286)\r\n\r\n**Steps to reproduce**\r\n\r\n(From https://stackoverflow.com/questions/55980553/is-it-possible-to-execute-arbitrary-c-sharp-code-when-registering-com-dll)\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [ComVisible(true)]\r\n    [Guid(\"c60bcc75-8876-4e31-9e4c-a8e82712d8ca\")]\r\n    public class Code\r\n    {\r\n        [ComRegisterFunction]\r\n        static void Temp()\r\n        {\r\n            Debug.Assert(false);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n1. Build the above in debug mode with <TargetFramework>netcoreapp3.0</TargetFramework> and <UseComHost>true</UseComHost>. (.NET Core 3.0 Preview 4)\r\n2. Register the resulting *.comhost.dll through regsvr32.\r\n\r\n**Expected behavior**\r\nDebug message box should appear\r\n\r\n**Actual behavior**\r\nNothing happens\r\n\r\n**Environment data**\r\nUsing VS2019 stable version. Would installing preview one help?\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/24394","RelatedDescription":"Open issue \"ComRegisterFunctionAttribute doesn't work with regsvr32\" (#24394)"},{"Id":"440301995","IsPullRequest":true,"CreatedAt":"2019-05-04T09:08:39","Actor":"sandreenko","Number":"24392","RawContent":null,"Title":"Revert \"Fix GCStress for multireg returns. \"","State":"closed","Body":"I have found that my assumption that GCStress tolerates when we report random integer as alive refs was wrong.\r\n\r\nI wrote some additional tests that showed that even x86/x64 windows implementation did not (with or without this change) work correctly. \r\n\r\nI will write a more detailed description of what I found later.\r\n\r\nReopens #23199. \r\n\r\nReverts dotnet/coreclr#24363","Url":"https://github.com/dotnet/coreclr/pull/24392","RelatedDescription":"Closed or merged PR \"Revert \"Fix GCStress for multireg returns. \"\" (#24392)"},{"Id":"440290151","IsPullRequest":true,"CreatedAt":"2019-05-04T06:20:30","Actor":"danmosemsft","Number":"24390","RawContent":null,"Title":"Improve fatal err msg","State":"open","Body":"As suggested in [comment](https://github.com/dotnet/corefx/issues/37422#issuecomment-489284964)\r\n\r\nOutput of test program\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace _1\r\n{\r\n    class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            X(args[0]);\r\n        }\r\n\r\n        static unsafe void X(string arg)\r\n        {\r\n            switch(arg)\r\n            {\r\n                case \"so\":\r\n                    while (true) X(\"so\");\r\n                case \"ff\":\r\n                    Environment.FailFast(\"I am failing because reasons\");\r\n                    break;\r\n                case \"av\":\r\n                    ((byte*)0xFFFFFFFF)[0] = 1;\r\n                       break;\r\n               }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBefore\r\n```\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\1.exe\r\n\r\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at _1.Program.Main(String[] args) in C:\\d\\dotnet30\\1\\Program.cs:line 9\r\n\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\1.exe av\r\nSystem.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at _1.Program.X(System.String)\r\n   at _1.Program.Main(System.String[])\r\n\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\1.exe so\r\n\r\nProcess is terminating due to StackOverflowException.\r\n\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\1.exe ff\r\nFailFast:\r\nI am failing because reasons\r\n   at System.Environment.FailFast(System.String)\r\n   at _1.Program.X(System.String)\r\n   at _1.Program.Main(System.String[])\r\n```\r\nAfter\r\n```\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\1.exe\r\n\r\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at _1.Program.Main(String[] args) in C:\\d\\dotnet30\\1\\Program.cs:line 9\r\n\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\1.exe av\r\n\r\nProcess is terminating due to a fatal error.\r\n\r\nSystem.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at _1.Program.X(System.String)\r\n   at _1.Program.Main(System.String[])\r\n\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\1.exe so\r\n\r\nProcess is terminating due to a StackOverflowException.\r\n\r\nC:\\d\\dotnet30\\1>bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\1.exe ff\r\n\r\nProcess is terminating due to a FailFast.\r\n\r\nI am failing because reasons\r\n   at System.Environment.FailFast(System.String)\r\n   at _1.Program.X(System.String)\r\n   at _1.Program.Main(System.String[])\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/pull/24390","RelatedDescription":"Open PR \"Improve fatal err msg\" (#24390)"},{"Id":"440286098","IsPullRequest":true,"CreatedAt":"2019-05-04T05:14:42","Actor":"danmosemsft","Number":"24389","RawContent":null,"Title":"Update UsingYourBuild.md","State":"open","Body":"Change MyGet to the custom feeds. I found that for dotnet new console to restore, I needed an ASP.NET feed as well.","Url":"https://github.com/dotnet/coreclr/pull/24389","RelatedDescription":"Open PR \"Update UsingYourBuild.md\" (#24389)"},{"Id":"440275449","IsPullRequest":true,"CreatedAt":"2019-05-04T02:24:07","Actor":"BruceForstall","Number":"24388","RawContent":null,"Title":"WIP Fix23915 localloc with large out arg space","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24388","RelatedDescription":"Open PR \"WIP Fix23915 localloc with large out arg space\" (#24388)"},{"Id":"440231199","IsPullRequest":true,"CreatedAt":"2019-05-04T02:04:57","Actor":"Dotnet-GitSync-Bot","Number":"24381","RawContent":null,"Title":"Mirror changes from dotnet/corefx,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/24381","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,corert\" (#24381)"},{"Id":"440255379","IsPullRequest":true,"CreatedAt":"2019-05-04T00:51:55","Actor":"cshung","Number":"24384","RawContent":null,"Title":"Fix EventPipe initialization order","State":"closed","Body":"Once `DiagnosticServer::Initialize()` is called, a connection might cause `EventPipe::Enable()` to be called on the `DiagnosticServerThread`, but if `EventPipe::Initialize()` is not called yet, then `EventPipe::GetLock()` is not initialized yet, which will cause the `EventPipe::Enable()` call on the `DiagnosticServerThread` to fail.\r\n\r\nThe fix is simply swapping the initialization order.","Url":"https://github.com/dotnet/coreclr/pull/24384","RelatedDescription":"Closed or merged PR \"Fix EventPipe initialization order\" (#24384)"},{"Id":"440266498","IsPullRequest":true,"CreatedAt":"2019-05-04T00:37:52","Actor":"jkoritzinsky","Number":"24387","RawContent":null,"Title":"Handle E_NOTIMPL return from CoInitializeEx.","State":"open","Body":"Handle `E_NOTIMPL` from `CoInitializeEx` and throw a `PlatformNotSupportedException` on failure, stating which thread apartment is not supported.\r\n\r\nI've locally tested in a Windows 10 Nano Server docker container and verified the behavior.\r\n\r\nRemove `STAThread` from the tests that have it. As far as I can tell, none of these tests need the STA thread.\r\n\r\nThis should unblock us on adding Nano helix queues.\r\n\r\nFixes #21693\r\n\r\ncc: @echesakovMSFT ","Url":"https://github.com/dotnet/coreclr/pull/24387","RelatedDescription":"Open PR \"Handle E_NOTIMPL return from CoInitializeEx.\" (#24387)"},{"Id":"440264082","IsPullRequest":true,"CreatedAt":"2019-05-04T00:15:54","Actor":"fadimounir","Number":"24386","RawContent":null,"Title":"Replace E_FAIL with E_NOTIMPL for an unsupported R2R encoding (Futurework)","State":"open","Body":"/cc @sergiy-k @VSadov \r\n\r\nThis fixes the \"Unspecified error (0x80004005 (E_FAIL))\" errors you saw when compiling Microsoft.CodeAnalysis.dll. It's really not a failure... it's some encoding we don't support yet in R2R. Should be addressed as part of the version bubble work.\r\n\r\nNit: keeping the warning message commented out, but just under an also commented-out verbosity check.","Url":"https://github.com/dotnet/coreclr/pull/24386","RelatedDescription":"Open PR \"Replace E_FAIL with E_NOTIMPL for an unsupported R2R encoding (Futurework)\" (#24386)"},{"Id":"440259372","IsPullRequest":false,"CreatedAt":"2019-05-03T23:40:54","Actor":"cshung","Number":"24385","RawContent":null,"Title":"Assert failure(PID 217128 [0x00035028], Thread: 229384 [0x38008]): Precondition failure: FAILED: g_fEEStarted","State":"open","Body":"I hit this assert when I tried to run `dotnet trace` as soon as the named pipe is initialized.\r\n\r\n```\r\nAssert failure(PID 217128 [0x00035028], Thread: 229384 [0x38008]): Precondition failure: FAILED: g_fEEStarted\r\n\r\nCORECLR! CHECK::Trigger + 0x2F8 (0x0f3efab8)\r\nCORECLR! EnsureComStarted + 0x1F0 (0x0f4eac80)\r\nCORECLR! Thread::SetApartment + 0x645 (0x0f5470a5)\r\nCORECLR! ThreadpoolMgr::TimerThreadStart + 0x73 (0x0fa784e3)\r\nKERNEL32! BaseThreadInitThunk + 0x19 (0x76fe0419)\r\nNTDLL! RtlGetAppContainerNamedObjectPath + 0xED (0x777a662d)\r\nNTDLL! RtlGetAppContainerNamedObjectPath + 0xBD (0x777a65fd)\r\n    File: C:\\Dev\\coreclr\\src\\vm\\interoputil.cpp Line: 2254\r\n    Image: C:\\Dev\\coreclr\\bin\\tests\\Windows_NT.x86.Debug\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nI believe this is caused by the fact that EventPipe uses ThreadPool too early before the runtime is completely initialized.\r\n\r\nTo reproduce this issue, clone and build the [diagnostics repo](https://github.com/dotnet/diagnostics), check out [my branch](https://github.com/cshung/coreclr/tree/dev/andrewau/auto-trace) and update [autotrace.cpp](https://github.com/cshung/coreclr/blob/dev/andrewau/auto-trace/src/vm/autotrace.cpp) so that it launches in the right path.\r\n\r\nOnce the setup is done, build the coreclr repo and run the [eventlistener test](https://github.com/cshung/coreclr/blob/dev/andrewau/auto-trace/tests/src/tracing/eventlistener/EventListener.cs), it should repro the assertion.","Url":"https://github.com/dotnet/coreclr/issues/24385","RelatedDescription":"Open issue \"Assert failure(PID 217128 [0x00035028], Thread: 229384 [0x38008]): Precondition failure: FAILED: g_fEEStarted\" (#24385)"},{"Id":"440243921","IsPullRequest":true,"CreatedAt":"2019-05-03T22:21:53","Actor":"fadimounir","Number":"24383","RawContent":null,"Title":"Fix 23317","State":"open","Body":"The issue is that a LDVIRTFTN operation becomes a dictionary lookup to a direct call to an abstract function with no code. We AV later when executing the PreStub of that direct call. Fixed by making this a dictionary lookup to a MethodDescSlot lookup, followed by the call to the JIT_VirtualFunctionPointer helper to resolve the target code (Same logic executing in jitted IL mode)","Url":"https://github.com/dotnet/coreclr/pull/24383","RelatedDescription":"Open PR \"Fix 23317\" (#24383)"},{"Id":"440238173","IsPullRequest":true,"CreatedAt":"2019-05-03T22:00:08","Actor":"sdmaclea","Number":"24382","RawContent":null,"Title":"WIP Add ComponentActivator","State":"open","Body":"Add ComponentActivator helper for loading a component\r\nin an isolated AssemblyLoadContext and returning a delegate.","Url":"https://github.com/dotnet/coreclr/pull/24382","RelatedDescription":"Open PR \"WIP Add ComponentActivator\" (#24382)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"440016079","IsPullRequest":true,"CreatedAt":"2019-05-05T12:47:43","Actor":"dotnet-maestro[bot]","Number":"11283","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190502.4\r\n- **Date Produced**: 5/3/2019 4:03 AM\r\n- **Commit**: 231a861bd96b5e4fbe287956be76697f5f900680\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19252.4\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190503.3\r\n- **Date Produced**: 5/4/2019 12:00 AM\r\n- **Commit**: 6a8d9c303ad4eb6cfb86a467e992de8b0b4779ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19253.3\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 3:35 PM\r\n- **Commit**: 4cbbca75493efccdb57de63597e3e4ee452471ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19254.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11283","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11283)"},{"Id":"440410064","IsPullRequest":true,"CreatedAt":"2019-05-05T07:04:57","Actor":"dsychin","Number":"11287","RawContent":null,"Title":"Update warning message for dotnet tool update and uninstall","State":"open","Body":"Fixes #9650\r\nChanged warning message when tool is not found to include more information about package Ids and tool names.","Url":"https://github.com/dotnet/cli/pull/11287","RelatedDescription":"Open PR \"Update warning message for dotnet tool update and uninstall\" (#11287)"},{"Id":"440171880","IsPullRequest":true,"CreatedAt":"2019-05-03T18:42:02","Actor":"brettfo","Number":"11286","RawContent":null,"Title":"[release/2.2.3xx] update F# for LOC changes","State":"open","Body":"LOC changes from Microsoft/visualfsharp#6676.  Waiting on [VS insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/179355).","Url":"https://github.com/dotnet/cli/pull/11286","RelatedDescription":"Open PR \"[release/2.2.3xx] update F# for LOC changes\" (#11286)"},{"Id":"440171576","IsPullRequest":true,"CreatedAt":"2019-05-03T18:41:11","Actor":"brettfo","Number":"11285","RawContent":null,"Title":"[release/2.1.7xx] update F# for LOC changes","State":"open","Body":"LOC changes from Microsoft/visualfsharp#6676.  Waiting on [VS insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/179355).","Url":"https://github.com/dotnet/cli/pull/11285","RelatedDescription":"Open PR \"[release/2.1.7xx] update F# for LOC changes\" (#11285)"},{"Id":"440021989","IsPullRequest":false,"CreatedAt":"2019-05-03T12:24:07","Actor":"LinchaiTheShinigami","Number":"11284","RawContent":null,"Title":"\"Dotnet New Console\" does not handle paths with \"%\" character ","State":"open","Body":"## Steps to reproduce\r\n1. Create a local folder path with the % symbol\r\n2. In the command line run \"Dotnet New Console\" under that folder path\r\n3. Once the console application has been built \"Dotnet Run\"\r\n\r\n## Expected  behavior\r\nConsole should print \"Hello World!\"\r\n\r\n## Actual behavior\r\ncs.proj path is not found (although it exists in the precise location as the mentioned by the error)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.602\r\n Commit:    04475eb7cf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.602\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11284","RelatedDescription":"Open issue \"\"Dotnet New Console\" does not handle paths with \"%\" character \" (#11284)"},{"Id":"439806831","IsPullRequest":true,"CreatedAt":"2019-05-02T21:59:42","Actor":"mmitche","Number":"11282","RawContent":null,"Title":"[release/2.1.5xx] Move to Azure DevOps","State":"open","Body":"Auto-generated Azure DevOps YAML from the Jenkins jobs. Slightly tweaked (e.g. job names)","Url":"https://github.com/dotnet/cli/pull/11282","RelatedDescription":"Open PR \"[release/2.1.5xx] Move to Azure DevOps\" (#11282)"},{"Id":"439805915","IsPullRequest":true,"CreatedAt":"2019-05-02T21:56:43","Actor":"mmitche","Number":"11281","RawContent":null,"Title":"[release/2.2.1xx] Move to Azure DevOps","State":"open","Body":"Auto-generated Azure DevOps YAML from the Jenkins jobs. Slightly tweaked (e.g. job names)\r\n","Url":"https://github.com/dotnet/cli/pull/11281","RelatedDescription":"Open PR \"[release/2.2.1xx] Move to Azure DevOps\" (#11281)"},{"Id":"439714846","IsPullRequest":true,"CreatedAt":"2019-05-02T21:35:47","Actor":"mmitche","Number":"11280","RawContent":null,"Title":"[NOMERGE, WIP] Test automated move to AzDO","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/11280","RelatedDescription":"Closed or merged PR \"[NOMERGE, WIP] Test automated move to AzDO\" (#11280)"},{"Id":"439606725","IsPullRequest":true,"CreatedAt":"2019-05-02T13:59:43","Actor":"v-mdriml","Number":"11279","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master 20190502","State":"open","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/11279","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/cli master 20190502\" (#11279)"},{"Id":"439570748","IsPullRequest":false,"CreatedAt":"2019-05-02T12:43:04","Actor":"hez2010","Number":"11278","RawContent":null,"Title":"How to disable assemblies referenced by project or nuget package?","State":"open","Body":"## Steps to reproduce\r\n```\r\ndotnet new classlib -f netstandard2.1\r\ndotnet add package SixLabors.ImageSharp --version 1.0.0-beta0006\r\n```\r\nadd a method using `Span<T>` in Class1.cs such as:\r\n```csharp\r\npublic void Test()\r\n{\r\n    Span<int> x;\r\n}\r\n```\r\n```\r\ndotnet build\r\n```\r\n\r\n## Expected  behavior\r\nSuccessfully built\r\n\r\n## Actual behavior\r\nI have no way to use `Span<T>`\r\n```\r\nerror CS0433: The type 'Span<T>' exists in both 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' and 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [C:\\Users\\hez20\\Desktop\\test\\test.csproj]\r\n```\r\nSystem.Memory (Version=2.1.0.0) was referenced by my .net standard 2.1 project, and System.Memory (Version=4.0.1.0) was referenced by SixLabors.ImageSharp which is a nuget package and I cannot modify its source code.\r\n\r\nHow can I specify the assembly I want to use in my source code? Is there any way to keep System.Memory (Version=4.0.1.0) only being used in SixLabors.ImageSharp, and not spreading to my project?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011223\r\n Commit:    118dd862c8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11278","RelatedDescription":"Open issue \"How to disable assemblies referenced by project or nuget package?\" (#11278)"},{"Id":"438743990","IsPullRequest":true,"CreatedAt":"2019-05-02T12:05:48","Actor":"dotnet-maestro[bot]","Number":"11269","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190429.1\r\n- **Date Produced**: 4/29/2019 9:09 PM\r\n- **Commit**: 6fa41425ff96b489f2a770191702c1a7bc592620\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19229.1\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190430.1\r\n- **Date Produced**: 4/30/2019 11:56 PM\r\n- **Commit**: ea732012ed177a08d8e364ed87ca662fd83ede16\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19230.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11269","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11269)"},{"Id":"439556477","IsPullRequest":true,"CreatedAt":"2019-05-02T12:05:44","Actor":"dotnet-maestro[bot]","Number":"11277","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11277","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11277)"},{"Id":"439431556","IsPullRequest":false,"CreatedAt":"2019-05-02T05:26:14","Actor":"Leon99","Number":"11276","RawContent":null,"Title":"Support for appsetings.yml","State":"open","Body":"There is an increasing number of systems that adapt YAML as a configuration format. Unfortunately, .NET requires much more effort to use appsetings.yml than to use appsetings.json. One piece to it that is small but very annoying when put to scale is having to explicitly include the following code in a csproj:\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"appsettings.*\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n  </ItemGroup>\r\n```\r\nThis is a suggestion to adjust the build tool to handle appsettings.\\*.yml the same way appsettings.\\*.json are handled, which is, I guess, copying them to publish directory without having that piece in the csproj.","Url":"https://github.com/dotnet/cli/issues/11276","RelatedDescription":"Open issue \"Support for appsetings.yml\" (#11276)"},{"Id":"439293807","IsPullRequest":false,"CreatedAt":"2019-05-01T19:38:54","Actor":"mabead","Number":"11275","RawContent":null,"Title":"pre-jitting result of `dotnet publish`","State":"open","Body":"The [dotnet store](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-store) command has the ability to optimize the assemblies for the target platform:\r\n\r\n> By default, assemblies are optimized for the target runtime and framework. For more information, see the runtime package store topic.\r\n\r\nAs said in https://github.com/dotnet/cli/issues/11270, it is not clear what is optimized. But if I read between the lines of [this post](https://aws.amazon.com/blogs/developer/aws-lambda-layers-with-net-core/), it looks like the `dotnet store` command pre-jits the assemblies for the target environment. This is something quite usefull to speed-up the startup of applications.\r\n\r\nWould it be possible to provide the same optimizations through an `--optimize` option to `dotnet publish`? This would make it easier than having to manage runtime package stores to optimize assemblies for the target platform. \r\n\r\nI would use it for sure to pre-jit assemblies of AWS lambdas thus minimizing the cold start time overhead.\r\n","Url":"https://github.com/dotnet/cli/issues/11275","RelatedDescription":"Open issue \"pre-jitting result of `dotnet publish`\" (#11275)"},{"Id":"439242909","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:06","Actor":"nugetlurker","Number":"11274","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into cli","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/11274","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into cli\" (#11274)"},{"Id":"439242888","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:01","Actor":"nugetlurker","Number":"11273","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into cli","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/11273","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into cli\" (#11273)"},{"Id":"438743812","IsPullRequest":true,"CreatedAt":"2019-05-01T12:45:32","Actor":"dotnet-maestro[bot]","Number":"11268","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11268","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11268)"},{"Id":"438939671","IsPullRequest":false,"CreatedAt":"2019-04-30T21:58:51","Actor":"HizzyCO","Number":"11272","RawContent":null,"Title":"Unable to install any dotnet tool","State":"closed","Body":"## Steps to reproduce\r\nOpen Command line and run \r\ndotnet tool install --global Amazon.ECS.Tools --version 3.0.0\r\n\r\nUsing this tool as a specific value for a tool but happens with any tool.\r\n## Expected  behavior\r\nStates tool installed\r\n\r\n## Actual behavior\r\nC:\\Program Files\\dotnet\\sdk\\2.1.505\\NuGet.targets(114,5): error : Failed to retrieve information about 'amazon.ecs.tools' from remote source 'https://www.nuget.org/FindPackagesById()?id='amazon.ecs.tools'&semVerLevel=2.0.0'. [C:\\Users\\***\\restore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.505\\NuGet.targets(114,5): error :   Response status code does not indicate success: 404 (Not Found). [C:\\Users\\**\\restore.csproj]\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.505\r\n Commit:    b220231234\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.505\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11272","RelatedDescription":"Closed issue \"Unable to install any dotnet tool\" (#11272)"},{"Id":"438859262","IsPullRequest":false,"CreatedAt":"2019-04-30T16:10:48","Actor":"tmaconko","Number":"11271","RawContent":null,"Title":"dotnet build fails to generate files for XAML","State":"open","Body":"Please confirm, whether this is a bug, or I am just having trouble after migration to .NET SDK 2.2.203 from 2.1.502. \r\n\r\n## Steps to reproduce\r\n\r\nI have updated version in global.json file, which is in root folder of my solution. There are different project types: net472, netstandard2.0 and netcoreapp2.2.\r\n\r\nMy global.json file looks like:\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.203\"\r\n  }\r\n}\r\n```\r\n\r\nBelow, there is a WPF csproj file, which runs my app:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <LanguageTargets>$(MSBuildToolsPath)\\Microsoft.CSharp.targets</LanguageTargets>\r\n    <AssemblyName>ServiceMonitor</AssemblyName>\r\n    <RootNamespace>ServiceMonitor</RootNamespace>\r\n    <OutputType>WinExe</OutputType>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n    <Prefer32Bit>false</Prefer32Bit>\r\n    <WarningLevel>4</WarningLevel>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <StartupObject>ServiceMonitor.App</StartupObject>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ApplicationDefinition Include=\"App.xaml\">\r\n      <Generator>MSBuild:UpdateDesignTimeXaml</Generator>\r\n    </ApplicationDefinition>\r\n    <Compile Update=\"App.xaml.cs\">\r\n      <DependentUpon>App.xaml</DependentUpon>\r\n    </Compile>\r\n    <Page Include=\"MainWindow.xaml\">\r\n      <Generator>MSBuild:UpdateDesignTimeXaml</Generator>\r\n    </Page>\r\n    <Compile Update=\"MainWindow.xaml.cs\">\r\n      <DependentUpon>MainWindow.xaml</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"..\\SharedAssemblyInfo.cs\" Link=\"Properties\\SharedAssemblyInfo.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.VisualBasic\" />\r\n    <Reference Include=\"PresentationCore\" />\r\n    <Reference Include=\"PresentationFramework\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Management\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Windows\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n    <Reference Include=\"System.Xaml\" />\r\n    <Reference Include=\"WindowsBase\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Infrastructure\\Infrastructure.csproj\" />\r\n    <ProjectReference Include=\"..\\Wpf\\Wpf.csproj\" />\r\n  </ItemGroup>\r\n  <Import Project=\"..\\shared.targets\" />\r\n  <Import Project=\"..\\..\\..\\.paket\\Paket.Restore.targets\" />\r\n</Project>\r\n```\r\n\r\n## Expected  behavior\r\nBuilding solution with dotnet build command worked fine earlier with SDK 2.1.502, *.g.cs files were being generated and everything has been being resolved, but after changing to 2.2.203, files stopped being generated and build started failing.\r\n\r\n## Actual behavior\r\nThe problem is that when I run build (dotnet build MySolution.sln) then WPF project build fails with error: \r\n```\r\n9>App.xaml.cs(64,33): Error CS0115 : 'App.OnStartup(StartupEventArgs)': no suitable method found to override\r\n9>App.xaml.cs(121,33): Error CS0115 : 'App.OnExit(ExitEventArgs)': no suitable method found to override\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nC:\\Source\\LiveStats.AmericanFootball>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.203\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-1-003177 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.1 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.106 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11271","RelatedDescription":"Open issue \"dotnet build fails to generate files for XAML\" (#11271)"},{"Id":"438769923","IsPullRequest":false,"CreatedAt":"2019-04-30T13:10:18","Actor":"mabead","Number":"11270","RawContent":null,"Title":"What is optimized through `dotnet store`? Are assemblies pre-jitted?","State":"open","Body":"When we read the documentation of the [dotnet store](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-store) command, we can read that:\r\n\r\n> By default, assemblies are optimized for the target runtime and framework. For more information, see the runtime package store topic.\r\n\r\nUnfortunately, the \"runtime package store topic\" does not provide more details on the optimizations that take place.\r\n\r\nMy question is: what are the optimizations that take place? In particular, are the assemblies pre-jitted for the target environment?\r\n","Url":"https://github.com/dotnet/cli/issues/11270","RelatedDescription":"Open issue \"What is optimized through `dotnet store`? Are assemblies pre-jitted?\" (#11270)"},{"Id":"438578983","IsPullRequest":false,"CreatedAt":"2019-04-30T02:22:59","Actor":"sillyousu","Number":"11267","RawContent":null,"Title":"The library 'hostpolicy.dll' required to execute the application was not found in","State":"closed","Body":"## Steps to reproduce\r\n\r\ncreate a hello world project:\r\n```\r\nmkdir ClassLib\r\ncd ClassLib\r\ndotnet new classlib\r\ncd ..\r\nmkdir Main \r\ncd Main\r\ndotnet new console\r\ndotnet  add reference ..\\ClassLib\\ClassLib.csproj\r\ndotnet build\r\ndotnet .\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll\r\n```\r\n```\r\n.\r\n├── ClassLib\r\n│   ├── Class1.cs\r\n│   └── ClassLib.csproj\r\n└── Main\r\n    ├── Main.csproj\r\n    └── Program.cs\r\n```\r\n\r\n## Expected  behavior\r\nmeaningful error message\r\n\r\n## Actual behavior\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\'.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\supei\\xd\\sims\\fooo\\Main> dotnet.exe --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11267","RelatedDescription":"Closed issue \"The library 'hostpolicy.dll' required to execute the application was not found in\" (#11267)"},{"Id":"438521775","IsPullRequest":true,"CreatedAt":"2019-04-29T22:34:25","Actor":"peterhuene","Number":"11265","RawContent":null,"Title":"Update Roslyn to `3.1.0-beta3-19223-09`.","State":"closed","Body":"This commit updates Roslyn to `3.1.0-beta3-19223-09`.","Url":"https://github.com/dotnet/cli/pull/11265","RelatedDescription":"Closed or merged PR \"Update Roslyn to `3.1.0-beta3-19223-09`.\" (#11265)"},{"Id":"438522557","IsPullRequest":true,"CreatedAt":"2019-04-29T22:29:55","Actor":"peterhuene","Number":"11266","RawContent":null,"Title":"Update Roslyn to 3.1.0-beta3-19223-09.","State":"closed","Body":"This commit updates Roslyn to `3.1.0-beta3-19223-09`.","Url":"https://github.com/dotnet/cli/pull/11266","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.1.0-beta3-19223-09.\" (#11266)"},{"Id":"438456068","IsPullRequest":false,"CreatedAt":"2019-04-29T18:50:24","Actor":"karann-msft","Number":"11264","RawContent":null,"Title":"https://aka.ms/missing-command is broken","State":"open","Body":"```\r\nC:\\WINDOWS\\System32>dotnet install -h\r\nNo executable found matching command \"dotnet-install\". See https://aka.ms/missing-command for more information.\r\n```","Url":"https://github.com/dotnet/cli/issues/11264","RelatedDescription":"Open issue \"https://aka.ms/missing-command is broken\" (#11264)"},{"Id":"438170996","IsPullRequest":true,"CreatedAt":"2019-04-29T17:02:15","Actor":"peterhuene","Number":"11261","RawContent":null,"Title":"Update SDK version to `2.2.300-preview-64023-02`.","State":"closed","Body":"This commit updates the SDK version to `2.2.300-preview-64023-02`.","Url":"https://github.com/dotnet/cli/pull/11261","RelatedDescription":"Closed or merged PR \"Update SDK version to `2.2.300-preview-64023-02`.\" (#11261)"},{"Id":"438150404","IsPullRequest":true,"CreatedAt":"2019-04-29T17:02:07","Actor":"peterhuene","Number":"11260","RawContent":null,"Title":"Update the SDK to `2.1.700-preview-64023-01`.","State":"closed","Body":"This commit updates the SDK to `2.1.700-preview-64023-01`.\r\n","Url":"https://github.com/dotnet/cli/pull/11260","RelatedDescription":"Closed or merged PR \"Update the SDK to `2.1.700-preview-64023-01`.\" (#11260)"},{"Id":"438373122","IsPullRequest":false,"CreatedAt":"2019-04-29T15:24:56","Actor":"mattbaumann","Number":"11263","RawContent":null,"Title":"Dotnet SDK not Found on Windows Server 2016","State":"open","Body":"# General\r\n\r\n| Component | Name | Version |\r\n| --------------|--------|---------- |\r\n| Operating System | Windows Server 2016 Std |  10.0.14393 |\r\n| Shell | Powershell |\r\n\r\nSince the update of my windows server software up to Build 14393, I cannot access the .net Core SDK via the command line. \r\n\r\nI did the following, unsuccessful attempt to resolve the issue:\r\n\r\n* Install newest Version of .Net Core SDK 2.2.106\r\n* Check\r\n* Remove all versions\r\n* Install version of .Net Core SDK 2.2.203\r\n* Install version of .Net Core SDK 2.2.106\r\n* Restart of the server\r\n* Check\r\n\r\nStill getting the following error when executing a build on the command line:\r\n\r\n```bash\r\n Did you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n```\r\n\r\nResponse when I run ``dotnet --info`\r\n\r\n```bash\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nObviously, It cannot compile without finding the actual SDK, but why does the installation with the _official Installer_ yield in an partially installed State? (files are copied correctly in c:/program files/dotnet/sdk/<version> though). \r\n\r\nPlease let me know, whether you need additional information and I will answer promptly.\r\n","Url":"https://github.com/dotnet/cli/issues/11263","RelatedDescription":"Open issue \"Dotnet SDK not Found on Windows Server 2016\" (#11263)"},{"Id":"438229327","IsPullRequest":false,"CreatedAt":"2019-04-29T09:40:16","Actor":"joperator","Number":"11262","RawContent":null,"Title":".NET Core 3.0 SDK on FreeBSD: The current .NET SDK does not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1.","State":"open","Body":"I've followed the steps described in [22124](https://github.com/dotnet/coreclr/issues/22124#issuecomment-460359445) to build a .NET Core project targeting .NET Standard 2.1 with the latest .NET Core 3.0 SDK for FreeBSD provided by the daily builds.\r\n\r\nWhen using the `dotnet build` command on FreeBSD, I get the following error NETSDK1045:\r\nThe current .NET SDK does not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1.\r\n\r\nWhen using the `dotnet build` command from the corresponding .NET Core 3.0 SDK on Windows or Linux, the build succeeded without errors.\r\n\r\nAlso targeting other frameworks like netcoreapp2.0, netcoreapp3.0 or netstandard2.0 works on FreeBSD using the latest .NET Core 3.0 SDK.\r\nHowever, I need at least netstandard2.1, but no netcoreapp3.0 features, so that I can reference my .NET Core project in other libraries that target .NET Standard 2.1.\r\n\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010021\r\n Commit:    d5c97b7c2a\r\n\r\nRuntime Environment:\r\n OS Name:     FreeBSD\r\n OS Version:  12\r\n OS Platform: FreeBSD\r\n RID:         freebsd-x64\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010021\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01\r\n```","Url":"https://github.com/dotnet/cli/issues/11262","RelatedDescription":"Open issue \".NET Core 3.0 SDK on FreeBSD: The current .NET SDK does not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1.\" (#11262)"},{"Id":"438014644","IsPullRequest":false,"CreatedAt":"2019-04-29T04:12:16","Actor":"sandcastle","Number":"11259","RawContent":null,"Title":"Add flag to override default tool install behaviour when tool already installed","State":"closed","Body":"Currently, running the install command for a tool that is already installed returns an error. This is a real pain when using this in dev and CI scripts as it will abort the script. I.\r\n\r\nIdeally, it should be an idempotent operation and not raise any error like like installing NPM, Yarn, Nuget and many other package managers. But given #9482 was closed and there appears to be no appetite to change the default, can we at least get a flag added to override the behaviour?\r\n\r\n\r\n## Steps to reproduce\r\n\r\n1. Already have the `dotnet-format`\r\n2. Run `dotnet tool install -g dotnet-format`\r\n3. You will get an error\r\n\r\n\r\n## New flag\r\n\r\nAdding a `--slient|-s` or `--no-errors|-ne` flag would work:\r\n\r\n```sh\r\ndotnet tool install -g --slient dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\nRunning the following would not raise an error:\r\n\r\n```sh\r\ndotnet tool install -g -s dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\n\r\n## Example dev/ci script\r\n\r\nHere is an example of a script that would currently blow up:\r\n\r\n```sh\r\n#!/bin/sh\r\nset -e\r\n\r\ncd \"$(dirname \"$0\")/..\"\r\n\r\n# --------\r\n\r\necho \"Installing dependencies\"\r\nif [ \"${1}\" != \"--ci\" ]; then\r\n\r\n  # Error will occur here!\r\n  dotnet tool install -g dotnet-format\r\n\r\nfi\r\n\r\ndotnet restore\r\n```\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```sh\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nPlease let me know if this is something you would like to see a PR for?","Url":"https://github.com/dotnet/cli/issues/11259","RelatedDescription":"Closed issue \"Add flag to override default tool install behaviour when tool already installed\" (#11259)"},{"Id":"437936539","IsPullRequest":true,"CreatedAt":"2019-04-27T12:42:05","Actor":"dotnet-maestro[bot]","Number":"11258","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 11:50 PM\r\n- **Commit**: 7d419793e74a2291ecfc9684aafc4dd7cc595361\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19226.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11258","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11258)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"open","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Open issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-02T22:31:53","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"open","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Open PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-02T21:23:04","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"open","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Open PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"439351218","IsPullRequest":true,"CreatedAt":"2019-05-01T22:24:28","Actor":"wtgodbe","Number":"1173","RawContent":null,"Title":"Update to the 3.0 SDK","State":"open","Body":"CC @ViktorHofer @ericstj ","Url":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Open PR \"Update to the 3.0 SDK\" (#1173)"},{"Id":"439143422","IsPullRequest":true,"CreatedAt":"2019-05-01T12:03:40","Actor":"dotnet-maestro[bot]","Number":"1172","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1172)"},{"Id":"438892784","IsPullRequest":false,"CreatedAt":"2019-04-30T17:32:25","Actor":"ericstj","Number":"1171","RawContent":null,"Title":"BaseNumberConverter should be effectively sealed","State":"open","Body":"See https://github.com/dotnet/corefx/pull/37278\r\n\r\nBaseNumberConverter shouldn't be derivable.  On desktop it's a compile error.  Since netstandard.dll doesn't include internal members it permits compile, but fails at runtime for most frameworks since internal abstract members are not overridden.\r\n\r\n/cc @Anipik ","Url":"https://github.com/dotnet/standard/issues/1171","RelatedDescription":"Open issue \"BaseNumberConverter should be effectively sealed\" (#1171)"},{"Id":"438281734","IsPullRequest":true,"CreatedAt":"2019-04-30T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1170","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19229.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1170)"},{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-21T18:54:16","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:44","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"closed","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Closed or merged PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:31","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"closed","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Closed or merged PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"closed","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Closed or merged PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"440543934","IsPullRequest":true,"CreatedAt":"2019-05-06T05:20:44","Actor":"dotnet-maestro-bot","Number":"37459","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27706-00, beta-27706-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37459","RelatedDescription":"Open PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27706-00, beta-27706-00, respectively (master)\" (#37459)"},{"Id":"440514120","IsPullRequest":true,"CreatedAt":"2019-05-06T02:28:18","Actor":"meziantou","Number":"37458","RawContent":null,"Title":"Add FlushAsync in XDocument.SaveAsync to prevent blocking calls in Dispose","State":"closed","Body":"/fix #37457 ","Url":"https://github.com/dotnet/corefx/pull/37458","RelatedDescription":"Closed or merged PR \"Add FlushAsync in XDocument.SaveAsync to prevent blocking calls in Dispose\" (#37458)"},{"Id":"440512887","IsPullRequest":false,"CreatedAt":"2019-05-06T02:28:17","Actor":"meziantou","Number":"37457","RawContent":null,"Title":"XDocument.SaveAsync has a blocking call","State":"closed","Body":"`XDocument.SaveAsync` has a blocking call. In ASP.NET Core 3 this is not allowed (by default).\r\n\r\n````\r\nSystem.Net.Http.HttpRequestException: Error while copying content to a stream. ---> System.IO.IOException:  ---> System.InvalidOperationException: Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true.\r\n\r\nat Microsoft.AspNetCore.TestHost.ResponseStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.Flush()\r\n   at System.Xml.XmlWellFormedWriter.Close()\r\n   at System.Xml.XmlWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlAsyncCheckWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlWriter.Dispose()\r\n   at System.Xml.Linq.XDocument.SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n   at MyCode(Stream stream, XDocument document, CancellationToken cancellationToken)\r\n````\r\n\r\nI think `SaveAsync` should call `FlushAsync` before calling `Dispose` (or maybe `XmlWriter` should implement `IAsyncDisposable`).\r\n\r\n```c#\r\n        public async Task SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n        {\r\n            XmlWriterSettings ws = GetXmlWriterSettings(options);\r\n\r\n            ws.Async = true;\r\n\r\n            if (_declaration != null && !string.IsNullOrEmpty(_declaration.Encoding))\r\n            {\r\n                try\r\n                {\r\n                    ws.Encoding = Encoding.GetEncoding(_declaration.Encoding);\r\n                }\r\n                catch (ArgumentException)\r\n                {\r\n                }\r\n            }\r\n\r\n            using (XmlWriter w = XmlWriter.Create(stream, ws))\r\n            {\r\n                await WriteToAsync(w, cancellationToken).ConfigureAwait(false);\r\n\r\n                // I think we should add FlushAsync here\r\n                await w.FlushAsync().ConfigureAwait(false);\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37457","RelatedDescription":"Closed issue \"XDocument.SaveAsync has a blocking call\" (#37457)"},{"Id":"440318341","IsPullRequest":true,"CreatedAt":"2019-05-06T01:49:13","Actor":"dotnet-maestro[bot]","Number":"37441","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 12:57 AM\r\n- **Commit**: 214f424c1821c4b8979b37762098defe17ac0db6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19253.8\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19253.8\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190504.7\r\n- **Date Produced**: 5/5/2019 2:09 AM\r\n- **Commit**: 464097cfc9c970c7ce31288fbd7e7cd8930364ca\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19254.7\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19254.7\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37441","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#37441)"},{"Id":"440483834","IsPullRequest":true,"CreatedAt":"2019-05-06T00:50:38","Actor":"Dotnet-GitSync-Bot","Number":"37454","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corefx/pull/37454","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37454)"},{"Id":"440441415","IsPullRequest":true,"CreatedAt":"2019-05-06T00:43:55","Actor":"dotnet-maestro[bot]","Number":"37448","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190504.72\r\n- **Date Produced**: 5/5/2019 1:15 AM\r\n- **Commit**: 71cae4ca99a163c4fd146e3583c64cb77a83fd0b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview6-27704-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview6-27704-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6-27704-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37448","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#37448)"},{"Id":"440316051","IsPullRequest":true,"CreatedAt":"2019-05-06T00:43:25","Actor":"dotnet-maestro[bot]","Number":"37439","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19253.8\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19253.8\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19254.1\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19254.1\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37439","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#37439)"},{"Id":"440448140","IsPullRequest":true,"CreatedAt":"2019-05-06T00:43:14","Actor":"ViktorHofer","Number":"37450","RawContent":null,"Title":"Disable GetSchema test on Win7","State":"closed","Body":"Disabling GetSchema test which is frequently failing on Win7: https://github.com/dotnet/corefx/issues/37411","Url":"https://github.com/dotnet/corefx/pull/37450","RelatedDescription":"Closed or merged PR \"Disable GetSchema test on Win7\" (#37450)"},{"Id":"440502472","IsPullRequest":true,"CreatedAt":"2019-05-05T23:23:21","Actor":"roji","Number":"37456","RawContent":null,"Title":"Switch to newer, explicit atomic API","State":"open","Body":"Starting with clang 8, the older __sync atomic functions [produce a warning](https://reviews.llvm.org/D51084) for implicit strong memory barriers. This switches to the newer __atomic API where memory ordering is explicitly specified. Note [these GCC docs](https://gcc.gnu.org/wiki/Atomic/GCCMM#From___sync_to___atomic) recommending that __sync be replaced with __atomic, with the former considered deprecated.\r\n\r\nNote that the only usage in the corefx codebase is completely non-perf-sensitive (initialization of the /dev/random file descriptor), so sequential consistency seems appropriate.\r\n\r\nFixes #37174","Url":"https://github.com/dotnet/corefx/pull/37456","RelatedDescription":"Open PR \"Switch to newer, explicit atomic API\" (#37456)"},{"Id":"440496867","IsPullRequest":false,"CreatedAt":"2019-05-05T22:13:54","Actor":"ViktorHofer","Number":"37455","RawContent":null,"Title":"System.Net.Http.Functional.Tests crashed with Debug.Fail","State":"open","Body":"Failed in CI on `Windows.7.Amd64.Open-x64:Debug`: https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37454~2Fmerge/test~2Ffunctional~2Fcli~2F/20190505.14/workItem/System.Net.Http.Functional.Tests/wilogs\r\n\r\n```\r\nAssertion Failed\r\n_httpStreams.Remove failed\r\n\r\n   at System.Net.Http.Http2Connection.RemoveStream(Http2Stream http2Stream) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 1430\r\n   at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 997\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 1027\r\n   at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 1356\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 1027\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 525\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 718\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 162\r\n   at System.Net.Http.HttpConnectionPool.GetHttp2ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 500\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 718\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 162\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 646\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 97\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 273\r\n   at System.Net.Http.ConnectHelper.ConnectEventArgs.OnCompleted(SocketAsyncEventArgs _) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 120\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishWrapperConnectSuccess(Socket connectSocket, Int32 bytesTransferred, SocketFlags flags) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 672\r\n   at System.Net.Sockets.MultipleConnectAsync.Succeed() in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 289\r\n   at System.Net.Sockets.MultipleConnectAsync.InternalConnectCallback(Object sender, SocketAsyncEventArgs args) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 219\r\n   at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 203\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32 bytesTransferred, SocketFlags flags) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 785\r\n   at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__177_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1254\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\Overlapped.cs:line 65\r\n```\r\n\r\ncc @davidsh @wfurt ","Url":"https://github.com/dotnet/corefx/issues/37455","RelatedDescription":"Open issue \"System.Net.Http.Functional.Tests crashed with Debug.Fail\" (#37455)"},{"Id":"440473553","IsPullRequest":false,"CreatedAt":"2019-05-05T18:17:03","Actor":"ViktorHofer","Number":"37453","RawContent":null,"Title":"System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError failing in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=180254&view=ms.vss-test-web.build-test-results-tab&runId=4352366&resultId=324794&paneView=debug\r\n\r\n```\r\nnetcoreapp-OSX-Debug-x64-OSX.1012.Amd64.Open\r\n\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError\r\n\r\nAssert.Contains() Failure\\nNot found: PROTOCOL_ERROR\\nIn value: System.Net.Http.HttpRequestException: Exception of type 'System.Net.Http.HttpRequestException' was thrown.\\n at System.Net.Http.Http2Connection.AddStream(HttpRequestMessage request) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 1411\\n at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 975\\n at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/ValueTask.cs:line 759\\n at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 1356\\n at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 525\\n at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 33\\n at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 496\\n at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\Record.cs:line 82\r\n\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.AssertProtocolErrorAsync(Task task, ProtocolErrors errorCode) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs:line 35\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs:line 119\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\ncc @stephentoub @davidsh ","Url":"https://github.com/dotnet/corefx/issues/37453","RelatedDescription":"Open issue \"System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError failing in CI\" (#37453)"},{"Id":"440462807","IsPullRequest":false,"CreatedAt":"2019-05-05T17:02:34","Actor":"ViktorHofer","Number":"37452","RawContent":null,"Title":"System.Collections.Concurrent.Tests crashing on OSX.1013.Amd64.Open-x64:Debug","State":"closed","Body":"```\r\nDiscovering: System.Collections.Concurrent.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Collections.Concurrent.Tests (found 861 of 868 test cases)\r\n  Starting:    System.Collections.Concurrent.Tests (parallel test collections = on, max threads = 8)\r\nAssertion Failed\r\n\r\n   at System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.get_DangerousCount() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs:line 1056\r\n   at System.Collections.Concurrent.ConcurrentBag`1.get_DangerousCount() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs:line 521\r\n   at System.Collections.Concurrent.ConcurrentBag`1.ToArray() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs:line 390\r\n   at System.Collections.Concurrent.Tests.ConcurrentBagTests.<>c__DisplayClass18_0.<Clear_ConcurrentUsage_NoExceptions>b__1() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Collections.Concurrent/tests/ConcurrentBagTests.netcoreapp.cs:line 85\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2403\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/ThreadPool.cs:line 664\r\n./RunTests.sh: line 175: 69241 Abort trap: 6           (core dumped) \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Collections.Concurrent.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop $RSP_FILE\r\n~/dotnetbuild/work/015db5c5-3b15-4b0a-a6af-ed2ed45932f1/Work/a0939b49-993b-4198-9400-4cbb737d782f/Exec\r\n----- end 07:14:44 ----- exit code 134 ----------------------------------------------------------\r\nexit code 134 means SIGABRT Abort. Managed or native assert, or runtime check such as heap corruption, caused call to abort(). Core dumped.\r\n```\r\n\r\nFailed here: https://dev.azure.com/dnceng/public/_build/results?buildId=180191&view=logs\r\n\r\nRepro Tool link and execution log:\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37450~2Fmerge/test~2Ffunctional~2Fcli~2F/20190505.8/workItem/System.Collections.Concurrent.Tests/wilogs\r\n\r\n@MattGal should be able to help access the ReproTool for the dump. As Santi is out, maybe someone else with access to CorpNet can help.\r\n\r\ncc @stephentoub @danmosemsft ","Url":"https://github.com/dotnet/corefx/issues/37452","RelatedDescription":"Closed issue \"System.Collections.Concurrent.Tests crashing on OSX.1013.Amd64.Open-x64:Debug\" (#37452)"},{"Id":"440461109","IsPullRequest":true,"CreatedAt":"2019-05-05T16:06:09","Actor":"ViktorHofer","Number":"37451","RawContent":null,"Title":"Use LoopbackServer for HttpWebRequestTests","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/22849\r\nFixes https://github.com/dotnet/corefx/issues/37430\r\n\r\nEnabling a few tests which weren't running.\r\n\r\nI left the synchronous tests as they are as I wasn't sure what the pattern for testing with the asynchronous LoopBackServer is.","Url":"https://github.com/dotnet/corefx/pull/37451","RelatedDescription":"Open PR \"Use LoopbackServer for HttpWebRequestTests\" (#37451)"},{"Id":"440317905","IsPullRequest":true,"CreatedAt":"2019-05-05T13:21:27","Actor":"dotnet-maestro[bot]","Number":"37440","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190503.17\r\n- **Date Produced**: 5/4/2019 3:46 AM\r\n- **Commit**: 9296c54f2c7e2944f47c400b6c0e3938844d9c2f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27703-17\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview6-27703-17\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview6-27703-17\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190505.02\r\n- **Date Produced**: 5/5/2019 10:55 AM\r\n- **Commit**: 71ef9eea28230688230124e49e6967bf2e2bbfbd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27705-02\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview6-27705-02\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview6-27705-02\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37440","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#37440)"},{"Id":"440442615","IsPullRequest":true,"CreatedAt":"2019-05-05T13:06:40","Actor":"dotnet-maestro[bot]","Number":"37449","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 11:01 AM\r\n- **Commit**: ae67e92d954578d6c8a2ba8bab0481288e04f967\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190505.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37449","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#37449)"},{"Id":"440432915","IsPullRequest":false,"CreatedAt":"2019-05-05T11:28:29","Actor":"Grammarian","Number":"37447","RawContent":null,"Title":"BoundedChannelWriter.TryWrite() returns true when Channel is full and FullMode is DropWrite","State":"closed","Body":"I would expect this unit test to pass, but it fails on the `IsFalse` assert:\r\n\r\n ```\r\n[TestMethod]\r\npublic void Full()\r\n{\r\n    var channel = Channel.CreateBounded<string>(new BoundedChannelOptions(1)\r\n    {\r\n        AllowSynchronousContinuations = false,\r\n        FullMode = BoundedChannelFullMode.DropWrite,\r\n        SingleReader = true,\r\n        SingleWriter = true\r\n    });\r\n    \r\n    Assert.IsTrue(channel.Writer.TryWrite(\"one\"));\r\n    Assert.IsFalse(channel.Writer.TryWrite(\"two\"));\r\n}\r\n```\r\n\r\nGiven these docs for the `TryWrite()`:\r\n\r\n```\r\n/// <summary>Attempts to write the specified item to the channel.</summary>\r\n/// <param name=\"item\">The item to write.</param>\r\n/// <returns>true if the item was written; otherwise, false if it wasn't written.</returns>\r\npublic abstract bool TryWrite(T item);\r\n```\r\n\r\nThe second `TryWrite()` does not write to the channel, and I think should return false.","Url":"https://github.com/dotnet/corefx/issues/37447","RelatedDescription":"Closed issue \"BoundedChannelWriter.TryWrite() returns true when Channel is full and FullMode is DropWrite\" (#37447)"},{"Id":"440391178","IsPullRequest":false,"CreatedAt":"2019-05-05T02:24:27","Actor":"JamesNK","Number":"37446","RawContent":null,"Title":"HTTP2: System.IO.IOException: The request was aborted.","State":"open","Body":"An error is raised from the gRPC interop tests with HttpClient.SendAsync:\r\n\r\n```\r\nSystem.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: The request was aborted.\r\n   at System.Net.Http.Http2Connection.Http2Stream.TryEnsureHeaders()\r\n   at System.Net.Http.Http2Connection.Http2Stream.ReadResponseHeadersAsync()\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Grpc.NetCore.HttpClient.Internal.GrpcCall`2.SendAsync(HttpClient client, HttpRequestMessage message) in /var/local/git/grpc-dotnet/src/Grpc.NetCore.HttpClient/Internal/GrpcCall.cs:line 349\r\n```\r\n\r\nhttps://source.cloud.google.com/results/invocations/b97f0bdb-5797-4f24-b9b1-54b30875a5b7/targets/github%2Fgrpc%2Finterop_test/tests;group=tests;test=cloud_to_cloud:aspnetcore:c%2B%2B_server:empty_unary:tls;row=4","Url":"https://github.com/dotnet/corefx/issues/37446","RelatedDescription":"Open issue \"HTTP2: System.IO.IOException: The request was aborted.\" (#37446)"},{"Id":"440379986","IsPullRequest":false,"CreatedAt":"2019-05-04T23:18:24","Actor":"JamesNK","Number":"37445","RawContent":null,"Title":"HTTP2: System.OverflowException: Arithmetic operation resulted in an overflow.","State":"open","Body":"An error is raised from the gRPC interop tests with HttpClient.SendAsync:\r\n\r\n```\r\nSystem.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at System.Net.Http.CreditManager.AdjustCredit(Int32 amount)\r\n   at System.Net.Http.Http2Connection.RemoveStream(Http2Stream http2Stream)\r\n   at System.Net.Http.Http2Connection.Http2Stream.Cancel()\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Grpc.NetCore.HttpClient.Internal.GrpcCall`2.SendAsync(HttpClient client, HttpRequestMessage message) in /var/local/git/grpc-dotnet/src/Grpc.NetCore.HttpClient/Internal/GrpcCall.cs:line 349\r\n   at Grpc.NetCore.HttpClient.Internal.GrpcCall`2.GetResponseAsync() in /var/local/git/grpc-dotnet/src/Grpc.NetCore.HttpClient/Internal/GrpcCall.cs:line 250\r\n```\r\n\r\nhttps://source.cloud.google.com/results/invocations/b97f0bdb-5797-4f24-b9b1-54b30875a5b7/targets/github%2Fgrpc%2Finterop_test/tests;group=tests;test=cloud_to_cloud:aspnetcore:c%2B%2B_server:cancel_after_begin:tls;row=1","Url":"https://github.com/dotnet/corefx/issues/37445","RelatedDescription":"Open issue \"HTTP2: System.OverflowException: Arithmetic operation resulted in an overflow.\" (#37445)"},{"Id":"440359894","IsPullRequest":false,"CreatedAt":"2019-05-04T19:13:14","Actor":"BackDoorManUC","Number":"37444","RawContent":null,"Title":"Result<T, TError> helper type for error handling without exceptions","State":"open","Body":"https://github.com/dotnet/csharplang/issues/2474\r\nhttps://github.com/dotnet/csharplang/issues/113\r\n\r\nhttps://medium.com/@michael_altmann/error-handling-returning-results-2b88b5ea11e9\r\n\r\nF# has `Result<'T,'TFailure>` struct\r\nhttps://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/results\r\n\r\nThere are libraries to deal with it but would be nicer if we didn't need them.\r\n\r\n- https://github.com/mcintyre321/OneOf\r\n- https://github.com/Resultful/Resultful\r\n- https://github.com/gnaeus/OperationResult\r\n- https://github.com/altmann/FluentResults\r\n\r\nIf it's a duplicate of https://github.com/dotnet/corefx/issues/18159 please close it\r\n\r\nYay or nay?","Url":"https://github.com/dotnet/corefx/issues/37444","RelatedDescription":"Open issue \"Result<T, TError> helper type for error handling without exceptions\" (#37444)"},{"Id":"440328796","IsPullRequest":true,"CreatedAt":"2019-05-04T16:39:28","Actor":"bartonjs","Number":"37443","RawContent":null,"Title":"Define X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS on non-portable compat builds","State":"closed","Body":"Fixes RHEL6 build break.","Url":"https://github.com/dotnet/corefx/pull/37443","RelatedDescription":"Closed or merged PR \"Define X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS on non-portable compat builds\" (#37443)"},{"Id":"440291672","IsPullRequest":true,"CreatedAt":"2019-05-04T14:33:22","Actor":"maryamariyan","Number":"37438","RawContent":null,"Title":"System.Data.OleDb.Tests.OleDbConnectionTests.GetSchema failed in CI","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/37411\r\n    - Remove small bit of dead code.\r\n    - Add test and cleanup test code\r\n    - Fix System.Data.OleDb.Tests.OleDbConnectionTests.GetSchema failure on CI","Url":"https://github.com/dotnet/corefx/pull/37438","RelatedDescription":"Closed or merged PR \"System.Data.OleDb.Tests.OleDbConnectionTests.GetSchema failed in CI\" (#37438)"},{"Id":"440320202","IsPullRequest":true,"CreatedAt":"2019-05-04T13:39:14","Actor":"dotnet-maestro[bot]","Number":"37442","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190503.71\r\n- **Date Produced**: 5/3/2019 12:44 PM\r\n- **Commit**: 964461ca69639003914fd4fedaf08baf1f388f7e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview6-27703-71\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview6-27703-71\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6-27703-71\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37442","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#37442)"},{"Id":"440256503","IsPullRequest":true,"CreatedAt":"2019-05-04T05:53:18","Actor":"cston","Number":"37436","RawContent":null,"Title":"Port several Interaction methods","State":"closed","Body":"Port `Microsoft.VisualBasic.Interaction.{Beep,CreateObject,IIf}` from https://github.com/Microsoft/referencesource/tree/master/Microsoft.VisualBasic/runtime/msvbalib.\r\n","Url":"https://github.com/dotnet/corefx/pull/37436","RelatedDescription":"Closed or merged PR \"Port several Interaction methods\" (#37436)"},{"Id":"440258613","IsPullRequest":true,"CreatedAt":"2019-05-03T23:35:47","Actor":"ericstj","Number":"37437","RawContent":null,"Title":"Remove runtime.json from Microsoft.NETCore.Targets","State":"open","Body":"This supports functionality that is not present in MSBuild-based restore,\r\nit was only usable in project.json which we no longer support.\r\n\r\nWe keep the package around so that it can replace a 1.0 era version\r\nthat brings in runtime.* packages, should it be referenced.\r\n\r\n/cc @joperezr @dsplaisted ","Url":"https://github.com/dotnet/corefx/pull/37437","RelatedDescription":"Open PR \"Remove runtime.json from Microsoft.NETCore.Targets\" (#37437)"},{"Id":"440254677","IsPullRequest":false,"CreatedAt":"2019-05-03T23:13:17","Actor":"swaroop-sridhar","Number":"37435","RawContent":null,"Title":"API: Single File Bundle APIs","State":"open","Body":"This issue proposes adding a few APIs to support operations corresponding to .Net core apps that are published as single-file bundles. The APIs are based on customer requests.\r\n\r\n## Proposed API\r\n\r\n```cs\r\nnamespace System.Runtime.Loader\r\n{\r\n    public partial class Bundle\r\n    {\r\n        /// <summary>\r\n        /// Check whether the current application is running from a single-file bundle.\r\n        /// </summary>\r\n        /// <returns>\r\n        /// True if the app is a bundle, false otherwise.\r\n        /// </returns>\r\n        public static bool IsBundle();\r\n\r\n        /// <summary>\r\n        /// Get the location where contents of the bundle are extracted\r\n        /// </summary>\r\n        /// <returns>\r\n        /// The absolute path to the directory containing the extracted files, \r\n        ///    if any files were extracted.\r\n        /// null otherwise.   \r\n        /// </returns>\r\n        /// <exception cref=\"InvalidOperationException\">\r\n        /// If invoked in an app that is not a single-file bundle.\r\n        /// </exception>\r\n        public static string GetContentRoot();\r\n\r\n        /// <summary>\r\n        /// Open a file embedded within the single-file bundle.\r\n        /// </summary>\r\n        /// <param name=\"path\">\r\n        /// Relative path to a file within the single-file bundle\r\n        /// </param>\r\n        /// <returns>\r\n        /// The IO stream corresponding to the file requested.\r\n        /// </returns>\r\n        /// <exception cref=\"InvalidOperationException\">\r\n        /// If invoked in an app that is not a single-file bundle.\r\n        /// </exception>\r\n        /// <exception cref=\"ArgumentNullException\">\r\n        /// If path is null\r\n        /// </exception>\r\n        /// <exception cref=\"ArgumentException\">\r\n        /// If the file requested is not embedded in the bundle.\r\n        /// </exception>\r\n        public static System.IO.Stream GetFileStream(string path);\r\n    }\r\n}\r\n```\r\n\r\n## Discussion\r\n\r\n### IsBundle()\r\n\r\nIt is likely that some apps are used in both single-file and normal publish modes (ex: for testing vs distribution, distributed differently on different platforms, etc). The app may use the information about whether it is running from a bundle to:\r\n* Alter certain behavior about the way content files are processed\r\n* Collect the information in telemetry or crash dumps\r\n* etc.\r\n\r\n### GetContentRoot()\r\n\r\nWhen apps are published, it may expect certain content files to be present in the same location. For single-file apps, the embeded contents are extracted to a different directory. Apps can find the location of extracted files through this API.\r\n\r\nIn particular, ASP.NET Core apps currently set their “ContentRoot” to the current directory which includes for things like serving static files; when deployed as single-files, they'll need this API to set the \"ContentRoot\".  \r\n\r\n### GetFileStream()\r\n\r\nThe binaries that are published in the project are expected to be handled transparently by the host. However, explicit access to the embedded files is useful in situations such as:\r\n\r\n- Reading additional files packaged into the app (ex: data files).\r\n- Open an assembly for reflection/inspection\r\n\r\nTherefore, we propose adding an API similar to [GetManifestResourceStream](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcestream?view=netframework-4.7.2#System_Reflection_Assembly_GetManifestResourceStream_System_String_) to obtain a stream corresponding to an embedded file. \r\n\r\nThe implementation of this API may return: \r\n* A `FileStream` to the requested file is extracted out to disk, or \r\n* A `MemoryStream` to the file's contents embedded within the bundle. \r\n\r\n## Further Work\r\n\r\n* We currently only have single-file app EXEs. In future, we may implement single-file class-libs that can be loaded into apps as plugins. For single-file plugins, we'll need to expand the above APIs to query with respect to the an assembly. The `assembly` argument is the main assembly into which its dependencies are embedded.\r\n\r\n```cs\r\nnamespace System.Runtime.Loader\r\n{\r\n    public partial class Bundle\r\n    {\r\n        public static bool IsBundle(Assembly assembly);\r\n        public static string GetContentRoot(Assembly assembly);\r\n        public static System.IO.Stream GetFileStream(Assembly assembly, string name);\r\n    }\r\n}\r\n```\r\n\r\n* We can provide a variant of `GetFileStream()` API that abstracts away the details of whether an app is bundled or not. That is, if the app is bundled into a single-file, it fetches the file from the bundle (or extracted directory). If not, it finds the file on disk alongside the app binary. \r\nHowever such abstractions can easily be built outside of `CoreFX`.\r\n\r\n## References\r\n\r\n* Single-file distribution [work-item](https://github.com/dotnet/coreclr/issues/20287) \r\n* Single-file publishing [design doc](https://github.com/dotnet/designs/blob/master/accepted/single-file/design.md)\r\n","Url":"https://github.com/dotnet/corefx/issues/37435","RelatedDescription":"Open issue \"API: Single File Bundle APIs\" (#37435)"},{"Id":"440253360","IsPullRequest":false,"CreatedAt":"2019-05-03T23:06:54","Actor":"kjeske","Number":"37434","RawContent":null,"Title":"JsonSerializer does not serialize structs","State":"open","Body":"When I try to serialize struct to JSON I get an error.\r\n\r\nStruct:\r\n```c#\r\npublic struct MyStruct\r\n{\r\n    public MyStruct(string name)\r\n    {\r\n        Name = name;\r\n    }\r\n\r\n    public string Name { get; }\r\n}\r\n```\r\n\r\nExecution:\r\n```c#\r\nvar myStruct = new MyStruct(\"Test\")\r\nvar json = JsonSerializer.ToString(myStruct);\r\n```\r\n\r\n**Exception:**\r\nException has been thrown by the target of an invocation.\r\n```\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Text.Json.Serialization.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.Serialization.WriteStackFrame.Initialize(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.WriteCore(ArrayBufferWriter`1 output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.WriteCoreString(Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.ToString[TValue](TValue value, JsonSerializerOptions options)\r\n```\r\n\r\n**Inner exception:**\r\nCannot bind to the target method because its signature is not compatible with that of the delegate type.\r\n```\r\n   at System.Delegate.CreateDelegate(Type type, MethodInfo method, Boolean throwOnBindFailure)\r\n   at System.Text.Json.Serialization.JsonPropertyInfoCommon`3..ctor(Type parentClassType, Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type elementType, JsonSerializerOptions options)\r\n```","Url":"https://github.com/dotnet/corefx/issues/37434","RelatedDescription":"Open issue \"JsonSerializer does not serialize structs\" (#37434)"},{"Id":"440252621","IsPullRequest":true,"CreatedAt":"2019-05-03T23:03:08","Actor":"steveharter","Number":"37433","RawContent":null,"Title":"Update serialization doc for Preview 5","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37433","RelatedDescription":"Closed or merged PR \"Update serialization doc for Preview 5\" (#37433)"},{"Id":"440249156","IsPullRequest":false,"CreatedAt":"2019-05-03T22:45:39","Actor":"tannergooding","Number":"37432","RawContent":null,"Title":" System.Net.NetworkInformation.Functional.Tests timeout on Ubuntu 16.04 Arm64","State":"open","Body":"```\r\nExecuted on DDARM64S-004 using docker image mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-helix-arm64v8-b049512-20190321153539\r\nrunning $HELIX_CORRELATION_PAYLOAD/scripts/77add1d9baca44339c2be61a05e5d794/execute.sh in /home/helixbot/dotnetbuild/work/c2fd2b8d-5cbb-4846-aa3a-c7dc774e7995/Work/52887a11-95dd-478f-835d-4a7a40ebebb6/Exec max 900 seconds\r\n\r\nOutput:\r\n[BEGIN EXECUTION]\r\n+ ./RunTests.sh --runtime-path /root/helix/work/correlation --dotnet-root /root/helix/work/correlation\r\n----- start 21:16:04 =============== To repro directly: =====================================================\r\npushd .\r\n/root/helix/work/correlation/dotnet xunit.console.dll System.Net.NetworkInformation.Functional.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop \r\npopd\r\n===========================================================================================================\r\n/root/helix/work/workitem /root/helix/work/workitem\r\n  Discovering: System.Net.NetworkInformation.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Net.NetworkInformation.Functional.Tests (found 60 of 75 test cases)\r\n  Starting:    System.Net.NetworkInformation.Functional.Tests (parallel test collections = on, max threads = 46)\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:02:11\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:04:11\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:06:11\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:08:11\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:10:11\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:12:11\r\n   System.Net.NetworkInformation.Functional.Tests: [Long Running Test] 'System.Net.NetworkInformation.Tests.IPInterfacePropertiesTest_Linux.IPv6ScopeId_AccessAllValues_Success', Elapsed: 00:14:11\r\n\r\n[EXECUTION TIMED OUT]\r\nExit Code:-3Executor timed out after 900 seconds and was killed\r\n```","Url":"https://github.com/dotnet/corefx/issues/37432","RelatedDescription":"Open issue \" System.Net.NetworkInformation.Functional.Tests timeout on Ubuntu 16.04 Arm64\" (#37432)"},{"Id":"440248894","IsPullRequest":false,"CreatedAt":"2019-05-03T22:44:27","Actor":"JamesNK","Number":"37431","RawContent":null,"Title":"Unfriendly error when calling HTTP/2 endpoint with mismatched TLS settings","State":"open","Body":"I have a .NET Core client calling a HTTP/2 server. The server has TLS enabled. When I call the server without TLS enabled on the client (I was not using TLS in dev and forgot to change it for the test environment which has TLS) I get an unfriendly error from SendAsync.\r\n\r\nCode:\r\n\r\n```cs\r\nAppContext.SetSwitch(\"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport\", true);\r\nAppContext.SetSwitch(\"System.Net.Http.SocketsHttpHandler.Http2Support\", true);\r\n\r\nvar httpClientHandler = new HttpClientHandler();\r\nhttpClientHandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\n\r\nvar httpClient = new HttpClient(httpClientHandler);\r\nvar requestMessage = new HttpRequestMessage(HttpMethod.Post, \"http://localhost:8080\");\r\nvar response = await httpClient.SendAsync(requestMessage, HttpCompletionOption.ResponseHeadersRead);\r\n```\r\n\r\nError:\r\n\r\n```\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (An error occurred while sending the request.) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'CreditManager'.\r\n   at System.Net.Http.CreditManager.RequestCreditAsync(Int32 amount, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n```\r\n\r\nI would have expected an error saying that the server requires TLS and TLS is not enabled for this call in the client.\r\n\r\nThis is lower priority. Changing the client app to use https fixed the problem.\r\n\r\nEnvironment:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-011694\r\n Commit:    a5312773db\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011694\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27629-07\r\n  Commit:  a3967b6096\r\n```","Url":"https://github.com/dotnet/corefx/issues/37431","RelatedDescription":"Open issue \"Unfriendly error when calling HTTP/2 endpoint with mismatched TLS settings\" (#37431)"},{"Id":"440248872","IsPullRequest":false,"CreatedAt":"2019-05-03T22:44:19","Actor":"tannergooding","Number":"37430","RawContent":null,"Title":"System.Net.Tests.HttpWebRequestTest/HaveResponse_GetResponseAsync_ExpectTrue failed due to timeout","State":"open","Body":"```\r\nSystem.Net.WebException : A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n---- System.Net.Http.HttpRequestException : A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n-------- System.Net.Sockets.SocketException : A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n```\r\n```\r\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\\a\\1\\s\\src\\System.Net.Requests\\src\\System\\Net\\HttpWebRequest.cs:line 1276\r\n   at System.Net.WebRequest.<>c.<GetResponseAsync>b__68_2(IAsyncResult iar) in D:\\a\\1\\s\\src\\System.Net.Requests\\src\\System\\Net\\WebRequest.cs:line 550\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\FutureFactory.cs:line 510\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Tests.HttpWebRequestTest.HaveResponse_GetResponseAsync_ExpectTrue(Uri remoteServer) in D:\\a\\1\\s\\src\\System.Net.Requests\\tests\\HttpWebRequestTest.cs:line 1268\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 84\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs:line 759\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 610\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs:line 759\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 650\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs:line 759\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 316\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs:line 759\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 508\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\RedirectHandler.cs:line 33\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs:line 528\r\n   at System.Net.HttpWebRequest.SendRequest() in D:\\a\\1\\s\\src\\System.Net.Requests\\src\\System\\Net\\HttpWebRequest.cs:line 1222\r\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\\a\\1\\s\\src\\System.Net.Requests\\src\\System\\Net\\HttpWebRequest.cs:line 1272\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 65\r\n```","Url":"https://github.com/dotnet/corefx/issues/37430","RelatedDescription":"Open issue \"System.Net.Tests.HttpWebRequestTest/HaveResponse_GetResponseAsync_ExpectTrue failed due to timeout\" (#37430)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"440481231","IsPullRequest":false,"CreatedAt":"2019-05-05T19:35:34","Actor":"Almark20","Number":"35522","RawContent":null,"Title":"I got this massage when ever use csc","State":"open","Body":"This compiler is provided as part of the Microsoft (R) .NET Framework, but only\r\nsupports language versions up to C# 5, which is no longer the latest version. For compilers that support newer versions of the C# programming language, see HTTP\r\n://go.microsoft.com/fwlink/?LinkID=533240","Url":"https://github.com/dotnet/roslyn/issues/35522","RelatedDescription":"Open issue \"I got this massage when ever use csc\" (#35522)"},{"Id":"440478144","IsPullRequest":false,"CreatedAt":"2019-05-05T19:03:22","Actor":"vsfeedback","Number":"35521","RawContent":null,"Title":"VS hung after \"Add parameter to method\" LightBulb action","State":"open","Body":"VSF_TYPE_MARKDOWNI added a paramteter to a method call and invoked LightBulb to add it to method signature. After that VS hung, but without ghosting.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/547480/vs-hung-after-add-parameter-to-method-lightbulb-ac.html\nVSTS ticketId: 856118_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/26/2019, 01:24 AM (9 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 4/28/2019, 03:27 AM (7 days ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35521","RelatedDescription":"Open issue \"VS hung after \"Add parameter to method\" LightBulb action\" (#35521)"},{"Id":"440462101","IsPullRequest":true,"CreatedAt":"2019-05-05T16:15:54","Actor":"jaredpar","Number":"35520","RawContent":null,"Title":"Use .NET Standard API for named pipes on Unix","State":"open","Body":"Use new pipe API for compiler server on Unix\r\n\r\nThe default behavior for the NamedPipeServerStream API is to take a pipe\r\nname and then construct a named pipe in the background using that name.\r\nIn Windows this involves creating a file in a special namespace in the\r\nfile system. On Unix, named pipes are implemented using Unix Domain\r\nSockets, which are actual files, and the CoreFX behavior is to create\r\nthem in the temporary directory. Unfortunately, Unix Domain Sockets also\r\noften have a max path length limitation and the temporary directory\r\ncould be arbitrarily long, meaning that any attempt to create a named\r\npipe may fail on Unix.\r\n\r\nTo remedy this, CoreFX introduced an API which allows you to pass a full\r\npath instead of just a pipe name. If a fully-qualifed path is passed,\r\nthe new behavior is used. We can use this functionality to improve\r\nreliability of pipe name creation by using the \"/tmp\" directory on Unix,\r\nwhich by the POSIX specification is always required to be a valid\r\ntemporary directory, and by using a fixed-length pipe name that is lower\r\nthan any known Unix Domain Socket path length restriction.","Url":"https://github.com/dotnet/roslyn/pull/35520","RelatedDescription":"Open PR \"Use .NET Standard API for named pipes on Unix\" (#35520)"},{"Id":"440178554","IsPullRequest":true,"CreatedAt":"2019-05-05T16:13:24","Actor":"jaredpar","Number":"35498","RawContent":null,"Title":"Use .NET Standard API for named pipes on Unix","State":"closed","Body":"Use new pipe API for compiler server on Unix\r\n\r\nThe default behavior for the NamedPipeServerStream API is to take a pipe\r\nname and then construct a named pipe in the background using that name.\r\nIn Windows this involves creating a file in a special namespace in the\r\nfile system. On Unix, named pipes are implemented using Unix Domain\r\nSockets, which are actual files, and the CoreFX behavior is to create\r\nthem in the temporary directory. Unfortunately, Unix Domain Sockets also\r\noften have a max path length limitation and the temporary directory\r\ncould be arbitrarily long, meaning that any attempt to create a named\r\npipe may fail on Unix.\r\n\r\nTo remedy this, CoreFX introduced an API which allows you to pass a full\r\npath instead of just a pipe name. If a fully-qualifed path is passed,\r\nthe new behavior is used. We can use this functionality to improve\r\nreliability of pipe name creation by using the \"/tmp\" directory on Unix,\r\nwhich by the POSIX specification is always required to be a valid\r\ntemporary directory, and by using a fixed-length pipe name that is lower\r\nthan any known Unix Domain Socket path length restriction.","Url":"https://github.com/dotnet/roslyn/pull/35498","RelatedDescription":"Closed or merged PR \"Use .NET Standard API for named pipes on Unix\" (#35498)"},{"Id":"440434347","IsPullRequest":false,"CreatedAt":"2019-05-05T11:34:14","Actor":"CreateAndInject","Number":"35519","RawContent":null,"Title":"Strange bug about const","State":"open","Body":"**Version Used**: 16.0.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Type this code:\r\n```\r\n    class Program\r\n    {\r\n        const int length = 5;\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            int len = 2;\r\n            if (len < length)\r\n                Console.WriteLine(\"OK\");\r\n        }\r\n    }\r\n```\r\n2. Find All References for `length`\r\n\r\nresult:\r\n![bug](https://user-images.githubusercontent.com/2529999/57193341-83ce5780-6f6c-11e9-8fa7-423756d8257f.png)\r\n\r\n**Expected Behavior**: `if (len < length)`\r\n\r\n**Actual Behavior**: `if (len < )`\r\n","Url":"https://github.com/dotnet/roslyn/issues/35519","RelatedDescription":"Open issue \"Strange bug about const\" (#35519)"},{"Id":"440354459","IsPullRequest":false,"CreatedAt":"2019-05-04T18:24:12","Actor":"vatsan-madhavan","Number":"35518","RawContent":null,"Title":"Generate wrong dependency property callback function","State":"open","Body":"@vsfeedback commented on [Fri May 03 2019](https://github.com/dotnet/wpf/issues/645)\n\n1.New a WpfApp;\n2.In MainWindow class, use propdp+Tab to generate a dependency property;\ne.g.\n public int MyProperty\n        {\n            get { return (int)GetValue(MyPropertyProperty); }\n            set { SetValue(MyPropertyProperty, value); }\n        }\n\n        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...\n        public static readonly DependencyProperty MyPropertyProperty =\n            DependencyProperty.Register(&quot;MyProperty&quot;, typeof(int), typeof(MainWindow), new FrameworkPropertyMetadata(0,FrameworkPropertyMetadataOptions.Inherits, OnMyPropertyChanged));\n\n3.mouse over &quot;OnMyPropertyChanged&quot; and generate method &quot;MainWindow.OnMyPropertyChanged&quot; by visual studio\n\n4.The method's return type and second's parameter type is wrong as :\n        private static object OnMyPropertyChanged( DependencyObject d, object baseValue)\n        {\n            throw new NotImplementedException();\n        }\n\nthe ture methos is :\n        private static void OnMyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs baseValue)\n        {\n            throw new NotImplementedException();\n        }\n\n\nthis problem also occurs in visual studio 2019 professional edition.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/539816/generate-wrong-dependency-property-callback-functi.html\nVSTS ticketId: 851201_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/19/2019, 02:18 AM (14 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)\n\n---\n\n@thomasclaudiushuber commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489305705)\n\nThat's an interesting one. It looks like Visual Studio has a problem to find the correct constructor overload if FrameworkPropertyMetadata is used. Everything works like expected for the base class PropertyMetadata.\r\n\r\nIt's enough to create a new WPF project and put this in the MainWindow.xaml.cs file:\r\n\r\n```\r\n    public static readonly DependencyProperty MyPropertyProperty =\r\n        DependencyProperty.Register(\"MyProperty\", typeof(int), typeof(MainWindow), \r\n          new PropertyMetadata(0, OnMyPropertyChanged));\r\n```\r\n\r\nWhen you look at this in VS, you'll see that only OnMyPropertyChanged is underlined in red:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/57176121-44144c80-6e54-11e9-8769-a1962a29a1e7.png)\r\n\r\nWhen you put the cursor on it to generate the method, VS will generate it with the right parameters. You can see this here in the preview:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/57176135-6efea080-6e54-11e9-9e2c-fb403fdbbee5.png)\r\n\r\nBut now let's use the FrameworkPropertyMetadata class instead of PropertyMetadata like this:\r\n\r\n```\r\n    public static readonly DependencyProperty MyPropertyProperty =\r\n        DependencyProperty.Register(\"MyProperty\", typeof(int), typeof(MainWindow), \r\n          new FrameworkPropertyMetadata(0, OnMyPropertyChanged));\r\n```\r\n\r\nNow VS also underlines the zero, the specified default value, with a red squiggle. It says it can't convert that int value into a PropertyChangedCallback:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/57176151-aa996a80-6e54-11e9-9b1c-261e420ecbaf.png)\r\n\r\nNow, when you put the cursor on the OnMyPropertyChanged method and press CTRL+. to generate that method, the preview shows that the second parameter is not matching the delegates signature anymore:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/57176164-d3216480-6e54-11e9-839e-74e587071eba.png)\r\n\r\n\n\n---\n\n@weltkante commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489310547)\n\nThats a bug in VS not in WPF. You are getting a `CoerceValueCallback` generated because VS picks the constructor overload `FrameworkPropertyMetadata(PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)` when it generates the method. You also can notice this because it complains about zero not being convertible to `PropertyChangedCallback`\r\n\r\nThis Issue was redirected wrongly, it should be moved over to Roslyn.\n\n---\n\n@thomasclaudiushuber commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489312086)\n\n@weltkante Yep, I agree, it's a tooling bug, not a WPF bug.\n\n---\n\n@vatsan-madhavan commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489352122)\n\nMoving this issue to dotnet/roslyn and closing since this looks like a intellisense-only problem and not a bug in WPF. \n\n","Url":"https://github.com/dotnet/roslyn/issues/35518","RelatedDescription":"Open issue \"Generate wrong dependency property callback function\" (#35518)"},{"Id":"440019274","IsPullRequest":false,"CreatedAt":"2019-05-04T15:09:13","Actor":"bytecod3r","Number":"35493","RawContent":null,"Title":"Question: How to add the class itself as reference to CSharpCompilation","State":"closed","Body":"I want to add the entire program as a reference to my CSharpCompilation.\r\n In my case, I can NOT use \r\n`MetadataReference.CreateFromFile(typeof(Program).Assembly.Location),`\r\nBecause the result would be null, as I am loading a .Net inside PowerShell with \r\n`$asm = [Reflection.Assembly]::Load` and execute it this way:\r\n\r\n`$type = $asm.GetType(\"TestApp.Program\")`\r\n`$main = $type.GetMethod(\"Main\")`\r\n`$main.Invoke($null, $null)`\r\n\r\nI had few tries by converting the Assembly.GetExecutingAssembly() to bytes and then bytes to MemoryStream and tried to add that as a reference by `MetadataReference.CreateFromStream(TestStream)`\r\nbut no luck so far, it shows me the following error:\r\n`Metadata file '<in-memory assembly>' could not be opened -- PE image doesn't contain managed metadata.`\r\n\r\nAppreciate if you can help. Thank you very much!\r\n\r\n**Edit: Using .Net 4.7.2 and Microsoft.CodeAnalysis.CSharp = v3.0.0.**\r\n\r\nEDIT: I am converting the assembly to MemoryStream with the following code:\r\n\r\n```byte[] bytes;\r\nMemoryStream stream = new MemoryStream();\r\nBinaryFormatter formatter = new BinaryFormatter();\r\nformatter.AssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Full;\r\nformatter.Serialize(stream, typeof(Program).Assembly);\r\nbytes = stream.ToArray();\r\nStream TestStream= new MemoryStream(bytes);```","Url":"https://github.com/dotnet/roslyn/issues/35493","RelatedDescription":"Closed issue \"Question: How to add the class itself as reference to CSharpCompilation\" (#35493)"},{"Id":"440293939","IsPullRequest":false,"CreatedAt":"2019-05-04T07:14:26","Actor":"miloush","Number":"35517","RawContent":null,"Title":"Move type to carries extra preceding #endregion","State":"open","Body":"**Version Used**: VisualStudio.16.Preview/16.1.0-pre.2.0+28822.285\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\npublic class Foo\r\n{\r\n    #region Region1\r\n    class Xyz {}\r\n    #endregion\r\n\r\n    #region Region\r\n    public class Bar // Move type to 'Bar.cs'\r\n    {\r\n    }\r\n    #endregion\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```C#\r\n    public partial class Foo\r\n    {\r\n        #endregion\r\n\r\n        #region Region\r\n        public class Bar // Move type to 'Bar.cs'\r\n        {\r\n        }\r\n        #endregion\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\n```C#\r\n    public partial class Foo\r\n    {\r\n        #region Region\r\n        public class Bar // Move type to 'Bar.cs'\r\n        {\r\n        }\r\n        #endregion\r\n    }\r\n```\r\n\r\n(related #19613)","Url":"https://github.com/dotnet/roslyn/issues/35517","RelatedDescription":"Open issue \"Move type to carries extra preceding #endregion\" (#35517)"},{"Id":"440283768","IsPullRequest":true,"CreatedAt":"2019-05-04T04:34:37","Actor":"jcouv","Number":"35516","RawContent":null,"Title":"Use 'Nullable' for Csc Task property","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/35432 based on LDM decision earlier this week.\r\n\r\nNote: I left the compilation option and enum named `NullableContextOptions`.","Url":"https://github.com/dotnet/roslyn/pull/35516","RelatedDescription":"Open PR \"Use 'Nullable' for Csc Task property\" (#35516)"},{"Id":"440271419","IsPullRequest":false,"CreatedAt":"2019-05-04T01:30:06","Actor":"tmat","Number":"35515","RawContent":null,"Title":"Return an immutable workspace from Solution.Workspace ","State":"open","Body":"A `Solution` instance is supposed to be (observably) immutable, but the class has a reference back to the `Workspace` the solution belongs to. This makes it easy for features to access a mutable `Workspace` state when they shouldn't and impossible to share solutions across workspaces.\r\n\r\nSome of the information stored currently on `Workspace` should be moved to the `Solution` (e.g. some stateless workspace services).\r\n\r\nWe have a couple options:\r\n1) Return `null`\r\n2) Return an instance of an internal subclass of `Workspace`, which will provide the information we moved to the `Solution` instance via the existing `Workspace` APIs. It would throw `NotSupportedException` when the information is not available from the `Solution`.\r\n\r\n[1] would break a lot of components, [2] would break less, so let's go with [2].","Url":"https://github.com/dotnet/roslyn/issues/35515","RelatedDescription":"Open issue \"Return an immutable workspace from Solution.Workspace \" (#35515)"},{"Id":"440269911","IsPullRequest":false,"CreatedAt":"2019-05-04T01:12:58","Actor":"davkean","Number":"35514","RawContent":null,"Title":"[Regression] Errors never show up in the Error List if you've never opened a C# source file","State":"open","Body":"This regressed in 16, probably due to changes around package loads.\r\n\r\n**Version Used**: \r\n16+\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Git clone https://github.com/Treit/VisualStudio2019ErrorListIssue\r\n2. Delete .vs directory\r\n3. Open VisualStudio2019ErrorListIssue\\HelloWorld\\HelloWorld.sln\r\n4. Build\r\n\r\n**Expected Behavior**:\r\nBuild fails and errors show up\r\n\r\n**Actual Behavior**:\r\nBuild fails and errors never show up","Url":"https://github.com/dotnet/roslyn/issues/35514","RelatedDescription":"Open issue \"[Regression] Errors never show up in the Error List if you've never opened a C# source file\" (#35514)"},{"Id":"440267846","IsPullRequest":true,"CreatedAt":"2019-05-04T00:52:17","Actor":"dotnet-bot","Number":"35513","RawContent":null,"Title":"Merge release/dev16.1 to release/dev16.1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.1-vs-deps\ngit reset --hard upstream/release/dev16.1-vs-deps\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35513","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to release/dev16.1-vs-deps\" (#35513)"},{"Id":"440264197","IsPullRequest":true,"CreatedAt":"2019-05-04T00:50:10","Actor":"genlu","Number":"35512","RawContent":null,"Title":"Fix yaml to pick up full branch name","State":"closed","Body":"Combining those two powershell steps didn't work, so I'm settling for this now. We can fix it later.\r\n@tmat @dpoeschl \r\n\r\nFYI @jaredpar just to share the pain. [Some context](https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml):\r\n> \r\nBuild.SourceBranchName | The name of the branch the build was queued for.  Git repo branch or pull request: The last path segment in the ref. For example, in refs/heads/master this value is master. In refs/heads/feature/tools this value is tools.\r\n-- | --\r\n\r\n\r\n\r\n\r\n@jinujoseph for approval, infra-only change.","Url":"https://github.com/dotnet/roslyn/pull/35512","RelatedDescription":"Closed or merged PR \"Fix yaml to pick up full branch name\" (#35512)"},{"Id":"440262005","IsPullRequest":true,"CreatedAt":"2019-05-04T00:00:40","Actor":"dotnet-bot","Number":"35511","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35511","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#35511)"},{"Id":"440255858","IsPullRequest":true,"CreatedAt":"2019-05-03T23:19:27","Actor":"sharwell","Number":"35510","RawContent":null,"Title":"Implement external access APIs for Apex","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35510","RelatedDescription":"Open PR \"Implement external access APIs for Apex\" (#35510)"},{"Id":"440255079","IsPullRequest":true,"CreatedAt":"2019-05-03T23:15:49","Actor":"genlu","Number":"35509","RawContent":null,"Title":"more fix","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35509","RelatedDescription":"Closed or merged PR \"more fix\" (#35509)"},{"Id":"440245361","IsPullRequest":true,"CreatedAt":"2019-05-03T22:28:00","Actor":"RikkiGibson","Number":"35508","RawContent":null,"Title":"Don't emit readonly attributes on members within readonly structs","State":"open","Body":"Resolves #35114\r\n\r\nThis has a minor consequence which is that 'readonly' is going to roundtrip less often from metadata now--hence the deleted parameter in one of the tests. The effective readonly-ness will always round trip, though, so it shouldn't cause any ill effects in practice.","Url":"https://github.com/dotnet/roslyn/pull/35508","RelatedDescription":"Open PR \"Don't emit readonly attributes on members within readonly structs\" (#35508)"},{"Id":"440240770","IsPullRequest":false,"CreatedAt":"2019-05-03T22:09:42","Actor":"ryzngard","Number":"35507","RawContent":null,"Title":"MoveToNamespace crashes when moving a type in \"System\" namespace","State":"open","Body":"\r\n```C#\r\nnamespace System\r\n{\r\n    $$class A\r\n    {\r\n\r\n    }\r\n}\r\n```\r\n\r\nUsing \"Move to namespace...\" code refactor with cursor on `$$` location \r\n\r\n```\r\nSystem.ArgumentException : An element with the same key but a different value already exists. Key: System.Other.ThrowHelper\r\n   at System.Collections.Immutable.ImmutableDictionary`2.HashBucket.Add(TKey key,TValue value,IEqualityComparer`1 keyOnlyComparer,IEqualityComparer`1 valueComparer,KeyCollisionBehavior behavior,OperationResult& result)\r\n   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 items,MutationInput origin,KeyCollisionBehavior collisionBehavior)\r\n   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 pairs,Boolean avoidToHashMap)\r\n   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 pairs)\r\n   at System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary[TSource,TKey,TValue](IEnumerable`1 source,Func`2 keySelector,Func`2 elementSelector,IEqualityComparer`1 keyComparer,IEqualityComparer`1 valueComparer)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveItemsInNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveTypeToNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceCodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(<Unknown Parameters>)\r\n   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35507","RelatedDescription":"Open issue \"MoveToNamespace crashes when moving a type in \"System\" namespace\" (#35507)"},{"Id":"440233687","IsPullRequest":true,"CreatedAt":"2019-05-03T21:44:27","Actor":"AlekseyTs","Number":"35506","RawContent":null,"Title":"Change accessibility of explicit implementations in interfaces to 'private'.","State":"open","Body":"Related to #32054.","Url":"https://github.com/dotnet/roslyn/pull/35506","RelatedDescription":"Open PR \"Change accessibility of explicit implementations in interfaces to 'private'.\" (#35506)"},{"Id":"440232683","IsPullRequest":false,"CreatedAt":"2019-05-03T21:40:55","Actor":"ryzngard","Number":"35505","RawContent":null,"Title":"Fix formatting for switch expression is doing nothing","State":"open","Body":"**Version Used**: 16.1.0 Preview 3 [28829.227.d16.1]\r\n\r\n```C#\r\n        public static AbstractMoveToNamespaceCodeAction Generate(IMoveToNamespaceService changeNamespaceService, MoveToNamespaceAnalysisResult analysisResult)\r\n            => analysisResult.Container switch\r\n            {\r\n                MoveToNamespaceAnalysisResult.ContainerType.NamedType => (AbstractMoveToNamespaceCodeAction)new MoveTypeToNamespaceCodeAction(changeNamespaceService, analysisResult),\r\n                MoveToNamespaceAnalysisResult.ContainerType.Namespace => new MoveItemsToNamespaceCodeAction(changeNamespaceService, analysisResult),\r\n                _ => throw ExceptionUtilities.UnexpectedValue(analysisResult.Container)\r\n            };\r\n```\r\n\r\nProduces IDE0055. Clicking the light bulb > fix formatting does nothing\r\n\r\n\r\n![7139bdc3-8352-4be6-a2c9-86c84b2d3830](https://user-images.githubusercontent.com/475144/57167103-61dca580-6db1-11e9-93b7-ec592f88c84e.gif)\r\n","Url":"https://github.com/dotnet/roslyn/issues/35505","RelatedDescription":"Open issue \"Fix formatting for switch expression is doing nothing\" (#35505)"},{"Id":"440195670","IsPullRequest":true,"CreatedAt":"2019-05-03T21:30:05","Actor":"dotnet-bot","Number":"35501","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35501","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35501)"},{"Id":"440220861","IsPullRequest":true,"CreatedAt":"2019-05-03T21:02:32","Actor":"agocke","Number":"35504","RawContent":null,"Title":"Optimize codegen for pattern index access","State":"open","Body":"Pattern System.Index indexers currently call GetOffset on the System.Index\r\nargument, even if the argument is hat operator. If the argument is a hat\r\noperator, we can skip the creation of the intermediate System.Index type\r\nand directly emit the offset calculation.","Url":"https://github.com/dotnet/roslyn/pull/35504","RelatedDescription":"Open PR \"Optimize codegen for pattern index access\" (#35504)"},{"Id":"440215175","IsPullRequest":true,"CreatedAt":"2019-05-03T20:45:48","Actor":"genlu","Number":"35503","RawContent":null,"Title":"Fix logging for option value change","State":"open","Body":"I have verified this fix with VS telemetry monitor.\r\n@heejaechang @jasonmalinowski \r\n\r\n@jinujoseph @vatsalyaagrawal Need to take this to shiproom for 16.1, our telemetry for option change is broken.","Url":"https://github.com/dotnet/roslyn/pull/35503","RelatedDescription":"Open PR \"Fix logging for option value change\" (#35503)"},{"Id":"440197206","IsPullRequest":true,"CreatedAt":"2019-05-03T19:54:09","Actor":"dpoeschl","Number":"35502","RawContent":null,"Title":"Update PublishData.json in master","State":"open","Body":"**Copied from https://github.com/dotnet/roslyn/pull/35497 but for `master`**\r\n\r\nSeems we are missing the entry for new release/dev16.1-vs-deps branch, which might be causing optprof run failure","Url":"https://github.com/dotnet/roslyn/pull/35502","RelatedDescription":"Open PR \"Update PublishData.json in master\" (#35502)"},{"Id":"440191668","IsPullRequest":true,"CreatedAt":"2019-05-03T19:37:52","Actor":"sharwell","Number":"35500","RawContent":null,"Title":"Add external access APIs for legacy code analysis","State":"open","Body":"Builds on #35499.\r\n\r\nImplements the APIs required to complete #35080.","Url":"https://github.com/dotnet/roslyn/pull/35500","RelatedDescription":"Open PR \"Add external access APIs for legacy code analysis\" (#35500)"},{"Id":"440190772","IsPullRequest":true,"CreatedAt":"2019-05-03T19:35:14","Actor":"sharwell","Number":"35499","RawContent":null,"Title":"More external access","State":"open","Body":"Add external access projects for additional partners.","Url":"https://github.com/dotnet/roslyn/pull/35499","RelatedDescription":"Open PR \"More external access\" (#35499)"},{"Id":"440161426","IsPullRequest":true,"CreatedAt":"2019-05-03T19:31:25","Actor":"genlu","Number":"35497","RawContent":null,"Title":"Update PublishData.json","State":"closed","Body":"Seems we are missing the entry for new release/dev16.1-vs-deps branch, which might be causing optprof run failure\r\n\r\n@dpoeschl @tmat @jasonmalinowski @dotnet/roslyn-infrastructure \r\n\r\n@jinujoseph @vatsalyaagrawal For approval, this is an infra-only change","Url":"https://github.com/dotnet/roslyn/pull/35497","RelatedDescription":"Closed or merged PR \"Update PublishData.json\" (#35497)"},{"Id":"440106584","IsPullRequest":false,"CreatedAt":"2019-05-03T15:48:05","Actor":"YairHalberstadt","Number":"35496","RawContent":null,"Title":"Add generate parameter to Generate Variable code fix options.","State":"open","Body":"Would it be possible for this list to contain an extra option, generate parameter 'configurationServiceFactory'?\r\n\r\n![image](https://user-images.githubusercontent.com/29174528/57149204-1c28d880-6dc3-11e9-9a63-e0ec04a35d09.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35496","RelatedDescription":"Open issue \"Add generate parameter to Generate Variable code fix options.\" (#35496)"},{"Id":"440073384","IsPullRequest":false,"CreatedAt":"2019-05-03T14:31:18","Actor":"sharwell","Number":"35495","RawContent":null,"Title":"Migrate IntelliCode IVTs to the External Access pattern","State":"open","Body":"We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:\r\n\r\n* [Microsoft.VisualStudio.Completion.Tests](https://devdiv.visualstudio.com/DevDiv/_git/Pythia?path=%2Fsrc%2FPythiaExt%2FPythia.csproj)\r\n\r\nThese assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.","Url":"https://github.com/dotnet/roslyn/issues/35495","RelatedDescription":"Open issue \"Migrate IntelliCode IVTs to the External Access pattern\" (#35495)"},{"Id":"440038395","IsPullRequest":true,"CreatedAt":"2019-05-03T13:09:34","Actor":"mavasani","Number":"35494","RawContent":null,"Title":"Improve diagnostic messaging for unused value assignment and unused p…","State":"open","Body":"…arameter diagnostics\r\n\r\nFixes #35203\r\n\r\n1. Improve the message for unused value assignment diagnostic to make it clear that we are flagging an unnecessary assignment, not an unused variable\r\n2. Add descriptions for unused value assignment and unused parameter diagnostics to allow users to specify special discard symbol names that are respected by the analyzer. There are various cases where user wants to retain unused parameters (signature compat, documentation) and unnecessary assignments to locals (ease of debugging), but do not want to blanket suppress these diagnostics.","Url":"https://github.com/dotnet/roslyn/pull/35494","RelatedDescription":"Open PR \"Improve diagnostic messaging for unused value assignment and unused p…\" (#35494)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"440483855","IsPullRequest":true,"CreatedAt":"2019-05-05T22:22:44","Actor":"Dotnet-GitSync-Bot","Number":"7395","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7395)"},{"Id":"440209822","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:33","Actor":"MichalStrehovsky","Number":"7392","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7392)"},{"Id":"440231323","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:21","Actor":"Dotnet-GitSync-Bot","Number":"7394","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @GrabYourPitchforks @filipnavara","Url":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7394)"},{"Id":"440221804","IsPullRequest":true,"CreatedAt":"2019-05-03T21:05:15","Actor":"nattress","Number":"7393","RawContent":null,"Title":"Fix inlined field access outside version bubble","State":"open","Body":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle.","Url":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Open PR \"Fix inlined field access outside version bubble\" (#7393)"},{"Id":"439110167","IsPullRequest":true,"CreatedAt":"2019-05-03T16:12:14","Actor":"MichalStrehovsky","Number":"7381","RawContent":null,"Title":"Add support for NativeLibrary.SetDllImportResolver","State":"closed","Body":"Touches a lot of files, but most of it is just piping.\r\n\r\nThis also ensures correct behavior when `DefaultDllImportSearchPaths` is specified.\r\n\r\n* In the compiler, preserve information about `DefaultDllImportSearchPathsAttribute` custom attribute applied to the assembly. Also preserve the EEType pointer to the assembly's module type. We attach this information the the module fixup cell.\r\n* When resolving the p/invoke at runtime, use `DefaultDllImportSearchPaths` that the compiled embedded. Also retrieve the assembly that the p/invoke was declared in and call the user provided callback.\r\n\r\nI'm also tweaking `Assembly.GetExecutingAssembly` so that the common pattern of registering DllImportResolved in the current assembly works when reflection is disabled.","Url":"https://github.com/dotnet/corert/pull/7381","RelatedDescription":"Closed or merged PR \"Add support for NativeLibrary.SetDllImportResolver\" (#7381)"},{"Id":"439697709","IsPullRequest":true,"CreatedAt":"2019-05-03T15:26:37","Actor":"Dotnet-GitSync-Bot","Number":"7388","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern @stephentoub @jbhensley @danmosemsft @luhenry","Url":"https://github.com/dotnet/corert/pull/7388","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7388)"},{"Id":"439939415","IsPullRequest":true,"CreatedAt":"2019-05-03T08:24:40","Actor":"ifew","Number":"7391","RawContent":null,"Title":"Add link to sample project working with database","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7391","RelatedDescription":"Open PR \"Add link to sample project working with database\" (#7391)"},{"Id":"439579442","IsPullRequest":false,"CreatedAt":"2019-05-03T07:43:18","Actor":"ifew","Number":"7386","RawContent":null,"Title":"Dynamic code generation is not supported on this platform.","State":"closed","Body":"Hi\r\n\r\nI using Dapper and NPoco for connecting database, and it's work on normal compile\r\nbut when I compile to native, I got the message ```Unhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.``` of both libraries\r\n\r\nBoth, I using \r\n```<TargetFramework>netcoreapp3.0</TargetFramework>```\r\n\r\n```\r\n<PackageReference Include=\"MySqlConnector\" Version=\"0.53.0\" />\r\n<PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview4.19212.13\" />\r\n```\r\n\r\nDapper\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nLog: ServerVersion After Open: 5.5.5-10.2.15-MariaDB-log\r\nLog: State: Open\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x38\r\n   at Dapper.SqlMapper.GetTypeDeserializerImpl(Type, IDataReader, Int32, Int32, Boolean) + 0xb5\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(IDataReader, Int32, Int32, Boolean) + 0x154\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(Type, IDataReader, Int32, Int32, Boolean) + 0x16c\r\n   at Dapper.SqlMapper.GetDeserializer(Type, IDataReader, Int32, Int32, Boolean) + 0x14f\r\n   at Dapper.SqlMapper.<QueryImpl>d__138`1.MoveNext() + 0x263\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x10c\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x43\r\n   at Dapper.SqlMapper.Query[T](IDbConnection, String, Object, IDbTransaction, Boolean, Nullable`1, Nullable`1) + 0x1c6\r\n   at Member.Program.Main() + 0x11c\r\n   at bootstrap!<BaseAddress>+0xa8959b\r\n\r\n```\r\n\r\nNPoco\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x43\r\n   at System.Reflection.Emit.DynamicMethod..ctor(String, Type, Type[], Type, Boolean) + 0x30\r\n   at NPoco.MemberAccessor.GetSetDelegate() + 0x225\r\n   at NPoco.MemberAccessor..ctor(Type, String) + 0x357\r\n   at NPoco.PocoDataBuilder.<>c.<GetMemberAccessors>b__32_0(MemberInfo) + 0x77\r\n   at System.Linq.Enumerable.SelectListIterator`2.MoveNext() + 0x141\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.GetMemberAccessors(IEnumerable`1) + 0xb7\r\n   at NPoco.PocoDataBuilder.<GetPocoMembers>d__28.MoveNext() + 0x708\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.Init() + 0xf5\r\n   at NPoco.PocoDataFactory.BaseClassFalbackPocoDataBuilder(Type) + 0x55\r\n   at NPoco.PocoDataFactory.<>c__DisplayClass3_0.<ForType>b__0() + 0x29\r\n   at NPoco.Cache`2.Get(TKey, Func`1) + 0xd6\r\n   at NPoco.PocoDataFactory.ForType(Type) + 0xc0\r\n   at NPoco.AutoSelectHelper.AddSelectClause(Database, Type, String) + 0x108\r\n   at NPoco.Database.<QueryImp>d__153`1.MoveNext() + 0x108\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.Database.Fetch[T](Sql) + 0x60\r\n   at NPoco.Database.Fetch[T](String, Object[]) + 0x67\r\n   at NPoco.Database.Fetch[T]() + 0x6d\r\n   at Member.Program.Main() + 0x16a\r\n   at corert-db-dapper!<BaseAddress>+0xfe4db9\r\n   at corert-db-dapper!<BaseAddress>+0xfe4e2c\r\n```","Url":"https://github.com/dotnet/corert/issues/7386","RelatedDescription":"Closed issue \"Dynamic code generation is not supported on this platform.\" (#7386)"},{"Id":"439814909","IsPullRequest":true,"CreatedAt":"2019-05-02T22:29:34","Actor":"Suchiman","Number":"7390","RawContent":null,"Title":"Fix AspNetCore Repo Link","State":"closed","Body":"aspnet/home now redirects aspnet/AspNetCore.\r\nPrimarily to check if CI works.","Url":"https://github.com/dotnet/corert/pull/7390","RelatedDescription":"Closed or merged PR \"Fix AspNetCore Repo Link\" (#7390)"},{"Id":"439802257","IsPullRequest":true,"CreatedAt":"2019-05-02T21:45:05","Actor":"Suchiman","Number":"7389","RawContent":null,"Title":"Port GC changes from coreclr - 7","State":"open","Body":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible.","Url":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Open PR \"Port GC changes from coreclr - 7\" (#7389)"},{"Id":"439510199","IsPullRequest":true,"CreatedAt":"2019-05-02T21:26:24","Actor":"MichalStrehovsky","Number":"7385","RawContent":null,"Title":"Assert that typical field is indeed typical","State":"closed","Body":"This assert would have saved Tomas some trouble in #7376.","Url":"https://github.com/dotnet/corert/pull/7385","RelatedDescription":"Closed or merged PR \"Assert that typical field is indeed typical\" (#7385)"},{"Id":"439245544","IsPullRequest":true,"CreatedAt":"2019-05-02T20:09:31","Actor":"Suchiman","Number":"7383","RawContent":null,"Title":"Port GC changes from coreclr - 6","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7362\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/56776b20f5902ef60d43cb502d734193b2521fca):**\r\n- https://github.com/dotnet/coreclr/commit/c9914b7ab9dfcc7ad8003368715a182d7cbbe289 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/edd23a10bc574058a42c62dc829973dc48449837 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/13812bfd0f6eda442c944f416e8c871b18d99e3f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/0bb12f6ffb876eb51a85f62f7b9967eb31e0b40c (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/80ca6807369ff9fa468099a936072a121215d3dc (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ae75f5d540b7373743d3698d6e2c1e7be93fd821 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/48ebab8270a96e505a2be128a4875f903ef1c4b2 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/fc5385ef9ce5303bc22638ac36e9ba04ed4a9c21 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/b560ecc73d1abaec17064d5318b74b5f2bb70bd4 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/02fa8ca0932d02ce369f6a7405128ab5b729fb8d (manual port)\r\n- https://github.com/dotnet/coreclr/commit/69d43a0f8cfe095336b286e7bb892fe49c702e30 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/8b1595b74c943b33fa794e63e440e6f4c9679478 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/b06509c4f35212f097345bba7404b47da86b96c5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/363206f312a73bbf6c2093d78acad58c060ca0c7 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/35f5c097986c53050225bc590c41fa55e5776d85 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nI suppose https://github.com/dotnet/coreclr/commit/48ebab8270a96e505a2be128a4875f903ef1c4b2 is another case for https://github.com/dotnet/corert/issues/7339 ?","Url":"https://github.com/dotnet/corert/pull/7383","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 6\" (#7383)"},{"Id":"439692824","IsPullRequest":true,"CreatedAt":"2019-05-02T17:08:55","Actor":"Dotnet-GitSync-Bot","Number":"7387","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern","Url":"https://github.com/dotnet/corert/pull/7387","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7387)"},{"Id":"438554093","IsPullRequest":true,"CreatedAt":"2019-05-01T21:53:19","Actor":"trylek","Number":"7376","RawContent":null,"Title":"Fixes for deficiencies in generic method & field encoding","State":"closed","Body":"This change seems to be fixing one of the last CPAOT compilation\r\nbuckets by making the logic for emitting field signatures more\r\nrobust. I have also tried to improve the logic for choosing\r\nwhether to emit method instantiation stub to make the import cells\r\nbetter match between CPAOT and Crossgen.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7376","RelatedDescription":"Closed or merged PR \"Fixes for deficiencies in generic method & field encoding\" (#7376)"},{"Id":"439293633","IsPullRequest":true,"CreatedAt":"2019-05-01T19:38:21","Actor":"trylek","Number":"7384","RawContent":null,"Title":"Miscellaneous SuperIlc improvements","State":"open","Body":"1) Add support for release build (--release), for building\r\nand using the native framework (--framework) and just\r\nusing pre-built framework (--use-framework).\r\n\r\n2) Moved bucketing logic from CompileSubtreeCommand to a\r\nnew source file Buckets.cs and modify BuildFolderSet to\r\nautomatically create the bucketing.\r\n\r\n3) Simplified log emission logic, added new table with\r\nper folder error counts and added summary bucketing to the\r\noverall build log.\r\n\r\n4) I have added BuildOptions to CompilerRunner; this\r\nsimplified some methods that previously received various\r\nparts of the BuildOptions via separate parameters.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7384","RelatedDescription":"Open PR \"Miscellaneous SuperIlc improvements\" (#7384)"},{"Id":"439215888","IsPullRequest":true,"CreatedAt":"2019-05-01T17:06:47","Actor":"jkotas","Number":"7382","RawContent":null,"Title":"Delete unnecessary ifdef","State":"closed","Body":"This ifdef is left over from before the async implementation was unified","Url":"https://github.com/dotnet/corert/pull/7382","RelatedDescription":"Closed or merged PR \"Delete unnecessary ifdef\" (#7382)"},{"Id":"438923209","IsPullRequest":true,"CreatedAt":"2019-05-01T03:20:35","Actor":"Dotnet-GitSync-Bot","Number":"7380","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7380","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7380)"},{"Id":"438822306","IsPullRequest":true,"CreatedAt":"2019-04-30T16:47:16","Actor":"Dotnet-GitSync-Bot","Number":"7379","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7379","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7379)"},{"Id":"438614083","IsPullRequest":true,"CreatedAt":"2019-04-30T14:51:37","Actor":"Dotnet-GitSync-Bot","Number":"7378","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7378","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7378)"},{"Id":"438579138","IsPullRequest":true,"CreatedAt":"2019-04-30T05:53:33","Actor":"Dotnet-GitSync-Bot","Number":"7377","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @dschinde @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7377","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7377)"},{"Id":"438513386","IsPullRequest":true,"CreatedAt":"2019-04-30T02:15:37","Actor":"Dotnet-GitSync-Bot","Number":"7374","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7374","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7374)"},{"Id":"438541485","IsPullRequest":true,"CreatedAt":"2019-04-30T02:15:22","Actor":"tannergooding","Number":"7375","RawContent":null,"Title":"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02","State":"closed","Body":"CC. @jaredpar, @agocke, @dotnet/nullablefc\r\n\r\nCoreRT side for dotnet/arcade#2640 and https://github.com/dotnet/buildtools/pull/2248","Url":"https://github.com/dotnet/corert/pull/7375","RelatedDescription":"Closed or merged PR \"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02\" (#7375)"},{"Id":"438489810","IsPullRequest":true,"CreatedAt":"2019-04-29T21:18:44","Actor":"Dotnet-GitSync-Bot","Number":"7373","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sdmaclea","Url":"https://github.com/dotnet/corert/pull/7373","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7373)"},{"Id":"438447622","IsPullRequest":false,"CreatedAt":"2019-04-29T18:28:31","Actor":"verelpode","Number":"7372","RawContent":null,"Title":"Internal compiler error when .NET Native compiles __makeref, __refvalue, TypedReference","State":"open","Body":"When I put the following C# code in a UWP app in VS 2019 16.0.2, it works well when compiled for Debug.  However, when it is compiled for Release (.NET Native), then error ILT0005 and \"Internal compiler error\" occur.\r\n\r\n```\r\nclass MyTestTypedReference\r\n{\r\n\tprotected int fTestField0 = 123;\r\n\tprotected int fTestField1 = 456;\r\n\tprotected string fTestField2 = \"TestStr\";\r\n\tprotected int fTestField3 = 0;\r\n\r\n\tpublic unsafe void TestMakeTrArray()\r\n\t{\r\n\t\tSystem.TypedReference* trArray = stackalloc System.TypedReference[4];\r\n\t\ttrArray[0] = __makeref(fTestField0);\r\n\t\ttrArray[1] = __makeref(fTestField1);\r\n\t\ttrArray[2] = __makeref(fTestField2);\r\n\t\ttrArray[3] = __makeref(fTestField3);\r\n\t\tTestReceiveTrArray(trArray);\r\n\t}\r\n\r\n\tpublic unsafe void TestReceiveTrArray(System.TypedReference* inParams)\r\n\t{\r\n\t\tRealMethod1(__refvalue(inParams[0], int), __refvalue(inParams[1], int), __refvalue(inParams[2], string), out __refvalue(inParams[3], int));\r\n\t}\r\n\r\n\tpublic void RealMethod1(int inA, int inB, string inC, out int outD)\r\n\t{\r\n\t\toutD = 6000;\r\n\t}\r\n}\r\n\r\npublic unsafe delegate void TestDelegateWithTrArray(object inInstance, System.TypedReference* inParams);\r\n```\r\n\r\nThe error is:\r\n```\r\nInternal compiler error: Object reference not set to an instance of an object.\r\n```\r\n\r\nIf you comment out `TestReceiveTrArray` and compile the rest (meaning compile the __makeref stuff but not the __refvalue stuff), then the error is:\r\n```\r\nError ILT0005: 'C:\\Users\\XXXX\\.nuget\\packages\\runtime.win10-x64.microsoft.net.native.compiler\\2.1.8\\tools\\x64\\ilc\\Tools\\nutc_driver.exe \r\n@\"C:\\Users\\XXXX\\Documents\\TestUwpApp1\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\TestUwpApp1.rsp\"' \r\nreturned exit code -2147483645\r\n```\r\n\t\t\r\n[System.TypedReference](https://docs.microsoft.com/en-us/dotnet/api/System.TypedReference) is low-level but quite useful in certain scenarios such as dynamic programming, Reflection, late-binding / dynamic binding at runtime.\r\n\r\n`System.Delegate.DynamicInvoke(params object[])` and `System.Reflection.MethodBase.Invoke(object, object[])` are useful but costly, especially when executed many times in a loop.  The above code snippet is an example of how `TypedReference` can be used to dynamically execute a method without the overhead of boxing all of the parameters.  It works great when compiled to CIL, but not when compiled with .NET Native 2.1.8.\r\n\r\nIn some circumstances, an alternative to TypedReference is the DLR, but if I remember correctly, it was @jkotas who wrote somewhere something like the following comment about the DLR or DLR with .NAT Native: _\"This stuff is super fragile\"_.  I feel that it is too risky to switch over to a solution that relies upon the DLR.  The DLR is unnecessary in this particular case/project because TypedReference is a much simpler solution that works well.  Some projects do need the full functionality of the DLR, but other projects can get away with TypedReference.\r\n\r\nI very much hope that .NET Native will fully support TypedReference.  Given the choice between .NET Native supporting TypedReference or the DLR, then obviously TypedReference is far far easier to support and maintain than the big complex DLR.  \r\n","Url":"https://github.com/dotnet/corert/issues/7372","RelatedDescription":"Open issue \"Internal compiler error when .NET Native compiles __makeref, __refvalue, TypedReference\" (#7372)"},{"Id":"438200708","IsPullRequest":true,"CreatedAt":"2019-04-29T08:26:43","Actor":"MichalStrehovsky","Number":"7371","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7371","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7371)"},{"Id":"438000242","IsPullRequest":false,"CreatedAt":"2019-04-29T06:17:58","Actor":"forestbat","Number":"7369","RawContent":null,"Title":"How do you think to this repository？","State":"closed","Body":"https://github.com/kekyo/IL2C\r\nCan this repo replace CppCodeGen？","Url":"https://github.com/dotnet/corert/issues/7369","RelatedDescription":"Closed issue \"How do you think to this repository？\" (#7369)"},{"Id":"438095410","IsPullRequest":true,"CreatedAt":"2019-04-28T20:14:07","Actor":"trylek","Number":"7370","RawContent":null,"Title":"Experimental fix for infinite generic expansion in CPAOT","State":"open","Body":"As usual, writing the e-mail on this subject helped me clear my\r\nthoughts and I subsequently realized there's a rather elegant way\r\nto do this very cheaply (at least in some cases): we just add the\r\nnotion of a \"parent method\" to MethodWithGCInfo and, upon creation\r\nof a new MethodEntrypoint, we throw if the history linked list\r\ncontains the same generic method, just instantiated with a different\r\nparameter variants.\r\n\r\nI don't insist on merging this in if you think it's fundamentally\r\nflawed or incomplete; I just wanted to point it out as an easy option\r\nto fix some occurrences of this issue; it does fix compilation of\r\nthe test\r\n\r\nJIT\\Regression\\clr-x64-JIT\\v4.0\\devdiv374539\\DevDiv_374539\\DevDiv_374539.exe\r\n\r\nI mentioned in the e-mail. I'm looking forward to feedback.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7370","RelatedDescription":"Open PR \"Experimental fix for infinite generic expansion in CPAOT\" (#7370)"},{"Id":"437769279","IsPullRequest":true,"CreatedAt":"2019-04-27T17:25:18","Actor":"ifew","Number":"7366","RawContent":null,"Title":"Example connect database via Dapper","State":"closed","Body":"Simple, Easy to understand and test corert with connect database via Dapper Library","Url":"https://github.com/dotnet/corert/pull/7366","RelatedDescription":"Closed or merged PR \"Example connect database via Dapper\" (#7366)"},{"Id":"437800589","IsPullRequest":true,"CreatedAt":"2019-04-27T01:43:45","Actor":"jkotas","Number":"7367","RawContent":null,"Title":"Use implicit MTA for threadpool threads","State":"closed","Body":"It is not ok to leave COM initialized on Win32 threadpool threads. This change skips COM initialization\r\non Win32 threadpool threads completely and takes advantage of implicit MTA that is initialized by the finalizer\r\nthread.\r\n\r\nThis fix should provide high compatiblity with .NET Framework/Core, without performance overhead of initialization/uninitializing COM every time; or running dedicated threadpool.\r\n\r\nFixes #7356","Url":"https://github.com/dotnet/corert/pull/7367","RelatedDescription":"Closed or merged PR \"Use implicit MTA for threadpool threads\" (#7367)"},{"Id":"437864224","IsPullRequest":true,"CreatedAt":"2019-04-26T23:36:11","Actor":"trylek","Number":"7368","RawContent":null,"Title":"Add the enum value for manifest metadata to R2R header constants","State":"closed","Body":"Not the real implementation, just the enum now I have it in fresh\r\nmemory from the R2RDump change :-).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7368","RelatedDescription":"Closed or merged PR \"Add the enum value for manifest metadata to R2R header constants\" (#7368)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"440503432","IsPullRequest":false,"CreatedAt":"2019-05-05T23:35:43","Actor":"imsmart-tech","Number":"3204","RawContent":null,"Title":"Internal error: new deps file generation did not produce the same result as the old logic","State":"open","Body":"Got this error which said to file issue here. So here it goes.\r\n\r\n[ImSmart.deps.json.txt](https://github.com/dotnet/sdk/files/3146159/ImSmart.deps.json.txt)\r\n\r\n[ImSmart.deps.new.json.txt](https://github.com/dotnet/sdk/files/3146160/ImSmart.deps.new.json.txt)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3204","RelatedDescription":"Open issue \"Internal error: new deps file generation did not produce the same result as the old logic\" (#3204)"},{"Id":"440436970","IsPullRequest":true,"CreatedAt":"2019-05-05T13:39:55","Actor":"dotnet-maestro[bot]","Number":"3203","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3203)"},{"Id":"440316133","IsPullRequest":true,"CreatedAt":"2019-05-04T13:50:03","Actor":"dotnet-maestro[bot]","Number":"3202","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19253.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3202)"},{"Id":"440251525","IsPullRequest":false,"CreatedAt":"2019-05-03T22:57:23","Actor":"tmat","Number":"3201","RawContent":null,"Title":"GenerateBuildDependencyFile reads incorrect AssemblyVersion","State":"open","Body":"[`GenerateBuildDependencyFile`](https://github.com/dotnet/sdk/blob/7209eb0e66bfba58714af68ddef81115552a4a0c/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L151) target has parameter: `AssemblyVersion=\"$(Version)\"`, which is suspicious because `Version` is not necessarily the same as an `$(AssemblyVersion)`. The target should read `AssemblyVersion` property and add `GetAssemblyVersion` target to its DependsOnTargets.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3201","RelatedDescription":"Open issue \"GenerateBuildDependencyFile reads incorrect AssemblyVersion\" (#3201)"},{"Id":"437881849","IsPullRequest":true,"CreatedAt":"2019-05-03T22:37:23","Actor":"peterhuene","Number":"3183","RawContent":null,"Title":"Import publish profiles in the .NET Core SDK.","State":"closed","Body":"This commit implements importing publish profiles in the .NET Core SDK.\r\n\r\nPreviously, there were two ways to get the publish profile respected when\r\npublishing .NET Core applications:\r\n\r\n* Using the Web SDK, which implicitly imports the `Microsoft.NET.Sdk.Publish`\r\nSDK.\r\n* Explicitly referencing the `Microsoft.NET.Sdk.Publish` SDK in the `Project\r\nelement` (e.g. `Project=\"Microsoft.NET.Sdk;Microsoft.NET.Sdk.Publish\"`).\r\n\r\nThe problem is that the publish profile was being imported *after* many of the\r\nimportant SDK properties (such as RuntimeIdentifier, SelfContained, and\r\nUseAppHost) were defaulted by the .NET Core SDK.  Because the .NET Core SDK\r\ndoes not expect the values of these properties to change once defaulted, users\r\nare unable to set a particular property in the publish profile and get the\r\nexpected behavior in the .NET Core SDK.\r\n\r\nFor example, when setting just the `RuntimeIdentifier` in the publish profile,\r\nit would publish without a RID-subdirectory, not as self-contained, and without\r\nan apphost.  Contrast this to using the `--runtime` option for `dotnet\r\npublish`, which uses a RID-subdirectory and publishes self-contained with an\r\napphost. Up until now, users had to work around this by setting *all* of the\r\ndesired properties in the publish profile that would otherwise be defaulted by\r\nthe .NET Core SDK.\r\n\r\nThe Web SDK fixed this by importing the publish profile *before* the .NET Core\r\nSDK was imported (see aspnet/websdk#534).  However, this could not fix the\r\nproblem for users that have an existing project that directly references the\r\n`Microsoft.NET.Sdk.Publish` SDK.\r\n\r\nTo fix that, the .NET Core SDK will not attempt to import the publish profile\r\nif it hasn't already been imported by the Web SDK.  If the .NET Core SDK\r\nsuccessfully imports the publish profile, it sets a property that prevents the\r\nWeb SDK from attempting to import it.\r\n\r\nFixes #10647.","Url":"https://github.com/dotnet/sdk/pull/3183","RelatedDescription":"Closed or merged PR \"Import publish profiles in the .NET Core SDK.\" (#3183)"},{"Id":"440210201","IsPullRequest":true,"CreatedAt":"2019-05-03T22:17:04","Actor":"johnbeisner","Number":"3200","RawContent":null,"Title":"Use https://github.com/dotnet/sdk as the repository.","State":"closed","Body":"Moving the perf test to helix created a new branch for reporting because the repo is not in GitHub. If we put the GitHub repo on the command line to 'build.py' it should connect to the existing treadline.\r\n\r\n\r\n@jorive \r\n","Url":"https://github.com/dotnet/sdk/pull/3200","RelatedDescription":"Closed or merged PR \"Use https://github.com/dotnet/sdk as the repository.\" (#3200)"},{"Id":"440015542","IsPullRequest":true,"CreatedAt":"2019-05-03T13:51:01","Actor":"dotnet-maestro[bot]","Number":"3199","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19252.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3199)"},{"Id":"439830421","IsPullRequest":true,"CreatedAt":"2019-05-03T02:51:56","Actor":"dsplaisted","Number":"3198","RawContent":null,"Title":"Use FrameworkList from targeting packs","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3198","RelatedDescription":"Closed or merged PR \"Use FrameworkList from targeting packs\" (#3198)"},{"Id":"439397373","IsPullRequest":true,"CreatedAt":"2019-05-02T23:24:30","Actor":"dsplaisted","Number":"3195","RawContent":null,"Title":"Add reference to empty Microsoft.NETCore.App package","State":"closed","Body":"The reference to the Microsoft.NETCore.App package is specified via the PackagesToReference metadata on KnownFrameworkReference.  This metadata was added in https://github.com/dotnet/core-sdk/pull/1766, and the package was produced in https://github.com/dotnet/core-setup/pull/5893.\r\n\r\nOnce https://github.com/dotnet/core-setup/issues/6222 is done, this should fix #3044.  This PR also adds a test case for that issue, which is currently skipped.\r\n\r\nThis PR removes the implicit reference to the Microsoft.NETCore.Platforms package, as that will now come in as a dependency of the Microsoft.NETCore.App package.","Url":"https://github.com/dotnet/sdk/pull/3195","RelatedDescription":"Closed or merged PR \"Add reference to empty Microsoft.NETCore.App package\" (#3195)"},{"Id":"439817185","IsPullRequest":true,"CreatedAt":"2019-05-02T22:35:45","Actor":"mmitche","Number":"3197","RawContent":null,"Title":"[release/2*] Move to Azure DevOps","State":"open","Body":"- Autogenerated off of Jenkins configuration\r\n- Applies to release/2.1* and release/2.2* branches\r\n- Removed ubuntu 14.04 configuration","Url":"https://github.com/dotnet/sdk/pull/3197","RelatedDescription":"Open PR \"[release/2*] Move to Azure DevOps\" (#3197)"},{"Id":"439786676","IsPullRequest":false,"CreatedAt":"2019-05-02T21:01:54","Actor":"NinoFloris","Number":"3196","RawContent":null,"Title":"Better way of hooking into \"Before\" Publish","State":"open","Body":"So I was looking around to see if I could redefine some defaults to always be true iff we run a Publish action.\r\n\r\nI could only seem to get there by chaining msbuild gotchas, essentially having a project like:\r\n```proj\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\"  />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <Target Name=\"OldPublish\" DependsOnTargets=\"_PublishBuildAlternative;_PublishNoBuildAlternative\">\r\n    <!-- Ensure there is minimal verbosity output pointing to the publish directory and not just the\r\n         build step's minimal output. Otherwise there is no indication at minimal verbosity of where\r\n         the published assets were copied. -->\r\n    <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(PublishDir)'))\" />\r\n  </Target>\r\n  \r\n  <Target Name=\"NewDefaults\">\r\n    <PropertyGroup>\r\n       ... Override defaults here\r\n    </PropertyGroup>\r\n  </Target>\r\n  \r\n  <Target Name=\"Publish\"\r\n          DependsOnTargets=\"NewDefaults\"\r\n          Condition=\"$(IsPublishable) == 'true'\">\r\n    \r\n    // We actually need NewDefaults as a separate target to set the props\r\n    // due to a long standing CallTarget bug https://github.com/Microsoft/msbuild/issues/1006\r\n    <CallTarget Targets=\"NewPublish\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe pain here is mainly that you cannot get any custom evalution in before `/t: Publish` —  without doing crazy stuff — there's only the indifferent InitialTargets. \r\n\r\nProblem there obviously is if you really need a Target to only run before Publish, not always.\r\n\r\nIs there anything we can do better here?\r\n\r\nIt looks I'm not the first either https://github.com/dotnet/sdk/issues/1039, although there it seems BeforePublish was still a thing.","Url":"https://github.com/dotnet/sdk/issues/3196","RelatedDescription":"Open issue \"Better way of hooking into \"Before\" Publish\" (#3196)"},{"Id":"437465921","IsPullRequest":true,"CreatedAt":"2019-05-02T20:28:01","Actor":"swaroop-sridhar","Number":"3180","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"closed","Body":"When creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\nThis fixes a non-detereministic test failure in the ILLink tests.","Url":"https://github.com/dotnet/sdk/pull/3180","RelatedDescription":"Closed or merged PR \"Fix ILLink teset flakiness\" (#3180)"},{"Id":"439378991","IsPullRequest":true,"CreatedAt":"2019-05-02T14:41:25","Actor":"swaroop-sridhar","Number":"3193","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"closed","Body":"This change a non-detereministic test failure in the ILLink tests.\r\n\r\nThere are two changes:\r\n\r\n(1)\r\nWhen creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\n(2)\r\nThe tests create a test-library which is published self-contained.\r\nWhile the restore is given a rid, it was not marked as self-contained.\r\nThe SDK did not restore the platform specific NetCoreAPP likely because\r\nthe defaults are differnt for libraries vs executables.","Url":"https://github.com/dotnet/sdk/pull/3193","RelatedDescription":"Closed or merged PR \"Fix ILLink teset flakiness\" (#3193)"},{"Id":"439388061","IsPullRequest":false,"CreatedAt":"2019-05-02T00:41:00","Actor":"nguerrera","Number":"3194","RawContent":null,"Title":"net472 to netstandard1.3 -> extra diagnostics dll ","State":"open","Body":"Repro steps:\r\n\r\n* Extract [ds.zip](https://github.com/dotnet/sdk/files/3136412/ds.zip) somewhere\r\n* `dotnet build` the `app` project\r\n* Look at bin\\Debug\\net472, notice extra S.D.DiagnosticSource.dll\r\n\r\n![image](https://user-images.githubusercontent.com/75470/57051775-f622fd00-6c37-11e9-8144-d382f6a2511d.png)\r\n\r\nThis is coming transitively from the netstandard.library 1.6.1 implicit ref in lib.csproj. Recall that netstandard1.x projects don't get privateassets=\"all\" applied to that.\r\n\r\nBut, regardless, why does this assembly survive conflict resolution, etc. net472 should be able to consume netstandard1.x without app-local framework assemblies.\r\n\r\nI'm not sure if this is a regression, but I'm very surprised that I haven't heard about it before, so it may well have crept in.\r\n\r\ncc @dsplaisted @ericstj \r\n","Url":"https://github.com/dotnet/sdk/issues/3194","RelatedDescription":"Open issue \"net472 to netstandard1.3 -> extra diagnostics dll \" (#3194)"},{"Id":"439319446","IsPullRequest":true,"CreatedAt":"2019-05-01T20:50:49","Actor":"sbomer","Number":"3192","RawContent":null,"Title":"Locate dotnet host for illink on desktop","State":"open","Body":"When running on full framework MSBuild, the environment variable `DOTNET_HOST_PATH` is not set, causing the linker to fail. This was not caught by the SDK tests because they are started by a test process that uses the dotnet cli, so this includes a change to prevent `DOTNET_HOST_PATH` from propagating to the MSBuild process.\r\n\r\nFor the desktop MSBuild case, I believe the correct thing to do is to use the dotnet host that comes with the SDK that is being used to build the app, so I'm trying to explicitly pass the location of that host (rather than searching the `PATH`, for example). @dsplaisted and @nguerrera does that sound right to you, or should I be doing something else?\r\n\r\nThe current fix has a problem: the relative path from the targets file to the dotnet host is correct for an actual product SDK, but because the tests run against a different layout, the computed location is incorrect when tests are run. @dsplaisted, @nguerrera do you have any suggestions? Perhaps the SDK already has some information about the dotnet host location that I can reuse.","Url":"https://github.com/dotnet/sdk/pull/3192","RelatedDescription":"Open PR \"Locate dotnet host for illink on desktop\" (#3192)"},{"Id":"439242933","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:10","Actor":"nugetlurker","Number":"3191","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into sdk","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3191","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into sdk\" (#3191)"},{"Id":"439242915","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:07","Actor":"nugetlurker","Number":"3190","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into sdk","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3190","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into sdk\" (#3190)"},{"Id":"437847425","IsPullRequest":true,"CreatedAt":"2019-04-30T22:20:42","Actor":"dsplaisted","Number":"3182","RawContent":null,"Title":"WIP -  Reference empty packages","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3182","RelatedDescription":"Closed or merged PR \"WIP -  Reference empty packages\" (#3182)"},{"Id":"438903776","IsPullRequest":true,"CreatedAt":"2019-04-30T22:20:39","Actor":"dsplaisted","Number":"3189","RawContent":null,"Title":"Update Stage 0, fix package feeds","State":"closed","Body":"This stage 0 removes the implicit package feeds for internal builds, so this PR corrects those for the SDK build and test.","Url":"https://github.com/dotnet/sdk/pull/3189","RelatedDescription":"Closed or merged PR \"Update Stage 0, fix package feeds\" (#3189)"},{"Id":"438516330","IsPullRequest":true,"CreatedAt":"2019-04-30T19:40:05","Actor":"sbomer","Number":"3187","RawContent":null,"Title":"Update stage0","State":"closed","Body":"To get the linker fix in https://github.com/mono/linker/pull/551\r\n/cc @swaroop-sridhar","Url":"https://github.com/dotnet/sdk/pull/3187","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3187)"},{"Id":"438551516","IsPullRequest":true,"CreatedAt":"2019-04-30T19:40:02","Actor":"sbomer","Number":"3188","RawContent":null,"Title":"Fix dotnet-core feed url in Versions.props","State":"closed","Body":"This fixes some build failures I was seeing locally, where the\r\nMicrosoft.NET.HostModel package was not found.\r\n\r\nI wonder if it may be related to the restore failures we were seeing elsewhere @peterhuene.","Url":"https://github.com/dotnet/sdk/pull/3188","RelatedDescription":"Closed or merged PR \"Fix dotnet-core feed url in Versions.props\" (#3188)"},{"Id":"437957511","IsPullRequest":false,"CreatedAt":"2019-04-30T00:35:08","Actor":"sdmaclea","Number":"3185","RawContent":null,"Title":"ProjectReference to classlib does not layout satellites correctly.","State":"closed","Body":"Observed in the tip of corefx\r\n\r\nGiven a project reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\nCulture directory is absent in target layout.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nReported in dotnet/corefx#37246.  Relevant code above is from dotnet/corefx#37248\r\n","Url":"https://github.com/dotnet/sdk/issues/3185","RelatedDescription":"Closed issue \"ProjectReference to classlib does not layout satellites correctly.\" (#3185)"},{"Id":"438256811","IsPullRequest":false,"CreatedAt":"2019-04-29T10:52:35","Actor":"springy76","Number":"3186","RawContent":null,"Title":"adding to CreateSatelliteAssembliesDependsOn broken for Microsoft.NET.Sdk.WindowsDesktop?","State":"open","Body":"I converted an existing old-style `.csproj` WPF project targeting net472 to the new-style .csproj format using `Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\"` + `<UseWPF>true</UseWPF>` (SDK 3.0 preview4 is installed) -- still targeting net472.\r\n\r\nLocalization was realized for many years by hooking into build process by this line (at least this is the only reference I found leading to the custom task `CreateLocBamlSatellites`):\r\n```xml\r\n<CreateSatelliteAssembliesDependsOn>$(CreateSatelliteAssembliesDependsOn);CreateLocBamlSatellites</CreateSatelliteAssembliesDependsOn>\r\n```\r\n\r\nIs this something which will come back to life in later previews or should this be done differently?\r\n\r\n**Update**: I changed build output verbosity to detailed and spotted this:\r\n```\r\n1>Property reassignment: $(CreateSatelliteAssembliesDependsOn)=\"\r\n1>      _GenerateSatelliteAssemblyInputs;\r\n1>      ComputeIntermediateSatelliteAssemblies;\r\n1>      GenerateSatelliteAssemblies\r\n1>    \" (previous value: \";CreateLocBamlSatellites\") at C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets (3573,5)\r\n```\r\n\r\nMy .targets file (included by `<Import Project=`)  which includes the code above already is the last line before `</Project>`.\r\n\r\n**Update2**:\r\nOriginally the `<Include` was below this line:\r\n```xml\r\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n```\r\nbut inserting this line breaks the entire build:\r\n> C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(233,5): error NETSDK1005: Assets file 'MyProject\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.0'. Ensure that restore has run and that you have included 'net40' in the TargetFrameworks for your project.","Url":"https://github.com/dotnet/sdk/issues/3186","RelatedDescription":"Open issue \"adding to CreateSatelliteAssembliesDependsOn broken for Microsoft.NET.Sdk.WindowsDesktop?\" (#3186)"},{"Id":"437882972","IsPullRequest":true,"CreatedAt":"2019-04-27T00:01:40","Actor":"dotnet-bot","Number":"3184","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3184","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3184)"},{"Id":"437640705","IsPullRequest":true,"CreatedAt":"2019-04-26T12:04:17","Actor":"dotnet-maestro[bot]","Number":"3181","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19229.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19251.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3181","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3181)"},{"Id":"437399381","IsPullRequest":true,"CreatedAt":"2019-04-26T01:00:46","Actor":"dsplaisted","Number":"3179","RawContent":null,"Title":"Fix KeyNotFoundException in GenerateDepsFile task","State":"closed","Body":"This would occur when there was a library in the assets file with a dependency on a library that wasn't in the assets file.\r\n\r\nFixes #3159","Url":"https://github.com/dotnet/sdk/pull/3179","RelatedDescription":"Closed or merged PR \"Fix KeyNotFoundException in GenerateDepsFile task\" (#3179)"},{"Id":"437290082","IsPullRequest":false,"CreatedAt":"2019-04-25T16:27:32","Actor":"Lemraj","Number":"3178","RawContent":null,"Title":"Could not upgrade to .Net Core 2.2.4","State":"open","Body":"Hi,\r\n\r\nI am trying to upgrade my solution to the latest .net core version (2.2.4).\r\n\r\nI have noticed that the test projects (xunit) are not updated automatically.\r\n\r\nI could reproduce it by creating a new solution with a wen api project and xunit project.\r\n\r\n![image](https://user-images.githubusercontent.com/10677560/56751833-39d4bd00-6787-11e9-9850-ae0f142a8e16.png)\r\n\r\nI have installed the latest versions of the runtime & the SDK:\r\n![image](https://user-images.githubusercontent.com/10677560/56752028-aea7f700-6787-11e9-8dc6-75478b861287.png)\r\n![image](https://user-images.githubusercontent.com/10677560/56752052-bbc4e600-6787-11e9-9836-a9f68f444248.png)\r\n\r\n\r\nAny idea why the xunit project is not upgraded?","Url":"https://github.com/dotnet/sdk/issues/3178","RelatedDescription":"Open issue \"Could not upgrade to .Net Core 2.2.4\" (#3178)"},{"Id":"437162717","IsPullRequest":true,"CreatedAt":"2019-04-25T13:40:21","Actor":"dotnet-maestro[bot]","Number":"3177","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3177","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3177)"},{"Id":"436853725","IsPullRequest":true,"CreatedAt":"2019-04-24T20:47:36","Actor":"johnbeisner","Number":"3176","RawContent":null,"Title":"Fix the parameters: Windows call to 'RunPerfTestsOnHelix'","State":"closed","Body":"The parameters were incorrect with Windows call to 'RunPerfTestsOnHelix'. This caused the upload to Benchview 'label' to look like this: `SDK perf Windows_NT x86 Release rolling refs/heads/master master` instead of the correct naming convection: `SDK perf Ubuntu_16.04 x64 Release rolling master 5b7f189b8297594a1001159dd290fb482d718969` The commit hash is missing; the branch is mis-named.","Url":"https://github.com/dotnet/sdk/pull/3176","RelatedDescription":"Closed or merged PR \"Fix the parameters: Windows call to 'RunPerfTestsOnHelix'\" (#3176)"},{"Id":"436707362","IsPullRequest":false,"CreatedAt":"2019-04-24T13:46:29","Actor":"RiteshKo","Number":"3175","RawContent":null,"Title":"XML is not being published through the Docker container","State":"open","Body":"I am running a .net core 2.1 application through Docker ToolBox and Kitematic. I am new to the Docker world. In the application, I am loading an XML file in the application like below:\r\n\r\nXDocument xmlFile = XDocument.Load(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"XML\\\\Lookup.xml\"));\r\n\r\nMy Docker file is: \r\n\r\nFROM microsoft/dotnet:2.1-runtime\r\n\r\nWORKDIR /app\r\nCOPY . /app\r\n\r\nENTRYPOINT [\"dotnet\", \"ConsoleApp.dll\"]\r\n\r\nAn image got created for this application but while running the same image through Kitematic I am getting below error:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not find file '/app/XML\\ObjectInfoLookup.xml'.\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)\r\n   at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)\r\n   at System.Xml.XmlTextReaderImpl.FinishInitUriString()\r\n   at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)\r\n   at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)\r\n   at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings)\r\n   at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)\r\n\r\nCan anyone help me here?\r\n \r\n","Url":"https://github.com/dotnet/sdk/issues/3175","RelatedDescription":"Open issue \"XML is not being published through the Docker container\" (#3175)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1123987822090780673","CreatedAt":"2019-05-02T16:29:14+00:00","UserScreenname":"dotnet","Text":"These are the fine folks that make all the .NET @ch9 videos with us. They are amazingly talented and fun to work wi… https://t.co/MLuwEHLR2T","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"1123980073076436992","CreatedAt":"2019-05-02T15:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnK9Pxg","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1123270313507053568","CreatedAt":"2019-04-30T16:58:06+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"1123241045381091330","CreatedAt":"2019-04-30T15:01:48+00:00","UserScreenname":"dotnet","Text":"Using .NET and @docker Together – @dockercon 2019 Update https://t.co/UNPBPi7AzP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":74,"FavoriteCount":40,"RawContent":null},{"Id":"1121443014239379458","CreatedAt":"2019-04-25T15:57:04+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1121149312442912768","CreatedAt":"2019-04-24T20:30:00+00:00","UserScreenname":"dotnet","Text":"We're bringing Apache Spark to .NET devs with .NET for Apache Spark. #SparkAISummit \nhttps://t.co/QJBouS8GMj https://t.co/gmAEfZoOwi","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":100,"FavoriteCount":58,"RawContent":null}]}},"RunOn":"2019-05-06T05:30:31.0521084Z","RunDurationInMilliseconds":9436}