{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0 now available","PublishedOn":"2018-05-30T17:20:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we&#039;re thrilled to announce the release of ASP.NET Core 2.1.0! This is the latest release of our open-source and cross-platform web framework for .NET and it&#039;s now ready for production...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/30/asp-net-core-2-1-0-now-available/","RawContent":null},{"Title":"Troubleshooting ASP.NET Core Performance Problems","PublishedOn":"2018-05-23T14:26:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos I recently had an opportunity to help a developer with an ASP.NET Core app that was functionally correct but slow when under a heavy user load. We found a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/23/asp-net-core-performance-improvements/","RawContent":null},{"Title":"Announcing ASP.NET Providers Connected Service Visual Studio Extension","PublishedOn":"2018-05-22T17:43:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Provider pattern was introduced in ASP.NET 2.0 and it gives the developers the flexibility of where to store the state of ASP.NET features (e.g. Session State, Membership, Output Cache etc.). In...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/22/announcing-asp-net-providers-connected-service-visual-studio-extension/","RawContent":null},{"Title":"A Penny Saved is a Ton of Serverless Compute Earned","PublishedOn":"2018-05-21T20:08:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Scott Guthrie recently shared one of my favorite anecdotes on his¬†Azure Red Shirt Tour. A Microsoft customer regularly invokes 1 billion (yes, that‚Äôs with a ‚ÄúB‚Äù)¬†Azure Functions¬†per day. The customer...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/21/a-penny-saved-is-a-ton-of-serverless-compute-earned/","RawContent":null},{"Title":"Exploring Azure App Service ‚Äì Web Apps and SQL Azure","PublishedOn":"2018-05-18T19:40:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is a good chance that your web app uses a database. In my previous post introducing Azure App Service, I showed some of the benefits of hosting apps in Azure App Service, and how easy it is to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/18/exploring-azure-app-service-web-apps-and-sql-azure/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-rc1 now available","PublishedOn":"2018-05-07T18:00:55+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we‚Äôre happy to announce the first release candidate of ASP.NET Core 2.1! This release should be very close to the final stable release of ASP.NET Core 2.1 and includes primarily bug fixes and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/","RawContent":null},{"Title":"Exploring Azure App Service ‚Äì Introduction","PublishedOn":"2018-05-02T23:01:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you ever needed to quickly stand up a web site, or web API app that was publicly available? Is your team or organization thinking about moving to the cloud but aren‚Äôt sure the best place to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/exploring-azure-app-service-introduction/","RawContent":null},{"Title":"Blazor 0.3.0 experimental release now available","PublishedOn":"2018-05-02T19:50:50+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Blazor 0.3.0 is now available! This release includes important bug fixes and many new feature enhancements. New features in this release (details below): Project templates updated to use Bootstrap 4...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/","RawContent":null},{"Title":"Announcing ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-05-02T19:35:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this release in the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/announcing-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"Cosmos DB Solves Common Data Challenges in App Development","PublishedOn":"2018-04-27T17:35:54+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"When considering how to implement your application with a relational database, it can change how you build it dramatically. Some of these challenges include adding an abstract implementation of the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/27/cosmos-db-solves-common-data-challenges/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7775343227","Type":"IssuesEvent","CreatedAt":"2018-06-05T02:14:32","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3194","RelatedDescription":"Opened issue \"Http Post not recognized on Linux (ASP .NET Core 2.0)\" (#3194) at aspnet/Home","RelatedBody":"_From @rezvanf on June 4, 2018 20:46_\n\nThe below is my class and web method signature (note all these web methods work perfectly on Windows üëç )\r\n\r\n```\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n```\r\n\r\n```\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n```\r\n\r\n```\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n```\r\n\r\n```\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n```\r\n```\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n```\r\n```\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n```\r\n```\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n```\r\n\r\n```\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n```\r\n\r\n```\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n```\r\n```\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n```\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\n```\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks\n\n_Copied from original issue: aspnet/KestrelHttpServer#2645_"},{"Id":"7774485214","Type":"IssuesEvent","CreatedAt":"2018-06-04T21:33:29","Actor":"isaksky","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3193","RelatedDescription":"Opened issue \"Razor pages - textarea asp-for binding problem\" (#3193) at aspnet/Home","RelatedBody":"For razor pages, when one modifies a bound model property in an `OnPost` method on a page with a `asp-for=\"MyProperty\"` property, the new value is shown for `input` controls, but not for `textarea` controls. For `textarea`, when the page is rendered, it stays the same as the `AttemptedValue`.\r\n\r\nTo be clear:\r\n\r\n`<input asp-for=\"MyProperty\">` shows the new value when it is updated in `OnPost`, but `<textarea asp-for=\"MyProperty\"></textarea>` does not.\r\n\r\nI would expect that the behavior (whether `asp-for` is bidirectional) should be consistent across input types, like `input`, `textarea`, `select`, etc.\r\n\r\nWorkaround:\r\n\r\n```csharp\r\npublic void OnPost() {\r\n   // MyProperty = \"Something\"; // Updating this way does not work for textarea\r\n\r\n   // But this does:\r\n   ModelState[\"MyProperty\"].AttemptedValue = \"My new value\"`\r\n}\r\n```\r\n\r\nSame as this issue, but this is for Razor Pages:\r\n\r\nhttps://github.com/aspnet/Mvc/issues/6799"},{"Id":"7773657544","Type":"IssuesEvent","CreatedAt":"2018-06-04T18:42:42","Actor":"TehWardy","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3187","RelatedDescription":"Closed issue \"Can't seem to get sessions working in aspnet core 2.0\" (#3187) at aspnet/Home","RelatedBody":"I've seen so much information on this it's unreal and it looks dead simple but this weekend I figured I would try converting one of our existing aspnet 4.6 apps over. \r\n\r\nHere's what I have in startup ...\r\n\r\n```\r\nusing Core.Cryptos;\r\nusing Core.Objects;\r\nusing Core.Objects.Dtos;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Routing;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace ShellCore\r\n{\r\n    public class Startup\r\n    {\r\n        static IConfiguration config;\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            config = configuration;\r\n        }\r\n        \r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddSingleton(config);\r\n            services.AddSingleton<ICrypto<Signature>>(new AesCrypto<Signature>());\r\n            services.AddSingleton<ICache<PageCacheItem>>(new Cache<PageCacheItem>());\r\n            services.AddDistributedMemoryCache();\r\n            services.AddSession();\r\n            services.AddMvc();\r\n        }\r\n        \r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            app.UseSession();\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseBrowserLink();\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n            else\r\n                app.UseExceptionHandler(\"/Home/Error\");\r\n            \r\n            app.UseStaticFiles();\r\n            app.UseResponseCaching();\r\n            app.UseMvc(routes =>\r\n            {\r\n                routes.MapRoute(\"default\", \"{*path}\", new { controller = \"Home\", action = \"Index\" });\r\n                routes.MapRoute(\"page\", \"{*path}\");\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n... as soon as I do this in a controller action I get an exception ...\r\n\r\n`HttpContext.Session...`\r\n\r\n... The exception reads ...\r\n\r\n> System.InvalidOperationException: 'Session has not been configured for this application or request.'\r\n\r\n... what have i done wrong?"},{"Id":"7773205343","Type":"IssuesEvent","CreatedAt":"2018-06-04T17:10:55","Actor":"pranavkm","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3190","RelatedDescription":"Closed issue \"Razor class library referencing another razor class library can't publish\" (#3190) at aspnet/Home","RelatedBody":"I'm experiencing issues publishing applications from Visual Studio where one razor class library references another razor class library. Everything works perfectly from the command line, the issue is just with VS, so apologies if this is the wrong place for it.\r\n\r\nI've created a reproduction repo for the issue below:\r\n\r\nhttps://github.com/svallis/PublishTest.git\r\n\r\nThis demonstrates a solution with two class libraries, one of which (`Shared`) references another (`Framework`). Publishing this solution from the command line works exactly as expected:\r\n\r\n```\r\nPS C:\\Development\\PublishTest\\Website> dotnet publish -c Release\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Website\\Website.csproj.\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Framework\\Framework.csproj.\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Shared\\Shared.csproj.\r\n  Framework -> C:\\Development\\PublishTest\\Framework\\bin\\Release\\netcoreapp2.1\\Framework.dll\r\n  Framework -> C:\\Development\\PublishTest\\Framework\\bin\\Release\\netcoreapp2.1\\Framework.Views.dll\r\n  Shared -> C:\\Development\\PublishTest\\Shared\\bin\\Release\\netcoreapp2.1\\Shared.dll\r\n  Shared -> C:\\Development\\PublishTest\\Shared\\bin\\Release\\netcoreapp2.1\\Shared.Views.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\Website.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\Website.Views.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\publish\\\r\n```\r\n\r\nBut publishing from within Visual Studio acts as if `Shared` has no knowledge of `Framework`, despite an explicit project reference:\r\n\r\n```\r\nSharedClass.cs(9,13): Error CS0103: The name 'Framework' does not exist in the current context\r\nSharedClass.cs(11,28): Error CS0246: The type or namespace name 'Framework' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nThe repository has a file system publish profile set up which demonstrates the failure. Building and running the solution works as you would expect it to.\r\n\r\nThis seems to be related to the new `Microsoft.NET.Sdk.Razor` project SDK, as reverting `Shared` and `Framework` to the old `Microsoft.NET.Sdk` SDK resolves the publishing issue, but obviously breaks the embedded razor views. Am I missing something obvious?"},{"Id":"7773166994","Type":"IssuesEvent","CreatedAt":"2018-06-04T17:03:04","Actor":"slubowsky","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3192","RelatedDescription":"Opened issue \"JsonPatch including a move doesnt update data as expected\" (#3192) at aspnet/Home","RelatedBody":"A JsonPatch that includes both a move and updating data fails to update the data as expected - presumably due to the move.\r\nFor example, after executing the following patch:\r\n```\r\n[{\"op\":\"replace\",\"path\":\"/myArray/0/index\",\"value\":1},{\"op\":\"move\",\"from\":\"/myArray/1\",\"path\":\"/myArray/0\"},\r\n{\"op\":\"replace\",\"path\":\"/myArray/1/index\",\"value\":0}]\r\n```\r\nI see only the second value actually being changed. The object that was initially at index 0 remains with its original value"},{"Id":"7772885695","Type":"IssuesEvent","CreatedAt":"2018-06-04T16:10:35","Actor":"NAOnlyOne","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3185","RelatedDescription":"Closed issue \"Why IHttpClientFactory pools the HttpMessageHandler instances,but not SocketsHttpHandler instances?\" (#3185) at aspnet/Home","RelatedBody":"Hello, I have a question as the title shows.\r\nToday I read the official article 'Announcing .NET Core 2.1' , and I found the following sentences.\r\n_**SocketsHttpHandler is now the default implementation for HttpClient. The biggest win of SocketsHttpHandler is performance. It is a lot faster than the existing implementation. It also eliminates platform-specific dependencies and enables consistent behavior across operating systems.**_\r\n\r\nThat's a good news that SocketsHttpHandler will be the default implementation for HttpClient.\r\nHowever, I also found the following sentences about IHttpClientFactory in the fundamental 'ASP.NET Core 2.1'.\r\n_**Each time CreateClient is called on the IHttpClientFactory, a new instance of a HttpClient is returned. There will be a HttpMessageHandler per named client.**_\r\n\r\nWhy IHttpClientFactory pools the HttpMessageHandler instances,but not SocketsHttpHandler instances?\r\n"},{"Id":"7771689255","Type":"IssuesEvent","CreatedAt":"2018-06-04T12:57:46","Actor":"primenum","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3191","RelatedDescription":"Opened issue \"ASP.Net core 2.x IIS Hosted VS Self-hosted performance issues\" (#3191) at aspnet/Home","RelatedBody":"Hi guys.\r\nWe are developing ASP.NET core application and having performance issues hosting application under IIS. Application hosted under IIS working 14 times **slower** than self-hosted using IIS as reverse proxy with URL rewrite module\r\nAsp.net core 2.1\r\n\r\nLoad test performed with VS 2017\r\nAspNetCoreModule - aspnetcore.dll  file version  -  8.2.1991.0\r\nThe result are: \r\nIIS hosted AVG Response Time:  0.06 sec\r\nSelf-Hosted with IIS as reverse proxy: 0.0042\r\n\r\n## **Code:**\r\n\r\n**Program.cs**\r\n\r\n```\r\npublic class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateWebHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n            .UseKestrel()\r\n            .UseIISIntegration()\r\n            .ConfigureAppConfiguration((hostingContext, config) =>\r\n            {\r\n                ConfigureApplicationSettings(hostingContext, config);\r\n            })\r\n            .ConfigureLogging((context, logging) =>\r\n            {\r\n                //logging controlled from config file\r\n\r\n                logging.AddConfiguration(context.Configuration.GetSection(\"Logging\"));\r\n                logging.SetMinimumLevel(LogLevel.None);\r\n\r\n            })\r\n                .UseStartup<Startup>();\r\n\r\n        private static void ConfigureApplicationSettings(WebHostBuilderContext hostingContext, IConfigurationBuilder config)\r\n        {\r\n            var env = hostingContext.HostingEnvironment;\r\n\r\n            //set base path\r\n            config.SetBasePath(Directory.GetCurrentDirectory());\r\n\r\n            //set configuration files\r\n            config.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n                  .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: false, reloadOnChange: true);\r\n\r\n            config.AddEnvironmentVariables();\r\n            config.Build();\r\n        }\r\n    }\r\n\r\n```\r\n**Startup**\r\n```\r\npublic class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n```\r\n\r\n**API** \r\n```\r\n[Route(\"core/plain\")]\r\n    [ApiController]\r\n    public class PlainController : ControllerBase\r\n    {\r\n        [HttpGet]\r\n        public IActionResult GetServerTime()\r\n        {\r\n            string sHtml = $\"Asp.Net core 2.1,  server time: {DateTime.Now.ToString(\"yyyy-MM-dd, HH:mm:ss\")}\";\r\n            return Ok(sHtml);\r\n        }\r\n    }\r\n\r\n```\r\n\r\nWhat are we doing wrong? \r\nWe found out this issue in 2.0 and waited for 2.1 in hope this well be solved, but...."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7774363272","Type":"IssuesEvent","CreatedAt":"2018-06-04T21:06:43","Actor":"pazcaldj","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2426","RelatedDescription":"Closed issue \"SignalR Webhost with ASP.NET Core 2.1 and UWP app as Client returns ' 405 Method not allowed'\" (#2426) at aspnet/SignalR","RelatedBody":"I am struggling with this for a while now and I can't get it to work. I have 2 applications, both running on a Raspberry Pi 2 with Win IoT:\r\n\r\n- ASP.NET Core 2.1 Web Api - Within this WebApi I am running a SignalR Host (published as `win10-arm`). \r\n\r\n- Universal Windows App - This app will be a client which should communicate with the host and all other clients (published as ARM).\r\n\r\nWhen I deploy the UWP app and I try to run it, it crashes in the `hubConn.Start(...)` method of the HubConnection and returns the error:\r\n\r\n> **HttpClientException**: StatusCode: 405, ReasonPhrase: 'Method Not\r\n> Allowed', Version: 1.1, Content: System.Net.Http.StreamContent,\r\n> Headers: {   Server: Kestrel   Date: Sat, 02 Jun 2018 17:04:15 GMT  \r\n> Content-Length: 0   Content-Type: text/plain }\r\n\r\nThe testconsole and UWP are both using the `Microsoft.AspNet.SignalR.Client` (2.2.3) nuget package (which is the latest). The ASP.NET Core 2.1 Web Api is using the `Microsoft.AspNetCore.App` SDK (2.1.0).\r\n\r\nBy reading this post https://stackoverflow.com/questions/49152486/signalr-version-compatability-statuscode-405-method-not-allowed/49153217#49153217 I am familiar with the fact that SignalR is not backwards compatible for both host as client. But I would expect that as I am using the latest nuget packages and versions which are available on nuget everything would work.\r\n\r\nAlso, I am aware that ASP.NET Core 2.1 package and the SignalR Client package are 2 different packages, but I cannot add the nuget package `Microsoft.AspNetCore.App` to the UWP project as it is not compatible with any `win10-arm` platform.\r\n\r\nIf I want to work with ASP.NET Core 2.1 SignalR, which nuget package should I include in my Test Console app, as well in my UWP project?\r\n\r\n\r\nHere some of the code; all projects are completely defaults via File - New project, plus the code below.\r\n\r\n**ASP.NET Core 2.1 Web Api**\r\n\r\nStartup.cs\r\n\r\n    public class Startup\r\n    {\r\n        ...\r\n        \r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            ...\r\n\r\n            services.AddMvc();\r\n            services.AddSignalR();\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n \r\n            ...\r\n            \r\n            app.UseSignalR(route =>\r\n            {\r\n                route.MapHub<HomeAutomationHost>(\"/HomeAutomationHost\");\r\n            });\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n\r\n\r\n\r\n**Universal Windows App**\r\n\r\nMainPage.xaml.cs\r\n\r\n    public class MainPage \r\n    {\r\n\t    ...\r\n\t\r\n\t    public async Task DoConnect()\r\n\t    {\r\n                var hubConn = new HubConnection(\"http://192.168.2.49:5000/HomeAutomationHost\", false);\r\n                hubConn.EnsureReconnecting();\r\n\r\n                var signalRHost = hubConn.CreateHubProxy(\"HomeAutomationHost\");\r\n\r\n                await hubConn.Start(new WebSocketTransport());\r\n\t    }\r\n    }\r\n\r\n\r\n"},{"Id":"7773367743","Type":"IssuesEvent","CreatedAt":"2018-06-04T17:44:01","Actor":"DavePilks","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2428","RelatedDescription":"Opened issue \"Cannot Load Dependencies from Nuget Package\" (#2428) at aspnet/SignalR","RelatedBody":"I am trying to use the AspNetCore Nuget package in a Xamarin.Forms app. But when it tries to load the ViewModel that has the reference to the .dll, I get the following message.\r\n\r\n> Could not load file or assembly 'Microsoft.AspNetCore.SignalR.Client.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' or one of its dependencies. assembly:Microsoft.AspNetCore.SignalR.Client.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 type: member:(null) signature:\r\n\r\n* Versions of Client-Side NuGet/NPM Packages: 1.0.0\r\n* Are you using the C# client or the JavaScript client: C#\r\n* The Operating System on the Client (Windows/Linux/macOS): Xamarin.Forms via Visual Studio for MacOS\r\n\r\nThe project that I am adding the Nuget package to is a .Net Standard 2.0 project."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7775269681","Type":"IssuesEvent","CreatedAt":"2018-06-05T01:47:44","Actor":"groogiam","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7854","RelatedDescription":"Closed issue \"DisableRequestSizeLimit and RequestSizeLimit do not work\" (#7854) at aspnet/Mvc","RelatedBody":"There appears to be a bug in versions 2.1.0 where the DisableRequestSizeLimit and RequestSizeLimit attributes do not work.\r\n\r\nI have the following controller action defined.\r\n\r\n```c#\r\n        [HttpPost]\r\n        [DisableRequestSizeLimit]\r\n        //[RequestSizeLimit(1073741824)]\r\n        public async Task<string> UploadDocumentContent(IFormFile file)\r\n```\r\n\r\nUploading a large file to this action results in the following exception.\r\n\r\nSystem.IO.InvalidDataException: Multipart body length limit 134217728 exceeded\r\n\r\n\r\n"},{"Id":"7775053872","Type":"IssuesEvent","CreatedAt":"2018-06-05T00:26:20","Actor":"tofilagman","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7870","RelatedDescription":"Opened issue \"Load a controller without a view from another DLL\" (#7870) at aspnet/Mvc","RelatedBody":"#### Question:\r\nHow to load a controller without a view using AddApplicationPart?.\r\ni only need to load a controller from another dll, and load the dll during runtime.\r\n\r\n#### Steps to reproduce:\r\n var builder = services.AddMvc();\r\nbuilder.AddApplicationPart(typ.Assembly) //\r\n\r\n#### Description of the problem:\r\n```\r\n\r\nSystem.ArgumentException: Empty path name is not legal.\r\nParameter name: path\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.CreateMetadataReference(String path)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n   at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n\r\n#### Version of `Microsoft.AspNetCore.App`:\r\n "},{"Id":"7774793248","Type":"PullRequestEvent","CreatedAt":"2018-06-04T22:54:42","Actor":"jmhmaine","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7869","RelatedDescription":"Opened pull request \"asp-fallback-integrity-check  #7845\" (#7869) at aspnet/Mvc","RelatedBody":"Summary of the changes\r\n  - Do not include integrity attribute when asp-fallback-integrity-check =\"false\"\r\n  - Added Unit Tests, manual tests\r\n\r\nAddresses #7845\r\n"},{"Id":"7774653680","Type":"IssuesEvent","CreatedAt":"2018-06-04T22:14:12","Actor":"smarts","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7868","RelatedDescription":"Opened issue \"[question] is it possible to update a parameter's model binder from an action filter?\" (#7868) at aspnet/Mvc","RelatedBody":"example parameter declaration from controller action:\r\n```csharp\r\n[TypeFilter(typeof(MyFilter))]\r\n[HttpPost(\"{id}\")]\r\npublic Foo([FromRoute(Name=\"id\")] Bar bar, [FromBody] Baz baz) { ‚Ä¶ }\r\n```\r\nfilter implementation:\r\n```\r\nvar params = get parameters of a particular type and binding source from resourceExecutingContext.ActionDescriptor.Parameters\r\nfor each p in params\r\n  var vpr = get value provider result for p.BindingInfo.BinderModelName\r\n  if (vpr == ValueProviderResult.None) throw exception\r\n  var response = get value from external data source using vpr.Values as ID\r\n  if (response is not found) return NotFoundResult\r\n  cache response content in current request\r\n  p.BindingInfo.BinderType = GetType()\r\n  p.BindingInfo.BindingSource = BindingSource.Custom;\r\n```\r\nmodel binder implementation:\r\n```\r\nvar value = get cached content from request\r\nbindingContext.Result = ModelBindingResult.Success(value)\r\n```\r\n\r\nthe model binder implementation is never reached"},{"Id":"7774453571","Type":"IssuesEvent","CreatedAt":"2018-06-04T21:26:11","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6848","RelatedDescription":"Reopened issue \"Convert null-valued results to NotFoundResult in ActionResult<>\" (#6848) at aspnet/Mvc","RelatedBody":"Consider the following API:\r\n\r\n```C#\r\npublic async Task<ActionResult<Contact>> Get(int id)\r\n{\r\n    var contact = await DbContext.Contacts.Where(item => item.ContactId == id).SingleOrDefaultAsync();\r\n    if (contact == null)\r\n    {\r\n        return NotFound();\r\n    }\r\n    \r\n    return contact;\r\n}\r\n```\r\n\r\nWe could reduce this by assuming ActionResult<T>(null) indicates a NotFoundResult rather than an ObjectResult with a null value (which is what we do now). Resulting code:\r\n\r\n```C#\r\npublic Task<ActionResult<Contact>> Get(int id)\r\n{\r\n    return DbContext.Contacts.Where(item => item.ContactId == id).SingleOrDefaultAsync();\r\n}\r\n```"},{"Id":"7774283195","Type":"IssuesEvent","CreatedAt":"2018-06-04T20:50:39","Actor":"johnkwaters","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7867","RelatedDescription":"Opened issue \"Uploading formfile I have to set [FromForm(Name=\"formfile\"]\" (#7867) at aspnet/Mvc","RelatedBody":"It used to match the name of the variable in the method with the name of the form...but now I have to explicitly spell it out with the Name attribute.\r\nThis is after upgrading to 2.1 and adding ApiController attribute.\r\nI thought this was less work not more? Why do I have to tell the binding that the name of the form upload is the SAME as the name of the method variable?\r\n\r\n`public async Task<int> UploadTenantLogoAsync([FromForm(Name = \"formfile\")] IFormFile formfile)`\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7775070203","Type":"PullRequestEvent","CreatedAt":"2018-06-05T00:32:43","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1816","RelatedDescription":"Opened pull request \"Don't hook cancellation tokens by default\" (#1816) at aspnet/Identity","RelatedBody":"Fixes https://github.com/aspnet/Identity/issues/1811\r\n\r\ncc @davidfowl @ajcvickers "},{"Id":"7773496705","Type":"IssuesEvent","CreatedAt":"2018-06-04T18:09:50","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1812","RelatedDescription":"Closed issue \"Identity UI's embedded static files will return 404s if app.UseStaticFiles() is passed a StaticFileOptions object.\" (#1812) at aspnet/Identity","RelatedBody":"**Is this a Bug or Feature request?**\r\n\r\nBug\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create a new ASP.NET Core Web Application (2.1).\r\n2. Be sure Authentication is set to \"Individual User Accounts\".\r\n3. Run the app and navigate to the Register and Login pages. Everything works as expected so far.\r\n4. Stop the app.\r\n5. Delete the file at \"Areas/Identity/Pages/_ViewStart.cshtml\". This will force Identity to use its default layout page (with links to embedded static files).\r\n6. Now open Startup.cs and change `app.UseStaticFiles();` to `app.UseStaticFiles(new StaticFileOptions());`.\r\n7. Run the app again (**with browser cache disabled**) and navigate back to the Register and Login pages. All the embedded static files from Identity‚Äôs Default UI now return 404s.\r\n\r\n**Description of the problem:**\r\n\r\nAfter digging through the source code, I found the problem. Calling `app.UseStaticFiles()` in Startup.cs with no options parameter works as expected because the registered `IPostConfigureOptions<StaticFileOptions>` instances get called correctly.\r\n\r\nHowever, if you call `app.UseStaticFiles(staticFileOptions);` with an options argument, that instance gets passed into the `StaticFileMiddleware` directly (which is obviously by design). Unfortunately, that also means that any registered `IPostConfigureOptions<StaticFileOptions>` will NOT be called, including Identity UI‚Äôs `IdentityDefaultUIConfigureOptions` class.\r\n\r\n`IdentityDefaultUIConfigureOptions` is the class that adds the `ManifestEmbeddedFileProvider` and `CompositeFileProvider` to the StaticFileOptions object. But if its `PostConfigure(name, staticFileOptions)` method is never called, those embedded files are not found and everything 404s at runtime."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7775496895","Type":"PullRequestEvent","CreatedAt":"2018-06-05T03:10:42","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2644","RelatedDescription":"Merged pull request \"React to Uri scope break\" (#2644) at aspnet/KestrelHttpServer","RelatedBody":"Followup to https://github.com/aspnet/Common/pull/369\r\nSystem.Uri.ToString now includes the scope id which these tests did not want. Filter it out."},{"Id":"7775343276","Type":"IssuesEvent","CreatedAt":"2018-06-05T02:14:33","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2645","RelatedDescription":"Closed issue \"Http Post not recognized on Linux (ASP .NET Core 2.0)\" (#2645) at aspnet/KestrelHttpServer","RelatedBody":"The below is my class and web method signature (note all these web methods work perfectly on Windows üëç )\r\n\r\n```\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n```\r\n\r\n```\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n```\r\n\r\n```\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n```\r\n\r\n```\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n```\r\n```\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n```\r\n```\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n```\r\n```\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n```\r\n\r\n```\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n```\r\n\r\n```\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n```\r\n```\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n```\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\n```\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks"},{"Id":"7775211491","Type":"IssuesEvent","CreatedAt":"2018-06-05T01:26:35","Actor":"smokedog2","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2647","RelatedDescription":"Opened issue \"BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\" (#2647) at aspnet/KestrelHttpServer","RelatedBody":"`[09:10:02 INF] Connection id \"0HLEAFUMLUVR5\" bad request data: \"Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\"\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.ThrowRequestTargetRejected(Span`1 target)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.OnOriginFormTarget(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.OnStartLine(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, Byte* data, Int32 length)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.TakeStartLine(ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.ParseRequest(ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()`\r\n\r\nAn error occurred If the url contains Chinese in IE\r\n\r\n"},{"Id":"7775017027","Type":"PullRequestEvent","CreatedAt":"2018-06-05T00:12:14","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2646","RelatedDescription":"Opened pull request \"Improve tracking of connection lifetime\" (#2646) at aspnet/KestrelHttpServer","RelatedBody":"I haven't seen this cause any issues in practice, but the following sample shows why the way we're currently tracking connection lifetimes is at least theoretically bad. I know we also want to start tracking non-HTTP connections. This PR doesn't do that, but I think we should still take this change in the meantime.\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConnectionManagerRace\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var manager = new ConnectionManager();\r\n            Task.Run(() => StartConnections(100, manager));\r\n            Thread.Sleep(500);\r\n            manager.CloseAllConnectionsAsync().Wait();\r\n        }\r\n\r\n        public static void StartConnections(int count, ConnectionManager manager)\r\n        {\r\n            for (var i = 0; i < count; i++)\r\n            {\r\n                var conn = new Connection(manager);\r\n                conn.StartRequestProcessing();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class ConnectionManager\r\n    {\r\n        private readonly ConcurrentDictionary<long, Connection> _connections = new ConcurrentDictionary<long, Connection>();\r\n        private long _lastId = 0;\r\n\r\n        public void Add(Connection conn)\r\n        {\r\n            _connections.TryAdd(Interlocked.Increment(ref _lastId), conn);\r\n        }\r\n\r\n        public async Task CloseAllConnectionsAsync()\r\n        {\r\n            var closeTasks = new List<Task>();\r\n\r\n            foreach (var pair in _connections)\r\n            {\r\n                closeTasks.Add(pair.Value.StopProcessingNextRequestAsync());\r\n            }\r\n\r\n            await Task.WhenAll(closeTasks);\r\n        }\r\n    }\r\n\r\n    public class Connection\r\n    {\r\n        private readonly ConnectionManager _manager;\r\n        private Task _lifetimeTask;\r\n\r\n        public Connection(ConnectionManager manager)\r\n        {\r\n            _manager = manager;\r\n        }\r\n\r\n        public Task StartRequestProcessing()\r\n        {\r\n            return _lifetimeTask = ProcessRequestsAsync();\r\n        }\r\n\r\n        public async Task ProcessRequestsAsync()\r\n        {\r\n            _manager.Add(this);\r\n            Thread.Sleep(1000);\r\n            await Task.Delay(1000);\r\n        }\r\n\r\n        public Task StopProcessingNextRequestAsync()\r\n        {\r\n            return _lifetimeTask;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhich results in:\r\n\r\n```\r\nConnectionManagerRace> dotnet run\r\n\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (The tasks argument included a null value.\r\nParameter name: tasks) ---> System.ArgumentException: The tasks argument included a null value.\r\nParameter name: tasks\r\n   at System.Threading.Tasks.Task.WhenAll(IEnumerable`1 tasks)\r\n   at ConnectionManagerRace.ConnectionManager.CloseAllConnectionsAsync() in G:\\dev\\halter73\\ConnectionManagerRace\\Program.cs:line 48\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at ConnectionManagerRace.Program.Main(String[] args) in G:\\dev\\halter73\\ConnectionManagerRace\\Program.cs:line 16\r\n```"},{"Id":"7774625706","Type":"IssuesEvent","CreatedAt":"2018-06-04T22:06:56","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2639","RelatedDescription":"Closed issue \"http/2: Add support for prior knowledge http/2 connections\" (#2639) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7774264029","Type":"IssuesEvent","CreatedAt":"2018-06-04T20:46:53","Actor":"rezvanf","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2645","RelatedDescription":"Opened issue \"Http Post not recognized on Linux\" (#2645) at aspnet/KestrelHttpServer","RelatedBody":"The below is my class and web method signature (note all these web methods work perfectly on Windows :)ÔÅä)\r\n\r\n\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks"},{"Id":"7773501591","Type":"PullRequestEvent","CreatedAt":"2018-06-04T18:10:47","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2644","RelatedDescription":"Opened pull request \"React to Uri scope break\" (#2644) at aspnet/KestrelHttpServer","RelatedBody":"Followup to https://github.com/aspnet/Common/pull/369\r\nSystem.Uri.ToString now includes the scope id which these tests did not want. Filter it out."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7774997000","Type":"IssuesEvent","CreatedAt":"2018-06-05T00:04:45","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2309","RelatedDescription":"Reopened issue \"Broken tests: RazorCompile_NoopsWithNoFiles et all\" (#2309) at aspnet/Razor","RelatedBody":"These tests [fail](http://aspnetci/viewLog.html?buildId=456519&tab=buildResultsDiv&buildTypeId=XPlat_HighSierraOsxUniverse) on Universe test runs:\r\n\r\n```\r\nMicrosoft.AspNetCore.Razor.Design.IntegrationTests.Assert+BuildFailedException : Build failed.\r\ndotnet msbuild /nr:false /restore /p:_RazorBuildServerPipeName=0dae5e52-a070-466f-841a-82e90065d7d6 /t:RazorCompile /p:Configuration=Release \r\n\r\nMicrosoft (R) Build Engine version 15.7.172.38367 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj...\r\n/Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj : warning NU1603: SimpleMvc depends on Microsoft.NETCore.App (>= 2.1.0-rc1-26424-03) but Microsoft.NETCore.App 2.1.0-rc1-26424-03 was not found. An approximate best match of Microsoft.NETCore.App 2.2.0-preview1-26424-04 was resolved.\r\n  Generating MSBuild file /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/obj/SimpleMvc.csproj.nuget.g.props.\r\n  Generating MSBuild file /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/obj/SimpleMvc.csproj.nuget.g.targets.\r\n  Restore completed in 975.74 ms for /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj.\r\n/Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj : warning NU1603: SimpleMvc depends on Microsoft.NETCore.App (>= 2.1.0-rc1-26424-03) but Microsoft.NETCore.App 2.1.0-rc1-26424-03 was not found. An approximate best match of Microsoft.NETCore.App 2.2.0-preview1-26424-04 was resolved.\r\n/Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj : error : The project was restored using Microsoft.NETCore.App version 2.2.0-preview1-26424-04, but with current settings, version 2.1.0-rc1-26424-03 would be used instead.  To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish.  Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore.\r\n\r\n\r\n\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.Assert.BuildPassed(MSBuildResult result) in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/Assert.cs:line 27\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.RazorCompileIntegrationTest.RazorCompile_NoopsWithNoFiles() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/RazorCompileIntegrationTest.cs:line 45\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nThis is almost certainly happening because we updated the SDK. If we set `/p:VerifyMatchingImplicitPackageVersion=false` we get:\r\n\r\n```\r\nSystem.TypeInitializationException : The type initializer for 'Microsoft.CodeAnalysis.Razor.Workspaces.DefaultTagHelperDescriptorFactoryTest' threw an exception.\r\n---- System.InvalidOperationException : Cannot find reference assembly 'Microsoft.AspNetCore.Html.Abstractions.dll' file for package Microsoft.AspNetCore.Html.Abstractions.Reference\r\nStack Trace:\r\nat Microsoft.CodeAnalysis.Razor.Workspaces.DefaultTagHelperDescriptorFactoryTest.CreateDescriptor_BuildsDescriptorsFromSimpleTypes() in D:\\dd\\Razor\\test\\Microsoft.CodeAnalysis.Razor.Test\\DefaultTagHelperDescriptorFactoryTest.cs:line 1756\r\n----- Inner Stack Trace -----\r\nat Microsoft.Extensions.DependencyModel.Resolution.ReferenceAssemblyPathResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\nat Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\nat Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\nat System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\nat System.Linq.Enumerable.SelectEnumerableIterator`2.ToArray()\r\nat System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\nat Microsoft.CodeAnalysis.TestCompilation.GetMetadataReferences(Assembly assembly) in D:\\dd\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.Common\\TestCompilation.cs:line 30\r\nat Microsoft.CodeAnalysis.TestCompilation.Create(Assembly assembly, SyntaxTree syntaxTree) in D:\\dd\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.Common\\TestCompilation.cs:line 41\r\nat Microsoft.CodeAnalysis.Razor.Workspaces.DefaultTagHelperDescriptorFactoryTest..cctor() in D:\\dd\\Razor\\test\\Microsoft.CodeAnalysis.Razor.Test\\DefaultTagHelperDescriptorFactoryTest.cs:line 25\r\n```\r\ninstead.\r\n\r\nCC @pranavkm  who said he'd look into this."},{"Id":"7774191068","Type":"IssuesEvent","CreatedAt":"2018-06-04T20:32:47","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2380","RelatedDescription":"Closed issue \"Disable creation of new *.Views.dll?\" (#2380) at aspnet/Razor","RelatedBody":"I'm upgrading to .NET Core 2.1 and ran into an issue during compilation because of an FxCop violation (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1016-mark-assemblies-with-assemblyversionattribute).\r\nIt turned out that the `*.Views.dll` was not compiled with a DLL version. I'm using [GitVersioning](https://github.com/AArnott/Nerdbank.GitVersioning) to do versioning of my application DLLs but that seems to not pick up the new `*.Views.dll` output and so it ends up without a version stamp.\r\n\r\nIs there some way to disable the generation of this DLL (and keep it part of my ASP.Net Core application)? "},{"Id":"7773778022","Type":"IssuesEvent","CreatedAt":"2018-06-04T19:07:14","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2381","RelatedDescription":"Opened issue \"Use document snapshots when parsing Razor files.\" (#2381) at aspnet/Razor","RelatedBody":"Today the parser is highly coupled to the idea of a background parser that requires in-depth knowledge of what makes up a documents context (project file path, its project engine etc.) and to idea of a background queue of changes pumping through the system."},{"Id":"7773684900","Type":"IssuesEvent","CreatedAt":"2018-06-04T18:48:09","Actor":"Tadimsky","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2380","RelatedDescription":"Opened issue \"Disable creation of new *.Views.dll?\" (#2380) at aspnet/Razor","RelatedBody":"I'm upgrading to .NET Core 2.1 and ran into an issue during compilation because of an FxCop violation (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1016-mark-assemblies-with-assemblyversionattribute).\r\nIt turned out that the `*.Views.dll` was not compiled with a DLL version. I'm using [GitVersioning](https://github.com/AArnott/Nerdbank.GitVersioning) to do versioning of my application DLLs but that seems to not pick up the new `*.Views.dll` output and so it ends up without a version stamp.\r\n\r\nIs there some way to disable the generation of this DLL (and keep it part of my ASP.Net Core application)? "},{"Id":"7771028843","Type":"IssuesEvent","CreatedAt":"2018-06-04T10:41:59","Actor":"ViperGTI007","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2379","RelatedDescription":"Opened issue \"Taghelpers intellisense broken after last update\" (#2379) at aspnet/Razor","RelatedBody":"Hi\r\n\r\nI updated my Visual Studio on Friday together with the Microsoft.AspNetCore packages (from 2.0.4 to 2.1.0) for my project.  It seems that the upgrade of Microsoft.AspNetCore to 2.1.0 essentially broke my intellisense for TagHelpers.  The behaviour is basically the same as the issue in the link below, except this seems to be related to the Nuget package version for the project rather than Visual Studio itself.\r\nhttps://github.com/aspnet/Razor/issues/1628\r\n\r\nI followed the advice in the link above (when I thought the issue was VS related):  Tried disabling and enabling the Razor services, did a full repair and still nothing.  Both custom developed tag helpers and the standard tag helpers doesn't work with intellisense, although when running the project, they do what they're meant to do.  Everything was working fine on Thursday.\r\n\r\nTo reproduce, simply open an existing project that uses the Microsoft.AspNetCore v2.0.4 packages, open Nuget and update all packages to the latest versions.  Open any page that uses a TagHelper or try start typing a taghelper on any view."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7773593004","Type":"IssuesEvent","CreatedAt":"2018-06-04T18:29:24","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Reopened issue \"Docker in launchSettings.json\" (#1074) at aspnet/Tooling","RelatedBody":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image."},{"Id":"7766446851","Type":"IssuesEvent","CreatedAt":"2018-06-02T16:19:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Closed issue \"Docker in launchSettings.json\" (#1074) at aspnet/Tooling","RelatedBody":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image."},{"Id":"7766245633","Type":"IssuesEvent","CreatedAt":"2018-06-02T14:10:14","Actor":"AceHack","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Opened issue \"Docker in launchSettings.json\" (#1074) at aspnet/Tooling","RelatedBody":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image."},{"Id":"7763744014","Type":"PullRequestEvent","CreatedAt":"2018-06-01T17:41:05","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Merged pull request \"Update dotnet-core-2.1.md\" (#1073) at aspnet/Tooling","RelatedBody":"Visual Studio 2017 15.7 has been released now so this document is outdated"},{"Id":"7755515411","Type":"PullRequestEvent","CreatedAt":"2018-05-31T10:25:30","Actor":"federicorinaldi","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Opened pull request \"Update dotnet-core-2.1.md\" (#1073) at aspnet/Tooling","RelatedBody":"Visual Studio 2017 15.7 has been released now so this document is outdated"},{"Id":"7707144427","Type":"IssuesEvent","CreatedAt":"2018-05-21T21:26:33","Actor":"Fosol","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/146","RelatedDescription":"Closed issue \"How to nest files in a DNX project?\" (#146) at aspnet/Tooling","RelatedBody":"My search for answers has led me here.\n\nBy default a DNX project nest files like config.json -> config.debug.json\n\nI want to be able to nest files like config.json -> config.development.debug.json\n\nHow do I do this? I can no longer edit my project file to do this because someone has decided to extract all that functionality and hide it away in some black box. \n\nFeel free to point me to the right place to ask this question.\n\nThanks,\n Jeremy\n"},{"Id":"7687608828","Type":"IssuesEvent","CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072) at aspnet/Tooling","RelatedBody":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n"},{"Id":"7686968343","Type":"IssuesEvent","CreatedAt":"2018-05-17T02:31:07","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Opened issue \"can not upload file FTPS. \" (#1072) at aspnet/Tooling","RelatedBody":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40153549-85278454-59b4-11e8-9b07-621a5de873f8.png)\r\n"},{"Id":"7686951810","Type":"IssuesEvent","CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060) at aspnet/Tooling","RelatedBody":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7671761413","Type":"IssuesEvent","CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Opened issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301) at aspnet/Announcements","RelatedBody":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*"},{"Id":"7644982634","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:07:05","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Opened issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Kestrel/issues/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio‚Äôs Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project‚Äôs obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_"},{"Id":"7630948535","Type":"IssuesEvent","CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Opened issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299) at aspnet/Announcements","RelatedBody":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"329277494","IsPullRequest":false,"CreatedAt":"2018-06-05T02:14:32","Actor":"Tratcher","Number":"3194","RawContent":null,"Title":"Http Post not recognized on Linux (ASP .NET Core 2.0)","State":"open","Body":"_From @rezvanf on June 4, 2018 20:46_\n\nThe below is my class and web method signature (note all these web methods work perfectly on Windows üëç )\r\n\r\n```\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n```\r\n\r\n```\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n```\r\n\r\n```\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n```\r\n\r\n```\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n```\r\n```\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n```\r\n```\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n```\r\n```\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n```\r\n\r\n```\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n```\r\n\r\n```\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n```\r\n```\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n```\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\n```\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks\n\n_Copied from original issue: aspnet/KestrelHttpServer#2645_","Url":"https://github.com/aspnet/Home/issues/3194","RelatedDescription":"Open issue \"Http Post not recognized on Linux (ASP .NET Core 2.0)\" (#3194)"},{"Id":"329225105","IsPullRequest":false,"CreatedAt":"2018-06-04T21:33:28","Actor":"isaksky","Number":"3193","RawContent":null,"Title":"Razor pages - textarea asp-for binding problem","State":"open","Body":"For razor pages, when one modifies a bound model property in an `OnPost` method on a page with a `asp-for=\"MyProperty\"` property, the new value is shown for `input` controls, but not for `textarea` controls. For `textarea`, when the page is rendered, it stays the same as the `AttemptedValue`.\r\n\r\nTo be clear:\r\n\r\n`<input asp-for=\"MyProperty\">` shows the new value when it is updated in `OnPost`, but `<textarea asp-for=\"MyProperty\"></textarea>` does not.\r\n\r\nI would expect that the behavior (whether `asp-for` is bidirectional) should be consistent across input types, like `input`, `textarea`, `select`, etc.\r\n\r\nWorkaround:\r\n\r\n```csharp\r\npublic void OnPost() {\r\n   // MyProperty = \"Something\"; // Updating this way does not work for `textarea`, but does for `input`\r\n\r\n   // But this does:\r\n   ModelState[\"MyProperty\"].AttemptedValue = \"My new value\"`\r\n}\r\n```\r\n\r\nSame as this issue, but this is for Razor Pages:\r\n\r\nhttps://github.com/aspnet/Mvc/issues/6799","Url":"https://github.com/aspnet/Home/issues/3193","RelatedDescription":"Open issue \"Razor pages - textarea asp-for binding problem\" (#3193)"},{"Id":"328863978","IsPullRequest":false,"CreatedAt":"2018-06-04T18:42:42","Actor":"TehWardy","Number":"3187","RawContent":null,"Title":"Can't seem to get sessions working in aspnet core 2.0","State":"closed","Body":"I've seen so much information on this it's unreal and it looks dead simple but this weekend I figured I would try converting one of our existing aspnet 4.6 apps over. \r\n\r\nHere's what I have in startup ...\r\n\r\n```\r\nusing Core.Cryptos;\r\nusing Core.Objects;\r\nusing Core.Objects.Dtos;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Routing;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace ShellCore\r\n{\r\n    public class Startup\r\n    {\r\n        static IConfiguration config;\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            config = configuration;\r\n        }\r\n        \r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddSingleton(config);\r\n            services.AddSingleton<ICrypto<Signature>>(new AesCrypto<Signature>());\r\n            services.AddSingleton<ICache<PageCacheItem>>(new Cache<PageCacheItem>());\r\n            services.AddDistributedMemoryCache();\r\n            services.AddSession();\r\n            services.AddMvc();\r\n        }\r\n        \r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            app.UseSession();\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseBrowserLink();\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n            else\r\n                app.UseExceptionHandler(\"/Home/Error\");\r\n            \r\n            app.UseStaticFiles();\r\n            app.UseResponseCaching();\r\n            app.UseMvc(routes =>\r\n            {\r\n                routes.MapRoute(\"default\", \"{*path}\", new { controller = \"Home\", action = \"Index\" });\r\n                routes.MapRoute(\"page\", \"{*path}\");\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n... as soon as I do this in a controller action I get an exception ...\r\n\r\n`HttpContext.Session...`\r\n\r\n... The exception reads ...\r\n\r\n> System.InvalidOperationException: 'Session has not been configured for this application or request.'\r\n\r\n... what have i done wrong?","Url":"https://github.com/aspnet/Home/issues/3187","RelatedDescription":"Closed issue \"Can't seem to get sessions working in aspnet core 2.0\" (#3187)"},{"Id":"329007920","IsPullRequest":false,"CreatedAt":"2018-06-04T17:10:55","Actor":"svallis","Number":"3190","RawContent":null,"Title":"Razor class library referencing another razor class library can't publish","State":"closed","Body":"I'm experiencing issues publishing applications from Visual Studio where one razor class library references another razor class library. Everything works perfectly from the command line, the issue is just with VS, so apologies if this is the wrong place for it.\r\n\r\nI've created a reproduction repo for the issue below:\r\n\r\nhttps://github.com/svallis/PublishTest.git\r\n\r\nThis demonstrates a solution with two class libraries, one of which (`Shared`) references another (`Framework`). Publishing this solution from the command line works exactly as expected:\r\n\r\n```\r\nPS C:\\Development\\PublishTest\\Website> dotnet publish -c Release\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Website\\Website.csproj.\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Framework\\Framework.csproj.\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Shared\\Shared.csproj.\r\n  Framework -> C:\\Development\\PublishTest\\Framework\\bin\\Release\\netcoreapp2.1\\Framework.dll\r\n  Framework -> C:\\Development\\PublishTest\\Framework\\bin\\Release\\netcoreapp2.1\\Framework.Views.dll\r\n  Shared -> C:\\Development\\PublishTest\\Shared\\bin\\Release\\netcoreapp2.1\\Shared.dll\r\n  Shared -> C:\\Development\\PublishTest\\Shared\\bin\\Release\\netcoreapp2.1\\Shared.Views.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\Website.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\Website.Views.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\publish\\\r\n```\r\n\r\nBut publishing from within Visual Studio acts as if `Shared` has no knowledge of `Framework`, despite an explicit project reference:\r\n\r\n```\r\nSharedClass.cs(9,13): Error CS0103: The name 'Framework' does not exist in the current context\r\nSharedClass.cs(11,28): Error CS0246: The type or namespace name 'Framework' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nThe repository has a file system publish profile set up which demonstrates the failure. Building and running the solution works as you would expect it to.\r\n\r\nThis seems to be related to the new `Microsoft.NET.Sdk.Razor` project SDK, as reverting `Shared` and `Framework` to the old `Microsoft.NET.Sdk` SDK resolves the publishing issue, but obviously breaks the embedded razor views. Am I missing something obvious?","Url":"https://github.com/aspnet/Home/issues/3190","RelatedDescription":"Closed issue \"Razor class library referencing another razor class library can't publish\" (#3190)"},{"Id":"329140606","IsPullRequest":false,"CreatedAt":"2018-06-04T17:03:04","Actor":"slubowsky","Number":"3192","RawContent":null,"Title":"JsonPatch including a move doesnt update data as expected","State":"open","Body":"A JsonPatch that includes both a move and updating data fails to update the data as expected - presumably due to the move.\r\nFor example, after executing the following patch:\r\n```\r\n[{\"op\":\"replace\",\"path\":\"/myArray/0/index\",\"value\":1},{\"op\":\"move\",\"from\":\"/myArray/1\",\"path\":\"/myArray/0\"},\r\n{\"op\":\"replace\",\"path\":\"/myArray/1/index\",\"value\":0}]\r\n```\r\nI see only the second value actually being changed. The object that was initially at index 0 remains with its original value","Url":"https://github.com/aspnet/Home/issues/3192","RelatedDescription":"Open issue \"JsonPatch including a move doesnt update data as expected\" (#3192)"},{"Id":"328799565","IsPullRequest":false,"CreatedAt":"2018-06-04T16:10:35","Actor":"NAOnlyOne","Number":"3185","RawContent":null,"Title":"Why IHttpClientFactory pools the HttpMessageHandler instances,but not SocketsHttpHandler instances?","State":"closed","Body":"Hello, I have a question as the title shows.\r\nToday I read the official article 'Announcing .NET Core 2.1' , and I found the following sentences.\r\n_**SocketsHttpHandler is now the default implementation for HttpClient. The biggest win of SocketsHttpHandler is performance. It is a lot faster than the existing implementation. It also eliminates platform-specific dependencies and enables consistent behavior across operating systems.**_\r\n\r\nThat's a good news that SocketsHttpHandler will be the default implementation for HttpClient.\r\nHowever, I also found the following sentences about IHttpClientFactory in the fundamental 'ASP.NET Core 2.1'.\r\n_**Each time CreateClient is called on the IHttpClientFactory, a new instance of a HttpClient is returned. There will be a HttpMessageHandler per named client.**_\r\n\r\nWhy IHttpClientFactory pools the HttpMessageHandler instances,but not SocketsHttpHandler instances?\r\n","Url":"https://github.com/aspnet/Home/issues/3185","RelatedDescription":"Closed issue \"Why IHttpClientFactory pools the HttpMessageHandler instances,but not SocketsHttpHandler instances?\" (#3185)"},{"Id":"329044238","IsPullRequest":false,"CreatedAt":"2018-06-04T12:57:46","Actor":"primenum","Number":"3191","RawContent":null,"Title":"ASP.Net core 2.x IIS Hosted VS Self-hosted performance issues","State":"open","Body":"Hi guys.\r\nWe are developing ASP.NET core application and having performance issues hosting application under IIS. Application hosted under IIS working 14 times **slower** than self-hosted using IIS as reverse proxy with URL rewrite module\r\nAsp.net core 2.1\r\n\r\nLoad test performed with VS 2017\r\nAspNetCoreModule - aspnetcore.dll  file version  -  8.2.1991.0\r\nThe result are: \r\nIIS hosted AVG Response Time:  0.06 sec\r\nSelf-Hosted with IIS as reverse proxy: 0.0042\r\n\r\n## **Code:**\r\n\r\n**Program.cs**\r\n\r\n```\r\npublic class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateWebHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n            .UseKestrel()\r\n            .UseIISIntegration()\r\n            .ConfigureAppConfiguration((hostingContext, config) =>\r\n            {\r\n                ConfigureApplicationSettings(hostingContext, config);\r\n            })\r\n            .ConfigureLogging((context, logging) =>\r\n            {\r\n                //logging controlled from config file\r\n\r\n                logging.AddConfiguration(context.Configuration.GetSection(\"Logging\"));\r\n                logging.SetMinimumLevel(LogLevel.None);\r\n\r\n            })\r\n                .UseStartup<Startup>();\r\n\r\n        private static void ConfigureApplicationSettings(WebHostBuilderContext hostingContext, IConfigurationBuilder config)\r\n        {\r\n            var env = hostingContext.HostingEnvironment;\r\n\r\n            //set base path\r\n            config.SetBasePath(Directory.GetCurrentDirectory());\r\n\r\n            //set configuration files\r\n            config.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n                  .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: false, reloadOnChange: true);\r\n\r\n            config.AddEnvironmentVariables();\r\n            config.Build();\r\n        }\r\n    }\r\n\r\n```\r\n**Startup**\r\n```\r\npublic class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n```\r\n\r\n**API** \r\n```\r\n[Route(\"core/plain\")]\r\n    [ApiController]\r\n    public class PlainController : ControllerBase\r\n    {\r\n        [HttpGet]\r\n        public IActionResult GetServerTime()\r\n        {\r\n            string sHtml = $\"Asp.Net core 2.1,  server time: {DateTime.Now.ToString(\"yyyy-MM-dd, HH:mm:ss\")}\";\r\n            return Ok(sHtml);\r\n        }\r\n    }\r\n\r\n```\r\n\r\nWhat are we doing wrong? \r\nWe found out this issue in 2.0 and waited for 2.1 in hope this well be solved, but....","Url":"https://github.com/aspnet/Home/issues/3191","RelatedDescription":"Open issue \"ASP.Net core 2.x IIS Hosted VS Self-hosted performance issues\" (#3191)"},{"Id":"328915700","IsPullRequest":false,"CreatedAt":"2018-06-04T05:46:03","Actor":"NandhiniKaruppusamy","Number":"3189","RawContent":null,"Title":"Download prerequisite from local path is not working","State":"open","Body":"\r\n![image](https://user-images.githubusercontent.com/39897016/40900162-dcd524e0-67e7-11e8-8c12-e860dbf8c346.png)\r\n\r\n![image](https://user-images.githubusercontent.com/39897016/40900188-fd4b085c-67e7-11e8-86a7-70515d3c06e8.png)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3189","RelatedDescription":"Open issue \"Download prerequisite from local path is not working\" (#3189)"},{"Id":"328878180","IsPullRequest":false,"CreatedAt":"2018-06-04T00:48:24","Actor":"Tratcher","Number":"3188","RawContent":null,"Title":"Kestrel works very slow when it is operating under IIS","State":"open","Body":"_From @san-sei on June 3, 2018 11:6_\n\nWe are facing a strange problem with using Kestrel under IIS in which some operations (e.g. getting access CA- [CertEnrolllib ](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374850(v=vs.85).aspx)) take about 100 sec processing time to be complete.\r\nPlease note that everything works well with using IIS Express and also [http.sys](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-2.1) (instead of IIS) where every operation takes maximum 5 seconds to be complete.\n\n_Copied from original issue: aspnet/KestrelHttpServer#2642_","Url":"https://github.com/aspnet/Home/issues/3188","RelatedDescription":"Open issue \"Kestrel works very slow when it is operating under IIS\" (#3188)"},{"Id":"328813044","IsPullRequest":false,"CreatedAt":"2018-06-03T17:31:26","Actor":"Temoxa","Number":"3186","RawContent":null,"Title":"JwtBearerAuthentication problem with HttpContext.GetTokenAsync  Core2.1","State":"closed","Body":"Hi!\r\n\r\nI upgrade to version 2.1 and have problem with method HttpContext.GetTokenAsync()\r\n\r\nPrev code in version 2.0 work is successful! \r\n\r\n`var task = Task.Run(async () => await context.GetTokenAsync(\"access_token\"));`\r\n `task.Wait();`\r\n `return task.Result;`\r\n\r\nIn version 2.1 now does not work(((( result always in NULL \r\n\r\nHelp me please ^^\r\n\r\n\r\n\r\nP.S. Configure Startup.cs\r\n`public void ConfigureServices(IServiceCollection services)`\r\n   `     {`\r\n            `services.AddAuthentication(options =>`\r\n                `    {`\r\n                        `options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;`\r\n                        `options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;`\r\n                   ` })`\r\n                    `.AddJwtBearer(options =>`\r\n                   ` {`\r\n                        `options.RequireHttpsMetadata = false;`\r\n                        `options.TokenValidationParameters = new TokenValidationParameters`\r\n                       ` {`\r\n                           ` ValidateIssuer = true,`\r\n                            `ValidIssuer = AuthOptions.ISSUER,`\r\n                           ` ValidateAudience = true,`\r\n                            `ValidAudience = AuthOptions.AUDIENCE,`\r\n                            `ValidateLifetime = true,`\r\n                            `IssuerSigningKey = AuthOptions.GetSymmetricSecurityKey(),`\r\n                           ` ValidateIssuerSigningKey = true,`\r\n                        `};`\r\n        `}`\r\n","Url":"https://github.com/aspnet/Home/issues/3186","RelatedDescription":"Closed issue \"JwtBearerAuthentication problem with HttpContext.GetTokenAsync  Core2.1\" (#3186)"},{"Id":"328778370","IsPullRequest":false,"CreatedAt":"2018-06-03T06:15:29","Actor":"francipvb","Number":"3184","RawContent":null,"Title":"ASP.Net Core 2.1 Web project crashes when running in debug mode","State":"closed","Body":"Hello,\r\n\r\nI don't know where I need to post this, but here are my issue.\r\n\r\nSome minutes ago I started playing with aspnetcore 2.1 stable release and I have a big problem: when I run the project in debug mode with visual studio, after the second request to the server it crashes without any information, exception, anithing about the cause of the problem.\r\n\r\nI've tested running inside IIS Express and the console application too and got the same problem.\r\n\r\nI added this line to the end of the Main entrypoint in Program.cs:\r\n\r\n```csharp\r\n            Console.ReadKey();\r\n```\r\n\r\nAnd like with IIS the server closes without any pause nor crash reports.\r\n\r\nNote that this occurs only when running in debug mode in Visual studio 15.7.\r\n\r\nCheers,","Url":"https://github.com/aspnet/Home/issues/3184","RelatedDescription":"Closed issue \"ASP.Net Core 2.1 Web project crashes when running in debug mode\" (#3184)"},{"Id":"328765510","IsPullRequest":false,"CreatedAt":"2018-06-02T19:09:56","Actor":"onionhammer","Number":"3183","RawContent":null,"Title":"UseDefaultFiles does not work in conjunction with ManifestEmbeddedFileProvider","State":"closed","Body":"I have an 'index.html' in my razor class library project, and no wwwroot at all in my aspnet core app which references it;\r\n\r\nInitialization code (snip)\r\n```C#\r\n\r\n            app.UseDefaultFiles();\r\n\r\n            // var staticProvider   = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), \"wwwroot\"));\r\n            var manifestProvider = new ManifestEmbeddedFileProvider(typeof(SetupProvider).Assembly, \"wwwroot\");\r\n            app.UseStaticFiles(new StaticFileOptions\r\n            {\r\n                FileProvider = manifestProvider //new CompositeFileProvider(staticProvider, manifestProvider)\r\n            });\r\n```\r\n\r\nIf I go to `/index.html` it works, but if i go to root `/` I get a 404.","Url":"https://github.com/aspnet/Home/issues/3183","RelatedDescription":"Closed issue \"UseDefaultFiles does not work in conjunction with ManifestEmbeddedFileProvider\" (#3183)"},{"Id":"328718740","IsPullRequest":false,"CreatedAt":"2018-06-02T06:27:35","Actor":"vincentkeizer","Number":"3182","RawContent":null,"Title":"Use the same data protection encryption settings in registry on every server in a webfarm","State":"open","Body":"The out-of-the-box solution for using data protection keys in a webfarm is storing them on a unc path and share this over all servers in the webfarm.\r\n\r\nThis feels like a single point of failure, because all servers use the same share, what if this share goes offline or becomes unavailable for some reason? \r\nI know it is possible to create my own mechanism, but it is about security, so it is a risk. Something you rather not customize.\r\n\r\nIt would be a better solution if all servers do not have to depend on other servers for their keys and just share the same encryption settings in registry.","Url":"https://github.com/aspnet/Home/issues/3182","RelatedDescription":"Open issue \"Use the same data protection encryption settings in registry on every server in a webfarm\" (#3182)"},{"Id":"327054539","IsPullRequest":false,"CreatedAt":"2018-06-01T23:52:45","Actor":"shinpou","Number":"3169","RawContent":null,"Title":"Request.EnableRewind() and UseStatusCodePagesWithReExecute disposes request body early","State":"closed","Body":"# General\r\n\r\n.NET Core 2.0, AspNetCore 2.0.2\r\n\r\n- Enable Request.EnableRewind()\r\n- Configure app.UseStatusCodePagesWithReExecute()\r\n\r\nAdd custom middleware that reads the request.Body stream and logs it into the console.\r\n\r\nWhenever a request gets re-executed (so in cases where a non-ok status code is returned), request.Body will appear as disposed inside the request logging middleware and cause an exception.\r\n\r\nIt would appear that ReExecute disposes the request.Body as a side effect, or the wrong instance of it is passed forward when re-executing.","Url":"https://github.com/aspnet/Home/issues/3169","RelatedDescription":"Closed issue \"Request.EnableRewind() and UseStatusCodePagesWithReExecute disposes request body early\" (#3169)"},{"Id":"328564270","IsPullRequest":false,"CreatedAt":"2018-06-01T22:10:47","Actor":"devbrsa","Number":"3181","RawContent":null,"Title":"Sharing DI Container in WebHost","State":"closed","Body":"ASP.NET Core 2.1 now supports Generic Host, and is there a way to share DI container registered in IWebHostBuilder among GenericHosts/HostBuilders?","Url":"https://github.com/aspnet/Home/issues/3181","RelatedDescription":"Closed issue \"Sharing DI Container in WebHost\" (#3181)"},{"Id":"328539959","IsPullRequest":false,"CreatedAt":"2018-06-01T21:12:40","Actor":"jamieide","Number":"3180","RawContent":null,"Title":"Version conflict with Microsoft.AspNet.WebApi.Client referenced in separate project","State":"closed","Body":"Steps to reproduce:\r\n\r\n- Create an empty solution\r\n- Add an ASP.NET Core 2.1 MVC Project called WebApplication1\r\n- Add a .NET Standard 2.0 class library called ApiClient\r\n- Reference ApiClient from WebApplication1\r\n- Install NuGet package Microsoft.AspNet.WebApi.Client in the ApiClient project\r\n- Build and get error \"NU1107 Version conflict detected for Microsoft.AspNet.WebApi.Client. Reference the package directly from the project to resolve this issue.\"\r\nWebApplication1 -> ApiClient -> Microsoft.AspNet.WebApi.Client (>= 5.2.6)\r\nMicrosoft.AspNetCore.App 2.1.0 -> Microsoft.AspNet.WebApi.Client (= 5.2.4)\r\n\r\nI'm able to work around this by downgrading WebApi.Client to 5.2.4 but that's not a good solution. It's not clear to me why WebApplication1 needs that reference at all or why it requires a specific version. To be honest I don't fully understand how the metadata packages work but my impression was that one of the benefits of the change from .All to .App was to reduce issues with dependencies on specific library versions. ","Url":"https://github.com/aspnet/Home/issues/3180","RelatedDescription":"Closed issue \"Version conflict with Microsoft.AspNet.WebApi.Client referenced in separate project\" (#3180)"},{"Id":"328050095","IsPullRequest":false,"CreatedAt":"2018-06-01T16:19:50","Actor":"k3davis","Number":"3176","RawContent":null,"Title":"ASP.NET Core UseHttpsRedirection() only works locally","State":"closed","Body":"Please forgive/correct if I am posting in the wrong repo. In the end this may be a docs issue?\r\n\r\nI have an existing ASP.NET Core 2.0 project (which sadly must target net461) that I've upgraded simply to ASP.NET Core 2.1. When I add `app.UseHttpsRedirection()` and enable SSL in the project properties, it works perfectly when running locally, but when deployed to an IIS server it has no effect whatsoever.\r\n\r\nWhat could I be overlooking?","Url":"https://github.com/aspnet/Home/issues/3176","RelatedDescription":"Closed issue \"ASP.NET Core UseHttpsRedirection() only works locally\" (#3176)"},{"Id":"327474362","IsPullRequest":false,"CreatedAt":"2018-06-01T13:57:57","Actor":"scottsauber","Number":"3172","RawContent":null,"Title":"Using Microsoft.Extensions.DependencyInjection with ASP.NET 4.x Scoped Services Are Singletons","State":"closed","Body":"Using the code found on this blog post: http://scottdorman.github.io/2016/03/17/integrating-asp.net-core-dependency-injection-in-mvc-4/ results in Scoped Services that are really Singletons, because CreateScope() is never called.\r\n\r\nAre there any examples of using Microsoft.Extensions.DependencyInjection (M.E.DI) with ASP.NET 4?\r\n\r\nThe reason why I want to use M.E.DI instead of SimpleInjector, Autofac, Ninject, etc.  is because we have a customer-facing app that is built on ASP.NET Core and uses Identity.  Then we have an existing \"back-office\" app that already does a bunch of stuff, one of them being manage users for the customer-facing app.\r\n\r\nWe wanted to use M.E.DI so we can share the configuration of things like `UserManager` between the two applications easily.  Also handwiring up all the dependencies that ASP.NET Core Identity has is non-trivial, and want to get the free updates in case new services are required in future updates that `services.AddIdentity` takes care of.\r\n\r\nThanks!","Url":"https://github.com/aspnet/Home/issues/3172","RelatedDescription":"Closed issue \"Using Microsoft.Extensions.DependencyInjection with ASP.NET 4.x Scoped Services Are Singletons\" (#3172)"},{"Id":"328298965","IsPullRequest":false,"CreatedAt":"2018-05-31T21:12:10","Actor":"darewreck54","Number":"3179","RawContent":null,"Title":"Asp.net core bad request headers to long","State":"open","Body":"Hi,\r\n\r\nI'm not sure what repo to post this issue in, so please bear with me.\r\n\r\nAt this time, I have an application that uses openIDConnect to server side authenticate with AzureActiveDirectory.  The application is built onto of Asp.net core 2.  There are times where when you load the page, you experience a \"Bad Request - header to long\" error when authenticating.  I believe this issue is related to the fact that whenever the cookie expires it will append to the existing cookie when it refreshes.  As a result, eventually the request headers will be to big and throw the error.  The only way to recover from it is to clear the cookies.\r\n\r\nIn Asp.net, this problem can be resolved by implementing a middleware where you would clear out the cookie and then re-add it; preventing the append.  However, with asp.net core the interface has changed and the way to do it has changed to.\r\n\r\nI was wondering if there is any guidance on how to address this problem,\r\nThanks,\r\nDerek","Url":"https://github.com/aspnet/Home/issues/3179","RelatedDescription":"Open issue \"Asp.net core bad request headers to long\" (#3179)"},{"Id":"328259484","IsPullRequest":false,"CreatedAt":"2018-05-31T19:03:22","Actor":"fe-c","Number":"3178","RawContent":null,"Title":"Shared namespace in Razor Page broke 'dotnet build' and VS2017","State":"open","Body":"Using this at Razor Page markup **@using Shared.Helpers**\r\nresolves as \"App.Shared.Helpers\" in Visual Studio and as \"App.Pages.Shared.Helpers\" with \"dotnet build\".\r\nThis causes such effects:\r\n(some of them I can reproduce only on real project)\r\n1. Sometimes VS can build and run application, sometimes not.\r\n2. Sometimes VS shows error, sometimes not.\r\n3. Sometimes VS can run app with showing error, sometimes it can't run without error.\r\n4. Sometimes VS can build project, but can not launch it.\r\n5. \"dotnet build\" always show error.\r\n\r\nError is \"The type or namespace name 'Helpers' does not exist in the namespace 'App.Pages.Shared' \"\r\nMay be I use wrong using directive and it's VS issue.\r\n\r\n.Net Core SDK: dotnet-sdk-2.1.300-win-x64\r\nVisualStudio 15.7.2\r\n[TestApp.zip](https://github.com/aspnet/Home/files/2059693/TestApp.zip)","Url":"https://github.com/aspnet/Home/issues/3178","RelatedDescription":"Open issue \"Shared namespace in Razor Page broke 'dotnet build' and VS2017\" (#3178)"},{"Id":"328155252","IsPullRequest":false,"CreatedAt":"2018-05-31T14:11:23","Actor":"aymericb","Number":"3177","RawContent":null,"Title":"Thread safety when using IExceptionHandlerFeature?","State":"open","Body":"I have code that use ASP.NET Core to implement a JSON API. In order to deal with errors it does something similar to this:\r\n\r\n```\r\napp.UseExceptionHandler(action =>\r\n{\r\n    action.Run(async context =>\r\n    {\r\n        // Apply CORS to error response - workaround for https://github.com/aspnet/CORS/issues/90\r\n        var policy = await app.ApplicationServices.GetService<ICorsPolicyProvider>().GetPolicyAsync(context, ALLOW_ALL);\r\n        var result = cors.EvaluatePolicy(context, policy);\r\n        cors.ApplyResult(result, context.Response);\r\n\r\n        // Get exception and log it\r\n        var exception = context.Features.Get<IExceptionHandlerFeature>()?.Error;\r\n        await LogException(exception, context.Request);\r\n\r\n        // Return API JSON error to the client\r\n        var error = (exception as ApiException)?.Error ?? Models.Error.Unknown;\r\n        await WriteErrorResponse(context, error);\r\n    });\r\n});\r\n```\r\n\r\nI noticed recently that under some circumstances the `exception` objects that were logged were identical. This occurred when the server was under load and similar exceptions were generated a few ms apart, so it made me think it was a concurrency issue.\r\n\r\nAfter some digging, I believe this problem occurs because access to the `IFeatureCollection` is not thread safe (see [ApplicationInsights-aspnetcore #373](https://github.com/Microsoft/ApplicationInsights-aspnetcore/issues/373)), and because there is an `await` before retrieving the exception from `IFeatureCollection`.\r\n\r\nMy understanding of concurrency bug is as follow:\r\n\r\n- The API throw an exception in on of the controllers\r\n- The `ExceptionHandlerMiddleware` used by `UseExceptionHandler()` catches the exception and sets it on the context (`context.Features.Set<IExceptionHandlerFeature>(exceptionHandlerFeature)`)\r\n- Because of that CORS workaround, there is an `await` executed next. I believe this means the code that follows could potentially be executed in a different thread.\r\n- In the next line I access the FeatureCollection via `context.Features.Get<IExceptionHandlerFeature>()?.Error`\r\n- Because the `IFeatureCollection` is not thread safe, and it _reads_ the `IExceptionHandlerFeature` in a different thread from where it was _written_, I end up with corrupted data (i.e. the exception object from another `HttpContext`)\r\n\r\nDoes that make sense? Or am I just missing something obvious here? Unfortunately, I don't have definite proof. I was not able to reproduce the problem on a test server.\r\n\r\nBut if I am right, the whole `IExceptionHandlerFeature` being set inside the `ExceptionHandlerMiddleware` is kind of misleading. It would only safe to set features early on when the `HttpContext` is being initialized, and not in the way it is done for `IExceptionHandlerFeature`. It looks like the `ExceptionHandlerMiddleware` should be modified. Maybe it would be better if the `Exception` object was given as a _parameter_ of the `ExceptionHandler` callback?\r\n\r\nI decided to write my own `ErrorMiddleware` which is similar to `ExceptionHandlerMiddleware` but avoids using a `Dictionary` to capture the exception. I suppose I could have simply reordered the code and ensured the `context.Features.Get<IExceptionHandlerFeature>()` was executed immediately, and not after the CORS workaround.\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3177","RelatedDescription":"Open issue \"Thread safety when using IExceptionHandlerFeature?\" (#3177)"},{"Id":"328020412","IsPullRequest":false,"CreatedAt":"2018-05-31T07:14:50","Actor":"andrew-vandenbrink","Number":"3175","RawContent":null,"Title":"Serious slow asp.net web api","State":"open","Body":"https://github.com/aspnet/AspNetCoreModule/issues/87\r\n\r\nRunning load test on my localhost with visual studio, debug or release barely have any difference\r\n\r\nApi which barely do anything, from the template\r\n/api/values\r\n\r\n![image](https://user-images.githubusercontent.com/12871379/40767089-c0821f70-64b1-11e8-8c44-8ebced92233e.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12871379/40766936-5bead48a-64b1-11e8-9fff-5d3e17ec1e74.png)\r\n\r\nIn azure app service S1 Small, only 150-200 requests per sec?\r\n\r\n![image](https://user-images.githubusercontent.com/12871379/40767299-6c2cc884-64b2-11e8-971a-4db60a053559.png)\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3175","RelatedDescription":"Open issue \"Serious slow asp.net web api\" (#3175)"},{"Id":"327871540","IsPullRequest":false,"CreatedAt":"2018-05-30T21:50:20","Actor":"fragilerus","Number":"3174","RawContent":null,"Title":"Remove UseExceptionHandler() extension","State":"closed","Body":"The ExcptionHanlerMiddleware no longer supports empty options. Either ExceptionHandler or ExceptionHandlingPath has to be set. Therefore, the ExceptionHandlerExtensions.UseExceptionHandler() overload that takes no arguments can't be used. Either remove this or set a default for the options.\r\n","Url":"https://github.com/aspnet/Home/issues/3174","RelatedDescription":"Closed issue \"Remove UseExceptionHandler() extension\" (#3174)"},{"Id":"327519423","IsPullRequest":false,"CreatedAt":"2018-05-29T23:16:09","Actor":"ObsidianMinor","Number":"3173","RawContent":null,"Title":"Generic pipeline","State":"open","Body":"Edit: This proposal has been heavily reduced, and removed the abstractions surrounding the creation of data, focusing more on the pipeline itself.\r\n\r\n## Generic pipeline\r\n\r\nWe've decoupled the HTTP pipeline from the host with the generic host, but now we could consider decoupling the \"HTTP\" from the pipeline itself.\r\n\r\n### Introducing Microsoft.Extensions.ApplicationPipeline\r\n\r\nThe generic pipeline would allow consumers to easily create pipelines with custom contexts for non-HTTP workloads. For example, clients and non-HTTP servers such as TCP servers with custom messages or language servers reading and writing to standard IO. This interface along with a default implementation would allow developers to easily build lightweight, modular pipelines for processing data.\r\n\r\nIn my experience, many clients / servers are based on a handler / module model like that of old ASP.NET. The benefits the HTTP pipeline has provided to ASP.NET can be applied to these other clients and servers. Things like pipeline branching, the simplification that everything is middleware, along with the ability to short-circuit processing are useful in many places besides HTTP. And with a generic pipeline it all happens with one library that's easy to use, understand, and extend, especially if you've ever used ASP.NET Core already\r\n\r\n#### One interface: IApplicationBuilder\r\n\r\nThis interface would exist in the abstractions lib. A default implementation would be provided in the implementation lib.\r\n\r\n```cs\r\npublic delegate Task ApplicationDelegate<TContext>(TContext context);\r\n\r\npublic interface IApplicationBuilder<TContext>\r\n{\r\n    IServiceProvider ApplicationServices { get; set; }\r\n\r\n    IDictionary<string, object> Properties { get; }\r\n\r\n    ApplicationDelegate<TContext> Build();\r\n\r\n    IApplicationBuilder<TContext> New();\r\n\r\n    IApplicationBuilder<TContext> Use(Func<ApplicationDelegate<TContext>, ApplicationDelegate<TContext>> middleware);\r\n}\r\n```\r\n\r\n`IApplicationBuilder` is the `IApplicationBuilder` from ASP.NET Core, but generic as to allow custom contexts. To extend it, extension methods should use the proper context being used such as `HttpContext`.\r\n\r\nFor example, UseExceptionHandler would be modified to look like:\r\n\r\n```cs\r\npublic static IApplicationBuilder<HttpContext> UseExceptionHandler(this IApplicationBuilder<HttpContext> app);\r\n```","Url":"https://github.com/aspnet/Home/issues/3173","RelatedDescription":"Open issue \"Generic pipeline\" (#3173)"},{"Id":"327354618","IsPullRequest":false,"CreatedAt":"2018-05-29T14:47:38","Actor":"JulijaRamoskiene","Number":"3171","RawContent":null,"Title":"Add a possibility to stop request (short-circuiting pipeline) when CORS are not allowed","State":"open","Body":"Update CORS middleware to support configuration to terminate request when CORS are not allowed for given request, e.g. Origin is not allowed. \r\nIt could look something like this:\r\napp.UseCors(builder => builder\r\n                .WithOrigin(\"http://some.allowed.origin\")\r\n                .AllowAnyHeader()\r\n                .AllowAnyOrigin()\r\n              **.TerminateIfNotAllowed ()**);\r\n\r\nCurrently, request will be passed to next middleware even if origin is not allowed. ","Url":"https://github.com/aspnet/Home/issues/3171","RelatedDescription":"Open issue \"Add a possibility to stop request (short-circuiting pipeline) when CORS are not allowed\" (#3171)"},{"Id":"327246771","IsPullRequest":false,"CreatedAt":"2018-05-29T09:48:37","Actor":"InnovistaLucia","Number":"3170","RawContent":null,"Title":"Websocket through proxy not working (2.1.0 rc 1 and .NET Core 2.1)","State":"open","Body":"We are using self-hosted services with recent .NET Core 2.1 RC and the corresponding aspnetcore components. These microservices should run on several internal ports and the only public access should be via a proxy software (former node.js now .NET Core 2.1 also). We try to use the Microsoft.AspNetCore.Proxy Component [https://github.com/aspnet/Proxy](url) V 0.2.\r\nThe proxy should also forward websocket requests but the websocket connection Handshake fails when using the proxy.\r\n\r\n```C#\r\npublic async Task InitWSAsync(HttpContext context, WebSocket pSocket)\r\n{\r\n                var buffer = new byte[1024 * 8];\r\n                WebSocketReceiveResult result = await pSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\r\n                string lMsgString = System.Text.Encoding.UTF8.GetString(buffer, 0, result.Count);...\r\n```\r\nThe code stops on the ReceiveAsync line and does not continue properly. Firefox shows a handshake failed after a timeout.\r\nWhen accessing the microservice directly the runtime continues and receives a message String correctly.\r\n\r\nI've attached a Test-Project with a simple Proxy App and a Service App where you can find the whole configuration of the webhost, kestrel etc..\r\nTo test the faulty Proxy access run both projects and open \"http://localhost:8080/websocket.html\" in the browser. To test the successfull direct Service access run the Service App only and open \"http://localhost:1800/websocket2.html\".\r\n[NETCoreProxyTest.zip](https://github.com/aspnet/Home/files/2047624/NETCoreProxyTest.zip)\r\n","Url":"https://github.com/aspnet/Home/issues/3170","RelatedDescription":"Open issue \"Websocket through proxy not working (2.1.0 rc 1 and .NET Core 2.1)\" (#3170)"},{"Id":"326966073","IsPullRequest":false,"CreatedAt":"2018-05-28T11:14:07","Actor":"Udesh90","Number":"3168","RawContent":null,"Title":"context.Database.EnsureCreated() - Doesn't create __EFMigrationsHistory table","State":"closed","Body":"When I used context.Database.EnsureCreated() method to create my database, it doesn't create __EFMigrationsHistory in my DB. So next time I run my DB updates EF core give me a tables are already exist. But I use to create my DB using \"update-databse\" in Package manger  console it will create __EFMigrationsHistory table & my DB updates will run smoothly. Why their is a conflict with context.Database.EnsureCreated() & \"update-databse\" ? \r\n\r\nSorry for the inconveniences, or am in a wrong path. ","Url":"https://github.com/aspnet/Home/issues/3168","RelatedDescription":"Closed issue \"context.Database.EnsureCreated() - Doesn't create __EFMigrationsHistory table\" (#3168)"},{"Id":"326067233","IsPullRequest":false,"CreatedAt":"2018-05-24T16:22:00","Actor":"FasettoAndrew","Number":"3166","RawContent":null,"Title":"HTTP POST Request loosing cookies when sent from Linux","State":"closed","Body":"We have two ASP NET Core websites running in a Linux environment which communicate using HTTP requests.\r\n\r\nOn one server we are manually creating the new HTTP request and adding a provided cookie collection to the request like so:\r\n\r\n`CookieCollection cookies` is passed to the method\r\n\r\n```\r\n// Create the request\r\nvar request = WebRequest.CreateHttp(OtherServerUrl);\r\nrequest.Method = \"POST\";\r\nrequest.ContentType = \"application/json;charset=UTF-8\";\r\n\r\n// Add cookies if we have specified.\r\nif (cookies != null)\r\n{\r\n    // Create new cookie container if one does not exist.\r\n    if (request.CookieContainer == null)\r\n    request.CookieContainer = new CookieContainer();\r\n\r\n    // Add our cookies to the container.\r\n    request.CookieContainer.Add(cookies);\r\n}\r\n\r\nif (content != null)\r\n{\r\n    // Serialize the model\r\n    var JSONBody = JsonConvert.SerializeObject(content);\r\n\r\n    // Write the json into the request stream\r\n    using (var requestStream = await request.GetRequestStreamAsync())\r\n    using (var sw = new StreamWriter(requestStream))\r\n        await sw.WriteAsync(JSONBody);\r\n}\r\n\r\n// Get the request response as a HttpWebResponse\r\nvar response = (await request.GetResponseAsync()) as HttpWebResponse;\r\n.....\r\n```\r\n\r\nIn our use case, currently only a single cookie is being added, but we can see this if we output the request's cookie container; the cookie is in the request before it is sent. But when the request reaches the endpoint on the other server, the cookie container in the request contains 0 cookies.\r\n\r\nThe exact same code runs fine on Windows with the cookies being passed correctly, it only appears to occur on Linux.\r\n","Url":"https://github.com/aspnet/Home/issues/3166","RelatedDescription":"Closed issue \"HTTP POST Request loosing cookies when sent from Linux\" (#3166)"},{"Id":"326180702","IsPullRequest":false,"CreatedAt":"2018-05-24T15:42:52","Actor":"AdamRiddick","Number":"3167","RawContent":null,"Title":".Net core 2.0 runs using dotnet command, but not through IIS","State":"open","Body":"Hi,\r\n\r\nI'm looking for more details debugging steps for the following issue, as I'm unable to find them;\r\n\r\n**An error occurred while starting the application.\r\n.NET Core 4.6.26328.01 X64 v4.0.0.0    |   Microsoft.AspNetCore.Hosting version 2.0.1-rtm-125    |    Microsoft Windows 10.0.14393    |   Need help?**\r\n\r\nI'm able to run the application in question using `dotnet my.project.dll` and I don't get any errors;\r\n\r\nHosting environment: Production\r\nContent root path: C:\\MyProject\\\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\n\r\nand I can then access it fine on http://localhost:5000, but as soon as I attempt through IIS it fails.\r\n\r\nI've enabled stdout logging (and created the relevant folder), but nothing is created in the logs. We do use serilog from the application, and can see the request starting but get no further information;\r\n\r\nRequest starting HTTP/1.1 GET http://mywebsite.com 0\r\nFrom the source:  SourceContext Microsoft.AspNetCore.Hosting.Internal.WebHost\r\n\r\nThere is nothing in any IIS logs, event viewer and nothing appears in failed request tracing ... The application pool is configured correctly (Integrated, No managed code) and uses an application pool identity, which has the correct permissions to the folder in question.\r\n\r\nIs there any documentation I've missed on debugging the error where the application runs fine through the `dotnet` command but not through IIS, when no information is logged ?\r\n\r\nThanks,","Url":"https://github.com/aspnet/Home/issues/3167","RelatedDescription":"Open issue \".Net core 2.0 runs using dotnet command, but not through IIS\" (#3167)"},{"Id":"325883439","IsPullRequest":false,"CreatedAt":"2018-05-23T21:40:16","Actor":"mkArtakMSFT","Number":"3165","RawContent":null,"Title":"Default values for nullable enums are not calculated correctly","State":"open","Body":"_From @JanEggers on April 20, 2018 6:54_\n\nConsider the following code:\r\n\r\n```C#\r\npublic IActionResult Action(DayOfWeek? day = DayOfWeek.Friday) => null;\r\n```\r\n\r\nWhen the parameter `day` does not get model bound either because no value was specified or if the value on the wire cannot be bound to the enum, executing the action results in an `InvalidCastException`. The issue stems from `ParameterInfo.DefaultValue` returning the numeric value of the default value (i,e, `DayOfWeek.Friday`). We should address this in [`ParameterDefaultValue`](https://github.com/aspnet/DependencyInjection/blob/dev/shared/Microsoft.Extensions.ParameterDefaultValue.Sources/ParameterDefaultValue.cs#L9) to special case default values for nullable enums. Perhaps other nullable types are similarly affected by the behavior of `ParameterInfo.DefaultValue`.\r\n\r\n-----------------------------------------\r\n### Original issue\r\n\r\nim getting the following exception in production:\r\n\r\nSystem.InvalidCastException: Specified cast is not valid.\r\nat lambda_method(Closure , Object , Object[] )\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)\r\n at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.SyncActionResultExecutor.Execute(ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\r\nis there any way to figure out what cast is not valid/ what method should have be called/ what is the request that is processed? A little more context would be nice! \r\n\r\n\r\n\r\n\n\n_Copied from original issue: aspnet/Mvc#7692_","Url":"https://github.com/aspnet/Home/issues/3165","RelatedDescription":"Open issue \"Default values for nullable enums are not calculated correctly\" (#3165)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"328919006","IsPullRequest":false,"CreatedAt":"2018-06-04T21:06:42","Actor":"pazcaldj","Number":"2426","RawContent":null,"Title":"SignalR Webhost with ASP.NET Core 2.1 and UWP app as Client returns ' 405 Method not allowed'","State":"closed","Body":"I am struggling with this for a while now and I can't get it to work. I have 2 applications, both running on a Raspberry Pi 2 with Win IoT:\r\n\r\n- ASP.NET Core 2.1 Web Api - Within this WebApi I am running a SignalR Host (published as `win10-arm`). \r\n\r\n- Universal Windows App - This app will be a client which should communicate with the host and all other clients (published as ARM).\r\n\r\nWhen I deploy the UWP app and I try to run it, it crashes in the `hubConn.Start(...)` method of the HubConnection and returns the error:\r\n\r\n> **HttpClientException**: StatusCode: 405, ReasonPhrase: 'Method Not\r\n> Allowed', Version: 1.1, Content: System.Net.Http.StreamContent,\r\n> Headers: {   Server: Kestrel   Date: Sat, 02 Jun 2018 17:04:15 GMT  \r\n> Content-Length: 0   Content-Type: text/plain }\r\n\r\nThe testconsole and UWP are both using the `Microsoft.AspNet.SignalR.Client` (2.2.3) nuget package (which is the latest). The ASP.NET Core 2.1 Web Api is using the `Microsoft.AspNetCore.App` SDK (2.1.0).\r\n\r\nBy reading this post https://stackoverflow.com/questions/49152486/signalr-version-compatability-statuscode-405-method-not-allowed/49153217#49153217 I am familiar with the fact that SignalR is not backwards compatible for both host as client. But I would expect that as I am using the latest nuget packages and versions which are available on nuget everything would work.\r\n\r\nAlso, I am aware that ASP.NET Core 2.1 package and the SignalR Client package are 2 different packages, but I cannot add the nuget package `Microsoft.AspNetCore.App` to the UWP project as it is not compatible with any `win10-arm` platform.\r\n\r\nIf I want to work with ASP.NET Core 2.1 SignalR, which nuget package should I include in my Test Console app, as well in my UWP project?\r\n\r\n\r\nHere some of the code; all projects are completely defaults via File - New project, plus the code below.\r\n\r\n**ASP.NET Core 2.1 Web Api**\r\n\r\nStartup.cs\r\n\r\n    public class Startup\r\n    {\r\n        ...\r\n        \r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            ...\r\n\r\n            services.AddMvc();\r\n            services.AddSignalR();\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n \r\n            ...\r\n            \r\n            app.UseSignalR(route =>\r\n            {\r\n                route.MapHub<HomeAutomationHost>(\"/HomeAutomationHost\");\r\n            });\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n\r\n\r\n\r\n**Universal Windows App**\r\n\r\nMainPage.xaml.cs\r\n\r\n    public class MainPage \r\n    {\r\n\t    ...\r\n\t\r\n\t    public async Task DoConnect()\r\n\t    {\r\n                var hubConn = new HubConnection(\"http://192.168.2.49:5000/HomeAutomationHost\", false);\r\n                hubConn.EnsureReconnecting();\r\n\r\n                var signalRHost = hubConn.CreateHubProxy(\"HomeAutomationHost\");\r\n\r\n                await hubConn.Start(new WebSocketTransport());\r\n\t    }\r\n    }\r\n\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2426","RelatedDescription":"Closed issue \"SignalR Webhost with ASP.NET Core 2.1 and UWP app as Client returns ' 405 Method not allowed'\" (#2426)"},{"Id":"329153051","IsPullRequest":false,"CreatedAt":"2018-06-04T17:44:01","Actor":"DavePilks","Number":"2428","RawContent":null,"Title":"Cannot Load Dependencies from Nuget Package","State":"open","Body":"I am trying to use the AspNetCore Nuget package in a Xamarin.Forms app. But when it tries to load the ViewModel that has the reference to the .dll, I get the following message.\r\n\r\n> Could not load file or assembly 'Microsoft.AspNetCore.SignalR.Client.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' or one of its dependencies. assembly:Microsoft.AspNetCore.SignalR.Client.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 type: member:(null) signature:\r\n\r\n* Versions of Client-Side NuGet/NPM Packages: 1.0.0\r\n* Are you using the C# client or the JavaScript client: C#\r\n* The Operating System on the Client (Windows/Linux/macOS): Xamarin.Forms via Visual Studio for MacOS\r\n\r\nThe project that I am adding the Nuget package to is a .Net Standard 2.0 project.","Url":"https://github.com/aspnet/SignalR/issues/2428","RelatedDescription":"Open issue \"Cannot Load Dependencies from Nuget Package\" (#2428)"},{"Id":"328675168","IsPullRequest":true,"CreatedAt":"2018-06-04T17:33:13","Actor":"BrennanConroy","Number":"2418","RawContent":null,"Title":"Add Redis support to E2E benchmarks","State":"closed","Body":"Part of https://github.com/aspnet/SignalR/issues/1804\r\nThe rest of the work will be infrastructure etc.","Url":"https://github.com/aspnet/SignalR/pull/2418","RelatedDescription":"Closed or merged PR \"Add Redis support to E2E benchmarks\" (#2418)"},{"Id":"329143414","IsPullRequest":false,"CreatedAt":"2018-06-04T17:12:35","Actor":"anurse","Number":"2427","RawContent":null,"Title":"Use Karma to run JavaScript functional tests in browsers","State":"open","Body":"* [ ] Expand on this (@anurse)","Url":"https://github.com/aspnet/SignalR/issues/2427","RelatedDescription":"Open issue \"Use Karma to run JavaScript functional tests in browsers\" (#2427)"},{"Id":"328259234","IsPullRequest":false,"CreatedAt":"2018-06-04T17:12:03","Actor":"anurse","Number":"2415","RawContent":null,"Title":"Make the functional tests self-reporting","State":"closed","Body":"The functional tests should be able to \"self-report\" their results. Right now, they report status to the browser page. Instead, when you run the tests, they should capture all the test results (failures, logs, etc.) and upload them back to the server via AJAX along with some environment data (see below). The server can then save this data to a database and/or ping a GitHub checks API or other notification service with the results\r\n\r\nEnvironment data we should capture:\r\n* User Agent (to identify the browser/device)\r\n* Time of run\r\n* Commit Hash of functional tests/client in use\r\n\r\nWe'll need to add a [Jasmine reporter](https://jasmine.github.io/2.5/custom_reporter.html) and have that use AJAX to post results back to the server.\r\n\r\nAlso, we'll need to make sure this is \"secure\". We should **only** record results to the server if the user triggering the test run is authorized. We can do that passing some kind of encrypted token in the URL. BrowserStack or whichever client is hitting the test app can provide a valid token.","Url":"https://github.com/aspnet/SignalR/issues/2415","RelatedDescription":"Closed issue \"Make the functional tests self-reporting\" (#2415)"},{"Id":"328260021","IsPullRequest":false,"CreatedAt":"2018-06-04T17:12:01","Actor":"anurse","Number":"2416","RawContent":null,"Title":"Write scripts to use BrowserStack/SauceLabs to hit the functional tests app","State":"closed","Body":"We can do this in parallel with #2415 \r\n\r\nWe should write the scripts we need to use BrowserStack/SauceLabs/etc. to hit the functional tests app on a particular URL. Once we have #2415, the tests will all run and results will be recorded.","Url":"https://github.com/aspnet/SignalR/issues/2416","RelatedDescription":"Closed issue \"Write scripts to use BrowserStack/SauceLabs to hit the functional tests app\" (#2416)"},{"Id":"328874383","IsPullRequest":false,"CreatedAt":"2018-06-04T00:01:20","Actor":"mhosman","Number":"2425","RawContent":null,"Title":"Send AccessToken via JS (Angular) Client for [Authorize] protected hub","State":"open","Body":"There is no good documentation about this. From my client (in Angular), all the requests to the API (in .NET Core) are done with header \"Authorization\" : \"JWT xxxxxxxxxxxxxxxxxxxxxx\".\r\n\r\nHow can I pass this JWT from JS to connect to a HUB with [Authorize] tag?\r\n","Url":"https://github.com/aspnet/SignalR/issues/2425","RelatedDescription":"Open issue \"Send AccessToken via JS (Angular) Client for [Authorize] protected hub\" (#2425)"},{"Id":"328868564","IsPullRequest":false,"CreatedAt":"2018-06-03T22:35:59","Actor":"ThadHouse","Number":"2424","RawContent":null,"Title":"Calling Clients.All.SendAsync from a secondary thread always throws ObjectDisposedException","State":"open","Body":"I am working on adding SignalR to a project of mine. I have a callback thread in my library, and I want to send that callback over SignalR whenever I receive one. However, I always seem to be getting `ObjectDisposedException` while sending from the callback thread, even if I can guarantee the client is still connected. Do I need to post the SendAsync to the Hub context, and if so how, because I can't find the synchronization context for the hub.\r\n\r\nUsing 1.0.0 of both client and C# server.\r\n\r\nClient Code (Console App)\r\n```\r\n        static async Task Main(string[] args)\r\n        {\r\n\r\n            HubConnection connection = new HubConnectionBuilder().\r\n                WithUrl(\"https://localhost:44311/nthub\").Build();\r\n\r\n            connection.On<int>(\"HelloWorld\", (b) =>\r\n            {\r\n                ; // Never gets hit\r\n            });\r\n\r\n            await connection.StartAsync();\r\n\r\n            while (true)\r\n            {\r\n\r\n                await Task.Delay(1000);\r\n            }\r\n        }\r\n```\r\n\r\nServer Hub Code (ASP.NET Core 2.1)\r\n```\r\npublic class NTHub : Hub\r\n    {\r\n        private volatile bool active = true;\r\n        Thread t;\r\n\r\n        public override Task OnConnectedAsync()\r\n        {\r\n           // This will normally enable my callback in my library\r\n           // But minimal test is just a thread. \r\n            t = new Thread(() =>\r\n            {\r\n                while (active)\r\n                {\r\n                    Thread.Sleep(1000);\r\n                    this.Clients.All.SendAsync(\"HelloWorld\", 55).Wait(); // Throws ObjectDisposedException\r\n                }\r\n            });\r\n            t.Start();\r\n            return base.OnConnectedAsync();\r\n        }\r\n\r\n        public override Task OnDisconnectedAsync(Exception exception)\r\n        {\r\n            // This would normally unregister my callbacks.\r\n            active = false;\r\n            t.Join();\r\n            return base.OnDisconnectedAsync(exception);\r\n        }\r\n    }\r\n```\r\nI understand the thread safety issues of the server side, but thats just the minimal example. My actual code handles multiple clients properly.","Url":"https://github.com/aspnet/SignalR/issues/2424","RelatedDescription":"Open issue \"Calling Clients.All.SendAsync from a secondary thread always throws ObjectDisposedException\" (#2424)"},{"Id":"328859330","IsPullRequest":false,"CreatedAt":"2018-06-03T20:27:50","Actor":"samcov","Number":"2423","RawContent":null,"Title":"Breaking Changes...","State":"open","Body":"Upgrading to 2.1 had a lot of breaking changes, and most have been resolved. However, there are two that I'm not sure how to resolve, since the old way has been removed(see code at end)\r\n\r\n1. While I don't seem to have an issue talking to the js client, in the C# client, I'm not sure how to force Pascal Case.\r\n\r\n2. How do I specify Websockets or MessagePack as the transport?\r\n\r\n.**WithHubProtocol**(new JsonHubProtocol(Options.Create(new JsonHubProtocolOptions()\r\n{\r\n    PayloadSerializerSettings = new JsonSerializerSettings()\r\n    {\r\n\t// Configure as you'd like here\r\n    }\r\n})))\r\n.**WithTransport**(TransportType.WebSockets)","Url":"https://github.com/aspnet/SignalR/issues/2423","RelatedDescription":"Open issue \"Breaking Changes...\" (#2423)"},{"Id":"328856096","IsPullRequest":false,"CreatedAt":"2018-06-03T19:42:59","Actor":"kiko35","Number":"2422","RawContent":null,"Title":"JavaScript/Angular: Failed to complete negotiation with the server","State":"open","Body":"Hello,\r\n\r\nI'm trying to translate this back-end code using the signalr-client lib: https://github.com/Bittrex/beta/blob/master/samples/WebsocketSample.js to a code using yours and a browser. \r\n\r\nHere is the code:\r\n\r\n     this.connection = new HubConnectionBuilder()\r\n      .configureLogging(LogLevel.Trace)\r\n      .withUrl(\"wss://beta.bittrex.com/signalr\")\r\n      .build();\r\n\r\n    this.connection.on(\"send\", data => {\r\n      console.log(data);\r\n    });\r\n\r\n    this.connection.onclose(e => {\r\n      console.log(\"Connection closed!\", e);\r\n    });\r\n\r\n    console.log(\"Trying to connect to hub!\");\r\n\r\n    this.connection\r\n      .start()\r\n      .then(() => {\r\n        console.log(\"Connection started!\");\r\n        //this.connection.send('send', 'csad');\r\n      })\r\n      .catch(err => console.log(\"Error\", err));\r\n\r\nI get some errors:\r\n\r\nError: Failed to complete negotiation with the server: Error\r\n\r\nError: Failed to start the connection: Error\r\n\r\nError while establishing connection :( Object { __zone_symbol__error: Error, fileName: Getter & Setter, lineNumber: Getter & Setter, columnNumber: Getter & Setter, message: Getter & Setter, name: Getter & Setter, stack: Getter & Setter, originalStack: Getter & Setter, zoneAwareStack: Getter & Setter, toString: value(), ‚Ä¶ } app.component.ts:48:20\r\n\r\nDo you have any idea?","Url":"https://github.com/aspnet/SignalR/issues/2422","RelatedDescription":"Open issue \"JavaScript/Angular: Failed to complete negotiation with the server\" (#2422)"},{"Id":"328801015","IsPullRequest":false,"CreatedAt":"2018-06-03T05:31:57","Actor":"dvdmrk","Number":"2421","RawContent":null,"Title":"Failed to load resource: net::ERR_CONNECTION_REFUSED","State":"open","Body":"I've tried literally everything, I've rearranged my startup file added cors policy, seriously in a bind.\r\nThese are the errors I'm getting based off of an angular build using the latest vs code, node, core, and signalr. I've built a pretty generic chat application, and I'm not sure where to go from here.\r\n\r\nAngular is running in the development mode. Call enableProdMode() to enable the production mode.\r\n/home/echo/negotiate:1 Failed to load resource: net::ERR_CONNECTION_REFUSED\r\nUtils.js:151 Warning: Error from HTTP request. 0:\r\nConsoleLogger.log @ Utils.js:151\r\nUtils.js:148 Error: Failed to complete negotiation with the server: Error\r\nConsoleLogger.log @ Utils.js:148\r\nUtils.js:148 Error: Failed to start the connection: Error\r\nConsoleLogger.log @ Utils.js:148\r\ncore.js:1448 ERROR Error: Uncaught (in promise): Error\r\nError\r\nat new HttpError (Errors.js:16)\r\nat XMLHttpRequest.xhr.onerror [as __zone_symbol__ON_PROPERTYerror] (HttpClient.js:80)\r\nat XMLHttpRequest.wrapFn (zone.js:1166)\r\nat ZoneDelegate.invokeTask (zone.js:421)\r\nat Object.onInvokeTask (core.js:4736)\r\nat ZoneDelegate.invokeTask (zone.js:420)\r\nat Zone.runTask (zone.js:188)\r\nat ZoneTask.invokeTask [as invoke] (zone.js:496)\r\nat invokeTask (zone.js:1517)\r\nat XMLHttpRequest.globalZoneAwareCallback (zone.js:1543)\r\nat new HttpError (Errors.js:16)\r\nat XMLHttpRequest.xhr.onerror [as __zone_symbol__ON_PROPERTYerror] (HttpClient.js:80)\r\nat XMLHttpRequest.wrapFn (zone.js:1166)\r\nat ZoneDelegate.invokeTask (zone.js:421)\r\nat Object.onInvokeTask (core.js:4736)\r\nat ZoneDelegate.invokeTask (zone.js:420)\r\nat Zone.runTask (zone.js:188)\r\nat ZoneTask.invokeTask [as invoke] (zone.js:496)\r\nat invokeTask (zone.js:1517)\r\nat XMLHttpRequest.globalZoneAwareCallback (zone.js:1543)\r\nat resolvePromise (zone.js:809)\r\nat eval (zone.js:728)\r\nat rejected (tslib.es6.js:63)\r\nat ZoneDelegate.invoke (zone.js:388)\r\nat Object.onInvoke (core.js:4745)\r\nat ZoneDelegate.invoke (zone.js:387)\r\nat Zone.run (zone.js:138)\r\nat eval (zone.js:858)\r\nat ZoneDelegate.invokeTask (zone.js:421)\r\nat Object.onInvokeTask (core.js:4736)","Url":"https://github.com/aspnet/SignalR/issues/2421","RelatedDescription":"Open issue \"Failed to load resource: net::ERR_CONNECTION_REFUSED\" (#2421)"},{"Id":"328750163","IsPullRequest":false,"CreatedAt":"2018-06-02T15:22:45","Actor":"LGinC","Number":"2420","RawContent":null,"Title":"Add jwt auth in SignalR query string Error","State":"closed","Body":"![image](https://user-images.githubusercontent.com/15363011/40847940-4bc760f6-65f0-11e8-8fd4-867d5b2780a1.png)\r\nI just add param authenticationScheme and can not start up my application.\r\nlog:\r\n![image](https://user-images.githubusercontent.com/15363011/40848007-83249942-65f0-11e8-8f7b-bc7ec523b990.png)\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2420","RelatedDescription":"Closed issue \"Add jwt auth in SignalR query string Error\" (#2420)"},{"Id":"328736943","IsPullRequest":false,"CreatedAt":"2018-06-02T11:34:03","Actor":"aldrashan","Number":"2419","RawContent":null,"Title":"Large data being \"merged\" incorrectly","State":"open","Body":"Nuget package: Microsoft.AspNetCore.SignalR (1.0.0-rc1-final)\r\nJavascript client\r\nServer: kestrel\r\nServer OS: Linux\r\nClient browser: all\r\n\r\nI send data from my Hub to the client after serializing it like so:\r\n`await Clients.Caller.SendAsync(\"ReceiveAllTables\", JsonConvert.SerializeObject(tables, new JsonSerializerSettings() { ContractResolver = new CamelCasePropertyNamesContractResolver() }));`\r\n\r\nThe javascript function then parses the incoming data back to an object array and processes it.\r\n\r\nThis works fine as long as there are a few tables.\r\nAs soon as a size threshold is reached (not sure what that threshold is) the parsing to objects fails because there are unexpected characters in the json string.\r\nAn example of this would be:\r\n[{\"tableId\":1,\"Name\":\"Test1\"}, ... ,{**g145**\"tableId\":6,\"Name\":\"Test6\"}, ...]\r\n\r\nThe \"g145\" is what causes the parsing to fail.\r\nThe same thing happens when you send back data without first serializing it. Random bytes get added in the javascript received data causing weird characters to appear in the object string, which causes the parsing to fail.","Url":"https://github.com/aspnet/SignalR/issues/2419","RelatedDescription":"Open issue \"Large data being \"merged\" incorrectly\" (#2419)"},{"Id":"327922475","IsPullRequest":true,"CreatedAt":"2018-06-01T16:25:25","Actor":"BrennanConroy","Number":"2408","RawContent":null,"Title":"Add WebSocket and EventSource polyfills to options","State":"closed","Body":"#2048","Url":"https://github.com/aspnet/SignalR/pull/2408","RelatedDescription":"Closed or merged PR \"Add WebSocket and EventSource polyfills to options\" (#2408)"},{"Id":"328260526","IsPullRequest":false,"CreatedAt":"2018-05-31T19:06:52","Actor":"anurse","Number":"2417","RawContent":null,"Title":"Report data from functional test runs","State":"open","Body":"We should report data from functional test runs in GitHub checks (attached to the commit that they were run on). This depends on #2415 since we need the functional tests to report results in order to report them forward to GitHub commit status.\r\n\r\nWe should also investigate integrating the running of tests into a CI build and reporting that status.","Url":"https://github.com/aspnet/SignalR/issues/2417","RelatedDescription":"Open issue \"Report data from functional test runs\" (#2417)"},{"Id":"328231622","IsPullRequest":false,"CreatedAt":"2018-05-31T18:49:26","Actor":"anurse","Number":"2412","RawContent":null,"Title":"[2.1.1] Add Content-Type header in HttpClient.ts","State":"closed","Body":"When using SignalR with React-Native, negotiation fails with the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/4699747/39844289-31ad2e3e-53a4-11e8-998e-76dd944a5a7d.png)\r\n\r\nThis is due to the fact that we don't set a `Content-Type` header on our outgoing requests. Browsers don't require this, but it seems react-native on Android (at least) does.\r\n\r\nFrom the initial customer PR:\r\n\r\n> When debugging the xhr.onerror function in HttpClient.ts, the details on the xhr object shows the underlying error from react-native is \"Payload is set but no content-type header specified\".\r\n\r\nThis was a customer find and fix: https://github.com/aspnet/SignalR/pull/2242","Url":"https://github.com/aspnet/SignalR/issues/2412","RelatedDescription":"Closed issue \"[2.1.1] Add Content-Type header in HttpClient.ts\" (#2412)"},{"Id":"328253711","IsPullRequest":false,"CreatedAt":"2018-05-31T18:45:33","Actor":"anurse","Number":"2414","RawContent":null,"Title":"Ensure SignalR Client 2.1.1 depends on System.Memory 2.1.1","State":"open","Body":"In 2.1.1 we need to make sure the SignalR Client packages depend upon System.Memory 2.1.1 to make sure we get the corefx changes to remove `_._` markers for Xamarin and UWP.\r\n\r\nWe need to test that the updated package works in Xamarin, and UWP **with min version set to 1803**","Url":"https://github.com/aspnet/SignalR/issues/2414","RelatedDescription":"Open issue \"Ensure SignalR Client 2.1.1 depends on System.Memory 2.1.1\" (#2414)"},{"Id":"328232636","IsPullRequest":true,"CreatedAt":"2018-05-31T18:38:49","Actor":"anurse","Number":"2413","RawContent":null,"Title":"[2.1.1] Add Content-Type header in HttpClient.ts (#2242)","State":"closed","Body":"Port #2242 to 2.1.1 patch\r\n\r\nFixes #2412 ","Url":"https://github.com/aspnet/SignalR/pull/2413","RelatedDescription":"Closed or merged PR \"[2.1.1] Add Content-Type header in HttpClient.ts (#2242)\" (#2413)"},{"Id":"327927466","IsPullRequest":true,"CreatedAt":"2018-05-31T15:47:33","Actor":"BrennanConroy","Number":"2409","RawContent":null,"Title":"Add test coverage to TS Client tests","State":"closed","Body":"Tests now take ~30 seconds from ~8 seconds. We might consider adding a flag to enable this?\r\n\r\nSample of what it looks like:\r\n![codecov](https://user-images.githubusercontent.com/7574801/40751792-98190660-6421-11e8-86c2-3b957c5a0428.JPG)\r\n","Url":"https://github.com/aspnet/SignalR/pull/2409","RelatedDescription":"Closed or merged PR \"Add test coverage to TS Client tests\" (#2409)"},{"Id":"328158411","IsPullRequest":false,"CreatedAt":"2018-05-31T14:19:13","Actor":"claylaut","Number":"2411","RawContent":null,"Title":"Web Socket Connection - Get disconnected intermittent","State":"open","Body":"I'm facing this issue that a connection is getting closed intermittently between 10sec~30sec. (error shown on client log which is attached below)\r\n\r\nI'm not sure what we've changed lately but before it was working fine. Any ideas how to solve this issue?\r\n\r\nWe have set:\r\n* Sticky sessions on the NGINX load balancer\r\n* Idle timeout is set to 3600 \r\n\r\n## Load Balancer Configuration:\r\n ### NGINX ConfigMap\r\n* proxy-read-timeout: \"3600\"\r\n* proxy-send-timeout: \"3600\"\r\n\r\n### Ingress NGINX Service  (Load Balancer)\r\n* service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: \"3600\"\r\n\r\n### NGINX Ingress\r\n* ingress.kubernetes.io/affinity: \"cookie\"\r\n* ingress.kubernetes.io/session-cookie-name: \"route\"\r\n* ingress.kubernetes.io/session-cookie-hash: \"sha1\"\r\n\r\n## Currently we are using:\r\n* Signalr Javascript client : `1.0.0-rc1-update1`\r\n* Server-Side NuGet Packages: `1.0.0-rc1-final`\r\n* Signalr Server is running on Kubernetes cluster of: `4 instances`\r\n* Kubernetes: using `ingress with ngnix`\r\n* Operating System on the Server: `Linux`\r\n* Operating System on the Client: `Windows`\r\n* Host: `AWS`\r\n* Browser on the client: `Chrome`\r\n\r\n## Server logs sample:\r\nThese server logs are for one specific user getting disconnected and reconnected multiple times. \r\nIf you need stack trace of any particular log, please do not hesitate to ask.\r\n[server-logs-sample](https://github.com/aspnet/SignalR/files/2058511/server-logs.xlsx)\r\n\r\n\r\n## Client sample error:\r\nNote: Client and server logs are from different sessions, so ID's will not correlate \r\n![client-trace-error](https://user-images.githubusercontent.com/1999085/40786878-7851424a-64ec-11e8-9b0f-6707fd072e39.png)\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2411","RelatedDescription":"Open issue \"Web Socket Connection - Get disconnected intermittent\" (#2411)"},{"Id":"327596291","IsPullRequest":false,"CreatedAt":"2018-05-31T10:11:20","Actor":"yaohaixiao","Number":"2404","RawContent":null,"Title":"Error: Server returned handshake error","State":"closed","Body":"Server-Side: Microsoft.AspNetCore.SignalR 1.0.0\r\nClient-Side: @aspnet/signalr@1.0.0 Ôºàwork with javascript clientÔºâ\r\nIIS: 10.0\r\nOS Server: Windows Server 2016\r\nOS Client: Windows 10 Enterprise\r\nBrowser: Chrome 66.0.3359.181\r\n\r\nIt works well when debug with VS 2017 using IIS Express. But when I publish it to the IIS server, It's return the error: \r\n\r\n> Server returned handshake error: An unexpected error occurred during connection handshake.\r\n\r\n I enabled all the features on IIS. here is the log:\r\n\r\n> 2018-05-30 03:46:00 10.5.106.125 POST /signalr/rdcsiteHub/negotiate - 5003 - 10.5.106.125 Mozilla/5.0+(Windows+NT+10.0;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/66.0.3359.181+Safari/537.36 http://10.5.106.125:5003/projects/27/applications/112/deploys/daily 200 0 0 43\r\n\r\n> 2018-05-30 03:46:00 10.5.106.125 GET /signalr/rdcsiteHub id=Ha2uZqE6tANXYATFN3gkug 5003 - 10.5.106.125 Mozilla/5.0+(Windows+NT+10.0;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/66.0.3359.181+Safari/537.36 - 101 0 0 166\r\n\r\nseems like I could connect the hub, but it returns error when I call the **connection.invoke** function\r\n\r\nHere is my javascript code\r\n\r\n```js\r\nimport * as signalR from '@aspnet/signalr'\r\nconst connection = new signalR.HubConnectionBuilder().withUrl('/signalr/siteHub').configureLogging(signalR.LogLevel.Information).build()\r\n\r\nconnection.on('ReceiveMessage', (response) => {\r\n        console.log(response)\r\n        console.log('refresh the grid')\r\n        this.loadData()\r\n})\r\n\r\nconnection.on('PublishErrorMessage', (response) => {\r\n        console.log(response)\r\n        console.log('refresh the grid')\r\n        this.loadData()\r\n})\r\n\r\nconnection.start().then(() => {\r\n    console.log('connection Start!')\r\n\r\n    if (!this.isInvoked) {\r\n         let connectState = connection.connection.connectionState\r\n         if (connectState === 1) {\r\n            // for 'ReceiveMessage'\r\n            connection.invoke('SendTest', (userId).toString(), 3).catch(err => console.error(err.toString()))\r\n           // for 'PublishErrorMessage' \r\n            connection.invoke('SendTest', (userId).toString(), 3).catch(err => console.error(err.toString()))\r\n         }\r\n    }\r\n}).catch((err) => {\r\n    console.error(err.toString())\r\n})\r\n```","Url":"https://github.com/aspnet/SignalR/issues/2404","RelatedDescription":"Closed issue \"Error: Server returned handshake error\" (#2404)"},{"Id":"327995113","IsPullRequest":false,"CreatedAt":"2018-05-31T05:03:13","Actor":"lghinet","Number":"2410","RawContent":null,"Title":"Module not found: Can't resolve 'tslib' in '...@aspnet\\signalr\\dist\\esm'","State":"open","Body":"Hello,\r\ni get the following error using \"@aspnet/signalr\": \"1.0.0\", and creat-react-app \r\n\r\n```\r\nFailed to compile.\r\n\r\n./node_modules/@aspnet/signalr/dist/esm/Errors.js\r\nModule not found: Can't resolve 'tslib' in 'D:\\VSTS\\LSNG\\node_modules\\@aspnet\\signalr\\dist\\esm'\r\n```","Url":"https://github.com/aspnet/SignalR/issues/2410","RelatedDescription":"Open issue \"Module not found: Can't resolve 'tslib' in '...@aspnet\\signalr\\dist\\esm'\" (#2410)"},{"Id":"327867547","IsPullRequest":false,"CreatedAt":"2018-05-30T19:28:25","Actor":"anurse","Number":"2407","RawContent":null,"Title":"Enable TSLint for tests","State":"open","Body":"We should run TSLint over our unit tests. Particularly rules like [no-floating-promises](https://palantir.github.io/tslint/rules/no-floating-promises/) which ensure you properly `await` a promise. It's easy to mess that up and get weird behavior in a test.\r\n\r\nI'd suggest doing this by adding a new script to each of `clients\\ts\\signalr\\package.json` and `clients\\ts\\signalr-protocol-msgpack\\package.json` that lints the tests, and then have the `test` script in `clients\\ts\\package.json` run those commands before running `jest`.","Url":"https://github.com/aspnet/SignalR/issues/2407","RelatedDescription":"Open issue \"Enable TSLint for tests\" (#2407)"},{"Id":"327821549","IsPullRequest":false,"CreatedAt":"2018-05-30T17:11:53","Actor":"anurse","Number":"2406","RawContent":null,"Title":"[Tracking] SignalR Client does not function in UWP apps with Min Version set to Windows 1803","State":"open","Body":"Similar to the System.Memory issues we found in https://github.com/aspnet/SignalR/issues/1886, the System.Memory package contains a `lib/uap10.0.16300/_._` file but the UWP runtime doesn't actually include a version of System.Memory. This means that when the **min version** of an app is targeting `17134` (the runtime version for the 1803 build of Windows), you get failures to load `System.Memory`.\r\n\r\nThe fix for this is happening in corefx, this issue is just tracking the change so we can verify that SignalR works with the updated package. We know it works with the netstandard2.0 build because if you set the **min version** to `16299` (Fall Creators Update), everything works fine.","Url":"https://github.com/aspnet/SignalR/issues/2406","RelatedDescription":"Open issue \"[Tracking] SignalR Client does not function in UWP apps with Min Version set to Windows 1803\" (#2406)"},{"Id":"327805204","IsPullRequest":false,"CreatedAt":"2018-05-30T16:24:37","Actor":"anurse","Number":"2405","RawContent":null,"Title":"Expand Unit Tests using mocks","State":"open","Body":"Prerequisite #2048 \r\n\r\nExpand our unit tests using the mocks added in #2048.","Url":"https://github.com/aspnet/SignalR/issues/2405","RelatedDescription":"Open issue \"Expand Unit Tests using mocks\" (#2405)"},{"Id":"327496424","IsPullRequest":false,"CreatedAt":"2018-05-29T21:36:05","Actor":"anurse","Number":"2403","RawContent":null,"Title":"Automatically publish test applications on each commit","State":"open","Body":"We have the scripts, but now we want to deploy the test applications to Azure on each commit.","Url":"https://github.com/aspnet/SignalR/issues/2403","RelatedDescription":"Open issue \"Automatically publish test applications on each commit\" (#2403)"},{"Id":"327338519","IsPullRequest":false,"CreatedAt":"2018-05-29T15:07:50","Actor":"freever","Number":"2401","RawContent":null,"Title":"System.Memory problem on Xamarin.iOS?","State":"closed","Body":"I am getting the following errors running a Xamarin.Forms iOS app with SignalR-1.0.0-rc1-final and Xamarin.Forms 3.0.0.482510:\r\n\r\n> warning: Could not load signature of Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol:TryParseMessage due to: Could not resolve type with token 01000026 (from typeref, class/assembly System.Buffers.ReadOnlySequence`1, System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51) assembly:System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 type:System.Buffers.ReadOnlySequence`1 member:(null) signature:<none>\r\n\r\n> warning: Could not load signature of Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol:TryParseMessage due to: Could not resolve type with token 01000034 (from typeref, class/assembly System.Buffers.ReadOnlySequence`1, System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51) assembly:System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 type:System.Buffers.ReadOnlySequence`1 member:(null) signature:<none>\r\n\r\nThis is followed with this exception:\r\n\r\n> System.TypeLoadException: Could not resolve the signature of a virtual method : \"Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol\"\r\n\r\nThe code throwing the exception is:\r\n\r\n```\r\n           _hubConnection = new HubConnectionBuilder()\r\n                .WithUrl(Endpoint)\r\n                .Build();\r\n```\r\nI'm aware that there's a problem with Xamarin.Android due to the missing System.Memory facade in Mono (#1886) - is this the reason for my iOS problems too or am I doing something wrong here?\r\n\r\nUWP is working fine. \r\n\r\nMy version info is as follows:\r\n\r\n> === Visual Studio Community 2017 for Mac (Preview) ===\r\n> \r\n> Version 7.6 Preview (7.6 build 711)\r\n> Installation UUID: 60680359-6e03-485d-b0af-f7e27ea999fc\r\n> Runtime:\r\n> \tMono 5.12.0.226 (2018-02/9824e260f56) (64-bit)\r\n> \tGTK+ 2.24.23 (Raleigh theme)\r\n> \tXamarin.Mac 4.4.0.36 (master / 0c7c49a6)\r\n> \r\n> \tPackage version: 512000226\r\n> \r\n> === NuGet ===\r\n> \r\n> Version: 4.3.1.4445\r\n> \r\n> === .NET Core ===\r\n> \r\n> Runtime: /usr/local/share/dotnet/dotnet\r\n> Runtime Versions:\r\n> \t2.0.5\r\n> \t2.0.0\r\n> SDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\n> SDK Versions:\r\n> \t2.1.4\r\n> \t2.0.0\r\n> MSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.12.0/lib/mono/msbuild/15.0/bin/Sdks\r\n> \r\n> === Xamarin.Profiler ===\r\n> \r\n> '/Applications/Xamarin Profiler.app' not found\r\n> \r\n> === Xamarin.Android ===\r\n> \r\n> Version: 8.3.0.19 (Visual Studio Community)\r\n> Android SDK: /Users/adrianfrielinghaus/Library/Developer/Xamarin/android-sdk-macosx\r\n> \tSupported Android versions:\r\n> \t\t7.0 (API level 24)\r\n> \t\t7.1 (API level 25)\r\n> \t\t8.0 (API level 26)\r\n> \t\t8.1 (API level 27)\r\n> \r\n> SDK Tools Version: 25.2.5\r\n> SDK Platform Tools Version: 27.0.1\r\n> SDK Build Tools Version: 27.0.3\r\n> \r\n> Java SDK: /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\r\n> java version \"1.8.0_121\"\r\n> Java(TM) SE Runtime Environment (build 1.8.0_121-b13)\r\n> Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)\r\n> \r\n> Android Designer EPL code available here:\r\n> https://github.com/xamarin/AndroidDesigner.EPL\r\n> \r\n> === Apple Developer Tools ===\r\n> \r\n> Xcode 9.3.1 (14154.1)\r\n> Build 9E501\r\n> \r\n> === Xamarin.Mac ===\r\n> \r\n> Version: 4.5.0.280 (Visual Studio Community)\r\n> Hash: e85a7be8\r\n> Branch: master\r\n> Build date: 2018-05-03 11:35:01-0400\r\n> \r\n> === Xamarin.iOS ===\r\n> \r\n> Version: 11.11.0.280 (Visual Studio Community)\r\n> Hash: e85a7be8\r\n> Branch: master\r\n> Build date: 2018-05-03 11:35:00-0400\r\n> \r\n> === Xamarin Inspector ===\r\n> \r\n> Version: 1.4.0\r\n> Hash: b3f92f9\r\n> Branch: master\r\n> Build date: Fri, 19 Jan 2018 22:00:34 GMT\r\n> Client compatibility: 1\r\n> \r\n> === Build Information ===\r\n> \r\n> Release ID: 706000711\r\n> Git revision: 634060c6c105fd3ee36678fe547680fd258cbf45\r\n> Build date: 2018-05-04 16:11:06-04\r\n> Xamarin extensions: c6720450018cb69a3da7c6d0aa0715c013783595\r\n> Build lane: monodevelop-lion-master\r\n> \r\n> === Operating System ===\r\n> \r\n> Mac OS X 10.13.4\r\n> Darwin 17.5.0 Darwin Kernel Version 17.5.0\r\n>     Mon Mar  5 22:24:32 PST 2018\r\n>     root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n> \r\n> === Enabled user installed extensions ===\r\n> \r\n> NuGet Package Explorer 0.2\r\n> NuGet Package Management Extensions 0.12.6\r\n> Internet of Things (IoT) development (Preview) 7.5\r\n> \r\n> ","Url":"https://github.com/aspnet/SignalR/issues/2401","RelatedDescription":"Closed issue \"System.Memory problem on Xamarin.iOS?\" (#2401)"},{"Id":"327361474","IsPullRequest":false,"CreatedAt":"2018-05-29T15:02:25","Actor":"OmprakashAmarwal","Number":"2402","RawContent":null,"Title":"How can I get connection is disconnected ?","State":"open","Body":"there is any way to detect connection disconnected from hub server ?\r\nso i can notify offline to user or reconnect to server.\r\n\r\nPlease provide a full document related to all the new changes.  \r\n","Url":"https://github.com/aspnet/SignalR/issues/2402","RelatedDescription":"Open issue \"How can I get connection is disconnected ?\" (#2402)"},{"Id":"327256349","IsPullRequest":false,"CreatedAt":"2018-05-29T11:33:12","Actor":"WilcoBakker","Number":"2399","RawContent":null,"Title":"SignalR 1.0.0 released?","State":"closed","Body":"Dear developers of SignalR,\r\n\r\nAccording to the release tags, SignalR 1.0.0 has been released 4 days ago. Is that the actual post-RC post-pre-release release?\r\nIf so, when will it be added to NuGet?\r\n\r\nThanking you in advance. ü§ó","Url":"https://github.com/aspnet/SignalR/issues/2399","RelatedDescription":"Closed issue \"SignalR 1.0.0 released?\" (#2399)"},{"Id":"327268952","IsPullRequest":false,"CreatedAt":"2018-05-29T10:55:49","Actor":"yaohaixiao","Number":"2400","RawContent":null,"Title":"Server returned handshake error","State":"open","Body":"Server-Side: Microsoft.AspNetCore.SignalR 1.0.0-preview2-final\r\nClient-Side: @aspnet/signalr@1.0.0-rc1-final Ôºàwork with javascript clientÔºâ\r\nIIS: 10.0\r\nOS Server: Windows Server 2016\r\nOS Client: Windows 10 Enterprise\r\nBrowser: Chrome 59.0.3071.115\r\n\r\nIt works well on my PC, debug with VS 2017 using IIS Express. But when I publish it to the Server (Azure), It's return the error: \r\n\r\n> Server returned handshake error: An unexpected error occurred during connection handshake.\r\n\r\nI enbaled the Websockets on my IIS server. \r\n\r\nHere is my js code\r\n\r\n```js\r\nconst connection = new signalR.HubConnectionBuilder().withUrl('/signalr/siteHub').configureLogging(signalR.LogLevel.Information).build()\r\n\r\nconnection.on('ReceiveMessage', (response) => {\r\n        console.log(response)\r\n        console.log('refresh the grid')\r\n        this.loadData()\r\n})\r\n\r\nconnection.on('PublishErrorMessage', (response) => {\r\n        console.log(response)\r\n        console.log('refresh the grid')\r\n        this.loadData()\r\n})\r\n\r\nconnection.start().then(() => {\r\n    console.log('connection Start!')\r\n\r\n    if (!this.isInvoked) {\r\n         let connectState = connection.connection.connectionState\r\n         if (connectState === 1) {\r\n            // for 'ReceiveMessage'\r\n            connection.invoke('SendTest', (userId).toString(), 3).catch(err => console.error(err.toString()))\r\n           // for 'PublishErrorMessage' \r\n            connection.invoke('SendTest', (userId).toString(), 3).catch(err => console.error(err.toString()))\r\n         }\r\n    }\r\n}).catch((err) => {\r\n    console.error(err.toString())\r\n})\r\n```\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2400","RelatedDescription":"Open issue \"Server returned handshake error\" (#2400)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"329261618","IsPullRequest":true,"CreatedAt":"2018-06-05T00:32:43","Actor":"HaoK","Number":"1816","RawContent":null,"Title":"Don't hook cancellation tokens by default","State":"open","Body":"Fixes https://github.com/aspnet/Identity/issues/1811\r\n\r\ncc @davidfowl @ajcvickers ","Url":"https://github.com/aspnet/Identity/pull/1816","RelatedDescription":"Open PR \"Don't hook cancellation tokens by default\" (#1816)"},{"Id":"328809133","IsPullRequest":false,"CreatedAt":"2018-06-04T18:09:50","Actor":"BrendanRidenour","Number":"1812","RawContent":null,"Title":"Identity UI's embedded static files will return 404s if app.UseStaticFiles() is passed a StaticFileOptions object.","State":"closed","Body":"**Is this a Bug or Feature request?**\r\n\r\nBug\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create a new ASP.NET Core Web Application (2.1).\r\n2. Be sure Authentication is set to \"Individual User Accounts\".\r\n3. Run the app and navigate to the Register and Login pages. Everything works as expected so far.\r\n4. Stop the app.\r\n5. Delete the file at \"Areas/Identity/Pages/_ViewStart.cshtml\". This will force Identity to use its default layout page (with links to embedded static files).\r\n6. Now open Startup.cs and change `app.UseStaticFiles();` to `app.UseStaticFiles(new StaticFileOptions());`.\r\n7. Run the app again (**with browser cache disabled**) and navigate back to the Register and Login pages. All the embedded static files from Identity‚Äôs Default UI now return 404s.\r\n\r\n**Description of the problem:**\r\n\r\nAfter digging through the source code, I found the problem. Calling `app.UseStaticFiles()` in Startup.cs with no options parameter works as expected because the registered `IPostConfigureOptions<StaticFileOptions>` instances get called correctly.\r\n\r\nHowever, if you call `app.UseStaticFiles(staticFileOptions);` with an options argument, that instance gets passed into the `StaticFileMiddleware` directly (which is obviously by design). Unfortunately, that also means that any registered `IPostConfigureOptions<StaticFileOptions>` will NOT be called, including Identity UI‚Äôs `IdentityDefaultUIConfigureOptions` class.\r\n\r\n`IdentityDefaultUIConfigureOptions` is the class that adds the `ManifestEmbeddedFileProvider` and `CompositeFileProvider` to the StaticFileOptions object. But if its `PostConfigure(name, staticFileOptions)` method is never called, those embedded files are not found and everything 404s at runtime.","Url":"https://github.com/aspnet/Identity/issues/1812","RelatedDescription":"Closed issue \"Identity UI's embedded static files will return 404s if app.UseStaticFiles() is passed a StaticFileOptions object.\" (#1812)"},{"Id":"329074459","IsPullRequest":false,"CreatedAt":"2018-06-04T14:15:27","Actor":"serpent5","Number":"1815","RawContent":null,"Title":"Customise/Disable the Default UI's Area Name","State":"open","Body":"Before the Default UI was introduced (pre 2.1), generated projects that included ASP.NET Core Identity were configured to serve Identity-specific endpoints at e.g. /Account/Login. With the new Default UI, this is now e.g. /Identity/Account/Login. Both the existence of an Area and its default name appear to be hardcoded (as `IdentityUIDefaultAreaName` in the source code) with no option to override.","Url":"https://github.com/aspnet/Identity/issues/1815","RelatedDescription":"Open issue \"Customise/Disable the Default UI's Area Name\" (#1815)"},{"Id":"329057583","IsPullRequest":false,"CreatedAt":"2018-06-04T13:33:02","Actor":"mprevot","Number":"1814","RawContent":null,"Title":"Cannot retarget \"package\" to dotnet core 2.1","State":"open","Body":"I couldn't find out how to make Identity projects work with dotnet  core 2.1 instead of 2.2-preview.\r\nI don't have 2.2 preview, build succeeds but tests do not.\r\nHow do we do this ?\r\n\r\n[SO](https://stackoverflow.com/questions/50680422/how-to-setup-dotnetcore-target-for-build-and-tests)\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Identity/issues/1814","RelatedDescription":"Open issue \"Cannot retarget \"package\" to dotnet core 2.1\" (#1814)"},{"Id":"328876330","IsPullRequest":false,"CreatedAt":"2018-06-04T00:26:21","Actor":"natelaff","Number":"1813","RawContent":null,"Title":"UserRoles in DefaultIdentity","State":"open","Body":"Surely I'm missing something easy? Or was it really made this complicated?\r\n\r\nIf you use AddDefaultIdentity no UserRoleStore gets created? So you can't use roles at all. Why? If you switch back to AddIdentity then you have to deal reintegrating everything such as login paths, razor page authentication, etc..\r\n","Url":"https://github.com/aspnet/Identity/issues/1813","RelatedDescription":"Open issue \"UserRoles in DefaultIdentity\" (#1813)"},{"Id":"328695398","IsPullRequest":false,"CreatedAt":"2018-06-02T00:21:51","Actor":"HaoK","Number":"1811","RawContent":null,"Title":"Remove cancellation token hookup for RequestAborted","State":"open","Body":"Per @davidfowl request, we should remove the logic in the managers that hook up the cancellation tokens for 2.2\r\n\r\nhttps://github.com/aspnet/Identity/blob/dev/src/Identity/AspNetUserManager.cs#L45\r\n\r\nany objects @ajcvickers @blowdart ?","Url":"https://github.com/aspnet/Identity/issues/1811","RelatedDescription":"Open issue \"Remove cancellation token hookup for RequestAborted\" (#1811)"},{"Id":"328571273","IsPullRequest":false,"CreatedAt":"2018-06-01T15:49:59","Actor":"kinosang","Number":"1810","RawContent":null,"Title":"[feature request] user activity","State":"open","Body":"I saw #106, #650, #1278, and #1281\r\n\r\nOne year passed, is there any plan for the account activity feature?\r\n\r\nOr if the schema changes have been done and the project is ready for the activity feature with a pull request?","Url":"https://github.com/aspnet/Identity/issues/1810","RelatedDescription":"Open issue \"[feature request] user activity\" (#1810)"},{"Id":"325905373","IsPullRequest":false,"CreatedAt":"2018-06-01T12:39:03","Actor":"MetalBreaker","Number":"1804","RawContent":null,"Title":"Role being cached for too long","State":"closed","Body":"### Roles are cached for too long\r\nSo, I wanted to create an admin-only panel. That's all fine and dandy, and the mechanism ended up working. However, ASP.NET Core caches the role for too long (at first I thought it was my code), and if I add or remove the role, I have to either log out and then log back in or wait around ~10 minutes (don't quote me on that) for the admin-only panel to appear/disappear. It's very annoying.\r\n\r\n### Functional impact\r\nIf an admin gets demoted for abusing their powers, they will still have admin powers on the website until the cached role resets.\r\n\r\n### Minimal repro steps\r\n1. I'm using the current code:\r\n```\r\n@page\r\n@model App.Pages.Account.Manage.AdminPanelModel\r\n@{\r\n    ViewData[\"Title\"] = \"AdminPanel\";\r\n    var isAdmin = User.IsInRole(\"Admin\");\r\n}\r\n\r\n@if (isAdmin)\r\n{\r\n    <h2>Hello, fellow administrator.</h2>\r\n     //WIP\r\n}\r\nelse\r\n{\r\n    Response.StatusCode = (int)Microsoft.AspNetCore.Http.StatusCodes.Status401Unauthorized;\r\n    <h2>You are not authorized.</h2>\r\n}\r\n``` \r\nand creating the Admin role in Startup using RoleManager.\r\n2. Try adding/removing the role to/from the user.\r\nIf it's added to the user, the admin panel should pop up immediately.\r\nIf it's removed from the user, the admin panel should disappear.\r\n\r\n### Expected result\r\nChanges should be effective almost immediately.\r\n\r\n### Actual result\r\nChanges take a lot of time to go into effect.","Url":"https://github.com/aspnet/Identity/issues/1804","RelatedDescription":"Closed issue \"Role being cached for too long\" (#1804)"},{"Id":"328383497","IsPullRequest":false,"CreatedAt":"2018-06-01T05:07:06","Actor":"dotnetshadow","Number":"1809","RawContent":null,"Title":"Scaffolding 2.1 RTM in existing MVC application 404 for non overridden pages","State":"open","Body":"I recently upgraded my ASP.NET Core application 2.1. I used the identity scaffolder to override Login and Register pages. Upon doing this I noticed that routes to logout and manage were incorrect\r\n\r\n`?page=Account/Manage` rather than `/Identity/Account/Manage`\r\n\r\nI then rescaffolded and this time and chose to override all files. This seemed to work. \r\nIn my particular case there seems to be an issue with scaffolding just a handful of pages and not being able to find the remaining pages that aren't scaffolded\r\n\r\nJust wondering if I'm missing something?\r\n\r\n**update**\r\nI think the issue i have is that i was using AddIdentity instead of AddDefaultIdentity. Unfortunately i am unable to try this yet ","Url":"https://github.com/aspnet/Identity/issues/1809","RelatedDescription":"Open issue \"Scaffolding 2.1 RTM in existing MVC application 404 for non overridden pages\" (#1809)"},{"Id":"327472080","IsPullRequest":false,"CreatedAt":"2018-05-30T18:16:12","Actor":"krijnm","Number":"1806","RawContent":null,"Title":"FindByIdAsync vs FindByNameAsync","State":"closed","Body":"I have noticed a difference in implementation between FindByIdAsync and FindByNameAsync.\r\n\r\nFindByIdAsync executes UsersSet.FindAsync(new object[] { id },.. which will attach and track the user, if found. FindByNameAsync uses the DbSet IQueryable method Users.FirstOrDefaultAsync(u => u.NormalizedUserName == normalizedUserName, .. which does not track the user.\r\n\r\nThe flow UserManager => FindById + Update could  result in a crash -cannot be tracked because another instance with the same key value for {'ApplicationUserId'} is already being tracked ...\r\n\r\nThis is because the UserManager.UpdateAsync executes Context.Attach(user) without testing if the user is already present in the local storage: this.UsersSet.Local.Contains(user)\r\n\r\nNot because of above but issues with EF OwnsProperty property on ApplicationUser.","Url":"https://github.com/aspnet/Identity/issues/1806","RelatedDescription":"Closed issue \"FindByIdAsync vs FindByNameAsync\" (#1806)"},{"Id":"327814448","IsPullRequest":true,"CreatedAt":"2018-05-30T17:57:01","Actor":"natemcmaster","Number":"1808","RawContent":null,"Title":"[2.1.1] Update package versions","State":"closed","Body":null,"Url":"https://github.com/aspnet/Identity/pull/1808","RelatedDescription":"Closed or merged PR \"[2.1.1] Update package versions\" (#1808)"},{"Id":"327734711","IsPullRequest":false,"CreatedAt":"2018-05-30T13:37:23","Actor":"tatarincev","Number":"1807","RawContent":null,"Title":"RoleManager.UpdateRole caused  EF ChangeTracker already being tracked exception","State":"open","Body":"## Steps to reproduce:\r\n```\r\nvar trackedRole = await RoleManager.FindByNameAsync(\"admin\");\r\nvar nonTrackedRole = new Role { Id = trackedRole .Id, Name = trackedRole .Name };\r\nawait RoleManager.UpdateAsync(nonTrackedRole );\r\n```\r\nGot the exception\r\n`value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.'`\r\n\r\n## Assumption \r\nI understand the main reason for this issue but have just wanted to clarify whether the team is going to do something about this?\r\n","Url":"https://github.com/aspnet/Identity/issues/1807","RelatedDescription":"Open issue \"RoleManager.UpdateRole caused  EF ChangeTracker already being tracked exception\" (#1807)"},{"Id":"325077519","IsPullRequest":true,"CreatedAt":"2018-05-29T20:53:59","Actor":"HaoK","Number":"1801","RawContent":null,"Title":"Add additional test assertions","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/1801","RelatedDescription":"Closed or merged PR \"Add additional test assertions\" (#1801)"},{"Id":"326860514","IsPullRequest":true,"CreatedAt":"2018-05-27T23:26:19","Actor":"hikalkan","Number":"1805","RawContent":null,"Title":"Allow to access internal methods of SignInManager from a derived class","State":"open","Body":"For a multi-tenant application, I need to override these methods.","Url":"https://github.com/aspnet/Identity/pull/1805","RelatedDescription":"Open PR \"Allow to access internal methods of SignInManager from a derived class\" (#1805)"},{"Id":"325394581","IsPullRequest":false,"CreatedAt":"2018-05-22T17:34:34","Actor":"kichalla","Number":"1803","RawContent":null,"Title":"Upgrade Identity UI to use 3.2.10 version of jquery unobtrusive scripts","State":"open","Body":"","Url":"https://github.com/aspnet/Identity/issues/1803","RelatedDescription":"Open issue \"Upgrade Identity UI to use 3.2.10 version of jquery unobtrusive scripts\" (#1803)"},{"Id":"325257254","IsPullRequest":false,"CreatedAt":"2018-05-22T11:44:33","Actor":"TETYYS","Number":"1802","RawContent":null,"Title":"Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context","State":"open","Body":"`2.1.0-rc1-final` version throws `Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context` exeption on `SignInManager<TUser>.PasswordSignInAsync`:\r\n\r\n```\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityType()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityQueryable()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.System.Linq.IQueryable.get_Provider()\r\nSystem.Linq.Queryable.Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\r\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>.GetClaimsAsync(TUser user, CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Identity.UserManager<TUser>.GetClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.GenerateClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.GenerateClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.CreateAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.CreateUserPrincipalAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.SignInAsync(TUser user, AuthenticationProperties authenticationProperties, string authenticationMethod)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.SignInOrTwoFactorAsync(TUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(string userName, string password, bool isPersistent, bool lockoutOnFailure)\r\nProject.Controllers.AccountController.Login(LoginViewModel model, string returnUrl) in AccountController.cs\r\n+ var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);\r\nMicrosoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, object[] arguments)\r\nSystem.Threading.Tasks.ValueTask<TResult>.get_Result()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n\r\nIssue does not occur on Windows, but occurs on Linux (both using Kestrel), downgrading to current stable version solves the issue.\r\n\r\nFailing:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-rc1-final\" />\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.1.0-rc1-final\" />\r\n```\r\nPassing:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.3\" />\r\n```","Url":"https://github.com/aspnet/Identity/issues/1802","RelatedDescription":"Open issue \"Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context\" (#1802)"},{"Id":"324858121","IsPullRequest":false,"CreatedAt":"2018-05-21T22:17:43","Actor":"kamilwattoo","Number":"1799","RawContent":null,"Title":"Unusual behavior when implementing IUserSecurityStampStore","State":"closed","Body":"I am implementing Custom Stores without Entity Framework. But there seems to be a problem because `UserManager` always changes `SecurityStamp` prior to calling `IUserStore.Update`. Which results in failing of `IUserStore.Update` because persisted `SecurityStamp` and Current Security Stamp do not match. This behavior forces implementation of Custom Stores to use Entity Framework or some other equivalent ORM. Setting new `SecurityStamp` should be responsibility of `IUserStore.Update` and `IUserStore.Create`. Is this behavior by design?\r\n","Url":"https://github.com/aspnet/Identity/issues/1799","RelatedDescription":"Closed issue \"Unusual behavior when implementing IUserSecurityStampStore\" (#1799)"},{"Id":"324701953","IsPullRequest":false,"CreatedAt":"2018-05-21T22:02:19","Actor":"CraigCarpenter","Number":"1798","RawContent":null,"Title":"AddRoles<CustomRoleType> does not correctly add EntityFrameworkCore.RoleStore<CustomRoleType> for non-string keys","State":"closed","Body":"The following code:\r\n\r\n```\r\nservices.AddIdentityCore<IdentityUser<Guid>>()\r\n        .AddRoles<IdentityRole<Guid>>()\r\n        .AddEntityFrameworkStores<ApplicationDbContext>();\r\n\r\n(some time later)\r\n\r\nserviceProvider.GetRequiredService<RoleManager<IdentityRole<Guid>>>();\r\n```\r\n\r\nResults in the exception:\r\n\r\n```\r\nException has occurred: CLR/System.AggregateException\r\nAn unhandled exception of type 'System.AggregateException' occurred in System.Private.CoreLib.dll: 'One or more errors occurred.'\r\n Inner exceptions found, see $exception in variables window for more details.\r\n Innermost exception \t System.ArgumentException : Object of type 'Microsoft.AspNetCore.Identity.IdentityRole`1[System.Guid]' cannot be converted to type 'Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.Guid]]'.\r\n```\r\n\r\nIf you explicit add a `RoleStore<IdentityRole<Guid>>` the issue is resolved.\r\n\r\n```\r\nusing Microsoft.AspNetCore.Identity.EntityFrameworkCore;\r\n...\r\nservices.AddScoped<IRoleStore<IdentityRole<Guid>>, RoleStore<IdentityRole<Guid>, ApplicationDbContext, Guid>>();\r\n```\r\n\r\nThis is probably because the classes\r\n\r\n```\r\npublic class RoleStore<TRole> : RoleStore<TRole, DbContext, string>\r\n\r\n(and)\r\n\r\npublic class RoleStore<TRole, TContext> : RoleStore<TRole, TContext, string>\r\n```\r\nin [RoleStore.cs](https://github.com/aspnet/Identity/blob/dev/src/EF/RoleStore.cs) require a the key to be a string.","Url":"https://github.com/aspnet/Identity/issues/1798","RelatedDescription":"Closed issue \"AddRoles<CustomRoleType> does not correctly add EntityFrameworkCore.RoleStore<CustomRoleType> for non-string keys\" (#1798)"},{"Id":"324961314","IsPullRequest":false,"CreatedAt":"2018-05-21T15:36:19","Actor":"adams-hub","Number":"1800","RawContent":null,"Title":"Identity errors not displayed properly when using UseStatusCodePagesWithReExecute","State":"open","Body":"When using UseStatusCodePagesWithReExecute, custom error StatusCodes like those found in GenerateRecoveryCodes.cshtml.cs do not display using the route as defined by UseStatusCodePagesWithReExecute  in the startup config.\r\n\r\nEg. `return NotFound($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");` \r\n\r\nRetuning a `StatusCode(404)` without an object displays fine in the custom error layout, but when returned with an object like `StatusCode(404, \"Custom message...\")`, it's returned as a string result.","Url":"https://github.com/aspnet/Identity/issues/1800","RelatedDescription":"Open issue \"Identity errors not displayed properly when using UseStatusCodePagesWithReExecute\" (#1800)"},{"Id":"324580463","IsPullRequest":false,"CreatedAt":"2018-05-18T23:40:03","Actor":"chrisckc","Number":"1797","RawContent":null,"Title":"Issues with Personal Data page (does not delete saved tokens when deleting user)","State":"open","Body":"It looks like the personal data pages were added with the EU GDPR regulations in mind, the pull is here:\r\n[https://github.com/aspnet/Identity/pull/1559](https://github.com/aspnet/Identity/pull/1559)\r\n\r\nHowever using the dotnet-sdk-2.1.300-rc1 identity scaffolded files, when deleting a user, any saved tokens for the user that are stored in the database table \"AspNetUserTokens\" are left behind so it is not fully deleting the user and their personal data. The User Claims are correctly deleted from \"AspNetUserClaims\" table. Not sure about other related tables as i haven't got around to trying out the roles etc.\r\n\r\nThis can easily be fixed by modifying the deletion code in the scaffolded files but really needs to be correct from the start.\r\n\r\nAnother issue is that when downloading personal data, the User Claims are not downloaded from the database, these are relevant as it is personal data that is stored in the database. Obviously if you have a custom user class and have added your own fields then you will need to update the download code to include them, but there is no reason that the claims should not be downloaded by default.\r\n\r\nTechnically any stored 3rd party provider access tokens should also be included in the download as it is still personal data. I think the hashed password of the local login doesn't count as personal data with it being a hash which is irreversible.","Url":"https://github.com/aspnet/Identity/issues/1797","RelatedDescription":"Open issue \"Issues with Personal Data page (does not delete saved tokens when deleting user)\" (#1797)"},{"Id":"322616787","IsPullRequest":false,"CreatedAt":"2018-05-18T19:52:17","Actor":"eriksendc","Number":"1790","RawContent":null,"Title":"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware An unhandled exception has occurred: Failed to retrieve Facebook user information (BadRequest) Please check if the authentication information is correct and the corresponding Facebook Graph API is enabled.","State":"closed","Body":"Hi All,\r\n\r\nStarting May 1st at approximately 1:33pm Eastern US time we started seeing the following error reported in  our logs:\r\n\r\n`Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware An unhandled exception has occurred: Failed to retrieve Facebook user information (BadRequest) Please check if the authentication information is correct and the corresponding Facebook Graph API is enabled.`\r\n\r\nWe made no code changes at that time. This just started happening out of the blue. We know this is affecting users because we've had at least 10 requests for help per day from our users since the 1st. It's becoming a real user experience issue. Any clues?\r\n\r\nWe're on 2.0.1 in general, and specifically for Microsoft.AspNetCore.Authentication.Facebook.\r\n\r\nThanks in advance!\r\n\r\n-Brian Eriksen","Url":"https://github.com/aspnet/Identity/issues/1790","RelatedDescription":"Closed issue \"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware An unhandled exception has occurred: Failed to retrieve Facebook user information (BadRequest) Please check if the authentication information is correct and the corresponding Facebook Graph API is enabled.\" (#1790)"},{"Id":"323584735","IsPullRequest":false,"CreatedAt":"2018-05-18T18:34:14","Actor":"tidyui","Number":"1793","RawContent":null,"Title":"Primary Key in RoleClaim & UserClaim provider dependent","State":"closed","Body":"This probably belongs in the EntityFrameworkCore repo, but I haven't bumped into it before using Identity. The migration generated for `RoleClaim` and `UserClaim` is provider dependent on the provider that was used when generating the migration.\r\n\r\nFor example the primary keys are generated with `Annotation(Sqlite:Autoincrement, true)` when using SQLite, and `Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn)` when creating the migration with SqlServer.\r\n\r\nWhile this probably works when generating a migration for a single application it totally breaks when using it in a reusable library that is not supposed to be database dependent because the migration only works on the same type of database as it was created for.\r\n\r\nIt also seems a bit odd as one of the main features of EntityFramework is to abstract the database provider from the application making it easy to change the underlying infrastructure.\r\n\r\nBest regards\r\n\r\nH√•kan","Url":"https://github.com/aspnet/Identity/issues/1793","RelatedDescription":"Closed issue \"Primary Key in RoleClaim & UserClaim provider dependent\" (#1793)"},{"Id":"323982803","IsPullRequest":false,"CreatedAt":"2018-05-18T15:11:49","Actor":"adams-hub","Number":"1796","RawContent":null,"Title":"Scaffold: Missing ShowRecoveryCodes","State":"closed","Body":"Scaffolding is missing the ShowRecoveryCodes page.","Url":"https://github.com/aspnet/Identity/issues/1796","RelatedDescription":"Closed issue \"Scaffold: Missing ShowRecoveryCodes\" (#1796)"},{"Id":"323791755","IsPullRequest":true,"CreatedAt":"2018-05-17T18:43:49","Actor":"kichalla","Number":"1795","RawContent":null,"Title":"Added test for verifying fallbacksrc data","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/1795","RelatedDescription":"Closed or merged PR \"Added test for verifying fallbacksrc data\" (#1795)"},{"Id":"323620262","IsPullRequest":true,"CreatedAt":"2018-05-16T18:52:38","Actor":"kichalla","Number":"1794","RawContent":null,"Title":"Fixed sha-integrity content of script tags in IdentityUI's cshtml files","State":"closed","Body":"Related to https://github.com/aspnet/templating/issues/520","Url":"https://github.com/aspnet/Identity/pull/1794","RelatedDescription":"Closed or merged PR \"Fixed sha-integrity content of script tags in IdentityUI's cshtml files\" (#1794)"},{"Id":"323301301","IsPullRequest":false,"CreatedAt":"2018-05-15T17:31:46","Actor":"adams-hub","Number":"1792","RawContent":null,"Title":"ApplicationUser properties not added to AspNetUsers","State":"closed","Body":"I'm using the following code to try extend identity user, but the properties are not being added to the user table. How do I accomplish this?\r\n\r\n```\r\n    public class ApplicationUser : IdentityUser<Guid>\r\n    {\r\n        public string Name { get; set; }\r\n        public string StripeCustomerId{ get; set; }\r\n    }\r\n```\r\n```\r\n    public class ApplicationRole : IdentityRole<Guid>\r\n    {\r\n\r\n    }\r\n```\r\n\r\n```\r\n    public class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>\r\n    {\r\n        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\r\n            : base(options)\r\n        {\r\n        }\r\n        protected override void OnModelCreating(ModelBuilder builder)\r\n        {\r\n            base.OnModelCreating(builder);\r\n\r\n            builder.Entity<ApplicationUser>().Property(x => x.Id).ValueGeneratedOnAdd();\r\n            builder.Entity<ApplicationRole>().Property(x => x.Id).ValueGeneratedOnAdd();\r\n        }\r\n\r\n        public DbSet<Plan> Plans { get; set; }\r\n    }\r\n```\r\n\r\n```\r\n services.AddIdentity<ApplicationUser, ApplicationRole>(options => options.Stores.MaxLengthForKeys = 128)\r\n            .AddEntityFrameworkStores<ApplicationDbContext>()\r\n            .AddDefaultUI()\r\n            .AddDefaultTokenProviders();\r\n```","Url":"https://github.com/aspnet/Identity/issues/1792","RelatedDescription":"Closed issue \"ApplicationUser properties not added to AspNetUsers\" (#1792)"},{"Id":"322999908","IsPullRequest":false,"CreatedAt":"2018-05-14T22:11:04","Actor":"Eirenarch","Number":"1791","RawContent":null,"Title":"Consider adding overloads of IsInRole(Async) and other methods which accept user id","State":"open","Body":"The old version of ASP.NET Identity had a lot of overloads of different methods that accepted user id instead of user object. In the current version only the User object overloads are left. This forces us to write code like this\r\n\r\n`UserManager.IsInRoleAsync(new User { Id = userId }, \"Admin\");`\r\n\r\nPlease consider adding the overloads that accept userId.","Url":"https://github.com/aspnet/Identity/issues/1791","RelatedDescription":"Open issue \"Consider adding overloads of IsInRole(Async) and other methods which accept user id\" (#1791)"},{"Id":"322555410","IsPullRequest":false,"CreatedAt":"2018-05-13T01:26:40","Actor":"natelaff","Number":"1789","RawContent":null,"Title":"Guidance on new 2.1 stuff","State":"open","Body":"Can we get guidance on adding user properties, renaming Identity tables and changing key types with all of these changes for 2.1 (i.e. #1690, #1679)\r\n\r\nIt seems like this was made easier, right? Can we see how it all comes together now?\r\n\r\nThanks!\r\n","Url":"https://github.com/aspnet/Identity/issues/1789","RelatedDescription":"Open issue \"Guidance on new 2.1 stuff\" (#1789)"},{"Id":"322444572","IsPullRequest":false,"CreatedAt":"2018-05-11T21:48:23","Actor":"kspearrin","Number":"1788","RawContent":null,"Title":"Consider using URL safe base64 tokens for email verification instead of URL encoding","State":"open","Body":"As shown in this email verification example, it is required to URL encode the base64 email confirmation token before sending them in an email:\r\n\r\nhttps://github.com/aspnet/Identity/blob/47060f5e529ee4b872d9fcf66774935dafb051fc/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Register.cshtml.cs#L100\r\n\r\nThis works the majority of the time. However, at no fault of our own, there are email providers out there that will still re-encode `%` characters that appear in anchor tags with `%25`, resulting in invalid tokens.\r\n\r\nFor example, `==` (original b64 characters) ‚Üí `%3D%3D` (correct) ‚Üí `%253D%253D` (incorrect).\r\n\r\nThis is obviously a bug with the email client itself, but we have come across the case several times with multiple different email clients (for example, mailbox.org will do this).\r\n\r\nSince this really effects everyone (though most may not have noticed), I would propose that the team here should consider using URL safe base64 strings by default within the framework. This would eliminate the need for us to manually create our own TokenProvider, which we've had to resort to today. URL safe base64 strings are used, for example, in JWT tokens as a standard. Here is some sample code that we use to achieve it:\r\n\r\n        public static string Base64UrlEncode(byte[] input)\r\n        {\r\n            var output = Convert.ToBase64String(input)\r\n                .Replace('+', '-')\r\n                .Replace('/', '_')\r\n                .Replace(\"=\", string.Empty);\r\n            return output;\r\n        }\r\n\r\n        public static byte[] Base64UrlDecode(string input)\r\n        {\r\n            var output = input;\r\n            // 62nd char of encoding\r\n            output = output.Replace('-', '+');\r\n            // 63rd char of encoding\r\n            output = output.Replace('_', '/');\r\n            // Pad with trailing '='s\r\n            switch(output.Length % 4)\r\n            {\r\n                case 0:\r\n                    // No pad chars in this case\r\n                    break;\r\n                case 2:\r\n                    // Two pad chars\r\n                    output += \"==\"; break;\r\n                case 3:\r\n                    // One pad char\r\n                    output += \"=\"; break;\r\n                default:\r\n                    throw new InvalidOperationException(\"Illegal base64url string!\");\r\n            }\r\n\r\n            // Standard base64 decoder\r\n            return Convert.FromBase64String(output);\r\n        }","Url":"https://github.com/aspnet/Identity/issues/1788","RelatedDescription":"Open issue \"Consider using URL safe base64 tokens for email verification instead of URL encoding\" (#1788)"},{"Id":"322385824","IsPullRequest":false,"CreatedAt":"2018-05-11T18:07:18","Actor":"AdamAnandUS","Number":"1787","RawContent":null,"Title":"Invalid Token Error when hosted on thrid-party Server","State":"open","Body":"var result = await _userManager.ConfirmEmailAsync(user, code);\r\n\r\nThis code will never work and always ends up with \"Invalid Token\" when hosted from a third-party hosting provider where there is no RDP and where I cannot change any IIS Server Settings. Even if you submit the token manually using a POST instead of GET it will fail. I have used encode/decode and examined the token thoroughly.\r\n\r\nIt works perfectly on the local development machine and always fails on the hosted server.","Url":"https://github.com/aspnet/Identity/issues/1787","RelatedDescription":"Open issue \"Invalid Token Error when hosted on thrid-party Server\" (#1787)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"329161253","IsPullRequest":true,"CreatedAt":"2018-06-05T03:10:41","Actor":"Tratcher","Number":"2644","RawContent":null,"Title":"React to Uri scope break","State":"closed","Body":"Followup to https://github.com/aspnet/Common/pull/369\r\nSystem.Uri.ToString now includes the scope id which these tests did not want. Filter it out.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2644","RelatedDescription":"Closed or merged PR \"React to Uri scope break\" (#2644)"},{"Id":"329210617","IsPullRequest":false,"CreatedAt":"2018-06-05T02:14:33","Actor":"rezvanf","Number":"2645","RawContent":null,"Title":"Http Post not recognized on Linux (ASP .NET Core 2.0)","State":"closed","Body":"The below is my class and web method signature (note all these web methods work perfectly on Windows üëç )\r\n\r\n```\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n```\r\n\r\n```\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n```\r\n\r\n```\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n```\r\n\r\n```\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n```\r\n```\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n```\r\n```\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n```\r\n```\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n```\r\n\r\n```\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n```\r\n\r\n```\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n```\r\n```\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n```\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\n```\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2645","RelatedDescription":"Closed issue \"Http Post not recognized on Linux (ASP .NET Core 2.0)\" (#2645)"},{"Id":"329269829","IsPullRequest":false,"CreatedAt":"2018-06-05T01:26:35","Actor":"smokedog2","Number":"2647","RawContent":null,"Title":"BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'","State":"open","Body":"`[09:10:02 INF] Connection id \"0HLEAFUMLUVR5\" bad request data: \"Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\"\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.ThrowRequestTargetRejected(Span`1 target)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.OnOriginFormTarget(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.OnStartLine(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, Byte* data, Int32 length)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.TakeStartLine(ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.ParseRequest(ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()`\r\n\r\nAn error occurred If the url contains Chinese in IE\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2647","RelatedDescription":"Open issue \"BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\" (#2647)"},{"Id":"329258467","IsPullRequest":true,"CreatedAt":"2018-06-05T00:12:14","Actor":"halter73","Number":"2646","RawContent":null,"Title":"Improve tracking of connection lifetime","State":"open","Body":"I haven't seen this cause any issues in practice, but the following sample shows why the way we're currently tracking connection lifetimes is at least theoretically bad. I know we also want to start tracking non-HTTP connections. This PR doesn't do that, but I think we should still take this change in the meantime.\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConnectionManagerRace\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var manager = new ConnectionManager();\r\n            Task.Run(() => StartConnections(100, manager));\r\n            Thread.Sleep(500);\r\n            manager.CloseAllConnectionsAsync().Wait();\r\n        }\r\n\r\n        public static void StartConnections(int count, ConnectionManager manager)\r\n        {\r\n            for (var i = 0; i < count; i++)\r\n            {\r\n                var conn = new Connection(manager);\r\n                conn.StartRequestProcessing();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class ConnectionManager\r\n    {\r\n        private readonly ConcurrentDictionary<long, Connection> _connections = new ConcurrentDictionary<long, Connection>();\r\n        private long _lastId = 0;\r\n\r\n        public void Add(Connection conn)\r\n        {\r\n            _connections.TryAdd(Interlocked.Increment(ref _lastId), conn);\r\n        }\r\n\r\n        public async Task CloseAllConnectionsAsync()\r\n        {\r\n            var closeTasks = new List<Task>();\r\n\r\n            foreach (var pair in _connections)\r\n            {\r\n                closeTasks.Add(pair.Value.StopProcessingNextRequestAsync());\r\n            }\r\n\r\n            await Task.WhenAll(closeTasks);\r\n        }\r\n    }\r\n\r\n    public class Connection\r\n    {\r\n        private readonly ConnectionManager _manager;\r\n        private Task _lifetimeTask;\r\n\r\n        public Connection(ConnectionManager manager)\r\n        {\r\n            _manager = manager;\r\n        }\r\n\r\n        public Task StartRequestProcessing()\r\n        {\r\n            return _lifetimeTask = ProcessRequestsAsync();\r\n        }\r\n\r\n        public async Task ProcessRequestsAsync()\r\n        {\r\n            _manager.Add(this);\r\n            Thread.Sleep(1000);\r\n            await Task.Delay(1000);\r\n        }\r\n\r\n        public Task StopProcessingNextRequestAsync()\r\n        {\r\n            return _lifetimeTask;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhich results in:\r\n\r\n```\r\nConnectionManagerRace> dotnet run\r\n\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (The tasks argument included a null value.\r\nParameter name: tasks) ---> System.ArgumentException: The tasks argument included a null value.\r\nParameter name: tasks\r\n   at System.Threading.Tasks.Task.WhenAll(IEnumerable`1 tasks)\r\n   at ConnectionManagerRace.ConnectionManager.CloseAllConnectionsAsync() in G:\\dev\\halter73\\ConnectionManagerRace\\Program.cs:line 48\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at ConnectionManagerRace.Program.Main(String[] args) in G:\\dev\\halter73\\ConnectionManagerRace\\Program.cs:line 16\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2646","RelatedDescription":"Open PR \"Improve tracking of connection lifetime\" (#2646)"},{"Id":"328632113","IsPullRequest":false,"CreatedAt":"2018-06-04T22:06:56","Actor":"shirhatti","Number":"2639","RawContent":null,"Title":"http/2: Add support for prior knowledge http/2 connections","State":"closed","Body":"","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2639","RelatedDescription":"Closed issue \"http/2: Add support for prior knowledge http/2 connections\" (#2639)"},{"Id":"329003445","IsPullRequest":false,"CreatedAt":"2018-06-04T10:46:47","Actor":"smartcodinghub","Number":"2643","RawContent":null,"Title":"BadHttpRequestException: Request body too large causes an ERR_CONNECTION_RESET","State":"open","Body":"Hi all,\r\n\r\nWhen I try to upload a file bigger than my [RequestSizeLimit(10_000_000)] it goes through all the pipeline but it wasn't being redirected by the ExceptionHandler middleware. After a bit of investigation, the Exception Handler goes well but the connection gets reset.\r\n\r\nI'm using .Net Core 2.1. Pipeline:\r\n\r\n```\r\nif(env.IsDevelopment())\r\n{\r\n    app.UseDeveloperExceptionPage();\r\n    app.UseExceptionHandler(\"/Home/Error\");\r\n}\r\nelse\r\n{\r\n    app.UseExceptionHandler(\"/Home/Error\");\r\n}\r\n\r\n/* Caching */\r\napp.UseResponseCompression();\r\n\r\n/* Static files and resource */\r\napp.UseDefaultFiles();\r\napp.UseStaticFiles(new StaticFileOptions\r\n{\r\n    OnPrepareResponse = ctx =>\r\n    {\r\n        const string header = \"public,max-age=3600\";// An hour\r\n        ctx.Context.Response.Headers[HeaderNames.CacheControl] = header;\r\n    }\r\n});\r\n\r\n/* Authentication */\r\napp.UseAuthentication();\r\n\r\napp.UseSession();\r\n\r\n/* Mvc */\r\napp.UseMvcWithDefaultRoute();\r\n```\r\n\r\nMy method is decorated with:\r\n\r\n```\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\n[RequestSizeLimit(10_000_000)]\r\n```\r\n\r\nAm I doing something wrong or is it a bug?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2643","RelatedDescription":"Open issue \"BadHttpRequestException: Request body too large causes an ERR_CONNECTION_RESET\" (#2643)"},{"Id":"328819326","IsPullRequest":false,"CreatedAt":"2018-06-04T00:48:25","Actor":"san-sei","Number":"2642","RawContent":null,"Title":"Kestrel works very slow when it is operating under IIS","State":"closed","Body":"We are facing a strange problem with using Kestrel under IIS in which some operations (e.g. getting access CA- [CertEnrolllib ](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374850(v=vs.85).aspx)) take about 100 sec processing time to be complete.\r\nPlease note that everything works well with using IIS Express and also [http.sys](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-2.1) (instead of IIS) where every operation takes maximum 5 seconds to be complete.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2642","RelatedDescription":"Closed issue \"Kestrel works very slow when it is operating under IIS\" (#2642)"},{"Id":"327258272","IsPullRequest":false,"CreatedAt":"2018-06-01T23:10:49","Actor":"buybackoff","Number":"2620","RawContent":null,"Title":"HttpUpgradeStream doesn't have overloads for Memory<byte>","State":"closed","Body":"[HttpUpgradeStream](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Kestrel.Core/Internal/Http/HttpUpgradeStream.cs) was omitted from https://github.com/aspnet/KestrelHttpServer/pull/2333, while it's request and response streams do have those methods. Found it while investigating https://github.com/dotnet/corefx/issues/29951. \r\n\r\nAlso cannot understand yet if the request and response streams use non-allocating ValueTask from https://github.com/dotnet/corefx/issues/27445?\r\n\r\nSo far all performance benefits from 2.1 are not available for WebSockets via `Microsoft.AspNetCore.WebSockets` middleware.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2620","RelatedDescription":"Closed issue \"HttpUpgradeStream doesn't have overloads for Memory<byte>\" (#2620)"},{"Id":"328589464","IsPullRequest":false,"CreatedAt":"2018-06-01T21:41:23","Actor":"Tratcher","Number":"2637","RawContent":null,"Title":"Failing test AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success","State":"closed","Body":"http://aspnetci/viewLog.html?buildId=479149&tab=buildResultsDiv&buildTypeId=Lite_KestrelStressTest#testNameId3749291059822545939\r\n\r\nThis is a recent regression on netcoreapp2.2. net461 is not affected. .NET Core likely changed something with System.URI and IPv6 ScopeIds\r\n\r\nPossibly picked up by https://github.com/aspnet/Universe/pull/1184#issuecomment-393931025.\r\n\r\n```\r\n======= Failed test run #1 ==========\r\nSystem.Net.Http.HttpRequestException : Response status code does not indicate success: 400 (Bad Request).\r\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.ReadResponse(Stream stream)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(String requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_Success(String addressInput, String[] testUrls, Int32 testPort) in /_/test/Kestrel.FunctionalTests/AddressRegistrationTests.cs:line 170\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(String addressInput, String testUrl) in /_/test/Kestrel.FunctionalTests/AddressRegistrationTests.cs:line 139\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test RegisterAddresses_IPv6ScopeId_Success-http://[fe80::9dee:e4c1:f54b:bf7f%14]:0/-http://[fe80::9dee:e4c1:f54b:bf7f%14] at 2018-06-01T05:13:25\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.FunctionalTests\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLE7FPI6L76O\" started.\r\n| [0.007s] Microsoft.AspNetCore.Server.Kestrel Information: Connection id \"0HLE7FPI6L76O\" bad request data: \"Invalid Host header: '[fe80::9dee:e4c1:f54b:bf7f%14]:58197'\"\r\n| Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid Host header: '[fe80::9dee:e4c1:f54b:bf7f%14]:58197'\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException.Throw(RequestRejectionReason reason, String detail) in /_/src/Kestrel.Core/BadHttpRequestException.cs:line 129\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.ValidateIPv6Host(String hostText) in /_/src/Kestrel.Core/Internal/Infrastructure/HttpUtilities.cs:line 488\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.EnsureHostHeaderExists() in /_/src/Kestrel.Core/Internal/Http/Http1Connection.cs:line 394\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.TryParseRequest(ReadResult result, Boolean& endConnection) in /_/src/Kestrel.Core/Internal/Http/Http1Connection.cs:line 520\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 519\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 455\r\n| [0.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLE7FPI6L76O\" disconnecting.\r\n| [0.011s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLE7FPI6L76O\" sending FIN.\r\n| [0.012s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLE7FPI6L76O\" stopped.\r\n| [0.012s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.016s] TestLifetime Information: Finished test RegisterAddresses_IPv6ScopeId_Success-http://[fe80::9dee:e4c1:f54b:bf7f%14]:0/-http://[fe80::9dee:e4c1:f54b:bf7f%14] in 0.0147831s\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2637","RelatedDescription":"Closed issue \"Failing test AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success\" (#2637)"},{"Id":"328646533","IsPullRequest":false,"CreatedAt":"2018-06-01T20:13:09","Actor":"wasabii","Number":"2641","RawContent":null,"Title":"BadHttpRequestException (encoding?)","State":"open","Body":"```\r\ninfo: Microsoft.AspNetCore.Server.Kestrel[17]\r\n      Connection id \"0HLE7VFNTA097\" bad request data: \"Invalid request line: 'PUT %2fLM%2fW3SVC%2f2%2fROOT(oXvpnxcuEWqKAgOETha32JavYZ6eCqrpTN5%2fHxWS854%3d)%2fk1im0mymglivv5rttkwn4fle HTTP/1.1\\x0D\\x0A'\"\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid request line: 'PUT %2fLM%2fW3SVC%2f2%2fROOT(oXvpnxcuEWqKAgOETha32JavYZ6eCqrpTN5%2fHxWS854%3d)%2fk1im0mymglivv5rttkwn4fle HTTP/1.1\\x0D\\x0A'\r\n```\r\n\r\nDon't even ask me what I'm trying to get connecting. Weird old project that does a lot of stuff by hand.\r\n\r\nWhat's the deal with this though? The best I have is the encoding is odd. Maybe the `%2f` on the front?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2641","RelatedDescription":"Open issue \"BadHttpRequestException (encoding?)\" (#2641)"},{"Id":"328634387","IsPullRequest":false,"CreatedAt":"2018-06-01T19:28:21","Actor":"shirhatti","Number":"2640","RawContent":null,"Title":"http/2: Create automation to run h2spec","State":"open","Body":"Initial goal is to create baseline automation and disable it on the CI.\r\nLook at what Websockets has done with Autobahn tests","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2640","RelatedDescription":"Open issue \"http/2: Create automation to run h2spec\" (#2640)"},{"Id":"328619140","IsPullRequest":false,"CreatedAt":"2018-06-01T18:33:20","Actor":"halter73","Number":"2638","RawContent":null,"Title":"MemoryPoolBlock.Dispose can throw and ODE during server shutdown leading to an error log from the Socket Transport ","State":"open","Body":"MemoryPoolBlock.Dispose() can throw and ODE (ironic I know) during server shutdown leading to an error log from the Socket Transport. Maybe we should to backport https://github.com/aspnet/Common/pull/344/files#diff-708aafde37872ea09e25cfadd4d95f0eL56\r\n\r\nThis was originally reported by @seanmars in https://github.com/aspnet/KestrelHttpServer/issues/2254#issuecomment-393830106:\r\n\r\n> When i ctrl+c to close the server it will get exception about \"Unexpected exception in SocketConnection.StartAsync\"\r\n\r\n> ```\r\n> Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Unexpected exception in SocketConnection.StartAsync\r\n> System.ObjectDisposedException: Cannot access a disposed object.\r\n> Object name: 'MemoryPoolBlock'.\r\n>    at System.Buffers.ThrowHelper.ThrowObjectDisposedException(ExceptionArgument argument)\r\n>    at System.Buffers.MemoryPoolBlock.Dispose()\r\n>    at System.IO.Pipelines.BufferSegment.ResetMemory()\r\n>    at System.IO.Pipelines.Pipe.CompletePipe()\r\n>    at System.IO.Pipelines.Pipe.CompleteWriter(Exception exception)\r\n>    at System.IO.Pipelines.Pipe.DefaultPipeWriter.Complete(Exception exception)\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.StartAsync(IConnectionDispatcher connectionDispatcher)\r\n> ```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2638","RelatedDescription":"Open issue \"MemoryPoolBlock.Dispose can throw and ODE during server shutdown leading to an error log from the Socket Transport \" (#2638)"},{"Id":"328324222","IsPullRequest":false,"CreatedAt":"2018-05-31T22:53:07","Actor":"halter73","Number":"2636","RawContent":null,"Title":"[2.1.3] Consistently handle connection aborts","State":"open","Body":"We should backport backport of graceful server shutdown fixes which improve functional test reliability, and followup PRs that normalize the exceptions thrown by the libuv and socket transports while providing better logs and error messages.\r\n\r\nHere are the dev PRs that should backported to 2.1 release branch:\r\n\r\n#2566\r\n#2574\r\n#2547\r\n#2612","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2636","RelatedDescription":"Open issue \"[2.1.3] Consistently handle connection aborts\" (#2636)"},{"Id":"327533171","IsPullRequest":true,"CreatedAt":"2018-05-31T22:45:27","Actor":"halter73","Number":"2623","RawContent":null,"Title":"[2.1.1] Provide clearer exception message for breaking change","State":"closed","Body":"- In 2.1, the default transport (Sockets) can no longer bind to certain\r\n  endpoint types (Unix domain sockets and open socket handles).\r\n\r\n#2616","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2623","RelatedDescription":"Closed or merged PR \"[2.1.1] Provide clearer exception message for breaking change\" (#2623)"},{"Id":"327529422","IsPullRequest":true,"CreatedAt":"2018-05-31T22:44:40","Actor":"halter73","Number":"2622","RawContent":null,"Title":"[2.1.1] Add Memory<byte> overloads to HttpUpgradeStream","State":"closed","Body":"#2620","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2622","RelatedDescription":"Closed or merged PR \"[2.1.1] Add Memory<byte> overloads to HttpUpgradeStream\" (#2622)"},{"Id":"327946385","IsPullRequest":true,"CreatedAt":"2018-05-31T22:39:26","Actor":"halter73","Number":"2632","RawContent":null,"Title":"Unskip and fix race in ConnectionClosedEvenIfAppSwallowsException","State":"closed","Body":"#2464\r\n\r\nThis is the same fix @mikeharder made for RequestTimesOutWhenRequestBodyNotReceivedAtSpecifiedMinimumRate with #2589.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2632","RelatedDescription":"Closed or merged PR \"Unskip and fix race in ConnectionClosedEvenIfAppSwallowsException\" (#2632)"},{"Id":"328319479","IsPullRequest":false,"CreatedAt":"2018-05-31T22:30:25","Actor":"halter73","Number":"2635","RawContent":null,"Title":"Flaky Test: macOS libuv functional tests","State":"open","Body":"There's a a problem we see a lot in our macOS libuv functional tests. It's not consistent at all which test fails, but it always surfaces as an empty response.\r\n\r\nThe test ran twice with the libuv transport. You can see that in the [log for the successful test run](https://ci3.dot.net/job/aspnet_KestrelHttpServer/job/dev/job/osx-Configuration_Release_prtest/323/artifact/netci-archived-logs/Libuv.FunctionalTests/netcoreapp2.2/RequestTests/Expect100ContinueHonored-http_127.0.0.1_0.0.log), the request is handled, a response is written, and only after that does the server close the connection as indicated by the \"disconnecting\" and \"sending FIN\" logs.\r\n\r\n```\r\n[0.001s] [TestLifetime] [Information] Starting test \"Expect100ContinueHonored-http://127.0.0.1:0\" at \"2018-05-31T00:28:54\"\r\n[0.002s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting starting\r\n[0.014s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting started\r\n[0.014s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Loaded hosting startup assembly \"Libuv.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"\r\n[0.016s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" started.\r\n[0.017s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Information] Request starting HTTP/1.1 POST http:///  11\r\n[0.017s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\", Request id \"\"0HLE6HK9PG7K6:00000001\"\": started reading request body.\r\n[0.018s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\", Request id \"\"0HLE6HK9PG7K6:00000001\"\": done reading request body.\r\n[0.021s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Information] Request finished in 3.967ms 200 \r\n[0.021s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" disconnecting.\r\n[0.021s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" sending FIN.\r\n[0.022s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting shutdown\r\n[0.022s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" stopped.\r\n[0.023s] [TestLifetime] [Information] Finished test \"Expect100ContinueHonored-http://127.0.0.1:0\" in 0.021416s\r\n```\r\n\r\nIn the [log for the failed test run](https://ci3.dot.net/job/aspnet_KestrelHttpServer/job/dev/job/osx-Configuration_Release_prtest/323/artifact/netci-archived-logs/Libuv.FunctionalTests/netcoreapp2.2/RequestTests/Expect100ContinueHonored-http_127.0.0.1_0.log) the client sends a FIN immediately after opening connection prior to ever sending a request, so the server appropriately closes the connection immediately. This is indicated by the \"received FIN\" log by the server. This can *only* be logged if a -4095 status is observed by the libuv transport's read callback. Not only is the client not supposed to send a FIN prior to sending the request (which is obvious) it's also supposed to wait to send a FIN until after it receives a complete response, so there's no way this should be happening.\r\n\r\n```\r\n[0.001s] [TestLifetime] [Information] Starting test \"Expect100ContinueHonored-http://127.0.0.1:0\" at \"2018-05-31T00:28:54\"\r\n[0.008s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting starting\r\n[0.010s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting started\r\n[0.010s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Loaded hosting startup assembly \"Libuv.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" started.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" received FIN.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" disconnecting.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" sending FIN.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" stopped.\r\n[0.016s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting shutdown\r\n[0.018s] [TestLifetime] [Information] Finished test \"Expect100ContinueHonored-http://127.0.0.1:0\" in 0.016812s\r\n```\r\n\r\nI would say it has to be a client bug except the client in this case is Kestrel's `TestConnection` which is written directly on top of a managed Socket. The Socket isn't shutdown or disposed until the failing assertion completes. More evidence that this isn't a client bug comes from the fact that the same tests run with the Socket transport never fail this way, and these tests also don't fail in this way on Windows.\r\n\r\nSee https://github.com/aspnet/KestrelHttpServer/pull/2632#issuecomment-393702116","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2635","RelatedDescription":"Open issue \"Flaky Test: macOS libuv functional tests\" (#2635)"},{"Id":"328179894","IsPullRequest":false,"CreatedAt":"2018-05-31T15:16:49","Actor":"samsosa","Number":"2634","RawContent":null,"Title":"Kestrel 2.1 ListenUnixSocket() throws 'Only ListenType.IPEndPoint is supported'","State":"closed","Body":"The old version works just fine but after update 2.1 an exception is thrown when setting `ListenUnixSocket`.\r\n\r\nUsing the following config:\r\n`ListenUnixSocket(\"/var/sockets/kestrel.sock\")`\r\n\r\nLeads to:\r\n```\r\nSystem.ArgumentException: Only ListenType.IPEndPoint is supported.\r\nParameter name: endPointInformation\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportFactory.Create(IEndPointInformation endPointInformation, IConnectionDispatcher dispatcher)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions.BindAsync(AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.BindAsync(AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\r\n   at HttpServer.StartAsync() in C:\\RefSource\\Base\\HttpServer\\HttpServer.cs:line 266\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2634","RelatedDescription":"Closed issue \"Kestrel 2.1 ListenUnixSocket() throws 'Only ListenType.IPEndPoint is supported'\" (#2634)"},{"Id":"328153321","IsPullRequest":false,"CreatedAt":"2018-05-31T14:06:39","Actor":"hismichael","Number":"2633","RawContent":null,"Title":"Kestrel 2.1 refuses to respond after doing several requests","State":"open","Body":"My working code is to create an embedded kestrel instance. While when I upgraded it to based on v2.1 (and from LibUv to Sockets transport), it only serves first several requests once running, and then doesn't respond to subsequent requests (no more calls to `ProcessRequestAsync`() happen), my Chrome browser reports \"xxxx refused to connect\".\r\n\"\r\n\r\nThe server creation code is as below:\r\n\r\n    ```\r\n    SocketTransportFactory transportFactory= new SocketTransportFactory(Options.Create(new SocketTransportOptions()), Lifetime, NullLoggerFactory.Instance);\r\n    ```\r\n    LoggerFactory loggerFactory = new LoggerFactory();\r\n    ```\r\n    // init the embedded server\r\n    KestrelServerOptions options = new KestrelServerOptions();\r\n    server = new KestrelServer(Options.Create(options), transportFactory, loggerFactory );\r\n    ICollection<string> addrs = server.Features.Get<IServerAddressesFeature>().Addresses;\r\n    addrs.Add(someAddr.Trim());\r\n    ```\r\n\r\nI guess there should be some incompatible changes that I don't know. Please help me out.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2633","RelatedDescription":"Open issue \"Kestrel 2.1 refuses to respond after doing several requests\" (#2633)"},{"Id":"327867383","IsPullRequest":true,"CreatedAt":"2018-05-30T22:42:38","Actor":"Tratcher","Number":"2626","RawContent":null,"Title":"Make ListenOptions.Protocols public again for HTTP/2 work","State":"closed","Body":"#73 Making this public again in preparation for HTTP/2 development.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2626","RelatedDescription":"Closed or merged PR \"Make ListenOptions.Protocols public again for HTTP/2 work\" (#2626)"},{"Id":"327920947","IsPullRequest":false,"CreatedAt":"2018-05-30T22:24:04","Actor":"joshmackey","Number":"2631","RawContent":null,"Title":"Misleading TaskCanceledException","State":"open","Body":"I have a WebApi endpoint that parses out the Request.Body itself rather than using Model binding due to performance reasons.\r\n\r\nDuring some requests, I was getting a TaskCanceledException from a TextReader that I never gave any CancellationTokens too. After investigation, I found out that any read operations on the Request.Body after the Request was aborted will throw TaskCanceledExceptions. The stack trace at the time didn't list any Kestrel level code so I spent a lot of time trying to find out how a Stream can possibly cancel a token I never gave it.\r\n\r\nThis is a bit misleading and should probably change I think.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2631","RelatedDescription":"Open issue \"Misleading TaskCanceledException\" (#2631)"},{"Id":"327874848","IsPullRequest":false,"CreatedAt":"2018-05-30T19:51:43","Actor":"shirhatti","Number":"2630","RawContent":null,"Title":"http/2: Trailers","State":"open","Body":"We need to re-visit trailers to design a consistent consumption model whether you're using http/1.1 or http/2","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2630","RelatedDescription":"Open issue \"http/2: Trailers\" (#2630)"},{"Id":"327872727","IsPullRequest":false,"CreatedAt":"2018-05-30T19:45:03","Actor":"shirhatti","Number":"2629","RawContent":null,"Title":"http/2: Flow Control","State":"open","Body":"How does http/2 Flow Control impact our existing rate limits since all our limits are applied at a per connection-level?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2629","RelatedDescription":"Open issue \"http/2: Flow Control\" (#2629)"},{"Id":"327871897","IsPullRequest":false,"CreatedAt":"2018-05-30T19:42:35","Actor":"shirhatti","Number":"2628","RawContent":null,"Title":"http/2: Framing","State":"open","Body":"Our current http/2 framing work pre-dates Memory/Span and will need to be re-visited for perf/quality","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2628","RelatedDescription":"Open issue \"http/2: Framing\" (#2628)"},{"Id":"327868462","IsPullRequest":false,"CreatedAt":"2018-05-30T19:31:25","Actor":"shirhatti","Number":"2627","RawContent":null,"Title":"http/2: Settings","State":"open","Body":"HTTP/2 allows for both the client and the server to send a SETTINGS frame to set preferences and constraints on how endpoints communicate.\r\n\r\nThe spec currently lists 6 supported SETTINGS Parameters\r\n\r\n- SETTINGS_HEADER_TABLE_SIZE (0x1)\r\n- SETTINGS_ENABLE_PUSH (0x2)\r\n- SETTINGS_MAX_CONCURRENT_STREAMS (0x3)\r\n- SETTINGS_INITIAL_WINDOW_SIZE (0x4)\r\n- SETTINGS_MAX_FRAME_SIZE (0x5)\r\n- SETTINGS_MAX_HEADER_LIST_SIZE (0x6)\r\n\r\nWe need to\r\n- [ ] Pick reasonable defaults and constraints on permissible values for each of these settings parameters.\r\n- [ ] Expose these settings via Kestrel Options\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2627","RelatedDescription":"Open issue \"http/2: Settings\" (#2627)"},{"Id":"327865860","IsPullRequest":false,"CreatedAt":"2018-05-30T19:22:50","Actor":"shirhatti","Number":"2625","RawContent":null,"Title":"http/2: Investigate tools for perf/stress testing","State":"open","Body":"We currently use wrk for perf testing. We'll need to investigate and identify a suitable replacement for http/2\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2625","RelatedDescription":"Open issue \"http/2: Investigate tools for perf/stress testing\" (#2625)"},{"Id":"327849158","IsPullRequest":false,"CreatedAt":"2018-05-30T18:32:21","Actor":"halter73","Number":"2624","RawContent":null,"Title":"Update framework conditional compilation directives","State":"open","Body":"We want compilation to fail if we start targeting a framework not accounted for in the conditional compilation directives. [This](https://github.com/aspnet/MusicStore/blob/d971bfc8b777ca4098a951727218aef32cb9ebd5/test/MusicStore.E2ETests/Common/Helpers.cs#L51-L57) is an example of how to do this.\r\n\r\nSee https://github.com/aspnet/KestrelHttpServer/pull/2622/files#r191625156. We can make this change as soon as #2622 is merged into the dev branch.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2624","RelatedDescription":"Open issue \"Update framework conditional compilation directives\" (#2624)"},{"Id":"327163107","IsPullRequest":true,"CreatedAt":"2018-05-29T23:07:42","Actor":"halter73","Number":"2618","RawContent":null,"Title":"[2.1.1] Use correct TaskCompletionSource ctor","State":"closed","Body":"These are test only changes. It's the combination of the following PRs backported for release/2.1:\r\n\r\n- https://github.com/aspnet/KestrelHttpServer/pull/2531\r\n- https://github.com/aspnet/KestrelHttpServer/pull/2567\r\n- Parts of https://github.com/aspnet/KestrelHttpServer/pull/2526\r\n- Parts of https://github.com/aspnet/KestrelHttpServer/pull/2547","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2618","RelatedDescription":"Closed or merged PR \"[2.1.1] Use correct TaskCompletionSource ctor\" (#2618)"},{"Id":"327406868","IsPullRequest":false,"CreatedAt":"2018-05-29T16:55:52","Actor":"rianjs","Number":"2621","RawContent":null,"Title":"Do you have an automated process to ensure that Kestrel performance doesn't regress?","State":"open","Body":"I [asked a question on StackOverflow](https://stackoverflow.com/questions/50587184/is-it-possible-to-use-benchmark-net-to-fail-a-ci-build-if-performance-has-regr) this morning about implementing a CI build that would fail if performance regressed too much. It occurred to me that Kestrel might have something like this using Benchmark.NET.\r\n\r\nThere's obviously [a bunch of performance tests in Kestrel](https://github.com/aspnet/KestrelHttpServer/tree/6c82f78c657145404bcdbe403024b2d93ca7699a/benchmarks/Kestrel.Performance). But is the process for making sure egregious perf regressions don't occur ad hoc or is it systematized? If it's systematized, how did you do it?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2621","RelatedDescription":"Open issue \"Do you have an automated process to ensure that Kestrel performance doesn't regress?\" (#2621)"},{"Id":"327178006","IsPullRequest":true,"CreatedAt":"2018-05-29T05:51:08","Actor":"halter73","Number":"2619","RawContent":null,"Title":"[2.1.3] Consistently handle connection aborts","State":"open","Body":"This is a backport of graceful server shutdown fixes which improve functional test reliability, and followup PRs that normalize the exceptions thrown by the libuv and socket transports while providing better logs and error messages.\r\n\r\nThe following PRs backported to 2.1 release branch:\r\n\r\n- https://github.com/aspnet/KestrelHttpServer/pull/2566\r\n- https://github.com/aspnet/KestrelHttpServer/pull/2574\r\n- https://github.com/aspnet/KestrelHttpServer/pull/2547\r\n- https://github.com/aspnet/KestrelHttpServer/pull/2612","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2619","RelatedDescription":"Open PR \"[2.1.3] Consistently handle connection aborts\" (#2619)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"329172976","IsPullRequest":false,"CreatedAt":"2018-06-04T20:32:46","Actor":"Tadimsky","Number":"2380","RawContent":null,"Title":"Disable creation of new *.Views.dll?","State":"closed","Body":"I'm upgrading to .NET Core 2.1 and ran into an issue during compilation because of an FxCop violation (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1016-mark-assemblies-with-assemblyversionattribute).\r\nIt turned out that the `*.Views.dll` was not compiled with a DLL version. I'm using [GitVersioning](https://github.com/AArnott/Nerdbank.GitVersioning) to do versioning of my application DLLs but that seems to not pick up the new `*.Views.dll` output and so it ends up without a version stamp.\r\n\r\nIs there some way to disable the generation of this DLL (and keep it part of my ASP.Net Core application)? ","Url":"https://github.com/aspnet/Razor/issues/2380","RelatedDescription":"Closed issue \"Disable creation of new *.Views.dll?\" (#2380)"},{"Id":"329179333","IsPullRequest":false,"CreatedAt":"2018-06-04T19:07:13","Actor":"NTaylorMullen","Number":"2381","RawContent":null,"Title":"Use document snapshots when parsing Razor files.","State":"open","Body":"Today the parser is highly coupled to the idea of a background parser that requires in-depth knowledge of what makes up a documents context (project file path, its project engine etc.) and to idea of a background queue of changes pumping through the system.\r\n\r\nA major cost in this issue is testing.","Url":"https://github.com/aspnet/Razor/issues/2381","RelatedDescription":"Open issue \"Use document snapshots when parsing Razor files.\" (#2381)"},{"Id":"329002006","IsPullRequest":false,"CreatedAt":"2018-06-04T10:41:59","Actor":"ViperGTI007","Number":"2379","RawContent":null,"Title":"Taghelpers intellisense broken after last update","State":"open","Body":"Hi\r\n\r\nI updated my Visual Studio on Friday together with the Microsoft.AspNetCore packages (from 2.0.4 to 2.1.0) for my project.  It seems that the upgrade of Microsoft.AspNetCore to 2.1.0 essentially broke my intellisense for TagHelpers.  The behaviour is basically the same as the issue in the link below, except this seems to be related to the Nuget package version for the project rather than Visual Studio itself.\r\nhttps://github.com/aspnet/Razor/issues/1628\r\n\r\nI followed the advice in the link above (when I thought the issue was VS related):  Tried disabling and enabling the Razor services, did a full repair and still nothing.  Both custom developed tag helpers and the standard tag helpers doesn't work with intellisense, although when running the project, they do what they're meant to do.  Everything was working fine on Thursday.\r\n\r\nTo reproduce, simply open an existing project that uses the Microsoft.AspNetCore v2.0.4 packages, open Nuget and update all packages to the latest versions.  Open any page that uses a TagHelper or try start typing a taghelper on any view.","Url":"https://github.com/aspnet/Razor/issues/2379","RelatedDescription":"Open issue \"Taghelpers intellisense broken after last update\" (#2379)"},{"Id":"328363380","IsPullRequest":false,"CreatedAt":"2018-06-01T02:58:07","Actor":"rynowak","Number":"2378","RawContent":null,"Title":"Copy-pasting an item in an RCL project adds junk to the project file","State":"open","Body":"1. Create a new RCL project in VS (2.1 RTM)\r\n2. Copy the `Page1.cshtml` file in solution explorer\r\n3. Paste\r\n\r\nYou get this.\r\n\r\n```\r\n  <ItemGroup>\r\n    <Content Update=\"Areas\\MyFeature\\Pages\\Page1 - Copy.cshtml\">\r\n      <Pack>$(IncludeRazorContentInPack)</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Razor/issues/2378","RelatedDescription":"Open issue \"Copy-pasting an item in an RCL project adds junk to the project file\" (#2378)"},{"Id":"326515003","IsPullRequest":false,"CreatedAt":"2018-05-31T18:14:58","Actor":"BachynskyiBohdan","Number":"2371","RawContent":null,"Title":"Razor can't understand @ symbol (even @@) in pattern attribute","State":"closed","Body":"Example:\r\n`<input pattern=\"\\w+(@)\\w+(.)\\w\"/>` or `<input pattern=\"\\w+(@@)\\w+(.)\\w\"/>`\r\n\r\nThis approach trigger parser error:\r\n\r\n> Description: An error occurred during the parsing of a resource required to service this request. Please review the following specific parse error details and modify your source file appropriately. \r\n\r\n> Parser Error Message: \")\" is not valid at the start of a code block.  Only identifiers, keywords, comments, \"(\" and \"{\" are valid.\r\n","Url":"https://github.com/aspnet/Razor/issues/2371","RelatedDescription":"Closed issue \"Razor can't understand @ symbol (even @@) in pattern attribute\" (#2371)"},{"Id":"327472580","IsPullRequest":true,"CreatedAt":"2018-05-30T22:34:29","Actor":"AmadeusW","Number":"2376","RawContent":null,"Title":"Updates the Editor Nuget packages","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2376","RelatedDescription":"Closed or merged PR \"Updates the Editor Nuget packages\" (#2376)"},{"Id":"327458846","IsPullRequest":false,"CreatedAt":"2018-05-30T18:58:40","Actor":"NTaylorMullen","Number":"2373","RawContent":null,"Title":"Track DocumentState information for fallback projects.","State":"closed","Body":"Today our default project host consumes Razor SDK information (only present in 2.1) to identify Razor files and their if they've been added or remove to the world. This way our project system can track document information despite being >= 2.1","Url":"https://github.com/aspnet/Razor/issues/2373","RelatedDescription":"Closed issue \"Track DocumentState information for fallback projects.\" (#2373)"},{"Id":"327540488","IsPullRequest":true,"CreatedAt":"2018-05-30T18:15:27","Actor":"NTaylorMullen","Number":"2377","RawContent":null,"Title":"Add Razor document tracking to FallbackRazorProjectHost.","State":"closed","Body":"- VisualStudio defaults to adding a `<none>` link item when right click -> add existing item for Razor files; therefore, this also includes the knowledge of the \"None\" item group when finding Razor files.\r\n- Added unit and functional tests to verify the new `FallbackRazorProjectHost` behavior.\r\n- Added new schema items to represent the `Content` and `None` item type information (pulled from the project system repo).\r\n\r\n#2373","Url":"https://github.com/aspnet/Razor/pull/2377","RelatedDescription":"Closed or merged PR \"Add Razor document tracking to FallbackRazorProjectHost.\" (#2377)"},{"Id":"325912912","IsPullRequest":false,"CreatedAt":"2018-05-29T22:21:31","Actor":"pranavkm","Number":"2369","RawContent":null,"Title":"Port https://github.com/aspnet/Razor/issues/2363 to 2.1.1","State":"closed","Body":"Issue: https://github.com/aspnet/Razor/issues/2363\r\n\r\nPR: https://github.com/aspnet/Razor/pull/2368","Url":"https://github.com/aspnet/Razor/issues/2369","RelatedDescription":"Closed issue \"Port https://github.com/aspnet/Razor/issues/2363 to 2.1.1\" (#2369)"},{"Id":"327466476","IsPullRequest":true,"CreatedAt":"2018-05-29T22:17:02","Actor":"pranavkm","Number":"2375","RawContent":null,"Title":"Allow publish to work when BuildProjectReferences=false","State":"closed","Body":"Fixes #2363","Url":"https://github.com/aspnet/Razor/pull/2375","RelatedDescription":"Closed or merged PR \"Allow publish to work when BuildProjectReferences=false\" (#2375)"},{"Id":"327459285","IsPullRequest":false,"CreatedAt":"2018-05-29T19:39:15","Actor":"NTaylorMullen","Number":"2374","RawContent":null,"Title":"Implement DocumentSnapshot tracking in VS 4 Mac","State":"open","Body":"When we eventually move all of our internal parsing infrastructure to use DocumentSnapshots we'll need to  have the correct information flowing through the VS4Mac side of the world.","Url":"https://github.com/aspnet/Razor/issues/2374","RelatedDescription":"Open issue \"Implement DocumentSnapshot tracking in VS 4 Mac\" (#2374)"},{"Id":"326688946","IsPullRequest":true,"CreatedAt":"2018-05-29T16:35:56","Actor":"ryanbrandenburg","Number":"2372","RawContent":null,"Title":"Override MicrosoftNETCoreApp22PackageVersion","State":"closed","Body":"In Universe, when the versions of MicrosoftNETCoreApp22PackageVersion are different between Universe and Razor, the samples get passed the Razor one, which is wrong. Here I'm attempting to prevent that from happening.\r\n\r\n@NTaylorMullen is my understanding of this correct?","Url":"https://github.com/aspnet/Razor/pull/2372","RelatedDescription":"Closed or merged PR \"Override MicrosoftNETCoreApp22PackageVersion\" (#2372)"},{"Id":"325911160","IsPullRequest":true,"CreatedAt":"2018-05-25T18:13:28","Actor":"pranavkm","Number":"2368","RawContent":null,"Title":"Allow publish to work when BuildProjectReferences=false","State":"closed","Body":"Fixes #2363","Url":"https://github.com/aspnet/Razor/pull/2368","RelatedDescription":"Closed or merged PR \"Allow publish to work when BuildProjectReferences=false\" (#2368)"},{"Id":"325434454","IsPullRequest":false,"CreatedAt":"2018-05-25T18:13:28","Actor":"Xeevis","Number":"2363","RawContent":null,"Title":"[2.1 RC1] Can't publish website that has dependency on Razor Class Library which has using from another library dependency","State":"closed","Body":"![image](https://user-images.githubusercontent.com/5835044/40385020-947771d0-5e05-11e8-8169-44ccc9f4ec59.png)\r\n\r\n```\r\nSystem.AggregateException: One or more errors occurred. ---> System.Exception: Build failed. Check the Output window for more details.\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at Microsoft.VisualStudio.Web.Publish.PublishService.VsWebProjectPublish.<>c__DisplayClass41_0.<PublishAsync>b__2()\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.ViewModel.ProfileSelectorViewModel.<RunPublishTaskAsync>d__116.MoveNext()\r\n---> (Inner Exception #0) System.Exception: Build failed. Check the Output window for more details.<---\r\n```\r\n\r\nSteps to reproduce:\r\n---\r\n1. In latest Visual Studio 2017 (15.7.2) create new **Website** .NET Core 2.1 ASP.NET Core Web application > Razor Pages or MVC\r\n2. Add new project ASP.NET Core Web application > **Razor Class Library**\r\n3. Add new project **Class Library** (.NET Standard)\r\n4. Add project references: \r\n    **Razor Class Library** to reference **Class Library**\r\n    **Website** to reference **Razor Class Library**\r\n5. In **Razor Class Library** add new class and inside this class add using of the referenced **Class Library** `using ClassLibrary1;`\r\n6. Publish **Website** to a folder\r\n\r\nThis setup builds and works in development, but publish will throw mentioned error.\r\n","Url":"https://github.com/aspnet/Razor/issues/2363","RelatedDescription":"Closed issue \"[2.1 RC1] Can't publish website that has dependency on Razor Class Library which has using from another library dependency\" (#2363)"},{"Id":"326251633","IsPullRequest":true,"CreatedAt":"2018-05-24T19:20:59","Actor":"ryanbrandenburg","Number":"2370","RawContent":null,"Title":"Don't police netcoreapp version","State":"closed","Body":"Some of the tests in this repo fail when we move to the new netcoreapp due to a new check, let's disable the check.","Url":"https://github.com/aspnet/Razor/pull/2370","RelatedDescription":"Closed or merged PR \"Don't police netcoreapp version\" (#2370)"},{"Id":"325484423","IsPullRequest":true,"CreatedAt":"2018-05-24T18:00:33","Actor":"ajaybhargavb","Number":"2365","RawContent":null,"Title":"Fix test failure on MacOS","State":"closed","Body":"https://github.com/aspnet/Razor/issues/2219#issuecomment-391159307","Url":"https://github.com/aspnet/Razor/pull/2365","RelatedDescription":"Closed or merged PR \"Fix test failure on MacOS\" (#2365)"},{"Id":"325501947","IsPullRequest":true,"CreatedAt":"2018-05-24T17:58:51","Actor":"ajaybhargavb","Number":"2367","RawContent":null,"Title":"Don't run build server when building testapps in-place","State":"closed","Body":"https://github.com/aspnet/Razor/issues/2190\r\n\r\nThis is one of the nice to have fixes for mq. I added a new property because just setting `UseRazorBuildServer` to false and overriding it will preventing us from testing a few scenarios.","Url":"https://github.com/aspnet/Razor/pull/2367","RelatedDescription":"Closed or merged PR \"Don't run build server when building testapps in-place\" (#2367)"},{"Id":"325408251","IsPullRequest":false,"CreatedAt":"2018-05-22T23:49:02","Actor":"NTaylorMullen","Number":"2362","RawContent":null,"Title":"Own serializing TagHelperDescriptors when using TagHelperDescriptorJsonConverter. to Enable our JsonConverters to ignore case when reading properties ","State":"closed","Body":"In LiveShare scenarios custom converters can impact how our TagHelperDescriptors serialize (by default they serialize camel case); because of this when our json converter attempts to read a serialized `TagHelperDescriptor` we null ref because we're looking for pascal cased properties.","Url":"https://github.com/aspnet/Razor/issues/2362","RelatedDescription":"Closed issue \"Own serializing TagHelperDescriptors when using TagHelperDescriptorJsonConverter. to Enable our JsonConverters to ignore case when reading properties \" (#2362)"},{"Id":"325446604","IsPullRequest":true,"CreatedAt":"2018-05-22T23:48:27","Actor":"NTaylorMullen","Number":"2364","RawContent":null,"Title":" Make TagHelperDescriptor deserialization case insensitive.","State":"closed","Body":"- We don't serialize TagHelperDescriptors so we don't control what casing property names are passed down to us. Instead of doing all the work to serialize TagHelperDescriptor I decided to make the deserialization process a little more flexible.\r\n- Added a TagHelperDescriptor camel case serialization test.\r\n\r\n#2362","Url":"https://github.com/aspnet/Razor/pull/2364","RelatedDescription":"Closed or merged PR \" Make TagHelperDescriptor deserialization case insensitive.\" (#2364)"},{"Id":"325491144","IsPullRequest":true,"CreatedAt":"2018-05-22T23:41:32","Actor":"ryanbrandenburg","Number":"2366","RawContent":null,"Title":"netcoreapp2.2","State":"closed","Body":"This should fix the integration tests that will fail once we take the new core-fx.","Url":"https://github.com/aspnet/Razor/pull/2366","RelatedDescription":"Closed or merged PR \"netcoreapp2.2\" (#2366)"},{"Id":"323825493","IsPullRequest":true,"CreatedAt":"2018-05-21T17:49:45","Actor":"NTaylorMullen","Number":"2356","RawContent":null,"Title":"Go to Rosyn 2.9","State":"closed","Body":"Moved to Roslyn version 2.9.0-beta4-62911-02. This is the version that exists in VS 15.8 preview 2.\r\n\r\nUniverse PR: https://github.com/aspnet/Universe/pull/1167","Url":"https://github.com/aspnet/Razor/pull/2356","RelatedDescription":"Closed or merged PR \"Go to Rosyn 2.9\" (#2356)"},{"Id":"324751525","IsPullRequest":true,"CreatedAt":"2018-05-20T23:39:47","Actor":"rynowak","Number":"2361","RawContent":null,"Title":"Fix dispose logic for EditorDocument","State":"closed","Body":"This could throw when the document is disposed and wasn't open in the\r\neditor.\r\n\r\nImproved the tests to cover dispose as well for both cases.","Url":"https://github.com/aspnet/Razor/pull/2361","RelatedDescription":"Closed or merged PR \"Fix dispose logic for EditorDocument\" (#2361)"},{"Id":"324653990","IsPullRequest":true,"CreatedAt":"2018-05-19T20:06:25","Actor":"rynowak","Number":"2360","RawContent":null,"Title":"Fix mef attributes project path provider","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2360","RelatedDescription":"Closed or merged PR \"Fix mef attributes project path provider\" (#2360)"},{"Id":"324542409","IsPullRequest":false,"CreatedAt":"2018-05-18T21:11:02","Actor":"Everest84","Number":"2359","RawContent":null,"Title":"New file type (e.g. 'csjs') implementing Razor engine to use C# code with javascript outside of cshtml file","State":"closed","Body":"Render the js code into the file by something like @Html.RazorJavascript(\"~/Scripts/code.csjs\")","Url":"https://github.com/aspnet/Razor/issues/2359","RelatedDescription":"Closed issue \"New file type (e.g. 'csjs') implementing Razor engine to use C# code with javascript outside of cshtml file\" (#2359)"},{"Id":"324161347","IsPullRequest":true,"CreatedAt":"2018-05-17T22:28:22","Actor":"NTaylorMullen","Number":"2358","RawContent":null,"Title":"Add `ProjectPathProvider` abstract for document tracker creation.","State":"closed","Body":"- First iteration of live share replaced the document tracker factory entirely; however, this will be prone to breaking changes in the future when me make changes to document tracker to not rely on a file path. To pre-emptively prevent breaking changes I added a project path provider that can be overridden in the live share case. Note that one big difference here between old and new is that instead of being a MEF service implementation for the project path resolution we're bringing that to the Workspace service level.\r\n- Added tests to validate the two flows of the default project path provider.\r\n","Url":"https://github.com/aspnet/Razor/pull/2358","RelatedDescription":"Closed or merged PR \"Add `ProjectPathProvider` abstract for document tracker creation.\" (#2358)"},{"Id":"324154739","IsPullRequest":true,"CreatedAt":"2018-05-17T19:48:25","Actor":"NTaylorMullen","Number":"2357","RawContent":null,"Title":"Add a LiveShare project snapshot base to make it easier to detect breaking changes.","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2357","RelatedDescription":"Closed or merged PR \"Add a LiveShare project snapshot base to make it easier to detect breaking changes.\" (#2357)"},{"Id":"323825350","IsPullRequest":true,"CreatedAt":"2018-05-16T23:46:53","Actor":"NTaylorMullen","Number":"2355","RawContent":null,"Title":"Go to Rosyn 2.9","State":"closed","Body":"Moved to Roslyn version 2.9.0-beta4-62911-02. This is the version that exists in VS 15.8 preview 2.","Url":"https://github.com/aspnet/Razor/pull/2355","RelatedDescription":"Closed or merged PR \"Go to Rosyn 2.9\" (#2355)"},{"Id":"323370418","IsPullRequest":true,"CreatedAt":"2018-05-16T20:21:40","Actor":"rynowak","Number":"2354","RawContent":null,"Title":"Add some benchmarks for project system","State":"closed","Body":"Adds a few benchmarks for things we're working on, also addressed a few\r\nsmall perf issues that have an impact for large documents.","Url":"https://github.com/aspnet/Razor/pull/2354","RelatedDescription":"Closed or merged PR \"Add some benchmarks for project system\" (#2354)"},{"Id":"323350183","IsPullRequest":false,"CreatedAt":"2018-05-15T19:23:35","Actor":"ajaybhargavb","Number":"2353","RawContent":null,"Title":"DocumentClassifier should assign a class name when filepath is null","State":"open","Body":"https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/MvcViewDocumentClassifierPass.cs#L28\r\n\r\nIn the above line, when the file path is null, we set the generated class name to null. This makes the CodeWriter throw an exception when generating the code. I think we should fix this as not all Razor documents have file path, for example, default imports.\r\n\r\n@NTaylorMullen @rynowak thoughts?","Url":"https://github.com/aspnet/Razor/issues/2353","RelatedDescription":"Open issue \"DocumentClassifier should assign a class name when filepath is null\" (#2353)"},{"Id":"323300484","IsPullRequest":true,"CreatedAt":"2018-05-15T17:04:02","Actor":"natemcmaster","Number":"2352","RawContent":null,"Title":"Exclude Visual Studio packages from default NGPV ruleset","State":"closed","Body":"These packages are failing NGPV on stabilized builds on the pre-release dependency rule because these nupkgs use pre-release VS packages. These packages are not actually consumed as nupkgs by VS, so exclude them from NGPV's default rules.","Url":"https://github.com/aspnet/Razor/pull/2352","RelatedDescription":"Closed or merged PR \"Exclude Visual Studio packages from default NGPV ruleset\" (#2352)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2017-10-10T17:47:02","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"open","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Open PR \"Change Lockout wording of comment\" (#870)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"open","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Open issue \"Cannot force version of the template to install\" (#867)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.‚ïî‚ï°cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.‚ïî‚ï°mod([i0.‚ïî‚ï°mpd(512,i0.ComponentFactoryResolver,i0.‚ïî‚ï°CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2017-06-06T16:59:43","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"open","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Open issue \"File new default names inconsistency.\" (#850)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2017-09-12T20:33:21","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"open","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Open issue \"Support for multi-line string values\" (#1057)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"237065229","IsPullRequest":false,"CreatedAt":"2017-07-05T16:21:28","Actor":"Jerajo","Number":"1047","RawContent":null,"Title":"Tooling Preview 2 don't recognize VS 2015 Update 3","State":"closed","Body":"Here is my VS 2015.\r\n\r\n![image](https://user-images.githubusercontent.com/26252994/27312048-4fe10f30-5533-11e7-8319-e09f99059615.png)\r\n\r\nHere is the Error.\r\n\r\n![image](https://user-images.githubusercontent.com/26252994/27312066-8be0e6ea-5533-11e7-9f9e-ada4da2187e4.png)\r\n\r\nLook the Log File.\r\n\r\netc...\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: WebToolsAzureVWD14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: DotNetToolsVS14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: DotNetToolsVWD14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: Preparation_ASPNET, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: SetupBlocked_Uninstall, state: Present, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR NOT(NetFx45Release < 378675) OR (WixBundleAction=2)' evaluates to true.\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR VS2015DevEnvExists OR VS2015WebExpressExists OR (WixBundleAction=2)' evaluates to true.\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR (((VS2015CommunityUpdateVersion >= v14.0.25420) OR (VS2015ProfessionalUpdateVersion >= v14.0.25420) OR (VS2015EnterpriseUpdateVersion >= v14.0.25420)) OR (VS2015WebExpressUpdateVersion >= v14.0.25420)) OR (SKIP_VSU_CHECK=1) OR (WixBundleAction=2)' evaluates to false.\r\n[0DBC:1AB0][2017-06-19T21:09:04]e000: \r\n### This product requires Visual Studio 2015 Update 3 or later. Please install Visual Studio 2015 Update 3 or later, then install this product again.\r\n[0DBC:1AB0][2017-06-19T21:09:04]e000: Error 0x81f40001: Bundle condition evaluated to false: WixBundleInstalled OR (((VS2015CommunityUpdateVersion >= v14.0.25420) OR (VS2015ProfessionalUpdateVersion >= v14.0.25420) OR (VS2015EnterpriseUpdateVersion >= v14.0.25420)) OR (VS2015WebExpressUpdateVersion >= v14.0.25420)) OR (SKIP_VSU_CHECK=1) OR (WixBundleAction=2)\r\n[0DBC:1AB0][2017-06-19T21:09:04]i199: Detect complete, result: 0x0","Url":"https://github.com/aspnet/Tooling/issues/1047","RelatedDescription":"Closed issue \"Tooling Preview 2 don't recognize VS 2015 Update 3\" (#1047)"},{"Id":"235890200","IsPullRequest":false,"CreatedAt":"2017-07-04T19:25:48","Actor":"guylando","Number":"1046","RawContent":null,"Title":"visual studio 2017 built in web code analysis disabled for big files","State":"closed","Body":"I can't find the configuration where i could specify the file size for this limitation. any ideas?\r\nThe right click on a big css\\js file has the \"run code analysis\" button missing and the auto analysis is disabled too.\r\nNo documentation anywhere.\r\nBarely any relevant google results for visual studio \"web code analysis\".\r\nWhere is this feature documentation??","Url":"https://github.com/aspnet/Tooling/issues/1046","RelatedDescription":"Closed issue \"visual studio 2017 built in web code analysis disabled for big files\" (#1046)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"},{"Id":"233083989","IsPullRequest":false,"CreatedAt":"2017-06-02T05:55:17","Actor":"ryanelian","Number":"1045","RawContent":null,"Title":"Feature Request: Allow intellisense for Sass (.scss) importing from node_modules path","State":"open","Body":"Most people has stopped using `bower`. Even `bower` has posted [deprecated notice](https://github.com/bower/bower/issues/2298) on their website and `npm`.\r\n\r\nThus people started using `yarn` / `npm` for managing packages, even for those that are considered not JavaScript projects. (e.g. `bootstrap-sass`)\r\n\r\nFor convenience, our company has developed a build tool for building client-based project easily using TypeScript and Sass, which is then used across all teams: https://github.com/ryanelian/instapack\r\n\r\nWe configured the Sass compiler to look into `node_modules` folder when attempting to import a source code. For example:\r\n\r\n![sass](https://cloud.githubusercontent.com/assets/8892187/26712623/fb762a7e-4791-11e7-9310-788f8bd96fad.PNG)\r\n\r\n![sassproj](https://cloud.githubusercontent.com/assets/8892187/26712654/1f0a5348-4792-11e7-803b-48c695f4599f.PNG)\r\n\r\nThis allows working with the npm repository using Sass, just like how you'd work with NuGet in C#. Very elegant.\r\n\r\nUnfortunately, Visual Studio thinks that the imported files do not exist. This disables the programmer from fully utilizing F12 and intellisense.\r\n\r\nIt would be nice to have this behavior somehow.","Url":"https://github.com/aspnet/Tooling/issues/1045","RelatedDescription":"Open issue \"Feature Request: Allow intellisense for Sass (.scss) importing from node_modules path\" (#1045)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio‚Äôs Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project‚Äôs obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies ‚Äì Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies ‚Äì Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio‚Äôs Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project‚Äôs obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"},{"Id":"292632569","IsPullRequest":false,"CreatedAt":"2018-01-30T02:33:11","Actor":"DamianEdwards","Number":"287","RawContent":null,"Title":"Introduction of new meta-package \"Microsoft.AspNetCore.App\"","State":"open","Body":"## Overview\r\nASP.NET Core 2.1 will introduce a new meta-package for use by applications: *Microsoft.AspNetCore.App*. Additionally, new projects created that target 2.1 will use this meta-package by default, rather than the existing meta-package *Microsoft.AspNetCore.All*.\r\n\r\nThe new meta-package differs from the existing meta-package in that it reduces the number of dependencies of packages not owned or supported by the ASP.NET or .NET teams to just those deemed necessary to ensure the major frameworks features function. The full list of packages being removed compared to *Microsoft.AspNetCore.All* can be seen below.\r\n\r\nThe existing *Microsoft.AspNetCore.All* meta-package will continue to be made available throughout the 2.x lifecycle, but we recommend customers move to the new *Microsoft.AspNetCore.App* meta-pacakge and then add individual references to any of the removed packages if their app requires it.\r\n\r\n## Package references not in \"Microsoft.AspNetCore.App\", compared to \"Microsoft.AspNetCore.All\"\r\nThe following packages are direct dependencies of *Microsoft.AspNetCore.All* but **not** of *Microsoft.AspNetCore.App*. Note that any dependencies of these packages that otherwise aren't dependencies of *Microsoft.AspNetCore.App* will now **not** be included implicitly, e.g. *StackExchange.Redis* as a dependency of *Microsoft.Extensions.Caching.Redis*, *Microsoft.ApplicationInsights* as a dependency of *Microsoft.AspNetCore.ApplicationInsights.HostingStartup*:\r\n- Microsoft.Data.Sqlite\r\n- Microsoft.Data.Sqlite.Core\r\n- Microsoft.EntityFrameworkCore.Sqlite\r\n- Microsoft.EntityFrameworkCore.Sqlite.Core\r\n- Microsoft.Extensions.Caching.Redis\r\n- Microsoft.AspNetCore.DataProtection.AzureStorage\r\n- Microsoft.Extensions.Configuration.AzureKeyVault\r\n- Microsoft.AspNetCore.DataProtection.AzureKeyVault\r\n- Microsoft.AspNetCore.Identity.Service.AzureKeyVault\r\n- Microsoft.AspNetCore.AzureKeyVault.HostingStartup\r\n- Microsoft.AspNetCore.ApplicationInsights.HostingStartup\r\n\r\nWhen moving from *Microsoft.AspNetCore.All* to *Microsoft.AspNetCore.App*, if your application uses any APIs from the above packages, or packages brought in by those packages, you'll now need to add references to those packages in your project manually.\r\n\r\nDiscussion for this issue at https://github.com/aspnet/MetaPackages/issues/255","Url":"https://github.com/aspnet/Announcements/issues/287","RelatedDescription":"Open issue \"Introduction of new meta-package \"Microsoft.AspNetCore.App\"\" (#287)"},{"Id":"287579430","IsPullRequest":false,"CreatedAt":"2018-01-10T21:14:16","Actor":"dougbu","Number":"286","RawContent":null,"Title":"Remove project file elements added for WebApiCompatShim in 2.0","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim package now depends on the latest (5.2.4-preview1) Microsoft.AspNet.WebApi.Client package. That dependency includes a new .NET Standard 2.0 assembly. This assembly supports all platforms the Microsoft.AspNetCore.Mvc.WebApiCompatShim package supports and includes the full Web API Client feature set.\r\n\r\nWhen upgrading projects using the Microsoft.AspNetCore.Mvc.WebApiCompatShim package to our nightly builds or the forthcoming 2.1.0-preview1 release, we recommend removing the following elements from the project file. (Of course, some projects may need the elements for other reasons.)\r\n``` xml\r\n<PackageTargetFallback>$(PackageTargetFallback);portable-net451+win8</PackageTargetFallback>\r\n<DisableImplicitAssetTargetFallback>true</DisableImplicitAssetTargetFallback>\r\n```\r\n\r\nFYI the `<PackageTargetFallback>` element caused the application to build and run against the Portable Class Library (PCL) assembly from the Microsoft.AspNet.WebApi.Client package.\r\n\r\nFor discussion of this change, see aspnet/Mvc#7229.","Url":"https://github.com/aspnet/Announcements/issues/286","RelatedDescription":"Open issue \"Remove project file elements added for WebApiCompatShim in 2.0\" (#286)"},{"Id":"287180286","IsPullRequest":false,"CreatedAt":"2018-01-09T18:08:18","Actor":"blowdart","Number":"285","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0784\r\n##  ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of an elevation of privilege vulnerability exists when a ASP.NET Core web application, created using vulnerable project templates, fails to properly sanitize web requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\r\n\r\nTo exploit the vulnerability, an attacker could send a specially crafted email, containing a malicious link, to a user. Alternatively, an attacker could use a chat client to social engineer a user into clicking the malicious link. However, in all cases to exploit this vulnerability a user must click a maliciously crafted link from an attacker.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0785](https://github.com/aspnet/Announcements/issues/284), which is in the same templates. Finally installing the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ will update the templates to correct the issue for any new applications created.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/225 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method and search for the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nReplace this line with the following code, removing the call to `Html.Raw()`\r\n\r\n```C#\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` and search for the following line, inside the `OnGetAsync()` method;\r\n\r\n```C#\r\nawait LoadSharedKeyAndQrCodeUriAsync(user);\r\n```\r\n\r\nRemove the code shown below which follows the call to `LoadSharedKeyAndQrCodeUriAsync(user);`\r\n\r\n```C#\r\nif (string.IsNullOrEmpty(SharedKey))\t\t\r\n{\t\t\r\n    await _userManager.ResetAuthenticatorKeyAsync(user);\t\t\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\t\t\r\n}\r\n```\r\n\r\nThe `OnGetAsync()` method should now look like\r\n\r\n```C#\r\npublic async Task<IActionResult> OnGetAsync()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\r\n\r\n    return Page();\r\n}\r\n```\r\n\r\n3. Still in the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` file  and search for the `LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user) function` and replace it with \r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)\r\n{\r\n    // Load the authenticator key & QR code URI to display on the form\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n     }\r\n\r\n    SharedKey = FormatKey(unformattedKey);\r\n    AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n }\r\n```\r\n\r\n4. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find the declaration for `private const string AuthenticatorUriFormat`. Add the following new const declaration below it;\r\n\r\n```C#\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator()` function. Replace its contents with\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> EnableAuthenticator()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    var model = new EnableAuthenticatorViewModel();\r\n    await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n\r\n    return View(model);\r\n}\r\n```\r\n\r\n3. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. Replace its contents with\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> EnableAuthenticator(EnableAuthenticatorViewModel model)\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!ModelState.IsValid)\r\n    {\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n     }\r\n\r\n    // Strip spaces and hypens\r\n    var verificationCode = model.Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\r\n\r\n    var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\r\n        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\r\n\r\n    if (!is2faTokenValid)\r\n    {\r\n        ModelState.AddModelError(\"Code\", \"Verification code is invalid.\");\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n    }\r\n\r\n    await _userManager.SetTwoFactorEnabledAsync(user, true);\r\n    _logger.LogInformation(\"User with ID {UserId} has enabled 2FA with an authenticator app.\", user.Id);\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    TempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\n\r\n    return RedirectToAction(nameof(ShowRecoveryCodes));\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` file create the following method after `EnableAuthenticator(EnableAuthenticatorViewModel model)`;\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file create the following method after the `GenerateQrCodeUri(string email, string unformattedKey)` method\r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user, EnableAuthenticatorViewModel model)\r\n{\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    }\r\n\r\n    model.SharedKey = FormatKey(unformattedKey);\r\n    model.AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n}\r\n```\r\n\r\n6. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n7. Open the `Models\\ManageViewModels\\EnableAuthenticatorViewModel.cs` file and add the following `using` reference;\r\n\r\n```C#\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\n```\r\n\r\nthen replace the class declaration with \r\n\r\n```C# \r\npublic class EnableAuthenticatorViewModel\r\n{\r\n    [Required]\r\n    [StringLength(7, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\r\n    [DataType(DataType.Text)]\r\n    [Display(Name = \"Verification Code\")]\r\n    public string Code { get; set; }\r\n\r\n    [BindNever]\r\n    public string SharedKey { get; set; }\r\n\r\n    [BindNever]\r\n    public string AuthenticatorUri { get; set; }\r\n}\r\n```\r\n\r\n8. Open the `Views\\Manage\\EnableAuthenticator.cshtml` file and replace the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nwith\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\nremove the call to `Html.Raw()`.\r\n\r\n9. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to K√©vin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0784](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0784)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Corrected text in link to CVE-2018-0785.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-10_","Url":"https://github.com/aspnet/Announcements/issues/285","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\" (#285)"},{"Id":"287180045","IsPullRequest":false,"CreatedAt":"2018-01-09T18:07:26","Actor":"blowdart","Number":"284","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0785\r\n## ASP.NET Core Templates enable Cross Site Request Forgery\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Cross Site Request Forgery vulnerability in the individual authentication templates for ASP.NET Core 2.0. An attacker who successfully exploited this vulnerability could change the recovery codes associated with the victim's user account without his/her consent. As a result, a victim of this attack may be permanently locked out of his/her account after loosing access to his/her 2FA device, as the initial recovery codes would be no longer valid.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0784](https://github.com/aspnet/Announcements/issues/284), which is in the same templates.\r\n\r\nYou should also install the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ as will update the templates to correct the issue for any _new_ applications created after its installation. Existing applications must be manually updated using the instructions below.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/224 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method. The last line of this file should be\r\n\r\n```C#\r\nreturn RedirectToPage(\"./GenerateRecoveryCodes\");\r\n```\r\n\r\nReplace this line with the following code\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\nreturn RedirectToPage(\"./ShowRecoveryCodes\");\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml` and replace its contents with \r\n\r\n```C#\r\n@page\r\n@model GenerateRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-page=\"./ResetAuthenticator\">reset your authenticator keys</a>.\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n3. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml.cs` file. Replace its contents with\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\nusing Microsoft.Extensions.Logging;\r\nusing Company.WebApplication1.Data;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class GenerateRecoveryCodesModel : PageModel\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userManager;\r\n        private readonly ILogger<GenerateRecoveryCodesModel> _logger;\r\n\r\n        public GenerateRecoveryCodesModel(\r\n            UserManager<ApplicationUser> userManager,\r\n            ILogger<GenerateRecoveryCodesModel> logger)\r\n        {\r\n            _userManager = userManager;\r\n            _logger = logger;\r\n        }\r\n\r\n        public async Task<IActionResult> OnGetAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n            }\r\n\r\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n            TempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\n\r\n            _logger.LogInformation(\"User with ID '{UserId}' has generated new 2FA recovery codes.\", user.Id);\r\n\r\n            return RedirectToPage(\"./ShowRecoveryCodes\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. Create a new file, `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml` with the following contents \r\n\r\n```C#\r\n@page\r\n@model ShowRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n5. Create a new file `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml.cs` with the following contents\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class ShowRecoveryCodesModel : PageModel\r\n    {\r\n        public string[] RecoveryCodes { get; private set; }\r\n\r\n        public IActionResult OnGet()\r\n        {\r\n            RecoveryCodes = (string[])TempData[\"RecoveryCodes\"];\r\n            if (RecoveryCodes == null)\r\n            {\r\n                return RedirectToPage(\"TwoFactorAuthentication\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n6. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find \r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\n```\r\n  and add a new declaration underneath,\r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. The last line in this method should be\r\n\r\n```C#\r\nreturn RedirectToAction(nameof(GenerateRecoveryCodes));\r\n```\r\n\r\nReplace this final line with\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\nreturn RedirectToAction(nameof(ShowRecoveryCodes));\r\n```\r\n\r\n3. Create a new method in `Controllers\\ManageController.cs` called `ShowRecoveryCodes()` with the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file and find the `GenerateRecoveryCodes()` method. The code should look as follows\r\n\r\n```C# \r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    ...\r\n}\r\n```\r\nReplace the method with the following\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n    }\r\n\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    _logger.LogInformation(\"User with ID {UserId} has generated new 2FA recovery codes.\", user.Id);\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes.ToArray() };\r\n\r\n    return View(nameof(ShowRecoveryCodes), model);\r\n}\r\n```\r\n\r\n6. Create a new View in `Views\\Manage\\ShowRecoveryCodes.cshtml` with the following content\r\n\r\n```\r\n@model ShowRecoveryCodesViewModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n7. Create a new `ShowRecoveryCodesViewModel` class in the `Models\\ManageViewModels` folder and create the class as follows\r\n\r\n```c#\r\npublic class ShowRecoveryCodesViewModel\r\n{\r\n    public string[] RecoveryCodes { get; set; }\r\n}\r\n``` \r\n\r\n8.  Delete the `Models\\ManageViewModels\\generateRecoveryCodesViewModel.cs` file.\r\n\r\n9. Open the `Views\\Manage\\GenerateRecoveryCodes.cshtml` file. Replace the contents with \r\n\r\n```\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h2>@ViewData[\"Title\"]</h2>\r\n\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-action=\"ResetAuthenticatorWarning\">reset your authenticator keys.</a>\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form asp-action=\"GenerateRecoveryCodes\" method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n\r\n10. Edit `Views\\Manage\\TwoFactorAuthentication.cshtml` to change `<a asp-action=\"GenerateRecoveryCodes\" class=\"btn btn-default\">Reset recovery codes</a>` to ` <a asp-action=\"GenerateRecoveryCodesWarning\" class=\"btn btn-default\">Reset recovery codes</a>`.\r\n\r\n11. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to K√©vin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0785](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0785)\r\n\r\n### Revisions\r\n\r\nV1.1 (Jan 9, 2018): Updated Razor Pages fix to be correct. Note that [new generated applications will have the incorrect link](https://github.com/aspnet/templating/issues/226).  Thanks @scottsauber.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-09_\r\n\r\n  \r\n  \r\n  \r\n  \r\n  ","Url":"https://github.com/aspnet/Announcements/issues/284","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery\" (#284)"},{"Id":"285489159","IsPullRequest":false,"CreatedAt":"2018-01-02T17:28:55","Actor":"Eilon","Number":"283","RawContent":null,"Title":"Using the \"Home\" repo for issue management of other repos","State":"open","Body":"Hi all,\r\n\r\nWe are experimenting to try and use the [Home repo's issue tracker](https://github.com/aspnet/Home/issues) to manage issues for multiple repos. To start with, we have moved the bugs from several other repos to the Home repo, and we will retire the issue trackers of those other repos.\r\n\r\nWe are doing this to try to improve the experience of logging issues for ASP.NET Core.\r\n\r\n* Labels in the form of `repo:RepoName` are used to associate the bug with a product/feature area\r\n* For issue trackers that moved to the Home repo, please log new issues in the Home repo. If a bug is logged in a moved issue tracker, it will be closed.\r\n* Over time, we plan to consolidate more issue trackers into the Home repo\r\n\r\nFor discussions on this topic, please go to https://github.com/aspnet/Home/issues/2736.\r\n\r\nThanks,\r\nEilon\r\n","Url":"https://github.com/aspnet/Announcements/issues/283","RelatedDescription":"Open issue \"Using the \"Home\" repo for issue management of other repos\" (#283)"},{"Id":"277159697","IsPullRequest":false,"CreatedAt":"2017-11-27T20:34:07","Actor":"pranavkm","Number":"282","RawContent":null,"Title":"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated","State":"open","Body":"As part of some of our infrastructural changes, we're discontinuing the use of the following feeds and may remove them entirely in the future:\r\n* https://dotnet.myget.org/f/aspnetcore-ci-dev \r\n* https://dotnet.myget.org/f/aspnetcore-ci-release\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-dev\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-release\r\n\r\nIf you're currently using one of these feeds in your projects to pick up our daily builds, we recommend migrating to https://dotnet.myget.org/f/aspnetcore-dev.\r\n\r\nPlease use this discussion topic - https://github.com/aspnet/Home/issues/2292 - for feedback and questions. ","Url":"https://github.com/aspnet/Announcements/issues/282","RelatedDescription":"Open issue \"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated\" (#282)"},{"Id":"273832346","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:58","Actor":"blowdart","Number":"281","RawContent":null,"Title":"Reserved","State":"closed","Body":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n","Url":"https://github.com/aspnet/Announcements/issues/281","RelatedDescription":"Closed issue \"Reserved\" (#281)"},{"Id":"273832234","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:44","Actor":"blowdart","Number":"280","RawContent":null,"Title":"Reserved","State":"closed","Body":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n","Url":"https://github.com/aspnet/Announcements/issues/280","RelatedDescription":"Closed issue \"Reserved\" (#280)"},{"Id":"273832132","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:23","Actor":"blowdart","Number":"279","RawContent":null,"Title":"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure","State":"open","Body":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/7054 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.6\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.6\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.6, 1.1.x should be updated to 1.1.6), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous ‚ÄúAffected Software‚Äù section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.6. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies ‚Äì project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies ‚Äì csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.6.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.6.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio‚Äôs Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is ‚Äúunder‚Äù the `project.json` file. Click the right pointing triangle, ‚ñ∑, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project‚Äôs obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.6.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.6\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.1 (Dec 13, 2017): Updated 1.1.5 to 1.1.6 to fix a packaging issue (see https://github.com/aspnet/Mvc/issues/7070)\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2017-12-13_","Url":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279)"},{"Id":"273831995","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:03","Actor":"blowdart","Number":"278","RawContent":null,"Title":"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where the application is hosted through Windows Http,Sys where a malformed request can lead to a Denial Of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/HttpSysServer/issues/416\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications hosted using Kestrel as their web server are not affected. By default ASP.NET Core Web applications are hosted with Kestrel. Developers must make specific decisions to switch to using HTTP.SYS and as this hosting option is only available on Windows this advisory does not affect Linux or macOS.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.WebListener<br /> Microsoft.Net.Http.Server | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3 | 1.0.6<br />1.1.4\r\nMicrosoft.AspNetCore.Server.HttpSys | 2.0.0, 2.0.1 |  2.0.2\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous ‚ÄúAffected Software‚Äù section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n\r\n### Fixing Direct Dependencies ‚Äì project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.6\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.WebListener` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Server.WebListener` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Server.WebListener` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies ‚Äì csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Net.Http.Server\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a two direct dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. The example shows a direct reference to the vulnerable package `Microsoft.Net.Http.Server` version 1.1.1.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.Net.Http.Server` to 1.1.4.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Net.Http.Server\" Version=\"1.1.4\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio‚Äôs Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is ‚Äúunder‚Äù the `project.json` file. Click the right pointing triangle, ‚ñ∑, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project‚Äôs obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.1.0 you would add a reference to the appropriate fixed version 1.1.4.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.4\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11883](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11883)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\nV1.1 (Nov 14, 2017): Mitigation clarification that HTTP.SYS is only available on Windows.\r\nV1.2 (Nov 14, 2017): Added Http.Server package for v1.x platform.\r\nV1.3 (Nov 15, 2017): Updated package version numbers for correctness.\r\n\r\n_Version 1.3_\r\n_Last Updated 2017-11-15_","Url":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability\" (#278)"},{"Id":"273831890","IsPullRequest":false,"CreatedAt":"2017-11-14T15:24:44","Actor":"blowdart","Number":"277","RawContent":null,"Title":"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege","State":"open","Body":"# Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability some public versions of ASP.NET Core where an Open Redirect exists, leading to Elevation Of Privilege.\r\n\r\n## Discussion\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/7053 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 1.0.x or 1.1.x are not affected.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.0.0 |  2.0.3\r\nMicrosoft.AspNetCore.Mvc.Core | 2.0.0 |  2.0.1\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous ‚ÄúAffected Software‚Äù section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\nIf you are targeting .NET Core a \"meta-package\" is used, `Microsoft.AspNetCore.All`. You should begin by updating its version number to 2.0.3, this will pull in the fixed `Microsoft.AspNetCore.Mvc.Core` package.\r\n\r\nIf you are targeting .NET Framework you should first update the `Microsoft.AspNetCore` version to the version number to 2.0.1, then adjust the version number for any other packages beginning with `Microsoft.AspNetCore.` to 2.0.3.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies ‚Äì Projects targeting .NET Core\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference to the vulnerable metapackage, as seen by the single `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.All` to 2.0.3.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### Fixing Direct Dependencies ‚Äì Projects targeting .NET Framework\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference a single packages, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.Core` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.Core` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers a direct reference to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 2.0.0 when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio‚Äôs Solution Explorer, or you can review your `project.assets.json` file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project‚Äôs obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Core` version 2.0.0 you would add a reference to the fixed version, 2.0.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nThanks to K√©vin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11879:](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11879)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\nV1.1 (Nov 14, 2017): Fixed metapackage version.\r\nV1,2  (Nov 14, 2017): Fixed metapackage version in samples. \r\n\r\n_Version 1.2_\r\n_Last Updated 2017-11-14_","Url":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege\" (#277)"},{"Id":"269377674","IsPullRequest":false,"CreatedAt":"2017-10-29T14:10:49","Actor":"searus","Number":"276","RawContent":null,"Title":"Improved end to end testing support for MVC applications: Typo?","State":"closed","Body":"Hi @javiercn, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Closed issue \"Improved end to end testing support for MVC applications: Typo?\" (#276)"},{"Id":"269251366","IsPullRequest":false,"CreatedAt":"2017-10-27T22:12:29","Actor":"javiercn","Number":"275","RawContent":null,"Title":"Improved end to end testing support for MVC applications","State":"open","Body":"# Improved end to end testing support for MVC applications\r\n\r\nIn this release we have created a new package Microsoft.AspNetCore.Mvc.Testing to help streamline\r\nend to end testing of MVC applications using TestServer.\r\n\r\nThis package takes care of some of the typical pitfalls users run into when trying to test MVC applications\r\nusing TestServer.\r\n* It copies the .deps file from your project into the test assembly bin folder.\r\n* It sets the content root the application's project root so that static files and views can be found.\r\n* It provides a class `WebApplicationTestFixture<TStartup>` that streamlines the bootstrapping of your app on\r\nTestServer.\r\n\r\n## Sample end to end in memory test using xUnit\r\n\r\n```csharp\r\nusing Xunit;\r\n\r\nnamespace MyApplication.FunctionalTests\r\n{\r\n    public class MyApplicationFunctionalTests : IClassFixture<WebApplicationTestFixture<Startup>>\r\n    {\r\n        public MyApplicationFunctionalTests(WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n\r\n        public HttpClient Client { get; }\r\n\r\n        [Fact]\r\n        public async Task GetHomePage()\r\n        {\r\n            // Arrange & Act\r\n            var response = await Client.GetAsync(\"/\");\r\n\r\n            // Assert\r\n            Assert.Equal(HttpStatusCodes.OK, response.StatusCode);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Important notes\r\n\r\n### Shadow copying needs to be disabled\r\nFor end to end in-memory tests to work properly, shadow copying needs to be disabled on your test framework of choice, as it causes the tests to execute in a different folder than the output folder.\r\nFor instructions on how to do this on xUnit see https://xunit.github.io/docs/configuring-with-json.html.\r\n\r\n### Your app needs to have a CreateWebHostBuilderMethod on the Program class\r\nBy convention our ```WebApplicationTestFixture<TStartup>``` tries to find a method with the signature ```public static IWebHostBuilder CreateWebHostBuilder(string [] args)``` on the entry point class of the assembly where Startup is located. (Typically your Program class) If you don't have this method ```WebApplicationTestFixture<TStartup>``` won't be able to initialize your app in the same way it is done on a normal run. You can configure the WebHostBuilder yourself by overriding CreateWebHostBuilder on ```WebApplicationTestFixture<TStartup>```.\r\n\r\n### The test infrastructure needs to know the content root of the application under test\r\nTo set the content root for your app, ```WebApplicationTestFixture<TStartup>``` first locate your solution file ```(.sln)``` and then make a guess about where project might be. The Content Root of the application is defined by convention as ```<<SolutionFolder>>/<<ProjectAssemblyName>>```. For example, based on the folder structure defined below, the content root of the application is defined as ```c:\\work\\MyApp```. This is important because if not set correctly to the root folder of your application under test all views and static files will not be found.\r\n\r\n```\r\nc:/work/\r\n    MyApp.sln\r\n    MyApp/MyApp.csproj\r\n    MyApp.FunctionalTests/MyApp.FunctionalTests.csproj\r\n```\r\n\r\nThe process for determining the folder to use as the content root when running the tests is the following:\r\n* ```WebApplicationTestFixture<TStartup>``` starts on the bin folder of the test project, in the example above ```c:/work/MyApp.FunctionalTests/MyApp.FunctionalTests/bin/<<Configuration>>/<<Framework>>```\r\n* It navigates to the parent folder until it finds a ```.sln``` file.\r\n* It appends ```<<AssemblyName>>``` to the folder in which it found the ```.sln``` file and set that as the content root.\r\n\r\nIf you happen to be using a different convention for the layout of your projects, you can inherit from WebApplicationTestFixture and pass in the relative path from your solution to the application under test when calling the constructor. For example ```\"/src/MyApp\"```\r\n\r\n```csharp\r\npublic class MyAppTestFixture<TStartup> : WebApplicationTestFixture<TStartup> where TStartup : class\r\n{\r\n    public MyAppTestFixture(string solutionRelativePath)\r\n        : base(\"/src/MyApp\") { }\r\n}\r\n```","Url":"https://github.com/aspnet/Announcements/issues/275","RelatedDescription":"Open issue \"Improved end to end testing support for MVC applications\" (#275)"},{"Id":"267820263","IsPullRequest":false,"CreatedAt":"2017-10-23T21:15:56","Actor":"Eilon","Number":"274","RawContent":null,"Title":"ASP.NET/EF Core 2.0.3 patch pre-release test feed","State":"open","Body":"Hi, we now have a public test feed that you can use to try out the ASP.NET/EF Core 2.0.3 patch!\r\n\r\nYou can test this pre-release patch by adding the following feed to your app's or machine's NuGet.config file:\r\n* `https://dotnet.myget.org/F/aspnet-2-0-2-october2017-patch-public/api/v3/index.json`\r\n   * ![image](https://user-images.githubusercontent.com/202643/31913542-4757d2a0-b7fc-11e7-9bf7-7157bd18a6ca.png)\r\n   * (please ignore the *name* of the feed; it is incorrect üò¶)\r\n\r\n## Update your project\r\n1. Open an existing .NET Core 2.0 project's CSPROJ file\r\n2. Update the version of the `Microsoft.AspNetCore.All` package from `2.0.0` to `2.0.3-*`\r\n3. Update the version of all the other `<PackageReference>` items from `2.0.0` to `2.0.1-*` (*Note: This is a different version than the `.All` package!*)\r\n4. Add the following element to the `<PropertyGroup>` at the top of the CSPROJ file:\r\n   * `<NoWarn>$(NOWARN);NU1605</NoWarn>`\r\n5. From a command line window (terminal), run `dotnet restore` to restore the pre-release patch packages into the project (or restore packages from your IDE, such as Visual Studio 2017)\r\n6. You should now be able to run your project with the pre-release patch packages\r\n\r\n## Additional resources\r\n* More info on updating NuGet packages is available here:\r\n   * https://docs.microsoft.com/en-us/nuget/consume-packages/reinstalling-and-updating-packages\r\n* The full list of fixes and changes made in this patch are available using this query:\r\n   * https://github.com/search?utf8=%E2%9C%93&q=org%3Aaspnet+is%3Aissue+is%3Aclosed+milestone%3A2.0.3&type=Issues\r\n* You can browse the list of updated packages on this gallery page:\r\n   * https://dotnet.myget.org/gallery/aspnet-2-0-2-october2017-patch-public\r\n\r\n## Feedback\r\nWe are looking for feedback on this patch. We'd like to know if you have any issues with this patch by updating your apps and libraries to the latest packages and seeing if it fixes the issues you've had, or if it introduces any new issues. If you have any issues or questions, please reply on the [discussion thread](https://github.com/aspnet/Home/issues/2254) to let us know as soon as possible.\r\n\r\n## What's next\r\nWe will post an update when the patch is publicly available on [NuGet.org](https://nuget.org).\r\n\r\nThanks,\r\nEilon","Url":"https://github.com/aspnet/Announcements/issues/274","RelatedDescription":"Open issue \"ASP.NET/EF Core 2.0.3 patch pre-release test feed\" (#274)"},{"Id":"264739593","IsPullRequest":false,"CreatedAt":"2017-10-11T21:19:31","Actor":"jbagga","Number":"273","RawContent":null,"Title":"Use ContractResolver to create paths from expressions for json-patch","State":"open","Body":"`JsonPatchDocumentOfT.cs` will use the `ContractResolver` provided to get paths instead of forcing to lower case.\r\n\r\nAddresses aspnet/JsonPatch#90.\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/113 for discussion.\r\n","Url":"https://github.com/aspnet/Announcements/issues/273","RelatedDescription":"Open issue \"Use ContractResolver to create paths from expressions for json-patch\" (#273)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1003773072996909056","CreatedAt":"2018-06-04T22:58:44+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup Tuesday at 3:00 PM Pacific / 23:00 GMT at https://t.co/4Ioo9jNSN2 https://t.co/56UGvtmJC0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1001877838369382400","CreatedAt":"2018-05-30T17:27:45+00:00","UserScreenname":"aspnet","Text":"Our latest release is now available.  Read all about the new #ASP.NET Core 2.1 at https://t.co/n1ZJsZ2YcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":207,"FavoriteCount":123,"RawContent":null},{"Id":"996435611354447872","CreatedAt":"2018-05-15T17:02:17+00:00","UserScreenname":"aspnet","Text":"And we're live! Join us as https://t.co/3dFxSj11IQ https://t.co/PAZDWtuk1r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"996432221497057285","CreatedAt":"2018-05-15T16:48:49+00:00","UserScreenname":"aspnet","Text":"Starting soon - join us for an MVC Functional Testing overview with Javier Calvarro Nelson at‚Ä¶ https://t.co/FavBvWbz0w","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"996146847939883009","CreatedAt":"2018-05-14T21:54:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nMVC Functional Testing with Javier Calvarro Nelson‚Ä¶ https://t.co/twYeUUd1RO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"993841130545426433","CreatedAt":"2018-05-08T13:12:44+00:00","UserScreenname":"aspnet","Text":"Jeff will be pair-programming using @VisualStudio Live Share on an @aspnet Core project with YOU at the Live Share‚Ä¶ https://t.co/i0sm9cCOGz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":2,"RawContent":null},{"Id":"991768334419902464","CreatedAt":"2018-05-02T19:56:11+00:00","UserScreenname":"aspnet","Text":"Blazor 0.3.0 experimental release now available\n\nhttps://t.co/2ixEeVbBbN https://t.co/3VB4sDxvwR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":484,"FavoriteCount":272,"RawContent":null},{"Id":"991361559426314241","CreatedAt":"2018-05-01T16:59:49+00:00","UserScreenname":"aspnet","Text":"We're live! Join us at https://t.co/4Ioo9jNSN2 https://t.co/uGAnWHOWD5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"991092623849865217","CreatedAt":"2018-04-30T23:11:09+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nSignalR and Project Bedrock updates with @davidfowl‚Ä¶ https://t.co/B8XmP5YkCW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":35,"RawContent":null},{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi‚Ä¶ https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":14,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about‚Ä¶ https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome‚Ä¶ https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null}]}},"RunOn":"2018-06-05T05:30:23.4727514Z","RunDurationInMilliseconds":18808}