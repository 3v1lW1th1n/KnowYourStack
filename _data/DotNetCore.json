{"Data":{"Blog":{"FeedItems":[{"Title":"Tiered Compilation Preview in .NET Core 2.1","PublishedOn":"2018-08-02T22:22:13+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"If you are a fan of .NET performance there has been a lot great news lately such as Performance Improvements in .NET Core 2.1 and Announcing .NET Core 2.1, but we&#8217;ve got more. Tiered compilation...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/","RawContent":null},{"Title":".NET Framework July 2018 Update","PublishedOn":"2018-07-30T23:17:45+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Update: 8/03/2018 Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Today, we released the July 2018 Update that fixes an issue in .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/","RawContent":null},{"Title":"Announcing F# 4.5 Preview","PublishedOn":"2018-07-26T19:22:31+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We’re very excited to announce that we’ll be shipping a new language version of F# soon. The version will be F# 4.5. F# 4.5 has been developed entirely via an open RFC (requests for comments) process,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/26/announcing-f-4-5-preview/","RawContent":null},{"Title":"Advisory on July 2018 .NET Framework Updates","PublishedOn":"2018-07-21T00:55:00+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Update as of 8/03/2018: Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Update as of 7/30/2018: A new .NET Framework July 2018 Update...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3632","PublishedOn":"2018-07-19T00:30:16+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"We released the first Early Access build for the .NET Framework 4.8 last month (June-2018) and are happy to announce the next build (3632) for your feedback. This is one of the in-development builds...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/","RawContent":null},{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8025565746","Type":"IssuesEvent","CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Opened issue \"https://dot.net now using TLS 1.2-only\" (#77) at dotnet/announcements","RelatedBody":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689"},{"Id":"7999286881","Type":"IssuesEvent","CreatedAt":"2018-07-21T22:29:06","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Opened issue \"July 2018 .NET Updates\" (#76) at dotnet/announcements","RelatedBody":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Documents\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n"},{"Id":"7997769217","Type":"IssuesEvent","CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Opened issue \"Advisory on July 2018 .NET Framework Updates\" (#74) at dotnet/announcements","RelatedBody":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of applications that fail to start or don't run correctly after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\nDiscussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Workaround\r\n\r\nTemporarily uninstall the [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) to restore functionality until a new update has been released to correct this problem. \r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object\r\n"},{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8068804236","Type":"PullRequestEvent","CreatedAt":"2018-08-06T01:07:03","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19294","RelatedDescription":"Merged pull request \"Disable NETClientPrimitives test\" (#19294) at dotnet/coreclr","RelatedBody":"Fails on many R2R and JitStress jobs.\r\n\r\nTracked by #19164"},{"Id":"8068355875","Type":"PullRequestEvent","CreatedAt":"2018-08-05T19:26:37","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19296","RelatedDescription":"Opened pull request \"[WIP] Refactor integer cast codegen\" (#19296) at dotnet/coreclr","RelatedBody":""},{"Id":"8068200556","Type":"IssuesEvent","CreatedAt":"2018-08-05T17:28:55","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19295","RelatedDescription":"Opened issue \"Frequent failure in CoreFX ReadAsyncCompletesIfFlushAsyncCanceledMidFlush test\" (#19295) at dotnet/coreclr","RelatedBody":"This fails in Jenkins frequently, though not always, e.g.:\r\n\r\nWindows x86:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/562/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/560/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/558/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/557/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/554/\r\n\r\nWindows x64:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_corefx_baseline/590/\r\n\r\n```  System.IO.Pipelines.Tests.FlushAsyncCancellationTests.ReadAsyncCompletesIfFlushAsyncCanceledMidFlush [FAIL]\r\n        Reader was not completed in reasonable time\r\n        Expected: True\r\n        Actual:   False\r\n```\r\n"},{"Id":"8068160190","Type":"PullRequestEvent","CreatedAt":"2018-08-05T16:58:42","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19294","RelatedDescription":null,"RelatedBody":"Fails on many R2R and JitStress jobs.\r\n\r\nTracked by #19164"},{"Id":"8068160140","Type":"PullRequestEvent","CreatedAt":"2018-08-05T16:58:40","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19294","RelatedDescription":"Closed pull request \"Disable NETClientPrimitives test\" (#19294) at dotnet/coreclr","RelatedBody":"Fails on many R2R and JitStress jobs.\r\n\r\nTracked by #19164"},{"Id":"8068159533","Type":"PullRequestEvent","CreatedAt":"2018-08-05T16:58:16","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19294","RelatedDescription":"Opened pull request \"Disable NETClientPrimitives test\" (#19294) at dotnet/coreclr","RelatedBody":"Fails on many R2R and JitStress jobs.\r\n\r\nTracked by #19164"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8068600454","Type":"PullRequestEvent","CreatedAt":"2018-08-05T22:32:11","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9798","RelatedDescription":"Opened pull request \"Fix build warning and treat msbuild warnings as errors\" (#9798) at dotnet/cli","RelatedBody":"We were getting the warning that we set BaseIntermediateOutputPath to late because in this special case, we did it after SDK props and not via Directory.Build.props.\r\n\r\nAlso, preventing more warnings like this from creeping in by treating MSBuild warnings as errors, same as compiler warnings."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8066470005","Type":"PullRequestEvent","CreatedAt":"2018-08-04T16:11:55","Actor":"TheBlueSky","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/848","RelatedDescription":"Opened pull request \"Update .NET Standard versions guidelines\" (#848) at dotnet/standard","RelatedBody":"* Update .NET Standard versions table to reflect latest updates.\r\n* Update the guidelines to add the multi-targeting recommendation.\r\n* Remove the obsolete note."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8069366115","Type":"IssuesEvent","CreatedAt":"2018-08-06T05:23:23","Actor":"TobiasSekan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31605","RelatedDescription":"Opened issue \"[Request] Missing TryParse Method for System.Net.NetworkInformation.PhysicalAddress\" (#31605) at dotnet/corefx","RelatedBody":"Hello, can you add a TryParse method for System.Net.NetworkInformation.PhysicalAddress or can I do this?"},{"Id":"8069348837","Type":"PullRequestEvent","CreatedAt":"2018-08-06T05:16:42","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31604","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26806-00, beta-26806-00, respectively (master)\" (#31604) at dotnet/corefx","RelatedBody":""},{"Id":"8069060150","Type":"IssuesEvent","CreatedAt":"2018-08-06T03:04:50","Actor":"mythz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31599","RelatedDescription":"Closed issue \"There's no reliable way to detect if a .NET Standard 2.0 build is running in UWP\" (#31599) at dotnet/corefx","RelatedBody":"The only available way to [detect if an App is running in UWP](https://stackoverflow.com/a/47891292/85785):\r\n\r\n```csharp\r\nconst long APPMODEL_ERROR_NO_PACKAGE = 15700L;\r\n\r\n[DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\nstatic extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);\r\n\r\npublic bool IsRunningAsUwp()\r\n{\r\n    if (IsWindows7OrLower)\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        int length = 0;\r\n        StringBuilder sb = new StringBuilder(0);\r\n        int result = GetCurrentPackageFullName(ref length, sb);\r\n\r\n        sb = new StringBuilder(length);\r\n        result = GetCurrentPackageFullName(ref length, sb);\r\n\r\n        return result != APPMODEL_ERROR_NO_PACKAGE;\r\n    }\r\n}\r\n\r\nprivate bool IsWindows7OrLower\r\n{\r\n    get\r\n    {\r\n        int versionMajor = Environment.OSVersion.Version.Major;\r\n        int versionMinor = Environment.OSVersion.Version.Minor;\r\n        double version = versionMajor + (double)versionMinor / 10;\r\n        return version <= 6.1;\r\n    }\r\n}\r\n```\r\n\r\nWorks in `Debug` builds, but fails in Release/.NET Native builds with a runtime `TypeLoadException` in the latest stable VS.NET 17.6 and now fails with a build time Exception with the latest VS.NET 17.8 Preview:\r\n\r\n```\r\nMicrosoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.1.8\\tools\\Microsoft.NetNative.targets(788,5): warning : MCG : warning MCG0007: Unresolved P/Invoke method 'kernel32.dll!GetCurrentPackageFullName' for method 'System.Int32 ServiceStack.Text.Env.GetCurrentPackageFullName(System.Int32, System.Text.StringBuilder)'. Calling this method would throw exception at runtime. Please make sure the P/Invoke either points to a Windows API allowed in UWP applications, or a native DLL that is part of the package. If for some reason your P/Invoke does not satisfy those requirements, please use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP APIs.\r\n```\r\n\r\nWhat is the recommended way within a **.NET Standard 2.0** .dll to determine if an App is running in UWP that works in both Debug and Release/.NET Native builds? \r\n\r\nAs the recommendation is to use **.NET Standard 2.0** builds for creating compatible libraries across different platforms we need a reliable way to determine at runtime which platform the library is running on. Whilst this issue is for trying to detect UWP, we also need a way to detect if running on iOS/Android. \r\n\r\nAlthough this issue doesn't specifically address being able to determine the running platform (e.g. iOS/Android/UWP), it covers why we need to detect Platform at runtime in platform-agnostic .NET Standard 2.0 builds:\r\n\r\nhttps://github.com/dotnet/corefx/issues/17452"},{"Id":"8069014065","Type":"PullRequestEvent","CreatedAt":"2018-08-06T02:44:34","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31603","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26806-01, preview1-26806-01, preview1-26805-04, respectively (master)\" (#31603) at dotnet/corefx","RelatedBody":""},{"Id":"8068772334","Type":"PullRequestEvent","CreatedAt":"2018-08-06T00:46:48","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31603","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26806-01, preview1-26805-04, respectively (master)\" (#31603) at dotnet/corefx","RelatedBody":""},{"Id":"8068628855","Type":"PullRequestEvent","CreatedAt":"2018-08-05T22:52:44","Actor":"filipnavara","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31602","RelatedDescription":"Opened pull request \"WIP: System.Security: Convert [DSA/RSA/Ecc]SecurityTransforms to new ASN.1 APIs\" (#31602) at dotnet/corefx","RelatedBody":"- Moves key parsing helper methods from `DSA`, `RSA`, `ECParameters` to `DSAKeyFormatHelper`, `RSAKeyFormatHelper`, `EccKeyFormatHelper`.\r\n- Gets rid of all the key parsing code in [DSA/RSA/Ecc]SecurityTransforms by calling `[DSA/RSA/Ecc]KeyFormatHelper` instead.\r\n- Removed unnecessary encrypted PKCS#8 parsing from Interop.SecKeyRef.Export.cs and replaced with using `ReadEncryptedPkcs8` in `KeyFormatHelper`.\r\n- Simplified import of DSA private key on macOS. Now instead of two pinvoke calls the public key is computed from the private key.\r\n\r\n/cc @bartonjs "},{"Id":"8068625193","Type":"PullRequestEvent","CreatedAt":"2018-08-05T22:49:34","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31601","RelatedDescription":"Merged pull request \"System.Security: Fix implementation of WriteKeyParameterInteger.\" (#31601) at dotnet/corefx","RelatedBody":"Noticed this while finishing up my code sharing PR for [RSA/DSA/Ecc]SecurityTransforms.cs and [RSA/DSA/ECDsa].cs. Should be easy to review alone :-)\r\n\r\n/cc @bartonjs "},{"Id":"8068624678","Type":"PullRequestEvent","CreatedAt":"2018-08-05T22:49:07","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31580","RelatedDescription":"Merged pull request \"System.Security:  Use GeneralNameAsn in SubjectAlternativeNameBuilder\" (#31580) at dotnet/corefx","RelatedBody":""},{"Id":"8068451421","Type":"PullRequestEvent","CreatedAt":"2018-08-05T20:38:47","Actor":"filipnavara","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31601","RelatedDescription":"Opened pull request \"System.Security: Fix implementation of WriteKeyParameterInteger.\" (#31601) at dotnet/corefx","RelatedBody":"Notice this while finishing up my code sharing PR for [RSA/DSA/Ecc]SecurityTransforms.cs and [RSA/DSA/ECDsa].cs. Should be easy to review alone :-)\r\n\r\n/cc @bartonjs "},{"Id":"8068119841","Type":"IssuesEvent","CreatedAt":"2018-08-05T16:28:30","Actor":"nguerrera","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/4786","RelatedDescription":"Closed issue \"Mechanism for reading directly from file to unmanaged memory\" (#4786) at dotnet/corefx","RelatedBody":"System.Reflection.Metadata has an optimization where it reads files small enough to not warrant memory mapping directly into the unmanaged heap (without an intermediate copy on the managed heap). This optimization is done by lighting up on Windows to the native `ReadFile` API. For this to work cross-plat there should be a way to pass unmanaged memory to Stream and have FileStream override it to not involve intermediate copies to managed memory. This could possibly be accomplished via `Span<byte>` support in `Stream` overridden by `FileStream`. \n\ncc @KrzysztofCwalina\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8069314853","Type":"IssuesEvent","CreatedAt":"2018-08-06T05:01:53","Actor":"abhijitparkhi1983","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29096","RelatedDescription":"Opened issue \"Project.HasDocuments returned false for any NON .net core .csproj on ubuntu\" (#29096) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n.NET CLI version 2.8.2\r\n**Steps to Reproduce**:\r\n\r\n1. I am trying to Analyze each document of a .csproj. For this purpose, i am using various API's provided by Roslyn Compiler. \r\n2. I already had an application developed in .NET Standard which utilizes the **MSBuildWorkspace** class for loading the .csproj files and then their respective .cs files using the following code:\r\n```\r\nusing (var workspace = MSBuildWorkspace.Create())\r\n{\r\n      Project currentProject = workspace.OpenProjectAsync(projectPath).Result;\r\n       workspace.LoadMetadataForReferencedProjects = true;\r\n       if (currentProject.HasDocuments)\r\n       {\r\n           foreach(Document document in currentProject.Documents)\r\n           {\r\n                  var name = document.Name;\r\n            }\r\n        }\r\n}\r\n```\r\n3. The above code works well on a Windows machine for both .NET Standard based .csproj's and .NET Core based .csrpoj's input projects.\r\n4. I had a new requirement for supporting the same application on Ubuntu 16.4 environment. As per my research on different forums related to Roslyn,  writing the above .NET Standard based code using .NET Core can help in running the application on Ubuntu as well . But obviously, .NET Core does not support **MSBuildWorkspace**  out of the box is what the research suggested.\r\n5. So in the process of finding an option for **MSBuildWorkspace**, i utilized the **Buildalyzer** framework, specifically the **Buildalyzer.Workspaces** library for creating a **AdhocWorkspace** workspace and then running through each of the Document object.\r\n6. Following is the .net core equivalent code : \r\n\r\n```\r\n //var workspace = MSBuildWorkspace.Create();\r\n var sb = new StringBuilder();\r\n var writer = new StringWriter(sb);\r\n\r\n var manager = new AnalyzerManager(solutionPath, new AnalyzerManagerOptions\r\n {\r\n       LogWriter = writer\r\n });\r\n\r\n foreach (var prj in manager.Projects.Values)\r\n {\r\n        var workspace = prj.GetWorkspace();                   \r\n        var sln = workspace.CurrentSolution;\r\n\r\n        Project currentProject = sln.Projects.FirstOrDefault();\r\n\r\n       if(currentProject.HasDocuments)\r\n       {\r\n             foreach (Document document in currentProject.Documents)\r\n             {\r\n                  var name = document.Name;\r\n             }\r\n       }\r\n}\r\nwriter.Close();\r\n```\r\n\r\n**Expected Behavior**:\r\nThe **HasDocuments** property in the above .NET Core based code should return true for any .csproj which is based on .NET Standard and/or based on .NET Core in the Ubuntu environment. \r\n\r\n**Actual Behavior**:\r\nThis new .NET Core code works well for all .csproj's developed using .NET Standard or .NET Core on Windows machine but when i try to deploy the same application on a Ubuntu machine, the **HasDocuments** property returns false always for any .csproj which is based on .NET Standard and returns true for any .csproj which is based on .NET Core. "},{"Id":"8068986266","Type":"IssuesEvent","CreatedAt":"2018-08-06T02:32:18","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29095","RelatedDescription":"Opened issue \"Give visual indication that a warning was treated as error\" (#29095) at dotnet/roslyn","RelatedBody":"When passing `/warningaserror` to Csc/Vbc, the compilers automatically promote compiler & analyzer warnings as errors. This is great, however, as we extend the number of warnings that might be promoted - it can result in confusing behavior (case in point: https://github.com/dotnet/roslyn/issues/27819#issuecomment-410566151).\r\n\r\nC/C++ give an indication in the error text that a warning was promoted:\r\n\r\n```\r\nerror C2220: warning treated as error - no 'object' file generated\r\n```\r\n\r\nI propose, that C#/Visual Basic also give a visual indication that a warning was promoted. A couple of options:\r\n\r\n```\r\nerror CS0168: The variable 'foo' is declared but never used (warning treated as error)\r\nerror IDE0003: Name can be simplified. (warning treated as error)\r\n```\r\n\r\n```\r\nerror CS0168: (warning treated as error) The variable 'foo' is declared but never used\r\nerror IDE0003: (warning treated as error) Name can be simplified.\r\n```\r\n\r\n```\r\nerror CS0168: warning treated as error - The variable 'foo' is declared but never used\r\nerror IDE0003: warning treated as error - Name can be simplified.\r\n```"},{"Id":"8068756976","Type":"PullRequestEvent","CreatedAt":"2018-08-06T00:35:53","Actor":"lillo42","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29094","RelatedDescription":"Opened pull request \"fixed doesn't list 'assembly' keyword\" (#29094) at dotnet/roslyn","RelatedBody":"fixed issue: https://github.com/dotnet/roslyn/issues/362\r\n"},{"Id":"8068531821","Type":"PullRequestEvent","CreatedAt":"2018-08-05T21:39:05","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29093","RelatedDescription":"Opened pull request \"Display _ for unannotated TypeSymbolWithAnnotations in debugger\" (#29093) at dotnet/roslyn","RelatedBody":"Since we can't pull on `NonNullTypes` during binding, the debugger display method does not distinguish between `!` and `~` (printed as nothing). Instead it just prints nothing for both cases.\r\nI found that confusing. This PR makes both unannotated cases print as `_` (underscore) while debugging."},{"Id":"8068407932","Type":"IssuesEvent","CreatedAt":"2018-08-05T20:05:39","Actor":"siegfriedpammer","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29092","RelatedDescription":"Opened issue \"Stackalloc initializer leads to strange/unexpected IL being generated\" (#29092) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 15.7.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. New project, enable unsafe code and C# 7.3\r\n2. Paste the following code:\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MakeBlock(1, 2, 3);\r\n            Console.ReadKey();\r\n        }\r\n\r\n        static unsafe void MakeBlock(int a, int b, int c)\r\n        {\r\n            int* ptr = stackalloc int[6]\r\n            {\r\n               0, 0, 0, a, b, c\r\n            };\r\n            PrintBytes(ptr, 6);\r\n        }\r\n\r\n        static unsafe void PrintBytes(int* ptr, int count)\r\n        {\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                Console.WriteLine(\"item \" + i + \": \" + *(ptr + i));\r\n            }\r\n        }\r\n    }\r\n```\r\n3. Compile and run the program.\r\n\r\n**Expected Behavior**:\r\nFollowing output is printed to the console:\r\n```\r\nitem 0: 0\r\nitem 1: 0\r\nitem 2: 0\r\nitem 3: 1\r\nitem 4: 2\r\nitem 5: 3\r\n```\r\n\r\n**Actual Behavior**:\r\nThe following output is produced instead:\r\n```\r\nitem 0: 0\r\nitem 1: 0\r\nitem 2: 0\r\nitem 3: 0\r\nitem 4: 0\r\nitem 5: 0\r\n```\r\n\r\nThe IL of the `MakeBlock` method is the following (both ildasm and ILSpy produce the same output):\r\n```il\r\n.method private hidebysig static void  MakeBlock(int32 a,\r\n                                                 int32 b,\r\n                                                 int32 c) cil managed\r\n{\r\n  // Code size       22 (0x16)\r\n  .maxstack  4\r\n  .locals init ([0] int32* ptr)\r\n  IL_0000:  nop\r\n  IL_0001:  ldc.i4.s   24\r\n  IL_0003:  conv.u\r\n  IL_0004:  localloc\r\n  IL_0006:  dup\r\n  IL_0007:  ldc.i4.0\r\n  IL_0008:  ldc.i4.s   24\r\n  IL_000a:  initblk\r\n  IL_000c:  stloc.0\r\n  IL_000d:  ldloc.0\r\n  IL_000e:  ldc.i4.6\r\n  IL_000f:  call       void StackAllocInitBug.Program::PrintBytes(int32*,\r\n                                                              int32)\r\n  IL_0014:  nop\r\n  IL_0015:  ret\r\n} // end of method Program::MakeBlock\r\n```\r\n\r\nNote that the `ldarg` instructions for the parameters a, b and c are missing.\r\n\r\nAdditionally, the compiler emits an `initblk` instruction at offset `0xa`, which (I think?) would be redundant, because ECMA-335 (6th edition / June 2012), pg. 373, III.3.47. explicitly states that \"[...] If the localsinit flag on the method is true, the block of memory returned is initialized to 0; otherwise, the initial value of that block of memory is unspecified. [...]\".\r\n\r\nI would expect the IL output to be something like the following:\r\n\r\n```il\r\n.method private hidebysig static void  MakeBlock(int32 a,\r\n                                                 int32 b,\r\n                                                 int32 c) cil managed\r\n{\r\n  // Code size       56 (0x38)\r\n  .maxstack  4\r\n  .locals init ([0] int32* ptr)\r\n  IL_0000:  nop\r\n  IL_0001:  ldc.i4.s   24\r\n  IL_0003:  conv.u\r\n  IL_0004:  localloc\r\n  IL_0006:  dup\r\n  IL_0007:  ldc.i4.0\r\n  IL_0008:  stind.i4\r\n  IL_0009:  dup\r\n  IL_000a:  ldc.i4.4\r\n  IL_000b:  add\r\n  IL_000c:  ldc.i4.0\r\n  IL_000d:  stind.i4\r\n  IL_000e:  dup\r\n  IL_000f:  ldc.i4.2\r\n  IL_0010:  conv.i\r\n  IL_0011:  ldc.i4.4\r\n  IL_0012:  mul\r\n  IL_0013:  add\r\n  IL_0014:  ldc.i4.0\r\n  IL_0015:  stind.i4\r\n  IL_0016:  dup\r\n  IL_0017:  ldc.i4.3\r\n  IL_0018:  conv.i\r\n  IL_0019:  ldc.i4.4\r\n  IL_001a:  mul\r\n  IL_001b:  add\r\n  IL_001c:  ldarg.0\r\n  IL_001d:  stind.i4\r\n  IL_001e:  dup\r\n  IL_001f:  ldc.i4.4\r\n  IL_0020:  conv.i\r\n  IL_0021:  ldc.i4.4\r\n  IL_0022:  mul\r\n  IL_0023:  add\r\n  IL_0024:  ldarg.1\r\n  IL_0025:  stind.i4\r\n  IL_0026:  dup\r\n  IL_0027:  ldc.i4.5\r\n  IL_0028:  conv.i\r\n  IL_0029:  ldc.i4.4\r\n  IL_002a:  mul\r\n  IL_002b:  add\r\n  IL_002c:  ldarg.2\r\n  IL_002d:  stind.i4\r\n  IL_002e:  stloc.0\r\n  IL_002f:  ldloc.0\r\n  IL_0030:  ldc.i4.6\r\n  IL_0031:  call       void StackAllocInitBug.Program::PrintBytes(int32*,\r\n                                                              int32)\r\n  IL_0036:  nop\r\n  IL_0037:  ret\r\n} // end of method Program::MakeBlock\r\n```\r\n\r\nThis strange behavior only occurs, if there are three or more 0s at the start of the initializer expression. It occurs in both debug and release mode.\r\n\r\nLet me know, if you need more information."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8069157058","Type":"PullRequestEvent","CreatedAt":"2018-08-06T03:48:03","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5858","RelatedDescription":"Closed pull request \"Use new Helix queue for Windows CI builds.\" (#5858) at dotnet/corert","RelatedBody":"Skip CI please."},{"Id":"8069154522","Type":"PullRequestEvent","CreatedAt":"2018-08-06T03:46:50","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5845","RelatedDescription":"Merged pull request \"Add WebAssembly to CI\" (#5845) at dotnet/corert","RelatedBody":"Add WebAssembly to CI. This uses a set of machines that have been set up with the right tooling."},{"Id":"8069150519","Type":"PullRequestEvent","CreatedAt":"2018-08-06T03:45:02","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6183","RelatedDescription":"Closed pull request \"CI tests (please ignore)\" (#6183) at dotnet/corert","RelatedBody":"Testing some CI scenarios. Please ignore."},{"Id":"8068901861","Type":"PullRequestEvent","CreatedAt":"2018-08-06T01:57:09","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6183","RelatedDescription":"Opened pull request \"CI tests (please ignore)\" (#6183) at dotnet/corert","RelatedBody":"Testing some CI scenarios. Please ignore."},{"Id":"8068762320","Type":"PullRequestEvent","CreatedAt":"2018-08-06T00:39:49","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6180","RelatedDescription":"Merged pull request \"Fix WebAssembly sealed calls\" (#6180) at dotnet/corert","RelatedBody":"Fix calling sealed virtual methods now that sealed vtables are always enabled."},{"Id":"8068666566","Type":"PullRequestEvent","CreatedAt":"2018-08-05T23:25:20","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6182","RelatedDescription":"Opened pull request \"Preliminary Interpreter Support\" (#6182) at dotnet/corert","RelatedBody":"This PR includes the preliminary work need to integrate an interpreter into CoreRT to support runtime code generation scenarios.\r\n\r\nTo test the current interpreter status:\r\n\r\n1. Create a new console project with a main method with the following signature and code\r\n```csharp\r\npublic static int Main()\r\n{\r\n    return 100;\r\n}\r\n```\r\nYou can return any arbitrary integer value, the project must be compiled in release mode because the interpreter currently only supports `ldc.i*` and `ret` opcodes.\r\n\r\n2. Create a new CoreRT console project and include the following code in its `Main` method\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    byte[] buffer = File.ReadAllBytes(@\"path\\to\\above\\release\\mode\\assembly.dll\");\r\n    var assembly = Assembly.Load(buffer);\r\n    var entryPoint = assembly.EntryPoint;\r\n    int code = (int)entryPoint.Invoke(null, null);\r\n    Console.WriteLine(code);\r\n}\r\n```\r\nThis code loads the assembly in `(1)`, retrieves its `EntryPoint` and invokes it at runtime all within the CoreRT runtime with the help of the interpreter. Add an `rd.xml` file to the CoreRT project with the following contents:\r\n```xml\r\n<Directives>\r\n  <Application>\r\n    <Assembly Name=\"System.Runtime\" Dynamic=\"Required All\" />\r\n  </Application>\r\n</Directives>\r\n```\r\nInclude the `rd.xml` in the build pipeline by adding it to the CoreRT csproj:\r\n```xml\r\n<ItemGroup>\r\n  <RdXmlFile Include=\"rd.xml\" />\r\n</ItemGroup>\r\n```\r\nCompile the CoreRT app with the experimental interpreter enabled\r\n```bash\r\ndotnet build /t:LinkNative /p:ExperimentalInterpreterSupport=true\r\n```\r\n\r\nIf all goes well, `100` will be printed to the terminal. You can update the return code of the main method in `(1)` for further tests. You won't need to rebuild the CoreRT app, just the assembly that is loaded.\r\n\r\nThe interpreter work is still in very early stages and I intend to put in further work to add support for all CLR opcodes. Dynamically loading a .NET assembly at runtime is the current scenario being tested, after which the `Reflection.Emit` API can be updated to take advantage of the interpreter functionality.\r\n\r\ncc @jkotas @MichalStrehovsky "},{"Id":"8067865319","Type":"IssuesEvent","CreatedAt":"2018-08-05T13:34:25","Actor":"Happypig375","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6131","RelatedDescription":"Closed issue \"Explicitly installing System.Numerics.Vectors causes build to fail\" (#6131) at dotnet/corert","RelatedBody":"In a UWP application in Release mode (aka .NET Native used), the following error occurs.\r\n\r\n[See sample](https://github.com/Happypig375/NetNativeError)\r\n\r\nNormal build log:\r\n```\r\n1>------ Build started: Project: NetNativeError.Control, Configuration: Release x86 ------\r\n1>  NetNativeError.Control -> C:\\Users\\user\\Source\\Repos\\NetNativeError\\NetNativeError.Control\\bin\\x86\\Release\\NetNativeError.Control.exe\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 56 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Generating serialization code\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>  Generating fixups for native code\r\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\nBuild log after explicitly installing the System.Numerics.Vectors NuGet package (4.1.1 and 4.5.0 tested; 4.1.1 used in sample):\r\n```\r\n1>------ Build started: Project: NetNativeError.Error, Configuration: Release x86 ------\r\n1>  NetNativeError.Error -> C:\\Users\\user\\Source\\Repos\\NetNativeError\\NetNativeError.Error\\bin\\x86\\Release\\NetNativeError.Error.exe\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 56 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Generating serialization code\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Users\\user\\.nuget\\packages\\microsoft.net.native.compiler\\1.7.3\\tools\\Microsoft.NetNative.targets(697,5): error : Error: NUTC301B:Internal Compiler Error: Assembly 'C:\\Users\\user\\Source\\Repos\\NetNativeError\\NetNativeError.Error\\obj\\x86\\Release\\ilc\\intermediate\\ILTransformed\\NetNativeError.Error.ilexe' not found\r\n1>C:\\Users\\user\\.nuget\\packages\\microsoft.net.native.compiler\\1.7.3\\tools\\Microsoft.NetNative.targets(697,5): error : ILT0005: 'C:\\Users\\user\\.nuget\\packages\\microsoft.net.native.compiler\\1.7.3\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\user\\Source\\Repos\\NetNativeError\\NetNativeError.Error\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\NetNativeError.Error.rsp\"' returned exit code 1\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8068291184","Type":"IssuesEvent","CreatedAt":"2018-08-05T18:37:14","Actor":"MikaelUmaN","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2455","RelatedDescription":"Opened issue \"Dotnet tool install cannot handle space+unicode paths\" (#2455) at dotnet/sdk","RelatedBody":"Please see original issue:\r\n\r\nhttps://github.com/fsharp/FAKE/issues/2054#issuecomment-410527662\r\n\r\n**To reproduce**\r\n\r\n```\r\nmatth@DESKTOP-FQBAN56 E:\\Projects\\FAKE\\temp\\Mikael Öhman\\Reproduce\r\n$ dotnet tool install fake-cli --tool-path ./.fake --version 5.*\r\nMSBUILD : Error MSB1006: Property is not valid.\r\nSwitch: hman\\Reproduce\\.fake\\.store\\.stage\\24kqfmg2.aq2\r\nFor switch syntax, type \"MSBuild /help\"\r\nThe tool package could not be restored.\r\nTool 'fake-cli' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool\r\n```\r\n\r\n**Expected result**\r\nFake CLI tools are installed in the folder with path involving spaces and unicode characters (e.g. Ö).\r\n\r\n**Actual result**\r\nThe error seen above.\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1025145757714640896","CreatedAt":"2018-08-02T22:26:09+00:00","UserScreenname":"dotnet","Text":"Tiered Compilation Preview in .NET Core 2.1 https://t.co/iDmpwcq86K by @noahsfalk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":234,"FavoriteCount":141,"RawContent":null},{"Id":"1022528693199990784","CreatedAt":"2018-07-26T17:06:52+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is partnering with organizers around the globe to bring you local in-person events and watch parties! J… https://t.co/jOUga16bB0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":155,"FavoriteCount":82,"RawContent":null}]}},"RunOn":"2018-08-06T05:30:27.4801876Z","RunDurationInMilliseconds":7741}