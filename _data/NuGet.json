{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10804643770","Type":"IssuesEvent","CreatedAt":"2019-11-06T22:41:36","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7683","RelatedDescription":"Opened issue \"Add administrator portal for vulnerability metadata\" (#7683) at NuGet/NuGetGallery","RelatedBody":"This Admin page should allow the following:\n- adding a vulnerability\n- removing a vulnerability\n- adding a package to a vulnerability\n- removing a package from a vulnerability\n\nNote that these behaviors should be done in such a way that GitHubVulnerabilities2Db does not overwrite them."},{"Id":"10803109813","Type":"PullRequestEvent","CreatedAt":"2019-11-06T19:12:24","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7678","RelatedDescription":"Merged pull request \"Manage Package page forms should link back to the Manage page\" (#7678) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/nugetgallery/issues/7567\r\nhttps://github.com/nuget/nugetgallery/issues/7495\r\n\r\nCurrently, when you submit a form on the Manage Package page (Deprecation, Listing, Documentation) you are linked back to the package details page. This is annoying when you are trying to do other management operations at the same time.\r\n\r\nThis changes it so that submitting the forms stays on the Manage Package page. Additionally, I added \"TempData\" messages so that it's clearer what operation was performed."},{"Id":"10802726186","Type":"IssuesEvent","CreatedAt":"2019-11-06T18:23:37","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7682","RelatedDescription":"Opened issue \"Fix spacing issue on organization page\" (#7682) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10795212627","Type":"IssuesEvent","CreatedAt":"2019-11-06T00:01:49","Actor":"donnie-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7681","RelatedDescription":"Opened issue \"Does overwriting snupkgs on Push make sense?\" (#7681) at NuGet/NuGetGallery","RelatedBody":"**nupkg behavior:** If a nupkg exists, a consistent response of 409 will be returned. Client handles this differently based on whether -SkipDuplicate is provided as part of the push.\r\n\r\n**snupkg behavior:** snupkg duplicates can sometimes behaves differently than nupkg duplicates (as is the case with nuget.org):\r\n\r\n- If a snupkg already exists when pushed,  nuget.org will simply overwrite it, validation will be re-ran on this snupkg, and a success response (HTTP-201) is returned. \r\n\r\n- A special case is if server validation is currently executing on this snupkg (as it does immediately after a push), another push of the snupkg causes the server to return this duplicate error:\r\n\r\n`Response status code does not indicate success: 409 (It looks like there is another copy of this symbols package pending validation(s). Please wait for the validation(s) to finish before trying to replace the symbols package.).`\r\n\r\n### Describe the solution you'd like\r\nIt should be discussed whether nuget.org should continue overwriting snupkgs when they are pushed. At a minimum, the existing experience is inconsistent with nupkgs.\r\n\r\nSome initial thoughts and discussion points:\r\n**Minimal use-case:** The (only?) scenario where updating (\"patching\") an existing snupkg is if you didn't include all the PDBs in the original snupkg, and subsequently added them. Is this scenario common? Should we require them to Delete their symbols through \"Delete Symbols\" button on nuget.org before they can then push the snupkg again without a 409 Conflict?\r\n\r\n**Version guidance:** Assumption here is that we prefer to not require a new package version when adding additional symbols to a snupkg. Thus, a user can incrementally fill a snupkg with PDBs as long as they don't modify the DLL.\r\n\r\n**Server workload concern:**  pushing N nupkgs (say N=100) will involuntarily update <=100 snupkgs and trigger <=100 validations of symbols that have already been through validation (assuming this trigger happens even if there are no changes to the snupkg). \r\n\r\n### Additional context\r\nNuGet Client Issue where this discussion came up: https://github.com/NuGet/Home/issues/8148\r\nDiscussion that lead to this issue by: @cristinamanum, @karann-msft, @rrelyea, @donnie-msft "},{"Id":"10794864003","Type":"IssuesEvent","CreatedAt":"2019-11-05T23:01:12","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7680","RelatedDescription":"Opened issue \"Lightning does not treat package IDs as case insensitive\" (#7680) at NuGet/NuGetGallery","RelatedBody":"This in rare cases could lead to concurrency issues when two workers are updating the same hive at the same time.\r\n\r\nhttps://github.com/NuGet/NuGet.Services.Metadata/blob/e921a7eef360ee6bcc11b7ca9f94d96e93193a1c/src/Ng/Jobs/LightningJob.cs#L262"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10804351375","Type":"IssuesEvent","CreatedAt":"2019-11-06T21:58:15","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8796","RelatedDescription":"Opened issue \"The Visual Studio NuGet packages (RestoreManagerPackage and NuGetPackage packages) needs to auto load on solution build events\" (#8796) at NuGet/Home","RelatedBody":"See https://dev.azure.com/devdiv/DevDiv/_workitems/edit/792876. \r\n\r\n\r\nFrom a thread: \r\n\r\nWe had a discussion on this and decided the proper way to do this is to whitelist the SolutionBuilding UI context for sync autoload. \r\n\r\nAfter the UI context is whitelisted, nuget will have to add the following into the package definition:\r\n[ProvideAutoLoad(VSConstants.UICONTEXT.SolutionBuilding_string)]\r\n\r\nNote that there should be no PackageAutoLoadFlags.BackgroundLoad flag in this registration. Otherwise your package will be async autoloaded, causing the same issue. Note that you may also want to keep the existing autoload on solution exists, as thatâ€™s async autoload and helps the Build performance sometimes.\r\n"},{"Id":"10804288760","Type":"IssuesEvent","CreatedAt":"2019-11-06T21:49:40","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8795","RelatedDescription":"Opened issue \"In deprecation UI, alternate package with \"*\" range shows >= 0.0.0\" (#8795) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet product used:** Package Manager Console\r\n**NuGet version:** 5.5.0.6293\r\n**VS version:** 16.5.0 Preview 1.0 [29430.205.master]\r\n**OS version:** Windows 10 Version 1909\r\n**Worked before?** Yes with 5.4.0.6271\r\n\r\nLikely changed behavior with https://github.com/NuGet/NuGet.Client/pull/3079.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open PM UI\r\n1. Go to Browse tab\r\n1. Make sure only nuget.org is the selected source\r\n1. Search for Test4Nuggets\r\n1. Select that package and look at the right side pane where it has deprecation information\r\n\r\nIt shows `>= 0.0.0`. I think this is confusing because 0.0.0 is not a real version on most packages and is kind of a side-effect of `*` having a minimum version of 0.0.0 in memory.\r\n\r\n## Other suggested things\r\n\r\n### Screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/94054/68340443-55584300-009b-11ea-9de7-ad739edb3a3c.png)\r\n\r\nCompare to nuget.org:\r\n\r\n![image](https://user-images.githubusercontent.com/94054/68340800-f646fe00-009b-11ea-8eeb-9d1be82631a9.png)\r\n\r\n\r\n/cc @xavierdecoster @nkolev92 @scottbommarito @anangaur   @xavierdecoster \r\n\r\n\r\n\r\n"},{"Id":"10800468174","Type":"IssuesEvent","CreatedAt":"2019-11-06T14:16:42","Actor":"mheyman","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8794","RelatedDescription":"Opened issue \"\"version\" environment variable improperly used\" (#8794) at NuGet/Home","RelatedBody":"## Details about Problem\r\nIf one sets the \"version\" environment variable prior to running `nuget restore` than the restore will fail if the value isn't something like 1.2.3\r\n\r\nNuGet product used: NuGet.exe | Package Manager Console | dotnet.exe\r\nNuGet version:  4.8.1.5435\r\ndotnet.exe --version: 3.0.1\r\nVS version: 16.3.7\r\nOS version: Win10 v1809 (17763.805)\r\nWorked before? Unknown\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n<span>1.</span> `C:\\> set version=foobar`\r\n<span>2.</span> `C:\\Users\\me\\source\\repos\\my-project> nuget.exe restore`</br>\r\n   or\r\n<span>2.</span> `C:\\Users\\me\\source\\repos\\my-project> dotnet restore`</br>\r\n   or\r\n<span>2.</span>  `C:\\> devenv.exe`\r\n   Then, from package manager console:\r\n<span>3.</span>  `PM> Update-Package -Reinstall`\r\n\r\n## Other suggested things\r\n\r\nDocumentation page https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-environment-variables doesn't reflect usage of the \"version\" environment variable.\r\n\r\n### Verbose Logs\r\n[foobarlog.txt](https://github.com/NuGet/Home/files/3814825/foobarlog.txt)\r\n"},{"Id":"10796414879","Type":"IssuesEvent","CreatedAt":"2019-11-06T04:22:24","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7505","RelatedDescription":"Closed issue \"ErrorUnsafePackageEntry error message is not pointing to source of problem\" (#7505) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet.exe\r\n\r\nNuGet version (5.8.1.xxx):\r\n\r\n1. create a package with a file with ~ at the end of extension \r\n\r\n2. create packages.config with above package record\r\n\r\n3. use nuget restore in packages.config location\r\n\r\n*. there is a chance that the file will not be validated and package will be extracted but usually it fails:\r\n\r\n        C:\\Jenkins\\Workspace\\SolutionName>nuget.exe restore \r\n        MSBuild auto-detection: using msbuild version '15.8.169.51996' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\bin'.\r\n        Restoring NuGet package PackageName.5.6.6.\r\n\r\n        Adding package 'PackageName.5.6.6' to folder 'C:\\Jenkins\\Workspace\\SolutionName\\packages'\r\n        WARNING: The package 'PackageName.5.6.6' contains an entry which is unsafe for extraction.\r\n        Committing restore...\r\n\r\n        Assets file has not changed. Skipping assets file writing. Path: C:\\Jenkins\\Workspace\\SolutionName\\ProjectName\\obj\\project.assets.json\r\n        Restore completed in 92.29 ms for C:\\Jenkins\\Workspace\\SolutionName\\ProjectName\\ProjectName.csproj.\r\n        Errors in packages.config projects\r\n            The package 'PackageName.5.6.6' contains an entry which is unsafe for extraction.\r\n"},{"Id":"10794429535","Type":"IssuesEvent","CreatedAt":"2019-11-05T21:59:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8793","RelatedDescription":"Opened issue \"DG Spec for unloaded project scenarios should not be written in preview restores\" (#8793) at NuGet/Home","RelatedBody":"Specifically this is a problem: https://github.com/NuGet/NuGet.Client/blob/52ee9a5a9483518f5449957bbf3d3da7d9cf82c1/src/NuGet.Core/NuGet.Commands/RestoreCommand/RestoreCommand.cs#L558"},{"Id":"10793717197","Type":"IssuesEvent","CreatedAt":"2019-11-05T20:31:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8630","RelatedDescription":"Closed issue \"Migrate .nuget\\packages.config file in NuGet.Client to PackageDownload\" (#8630) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n- NuGet product used: NuGet.exe \r\n- NuGet version (x.x.x.xxx): 5.1.*\r\n- `dotnet.exe --version`: 2.1.70*, 2.2.30*\r\n\r\nWorked before? No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Build NuGet.Client from this [git ref](https://github.com/NuGet/NuGet.Client/commit/dc72141d53cdec46b13c5a4a08ffdd5cefe7a3a1)\r\n\r\n## Other suggested things\r\n\r\nCurrently, NuGet.Client project uses a packages.config file to download some initial packages needed by other build steps.\r\n\r\n### Problems\r\n\r\n- Only works with `nuget.exe`\r\n- It becomes more difficult to specify conditional NuGet sources without using out-of-the-box tooling.\r\n\r\nBy migrating to `PackageDownload` we can get some benefits such as:\r\n\r\n- Removing any dependency on nuget.exe in the local build\r\n- Conditional project sources via `RestoreAdditionalProjectSources`\r\n"},{"Id":"10792259302","Type":"IssuesEvent","CreatedAt":"2019-11-05T17:32:36","Actor":"lnicolae","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8790","RelatedDescription":"Closed issue \"Response status code does not indicate success: 403 (The specified API key is invalid, has expired, or does not have permission to access the specified package.)\" (#8790) at NuGet/Home","RelatedBody":"Nuget 5.3.1\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe from console)\r\n\r\nNuGet version 5.3.1:\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? Don't know\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. From console with admin rights:\r\n\r\nC:\\Users\\xxx\\Source\\Repos\\ConsoleApp11\\ConsoleApp2\\bin\\Release>\"c:\\users\\xxx\\appdata\\local\\microsoft\\visualstudio\\16.0_f557710cexp\\extensions\\xxx\\vsixtesttehnolog\\1.0\\NuGet\\nuget.exe\" push \"C:\\Users\\xxx\\Source\\Repos\\ConsoleApp11\\ConsoleApp2\\bin\\Release\\ConsoleApp2.1.0.1.nupkg\" -Source https://api.nuget.org/\r\nPushing ConsoleApp2.1.0.1.nupkg to 'https://www.nuget.org/api/v2/package'...\r\nPUT https://www.nuget.org/api/v2/package/\r\nForbidden https://www.nuget.org/api/v2/package/ 980ms\r\nResponse status code does not indicate success: 403 (The specified API key is invalid, has expired, or does not have permission to access the specified package.).\r\nKey is Valid was generate 2 minutes before the push command from console with admin right. Alto I set the key with nuget.exe setApiKey and the same error\r\n..\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPushing ConsoleApp2.1.0.1.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n  PUT https://www.nuget.org/api/v2/package/\r\n  Forbidden https://www.nuget.org/api/v2/package/ 980ms\r\nResponse status code does not indicate success: 403 (The specified API key is invalid, has expired, or does not have permission to access the specified package.).\r\n\r\n### Sample Project\r\nIn code:\r\nProject that try to push the package is a  VSIX propect type that use a async function to push packages\r\n\r\n----------------\r\n            await Task.Run(() =>\r\n            {\r\n                Process cmd = new Process();\r\n                cmd.StartInfo.FileName = commandToExecute;\r\n                cmd.StartInfo.Arguments = arguments;\r\n                cmd.StartInfo.Verb = verb;\r\n                cmd.StartInfo.RedirectStandardInput = true;\r\n                cmd.StartInfo.RedirectStandardOutput = true;\r\n                cmd.StartInfo.CreateNoWindow = true;\r\n                cmd.StartInfo.UseShellExecute = false;\r\n                cmd.OutputDataReceived += Cmd_OutputDataReceived;\r\n                cmd.Start();\r\n                cmd.BeginOutputReadLine();\r\n                cmd.StandardInput.Flush();\r\n                cmd.StandardInput.Close();\r\n                cmd.WaitForExit();\r\n            }).ConfigureAwait(false);\r\n-----------------"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"},{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-07T05:30:46.2416705Z","RunDurationInMilliseconds":3120}