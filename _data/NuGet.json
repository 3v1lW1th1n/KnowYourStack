{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10062105392","Type":"PullRequestEvent","CreatedAt":"2019-07-22T23:39:49","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7000","RelatedDescription":null,"RelatedBody":"This is minimal effort to make a tool that will allow teams to check the metadata of their package before pushing it to nuget.org. This is optional but will help teams catch metadata problems before shipping.\r\n\r\nWe can formalize the tool later, perhaps with `nuget.exe verify` and some kind of rules abstraction. But this is the cheap first step.\r\n\r\nIt's a old style tools package and requires .NET Framework 4.6.2. The .exe is here inside the package:\r\n\r\n```\r\ntools\\NuGet.VerifyMicrosoftPackage.exe\r\n```\r\n\r\nIn other words, it can be used like `NuGet.CommandLine` or `xunit.runner.console` where the user just hard codes the path inside the package of where the .exe is.\r\n\r\nTeams with non-standard rules can specify a path to their custom rule set using `--rule-set`. We can communicate in a doc what owners have non-standard rule sets and what they are. There are 4 non-standard 4 rule sets in the PROD DB today.\r\n\r\nWe should also document that this does not cover author signature verification. This can easily be done with `nuget.exe verify -Signatures -CertificateFingerprint`.\r\n\r\n## Open Questions\r\n\r\n- How to know if the rules compiled into the tool are out of date?\r\n   - We would release a new package to nuget.org after every master merge. Customers would just take latest package version\r\n- Wouldn't a verify endpoint be easier? üê± \r\n\r\n## Example output - invalid\r\n\r\nExit code is 1 (the number of bad packages).\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\n\r\nINVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\nThe package TestPackage-65ed825e-dd81-4964-9599-f6a28d67171d 1.0.0 is not compliant.\r\nThere is 1 problem.\r\n  - The package metadata defines 'Not Microsoft' as one of the authors which is not allowed by policy.\r\n\r\nValid package count: 0\r\nInvalid package count: 1\r\n\r\nThe metadata validation used the following property names and JSON ruleset.\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.\",\r\n    \"¬© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"¬© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"¬© Microsoft Corporation. V≈°echna pr√°va vyhrazena.\",\r\n    \"¬© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"¬© Microsoft Corporation. Wszelkie prawa zastrze≈ºone.\",\r\n    \"¬© Microsoft Corporation. Tous droits r√©serv√©s.\",\r\n    \"¬© Microsoft Corporation„ÄÇ ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ\",\r\n    \"¬© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"¬© –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –ú–∞–π–∫—Ä–æ—Å–æ—Ñ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\r\n    \"¬© Microsoft Corporation„ÄÇ Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n\r\n## Example output - all valid\r\n\r\nExit code is 0.\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\n\r\nVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\nThe package TestPackage-9be3d65e-7aa0-40e5-9cdb-6f5dc2fd8318 1.0.0 is compliant.\r\n\r\nValid package count: 1\r\nInvalid package count: 0\r\n```\r\n\r\n## Help text\r\n\r\nExit code is -1.\r\n\r\n```\r\nNuGet.VerifyMicrosoftPackage 0.0.1-jver-verify\r\n\r\nUsage: NuGet.VerifyMicrosoftPackage [arguments] [options]\r\n\r\nArguments:\r\n  PATHS  One or more file paths to a package (.nupkg).\r\n\r\nOptions:\r\n  -v | --version            Show version information.\r\n  -? | -h | --help          Show help information.\r\n  --recursive               Evaluate wildcards recursively into child directories.\r\n  --rule-set                A path to a JSON rule set file. See the default below.\r\n  --write-default-rule-set  Write the default rule set to the provided --rule-set file path.\r\n\r\nThis tool determines if a .nupkg meets the metadata requirements for Microsoft packages\r\non nuget.org. Relative paths and wildcards in the file name are supported. Globbing and\r\nwildcards in the directory are not supported.\r\n\r\nThe default rule set used for validation is the following:\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.\",\r\n    \"¬© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"¬© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"¬© Microsoft Corporation. V≈°echna pr√°va vyhrazena.\",\r\n    \"¬© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"¬© Microsoft Corporation. Wszelkie prawa zastrze≈ºone.\",\r\n    \"¬© Microsoft Corporation. Tous droits r√©serv√©s.\",\r\n    \"¬© Microsoft Corporation„ÄÇ ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ\",\r\n    \"¬© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"¬© –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –ú–∞–π–∫—Ä–æ—Å–æ—Ñ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\r\n    \"¬© Microsoft Corporation„ÄÇ Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n"},{"Id":"10062100421","Type":"PullRequestEvent","CreatedAt":"2019-07-22T23:38:35","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7271","RelatedDescription":null,"RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/7064 and https://github.com/NuGet/NuGetGallery/issues/7092.\r\n\r\nFeature is not publicly available (behind feature flag), no icon file validation present and no upload UI: both will come later. No non-hijacked V2 support.\r\n\r\nAdded new `Package` flag `UsesIconFromFlatContainer` indicating the presence of embedded icon file in the package.\r\nAdded two new configuration properties:\r\n* `IgnoreIconUrl` makes Gallery ignore the `iconUrl` metadata for UI purposes (URL is still saved in DB);\r\n* `InternalIconUrlBaseAddress` specifies the base URL for internal icon storage;\r\n\r\nAdded the `IIconUrlProvider` to abstract Icon URL generation. Two methods there are for convenience, to reduce boilerplate null checks when we need `Uri` objects instead of strings.\r\n\r\nWe have fairly deep view-model inheritance trees in certain places and have an unfortunate tendency to bring business logic into them. I am not going to address that as a part of the work, since that would require major updates. Instead I pass `IIconUrlProvider` around. I added an engineering work item linking to this issue to track the view-model fix."},{"Id":"10062062920","Type":"PullRequestEvent","CreatedAt":"2019-07-22T23:29:24","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7347","RelatedDescription":null,"RelatedBody":"Package title was eliminated from\r\n* DisplayPackage.cshtml\r\n* _ListPackage.cshtml\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/7149"},{"Id":"10062058966","Type":"PullRequestEvent","CreatedAt":"2019-07-22T23:28:25","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7364","RelatedDescription":null,"RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/2599.\r\n\r\n`ViewModelExtensions` class was added and all the initialization code from the constructors was moved there. All the properties of affected VMs were made read-write where possible, so controllers are now have freedom to set the to whatever they like without potentially complicated (in case of deep inheritance trees) changes to VM constructors.\r\n`BasicUserViewModel` class was introduced to be used instead of passing `User` model into VMs, helpers were updated to accommodate to the change."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10063066204","Type":"IssuesEvent","CreatedAt":"2019-07-23T04:02:02","Actor":"Thaina","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8371","RelatedDescription":"Opened issue \"[feature request] SemVer auto versioning possible?\" (#8371) at NuGet/Home","RelatedBody":"I think more and more people understanding versioning number in SemVer format to publish with nuget. And SemVer is mostly straightforward. It seem like we could possibly have analyzer and diff automatically with C# reflection by comparing public signature & deprecate attribute & file hash\r\n\r\n- If all public signature is the same but file hash changed, bump the patch\r\n- If there are any new public signature | deprecate attribute then bump the minor\r\n- If there are any missing public signature (include change of signature) then bump the major\r\n\r\nAnd so I wish that we would have a command to let nuget analyze the build number from SemVer rule compare with previous published version. Or if possible, I wish that nuget would bump the version in project config file comparing to previous git commit whenever the project built"},{"Id":"10062138817","Type":"IssuesEvent","CreatedAt":"2019-07-22T23:48:28","Actor":"JarahSi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8199","RelatedDescription":"Reopened issue \"Generate report on TFM compatibility for most popular nuget.org packages\" (#8199) at NuGet/Home","RelatedBody":"Analyse packages with low install/restore success rate with packages with high success rate, to come up with suggestions for pack validation rules to help package authors create packages with fewer issues."},{"Id":"10062138445","Type":"IssuesEvent","CreatedAt":"2019-07-22T23:48:22","Actor":"JarahSi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8199","RelatedDescription":"Closed issue \"Generate report on TFM compatibility for most popular nuget.org packages\" (#8199) at NuGet/Home","RelatedBody":"Analyse packages with low install/restore success rate with packages with high success rate, to come up with suggestions for pack validation rules to help package authors create packages with fewer issues."},{"Id":"10062137925","Type":"IssuesEvent","CreatedAt":"2019-07-22T23:48:15","Actor":"JarahSi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8197","RelatedDescription":"Closed issue \"Tool to generate report on package/tfm compatibility\" (#8197) at NuGet/Home","RelatedBody":"Create tool to test package compatibility with most popular packages from nuget.org with a set of TFMs."},{"Id":"10062137275","Type":"IssuesEvent","CreatedAt":"2019-07-22T23:48:05","Actor":"JarahSi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8200","RelatedDescription":"Closed issue \"APIs to get TFMs supported by package\" (#8200) at NuGet/Home","RelatedBody":"Talk to stakeholders to find what information is most useful to them.\n\nImplement required APIs\n\nAPIs to implement (update after talking to stakeholders)\n- [ ] IEnumerable<NuGetFramework> GetPackageFrameworks(package)"},{"Id":"10061663314","Type":"IssuesEvent","CreatedAt":"2019-07-22T22:01:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8370","RelatedDescription":"Opened issue \"Analyze the refresh metrics\" (#8370) at NuGet/Home","RelatedBody":"Follow up to https://github.com/NuGet/Home/issues/8369"},{"Id":"10061171210","Type":"IssuesEvent","CreatedAt":"2019-07-22T20:39:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8367","RelatedDescription":"Closed issue \"Builds tags can't be set if the author name has special characters\" (#8367) at NuGet/Home","RelatedBody":"Refer to https://github.com/NuGet/NuGet.Client/pull/2948#issuecomment-513901027"},{"Id":"10061148287","Type":"IssuesEvent","CreatedAt":"2019-07-22T20:36:25","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8360","RelatedDescription":"Closed issue \"Test:  NuGet.Protocol.Plugins.Tests.PluginProcessTests.FilePath_WithExitedProcess_Throws is flaky\" (#8360) at NuGet/Home","RelatedBody":"`NuGet.Protocol.Plugins.Tests.PluginProcessTests.FilePath_WithExitedProcess_Throws` is flaky.\r\n```\r\nNuGet.Protocol.Plugins.Tests.PluginProcessTests.FilePath_WithExitedProcess_Throws [FAIL]\r\n  Assert.Throws() Failure\r\n  Expected: typeof(System.Exception)\r\n  Actual:   (No exception was thrown)\r\n  Stack Trace:\r\n    C:\\git\\NuGet.Client\\test\\NuGet.Core.Tests\\NuGet.Protocol.Tests\\Plugins\\PluginProcessTests.cs(80,0): at NuGet.Protocol.Plugins.Tests.PluginProcessTests.<>c.<FilePath_WithExitedProcess_Throws>b__7_0(PluginProcess pluginProcess)\r\n    C:\\git\\NuGet.Client\\test\\NuGet.Core.Tests\\NuGet.Protocol.Tests\\Plugins\\PluginProcessTests.cs(167,0): at NuGet.Protocol.Plugins.Tests.PluginProcessTests.TestWithExitedProcess(Action`1 verify)\r\n    C:\\git\\NuGet.Client\\test\\NuGet.Core.Tests\\NuGet.Protocol.Tests\\Plugins\\PluginProcessTests.cs(80,0): at NuGet.Protocol.Plugins.Tests.PluginProcessTests.FilePath_WithExitedProcess_Throws()\r\n```"},{"Id":"10060739507","Type":"IssuesEvent","CreatedAt":"2019-07-22T19:35:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8369","RelatedDescription":"Opened issue \"Metrics to track the refresh rate of the PM UI\" (#8369) at NuGet/Home","RelatedBody":"Add metrics to help track the refresh rate of the PM UI. \r\n\r\nThis would allow us to track the improvements made in https://github.com/NuGet/Home/issues/8039 & \r\nhttps://github.com/NuGet/Home/issues/8339 &\r\nhttps://github.com/NuGet/NuGet.Client/pull/2935"},{"Id":"10060593293","Type":"IssuesEvent","CreatedAt":"2019-07-22T19:13:16","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8363","RelatedDescription":"Closed issue \"Test:  tests not cleaning up\" (#8363) at NuGet/Home","RelatedBody":""},{"Id":"10060580474","Type":"IssuesEvent","CreatedAt":"2019-07-22T19:11:18","Actor":"akoeplinger","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8368","RelatedDescription":"Opened issue \"Update Xamarin frameworks to map to NetStandard 2.1\" (#8368) at NuGet/Home","RelatedBody":"The mapping table in NuGet.Client needs to be updated so Xamarin frameworks can support NS2.1 libraries.\r\n\r\nSee https://github.com/NuGet/NuGet.Client/pull/2948\r\n\r\n"},{"Id":"10060339652","Type":"IssuesEvent","CreatedAt":"2019-07-22T18:34:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8367","RelatedDescription":"Opened issue \"Builds tags can't be set if the author name has special characters\" (#8367) at NuGet/Home","RelatedBody":"Refer to https://github.com/NuGet/NuGet.Client/pull/2948#issuecomment-513901027"},{"Id":"10060002772","Type":"IssuesEvent","CreatedAt":"2019-07-22T17:46:27","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8366","RelatedDescription":"Opened issue \"Test:  retarget master branch script of dotnet-install.sh\" (#8366) at NuGet/Home","RelatedBody":"Undo https://github.com/NuGet/NuGet.Client/commit/22cfeef18ce27b618f24836646ae708e77fd35f9 and retarget the `master` branch script when https://github.com/dotnet/cli/issues/11964 is fixed."},{"Id":"10059995455","Type":"IssuesEvent","CreatedAt":"2019-07-22T17:45:23","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8362","RelatedDescription":"Closed issue \"Test:  .NET Core SDK 1.1.1 is failing to install on macOS\" (#8362) at NuGet/Home","RelatedBody":".NET Core SDK 1.1.1 install is failing in our CI pipeline on macOS.  The root problem is [this change](https://github.com/dotnet/cli/commit/7a1afb7e707e44fd3a3c6e0dd81dc92aa9b7f7d9#diff-3385102241bcd3718b9ca13a0c55b9afR615);  `--remove-directory` does not exist on macOS.\r\n\r\nExample:\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ncp: illegal option -- -\r\nusage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_file\r\n       cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ... target_directory\r\n/Users/buildagent/agent/_work/33/s/cli/dotnet msbuild build/config.props /v:m /nologo /t:GetCliBranchForTesting\r\n/Users/buildagent/agent/_work/33/s/scripts/funcTests/runFuncTests.sh: line 48: /Users/buildagent/agent/_work/33/s/cli/dotnet: No such file or directory\r\n/Users/buildagent/agent/_work/33/s/scripts/funcTests/runFuncTests.sh: line 49: /Users/buildagent/agent/_work/33/s/cli/dotnet: No such file or directory\r\n\r\ncli/dotnet-install.sh: line 846: $1: unbound variable\r\n/Users/buildagent/agent/_work/33/s/scripts/funcTests/runFuncTests.sh: line 55: /Users/buildagent/agent/_work/33/s/cli/dotnet: No such file or directory\r\n\r\n```"},{"Id":"10059981293","Type":"IssuesEvent","CreatedAt":"2019-07-22T17:43:21","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8365","RelatedDescription":"Opened issue \"Test:  update .NET Core SDK\" (#8365) at NuGet/Home","RelatedBody":"[.NET Core SDK 1.0 has reached end of life status](https://dotnet.microsoft.com/download/dotnet-core).  [scripts/funcTests/runFuncTests.sh](https://github.com/NuGet/NuGet.Client/blob/cb8a79ef3c75a614b768c879cf465759c053b019/scripts/funcTests/runFuncTests.sh#L41) should be updated to 2.1 or later."},{"Id":"10059838203","Type":"IssuesEvent","CreatedAt":"2019-07-22T17:22:48","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8364","RelatedDescription":"Opened issue \"Remove temporary WorkaroundNetStandard target from common.targets\" (#8364) at NuGet/Home","RelatedBody":"Related issue: https://github.com/dotnet/cli/issues/11378\r\nThe above issue is already fixed in VS 2019 16.2 preview2. \r\nBut we don't have the latest version of VS on VSEng-MicroBuildVS2019 agent pool (the current version is 16.1.6). So we have to add a temporary WorkaroundNetStandard target to common.targets to make the build pass.\r\n\r\nWe need to remove this WorkaroundNetStandard target from common.targets when the VS on agent pool VSEng-MicroBuildVS2019 has that fix."},{"Id":"10059798556","Type":"IssuesEvent","CreatedAt":"2019-07-22T17:17:12","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8361","RelatedDescription":"Closed issue \"Test:  scripts/funcTests/runFuncTests.sh fails on macOS\" (#8361) at NuGet/Home","RelatedBody":"[This commit](https://github.com/NuGet/NuGet.Client/commit/6bbf84b17503b7c3de15edb5b639457e92cc402e) introduced an error in scripts/funcTests/runFuncTests.sh.  Example:\r\n```\r\nCleaning TMP directory\r\nrm: /tmp/dotnet.*: No such file or directory\r\nrm: -rf: No such file or directory\r\n=================\r\n/Users/buildagent/agent/_work/32/s/cli/dotnet msbuild build/build.proj /t:Restore /p:VisualStudioVersion=15.0 /p:Configuration=Release /p:BuildNumber=1 /p:ReleaseLabel=beta\r\n/Users/buildagent/agent/_work/32/s/scripts/funcTests/runFuncTests.sh: line 80: /Users/buildagent/agent/_work/32/s/cli/dotnet: No such file or directory\r\nRestore failed!!\r\n##[error]/bin/bash failed with return code: 1\r\n##[error]Bash failed with error: /bin/bash failed with return code: 1\r\n```\r\nThe reason is that the syntax for the `rm` command puts options before file/directory paths.  Linux is lenient and allows options after paths but macOS is not.\r\n\r\nCC @donnie-msft"},{"Id":"10059618925","Type":"IssuesEvent","CreatedAt":"2019-07-22T16:51:51","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8353","RelatedDescription":"Closed issue \"vs nuget settings  binding Redirects and Project binding Redirects What is the relationship?\" (#8353) at NuGet/Home","RelatedBody":"\r\nvs nuget settings  binding Redirects and Project binding Redirects What is the relationship?"},{"Id":"10053040014","Type":"IssuesEvent","CreatedAt":"2019-07-21T13:37:33","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8363","RelatedDescription":"Opened issue \"Test:  tests not cleaning up\" (#8363) at NuGet/Home","RelatedBody":""},{"Id":"10051669204","Type":"IssuesEvent","CreatedAt":"2019-07-20T22:40:13","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8362","RelatedDescription":"Opened issue \"Test:  .NET Core SDK 1.1.1 is failing to install on macOS\" (#8362) at NuGet/Home","RelatedBody":".NET Core SDK 1.1.1 install is failing in our CI pipeline on macOS.  .NET Core 1.* has reached [end of life status](https://dotnet.microsoft.com/download/dotnet-core); maybe that has something to do with it.\r\n\r\nExample:\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the‚Ä¶ https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null},{"Id":"1115380341353537538","CreatedAt":"2019-04-08T22:26:10+00:00","UserScreenname":"nuget","Text":"Alert üö®: Package publishing to @NuGet.org is taking more time than expected. The team is currently investigating th‚Ä¶ https://t.co/EuaZ7gBehM","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":1,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-07-23T05:30:45.0565219Z","RunDurationInMilliseconds":2146}