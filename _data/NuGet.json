{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10567451687","Type":"PullRequestEvent","CreatedAt":"2019-10-06T04:21:36","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7606","RelatedDescription":"Opened pull request \"[Hotfix] Fix AAD login issues for some tenants.\" (#7606) at NuGet/NuGetGallery","RelatedBody":"The fix for the https://github.com/NuGet/NuGetGallery/issues/7324 regressed the behavior for certain AAD logins. For some AAD tenants, the `EmailClaim` is null. In such scenarios `preferred_username` claim seems to have been giving us the correct data, which is what we were using previously."},{"Id":"10564581788","Type":"IssuesEvent","CreatedAt":"2019-10-05T03:15:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7605","RelatedDescription":"Opened issue \"iconUrl warning always appears\" (#7605) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nFor a package with no `<iconUrl>`, I get an `<iconUrl>` warning.\r\n\r\n### To Reproduce\r\n\r\n1. Make a package with no `<iconUrl>`.\r\n2. Drop it in the gallery upload UI.\r\n\r\n### Expected behavior\r\nNo warning.\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/94054/66249103-a616fd80-e6e3-11e9-8d9b-b853e2bcbacf.png)\r\n\r\n![image](https://user-images.githubusercontent.com/94054/66249107-b333ec80-e6e3-11e9-992e-4d3468426416.png)\r\n\r\n/cc @agr "},{"Id":"10563144257","Type":"IssuesEvent","CreatedAt":"2019-10-04T20:10:07","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7598","RelatedDescription":"Closed issue \"Certificate error on https://nuget.smbsrc.net\" (#7598) at NuGet/NuGetGallery","RelatedBody":"@xuzhg commented on [Mon Sep 30 2019](https://github.com/NuGet/Home/issues/8647)\n\nIt's failed to upload the symbols to the symbols sever, the error message:\r\n\r\n![image](https://user-images.githubusercontent.com/9426627/65919348-e4818500-e390-11e9-87df-4ac052329dcc.png)\r\n\r\n\r\nI tried the nuget.exe 5.2.0 version. It's same error message. \r\n\r\nHow can we upload the symbols server again?\r\n\n\n---\n\n@donnie-msft commented on [Tue Oct 01 2019](https://github.com/NuGet/Home/issues/8647#issuecomment-537340606)\n\n@xuzhg thanks for letting us know, moving to NuGet Gallery\n\n"},{"Id":"10562475266","Type":"IssuesEvent","CreatedAt":"2019-10-04T18:25:35","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7324","RelatedDescription":"Closed issue \"Cannot edit invalid pre-filled e-mail address on Register Microsoft account screen\" (#7324) at NuGet/NuGetGallery","RelatedBody":"### Description\r\nAttempting to log in using Microsoft account. After entering credentials, it goes to https://www.nuget.org/account/register, where it asks me to provide a username. The email field is already filled in and is not editable, but since it is my Microsoft account name and is not a valid e-mail address, I'm stuck. Attempting to go forward gives the error message: This doesn't appear to be a valid email address.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Go to this URL: https://www.nuget.org/users/account/LogOn?returnUrl=%2F\r\n2. Click Sign in with Microsoft button\r\n3. Enter Skype id (I've also tried logging out of skype.com, and coming back to nuget using the e-mail address associated with the Skype/Microsoft account - same results.)\r\n4. When prompted, I enter my password. That opens this URL: https://www.nuget.org/users/account/authenticate/return?ReturnUrl=%2f&error=&errorDescription=\r\n5. As shown in the screen shot, there is no way to edit the e-mail address. When I click Register there, I get the error: This doesn't appear to be a valid email address.\r\n\r\n### Expected behavior\r\nI either need nuget to correctly get the e-mail address associated with my Skype/Microsoft account or have it allow me to edit the e-mail address field manually.\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/4229598/60890390-2df68400-a229-11e9-9448-123f5460e769.png)\r\n"},{"Id":"10562241976","Type":"PullRequestEvent","CreatedAt":"2019-10-04T17:50:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7602","RelatedDescription":"Merged pull request \"Replacing enum StorageType with static class of constants by the same…\" (#7602) at NuGet/NuGetGallery","RelatedBody":"* Replacing enum StorageType with static class of constants by the same name.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/7601"},{"Id":"10562222201","Type":"IssuesEvent","CreatedAt":"2019-10-04T17:47:28","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7586","RelatedDescription":"Closed issue \"[Azure Search] Update gallery configs to make azure search the baseline\" (#7586) at NuGet/NuGetGallery","RelatedBody":"Done by [NuGetDeployment#1141](https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGetDeployment/pullrequest/1141?_a=overview)"},{"Id":"10556032041","Type":"IssuesEvent","CreatedAt":"2019-10-03T23:59:26","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7547","RelatedDescription":"Closed issue \"[HOTFIX] Fix statistics page\" (#7547) at NuGet/NuGetGallery","RelatedBody":"Build: https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3045222\r\nRelease: https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=445555\r\n\r\nFixed by https://github.com/NuGet/NuGetGallery/pull/7545\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/7543\r\n\r\nDeployment plan:\r\n* [x] Deploy hotfix INT\r\n* [x] Load PROD stats report into INT storage\r\n* [x] Restart a single INT Gallery instance, verify statistics page works (USSC without fix fails to load PROD stats blob)\r\n* [x] Deploy hotfix PROD\r\n* [x] Rename affected statistic blob\r\n* [x] Restart a single PROD Gallery instance, verify statistics page works\r\n* [x] Reenable CreateCdnWarehouseReports job on PROD\r\n* [x] Ensure outdated report alerts are mitigated\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146688498/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146689066/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146689071/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146573161/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146578744/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146567609/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146562311/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146551651/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146540176/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146688498/home\r\n* [x] Deploy USSC"},{"Id":"10555944042","Type":"IssuesEvent","CreatedAt":"2019-10-03T23:38:02","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6622","RelatedDescription":"Closed issue \"Preview of new nuget package. Incorrect display of multiline description and release note\" (#6622) at NuGet/NuGetGallery","RelatedBody":"Preview page displays a multiline text (description and release note of new package) in single line.\r\n\r\nThe page of published package displays a multiline text without problems.\r\n\r\nIt is creates some inconvenience.\r\n\r\nSee screenshots.\r\n![2018_11_04--nuget-01-preview_page](https://user-images.githubusercontent.com/4594554/47965093-92869100-e053-11e8-8756-72e9c2b750ce.PNG)\r\n![2018_11_04--nuget-02-package_page](https://user-images.githubusercontent.com/4594554/47965094-92869100-e053-11e8-8d56-674c19f5b190.PNG)\r\n"},{"Id":"10555935651","Type":"IssuesEvent","CreatedAt":"2019-10-03T23:36:00","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/5216","RelatedDescription":"Closed issue \"Show dotnet install command for template packages\" (#5216) at NuGet/NuGetGallery","RelatedBody":"It would be nice if the site shows the `dotnet new -i PackageName` when the nuget package is a dotnet cli template, for example [Giraffe](https://www.nuget.org/packages/giraffe-template/).\r\n\r\n![image](https://user-images.githubusercontent.com/2621499/34246832-7d9912ea-e630-11e7-8121-eb7f024bc3d7.png)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10567145620","Type":"IssuesEvent","CreatedAt":"2019-10-06T00:58:19","Actor":"TheCakeIsNaOH","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8657","RelatedDescription":"Closed issue \"Nuget push ssl certificate error when running on mono\" (#8657) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: Nuget.exe on mono docker image\r\nNuGet version: 5.2.0.6090\r\nMono version: 6.4.0.198\r\nOS version: mono:6.4.0198 docker image running on Debian 10 host\r\n\r\n### What is happening-\r\nWhen trying to push a nupkg to chocolatey.org I am getting an SSL certificate error; CERTIFICATE_VERIFY_FAILED\r\n\r\nNuget on windows works.\r\n\r\n### What I expect to happen-\r\nNuget on mono successfully making an HTTPS connection without certificate errors.\r\n\r\n\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.  docker run --rm -it mono:6.4.0.198\r\n\r\n2. curl -O /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\r\n\r\n3. alias nuget=\"mono /usr/local/bin/nuget.exe\"\r\n\r\n4.  curl -O https://packages.chocolatey.org/chocolatey.0.10.15.nupkg\r\n\r\n5. nuget push chocolatey.0.10.15.nupkg -Source https://push.chocolatey.org/\r\n\r\n### Verbose Logs\r\n\r\n```\r\nNuGet Version: 5.2.0.6090\r\nWARNING: No API Key was provided and no API Key could be found for 'https://push.chocolatey.org/'. To save an API Key for a source use the 'setApiKey' command.\r\nPushing chocolatey.0.10.15.nupkg to 'https://push.chocolatey.org/'...\r\n  PUT https://push.chocolatey.org/api/v2/package/\r\nAn error was encountered when fetching 'PUT https://push.chocolatey.org/api/v2/package/'. The request will now be retried.\r\nThe SSL connection could not be established, see inner exception.\r\n  Authentication failed, see inner exception.\r\n  Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n    at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\n  PUT https://push.chocolatey.org/api/v2/package/\r\nAn error was encountered when fetching 'PUT https://push.chocolatey.org/api/v2/package/'. The request will now be retried.\r\nThe SSL connection could not be established, see inner exception.\r\n  Authentication failed, see inner exception.\r\n  Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n    at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\n  PUT https://push.chocolatey.org/api/v2/package/\r\nThe SSL connection could not be established, see inner exception.\r\n  Authentication failed, see inner exception.\r\n  Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n    at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n  at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\n  at Mono.Btls.MonoBtlsContext.ProcessHandshake () [0x00048] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at Mono.Net.Security.MobileAuthenticatedStream.ProcessHandshake (Mono.Net.Security.AsyncOperationStatus status, System.Boolean renegotiate) [0x000da] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream.ProcessHandshake(Mono.Net.Security.AsyncOperationStatus,bool)\r\n  at Mono.Net.Security.AsyncHandshakeRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x00006] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at Mono.Net.Security.AsyncProtocolRequest.ProcessOperation (System.Threading.CancellationToken cancellationToken) [0x000fc] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n   --- End of inner exception stack trace ---\r\n  at Mono.Net.Security.MobileAuthenticatedStream.ProcessAuthentication (System.Boolean runSynchronously, Mono.Net.Security.MonoSslAuthenticationOptions options, System.Threading.CancellationToken cancellationToken) [0x00262] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore (System.IO.Stream stream, System.Net.Security.SslClientAuthenticationOptions sslOptions, System.Threading.CancellationToken cancellationToken) [0x000c3] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n   --- End of inner exception stack trace ---\r\n  at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore (System.IO.Stream stream, System.Net.Security.SslClientAuthenticationOptions sslOptions, System.Threading.CancellationToken cancellationToken) [0x00102] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.CreateConnectionAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00322] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync (System.Threading.Tasks.ValueTask`1[TResult] creationTask) [0x000a2] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x00089] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.AuthenticationHelper.SendWithAuthAsync (System.Net.Http.HttpRequestMessage request, System.Uri authUri, System.Net.ICredentials credentials, System.Boolean preAuthenticate, System.Boolean isProxyAuth, System.Boolean doRequestAuth, System.Net.Http.HttpConnectionPool pool, System.Threading.CancellationToken cancellationToken) [0x00112] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.DecompressionHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ca] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.ServerWarningLogHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00088] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.StsAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000bf] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000c4] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x000b3] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.TimeoutUtility.StartWithTimeout[T] (System.Func`2[T,TResult] getTask, System.TimeSpan timeout, System.String timeoutMessage, System.Threading.CancellationToken token) [0x001cd] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpRetryHandler.SendAsync (NuGet.Protocol.HttpRetryHandlerRequest request, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x004d5] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpSource.GetThrottledResponse (System.Func`1[TResult] requestFactory, System.TimeSpan requestTimeout, System.TimeSpan downloadTimeout, System.Int32 maxTries, System.Guid sessionId, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x001e0] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpSource.ProcessResponseAsync[T] (NuGet.Protocol.HttpSourceRequest request, System.Func`2[T,TResult] processAsync, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x000cb] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageToServer (System.String source, System.String apiKey, System.String pathToPackage, System.Int64 packageSize, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger logger, System.Threading.CancellationToken token) [0x0045a] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageCore (System.String source, System.String apiKey, System.String packageToPush, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x00189] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackage (System.String packagePath, System.String source, System.String apiKey, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger log, System.Threading.CancellationToken token, System.Boolean isSnupkgPush) [0x0012a] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.Push (System.String packagePath, System.String symbolSource, System.Int32 timeoutInSecond, System.Boolean disableBuffering, System.Func`2[T,TResult] getApiKey, System.Func`2[T,TResult] getSymbolApiKey, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, NuGet.Protocol.Core.Types.SymbolPackageUpdateResourceV3 symbolPackageUpdateResource, NuGet.Common.ILogger log) [0x0010d] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Commands.PushRunner.Run (NuGet.Configuration.ISettings settings, NuGet.Configuration.IPackageSourceProvider sourceProvider, System.String packagePath, System.String source, System.String apiKey, System.String symbolSource, System.String symbolApiKey, System.Int32 timeoutSeconds, System.Boolean disableBuffering, System.Boolean noSymbols, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, NuGet.Common.ILogger logger) [0x002f9] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.CommandLine.PushCommand.ExecuteCommandAsync () [0x00173] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.CommandLine.Command.Execute () [0x000ea] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c1] in <86071b8d89ed441c8bd0686989227b79>:0\r\n```\r\n\r\n\r\n"},{"Id":"10565691399","Type":"IssuesEvent","CreatedAt":"2019-10-05T13:29:15","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8629","RelatedDescription":"Closed issue \"Multiple timestamps pass the verify for netcore3.0 even if  allowMultipleTimestamps=false\" (#8629) at NuGet/Home","RelatedBody":"As the API AddUnsignedAttribute on netcore3.0 will do merge by the Oid(https://github.com/dotnet/corefx/issues/25449), so the unsignedAttribute will have different formats for net472(NativeCms does it in a P/Invoking way) and netcore3.0 (use API AddUnsignedAttribute from Pkcs package), if we timestamp multiple times for both primary signature and counter signature.\r\n\r\nFor net472:\r\n```\r\nUnsignedAttributes\r\n    AttributeSet\r\n        oid\r\n        values\r\n            value0\r\n    AttributeSet\r\n        oid\r\n        values\r\n            value1\r\n```\r\nFor netcore3.0\r\n```\r\nUnsignedAttributes\r\n    AttributeSet\r\n        oid\r\n        values\r\n            value0\r\n            value1\r\n```\r\nBut our [code ](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/Signing/Signatures/Signature.cs#L390-L422)can only verify the first format as multiple timestamp. The second format will be treated as valid even if we set allowMultipleTimestamps=false\r\n\r\nHere are my thoughts(discussed with @rrelyea) :\r\n1. Change verify code to handle both formats as multiple timestamps.\r\n2. Keep AddUnsignedAttribute for net472 not changed (unmerged format)\r\n3. The two format should have the same results when verifying.\r\n4. It seems we can only get multiple timestamps by using APIs, no way to make it by commandline(we only accept one timestamp in nuget sign command). So there should be no affects to signing part. Pls correct me if I'm wrong.\r\n"},{"Id":"10565095691","Type":"IssuesEvent","CreatedAt":"2019-10-05T08:22:33","Actor":"TFTomSun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8663","RelatedDescription":"Opened issue \"Restore Nuget package in a publish way\" (#8663) at NuGet/Home","RelatedBody":"Is there any possibility to simply restore a package and all of its dependencies and put them together in one output like a publish build would do it?\r\n\r\nMy current workaround is to create a temporary project with a package reference to the given package and then perform a build on that temporary project.\r\n\r\nUnfortunately I need to know the TargetFramework(s) of the package to create a matching temp project and I get additional output (dll) for the temp project, which I actually don't need. I would like to have a common solution that always works, no matter which package I want to restore (even if I don't know its supported target frameworks).\r\n\r\n"},{"Id":"10564432418","Type":"IssuesEvent","CreatedAt":"2019-10-05T01:49:29","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8641","RelatedDescription":"Closed issue \"SubZero\" (#8641) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10564401205","Type":"IssuesEvent","CreatedAt":"2019-10-05T01:32:22","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8655","RelatedDescription":"Closed issue \"Question: What is a Nuget Integrated Project?\" (#8655) at NuGet/Home","RelatedBody":"I just have a question about what kind of project does INuGetIntegratedProject map to? Is this a project that uses package.config or is this a project that uses package references?"},{"Id":"10564149168","Type":"IssuesEvent","CreatedAt":"2019-10-04T23:45:41","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8596","RelatedDescription":"Closed issue \"More UIDelay issues to improve VS UI responsiveness\" (#8596) at NuGet/Home","RelatedBody":"\n"},{"Id":"10561134999","Type":"IssuesEvent","CreatedAt":"2019-10-04T15:15:10","Actor":"infin8x","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8662","RelatedDescription":"Opened issue \"dotnet doesn't support enviers in NuGet.config\" (#8662) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: dotnet on Mac\r\n\r\ndotnet.exe --version (if appropriate): 2.2.104\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS Mojave 10.14.6\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Set up NuGet.configs and add a valid token to your environment like so:\r\n![image](https://user-images.githubusercontent.com/483400/66218569-4afeef80-e67e-11e9-926d-5a9ecd9275c9.png)\r\n\r\n2. Attempt to run `dotnet restore`:\r\n![image](https://user-images.githubusercontent.com/483400/66218642-71bd2600-e67e-11e9-9f48-2e37b07c815f.png)\r\n\r\n3. Move token to file directly (to prove that it's a valid token and not a server-side issue):\r\n![image](https://user-images.githubusercontent.com/483400/66218735-a204c480-e67e-11e9-9c8d-4e2565542dd1.png)\r\n\r\n_Note: I know there is a token in these screenshots. I revoked it before publishing._\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n[log.txt](https://github.com/NuGet/Home/files/3691141/log.txt)\r\n\r\n### Sample Project\r\n\r\nYou can git clone https://github.com/infin8x/starter-packages and use the `nuget-bacon` package.\r\n"},{"Id":"10560412771","Type":"IssuesEvent","CreatedAt":"2019-10-04T13:50:59","Actor":"campersau","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8661","RelatedDescription":"Opened issue \"HttpRequestMessage gets reused multiple times which is not supported with the SocketHttpHandler\" (#8661) at NuGet/Home","RelatedBody":"The [`SocketHttpHandler` does not support reusing HttpRequestMessages multiple times](https://github.com/dotnet/corefx/issues/25163). This can lead to issues with authentification if the user provides the wrong credentials the first time, because the `Authorization` header gets [added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L164-L174) by the `SocketHttpHandler` and is resend on the next try. In combination with some servers (e.g. the GitHub NuGet feed) this results in an loop where each time the same credentials are being passed in because this server does not send a `Www-Authenticate` header if an `Authorization` header is provided and so the [new credentials are never added](https://github.com/dotnet/corefx/blob/eff9fbf446468ca411bf5e0475916f316eea7223/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.cs#L242).\r\n\r\nTo prevent this issue it is currently possible to disable the `SocketHttpHandler` which I have done here https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/pull/841\r\n\r\n\r\nSee also https://github.com/dotnet/corefx/issues/25163#issuecomment-538009706\r\n\r\n### Sample Project\r\n\r\n```c#\r\n[Fact]\r\npublic async Task GitHubFeedTest()\r\n{\r\n    // uncomment this to fix the issue\r\n    //AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n\r\n    HttpHandlerResourceV3.CredentialService = new Lazy<ICredentialService>(() => new CredentialService(\r\n        new AsyncLazy<IEnumerable<ICredentialProvider>>(\r\n            () => Task.FromResult<IEnumerable<ICredentialProvider>>(new ICredentialProvider[] { new TestCredentialProvider()})\r\n        ),\r\n        nonInteractive: false,\r\n        handlesDefaultCredentials: true\r\n    ));\r\n    // change `username` in this url to your user\r\n    var source = Repository.Factory.GetCoreV3(\"https://nuget.pkg.github.com/username/index.json\");\r\n    var sourceProvider = await source.GetResourceAsync<PackageSearchResource>();\r\n\r\n    await sourceProvider.SearchAsync(\"\", new SearchFilter(false), 0, 10, NullLogger.Instance, CancellationToken.None);\r\n}\r\nprivate class TestCredentialProvider : ICredentialProvider\r\n{\r\n    public string Id => \"test\";\r\n    public Task<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken)\r\n    {\r\n        if (!isRetry)\r\n        {\r\n            return Task.FromResult(new CredentialResponse(new NetworkCredential(\"a\", \"b\"))); // intentional wrong user and password\r\n        }\r\n        return Task.FromResult(new CredentialResponse(new NetworkCredential(\"username\", \"token\"))); // change `username` and `token` to your github user and [token](https://github.com/settings/tokens) with package access\r\n    }\r\n}\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-06T05:30:49.5193207Z","RunDurationInMilliseconds":3045}