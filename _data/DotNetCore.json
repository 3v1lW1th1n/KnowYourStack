{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":52,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":203,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6922757695","Type":"PullRequestEvent","CreatedAt":"2017-11-30T05:25:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15290","RelatedDescription":"Merged pull request \"[Local GC] Fail fast on exceptions within a standalone GC\" (#15290) at dotnet/coreclr","RelatedBody":"Fixes #14915. This PR implements option 1 in this comment: https://github.com/dotnet/coreclr/issues/14915#issuecomment-347975999 - if an exception occurs inside the module that contains the GC, we'll fail fast just as we would if the exception occurred in the CoreCLR module.\r\n\r\nNote that when not using a standalone GC, the \"GC module\" will be equal to CoreCLR (`g_pMSCorEE`) since it's the module that contains the GC.\r\n\r\ncc @sergiy-k @Maoni0 @jkotas PTAL?"},{"Id":"6922757685","Type":"IssuesEvent","CreatedAt":"2017-11-30T05:25:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14915","RelatedDescription":"Closed issue \"[Local GC] Unhandled exception in standalone GC causes a deadlock\" (#14915) at dotnet/coreclr","RelatedBody":"When not running standalone, an unhandled exception in the GC is caught by the vectored exception handler [here](https://github.com/dotnet/coreclr/blob/master/src/vm/excep.cpp#L7802) which ultimately causes an assert failure, e.g. (seen here with an AV inserted into `WKS::GCHeap::Promote`):\r\n\r\n```\r\nAssert failure(PID 29968 [0x00007510], Thread: 20984 [0x51f8]): Consistency check failed: AV in clr at this callstack: ------\r\nCORECLR! WKS::GCHeap::Promote + 0x41 (0x00007ffe`4a210c01)\r\nCORECLR! GcEnumObject + 0xC3 (0x00007ffe`4a0ca4c3)\r\nCORECLR! GcInfoDecoder::ReportStackSlotToGC + 0x55E (0x00007ffe`4a1305ee)\r\nCORECLR! GcInfoDecoder::ReportSlotToGC + 0x1B5 (0x00007ffe`4a130015)\r\nCORECLR! GcInfoDecoder::ReportUntrackedSlots + 0x82 (0x00007ffe`4a130682)\r\nCORECLR! GcInfoDecoder::EnumerateLiveSlots + 0x1070 (0x00007ffe`4a12e8f0)\r\nCORECLR! EECodeManager::EnumGcRefs + 0x5D8 (0x00007ffe`49dbd658)\r\nCORECLR! GcStackCrawlCallBack + 0x485 (0x00007ffe`4a0cab95)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x6C (0x00007ffe`49aae3cc)\r\nCORECLR! Thread::StackWalkFramesEx + 0x17B (0x00007ffe`49ab14db)\r\nCORECLR! Thread::StackWalkFrames + 0x2F4 (0x00007ffe`49ab1344)\r\nCORECLR! ScanStackRoots + 0x32F (0x00007ffe`4a2b4ebf)\r\nCORECLR! GCToEEInterface::GcScanRoots + 0x1F9 (0x00007ffe`4a2b3ae9)\r\nCORECLR! GCScan::GcScanRoots + 0x2F (0x00007ffe`4a2be2cf)\r\nCORECLR! WKS::gc_heap::mark_phase + 0x322 (0x00007ffe`4a23a212)\r\nCORECLR! WKS::gc_heap::gc1 + 0x1AA (0x00007ffe`4a22e35a)\r\nCORECLR! WKS::gc_heap::garbage_collect + 0x5CA (0x00007ffe`4a22e14a)\r\nCORECLR! WKS::GCHeap::GarbageCollectGeneration + 0x1DC (0x00007ffe`4a20ee7c)\r\nCORECLR! WKS::GCHeap::GarbageCollectTry + 0xE0 (0x00007ffe`4a20eff0)\r\n-----\r\n.AV on tid=0x51f8 (20984), cxr=0000003800979B00, exr=0000003800979FF0\r\nFAILED: false\r\n\r\nCORECLR! CHECK::Trigger + 0x26A (0x00007ffe`497fc24a)\r\nCORECLR! CLRVectoredExceptionHandlerPhase3 + 0x2F6 (0x00007ffe`4990a466)\r\nCORECLR! CLRVectoredExceptionHandlerPhase2 + 0x8C (0x00007ffe`49909e8c)\r\nCORECLR! CLRVectoredExceptionHandler + 0x262 (0x00007ffe`49909de2)\r\nCORECLR! CLRVectoredExceptionHandlerShim + 0x172 (0x00007ffe`4990a702)\r\nNTDLL! RtlUserThreadStart + 0x132 (0x00007ffe`a74df0a2)\r\nNTDLL! RtlWalkFrameChain + 0x122B (0x00007ffe`a748cecb)\r\nNTDLL! KiUserExceptionDispatcher + 0x2E (0x00007ffe`a7513b6e)\r\nCORECLR! WKS::GCHeap::Promote + 0x41 (0x00007ffe`4a210c01)\r\nCORECLR! GcEnumObject + 0xC3 (0x00007ffe`4a0ca4c3)\r\n    File: e:\\github\\coreclr\\src\\vm\\excep.cpp Line: 7930\r\n    Image: E:\\GitHub\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nWhen running standalone, for whatever reason, this vectored exception handler is not invoked and instead we end up in the normal CLR exception path, which results in us attempting to allocate a managed exception object. On debug builds, this asserts:\r\n\r\n```\r\nAssert failure(PID 43992 [0x0000abd8], Thread: 43532 [0xaa0c]): CONTRACT VIOLATION by ExceptionTracker::GetOrCreateTracker at \"e:\\github\\coreclr\\src\\vm\\exceptionhandling.cpp\" @ 3682\r\n\r\nGC_TRIGGERS encountered in a GC_NOTRIGGER scope\r\n\r\n                        CONTRACT in ExceptionTracker::GetOrCreateTracker at \"e:\\github\\coreclr\\src\\vm\\exceptionhandling.cpp\" @ 3682\r\nVIOLATED-->  CONTRACT in EECodeManager::EnumGcRefs at \"e:\\github\\coreclr\\src\\vm\\eetwain.cpp\" @ 4919\r\n                        FAULT_FORBID in standalone::ScanStackRoots at \"e:\\github\\coreclr\\src\\vm\\gcenv.ee.cpp\" @ 83\r\n                        GCX_NOTRIGGER in standalone::ScanStackRoots at \"e:\\github\\coreclr\\src\\vm\\gcenv.ee.cpp\" @ 83\r\n                        CANNOTTHROW in standalone::ScanStackRoots at \"e:\\github\\coreclr\\src\\vm\\gcenv.ee.cpp\" @ 83\r\n                        CONTRACT in Alloc at \"e:\\github\\coreclr\\src\\vm\\gchelpers.cpp\" @ 218\r\n                        CONTRACT in SlowAllocateString at \"e:\\github\\coreclr\\src\\vm\\gchelpers.cpp\" @ 1011\r\n                        OVERRIDE_TYPE_LOAD_LEVEL_LIMIT in MethodDescCallSite::CallTargetWorker at \"e:\\github\\coreclr\\src\\vm\\callhelpers.cpp\" @ 371\r\n                        CONTRACT in MethodDescCallSite::CallTargetWorker at \"e:\\github\\coreclr\\src\\vm\\callhelpers.cpp\" @ 361\r\n                        CONTRACT in AppDomain::DoSetup at \"e:\\github\\coreclr\\src\\vm\\appdomain.cpp\" @ 4642\r\n                        GCX_COOP in CorHost2::_CreateAppDomain at \"e:\\github\\coreclr\\src\\vm\\corhost.cpp\" @ 671\r\n                        GCX_COOP_THREAD_EXISTS in CorHost2::_CreateAppDomain at \"e:\\github\\coreclr\\src\\vm\\corhost.cpp\" @ 647\r\n                        CONTRACT in CorHost2::_CreateAppDomain at \"e:\\github\\coreclr\\src\\vm\\corhost.cpp\" @ 617\r\n\r\n\r\n\r\nCORECLR! CONTRACT_ASSERT + 0x342 (0x00007ffe`489faab2)\r\nCORECLR! EEContract::DoChecks + 0x3DE (0x00007ffe`48b59ace)\r\nCORECLR! ExceptionTracker::GetOrCreateTracker + 0x327 (0x00007ffe`48cf1937)\r\nCORECLR! ProcessCLRException + 0x62F (0x00007ffe`48cfd57f)\r\nNTDLL! chkstk + 0x11D (0x00007ffe`a7514c3d)\r\nNTDLL! RtlWalkFrameChain + 0x1518 (0x00007ffe`a748d1b8)\r\nNTDLL! KiUserExceptionDispatcher + 0x2E (0x00007ffe`a7513b6e)\r\nCLRGC! WKS::GCHeap::Promote + 0x3B (0x00007ffe`6c98625b)\r\nCORECLR! PromoteCarefully + 0xE1 (0x00007ffe`48f9b751)\r\nCORECLR! GcEnumObject + 0x92 (0x00007ffe`492ea492)\r\n    File: e:\\github\\coreclr\\src\\vm\\exceptionhandling.cpp Line: 3682\r\n    Image: E:\\GitHub\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nOn non-debug builds, this will deadlock since crashes in the GC generally occur when *doing* GCs and the allocating thread needs to switch to cooperative mode to allocate.\r\n"},{"Id":"6922650963","Type":"PullRequestEvent","CreatedAt":"2017-11-30T04:38:11","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15295","RelatedDescription":"Merged pull request \"Update CoreFx to preview1-25930-02 (master)\" (#15295) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6922361266","Type":"PullRequestEvent","CreatedAt":"2017-11-30T02:43:32","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15292","RelatedDescription":"Merged pull request \"Revert \"Use ILAsm from buildtools (#15172)\"\" (#15292) at dotnet/coreclr","RelatedBody":"This reverts commit e864120d14c829df6f6d4c6cff6f3d23db19606c.\r\n\r\nRevert #15172 to fix Windows ARM/ARMLB/ARM64 builds"},{"Id":"6922348216","Type":"PullRequestEvent","CreatedAt":"2017-11-30T02:38:50","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15295","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-25930-02 (master)\" (#15295) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6922344220","Type":"PullRequestEvent","CreatedAt":"2017-11-30T02:37:28","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15257","RelatedDescription":"Merged pull request \"[RyuJit] Delete contained workaround. \" (#15257) at dotnet/coreclr","RelatedBody":"The goal was to make `isContained()` and `SetContained()` consistent. \r\n\r\n`isContained()` was trying to check that the node has a user, but it was not right place to do this check, so it was moved to `CheckLIR`.\r\n\r\nAlso only the head of a field list should be marked as contained.\r\n\r\nThese changes allowed to delete this:\r\n```\r\n    // has to be nonnull (because contained nodes can't be the last in block)  \r\n    // but don't want it to be a valid pointer  \r\n    i.gtNext = (GenTree*)(-1); \r\n```\r\nand this: \r\n```\r\n        // A GT_FIELD_LIST is always contained. Note that this should only matter for the head node, but  \r\n        // the list may be reordered.  \r\n        gtFlags |= GTF_CONTAINED; \r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6922025633","Type":"IssuesEvent","CreatedAt":"2017-11-30T00:47:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7871","RelatedDescription":"Closed issue \"Simplify consumption of aspnetcore in 2.0.x\" (#7871) at dotnet/cli","RelatedBody":"Backport the improvements https://github.com/dotnet/cli/pull/7424 (master branch) to the release/2.0.0 branch. This simplifies how the CLI consumes new builds of aspnetcore.\r\n\r\nRequires coordination with aspnetcore's build output. cc @joeloff\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6922014238","Type":"IssuesEvent","CreatedAt":"2017-11-30T00:43:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7699","RelatedDescription":"Closed issue \"dotnet sln add malfunctions on windows\" (#7699) at dotnet/cli","RelatedBody":"This one is pretty weird\r\n\r\n## Steps to reproduce\r\n```cmd\r\n\r\ncd R:\\Dev\\repro\r\ndotnet new library --name Fakeone\r\ndotnet new sln\r\n\r\nrem Works  (relative-relative)\r\ndotnet sln .\\repro.sln add .\\fakeone\\fakeone.csproj\r\n\r\nrem Broken (relative-absolute)\r\ndotnet sln .\\repro.sln add r:\\dev\\repro\\fakeone\\fakeone.csproj\r\n\r\nrem Broken (absolute-relative)\r\ndotnet sln r:\\dev\\repro\\repro.sln add .\\fakeone\\fakeone.csproj\r\n\r\nrem Works (absolute-absolute)\r\ndotnet sln r:\\dev\\repro\\repro.sln add r:\\dev\\repro\\fakeone\\fakeone.csproj\r\n\r\nrem Broken (absolute-absolute) (exactcase-lowercase)\r\ndotnet sln R:\\Dev\\repro\\repro.sln add r:\\dev\\repro\\fakeone\\fakeone.csproj\r\n\r\nrem Works (absolute-absolute) (exactcase-exactcase)\r\ndotnet sln R:\\Dev\\repro\\repro.sln add R:\\Dev\\repro\\fakeone\\fakeone.csproj\r\n```\r\n\r\n## Expected  behavior\r\nThe correct project is added to the sln file.\r\nThe console emits \r\n```\r\nProject `fakeone\\fakeone.csproj` added to the solution.`\r\n``` \r\n(note the relative path)\r\n\r\n## Actual behavior\r\n\r\nThe following is added to the sln\r\n```\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"R:Dev\", \"R:Dev\", \"{DFBCFAF7-6159-47BC-8F0C-F0F9A255D0AB}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"repro\", \"repro\", \"{0A52075C-A2F9-4A66-9E83-9E6BF7D3BECA}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Fakeone\", \"R:Dev\\repro\\Fakeone\\Fakeone.csproj\", \"{95E6B721-F2B2-4B57-AF4B-A59F0F4AB69D}\"\r\nEndProject\r\n```\r\n\r\nand the following is emitted \r\n```\r\nProject `R:\\Dev\\repro\\fakeone\\fakeone.csproj\\`\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n"},{"Id":"6921790225","Type":"IssuesEvent","CreatedAt":"2017-11-29T23:31:21","Actor":"mishra14","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7686","RelatedDescription":"Closed issue \"dotnet-clean and project.assets.json in 2.0\" (#7686) at dotnet/cli","RelatedBody":"I would like to know why \"dotnet clean\" depends on project.assets.json file.  This new behavior in 2.0 is something we can work around, but I would like to understand why this change in behavior was introduced and what is the project structure expectation of dotnet cli.\r\n\r\nIs multiple .csproj files in a single directory not supported/encouraged? \r\n\r\n## Steps to reproduce\r\nIn our project, we have this folder structure for historical reasons:\r\n```\r\n/obj\r\n/bin\r\n/src\r\nProject.Net35.csproj\r\nProject.Net45.csproj\r\n```\r\nPre 2.0, we used to do following commands in sequence:\r\n\r\n```\r\n# build net35\r\ndotnet clean Project.Net35.csproj\r\ndotnet restore Project.Net35.csproj\r\ndotnet build Project.Net35.csproj\r\n\r\n# build net45\r\ndotnet clean Project.Net45.csproj\r\ndotnet restore Project.Net45.csproj\r\ndotnet build Project.Net45.csproj\r\n```\r\n\r\nBoth .csproj are in the new vs2017 csproj format that starts with `<Project Sdk=\"Microsoft.NET.Sdk\">`\r\n\r\n## Expected  behavior\r\nThe above folder structure worked pre-2.0 because \"dotnet clean\" command did not take a dependency/make a reference to project.assets.json file and succeeded.\r\n\r\n## Actual behavior\r\nWith 2.0, we see the following error message during `dotnet clean`:\r\n ```\r\n C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'd:\\workspace\\Project\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.5'. Ensure that restore has run and that\r\n you have included 'net45' in the TargetFrameworks for your project. [d:\\workspace\\Project\\Project.Net45.csproj] [\r\nd:\\workspace\\build.proj]\r\n```\r\n\r\nI think we can workaround this by specifying different `obj` directory per project or doing `dotnet restore -f` before `dotnet clean`.  Ideally, we would build for both frameworks in a single .csproj, but it's not something we can invest time in currently.\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6921676676","Type":"PullRequestEvent","CreatedAt":"2017-11-29T22:59:56","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8135","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25929-05 (master)\" (#8135) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6915855180","Type":"PullRequestEvent","CreatedAt":"2017-11-28T23:23:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/593","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02228-01 (master)\" (#593) at dotnet/standard","RelatedBody":""},{"Id":"6908856639","Type":"IssuesEvent","CreatedAt":"2017-11-27T19:20:28","Actor":"Eilon","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/587","RelatedDescription":"Closed issue \" System.Net.Http.dll 4.6.25514.4 在nuget没有这个版本，与项目中的4.6.25220.1不兼容\" (#587) at dotnet/standard","RelatedBody":"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容，如果不引用会自动增加 System.Net.Http.dll 4.6.25514.4这个版本，但是在NuGet就没有4.6.25514.4这个版本号"},{"Id":"6904585264","Type":"IssuesEvent","CreatedAt":"2017-11-27T00:32:12","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/592","RelatedDescription":"Closed issue \"The certificate authority is invalid or incorrect exception while using .NET standard 2.0\" (#592) at dotnet/standard","RelatedBody":"My problem here is specifically in .Net standard 2.0 and .Net core 2.0, since the same code, seems to work fine with .net framework 4.6.1.\r\n\r\nIn .NET framework, we are using following code to trust all certificates:\r\n\r\n`ServicePointManager.ServiceCertificateValidationCallback += (o, c, ch, er) => true;`\r\n\r\nBut the same code is not working with .NET core 2.0 and .NET standard 2.0.\r\n\r\nI have also tried the below code:\r\n\r\n`var httpClientHandler = new HttpClientHandler();\r\nhttpClientHandler.ServiceCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;`\r\n\r\nBut this is not working for me.\r\n'An error occurred while sending the request, The certificate authority is invalid or incorrect' exception has been thrown.\r\n\r\n![image](https://user-images.githubusercontent.com/25975246/33242042-855d6ba6-d2f4-11e7-841c-483f82159d49.png)\r\n\r\n\r\nPlease suggest me any alternative solution for the self-signed certificate in .NET standard 2.0."},{"Id":"6903840711","Type":"IssuesEvent","CreatedAt":"2017-11-26T16:27:32","Actor":"jainankit2474","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/592","RelatedDescription":"Opened issue \"The certificate authority is invalid or incorrect exception while using .NET standard 2.0\" (#592) at dotnet/standard","RelatedBody":"My problem here is specifically in .Net standard 2.0 and .Net core 2.0, since the same code, seems to work fine with .net framework 4.6.1.\r\n\r\nIn .NET framework, we are using following code to trust all certificates:\r\n\r\n`ServicePointManager.ServiceCertificateValidationCallback += (o, c, ch, er) => true;`\r\n\r\nBut the same code is not working with .NET core 2.0 and .NET standard 2.0.\r\n\r\nI have also tried the below code:\r\n\r\n`var httpClientHandler = new HttpClientHandler();\r\nhttpClientHandler.ServiceCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;`\r\n\r\nBut this is not working for me.\r\n'An error occurred while sending the request, The certificate authority is invalid or incorrect' exception has been thrown.\r\n\r\n![image](https://user-images.githubusercontent.com/25975246/33242042-855d6ba6-d2f4-11e7-841c-483f82159d49.png)\r\n\r\n\r\nPlease suggest me any alternative solution for the self-signed certificate in .NET standard 2.0."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6922691206","Type":"PullRequestEvent","CreatedAt":"2017-11-30T04:56:32","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25395","RelatedDescription":"Closed pull request \"Updating CoreFx dependencies to servicing-25920-05\" (#25395) at dotnet/corefx","RelatedBody":""},{"Id":"6922690740","Type":"PullRequestEvent","CreatedAt":"2017-11-30T04:56:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25391","RelatedDescription":"Closed pull request \"Updating CoreFx dependencies to servicing-25920-04\" (#25391) at dotnet/corefx","RelatedBody":""},{"Id":"6922687082","Type":"PullRequestEvent","CreatedAt":"2017-11-30T04:54:40","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25421","RelatedDescription":"Merged pull request \"Update CoreClr to stable (release/1.1.0)\" (#25421) at dotnet/corefx","RelatedBody":""},{"Id":"6922673326","Type":"IssuesEvent","CreatedAt":"2017-11-30T04:48:24","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/19235","RelatedDescription":"Closed issue \"Review Open TODOs around the entire code base\" (#19235) at dotnet/corefx","RelatedBody":"Currently there are 2923 TODOs in the entire corefx code base. Below is the ordered grouping of TODOs by 1st level directories. As some of them can probably be ignored/removed, it's still worth giving them a look at some point of time.\r\n\r\n## Areas with TODOs\r\n- [ ] System.Private.Xml: 412\r\n- [ ] System.Linq.Expressions: 356\r\n- [ ] System.Net.Http: 294\r\n- [ ] System.Net.Sockets: 282\r\n- [ ] System.Data.Common: 144\r\n- [ ] System.Net.WebSockets.Client: 132\r\n- [ ] System.Reflection.Metadata: 116\r\n- [ ] Microsoft.CSharp: 112\r\n- [ ] System.Runtime.Extensions: 112\r\n- [ ] System.Private.Xml.Linq: 110\r\n- [ ] Common: 102\r\n- [ ] Microsoft.VisualBasic: 90\r\n- [ ] System.Runtime: 72\r\n- [ ] System.Diagnostics.Tracing: 64\r\n- [ ] System.Net.Http.WinHttpHandler: 62\r\n- [ ] System.Data.SqlClient: 54\r\n- [ ] System.Reflection.TypeExtensions: 34\r\n- [ ] System.Private.DataContractSerialization: 26\r\n- [ ] System.Runtime.Serialization.Formatters: 20\r\n- [ ] System.IO.FileSystem: 18\r\n- [ ] System.Numerics.Vectors: 18\r\n- [ ] System.Data.Odbc: 16\r\n- [ ] System.DirectoryServices.AccountManagement: 16\r\n- [ ] System.Net.Requests: 16\r\n- [ ] System.Runtime.Numerics: 16\r\n- [ ] System.Net.Security: 14\r\n- [ ] System.IO.Compression: 12\r\n- [ ] System.DirectoryServices.Protocols: 10\r\n- [ ] System.IO.Ports: 10\r\n- [ ] System.Net.NameResolution: 10\r\n- [ ] System.Private.Uri: 10\r\n- [ ] Native: 8\r\n- [ ] System.Diagnostics.StackTrace: 8\r\n- [ ] System.Security.Principal.Windows: 8\r\n- [ ] System.Transactions.Local: 8\r\n- [ ] System.Collections.Concurrent: 6\r\n- [ ] System.ComponentModel.Annotations: 6\r\n- [ ] System.Diagnostics.DiagnosticSource: 6\r\n- [ ] System.IO.Packaging: 6\r\n- [ ] System.IO.Pipes: 6\r\n- [ ] System.Memory: 6\r\n- [ ] System.Net.HttpListener: 6\r\n- [ ] System.Runtime.InteropServices: 6\r\n- [ ] System.Security.Cryptography.X509Certificates: 6\r\n- [ ] System.Security.Cryptography.Xml: 5\r\n- [ ] Microsoft.Win32.Registry: 4\r\n- [ ] System.Configuration.ConfigurationManager: 4\r\n- [ ] System.DirectoryServices: 4\r\n- [ ] System.Dynamic.Runtime: 4\r\n- [ ] System.Linq: 4\r\n- [ ] System.Threading.Tasks: 3\r\n- [ ] shims: 2\r\n- [ ] System.Collections: 2\r\n- [ ] System.ComponentModel.TypeConverter: 2\r\n- [ ] System.Console: 2\r\n- [ ] System.IO.IsolatedStorage: 2\r\n- [ ] System.IO.MemoryMappedFiles: 2\r\n- [ ] System.IO.UnmanagedMemoryStream: 2\r\n- [ ] System.Json: 2\r\n- [ ] System.Linq.Queryable: 2\r\n- [ ] System.Net.Ping: 2\r\n- [ ] System.Net.ServicePoint: 2\r\n- [ ] System.Net.WebClient: 2\r\n- [ ] System.Net.WebProxy: 2\r\n- [ ] System.Reflection.Emit: 2\r\n- [ ] System.Resources.Writer: 2\r\n- [ ] System.Runtime.WindowsRuntime: 2\r\n- [ ] System.Threading: 2\r\n- [ ] System.Threading.Tasks.Dataflow: 2\r\n- [ ] System.Runtime.Serialization.Json: 1\r\n- [ ] System.Security.AccessControl: 1\r\n- [ ] System.Text.Encoding: 1\r\n- [ ] System.Text.Encodings.Web: 1\r\n- [ ] System.Threading.Tasks.Extensions: 1\r\n- [ ] System.Threading.Tasks.Parallel: 1\r\n- [ ] System.Threading.Thread: 1\r\n- [ ] System.Xml.ReaderWriter: 1\r\n\r\n`~\\corefx\\src>findstr /si /C:\"TODO\" *`\r\nAll TODOs: [todo.txt](https://github.com/dotnet/corefx/files/970965/todo.txt)\r\n\r\ncc @karelz @stephentoub @danmosemsft \r\n"},{"Id":"6922637492","Type":"PullRequestEvent","CreatedAt":"2017-11-30T04:32:03","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25566","RelatedDescription":"Merged pull request \"Improve BinaryFormatter equality check logging\" (#25566) at dotnet/corefx","RelatedBody":"If I could rewrite time I would have made all the equality checks with Assert...\r\n\r\nPS: the GitHub diff is useless here."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6922696417","Type":"IssuesEvent","CreatedAt":"2017-11-30T04:58:55","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23468","RelatedDescription":"Closed issue \"Suggestion - private, default parameters for recursive methods\" (#23468) at dotnet/roslyn","RelatedBody":"**Scenario**\r\nConsider the following method that implements the Fibonacci algorithm:\r\n```\r\npublic static IEnumerable<int> Fibonacci(int a, int b, int n, List<int> list = null)\r\n{\r\n    list = list?.AddAndReturn(b) ?? new List<int>(new int[] { a, b });\r\n    return list.Count < n ? Fibonacci(b, a + b, n, list) : list;\r\n}\r\n```\r\n\r\nThis allows me to pass Fibonacci arguments `a` and `b`, an iteration count `n`, and an optional argument `list` to append Fibonacci values to _(used explicitly within the method)_.\r\n\r\n**Example**\r\n```\r\nIEnumerable<int> fibonacciSequence = Fibonacci(0, 1, 20);\r\n```\r\n\r\n**Problem**\r\nThe method leaks an implementation detail _(the list)_ and allows any populated list to be passed in, thus yielding invalid results:\r\n```\r\nList<int> random = new List(new int[] { 123, 456, 789 });\r\nIEnumerable<int> fibonacciSequence = Fibonacci(0, 1, 20, random);\r\n```\r\n\r\n**Solution**\r\nA method parameter could allow `private` modification, provided that:\r\n1. The parameter provides a `default` argument.\r\n2. _The method is recursive._\r\n\r\nThis would prevent leaking implementation details of the method to the outside, whilst allowing the parameter to be set internally; for example:\r\n\r\n```\r\npublic static IEnumerable<int> Fibonacci(int a, int b, int n, private List<int> list = null)\r\n{\r\n    list = list?.AddAndReturn(b) ?? new List<int>(new int[] { a, b });\r\n    return list.Count < n ? Fibonacci(b, a + b, n, list) : list;\r\n}\r\n```\r\n\r\nAs illustrated from the example above, the `list` argument can be set explicitly from inside the method, however the following would raise a compilation error:\r\n```\r\nFibonacci(0, 1, 20, random);\r\n// Error: parameter is inaccessible.\r\n```\r\n\r\n**Workaround**\r\nAs of C# 7.0, it's possible to use a local method, however this just wraps the current method inside another method that does not expose the `list` parameter:\r\n```\r\npublic static IEnumerable<int> Fibonacci(int a, int b, int n)\r\n{\r\n    IEnumerable<int> Fibonacci(int a1, int b1, int n1, List<int> list)\r\n    {\r\n        list = list?.AddAndReturn(b1) ?? new List<int>(new int[] { a1, b1 });\r\n        return list.Count < n1 ? Fibonacci(b1, a1 + b1, n1, list) : list;\r\n    }\r\n    \r\n    return Fibonacci(a, b, n, null);\r\n}\r\n```\r\n\r\nI don't particularly like the workaround, because it requires duplicated, but different parameter names, and it just seems a bit...hacky."},{"Id":"6922614466","Type":"IssuesEvent","CreatedAt":"2017-11-30T04:21:48","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23482","RelatedDescription":"Opened issue \"Should not get offered lightbulb when files are in a read-only context\" (#23482) at dotnet/roslyn","RelatedBody":"_From @davkean on November 30, 2017 4:8_\n\nDebugging I get offered lightbulbs:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/33412577-4543f8fc-d5e0-11e7-868f-b9e2417f0946.png)\r\n\r\nChoose these fixes does not nothing. I shouldn't get offered them if the files are in read-only context.\n\n_Copied from original issue: dotnet/project-system#3008_"},{"Id":"6922587638","Type":"PullRequestEvent","CreatedAt":"2017-11-30T04:09:53","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23477","RelatedDescription":"Merged pull request \"Move SuggestedActions over to EditorFeatures.Wpf\" (#23477) at dotnet/roslyn","RelatedBody":"Because of the ImageMoniker uses, this is causing issues in Visual Studio for Mac."},{"Id":"6922359311","Type":"PullRequestEvent","CreatedAt":"2017-11-30T02:42:50","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23481","RelatedDescription":"Opened pull request \"Merge master into vs for mac packages\" (#23481) at dotnet/roslyn","RelatedBody":""},{"Id":"6922332453","Type":"IssuesEvent","CreatedAt":"2017-11-30T02:33:16","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23480","RelatedDescription":"Opened issue \"Peek Definition does not work with decompiled sources\" (#23480) at dotnet/roslyn","RelatedBody":"From @jasonmalinowski in https://github.com/dotnet/roslyn/pull/23430#discussion_r153939405:\r\n\r\n> Why false here? The expectation here is both behave the same. That *might* that this dialog should be pushed into the metadata as source file service, or maybe that gets a separate function GetGeneratedFileThatAsksIfYouWantToDecompileOrNotAsync()?\r\n\r\nPeek Definition should be updated to support decompiled sources after the legal disclaimer workflow disruption is resolved with #23479. "},{"Id":"6922326950","Type":"IssuesEvent","CreatedAt":"2017-11-30T02:31:26","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23479","RelatedDescription":"Opened issue \"Provide an Option<bool> for the session to handle the decompiler disclaimer acceptance\" (#23479) at dotnet/roslyn","RelatedBody":"In #23430, a legal notice is added prior to showing decompiled sources. This notice is shown on *every* Go To Definition operation that takes the user to metadata. However, the message should only show the first time the user performs this operation within a single Visual Studio session.\r\n\r\nTo simplify this workflow, an `Option<bool>` should be added which has the default value `false` and is not backed by any options storage. This value should be set to true when the user clicks 'Yes' on the legal disclaimer, and after the value is set to true the disclaimer should no longer show. Since the option is not backed by storage, it will show again the next time the user restarts the IDE and uses the Go To Definition feature.\r\n"},{"Id":"6922314487","Type":"IssuesEvent","CreatedAt":"2017-11-30T02:27:09","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23478","RelatedDescription":"Opened issue \"Should MetadataAsSourceFileService be calling MetadataAsSourceHelpers.GetAssemblyDisplay?\" (#23478) at dotnet/roslyn","RelatedBody":"From @jasonmalinowski in https://github.com/dotnet/roslyn/pull/23430#discussion_r153933417:\r\n\r\n> Should this be calling `MetadataAsSourceHelpers.GetAssemblyDisplay`? Or unify that somehow with the other code? There's an interesting comment in `MetadataAsSourceHelpers` pointing to #6859 asking why it's not just calling GetMetadataReference. I worry that either if there is some subtle reason the shenanigans in the helpers is necessary, then you'll want that same thing here. (And if it's unnecessary, congrats, you've confirmed you can delete some code.)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6922747670","Type":"PullRequestEvent","CreatedAt":"2017-11-30T05:20:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5042","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5042) at dotnet/corert","RelatedBody":""},{"Id":"6921518727","Type":"PullRequestEvent","CreatedAt":"2017-11-29T22:20:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5042","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5042) at dotnet/corert","RelatedBody":""},{"Id":"6921517117","Type":"PullRequestEvent","CreatedAt":"2017-11-29T22:20:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5041","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5041) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6921497358","Type":"PullRequestEvent","CreatedAt":"2017-11-29T22:15:51","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5041","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5041) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6920949042","Type":"PullRequestEvent","CreatedAt":"2017-11-29T20:16:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5040","RelatedDescription":"Closed pull request \"Do not track RuntimeDeterminedMethod dependencies from canonical methods\" (#5040) at dotnet/corert","RelatedBody":"The concept of RuntimeDeterminedMethodNode was added when I was trying to support a mode where generic dictionaries could have \"holes\" (null entries for things that are not used for the particular instantiation). This turned out to be not feasible and we now have dependency analysis infra to patch those holes up anyway. We don't need to track dependencies of canonical code on such granularity.\r\n\r\nThe only exception to that were generic methods, but I'm fixing that by having the method generic dictionary (which is tracked as a runtime determined dependency of the canonical body) to also depend on the ShadowConcreteMethod (to make sure we can actually fill it).\r\n\r\nI'm doing this because the devirtualization in RyuJIT causes `getCallInfo` to be called with bogus `pResolvedToken` and we can no longer use that to get a `RuntimeDeterminedMethod` anyway."},{"Id":"6920354130","Type":"PullRequestEvent","CreatedAt":"2017-11-29T18:12:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5039","RelatedDescription":"Merged pull request \"[ARM32] Cross initialization rootfs for Tizen\" (#5039) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"6920171609","Type":"PullRequestEvent","CreatedAt":"2017-11-29T17:34:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5040","RelatedDescription":"Opened pull request \"Do not track RuntimeDeterminedMethod dependencies from canonical methods\" (#5040) at dotnet/corert","RelatedBody":"The concept of RuntimeDeterminedMethodNode was added when I was trying to support a mode where generic dictionaries could have \"holes\" (null entries for things that are not used for the particular instantiation). This turned out to be not feasible and we now have dependency analysis infra to patch those holes up anyway. We don't need to track dependencies of canonical code on such granularity.\r\n\r\nThe only exception to that were generic methods, but I'm fixing that by having the method generic dictionary (which is tracked as a runtime determined dependency of the canonical body) to also depend on the ShadowConcreteMethod (to make sure we can actually fill it).\r\n\r\nI'm doing this because the devirtualization in RyuJIT causes `getCallInfo` to be called with bogus `pResolvedToken` and we can no longer use that to get a `RuntimeDeterminedMethod` anyway."},{"Id":"6917706240","Type":"PullRequestEvent","CreatedAt":"2017-11-29T09:32:58","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5039","RelatedDescription":"Opened pull request \"[ARM32] Cross initialization rootfs for Tizen\" (#5039) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"6917043427","Type":"PullRequestEvent","CreatedAt":"2017-11-29T06:31:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5038","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5038) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6921690634","Type":"PullRequestEvent","CreatedAt":"2017-11-29T23:03:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1771","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1771) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171128-080041\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171128-080041 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6921631491","Type":"PullRequestEvent","CreatedAt":"2017-11-29T22:48:18","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1725","RelatedDescription":"Merged pull request \"Add reference metadata to indicate that RAR can skip dependency searching\" (#1725) at dotnet/sdk","RelatedBody":"MSBuild half: https://github.com/Microsoft/msbuild/pull/2716\r\n\r\nOn .NET Core, I'm seeing 2.5-3X improvement in RAR and about 0.5 seconds shaved off of full and incremental builds.\r\n\r\n```\r\nBefore (dotnet new mvc - first build)\r\n       68 ms  ResolvePackageFileConflicts                1 calls\r\n       81 ms  ResolvePackageDependencies                 1 calls\r\n      101 ms  GenerateDepsFile                           1 calls\r\n      168 ms  MsBuild                                   10 calls\r\n      724 ms  ResolveAssemblyReference                   1 calls\r\n      795 ms  Csc                                        1 calls\r\n     1125 ms  RestoreTask                                1 calls\r\n\r\n     Time Elapsed 00:00:03.80\r\n\r\nBefore (dotnet new mvc - no changes):\r\n       70 ms  ResolvePackageFileConflicts                1 calls\r\n       95 ms  ResolvePackageDependencies                 1 calls\r\n      167 ms  MsBuild                                   10 calls\r\n      172 ms  RestoreTask                                1 calls\r\n      729 ms  ResolveAssemblyReference                   1 calls\r\n\r\n      Time Elapsed 00:00:01.88\r\n\r\n\r\nAfter (dotnet new mvc - first build):\r\n       75 ms  ResolvePackageFileConflicts                1 calls\r\n       98 ms  GenerateDepsFile                           1 calls\r\n       98 ms  ResolvePackageDependencies                 1 calls\r\n      173 ms  MsBuild                                   10 calls\r\n      260 ms  ResolveAssemblyReference                   1 calls\r\n      810 ms  Csc                                        1 calls\r\n     1092 ms  RestoreTask                                1 calls\r\n\r\n     Time Elapsed 00:00:03.16\r\n\r\nAfter (dotnet new mvc - no changes):\r\n       76 ms  ResolvePackageFileConflicts                1 calls\r\n      105 ms  ResolvePackageDependencies                 1 calls\r\n      183 ms  MsBuild                                   10 calls\r\n      187 ms  RestoreTask                                1 calls\r\n      287 ms  ResolveAssemblyReference                   1 calls\r\n\r\n      Time Elapsed 00:00:01.40\r\n```"},{"Id":"6920614242","Type":"PullRequestEvent","CreatedAt":"2017-11-29T19:06:43","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1776","RelatedDescription":"Opened pull request \"Merging dev/release/2.0 into release/2.0.0\" (#1776) at dotnet/sdk","RelatedBody":"FYI. @dotnet/dotnet-cli "},{"Id":"6917326616","Type":"PullRequestEvent","CreatedAt":"2017-11-29T08:01:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1775","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/15.5\" (#1775) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171129-080148\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171129-080148 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6915960554","Type":"IssuesEvent","CreatedAt":"2017-11-28T23:54:39","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1724","RelatedDescription":"Closed issue \"dotnet run with a TFM prints restore output to the command line\" (#1724) at dotnet/sdk","RelatedBody":"1. Create a new console application `dotnet new console`\r\n2. Do `dotnet run`. The first and only line in the output is from the app's execution (`Hello world!`)\r\n3. Do `dotnet run -f netcoreapp2.1`. \r\n\r\n**Expected:**\r\n`Hello world!`\r\n\r\n**Actual**\r\n```\r\nMicrosoft (R) Build Engine version 15.5.172.19382 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 12.52 ms for D:\\temp\\run-test\\run-test.csproj.\r\nHello World!\r\n```\r\n\r\n```dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007522)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007522\r\n Commit SHA-1 hash:  d58fc6120d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   \\.dotnet\\x64\\sdk\\2.2.0-preview1-007522\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25907-02\r\n  Build    : 5e5b627d019c82b11a718a90008ce4f737c7e401\r\n```\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":24,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":210,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-11-30T05:30:23.222842Z","RunDurationInMilliseconds":8342}