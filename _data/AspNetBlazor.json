{"Data":{"GitHubIssues":{"Issues":[{"Id":"348981667","IsPullRequest":true,"CreatedAt":"2018-08-09T05:21:55","Actor":"rynowak","Number":"1286","RawContent":null,"Title":"Reenable markup blocks","State":"open","Body":"There were two problems here:\r\n- We weren't incrementing child count inside child content - fixed in #1290\r\n- We weren't dealing with HTML entities correctly (fixed in this PR)","Url":"https://github.com/aspnet/Blazor/pull/1286","RelatedDescription":"Open PR \"Reenable markup blocks\" (#1286)"},{"Id":"348829898","IsPullRequest":false,"CreatedAt":"2018-08-08T17:55:28","Actor":"natemcmaster","Number":"1285","RawContent":null,"Title":"Move x-plat testing into VSTS","State":"open","Body":"AppVeyor and Travis are still required to provide full test coverage. To make VSTS provide the same level of coverage, we need to\r\n\r\n* Enable selenium-standalone on VSTS\r\n* Add macOS and Linux build phases\r\n* Ensure tests run with `/p:BlazorAllTests=true` (or just make this default)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1285","RelatedDescription":"Open issue \"Move x-plat testing into VSTS\" (#1285)"},{"Id":"348393980","IsPullRequest":true,"CreatedAt":"2018-08-08T15:54:37","Actor":"natemcmaster","Number":"1278","RawContent":null,"Title":"Automate authenticode code-signing using Roslyn sign tool","State":"closed","Body":"This automates authenticode code-signing using the Roslyn's SignTool (which is currently being ported to Arcade) and MicroBuild (the *real* MicroBuild, not the aspnet namesake).\r\n\r\nThe biggest change here is that obj and bin folders are relocated. This is part of the upcoming convergence of KoreBuild and Arcade. It was easier to do this now to make code-signing work better with the SignTool.\r\n\r\nChanges:\r\n* Change project layout to match the expectations of Arcade and sign-tool\r\n* Add signtool config file to configure OPC, NuGet, and Authenticode signing\r\n* Fix a bug when BaseIntermediateOutputPath is set to an absolute path\r\n* Split the build definition into ci-public and ci-official. ci-public does not code-sign.\r\n\r\n~~TODO: flip from 'test' to 'real' signing once ticket 79507967 is approved.~~\r\n\r\nResolves #1269 ","Url":"https://github.com/aspnet/Blazor/pull/1278","RelatedDescription":"Closed or merged PR \"Automate authenticode code-signing using Roslyn sign tool\" (#1278)"},{"Id":"348016108","IsPullRequest":false,"CreatedAt":"2018-08-08T15:54:37","Actor":"natemcmaster","Number":"1269","RawContent":null,"Title":"Enable code-signing for VSTS builds","State":"closed","Body":"Follow-up to #1251. Blocked on https://dotnet.visualstudio.com/internal/_workitems/edit/61\r\n\r\nWe should enable code-signing to run automatically on VSTS builds. One less thing to hand-crank.","Url":"https://github.com/aspnet/Blazor/issues/1269","RelatedDescription":"Closed issue \"Enable code-signing for VSTS builds\" (#1269)"},{"Id":"348400851","IsPullRequest":true,"CreatedAt":"2018-08-08T12:02:22","Actor":"RyoukoKonpaku","Number":"1280","RawContent":null,"Title":"Fix for builds when the app assembly has spaces on it's name.","State":"closed","Body":"Fixes #1279","Url":"https://github.com/aspnet/Blazor/pull/1280","RelatedDescription":"Closed or merged PR \"Fix for builds when the app assembly has spaces on it's name.\" (#1280)"},{"Id":"348400718","IsPullRequest":false,"CreatedAt":"2018-08-08T12:02:22","Actor":"RyoukoKonpaku","Number":"1279","RawContent":null,"Title":"Project Build fails when startup assembly has spaces.","State":"closed","Body":"## Bug Description\r\nIt seems that the 0.5.1 templates fails to build when the solution name has spaces. The build task only gets a portion of the solution folder name as it's arguments for the CLI. The specific error is the ```_GenerateBlazorBootJson``` task on the ```write-boot-json``` part.\r\n## Repro steps\r\n - Create a project with a solution name that has spaces e.g. ```Some Spaced name```\r\n - Build the solution\r\n\r\nThe fix is to add quotes on the ```@(IntermediateAssembly)``` for the Exe task.","Url":"https://github.com/aspnet/Blazor/issues/1279","RelatedDescription":"Closed issue \"Project Build fails when startup assembly has spaces.\" (#1279)"},{"Id":"348674818","IsPullRequest":false,"CreatedAt":"2018-08-08T10:53:32","Actor":"MarkStega","Number":"1284","RawContent":null,"Title":"[Question] [Server side rendering] Guidance on adding logging to Blazor app","State":"open","Body":"I had tried SSR when 0.5 arrived and other than some dropping of the SignalR update path my application worked as it did on the client.\r\n\r\nI just decided to try SSR again and the app fails. I suspect it is because the client is now filled (some say littered) with calls to Blazor.Extensions.Logging methods.\r\n\r\nI thought (looking at the architecture diagram in the 0.5 announcement blog) that I could simply add the references to NLog as I do on the web server itself.\r\n\r\nI started by removing this fragment\r\n```\r\n            services.AddLogging(builder => builder\r\n                .AddBrowserConsole() // Add Blazor.Extensions.Logging.BrowserConsoleLogger\r\n                .SetMinimumLevel(LogLevel.Trace)\r\n            );\r\n```\r\nfrom ConfigureServices(IServiceCollection services)\r\n\r\nI was immediately stymied when trying to add this fragment\r\n\r\n                   .ConfigureLogging(logging =>\r\n                       {\r\n                           logging.ClearProviders();\r\n                           logging.SetMinimumLevel(LogLevel.Trace);\r\n                       })\r\n                   .UseNLog()  // NLog: setup NLog for Dependency injection\r\nto BlazorWebAssemblyHost.CreateDefaultBuilder just as I add it to WebHost.CreateDefaultBuilder in the web server program.cs\r\n\r\nIs this an issue that the CreateDefaultBuilder has to have 'UseNLog()' added meaning that the NLog team (or I) need to write an extension to BlazorWebAssemblyHost.CreateDefaultBuilder?","Url":"https://github.com/aspnet/Blazor/issues/1284","RelatedDescription":"Open issue \"[Question] [Server side rendering] Guidance on adding logging to Blazor app\" (#1284)"},{"Id":"348668270","IsPullRequest":false,"CreatedAt":"2018-08-08T10:32:50","Actor":"springy76","Number":"1283","RawContent":null,"Title":"SimpleJson is not compiled with SIMPLE_JSON_READONLY_COLLECTIONS","State":"open","Body":"All my existing types for REST serialization use `IReadOnlyCollection<T>` for nested collections, and refactoring that to any other type (no matter if `ICollection<T>`, `T[]` or `List<T>`) introduces a huge amount of strong PITA problems.\r\n\r\nSo please define `SIMPLE_JSON_READONLY_COLLECTIONS` either directly in [code](https://github.com/aspnet/Blazor/blob/90cf6ce5a7b77616b2dae8f9e6d92967299de89d/src/Microsoft.JSInterop/Json/SimpleJson/SimpleJson.cs#L34) or in whatever project which includes and compiles that file.","Url":"https://github.com/aspnet/Blazor/issues/1283","RelatedDescription":"Open issue \"SimpleJson is not compiled with SIMPLE_JSON_READONLY_COLLECTIONS\" (#1283)"},{"Id":"348667751","IsPullRequest":false,"CreatedAt":"2018-08-08T10:31:06","Actor":"stsrki","Number":"1282","RawContent":null,"Title":"[suggestion] User-defined components with Upper-case","State":"open","Body":"Right now it is not possible to create custom components like Button, Form, Input, etc. because it is messing with the built-in html tags that are lower-case. This is not good because if anyone wants to create custom UI library for Blazor it cannot be done nicely unless the components are named with the prefix.\r\n\r\nThis should be handled like in [react](https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized), where all user-components must be named with the capital letter.\r\n\r\nPossible duplicate of [#1155](https://github.com/aspnet/Blazor/issues/1155) and [#1173](https://github.com/aspnet/Blazor/issues/1173) !","Url":"https://github.com/aspnet/Blazor/issues/1282","RelatedDescription":"Open issue \"[suggestion] User-defined components with Upper-case\" (#1282)"},{"Id":"348247730","IsPullRequest":false,"CreatedAt":"2018-08-08T04:49:45","Actor":"gsmental","Number":"1275","RawContent":null,"Title":"calling/downloading common Dlls  from CDN, like android downloadable fonts","State":"closed","Body":"Is it possible to downloading common Dlls  from  any CDN, , like android has facility to  downloadable fonts from url. \r\n\r\nIt can reduce band-width cost and Common AspNet.Core dlls will be available for all users. it is thinking.","Url":"https://github.com/aspnet/Blazor/issues/1275","RelatedDescription":"Closed issue \"calling/downloading common Dlls  from CDN, like android downloadable fonts\" (#1275)"},{"Id":"348507489","IsPullRequest":false,"CreatedAt":"2018-08-08T03:09:12","Actor":"kiegh","Number":"1281","RawContent":null,"Title":"JsonPatchDocument","State":"closed","Body":"I'm a bit confused as to how we should create a patch document in Blazor to pass to our API for partial updates?\r\n\r\nDoes anyone have any tips?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1281","RelatedDescription":"Closed issue \"JsonPatchDocument\" (#1281)"},{"Id":"348293853","IsPullRequest":false,"CreatedAt":"2018-08-07T14:44:20","Actor":"Amine-Smahi","Number":"1276","RawContent":null,"Title":"How to deploy Blazor (Server-side in ASP.NET Core) project","State":"closed","Body":"A tutorial may help.","Url":"https://github.com/aspnet/Blazor/issues/1276","RelatedDescription":"Closed issue \"How to deploy Blazor (Server-side in ASP.NET Core) project\" (#1276)"},{"Id":"348352584","IsPullRequest":false,"CreatedAt":"2018-08-07T14:41:40","Actor":"Lupusa87","Number":"1277","RawContent":null,"Title":"Access sender object inside event","State":"open","Body":"1. Is there way to get sender object inside event (for example onclick)?\r\nCan element reference help somehow?\r\n\r\n  For example I want to access sender Button and get it's content inside onclick.\r\n\r\n2. How is possible  to access captured element reference inside onclick method for example to call some javascript function?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1277","RelatedDescription":"Open issue \"Access sender object inside event\" (#1277)"},{"Id":"348201401","IsPullRequest":false,"CreatedAt":"2018-08-07T07:32:53","Actor":"osintsevvladimir","Number":"1274","RawContent":null,"Title":"[Question] Close popup window when we click on outside popup window","State":"open","Body":"How do I handle an event \"document.onclick\" inside a DropDownList component?\r\n\r\n**Angular example:**\r\n```\r\n@Component({\r\n  host: {\r\n    '(document:click)': 'onClick($event)',\r\n  },\r\n})\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1274","RelatedDescription":"Open issue \"[Question] Close popup window when we click on outside popup window\" (#1274)"},{"Id":"348135680","IsPullRequest":false,"CreatedAt":"2018-08-07T07:16:16","Actor":"gfkeogh","Number":"1272","RawContent":null,"Title":"Azure Storage operation not supported","State":"closed","Body":"I modified the Visual Studio 2017 standard template generated project by adding the WindowsAzure.Storage 9.3.0 package and some basic code to do a TableOperation Retrieve of a single table row. The ExecuteAsync call fails with\r\n\r\n`System.PlatformNotSupportedException: Operation is not supported on this platform.`\r\n\r\nWeb searches don't produce anything helpful on this so far, so I'm not sure which link in the chain is the breaking one. It would be wonderfully convenient to directly access Azure Storage from Blazor as I do in other environments like Xamarin, full ASP.NET, etc. Any advice on this would be most welcome -- *Greg* ","Url":"https://github.com/aspnet/Blazor/issues/1272","RelatedDescription":"Closed issue \"Azure Storage operation not supported\" (#1272)"},{"Id":"348194192","IsPullRequest":false,"CreatedAt":"2018-08-07T07:08:23","Actor":"LunicLynx","Number":"1273","RawContent":null,"Title":"Version 0.5.0 and 0.5.1 tags are incorrect","State":"open","Body":"0.5.0 should be at 201c2a4746664cfba4b2519befaea4e604acef0a\r\n0.5.1 should be at e93a47b83f98ee2c82167c2b0738c9e58f8487d0\r\n\r\nCurrently they both point at 0.6.0-preview1","Url":"https://github.com/aspnet/Blazor/issues/1273","RelatedDescription":"Open issue \"Version 0.5.0 and 0.5.1 tags are incorrect\" (#1273)"},{"Id":"347673455","IsPullRequest":false,"CreatedAt":"2018-08-07T06:09:21","Actor":"iAmBipinPaul","Number":"1260","RawContent":null,"Title":"have anyone tried developing browser extension with Blazor?","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1260","RelatedDescription":"Closed issue \"have anyone tried developing browser extension with Blazor?\" (#1260)"},{"Id":"348007751","IsPullRequest":false,"CreatedAt":"2018-08-07T05:16:04","Actor":"simonziegler","Number":"1268","RawContent":null,"Title":"Unable to use Microsoft.AspNetCore.Identity.SignInManager with Blazor Server Side","State":"closed","Body":"Hi,\r\n\r\nI have a Client/Server Blazor project that, among other things, authenticates users using Microsoft.AspNetCore.Identity. The relevant controller uses the SignInManager class from identity.\r\n\r\nI am experimenting with migrating this project to Blazor Server Side so that I can improve performance. Calls to a SignInManager object fail however. What I have (unsuccessfully) attempted to do is to make the pre-existing controller a service that is consumed by the App project. Referencing it is fine however I get an exception on calling SignInManager.PasswordSignInAsync. Is this because there is no HttpClient access from the App project, and if so is there a way that I can make this work?\r\n\r\nThank you.","Url":"https://github.com/aspnet/Blazor/issues/1268","RelatedDescription":"Closed issue \"Unable to use Microsoft.AspNetCore.Identity.SignInManager with Blazor Server Side\" (#1268)"},{"Id":"348115330","IsPullRequest":true,"CreatedAt":"2018-08-07T00:05:03","Actor":"natemcmaster","Number":"1271","RawContent":null,"Title":"Use $(TargetDir) instead of $(ProjectDir)$(OutputPath)","State":"closed","Body":"Resolves https://github.com/aspnet/Blazor/issues/1179\r\n\r\nPrevents errors when `$(OutputPath)` is an absolute path.","Url":"https://github.com/aspnet/Blazor/pull/1271","RelatedDescription":"Closed or merged PR \"Use $(TargetDir) instead of $(ProjectDir)$(OutputPath)\" (#1271)"},{"Id":"348082759","IsPullRequest":false,"CreatedAt":"2018-08-06T21:08:32","Actor":"MarkStega","Number":"1270","RawContent":null,"Title":"Compile time warning for unknown tags/components","State":"open","Body":"I missed putting\r\n```\r\n@addTagHelper *, BlazorStrap\r\n```\r\nin one of my cshtml source files. Of course, all of the BlazorStrap components in that source file failed to render. It would be helpful if the compilation process gave at least a warning if an opening element that doesn't match an html tag or component such as\r\n```\r\n<UnknownComponentOrTag...\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/1270","RelatedDescription":"Open issue \"Compile time warning for unknown tags/components\" (#1270)"},{"Id":"347609948","IsPullRequest":false,"CreatedAt":"2018-08-06T17:02:42","Actor":"mrpmorris","Number":"1257","RawContent":null,"Title":"Browser disappears when app is run","State":"closed","Body":"I'm migrating Fluxor to the newest version of Blazor. Three of the sample projects work, but two do not (04 and 05).\r\n\r\nWhen I run them the Browser (Chrome Version 68.0.3440.84 - 64 bit) opens and then immediately closes.  Looking in Fiddler it doesn't even get as far as downloading my assemblies.\r\n\r\nI've checked and the startup.cs and program.cs in 04 are the same as in 01. Can anyone help?\r\n\r\nhttps://github.com/mrpmorris/blazor-fluxor/tree/feature/UpgradeToBlazor.0.5","Url":"https://github.com/aspnet/Blazor/issues/1257","RelatedDescription":"Closed issue \"Browser disappears when app is run\" (#1257)"},{"Id":"348002767","IsPullRequest":false,"CreatedAt":"2018-08-06T16:55:19","Actor":"xperiandri","Number":"1267","RawContent":null,"Title":"Blazor breaks Orchard Core CMS middleware pipeline","State":"open","Body":"If I just reference `Blazor.Server` it breaks Orchard Core CMS middleware I CSS is not served\r\n\r\nTry repro in https://github.com/msproadshow/Orchard/tree/blazor-conference\r\n\r\nTheConferenceTheme references `Blazor.Server`\r\nOrchard.CMS.Web references TheConferenceTheme and runs.\r\nImmediately setup screen is displayed broken.","Url":"https://github.com/aspnet/Blazor/issues/1267","RelatedDescription":"Open issue \"Blazor breaks Orchard Core CMS middleware pipeline\" (#1267)"},{"Id":"347984884","IsPullRequest":false,"CreatedAt":"2018-08-06T16:33:19","Actor":"StevenTCramer","Number":"1266","RawContent":null,"Title":"Hosted in Single dll","State":"closed","Body":"Currently the the hosted solution gives us 3 projects.\r\n\r\nI prefer to use \"Feature Folders\" Jimmy Bogard Style.\r\n\r\na Feature contains:\r\n* Controller\r\n* Request\r\n* Response\r\n* DTOs \r\n* Handler\r\n* Validator\r\n* Mapper \r\n* Presentation \r\n* Entity\r\n\r\nGiven the 3 projects my folder has to be split up. something like:\r\n\r\nServer:\r\n* Controller\r\n* Handler \r\n* Mapper\r\n* Entity\r\n\r\nShared:\r\n* Request\r\n* Response\r\n* Validator\r\n* DTOs\r\n\r\nClient:\r\n* Presentation\r\n\r\nCould we get Blazor to build a hosted version with server side API and client as single project and dll?\r\n\r\nThen my feature folder would be united once again.  And things would be easier to reason about.\r\n\r\nAnd deployment becomes easier.  1 dll.  \r\n\r\nI am sure there are downsides also :)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1266","RelatedDescription":"Closed issue \"Hosted in Single dll\" (#1266)"},{"Id":"347977773","IsPullRequest":false,"CreatedAt":"2018-08-06T15:42:44","Actor":"SteveSandersonMS","Number":"1265","RawContent":null,"Title":"Re-enable markup frames in compiler","State":"open","Body":"This involves ensuring we've fixed the underlying causes for all the issues with label `htmlblock` (https://github.com/aspnet/Blazor/issues?utf8=%E2%9C%93&q=label%3Ahtmlblock).","Url":"https://github.com/aspnet/Blazor/issues/1265","RelatedDescription":"Open issue \"Re-enable markup frames in compiler\" (#1265)"},{"Id":"347727049","IsPullRequest":false,"CreatedAt":"2018-08-06T11:54:02","Actor":"Mitch528","Number":"1261","RawContent":null,"Title":"Invoking JS on Dispose throws NullReferenceException","State":"closed","Body":"I'm trying to invoke a js function on disposal of a component, but I'm getting a NullReferenceException exception when doing so.\r\n\r\n```\r\nHello World!\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (:61620/System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1d092f8 + 0x001c8> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (:61620/System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1d0f3e0 + 0x00088> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (:61620/System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1d092f8 + 0x001c8> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (:61620/System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1d0f3e0 + 0x00088> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n    at endInvokeDotNetFromJS (blazor.webassembly.js:1)\r\n    at Object.invokeJSFromDotNet (blazor.webassembly.js:1)\r\n    at Array.<anonymous> (mono.js:1)\r\n    at _emscripten_asm_const_iiiii (mono.js:1)\r\n    at :61620/wasm-function[5423]:36\r\n    at :61620/wasm-function[3671]:39\r\n    at :61620/wasm-function[3677]:386\r\n    at :61620/wasm-function[3678]:224\r\n    at :61620/wasm-function[3790]:189\r\n    at :61620/wasm-function[739]:15952\r\n```\r\n\r\nRepro:\r\n\r\n```cshtml\r\n@page \"/\"\r\n@implements IDisposable\r\n\r\n@functions {\r\n    public void Dispose()\r\n    {\r\n        ((IJSInProcessRuntime)JSRuntime.Current).Invoke<bool>(\"test.hello\");\r\n    }\r\n}\r\n```\r\n\r\n```js\r\nvar test = {\r\n        hello: function () {\r\n            console.log(\"Hello World!\");\r\n        }\r\n    }\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1261","RelatedDescription":"Closed issue \"Invoking JS on Dispose throws NullReferenceException\" (#1261)"},{"Id":"347827700","IsPullRequest":false,"CreatedAt":"2018-08-06T11:52:35","Actor":"Amine-Smahi","Number":"1264","RawContent":null,"Title":"Blazor 0.5.0 is heavy","State":"closed","Body":"Since the new update of blazor, the standard blazor project size changed from 2.1mb to 4.48 wich is the double size. the community wont use a ui framework that eats 4mb from the user bandwidth.\r\n\r\n![image](https://user-images.githubusercontent.com/24621701/43705762-69fedde4-995b-11e8-852d-26d585bdedc6.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1264","RelatedDescription":"Closed issue \"Blazor 0.5.0 is heavy\" (#1264)"},{"Id":"347734375","IsPullRequest":false,"CreatedAt":"2018-08-06T07:00:00","Actor":"skyne98","Number":"1262","RawContent":null,"Title":"Stripped-down Blazor ","State":"closed","Body":"Hello everyone!\n\nRight now, Blazor feels like the most convenient way of using cutting edge mono wasm compilation toolchain. However, to me it's very unfortunate, that a Blazor project is so tightly integrated into it's ASP-like infrastructure, as well as Razor templates.\n\nIt would be nice to have a stripped-down version of Blazor (something like Console App template for .NET Core) which looks like a Rust STDWEB project and allows to either create a wasm library, which can be integrated via the generated convenience .js file, or avoid everything else all together, allowing your program main function to be an entry point to the whole app, allowing access to HTML5 apis.\n\nIn my opinion, such a template will allow to greatly increase the amount of use cases for Blazor and C# as a web language all together.\n\nFurther integration with bundlers like Parcel will allow to make lightweight mixed projects possible.\n\nHowever, maybe I am missing something and there is an undocumented way of using CoreRT or Mono tools to do it. If that's true, I will strongly ask to provide some information. Thanks!","Url":"https://github.com/aspnet/Blazor/issues/1262","RelatedDescription":"Closed issue \"Stripped-down Blazor \" (#1262)"},{"Id":"347740605","IsPullRequest":false,"CreatedAt":"2018-08-05T23:31:27","Actor":"Lupusa87","Number":"1263","RawContent":null,"Title":"After updating project to 0.5.1 Firefox gives error","State":"closed","Body":"Edge and Chrome are working normally, Firefox no.\r\n\r\nError: Exception Double Fault blazor.webassembly.js:1:35409 \r\n\r\nPlease check [site](http://lupusablazordemos.azurewebsites.net/)\r\n\r\n![untitled](https://user-images.githubusercontent.com/40779557/43691139-84041ffe-98e5-11e8-9cdb-9b3cc15c1e71.png)","Url":"https://github.com/aspnet/Blazor/issues/1263","RelatedDescription":"Closed issue \"After updating project to 0.5.1 Firefox gives error\" (#1263)"},{"Id":"347668907","IsPullRequest":false,"CreatedAt":"2018-08-05T04:43:31","Actor":"mandalorianbob","Number":"1259","RawContent":null,"Title":"Trying to make editable text field - keeps disappearing.","State":"open","Body":"I created a small \"editable field\" where if you click on the text, it'll change to a text box which you can then modify.\r\nHowever, I'm seeing some really strange behavior from hitting \"Escape\": If I click on the text, and edit the text, and hit \"Enter\" everything's fine. If I hit \"Escape\" it appears to delete the last element.\r\nSo if I click on the Text, type something and hit \"Escape\" it deletes div \"savedValue\". If I do it again, it deletes span \"textField\".\r\nMy intention was obviously to change \"Text\" back to \"_savedValue\" if they hit escape. And it seems like it might work, but it keeps deleting the elements.\r\nAny other warnings, caveats, or better ways to do what I'm trying to do appreciated.\r\nThanks\r\n```\r\n<div>\r\n    @if (_editing)\r\n    {\r\n        <input id=\"textField\" bind=\"Text\" onkeyup=\"@OnKeyUp\" />\r\n    } \r\n    else\r\n    {\r\n        <span id=\"textField\" onclick=\"@OnTextClicked\">@Text</span>\r\n    }\r\n    <div id=\"savedValue\">@_savedValue</div>\r\n</div>\r\n@functions{\r\n    [Parameter]\r\n    string Text { get; set; }\r\n\r\n    [Parameter]\r\n    private Action<string> TextChanged { get; set; }\r\n\r\n    bool _editing = false;\r\n\r\n    string _savedValue;\r\n\r\n    void OnTextClicked()\r\n    {\r\n        _editing = true;\r\n        _savedValue = Text;\r\n    }\r\n\r\n    void OnKeyUp(UIKeyboardEventArgs eventArgs)\r\n    {\r\n        if (eventArgs.Key == \"Enter\" || eventArgs.Key == \"Escape\") //This causes the issue\r\n        {\r\n            _editing = false;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1259","RelatedDescription":"Open issue \"Trying to make editable text field - keeps disappearing.\" (#1259)"},{"Id":"347644576","IsPullRequest":false,"CreatedAt":"2018-08-04T20:00:54","Actor":"EdCharbeneau","Number":"1258","RawContent":null,"Title":"Allow for <script type=\"module\"... in component libraries.","State":"open","Body":"[JavaScript modules are supported by all of the evergreen browsers now.](https://caniuse.com/#search=modules) This has led me to experimenting with some ideas of how to tidy up JavaScript interops when using Blazor.\r\n\r\nI feel like having the ability to use native JavaScript modules could lead to some clean abstractions around JS interopos. The following code works when adding the scripts manually to index.html.\r\n\r\nEx:\r\n\r\n```\r\n// FooHandler.js\r\nfunction doFoo() { alert(\"Foo Triggered\") }\r\nexport { doFoo };\r\n```\r\n```\r\n// FooInterop.js\r\nimport { doFoo } from './FooHandler.js';\r\nwindow.myNamespace = {\r\n    foo: doFoo\r\n}\r\n```\r\n```\r\n<!-- index.html -->\r\n<script src=\"./FooInterop.js\" type=\"module\"></script>\r\n```\r\n\r\nThe problem arises when you attempt this from a Blazor Component Library. Since the `<script>` tags are automagically added to index.html, there is no way to denote that they require the `type\\module` attribute.\r\n\r\nThe following line fails because it is added by the framework and misses the required `type\\module` attribute.\r\n```\r\n<script src=\"_content/DownloadComponents/FooInterop.js\">\r\n```\r\nIn addition, any js files in the folder are also added. In the case of modules, and when using modules, they are not necessary to have.\r\n\r\n```\r\n<!-- Foo Handler is not needed because it's already imported via FooInterop -->\r\n<script src=\"_content/DownloadComponents/FooHandler.js\">\r\n<script src=\"_content/DownloadComponents/FooInterop.js\">\r\n```\r\n\r\nThis approach may be a bit forward thinking since most JS devs use some sort of bundle tool like Webpack. However, modules are now recognized by the browser, so why not embrace it?","Url":"https://github.com/aspnet/Blazor/issues/1258","RelatedDescription":"Open issue \"Allow for <script type=\"module\"... in component libraries.\" (#1258)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-09T05:30:02.7970647Z","RunDurationInMilliseconds":1257}