{"Data":{"Blog":{"FeedItems":[{"Title":"Join Microsoft Teams at Xamarin Developer Summit","PublishedOn":"2019-06-10T16:54:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"On July 11-12th, the community-run Xamarin Developer Summit is set to launch in Houston, Texas. The two-day conference is packed full of amazing Xamarin content, covering a wide range of mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-developer-summit/","RawContent":null},{"Title":"Use Maps to Display and Navigate Users with Xamarin.Essentials","PublishedOn":"2019-06-07T16:26:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"A common scenario for mobile apps is to help their users get to a specific location. This may be a restaurant, office, or the trailhead for the most amazing hike in the pacific northwest. We can...","Href":"https://devblogs.microsoft.com/xamarin/maps-navagation-xamarin-essentials/","RawContent":null},{"Title":"CheckBox with Xamarin.Forms 4.1.0 Pre-Release","PublishedOn":"2019-06-05T19:34:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Just a few weeks ago we shipped Xamarin.Forms 4.0, which introduced the new Shell navigation for quickly bootstrapping your applications. As well as image source unification to make it convenient to...","Href":"https://devblogs.microsoft.com/xamarin/checkbox-xamarin-forms-4-1-0-pre-release/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in June","PublishedOn":"2019-06-03T18:50:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Jumpstart your next mobile development projects by networking with your local community and getting the latest updates about Xamarin and .NET related technologies. Discover upcoming developer events...","Href":"https://devblogs.microsoft.com/xamarin/june-developer-events-xamarin-dotnet/","RawContent":null},{"Title":"Customer Showcase: BBVA – Augmented Reality House Hunting","PublishedOn":"2019-05-31T16:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently launched a case study series with invited customers to explore their applications using various Microsoft technologies that address business needs. In this post, we look at Valora View, a...","Href":"https://devblogs.microsoft.com/xamarin/bbva-xamarin-customer-showcase/","RawContent":null},{"Title":"Preparing Android Apps for Google Play’s 64-bit Requirements","PublishedOn":"2019-05-29T18:34:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The introduction of Android 5.0 back in 2014 brought official support for 64-bit CPUs. This is a great advancement in Android as 64-bit CPUs deliver great performance improvements for all users...","Href":"https://devblogs.microsoft.com/xamarin/64-bit-requirements-xamarin-android-apps/","RawContent":null},{"Title":"Xamarin.Forms 4.0: Getting Started with Shell","PublishedOn":"2019-05-28T19:16:30+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Xamarin.Forms 4.0 introduced amazing new features to help streamline development when building beautiful mobile apps with C#. The main highlight was the new Xamarin.Forms Shell, which seeks to reduce...","Href":"https://devblogs.microsoft.com/xamarin/shell-xamarin-forms-4-0-getting-started/","RawContent":null},{"Title":"Welcome to the Shell Era: Xamarin.Forms 4.0 Released","PublishedOn":"2019-05-21T16:10:44+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"For the past year, Xamarin has been on a focused journey to improve your productivity by reducing your complexity when building cross-platform mobile applications. Notice the reference to...","Href":"https://devblogs.microsoft.com/xamarin/introducing-xamarin-forms-4-0-the-era-of-shell/","RawContent":null},{"Title":"Managing HTTP & Cleartext Traffic on Android with Network Security Configuration","PublishedOn":"2019-05-17T18:40:55+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Did you know that starting with Android 9 (API level 28) cleartext(non-HTTPS) support is disabled by default? It is always recommended to make connections over HTTPS to ensure that any web...","Href":"https://devblogs.microsoft.com/xamarin/cleartext-http-android-network-security/","RawContent":null},{"Title":"Xamarin Podcast: Microsoft Build 2019 Recap","PublishedOn":"2019-05-14T18:29:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in Xamarin and cloud development. This edition also covering a recap of Microsoft Build 2019!\nBuild...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-build-2019-recap/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9795742700","Type":"IssuesEvent","CreatedAt":"2019-06-11T05:15:28","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3197","RelatedDescription":"Opened issue \"Several `.xml` and `.pdb` files are missing for class library assemblies in the Xamarin.Android 9.4.0.17 installer\" (#3197) at xamarin/xamarin-android","RelatedBody":"I suspect this is just a little unintentional hiccup related to the nice cleanup of the `.vsix` and `.pkg` installer contents in <https://github.com/xamarin/xamarin-android/pull/2733>.\r\n\r\n### Example Steps to Reproduce\r\n\r\n 1. Create a new **Android App (Xamarin)** C# project.\r\n 2. Double-check that the **Application** section of the Visual Studio property pages shows **Android 9.0 (Pie)** for the Target Framework. (This step only matters for types from `Mono.Android.dll`.)\r\n 3. Add a line to `MainActivity.cs` that uses a type from `Mono.Android.dll` or one of the BCL assemblies. For example:\r\n\r\n    ```cs\r\n    var x = typeof (Android.Runtime.AndroidEnvironment);\r\n    ```\r\n\r\n    Or:\r\n   \r\n    ```cs\r\n    var x = typeof (System.Runtime.Serialization.Formatter);\r\n    ```\r\n\r\n 4. Hover over `AndroidEnvironment` or `Formatter` with the mouse cursor to show the IntelliSense tooltip.\r\n\r\n### Expected Behavior\r\n\r\nThe tooltip shows:\r\n\r\n```\r\nclass Android.Runtime.AndroidEnvironment\r\nProvides a way to manipulate the Android operating environment.\r\n```\r\n\r\nor\r\n\r\n```\r\nclass System.Runtime.Serialization.Formatter\r\nProvides base functionality for the common language runtime serialization formatters.\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThe tooltip shows:\r\n\r\n```\r\nclass Android.Runtime.AndroidEnvironment\r\n```\r\n\r\nor\r\n\r\n```\r\nclass System.Runtime.Serialization.Formatter\r\n```\r\n\r\nThat is, the documentation line is missing. Here is an attached list of the `.xml` and `.pdb` files that are missing under the `$ReferenceAssemblies` directory of the `.vsix` compared to Xamarin.Android 9.3.0.22:\r\n\r\n[Xamarin.Android.Sdk-9.4.0.17-vsix-MissingFiles.txt](https://github.com/xamarin/xamarin-android/files/3274839/Xamarin.Android.Sdk-9.4.0.17-vsix-MissingFiles.txt)\r\n\r\n\r\n### Version Information\r\n\r\nXamarin.Android SDK   9.4.0.17 (d16-2/bce1291)"},{"Id":"9795174193","Type":"PullRequestEvent","CreatedAt":"2019-06-11T02:27:48","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3196","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] correct name for AAR stamp files\" (#3196) at xamarin/xamarin-android","RelatedBody":"In testing our AndroidX migration, we found a situation where some of\r\nXamarin.Android's MSBuild targets would always run:\r\n\r\n    Building target \"_ConvertLibraryResourcesCases\" completely.\r\n    Input file \"obj\\Debug\\90\\lp\\44.stamp\" does not exist.\r\n    ...\r\n    Building target \"_UpdateAndroidResgen\" completely.\r\n    Input file \"obj\\Debug\\90\\lp\\44.stamp\" does not exist.\r\n    ...\r\n    Building target \"_CreateBaseApk\" completely.\r\n    Input file \"obj\\Debug\\90\\lp\\44.stamp\" does not exist.\r\n\r\nThis seemed to occur in the case of the AndroidX NuGet package using\r\nan AAR file. Digging further, it seemed we were using the incorrect\r\npath for the `N.stamp` file in the `<ResolveLibraryProjectImports/>`\r\nMSBuild task. It was using `aarFile.ItemSpec` instead of\r\n`aarIdentityName`, which would be the integer-based ID.\r\n\r\nIt seems this bug has been here (at least since 15.8), so perhaps it\r\nhas always been this way?\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/8db794a1f80ebcf1ba6943d43cb1b19d78a0eabf/src/Xamarin.Android.Build.Tasks/Tasks/ResolveLibraryProjectImports.cs#L331-L333\r\n\r\nIn addition to this fix, I expanded\r\n`IncrementalBuildTest.ResolveLibraryProjectImports`:\r\n\r\n* Check both `$(AndroidUseAapt2)` True/False\r\n* Check the counts on the `ResolvedResourceDirectoryStamps`\r\n* Check the `ResolvedResourceDirectoryStamps` *exist*\r\n* Make a 4th build with no changes to check that these expensive\r\n  targets are skipped."},{"Id":"9794981742","Type":"PullRequestEvent","CreatedAt":"2019-06-11T01:34:44","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3195","RelatedDescription":"Merged pull request \"[xaprepare] Detect `ant` installation directory\" (#3195) at xamarin/xamarin-android","RelatedBody":"`ant` is installed using the package managers on `macOS` and `Linux` and by\r\ndownloading its zip distribution archive on Windows. All of those systems\r\ninstall the utility in a different location (`macOS` in homebrew prefix -\r\nusually `/usr/local`, Linux in `/usr` and Windows in `~/android-toolchain/ant`)\r\nand so it is necessary to point our MSBuild tasks to the correct location.\r\n\r\nMake the `AntDirectory` MSBuild property overridable and assign it the default,\r\ndetected, location in `Configuration.OperatingSystem.props`"},{"Id":"9794909290","Type":"PullRequestEvent","CreatedAt":"2019-06-11T01:12:57","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3185","RelatedDescription":"Merged pull request \"[build] use Prepare target for AzDO\" (#3185) at xamarin/xamarin-android","RelatedBody":"Instead of running `xaprepare.exe` directly during our build, we\r\nshould instead use the `/t:Prepare` target.\r\n\r\nThis is what developers will use to build Xamarin.Android on Windows,\r\nso this will help us ensure the `Prepare` target continues to work."},{"Id":"9794867426","Type":"PullRequestEvent","CreatedAt":"2019-06-11T01:00:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3193","RelatedDescription":"Merged pull request \"Fix `File.Move` with dangling symlinks\" (#3193) at xamarin/xamarin-android","RelatedBody":"Current versions of Mono 6 have a bug which makes them throw an `IOException`\r\nwhenever an attempt is made to move a file that is a dangling symlink, on Unix\r\noperating systems:\r\n\r\n    Mono archive already downloaded and valid\r\n    Archive path: android-archives/android-debug-Darwin-ddef564e344e1e287d6e7755d633d54aa6344985.7z\r\n    [7zip] extracting archive\r\n    [7zip] log file: bin/BuildDebug/prepare-20190610T143559.7zip-extract.android-debug-Darwin-ddef564e344e1e287d6e7755d633d54aa6344985.7z.log\r\n    Elapsed: 00:00:41.0868232\r\n\r\n    Step Xamarin.Android.Prepare.Step_BuildMonoRuntimes failed: Could not find file 'external/mono/sdks/out.tmp/android-host-mxe-Win32-debug/bin/mono'.\r\n    System.InvalidOperationException: Step Xamarin.Android.Prepare.Step_BuildMonoRuntimes failed: Could not find file 'external/mono/sdks/out.tmp/android-host-mxe-Win32-debug/bin/mono'. ---> System.IO.FileNotFoundException: Could not find file 'external/mono/sdks/out.tmp/android-host-mxe-Win32-debug/bin/mono'.\r\n      at Xamarin.Android.Prepare.Utilities.MoveFileWithRetry (System.String source, System.String destination, System.Boolean resetFileTimestamp) [0x000c1] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:538\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectory (System.String sourceDir, System.String destinationDir, System.Boolean resetFileTimestamp) [0x000be] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:475\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectory (System.String sourceDir, System.String destinationDir, System.Boolean resetFileTimestamp) [0x00098] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:468\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectory (System.String sourceDir, System.String destinationDir, System.Boolean resetFileTimestamp) [0x00098] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:468\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectoryContentsRecursively (System.String sourceDir, System.String destinationDir, System.Boolean cleanDestinationDir, System.Boolean resetFileTimestamp) [0x000dc] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:451\r\n\r\nSince we cannot, at this time, fix the problem in the Mono BCL, we need to work\r\naround it. Thus, this commit implements a way to check whether a file is a\r\ndangling symlink before calling `File.Move`. If the file **is** a dangling\r\nsymlink, it is not copied using `link(2)` (the cause of the Mono bug) but,\r\nrather, it is recreated at the destination location using the contents of the\r\nsource symlink acquired using `readlink(2)`."},{"Id":"9793988974","Type":"PullRequestEvent","CreatedAt":"2019-06-10T21:23:39","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3195","RelatedDescription":"Opened pull request \"[xaprepare] Detect `ant` installation directory\" (#3195) at xamarin/xamarin-android","RelatedBody":"`ant` is installed using the package managers on `macOS` and `Linux` and by\r\ndownloading its zip distribution archive on Windows. All of those systems\r\ninstall the utility in a different location (`macOS` in homebrew prefix -\r\nusually `/usr/local`, Linux in `/usr` and Windows in `~/android-toolchain/ant`)\r\nand so it is necessary to point our MSBuild tasks to the correct location.\r\n\r\nMake the `AntDirectory` MSBuild property overridable and assign it the default,\r\ndetected, location in `Configuration.OperatingSystem.props`"},{"Id":"9793227848","Type":"PullRequestEvent","CreatedAt":"2019-06-10T19:24:29","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3194","RelatedDescription":"Opened pull request \"Make console access \"safe\" on Windows\" (#3194) at xamarin/xamarin-android","RelatedBody":"Running `xaprepare` on Windows will sometimes result in the following error when\r\nattempting to access certain `System.Console` class members:\r\n\r\n    System.InvalidOperationException: Step Xamarin.Android.Prepare.Step_PrepareBundle failed: Failed to download https://xamjenkinsartifact.azureedge.net/mono-jenkins/xamarin-android-debug/xamarin-android/bin/Debug/bundle-v21-h9f52cd0-Debug-Darwin-libzip=b95cf3f,mono=c6edaa6.zip: The handle is invalid.\r\n       ---> System.InvalidOperationException: Failed to download https://xamjenkinsartifact.azureedge.net/mono-jenkins/xamarin-android-debug/xamarin-android/bin/Debug/bundle-v21-h9f52cd0-Debug-Darwin-libzip=b95cf3f,mono=c6edaa6.zip: The handle is invalid.\r\n       ---> System.IO.IOException: The handle is invalid.\r\n\r\n         at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n         at System.Console.GetBufferInfo(Boolean throwOnNoConsole, Boolean& succeeded)\r\n         at System.Console.get_CursorTop()\r\n         at Xamarin.Android.Prepare.Utilities.LogDownloadProgress(DownloadStatus status, Boolean fancyLogging) in build-tools\\xaprepare\\xaprepare\\Application\\Utilities.cs:line 50\r\n         at Xamarin.Android.Prepare.Utilities.<>c__DisplayClass8_0.<SetupDownloadStatus>b__0(DownloadStatus status) in build-tools\\xaprepare\\xaprepare\\Application\\Utilities.cs:line 41\r\n         at Xamarin.Android.Prepare.DownloadStatus.StoreAndUpdate(UInt64 bytesRead, Boolean timeForUpdate) in build-tools\\xaprepare\\xaprepare\\Application\\DownloadStatus.cs:line 73\r\n         at Xamarin.Android.Prepare.DownloadStatus.Update(UInt64 bytesRead) in build-tools\\xaprepare\\xaprepare\\Application\\DownloadStatus.cs:line 48\r\n         at Xamarin.Android.Prepare.Utilities.<DoDownload>d__32.MoveNext() in build-tools\\xaprepare\\xaprepare\\Application\\Utilities.cs:line 420\r\n\r\nMake sure it doesn't happen by protecting code which accesses those\r\nproperties/methods with `try/catch` to ignore the errors."},{"Id":"9793110337","Type":"PullRequestEvent","CreatedAt":"2019-06-10T19:05:33","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3193","RelatedDescription":"Opened pull request \"Fix `File.Move` with dangling symlinks\" (#3193) at xamarin/xamarin-android","RelatedBody":"Current versions of Mono 6 have a bug which makes them throw an `IOException`\r\nwhenever an attempt is made to move a file that is a dangling symlink, on Unix\r\noperating systems:\r\n\r\n    Mono archive already downloaded and valid\r\n    Archive path: android-archives/android-debug-Darwin-ddef564e344e1e287d6e7755d633d54aa6344985.7z\r\n    [7zip] extracting archive\r\n    [7zip] log file: bin/BuildDebug/prepare-20190610T143559.7zip-extract.android-debug-Darwin-ddef564e344e1e287d6e7755d633d54aa6344985.7z.log\r\n    Elapsed: 00:00:41.0868232\r\n\r\n    Step Xamarin.Android.Prepare.Step_BuildMonoRuntimes failed: Could not find file 'external/mono/sdks/out.tmp/android-host-mxe-Win32-debug/bin/mono'.\r\n    System.InvalidOperationException: Step Xamarin.Android.Prepare.Step_BuildMonoRuntimes failed: Could not find file 'external/mono/sdks/out.tmp/android-host-mxe-Win32-debug/bin/mono'. ---> System.IO.FileNotFoundException: Could not find file 'external/mono/sdks/out.tmp/android-host-mxe-Win32-debug/bin/mono'.\r\n      at Xamarin.Android.Prepare.Utilities.MoveFileWithRetry (System.String source, System.String destination, System.Boolean resetFileTimestamp) [0x000c1] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:538\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectory (System.String sourceDir, System.String destinationDir, System.Boolean resetFileTimestamp) [0x000be] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:475\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectory (System.String sourceDir, System.String destinationDir, System.Boolean resetFileTimestamp) [0x00098] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:468\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectory (System.String sourceDir, System.String destinationDir, System.Boolean resetFileTimestamp) [0x00098] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:468\r\n      at Xamarin.Android.Prepare.Utilities.MoveDirectoryContentsRecursively (System.String sourceDir, System.String destinationDir, System.Boolean cleanDestinationDir, System.Boolean resetFileTimestamp) [0x000dc] in build-tools/xaprepare/xaprepare/Application/Utilities.cs:451\r\n\r\nSince we cannot, at this time, fix the problem in the Mono BCL, we need to work\r\naround it. Thus, this commit implements a way to check whether a file is a\r\ndangling symlink before calling `File.Move`. If the file **is** a dangling\r\nsymlink, it is not copied using `link(2)` (the cause of the Mono bug) but,\r\nrather, it is recreated at the destination location using the contents of the\r\nsource symlink acquired using `readlink(2)`."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9795709344","Type":"IssuesEvent","CreatedAt":"2019-06-11T05:05:51","Actor":"seansparkman","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6486","RelatedDescription":"Opened issue \"[Bug] Shell - OnAppearing not executing\" (#6486) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI have overrided the OnAppearing (and OnDisappearing) methods in the AppShell of a new project.  The OnAppearing never seems to execute.  Shell inherits from Page, so it should probably use OnAppearing.  This would be nice for executing code that needs to be await'ed and cannot be in the constructor.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new Xamarin Forms Project and select the Shell template\r\n2. Open AppShell.xaml.cs\r\n3. Add an override for OnAppearing\r\n4. Add code in the OnAppearing to write to the Console\r\n5. Set breakpoint\r\n6. Run the project\r\n\r\n### Expected Behavior\r\n\r\nThe breakpoint should be hit or at least the Console WriteLine should be visible in the output window.\r\n\r\n### Actual Behavior\r\n\r\nThe breakpoint is never hit and the text does not show up in the output window.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.0.0.482894\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2019 for Windows 16.1.2\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.10.0.153\r\n  - Android: N/A\r\n  - UWP:  N/A\r\n- Android Support Library Version: N/A\r\n- Nuget Packages: Just what comes with the template\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/seansparkman/ShellNavigationExample/blob/master/ShellNavigationRegistration/ShellNavigationRegistration/AppShell.xaml.cs#L27\r\n"},{"Id":"9795660718","Type":"IssuesEvent","CreatedAt":"2019-06-11T04:51:21","Actor":"seansparkman","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6485","RelatedDescription":"Opened issue \"[Bug] Shell TabBarIsVisible Ignored\" (#6485) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n![Screenshot with tabbar showing](https://raw.githubusercontent.com/seansparkman/ShellNavigationExample/master/2019-06-10_11-47-18-PM.png)\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/seansparkman/ShellNavigationExample\r\nhttps://github.com/seansparkman/ShellNavigationExample/blob/master/ShellNavigationRegistration/ShellNavigationRegistration/Views/OnBoarding.xaml#L8-L9\r\n"},{"Id":"9795627625","Type":"IssuesEvent","CreatedAt":"2019-06-11T04:41:00","Actor":"seansparkman","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6484","RelatedDescription":"Opened issue \"[Bug] \" (#6484) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. Navigate three pages deep.\r\n2. Remove one page from the NavigationStack\r\n3. PopAsync to go back\r\n\r\n### Expected Behavior\r\n\r\nNavigates back two pages.  It worked this way for Xamarin Forms Navigation before.\r\nhttps://stackoverflow.com/questions/24856116/how-to-popasync-more-than-1-page-in-xamarin-forms-navigation\r\n\r\n### Actual Behavior\r\n\r\nThrows null reference exception from Shell.GetNavBarIsVisible.\r\nObject reference not set to an instance of an object\r\nSource: Xamarin.Forms.Core\r\n  at Xamarin.Forms.Shell.GetNavBarIsVisible (Xamarin.Forms.BindableObject obj) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Shell\\Shell.cs:69 \r\n  at Xamarin.Forms.Platform.iOS.ShellSectionRenderer+NavDelegate.WillShowViewController (UIKit.UINavigationController navigationController, UIKit.UIViewController viewController, System.Boolean animated) [0x00028] in D:\\a\\1\\s\\Xamarin.Forms.Platform.iOS\\Renderers\\ShellSectionRenderer.cs:469 \r\n  at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\n  at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) [0x00005] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.10.0.153/src/Xamarin.iOS/UIKit/UIApplication.cs:86 \r\n  at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) [0x0000e] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.10.0.153/src/Xamarin.iOS/UIKit/UIApplication.cs:65 \r\n  at CommonAlly.iOS.Application.Main (System.String[] args) [0x00001] in C:\\Users\\seans\\source\\commonally-mobile\\CommonAlly\\CommonAlly.iOS\\Main.cs:17 \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.0.0.482894\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2019 for Windows 16.1.2\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.10.0.153\r\n  - Android: N/A\r\n  - UWP:  N/A\r\n- Android Support Library Version: N/A\r\n- Nuget Packages: Just what comes with the template\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/seansparkman/ShellNavigationExample\r\nhttps://github.com/seansparkman/ShellNavigationExample/blob/master/ShellNavigationRegistration/ShellNavigationRegistration/Views/OnBoardingThird.xaml.cs\r\n"},{"Id":"9794810526","Type":"IssuesEvent","CreatedAt":"2019-06-11T00:42:20","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6447","RelatedDescription":"Closed issue \"[Bug] ListView DataTemplate Label text cutting in Xamarin.Forms 4.0\" (#6447) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nList view with data template and binding data from view model. If the value of a label changes dynamically from a converter, the lebel is cutting. The same code was working before upgrading to xamrin.forms 4.0\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a list view with data template view cell\r\n2. Bind a collection of model objects to the list items source\r\n3. Have a property in the view model which is assigned from a converter based on its value.\r\n\r\n### Expected Behavior\r\n\r\nThe label which is updating from converter should be visible on the view.\r\n\r\n### Actual Behavior\r\nThe label which is updating from converter is cutting and showing ellipses at the end.\r\n### Basic Information\r\n\r\n- Version with issue: 4.0 \r\n- Last known good version: 3.6\r\n- IDE: VS 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android:  9.0\r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n![Screenshot_20190607-183632](https://user-images.githubusercontent.com/51481908/59107549-8569b180-8956-11e9-8f4a-a31ac2656a0c.jpg)\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/M-Narender-Reddy/MyRepo\r\n\r\n\r\n\r\n"},{"Id":"9794783686","Type":"IssuesEvent","CreatedAt":"2019-06-11T00:34:02","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6456","RelatedDescription":"Closed issue \"XAML Previewer not properly rendering RelativeLayout\" (#6456) at xamarin/Xamarin.Forms","RelatedBody":"VSF_TYPE_MARKDOWNThe XamlSamples has a RelativeLayout sample that runs fine on emulator, but doesn't render properly in the Previewer.\n\nhttps://developer.xamarin.com/samples/xamarin-forms/XamlSamples/\n\nAnd different devices in the dropdown show differing results.\n\nSee images attached.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/444898/xaml-previewer-not-properly-rendering-relativelayo.html\nVSTS ticketId: 785635_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/22/2019, 07:56 AM (105 days ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\nVisual Studio Feedback System on 2/22/2019, 08:02 AM (105 days ago): <p>A fix for this issue has been internally implemented and is being prepared for release. We'll update you once it becomes available for download.</p>\n\nVisual Studio Feedback System on 6/4/2019, 10:06 PM (2 days ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"9794751085","Type":"IssuesEvent","CreatedAt":"2019-06-11T00:24:14","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6451","RelatedDescription":"Closed issue \"[Bug] CollectionView takes too much space/expands vertically\" (#6451) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nCollectionView, when places with other controls in for example stackLayout, takes too much space vertically. It should only take as much space as total items height(at least when VerticalOptions=\"Start\" are set)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run sample\r\n\r\n### Expected Behavior\r\n\r\nCollectionView should only take as much space as sum of it's items\r\n\r\n### Actual Behavior\r\nCollectionView expads to higher height or takes all space available\r\n### Basic Information\r\n\r\n- Version with issue: 4.00\r\n- Last known good version: none\r\n- IDE: VS 2017\r\n- Platform Target Frameworks: \r\n  - iOS:  Haven't tested\r\n  - Android: 9.1\r\n  - UWP:  1803\r\n- Nuget Packages:\r\n- Affected Devices:  All\r\n\r\n### Screenshots\r\n\r\n\r\nUWP:\r\n![obraz](https://user-images.githubusercontent.com/3065454/59113575-93fb9d00-8945-11e9-8efa-d5defaafd835.png)\r\n\r\nAndroid:\r\n![Screenshot_20190607-165555 (1)](https://user-images.githubusercontent.com/3065454/59113926-551a1700-8946-11e9-95f3-a321fbe10dd5.jpg)\r\n\r\n\r\n### Reproduction Link\r\n\r\n[CollectionViewRepro.zip](https://github.com/xamarin/Xamarin.Forms/files/3266494/CollectionViewRepro.zip)\r\n\r\n"},{"Id":"9794568465","Type":"IssuesEvent","CreatedAt":"2019-06-10T23:31:48","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5887","RelatedDescription":"Closed issue \" Signature (parameter 1) of EventHandler\" (#5887) at xamarin/Xamarin.Forms","RelatedBody":" Hello Sir,\r\nPlease help me out.\r\nWhen i update the latest Xamarin form version 3.6.0.293080.Come up with error as screenshot.Please solve it. i am waiting...\r\n![picturemessage_u0uv3hyd q3h](https://user-images.githubusercontent.com/24875408/55954391-37993b80-5c7c-11e9-99b0-a4793266e786.png)\r\n"},{"Id":"9794206927","Type":"IssuesEvent","CreatedAt":"2019-06-10T22:04:39","Actor":"chamons","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6483","RelatedDescription":"Opened issue \"[xcode11-support] WWDC 2019 Areas for Research\" (#6483) at xamarin/Xamarin.Forms","RelatedBody":"The macios team took some notes on areas Xamarin.Forms could be impacted by Xcode 11:\r\n\r\n- New system colors and materials (Semantic Colors and materials)\r\n- Support for light/dark theme\r\n- Support for “cards” to present modal pages - we might need a way of telling full-screen presentation from the new cards default.\r\n- Asking system font by name can fail\r\n"},{"Id":"9793684948","Type":"IssuesEvent","CreatedAt":"2019-06-10T20:35:33","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6424","RelatedDescription":"Reopened issue \"Shell: CollectionView or ListView content in a top tab ShellContent page is obscured behind top tabs on iOS\" (#6424) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nCollectionView or ListView content in a ShellContent's page is obscured behind the tabs on iOS. It appears that perhaps the top insets are incorrect. Video of the behavior: https://www.youtube.com/watch?v=_NuOoiVpHrw\r\n\r\nIssue exists only in iOS, not Android.\r\n\r\nWrapping the CollectionView or ListView in a ScrollView appears to fix the insets problem, but then pull-to-refresh doesn't work because the ScrollView receives the gestures, not the nested ListView. (Not an issue for CollectionView yet, of course, because CollectionView doesn't yet support pull-to-refresh.)\r\n\r\nI only included CollectionView in my repro sample.\r\n\r\n### Steps to Reproduce\r\n\r\nBuild and run this sample repo:\r\nhttps://github.com/jsauve/Xamarin.Forms.4.0.0.482894_TopTabs-CollectionView-Insets-Bug\r\n\r\n### Expected Behavior\r\n\r\nThe top of the CollectionView or ListView is not obscured behind the top tabs.\r\n\r\n### Actual Behavior\r\n\r\nThe top of the CollectionView or ListView is obscured behind the top tabs.\r\n\r\n### Basic Information\r\n\r\nMy local dev environment details:\r\nhttps://gist.github.com/jsauve/6eb67803db786def5d8f8c74b308f95d\r\n\r\n### Screenshots\r\n\r\nVideo:\r\nhttps://www.youtube.com/watch?v=_NuOoiVpHrw\r\n\r\n### Reproduction Link\r\n\r\nBuild and run this sample repo:\r\nhttps://github.com/jsauve/Xamarin.Forms.4.0.0.482894_TopTabs-CollectionView-Insets-Bug\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9795780501","Type":"PullRequestEvent","CreatedAt":"2019-06-11T05:25:53","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6231","RelatedDescription":"Merged pull request \"[d16-2] Bump maccore and macios-binaries to get fix for #6216.\" (#6231) at xamarin/xamarin-macios","RelatedBody":"maccore diff: https://github.com/xamarin/macios-binaries/compare/ff1d19c3e4562c3750f457a183c11046ad810040..43d082327cbb8583a5c85bbcb242b9445fc18340\n\nNew commits in xamarin/maccore:\n\n* xamarin/maccore@12ecfd8249 [mlaunch] Use [SimDevice registerNotificationHandlerOnQueue:handler:] instead of [SimDevice registerNotificationHandler:]. Fixes xamarin/xamarin-macios#6216. (#1722)\n\nmacios-binaries diff: https://github.com/xamarin/maccore/compare/62a239f3f89573dd68c120993cd1dfeb166f8c9c..12ecfd8249cab8d3867a779e5ce633f97bb3825b\n\nFixes https://github.com/xamarin/xamarin-macios/issues/6216."},{"Id":"9795129883","Type":"PullRequestEvent","CreatedAt":"2019-06-11T02:16:02","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6251","RelatedDescription":"Opened pull request \"[d16-1] Bump maccore and macios-binaries to get fix for #6216\" (#6251) at xamarin/xamarin-macios","RelatedBody":"macios-binaries\n* https://github.com/xamarin/macios-binaries/commit/6c7f7363730fd6d0996858e1817ade58de4148c7\n* https://github.com/xamarin/macios-binaries/commit/ca299f64db27013c90c6a3897db5a5d34c1d2afa\n\nmaccore\n* https://github.com/xamarin/maccore/commit/2e43cb5b1e23c3dd715676c4a065fd60f8e90b2b"},{"Id":"9795031990","Type":"PullRequestEvent","CreatedAt":"2019-06-11T01:48:54","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6238","RelatedDescription":"Merged pull request \"Bump VS4M minimum to 8.0.0\" (#6238) at xamarin/xamarin-macios","RelatedBody":"This should solve the msbuild failures when recent system mono are used\nto build the tests\n\nFix https://github.com/mono/mono/issues/14875"},{"Id":"9795028732","Type":"PullRequestEvent","CreatedAt":"2019-06-11T01:48:01","Actor":"radical","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6250","RelatedDescription":"Closed pull request \"[debugging] 2019-02 msbuild test failures\" (#6250) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9794800633","Type":"PullRequestEvent","CreatedAt":"2019-06-11T00:39:17","Actor":"radical","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6249","RelatedDescription":"Closed pull request \"[debugging] Bump mono to build with msbuild 16\" (#6249) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9794797972","Type":"PullRequestEvent","CreatedAt":"2019-06-11T00:38:27","Actor":"radical","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6250","RelatedDescription":"Opened pull request \"Debug 2019 02 a\" (#6250) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9794759137","Type":"PullRequestEvent","CreatedAt":"2019-06-11T00:26:38","Actor":"radical","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6249","RelatedDescription":"Opened pull request \"[debugging] Bump mono to build with msbuild 16\" (#6249) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1138151096067792898","CreatedAt":"2019-06-10T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"Join us at Xamarin Developer Summit - July 11-12. With 35+ sessions, there is something for everyone:\n- Mobile DevO… https://t.co/Ez5mDpM1Az","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":23,"RawContent":null},{"Id":"1137049335273840640","CreatedAt":"2019-06-07T17:31:01+00:00","UserScreenname":"xamarinhq","Text":"Our cross-platform API library enables any mobile app that uses the Maps API to launch a map w/ a specific location… https://t.co/BWS4qeqtyU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":86,"FavoriteCount":34,"RawContent":null},{"Id":"1136679096954449921","CreatedAt":"2019-06-06T16:59:49+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":8,"FavoriteCount":5,"RawContent":null},{"Id":"1136666060189573120","CreatedAt":"2019-06-06T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"On this week's Xamarin.Essential API of the week, we take a look at the Compass API; enabling you to monitor the de… https://t.co/6Iq1tNqo0B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":13,"RawContent":null},{"Id":"1136362715805552641","CreatedAt":"2019-06-05T20:02:38+00:00","UserScreenname":"xamarinhq","Text":"Now available... the pre-release version of Xamarin.Forms 4.1. And we're happy to say that CheckBox &amp; improved text… https://t.co/BGmdIAVxAO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":155,"FavoriteCount":68,"RawContent":null},{"Id":"1135657873072148482","CreatedAt":"2019-06-03T21:21:51+00:00","UserScreenname":"xamarinhq","Text":"Jumpstart your next mobile dev projects by networking w/ your local community &amp; getting the latest updates about… https://t.co/39JBottYZu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":18,"RawContent":null},{"Id":"1134529085961621504","CreatedAt":"2019-05-31T18:36:27+00:00","UserScreenname":"xamarinhq","Text":"We're starting a new case study series. Today, we look at Valora View, a mobile app created by BBVA to help custome… https://t.co/Q0HeoB3chG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":68,"FavoriteCount":21,"RawContent":null},{"Id":"1134188986229035010","CreatedAt":"2019-05-30T20:05:01+00:00","UserScreenname":"xamarinhq","Text":"What's better than sharing 80% of code across #iOS &amp; #Android apps w/ #Xamarin? ...building a backend powered by… https://t.co/EZc7s5adqh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":127,"FavoriteCount":36,"RawContent":null},{"Id":"1134136640929193985","CreatedAt":"2019-05-30T16:37:01+00:00","UserScreenname":"xamarinhq","Text":"August 1 2019, Android apps that ship native libraries must provide a 64-bit v of their app.… https://t.co/JSElMqVSyB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":29,"RawContent":null},{"Id":"1133821797059780608","CreatedAt":"2019-05-29T19:45:56+00:00","UserScreenname":"xamarinhq","Text":"Today on @TheXamarinShow,, @JamesMontemagno &amp; #MSMVP @NicoVermeir shows off a tool that will change the life of eve… https://t.co/lYUf1XXB4m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":19,"RawContent":null},{"Id":"1133455659851243520","CreatedAt":"2019-05-28T19:31:02+00:00","UserScreenname":"xamarinhq","Text":"There are some amazing new features to help streamline C# dev when building beautiful mobile apps w/ Xamarin.Forms… https://t.co/MRwO5G62uW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":152,"FavoriteCount":73,"RawContent":null},{"Id":"1131261167085580289","CreatedAt":"2019-05-22T18:10:54+00:00","UserScreenname":"xamarinhq","Text":"Join us right now for the #XamarinForms 4.0 Launch Event Live Stream! https://t.co/YE7Usel1Sb","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":32,"FavoriteCount":14,"RawContent":null},{"Id":"1131230744267972608","CreatedAt":"2019-05-22T16:10:01+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin.Forms team for the Xamarin.Forms 4.0 launch event extravaganza where they will discuss the latest… https://t.co/WJK5Lp4eRK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":65,"FavoriteCount":24,"RawContent":null},{"Id":"1130900878830002177","CreatedAt":"2019-05-21T18:19:15+00:00","UserScreenname":"xamarinhq","Text":"We've been obsessing over your feedback. Thanks to your commitment to helping us deliver great dev tools, we're ann… https://t.co/uioErOmWr2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":216,"FavoriteCount":88,"RawContent":null},{"Id":"1129486865831272449","CreatedAt":"2019-05-17T20:40:28+00:00","UserScreenname":"xamarinhq","Text":"Did you know that starting with Android 9, cleartext(non-HTTPS) support is disabled by default? In our latest post,… https://t.co/hRUvSFu9c8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":52,"FavoriteCount":27,"RawContent":null},{"Id":"1129423057725083649","CreatedAt":"2019-05-17T16:26:55+00:00","UserScreenname":"xamarinhq","Text":"In the latest @XamarinShow, @JamesMontemagno &amp; @dotMorten intro us to the world of advanced mapping with ArcGIS for… https://t.co/nVZWVivZdG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":87,"FavoriteCount":27,"RawContent":null},{"Id":"1129055786808877057","CreatedAt":"2019-05-16T16:07:31+00:00","UserScreenname":"xamarinhq","Text":"In today's #MSBuild session replay, we look at how you can craft stunning mobile apps with the Xamarin Visual Desig… https://t.co/W9U6GrPYf1","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":64,"FavoriteCount":36,"RawContent":null},{"Id":"1129054446191751168","CreatedAt":"2019-05-16T16:02:11+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":6,"RawContent":null},{"Id":"1128376789510819840","CreatedAt":"2019-05-14T19:09:25+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. In today's episode, we learn the difference between the Preferences API part… https://t.co/z7Yrhk0jNn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":77,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2019-06-11T05:31:04.9019048Z","RunDurationInMilliseconds":3544}