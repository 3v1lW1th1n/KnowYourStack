{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7005410019","Type":"PullRequestEvent","CreatedAt":"2017-12-19T01:57:13","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15574","RelatedDescription":"Opened pull request \"Manually add arm/arm64 BenchmarksGame testing\" (#15574) at dotnet/coreclr","RelatedBody":"It was removed in #13994 when these benchmarks were updated, expecting\r\na tests.lst autogeneration would follow. I'm adding them manually now\r\nto ensure we have test coverage for these.\r\n\r\nFixes #15503"},{"Id":"7005370958","Type":"PullRequestEvent","CreatedAt":"2017-12-19T01:41:51","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15501","RelatedDescription":"Merged pull request \"Enable gdbjit while NI file exist\" (#15501) at dotnet/coreclr","RelatedBody":"Current gdbjit does not work with NI files.\r\nThis patch allows breakpoint to work with NI files when COMPlus_ZapDisable=1"},{"Id":"7005325845","Type":"PullRequestEvent","CreatedAt":"2017-12-19T01:24:32","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15573","RelatedDescription":"Merged pull request \"Fix desktop build break\" (#15573) at dotnet/coreclr","RelatedBody":"Fix desktop build break\r\ncodegenlegacy.cpp(16025): warning C4389: '!=' : signed/unsigned mismatch\r\ncodegenlegacy.cpp(16025): error C2220: warning treated as error - no 'object' file generated\r\n\r\nIntroduced in #15524 "},{"Id":"7005193232","Type":"PullRequestEvent","CreatedAt":"2017-12-19T00:34:24","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15573","RelatedDescription":"Opened pull request \"Fix desktop build break\" (#15573) at dotnet/coreclr","RelatedBody":"Fix desktop build break\r\ncodegenlegacy.cpp(16025): warning C4389: '!=' : signed/unsigned mismatch\r\ncodegenlegacy.cpp(16025): error C2220: warning treated as error - no 'object' file generated\r\n\r\nIntroduces in #15524 "},{"Id":"7005009999","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:29:01","Actor":"ChadNedzlek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15572","RelatedDescription":"Opened issue \"public static implicit operator Memory<T>(T[] array) should not throw for null array\" (#15572) at dotnet/coreclr","RelatedBody":"It's very unexpected, from a callers perspective, to call a method like:\r\n```` C#\r\npublic static void DoStuff(Memory<byte> memory);\r\n````\r\nwith a call like\r\n```` C#\r\nbtye [] arr = null;\r\nDoStuff(arr);\r\n````\r\n\r\nThis call throws an ArgumentNullException in the constructor of Memory.  Our published guidelines for developers, here [implicit (C# Reference)](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/implicit), says that implicit operators should not throw.  And it seems perfectly reasonable for this operator to return a `(Memory<byte>)null`, which will lead to the expected callstack (or, if the DoStuff method can actually handle null, then the expected behavior)."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7005401342","Type":"PullRequestEvent","CreatedAt":"2017-12-19T01:53:54","Actor":"mishra14","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8265","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4736 into cli\" (#8265) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4736 into cli master branch"},{"Id":"7005135338","Type":"PullRequestEvent","CreatedAt":"2017-12-19T00:12:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8240","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26015-04 (master)\" (#8240) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7005134580","Type":"PullRequestEvent","CreatedAt":"2017-12-19T00:12:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8261","RelatedDescription":"Merged pull request \"Merge release/2.1 to master\" (#8261) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20171218-080046\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20171218-080046 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7005132911","Type":"IssuesEvent","CreatedAt":"2017-12-19T00:11:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8263","RelatedDescription":"Closed issue \"Problems with xUnit\" (#8263) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nI have done the following steps to install .Net Core\r\nhttps://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.2-linux-x64-binaries\r\n\r\nAnd the following steps to do a example testcase.\r\nhttp://xunit.github.io/docs/getting-started-dotnet-core\r\n\r\n## Expected  behavior\r\n\r\nI want to run the example test.\r\n\r\n```C#\r\n\r\nusing Xunit;\r\n\r\nnamespace MyFirstUnitTests\r\n{\r\n    public class Class1\r\n    {\r\n        [Fact]\r\n        public void PassingTest()\r\n        {\r\n            Assert.Equal(4, Add(2, 2));\r\n        }\r\n\r\n        [Fact]\r\n        public void FailingTest()\r\n        {\r\n            Assert.Equal(5, Add(2, 2));\r\n        }\r\n\r\n        int Add(int x, int y)\r\n        {\r\n            return x + y;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nThe .csproj file content:\r\n\r\n``` xml\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"xunit\" Version=\"2.3.1\" />\r\n    <DotNetCliToolReference Include=\"dotnet-xunit\" Version=\"2.3.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n\r\n## Actual behavior\r\n\r\n![screenshot](https://user-images.githubusercontent.com/23243382/34126175-f79cd8f0-e438-11e7-9c49-af9a6a311bd5.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nsee screeenshot (above)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7005032168","Type":"PullRequestEvent","CreatedAt":"2017-12-18T23:36:07","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8265","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4736 into cli\" (#8265) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4736 into cli master branch"},{"Id":"7005026491","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:34:13","Actor":"sebastienros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8264","RelatedDescription":"Closed issue \"dotnet-install.ps1 doesn't work\" (#8264) at dotnet/cli","RelatedBody":"Tried with \r\n\r\n`.\\dotnet-install.ps1 --channel current` and `.\\dotnet-install.ps1 --channel 2.0`\r\n\r\nUsed `https://dot.net/v1/dotnet-install.ps1` and also tries with `dotnet/cli/master/scripts/obtain/` on github.\r\n\r\nWorks with the `.sh` shell script"},{"Id":"7004973029","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:16:54","Actor":"sebastienros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8264","RelatedDescription":"Opened issue \"dotnet-install.ps1 doesn't work\" (#8264) at dotnet/cli","RelatedBody":"Tried with \r\n\r\n`.\\dotnet-install.ps1 --channel current` and `.\\dotnet-install.ps1 --channel 2.0`\r\n\r\nUsed `https://dot.net/v1/dotnet-install.ps1` and also tries with `dotnet/cli/master/scripts/obtain/` on github.\r\n\r\nWorks with the `.sh` shell script"},{"Id":"7004777819","Type":"PullRequestEvent","CreatedAt":"2017-12-18T22:21:44","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8260","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to dev/release/2.0\" (#8260) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20171218-080045\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20171218-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7004275701","Type":"IssuesEvent","CreatedAt":"2017-12-18T20:20:03","Actor":"christianbender","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8263","RelatedDescription":"Opened issue \"Problems with xUnit\" (#8263) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nI have done the following steps to install .Net Core\r\nhttps://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.2-linux-x64-binaries\r\n\r\nAnd the following steps to do a example testcase.\r\nhttp://xunit.github.io/docs/getting-started-dotnet-core\r\n\r\n## Expected  behavior\r\n\r\nI want to run the example test.\r\n\r\n```C#\r\n\r\nusing Xunit;\r\n\r\nnamespace MyFirstUnitTests\r\n{\r\n    public class Class1\r\n    {\r\n        [Fact]\r\n        public void PassingTest()\r\n        {\r\n            Assert.Equal(4, Add(2, 2));\r\n        }\r\n\r\n        [Fact]\r\n        public void FailingTest()\r\n        {\r\n            Assert.Equal(5, Add(2, 2));\r\n        }\r\n\r\n        int Add(int x, int y)\r\n        {\r\n            return x + y;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nThe .csproj file content:\r\n\r\n``` xml\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"xunit\" Version=\"2.3.1\" />\r\n    <DotNetCliToolReference Include=\"dotnet-xunit\" Version=\"2.3.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n\r\n## Actual behavior\r\n\r\n![screenshot](https://user-images.githubusercontent.com/23243382/34126175-f79cd8f0-e438-11e7-9c49-af9a6a311bd5.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nsee screeenshot (above)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7004174500","Type":"PullRequestEvent","CreatedAt":"2017-12-18T19:56:06","Actor":"mishra14","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8262","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4733 into cli\" (#8262) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4733 into cli master branch"},{"Id":"7003926062","Type":"PullRequestEvent","CreatedAt":"2017-12-18T18:59:34","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8262","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4733 into cli\" (#8262) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4733 into cli master branch"},{"Id":"7003628429","Type":"PullRequestEvent","CreatedAt":"2017-12-18T17:51:35","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/8240","RelatedDescription":null,"RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7004949994","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:09:41","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/601","RelatedDescription":"Closed issue \"Understanding NETStandard.Library as a dependancy in my nuspec\" (#601) at dotnet/standard","RelatedBody":"Should a NETStandard.Library dependency appear in a nuspec?\r\n\r\nWhat does it do to projects that reference the nupkg versus not having it in the nuspec? If my netstandard1.6 library chooses to depend on 1.6.1, doesn't that force any dependent library to also depend on 1.6.1+? Is that a good thing and is that why you'd put it in a nuspec?\r\n\r\nOut of 1.6.0, 1.6.1, 2.0.0, and 2.0.1, the SDK picks 1.6.1 and 2.0.0 to reference for netstandard1.6 and netstandard2.0. Why not 2.0.1 for both?\r\n\r\nIs there a changelog that summarizes the differences in 1.6.1, 2.0.0 and 2.0.1?\r\n\r\nAre there docs that answer these questions? This is the only information I've been able to glean so far which hints that keeping it in the nuspec is correct, but it doesn't answer any of my other questions: \r\n![image](https://user-images.githubusercontent.com/8040367/33782541-21670bc0-dc27-11e7-9071-ac023a71c840.png)\r\n(https://docs.microsoft.com/en-us/nuget/guides/create-net-standard-packages-vs2017#package-the-component)\r\n"},{"Id":"7003958208","Type":"PullRequestEvent","CreatedAt":"2017-12-18T19:06:54","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/444","RelatedDescription":"Closed pull request \"System.DirectoryServices* are scheduled for .net core 2.1 not .net core 2.0\" (#444) at dotnet/standard","RelatedBody":"According to issue [#2089](https://github.com/dotnet/corefx/issues/2089) System.DirectoryServices* won't make it to .netcore before 2.1.\r\n\r\nThis affects also [.NET API Browser](https://docs.microsoft.com/de-de/dotnet/api/system.directoryservices.accountmanagement?view=netcore-2.0) which states .NET Core 2.0 support for System.DirectoryServices*."},{"Id":"6996389704","Type":"IssuesEvent","CreatedAt":"2017-12-16T00:15:25","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/505","RelatedDescription":"Closed issue \"Lots of conflicts when a project references both netstandard1.6 and netstandard2.0 projects\" (#505) at dotnet/standard","RelatedBody":"We have a classic WebApi .NET Framework project that references projects that is either netstandard1.6 and netstandard2.0.\r\n\r\nSome of our core projects uses EF Core 2.0 (which uses netstandard 2.0), while the Microsoft.AspNet.OData library references netstandard1.6. But this genereates lots of conflicts warnings on assemblies within these standards when building like these (there are more warnings than these):\r\n\r\n```\r\n1>          Encountered conflict between 'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.0\\build\\netstandard2.0\\\\ref\\System.AppContext.dll' and 'Reference:C:\\Users\\<user>\\.nuget\\packages\\system.appcontext\\4.1.0\\ref\\netstandard1.6\\System.AppContext.dll'.  Choosing 'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.0\\build\\netstandard2.0\\\\ref\\System.AppContext.dll' because AssemblyVersion '4.1.2.0' is greater than '4.1.0.0'.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\microsoft.win32.registry\\4.0.0\\runtimes\\unix\\lib\\netstandard1.3\\Microsoft.Win32.Registry.dll' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\microsoft.win32.registry\\4.0.0\\runtimes\\win\\lib\\netstandard1.3\\Microsoft.Win32.Registry.dll'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.fedora.23-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\fedora.23-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.fedora.24-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\fedora.24-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.opensuse.13.2-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\opensuse.13.2-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.opensuse.42.1-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\opensuse.42.1-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.rhel.7-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\rhel.7-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.ubuntu.14.04-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\ubuntu.14.04-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.ubuntu.16.04-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\ubuntu.16.04-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.ubuntu.16.10-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\ubuntu.16.10-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\linux\\lib\\netstandard1.4\\System.Diagnostics.Process.dll' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\osx\\lib\\netstandard1.4\\System.Diagnostics.Process.dll'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\linux\\lib\\netstandard1.4\\System.Diagnostics.Process.dll' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\win\\lib\\netstandard1.4\\System.Diagnostics.Process.dll'.  Could not determine winner due to equal file and assembly versions.\r\n\r\n```\r\n\r\nWhat impact does these have? \r\n\r\nI thought that the idea with these standards was that they should be backward compatible? There shouldn't be any warnings for this at all. \r\n\r\nI find the whole standard thing very non-standard compatible, this is one of the problems I have mixing projects that uses different standards. So it is quite frustrating now."},{"Id":"6996373876","Type":"IssuesEvent","CreatedAt":"2017-12-16T00:08:09","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/607","RelatedDescription":"Closed issue \"DataRow does not contains a defination for Fields\" (#607) at dotnet/standard","RelatedBody":"I am using Dot Net Standard 2.0 and I am trying to get the code below but showing error Does not contain definition for Fields.\r\n\r\n     foreach (DataRow dr in dt.Rows)\r\n                {\r\n                   int i= dr.Field<Int32>(\"Id\");\r\n                }\r\n\r\nthen what to use for similar kind of requirement?\r\n"},{"Id":"6996312774","Type":"IssuesEvent","CreatedAt":"2017-12-15T23:40:59","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/591","RelatedDescription":"Closed issue \".NET Standard 2 Library missing assembly error\" (#591) at dotnet/standard","RelatedBody":"I'm currently working on migrating a PCL to a .NET Standard 2.0 Library. After I have readded all NuGet dependencies I get the following error:\r\n`The type 'IReflectableType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Reflection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'`\r\n\r\nThe strange part about it is that i get this error on exactly four lines in the project. If I comment these lines out, the errors are gone and compilation is successful. Is there any fix for this problem?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7005801937","Type":"PullRequestEvent","CreatedAt":"2017-12-19T04:41:18","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25982","RelatedDescription":"Merged pull request \"Make GeneralizedTime correctly read down to the tick\" (#25982) at dotnet/corefx","RelatedBody":"TimeSpan.From* rounds to the millisecond, but the writer is 10000x as precise,\r\nso make the reader be as precise as the writer.\r\n\r\nFor future work around cryptographic timestamps the microseconds and\r\nhundred-nanoseconds might be relevant."},{"Id":"7005799434","Type":"PullRequestEvent","CreatedAt":"2017-12-19T04:40:05","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25920","RelatedDescription":"Merged pull request \"Bring SignedCms to CoreFx\" (#25920) at dotnet/corefx","RelatedBody":"With this change there become 4 builds of the Pkcs package:\r\n\r\n* netstandard\r\n  * Used by UWP\r\n  * EnvelopedCms: no\r\n  * SignedCms:\r\n    * RSA-PKCS1: yes\r\n    * RSA-PSS: limited verification, no signature\r\n    * ECDSA: yes\r\n    * DSA: no (not defined in netstandard20)\r\n    * The silent option to signing has no effect\r\n* netcoreapp-Windows_NT\r\n  * Used by .NET Core on Windows\r\n  * EnvelopedCms: yes (same as .NET Core 1.0 implementaiton)\r\n  * SignedCms:\r\n    * RSA-PKCS1: yes\r\n    * RSA-PSS: limited verification, no signature\r\n    * ECDSA: yes\r\n    * DSA: yes (FIPS-186-3)\r\n    * The silent option to signing is respected\r\n* netcoreapp\r\n  * Used by .NET Core on Linux, macOS\r\n  * EnvelopedCms: no\r\n  * SignedCms:\r\n    * RSA-PKCS1: yes\r\n    * RSA-PSS: limited verification, no signature\r\n    * ECDSA: yes\r\n    * DSA: yes (FIPS-186-3)\r\n    * The silent option to signing has no effect\r\n* netfx\r\n  * The current state of .NET Framework is\r\n  * EnvelopedCms: yes\r\n  * SignedCms:\r\n    * RSA-PKCS1: yes\r\n    * RSA-PSS: no\r\n    * ECDSA: no\r\n    * DSA: FIPS-186-2 only\r\n    * The silent option to signing is respected\r\n\r\nFor RSA-PSS, it is supported if all of\r\n* the platform supports it\r\n* MGF1 is used\r\n* the message digest algorithm, PSS digest algorithm, and MGF1 digest algorithm all match\r\n* the PSS salt size is the same as the digest size\r\n* the standard PSS trailer identifier (1) is used\r\n\r\nSince there is no API to indicate RSA-PKCS1 or RSA-PSS at signing time, only\r\nRSA-PKCS1 signatures can be generated for RSA keys.\r\n\r\nThe SignedCms implementation for .NET Core does the CMS message\r\npacking and unpacking directly (via the ASN.1 serializer), using the existing\r\nsystem-based cryptographic primitives where applicable.\r\n\r\nSeveral files are split-built netcoreapp vs netstandard to take advantage of netcoreapp Span-based API.\r\n\r\nRandom factoid:  The state of the tests (as of creating the PR) has (by itself) 59% line coverage of the ASN.1 serializer, 20% line coverage of the ASN.1 reader, and 42% line coverage of the ASN.1 writer. (Debug.Fail blocks and unhit exceptions are in the \"uncovered\" lines, they were not normalized away)\r\n\r\nReferences:\r\n  * [IETF RFC 5652](https://tools.ietf.org/html/rfc5652#section-5.1) (section 5.1: SignedData)\r\n\r\nFixes #14197."},{"Id":"7005799427","Type":"IssuesEvent","CreatedAt":"2017-12-19T04:40:04","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/14197","RelatedDescription":"Closed issue \"Add SignedCms support\" (#14197) at dotnet/corefx","RelatedBody":".NET Core currently lacks SignedCms support which is available in standard .NET Framework.\r\n\r\nhttp://stackoverflow.com/questions/40918396/signedcms-alternative-in-net-core/40954173#40954173"},{"Id":"7005424920","Type":"IssuesEvent","CreatedAt":"2017-12-19T02:02:48","Actor":"juepiezhongren","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25659","RelatedDescription":"Reopened issue \"Please consider ReusableTask and ReusableValueTask\" (#25659) at dotnet/corefx","RelatedBody":"What makes reference type important is its reusability, but Task as a reference type is not designed to be reused.\r\nConsidering REST Api or RPC, the most frequent functions are to be called millions of times from Internet requests, if task or valueTask would be able to be reused, the time for heap allocation or stack initialization(deep copy does cost time) could be saved at somewhat degree.\r\nReusable must take some disadvantage, but just like valueTask, it could bring some goodness."},{"Id":"7005423935","Type":"IssuesEvent","CreatedAt":"2017-12-19T02:02:26","Actor":"juepiezhongren","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25659","RelatedDescription":"Closed issue \"Please consider ReusableTask and ReusableValueTask\" (#25659) at dotnet/corefx","RelatedBody":"What makes reference type important is its reusability, but Task as a reference type is not designed to be reused.\r\nConsidering REST Api or RPC, the most frequent functions are to be called millions of times from Internet requests, if task or valueTask would be able to be reused, the time for heap allocation or stack initialization(deep copy does cost time) could be saved at somewhat degree.\r\nReusable must take some disadvantage, but just like valueTask, it could bring some goodness."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7005724615","Type":"PullRequestEvent","CreatedAt":"2017-12-19T04:04:11","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23813","RelatedDescription":"Closed pull request \"WIP: Reduce memory consumption of LongestCommonSubsequence\" (#23813) at dotnet/roslyn","RelatedBody":"* Reduce memory consumption of LongestCommonSubsequence\r\n\r\nChanged implementation of LongestCommonSubsequence to use a less memory-intensive algorithm.\r\nThe old algorithm allocated O(oldSequence.Length * newSequence.Length) of memory.\r\nThe new algorithm is O((oldSequence.Length + newSequence.Length) * (# of inserts and deletes))\r\nin both time and space.\r\n\r\nModified LongestCommonSubsequenceTest to use string compare.\r\n\r\nFixes issue #9497\r\n\r\n* Changed VArray to struct and other code review feedback changes\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7005722992","Type":"PullRequestEvent","CreatedAt":"2017-12-19T04:03:28","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23682","RelatedDescription":"Merged pull request \"Infrastructure: Source packages improvements\" (#23682) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nSource link is currently broken in repositories that have a package reference to source packages Roslyn produces (Microsoft.CodeAnalysis.Debugging, Microsoft.CodeAnalysis.PooledObjects). \r\n\r\nThis change enables such repository to generate source link mappings that point back to the Roslyn repository for files imported from the source packages. This is implemented by generating .props file in the source package with metadata needed to create the source link mapping. \r\n\r\nIn addition this change adds projects that validate that the source packages build correctly on their own, which prevents us from accidentally breaking them by adding dependency on types that are not available outside of Roslyn.\r\n\r\nComplementary to PR: https://github.com/dotnet/symreader-converter/pull/65\r\n\r\n### Bugs this fixes\r\n\r\n### Workarounds, if any\r\n\r\n### Risk\r\n\r\nSmall.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\n### How was the bug found?\r\n\r\nSwitching symreader-converter repository to source packages and validating source link.\r\n\r\n### Test documentation updated?\r\n\r\nn/a\r\n"},{"Id":"7005133768","Type":"IssuesEvent","CreatedAt":"2017-12-19T00:11:48","Actor":"JosefPihrt","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23855","RelatedDescription":"Opened issue \"\"Extract Interface ...\" does not preserve banner at the top of the file\" (#23855) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n// Copyright ...\r\n\r\npublic class Foo\r\n{\r\n    public void Bar()\r\n    {\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\n```csharp\r\n// Copyright ...\r\n\r\npublic interface IFoo\r\n{\r\n    void Bar();\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```csharp\r\npublic interface IFoo\r\n{\r\n    void Bar();\r\n}\r\n```\r\n"},{"Id":"7005085024","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:54:30","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23854","RelatedDescription":"Opened issue \"Add more asserts around GetConversion for incorrect language scenarios.\" (#23854) at dotnet/roslyn","RelatedBody":"https://github.com/dotnet/roslyn/pull/23840#discussion_r157597636\r\nhttps://github.com/dotnet/roslyn/pull/23840#discussion_r157598152"},{"Id":"7005006624","Type":"PullRequestEvent","CreatedAt":"2017-12-18T23:27:50","Actor":"chborl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23853","RelatedDescription":"Opened pull request \"Remove vs-integration tests from master-vs-deps branch\" (#23853) at dotnet/roslyn","RelatedBody":"The tests are dependent on 15.5 but this branch has been updated to 15.6 so the tests are now failing.  Removing until they are fixed.\r\n"},{"Id":"7004984149","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:20:31","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23852","RelatedDescription":"Opened issue \"CSharpOperationFactory.CreateBoundIndexerAccessOperation probably shouldn't create PropertyReferenceExpression node for properties that have MustCallMethodsDirectly == true\" (#23852) at dotnet/roslyn","RelatedBody":"IOperation test hook is hitting an Assert in Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder\r\n```\r\nTest 'Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.IndexedPropertyTests.StaticProperties' failed: Microsoft.CodeAnalysis.ThrowingTraceListener+DebugAssertFailureException : \r\nMicrosoft.CodeAnalysis.ThrowingTraceListener+DebugAssertFailureException: \r\n\r\n   at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage) in F:\\GitHub\\roslyn\\src\\Test\\Utilities\\Portable\\ThrowingTraceListener.cs:line 24\r\n   at System.Diagnostics.TraceListener.Fail(String message)\r\n   at System.Diagnostics.TraceInternal.Fail(String message)\r\n   at System.Diagnostics.Debug.Assert(Boolean condition)\r\n   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder(CSharpOperationFactory operationFactory, Binder binder, SyntaxNode syntax, ImmutableArray`1 arguments, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, Boolean expanded, ImmutableArray`1 argsToParamsOpt, Boolean invokedAsExtensionMethod) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Lowering\\LocalRewriter\\LocalRewriter_Call.cs:line 557\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(BoundNode boundNode, Binder binder, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, ImmutableArray`1 boundArguments, ImmutableArray`1 argumentNamesOpt, ImmutableArray`1 argumentsToParametersOpt, ImmutableArray`1 argumentRefKindsOpt, ImmutableArray`1 parameters, Boolean expanded, SyntaxNode invocationSyntax, Boolean invokedAsExtensionMethod) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory_Methods.cs:line 151\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.<>c__DisplayClass13_0.<CreateBoundIndexerAccessOperation>b__0() in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory.cs:line 415\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.CodeAnalysis.Operations.LazyPropertyReferenceExpression.get_ArgumentsImpl() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Generated\\Operations.xml.Generated.cs:line 4166\r\n   at Microsoft.CodeAnalysis.Operations.BasePropertyReferenceExpression.get_Arguments() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Generated\\Operations.xml.Generated.cs:line 4114\r\n   at Microsoft.CodeAnalysis.Operations.BasePropertyReferenceExpression.<get_Children>d__6.MoveNext() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Generated\\Operations.xml.Generated.cs:line 4098\r\n   at Microsoft.CodeAnalysis.Operations.OperationExtensions.<Descendants>d__3.MoveNext() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Operations\\OperationExtensions.cs:line 77\r\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(CSharpSyntaxNode node, CancellationToken cancellationToken) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\MemberSemanticModel.cs:line 1002\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetOperationCore(SyntaxNode node, CancellationToken cancellationToken) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\CSharpSemanticModel.cs:line 469\r\n   at Microsoft.CodeAnalysis.SemanticModel.GetOperation(SyntaxNode node, CancellationToken cancellationToken) in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SemanticModel.cs:line 76\r\n\r\n\tF:\\GitHub\\roslyn\\src\\Test\\Utilities\\Portable\\ThrowingTraceListener.cs(24,0): at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)\r\n\tat System.Diagnostics.TraceListener.Fail(String message)\r\n\tat System.Diagnostics.TraceInternal.Fail(String message)\r\n\tat System.Diagnostics.Debug.Assert(Boolean condition, String message)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SemanticModel.cs(81,0): at Microsoft.CodeAnalysis.SemanticModel.GetOperation(SyntaxNode node, CancellationToken cancellationToken)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Operations\\Operation.cs(277,0): at Microsoft.CodeAnalysis.Operation.SearchParentOperation()\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Operations\\Operation.cs(47,0): at Microsoft.CodeAnalysis.Operation.get_Parent()\r\n\tF:\\GitHub\\roslyn\\src\\Test\\Utilities\\Portable\\Compilation\\CompilationExtensions.cs(290,0): at Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.ValidateIOperations(Func`1 createCompilation)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\CSharp\\CSharpTestBase.cs(512,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateCompilation(IEnumerable`1 trees, IEnumerable`1 references, CSharpCompilationOptions options, String assemblyName)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\CSharp\\CSharpTestBase.cs(427,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateStandardCompilation(IEnumerable`1 trees, IEnumerable`1 references, CSharpCompilationOptions options, String assemblyName)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\CSharp\\CSharpTestBase.cs(366,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateStandardCompilation(String text, IEnumerable`1 references, CSharpCompilationOptions options, CSharpParseOptions parseOptions, String assemblyName, String sourceFileName)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Test\\Symbol\\Symbols\\IndexedPropertyTests.cs(1218,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.IndexedPropertyTests.StaticProperties()\r\n```\r\n\r\nIgnoring the assert \r\n```\r\n            Debug.Assert(((methodOrIndexer.Kind == SymbolKind.Property) && optionalParametersMethod.IsAccessor()) ||\r\n                (object)methodOrIndexer == optionalParametersMethod);\r\n```\r\ndoesn't cause a crash and I am going to adjust the assert condition for now. However, we need to follow up with verification whether the tree shape is correct in this scenario. \r\n\r\nThis is an error scenario and, in general, it is probably not safe to assume that an accessor signature is going to \"align\" with property signature when property.MustCallMethodsDirectly == true, ```optionalParametersMethod.IsAccessor()``` is false in this case and causes the assert to fire. Therefore, Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateBoundIndexerAccessOperation probably shouldn't create PropertyReferenceExpression node for properties that have MustCallMethodsDirectly == true "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7005741078","Type":"PullRequestEvent","CreatedAt":"2017-12-19T04:12:01","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5133","RelatedDescription":"Opened pull request \"Package build\" (#5133) at dotnet/corert","RelatedBody":"This adds `build-packages` to the standard build command. \r\nUntil #4983 and #5123 CoreRT has only supported a single NuGet package, referencing projects directly, which wouldn't interfere with our build and publish pipeline (any build errors would show up earlier).\r\nHowever, with the ILCompiler (and others soon, hopefully) being added, the process to produce them would ideally be integrated into the overall build process.\r\nThis would mimic CoreCLR and CoreFX and correctly mark any failures in building NuGet packages\r\nas build failures. "},{"Id":"7005609723","Type":"PullRequestEvent","CreatedAt":"2017-12-19T03:15:13","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5132","RelatedDescription":"Merged pull request \"Package Build Fix: Add Project reference to meta package\" (#5132) at dotnet/corert","RelatedBody":"Fixes package build crashes due to \"runtime.json\" not being found.\r\n\r\n@jkotas  - turns out the ProjectReferences are what makes NuGet automatically generate a runtime.json file"},{"Id":"7005334752","Type":"PullRequestEvent","CreatedAt":"2017-12-19T01:27:56","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5132","RelatedDescription":"Opened pull request \"Add Project reference to meta package\" (#5132) at dotnet/corert","RelatedBody":"Fixes build crashes due to \"runtime.json\" not being found.\r\n\r\n@jkotas  - turns out the ProjectReferences are what makes NuGet automatically generate a runtime.json file"},{"Id":"7003406030","Type":"PullRequestEvent","CreatedAt":"2017-12-18T17:05:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5130","RelatedDescription":"Merged pull request \"Take System.Text.RegularExpressions from UAPAOT\" (#5130) at dotnet/corert","RelatedBody":"The netcore version relies on ILGenerator."},{"Id":"7002926971","Type":"PullRequestEvent","CreatedAt":"2017-12-18T15:37:43","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5131","RelatedDescription":"Opened pull request \"Inline access to non-GC static fields\" (#5131) at dotnet/corert","RelatedBody":"An alternate approach to what was attempted in #3962 (and dotnet/coreclr#12420), this time leveraging preexisting infrastructure in RyuJIT built for accessing RVA static fields. This is limited to non-GC statics, since that's what RyuJIT has.\r\n\r\nIt feels a bit more natural to how JitInterface is structured (e.g. RyuJIT is calling `initClass` to eliminate the need to do the cctor check in some cases). If this is something we would want to take further, the next steps would be:\r\n\r\n1. Update `initClass` to allow generating the inline cctor check (we currently call the ReadyToRun helper to get non-GC static base - this change doesn't affect that).\r\n2. Change `CORINFO_FIELD_INFO` - replace `CORINFO_CONST_LOOKUP fieldLookup` with `CORINFO_LOOKUP fieldLookup` so that we can also do this from shared code.\r\n3. Some updates to handle GC statics and thread statics that I haven't thought about too much yet.\r\n\r\nI don't have plans to do the next steps anytime soon though.\r\n\r\nThe changes to the generated code look like this:\r\n\r\n```csharp\r\ninternal class Program\r\n{\r\n    static int X;\r\n    static int Y;\r\n\r\n    private static int Main()\r\n    {\r\n        return X + Y;\r\n    }\r\n}\r\n```\r\n\r\nBefore:\r\n\r\n```asm\r\ncall        __GetNonGCStaticBase_repro_Program (07FF65ADE2FCCh)  \r\nmov         edx,dword ptr [rax]  \r\nadd         edx,dword ptr [rax+4]  \r\nmov         eax,edx  \r\n```\r\n\r\nAfter:\r\n\r\n```asm\r\nmov         eax,dword ptr [repro_Program::__NONGCSTATICS (07FF66540BBD8h)]  \r\nadd         eax,dword ptr [repro_Program::__NONGCSTATICS+4h (07FF66540BBDCh)]  \r\n```"},{"Id":"7001939953","Type":"PullRequestEvent","CreatedAt":"2017-12-18T12:12:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5130","RelatedDescription":"Opened pull request \"Take System.Text.RegularExpressions from UAPAOT\" (#5130) at dotnet/corert","RelatedBody":"The netcore version relies on ILGenerator."},{"Id":"7001911478","Type":"PullRequestEvent","CreatedAt":"2017-12-18T12:05:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5129","RelatedDescription":"Opened pull request \"Add AnalysisBasedMetadataManager\" (#5129) at dotnet/corert","RelatedBody":"(Split into several self-contained commits for reviewability.)\r\n\r\nThis is making progress towards a pluggable metadata generation strategy. After this change, we no longer compute reflection metadata twice in optimized builds (once during the scanning, the second time during the compilation). Instead, the scanner computes the full metadata closure, and the compilation phase uses it to drive code generation and metadata generation. We no longer suffer from the problems caused by things getting inlined and becoming no longer reflectable.\r\n\r\nThe general design goals were:\r\n\r\n* Support a mode where the reflectable closure is computed based on what got compiled. This has two flavors:\r\n  * The closure gets computed by the IL scanner (to provide a deterministic closure that doesn't depend on what things got optimized away)\r\n  * The closure gets computed based on what the codegen backend compiled. This is so that we can have unoptimized builds that don't depend on the IL scanner.\r\n* Support a mode where reflectable closure is provided by an external tool (e.g. the Project N dependency reducer).\r\n* Support a mode where nothing is reflectable. This is to compile things like mrt100_app.dll or to do experiments.\r\n* Support a mode where reflectable closure and the metadata blob are computed ahead of time (Project X).\r\n\r\nThe design relies on multiple metadata managers that the dependency nodes (such as `MethodCodeNode`, or `EETypeNode`) call into to get additional dependencies. Those dependencies depend on what the metadata manager is doing and can be limited to just ensuring we have invoke stubs (Project X), to ensuring we have custom attributes, metadata for owning type and module, etc.\r\n\r\nThe resulting class hierarchy is:\r\n* `MetadataManager` - the base class for everything; handling things that are common.\r\n  * `EmptyMetadataManager` - this one does nothing.\r\n  * `PrecomputedMetadataManager` - for Project X.\r\n  * `GeneratingMetadataManager` - a metadata manager that generates reflection metadata and invoke stubs\r\n    * `UsageBasedMetadataManager` - this one collects necessary metadata based on usage. It uses some supporting node types (like `TypeMetadataNode`) to track additional dependencies of the metadata itself. This enforces invariants like usable custom attribute metadata, metadata for containing types of nested types, etc.)\r\n    * `AnalysisBasedMetadataManager` - this one provides compilation roots based on the things that are required to be reflectable, and uses an ahead of time determined set of things that need metadata. This one can be produced from a `UsageBasedMetadataManager` (for the \"IL scanner before compilation\" scenario), or could be instantiated from data provided by an external tool.\r\n\r\nThere is more work left, but this seems like a reasonable checkpoint. Examples of leftover things is handling of fields (now that we have a scanner, we can have a \"precise\" mode for tracking reflection field usage instead of blanket policy that says all fields are reflectable; we'll still need to support the fallback logic for \"no scanner\" scenarios, but optimized scenarios can get some size on disk benefits)."},{"Id":"6999307249","Type":"PullRequestEvent","CreatedAt":"2017-12-17T17:02:26","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5121","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#5121) at dotnet/corert","RelatedBody":"More complicated than usual. This picks up:\r\n\r\n* JitInterface changes\r\n* dotnet/coreclr#15475\r\n\r\nWhen Cbrt/Asinh/Acosh/Atanh is added, we'll want to uncomment the intrinsic recognition."},{"Id":"6997746627","Type":"PullRequestEvent","CreatedAt":"2017-12-16T18:17:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5128","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5128) at dotnet/corert","RelatedBody":""},{"Id":"6997746267","Type":"PullRequestEvent","CreatedAt":"2017-12-16T18:16:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5128","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5128) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7005401790","Type":"PullRequestEvent","CreatedAt":"2017-12-19T01:54:04","Actor":"mishra14","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1826","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4736 into sdk\" (#1826) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4736 into sdk master branch"},{"Id":"7005032246","Type":"PullRequestEvent","CreatedAt":"2017-12-18T23:36:08","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1826","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4736 into sdk\" (#1826) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4736 into sdk master branch"},{"Id":"7004854404","Type":"PullRequestEvent","CreatedAt":"2017-12-18T22:42:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1820","RelatedDescription":"Merged pull request \"Fix dogfood script\" (#1820) at dotnet/sdk","RelatedBody":"There were two issues: \r\n\r\n1. The CustomAfterMicrosoftCommonTargets is no longer needed and causes duplicate import warning/errors.\r\n2. MicrosoftNETBuildExtensionsTargets was not being set to the correct file (it should not be the variant with -ver)."},{"Id":"7004172771","Type":"PullRequestEvent","CreatedAt":"2017-12-18T19:55:43","Actor":"mishra14","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1825","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4733 into sdk\" (#1825) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4733 into sdk master branch"},{"Id":"7003925896","Type":"PullRequestEvent","CreatedAt":"2017-12-18T18:59:32","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1825","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4733 into sdk\" (#1825) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4733 into sdk master branch"},{"Id":"7000898342","Type":"PullRequestEvent","CreatedAt":"2017-12-18T08:00:51","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1824","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1824) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20171218-080050\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20171218-080050 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6999710615","Type":"IssuesEvent","CreatedAt":"2017-12-17T21:42:06","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1823","RelatedDescription":"Opened issue \"[tools] Pack experience for portable app\" (#1823) at dotnet/sdk","RelatedBody":"Producer add a property in project file to indicate this project is a tool\r\nRun pack target (`dotnet msbuild /t:pack` or `dotnet pack`)\r\nThere is a tool nupkg with correct layout and setting file and ready to publish to NuGet and use"},{"Id":"6992644494","Type":"PullRequestEvent","CreatedAt":"2017-12-15T08:00:46","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1822","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1822) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20171215-080045\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20171215-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6992199981","Type":"PullRequestEvent","CreatedAt":"2017-12-15T05:07:19","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1821","RelatedDescription":"Opened pull request \" Suppress assets messages for Clean target.\" (#1821) at dotnet/sdk","RelatedBody":"Suppress assets messages for Clean target.\r\n\r\nThis commit ensures that messages from `project.assets.json` aren't logged for\r\nthe `Clean` target.  If a project is cleaned that has diagnostic messages\r\nstored from a previous restore operation, the Clean target would previously\r\nlog the messages via the `ReportAssetsLogMessages` target.\r\n\r\nSince a clean operation does not perform a restore, this is confusing to users.\r\nThe fix is to set the `EmitAssetsLogMessages` property to `false` for the\r\n`Clean` target.\r\n\r\nFixes dotnet/cli#8027."},{"Id":"6991568421","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:44:06","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1807","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4706 into sdk\" (#1807) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4706 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":14,"RawContent":null},{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":29,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2017-12-19T05:30:28.9839487Z","RunDurationInMilliseconds":9267}