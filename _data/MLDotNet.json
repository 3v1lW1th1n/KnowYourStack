{"Data":{"GitHub":{"Issues":[{"Id":"391992011","IsPullRequest":true,"CreatedAt":"2018-12-18T04:28:58","Actor":"TomFinley","Number":"1902","RawContent":null,"Title":"Internalize RoleMappedSchema and implications thereof","State":"open","Body":"Internalization of everything related to role mapped schema, which includes schema-bindable mappers, much of the internal infrasturcture of evaluators, and so forth. As usual the commits are structured in such a way as only one \"group\" of code gets internalized at a time, with only the current last commit internalizing `RoleMappedSchema` itself.","Url":"https://github.com/dotnet/machinelearning/pull/1902","RelatedDescription":"Open PR \"Internalize RoleMappedSchema and implications thereof\" (#1902)"},{"Id":"391988794","IsPullRequest":true,"CreatedAt":"2018-12-18T04:08:10","Actor":"najeeb-kazmi","Number":"1901","RawContent":null,"Title":"Public API for remaining learners","State":"open","Body":"Fixes #1703 \r\n\r\nPredictors covered in this PR:\r\n- `EnsemblePredictorBase`\r\n- `EnsembleDistributionPredictor`\r\n- `EnsemblePredictor`\r\n- `EnsembleMultiClassPredictor`\r\n- `GamPredictorBase`\r\n- `BinaryClassificationGamPredictor`\r\n- `RegressionGamPredictor`\r\n- `PcaPredictor`\r\n- `FieldAwareFactorizationmachinePredictor`\r\n- MultiClassLogisticRegressionPredictor`\r\n- `MultiClassNaiveBayesPredictor`\r\n- `OvaPredictor`\r\n- `PkpdPredictor`\r\n- `RandomPredictor`\r\n- `PriorPredictor`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1901","RelatedDescription":"Open PR \"Public API for remaining learners\" (#1901)"},{"Id":"391955950","IsPullRequest":true,"CreatedAt":"2018-12-18T01:14:40","Actor":"codemzs","Number":"1900","RawContent":null,"Title":"Forecasting model framework for time series.","State":"open","Body":"This PR introduces forecasting framework/interface for time series. It allows the following:\r\n1. Train forecasting model from an IDataView.\r\n2. Update the model with new observation using an IDataView.\r\n3. Forecast values up to a certain horizon.\r\n4. Checkpoint the model to disk.\r\n5. Load a model from disk.\r\n\r\nfixes #929\r\n\r\n*I'm not planning to check-in this PR without verifying the benchmark numbers from SSA forecasting algorithm* \r\n\r\nCC: @markusweimer ","Url":"https://github.com/dotnet/machinelearning/pull/1900","RelatedDescription":"Open PR \"Forecasting model framework for time series.\" (#1900)"},{"Id":"391946894","IsPullRequest":false,"CreatedAt":"2018-12-18T00:30:10","Actor":"markusweimer","Number":"1899","RawContent":null,"Title":"Improve discoverability of components not in the main nuget","State":"open","Body":"ML.NET is split into multiple nugets, mostly motivated by the dependency structure of the components: Things that have native code are not in the main nuget, neither are things that pull in other OSS packages such as LightGBM or TensorFlow.\r\n\r\nThe benefit of this approach is that it allows apps to depend on the smallest possible and most portable subset of ML.NET with ease.\r\n\r\nThe major downside is that components in this other nugets aren't easily discovered, as they will only show up on `MLContext` after they have been installed. And there is no way to discover that they could be installed from e.g. IntelliSense.\r\n\r\nLet's use this issue to discuss ideas and strategies to improve this situation.","Url":"https://github.com/dotnet/machinelearning/issues/1899","RelatedDescription":"Open issue \"Improve discoverability of components not in the main nuget\" (#1899)"},{"Id":"390911635","IsPullRequest":true,"CreatedAt":"2018-12-18T00:02:10","Actor":"montebhoover","Number":"1877","RawContent":null,"Title":"Update instructions for adding to the EntryPoint catalog.","State":"closed","Body":"Update instructions for adding to the EntryPoint catalog.","Url":"https://github.com/dotnet/machinelearning/pull/1877","RelatedDescription":"Closed or merged PR \"Update instructions for adding to the EntryPoint catalog.\" (#1877)"},{"Id":"391937986","IsPullRequest":true,"CreatedAt":"2018-12-17T23:49:35","Actor":"yaeldekel","Number":"1898","RawContent":null,"Title":"Remove Legacy dependency from Microsoft.ML.EntryPoints project","State":"open","Body":"The TrainTest, CV and OVA macros use the pipeline API. This PR removes the dependency on pipeline API by creating the EntryPointNodes directly.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1898","RelatedDescription":"Open PR \"Remove Legacy dependency from Microsoft.ML.EntryPoints project\" (#1898)"},{"Id":"391933916","IsPullRequest":true,"CreatedAt":"2018-12-17T23:32:32","Actor":"abgoswam","Number":"1897","RawContent":null,"Title":"Fix copyright for Microsoft.ML.TensorFlow.Redist","State":"open","Body":"Deleted extra space in copyright\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1897","RelatedDescription":"Open PR \"Fix copyright for Microsoft.ML.TensorFlow.Redist\" (#1897)"},{"Id":"391931229","IsPullRequest":true,"CreatedAt":"2018-12-17T23:21:20","Actor":"Ivanidzo4ka","Number":"1896","RawContent":null,"Title":"Use seed specified for column in PcaTransform","State":"open","Body":"Fixing this elite bug #1337 ","Url":"https://github.com/dotnet/machinelearning/pull/1896","RelatedDescription":"Open PR \"Use seed specified for column in PcaTransform\" (#1896)"},{"Id":"391930971","IsPullRequest":false,"CreatedAt":"2018-12-17T23:20:20","Actor":"Anipik","Number":"1895","RawContent":null,"Title":"MurmurHash code slower on Netcoreapp3.0","State":"open","Body":"MurmurHash function is slower on netcoreapp3.0 as compared netstandard. This is most probably due to codegen.\r\nThe numbers are\r\nsdk = 3.0.100-preview-009841\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n  Job-GLYGMU : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release-Intrinsics  Toolchain=netcoreapp3.0  MaxIterationCount=20  \r\nWarmupCount=1  \r\n\r\n```\r\n|              Method |     Mean |    Error |   StdDev | Extra Metric |\r\n|-------------------- |---------:|---------:|---------:|-------------:|\r\n| MurmurHashBenchmark | 231.0 ns | 4.122 ns | 3.654 ns |            - |\r\n\r\n\r\n\r\n``` ini\r\n sdk version 2.1.401\r\n\r\n```\r\n|              Method |     Mean |     Error |    StdDev | Extra Metric |\r\n|-------------------- |---------:|----------:|----------:|-------------:|\r\n| MurmurHashBenchmark | 197.8 ns | 0.9518 ns | 0.8438 ns |            - |\r\n\r\n\r\nthe associated code is \r\n```C#\r\nchar[] input2;\r\nuint arg;\r\n\r\n[GlobalSetup(Target = nameof(MurmurHashBenchmark))]\r\npublic void setup2()\r\n{\r\n    int min = 0;\r\n    int max = 100;\r\n    Random randNum = new Random();\r\n    arg = (uint)randNum.Next(min, max);\r\n\r\n    input2 = new char[max];\r\n\r\n    for (int i = 0; i < input2.Length; i++)\r\n    {\r\n        input2[i] = (char)randNum.Next(min, 128);\r\n    }\r\n\r\n}\r\n\r\n[Benchmark]\r\npublic void MurmurHashBenchmark()\r\n{\r\n    ReadOnlySpan<char> _t = input2.AsSpan();\r\n    MurmurHash(arg, _t);\r\n}\r\n\r\npublic void MurmurHash(uint hash, ReadOnlySpan<char> span)\r\n{\r\n    ulong cur = 0;\r\n    int bits = 0;\r\n    for (int ich = 0; ich < span.Length; ich++)\r\n    {\r\n        uint ch = span[ich];\r\n        cur |= ch << bits;\r\n        bits += 8;\r\n\r\n        if (bits >= 32)\r\n        {\r\n            hash = MurmurRound(hash, (uint)cur);\r\n            cur = cur >> 32;\r\n            bits -= 32;\r\n        }\r\n    }\r\n}\r\n\r\npublic static uint MurmurRound(uint hash, uint chunk)\r\n{\r\n    chunk *= 0xCC9E2D51;\r\n    chunk = Rotate(chunk, 15);\r\n    chunk *= 0x1B873593;\r\n\r\n    hash ^= chunk;\r\n    hash = Rotate(hash, 13);\r\n    hash *= 5;\r\n    hash += 0xE6546B64;\r\n\r\n    return hash;\r\n}\r\n\r\nprivate static uint Rotate(uint x, int r)\r\n{\r\n    return (x << r) | (x >> (32 - r));\r\n}\r\n\r\n```\r\n@danmosemsft do I need to shorten the code more in order to open the codegen issue in coreclr ?\r\n\r\ncc @danmosemsft @tannergooding @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1895","RelatedDescription":"Open issue \"MurmurHash code slower on Netcoreapp3.0\" (#1895)"},{"Id":"391930765","IsPullRequest":true,"CreatedAt":"2018-12-17T23:19:29","Actor":"Zruty0","Number":"1894","RawContent":null,"Title":"Making Schema implement ISchema explicitly","State":"open","Body":"Addresses #1500 \r\n\r\nMade Schema implement ISchema explicitly. Removed all calls to the ISchema inteface when Schema is accessed, with the exception of TryGetColumnIndex, which was made internal.","Url":"https://github.com/dotnet/machinelearning/pull/1894","RelatedDescription":"Open PR \"Making Schema implement ISchema explicitly\" (#1894)"},{"Id":"391912276","IsPullRequest":true,"CreatedAt":"2018-12-17T23:01:28","Actor":"Zruty0","Number":"1893","RawContent":null,"Title":"Internalizing MetadataUtils","State":"closed","Body":"Contributes to #1500 \r\n\r\nMoved most of MetadataUtils to internal, except some public methods to access common metadata.\r\nRemoved some methods that are now trivial.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1893","RelatedDescription":"Closed or merged PR \"Internalizing MetadataUtils\" (#1893)"},{"Id":"391890511","IsPullRequest":true,"CreatedAt":"2018-12-17T21:09:17","Actor":"Ivanidzo4ka","Number":"1892","RawContent":null,"Title":"Fix hash join transform.","State":"open","Body":"Fixes #1891 ","Url":"https://github.com/dotnet/machinelearning/pull/1892","RelatedDescription":"Open PR \"Fix hash join transform.\" (#1892)"},{"Id":"391890300","IsPullRequest":false,"CreatedAt":"2018-12-17T21:08:38","Actor":"Ivanidzo4ka","Number":"1891","RawContent":null,"Title":"Hash join fails with bad image exception.","State":"open","Body":"Add this test:\r\n```\r\n        [Fact]\r\n        public void EntryPointHashJoinCountTable()\r\n        {\r\n            TestEntryPointPipelineRoutine(GetDataPath(\"breast-cancer.txt\"), \"col=Text:TX:1-9 col=Label:0\",\r\n                new[]\r\n                {\r\n                    \"Transforms.HashConverter\",\r\n                },\r\n                new[]\r\n                {\r\n                    @\"'Column': [\r\n                      {\r\n                        'Name': 'Temp',\r\n                        'Src': 'Text',\r\n                        'CustomSlotMap': '0,1;2,3,4,5'\r\n                      }\r\n                      ]\",\r\n                });\r\n        }\r\n```\r\nyou get following exception.\r\n```\r\nMessage: System.InvalidOperationException : Splitter/consolidator worker encountered exception while consuming source data---- \r\nSystem.BadImageFormatException : An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1891","RelatedDescription":"Open issue \"Hash join fails with bad image exception.\" (#1891)"},{"Id":"390907360","IsPullRequest":true,"CreatedAt":"2018-12-17T19:49:04","Actor":"abgoswam","Number":"1876","RawContent":null,"Title":"Supervised Bin Normalizer","State":"closed","Body":"Towards #819 \r\n\r\n- enabled  `NormalizerMode.SupervisedBinning` \r\n- added tests","Url":"https://github.com/dotnet/machinelearning/pull/1876","RelatedDescription":"Closed or merged PR \"Supervised Bin Normalizer\" (#1876)"},{"Id":"391516099","IsPullRequest":true,"CreatedAt":"2018-12-17T18:31:46","Actor":"wschin","Number":"1887","RawContent":null,"Title":"Remove ISchema in FeatureContributionCalculationTransform","State":"closed","Body":"As title. It's a part of #1501. This change is not difficult because the output schema only contains one column, which is per feature contribution.","Url":"https://github.com/dotnet/machinelearning/pull/1887","RelatedDescription":"Closed or merged PR \"Remove ISchema in FeatureContributionCalculationTransform\" (#1887)"},{"Id":"391010826","IsPullRequest":true,"CreatedAt":"2018-12-17T18:14:43","Actor":"wschin","Number":"1879","RawContent":null,"Title":"Bindings in ChooseColumnsByIndexTransform not ISchema","State":"closed","Body":"This PR is a part of #1501. We refactorize the `Binding` in `ChooseColumnsByIndexTransform` by making it not an `ISchema` but still maintaining necessary functionalities for connecting input and output. For the functionalities remained, please see the non-private member functions of `Bindings`. Some comments are added for a better readability.","Url":"https://github.com/dotnet/machinelearning/pull/1879","RelatedDescription":"Closed or merged PR \"Bindings in ChooseColumnsByIndexTransform not ISchema\" (#1879)"},{"Id":"391296306","IsPullRequest":true,"CreatedAt":"2018-12-17T17:52:59","Actor":"Ivanidzo4ka","Number":"1885","RawContent":null,"Title":"Provide seed parameter for TrainTest routine","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/1635","Url":"https://github.com/dotnet/machinelearning/pull/1885","RelatedDescription":"Closed or merged PR \"Provide seed parameter for TrainTest routine\" (#1885)"},{"Id":"391804837","IsPullRequest":false,"CreatedAt":"2018-12-17T17:01:06","Actor":"wschin","Number":"1890","RawContent":null,"Title":"ONNX Exporter Needs Examples","State":"open","Body":"As title. We currently don't have a user-facing example.","Url":"https://github.com/dotnet/machinelearning/issues/1890","RelatedDescription":"Open issue \"ONNX Exporter Needs Examples\" (#1890)"},{"Id":"391525280","IsPullRequest":true,"CreatedAt":"2018-12-17T01:03:30","Actor":"Ivanidzo4ka","Number":"1889","RawContent":null,"Title":"Bruteforce implementation for KNN.","State":"open","Body":"All API plumbing for KNN and their dumb implementation.\r\n\r\n- [ ] Add K-D trees.\r\n\r\n- [ ] Add Ball trees.\r\n\r\n- [ ] Figure out what to do during scoring if nothing in radius. (for radius search instead of K neighbors search)","Url":"https://github.com/dotnet/machinelearning/pull/1889","RelatedDescription":"Open PR \"Bruteforce implementation for KNN.\" (#1889)"},{"Id":"391519677","IsPullRequest":true,"CreatedAt":"2018-12-17T00:04:22","Actor":"dhilmathy","Number":"1888","RawContent":null,"Title":"Updated with correct tags for image reference","State":"open","Body":"Updated with correct tags for image. `<a>` to `<image>`\r\n\r\nFixes #1783\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1888","RelatedDescription":"Open PR \"Updated with correct tags for image reference\" (#1888)"},{"Id":"391422629","IsPullRequest":false,"CreatedAt":"2018-12-16T00:09:13","Actor":"mihaar","Number":"1886","RawContent":null,"Title":"ML.NET and Unity","State":"open","Body":"### System information\r\n\r\n- **win 10**:\r\n- **.NET Version (  .NET Global Assembly Cache Utility. Version 4.0.30319.0)**: \r\n\r\n### Issue\r\nUnity editor reports two errors:\r\n1.Assembly 'Library/ScriptAssemblies/Assembly-CSharp.dll' will not be loaded due to errors:\r\nReference has errors 'MLAICore'.\r\n2.Assembly 'Assets/Plugins/MLAICore.dll' will not be loaded due to errors:\r\nUnable to resolve reference 'Microsoft.ML.Data'. Is the assembly missing or incompatible with the current platform?\r\n\r\n- **What did you do?**\r\nI have made an API that loads model.zip file and predicts a nr given some input values(It is almost exactly as your taxi fare example). Through commenting out lines and rebuilding my api I deduced that  if I put this code: MLContext ml = new MLContext(seed: 0); into any of my api methods I get this error when importing the api into unity.\r\n- **What happened?**\r\n It all works great but when I import this api into Unity, the unity editor returns an error.\r\n- **What did you expect?**\r\nSince unity has now support for .net 2.0 apis and frameworks 4+ I was hoping ML.Net would work in that environment. Any sugestions would be most welcom.\r\n[sampleUnityProject.zip](https://github.com/dotnet/machinelearning/files/2683139/sampleUnityProject.zip)\r\n[exampleDotnetApiProject.zip](https://github.com/dotnet/machinelearning/files/2683142/exampleDotnetApiProject.zip)\r\n[https://stackoverflow.com/questions/53781312/ml-net-in-unity/53781387#comment94434358_53781312](url)\r\n\r\n\r\n### Source code / logs\r\n`using System;\r\nusing Microsoft.ML;\r\nnamespace MLAICore\r\n{\r\n    public class Class1\r\n    {\r\n        public static string SayHello()\r\n        {\r\n            MLContext ml = new MLContext(seed: 0);//if I comment out this line code compiles in unity\r\n            return \"hello from core ML\";                    //and i get this response, if I live it as is =>err\r\n        }\r\n    }\r\n}`\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1886","RelatedDescription":"Open issue \"ML.NET and Unity\" (#1886)"},{"Id":"391284742","IsPullRequest":true,"CreatedAt":"2018-12-14T21:25:18","Actor":"sfilipi","Number":"1884","RawContent":null,"Title":"[WIP PR won't merge] RE-creating the entry point test in the new API format, because it is…","State":"open","Body":"This PR has is being used to investigate the failure of the test described in: #1726\r\n\r\nI will not merge it to master, unless i convert this to fixing the issue encountered.","Url":"https://github.com/dotnet/machinelearning/pull/1884","RelatedDescription":"Open PR \"[WIP PR won't merge] RE-creating the entry point test in the new API format, because it is…\" (#1884)"},{"Id":"391216800","IsPullRequest":true,"CreatedAt":"2018-12-14T19:10:36","Actor":"Anipik","Number":"1883","RawContent":null,"Title":"Loading the label for binary classfication as BL instead of R4","State":"closed","Body":"Kmeans Benchmark was broken because Binary classfiers expected the label column to be binary but we were loading it as R4\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1883","RelatedDescription":"Closed or merged PR \"Loading the label for binary classfication as BL instead of R4\" (#1883)"},{"Id":"391215774","IsPullRequest":false,"CreatedAt":"2018-12-14T18:19:49","Actor":"Anipik","Number":"1882","RawContent":null,"Title":"Regression due to removal of autoCache","State":"open","Body":"The Auto-cache was removed in https://github.com/dotnet/machinelearning/commit/435a63b9db7464ec0400eb4be8ecc362f0d33dcc\r\n\r\nI added new benchmark https://github.com/dotnet/machinelearning/pull/1855\r\nBefore the change the time taken by this benchmark was 2.8sec (after converting to api version and making label as key instead of R4)\r\n\r\nAfter the removal of the cache The time went upto 10s. But after the adding the cache check point me and @wschin was able to reduce it to 3.8s which is still regressed from 2.8s.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1882","RelatedDescription":"Open issue \"Regression due to removal of autoCache\" (#1882)"},{"Id":"390905670","IsPullRequest":true,"CreatedAt":"2018-12-14T18:18:00","Actor":"Ivanidzo4ka","Number":"1875","RawContent":null,"Title":"Support R4 label for binary trainers","State":"closed","Body":"fix #1874 ","Url":"https://github.com/dotnet/machinelearning/pull/1875","RelatedDescription":"Closed or merged PR \"Support R4 label for binary trainers\" (#1875)"},{"Id":"390904625","IsPullRequest":false,"CreatedAt":"2018-12-14T18:17:40","Actor":"Ivanidzo4ka","Number":"1874","RawContent":null,"Title":"Our binary learners estimators work only on top of boolean label","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/dfe9f3ad36cf382516276ad902a5f89a5f21c7e7/test/Microsoft.ML.Benchmarks/KMeansAndLogisticRegressionBench.cs\r\nFail currently because R4 is not supported.","Url":"https://github.com/dotnet/machinelearning/issues/1874","RelatedDescription":"Closed issue \"Our binary learners estimators work only on top of boolean label\" (#1874)"},{"Id":"391186727","IsPullRequest":false,"CreatedAt":"2018-12-14T16:48:43","Actor":"mgolois","Number":"1881","RawContent":null,"Title":"Multi classification - Probability","State":"open","Body":"Hello,\r\nI have an application that use using ml.net multiclassification trainer to predict a category. However, it seems as though we remove the TryGetScoreLabelNames() method from the library. Basically, the application would like to output as well how confident (in percentage) is the predicted label. How can I achieve that in ML.NET 0.8?","Url":"https://github.com/dotnet/machinelearning/issues/1881","RelatedDescription":"Open issue \"Multi classification - Probability\" (#1881)"},{"Id":"391124866","IsPullRequest":false,"CreatedAt":"2018-12-14T14:07:14","Actor":"turowicz","Number":"1880","RawContent":null,"Title":"GPU-powered KNN","State":"open","Body":"I'm aware that there is an issue already #1712, I'm just looking for guidance. I've migrated the dlib based face recognition to a c# project using DlibDotNet project. The final missing piece is a fast way of processing 1000s of candidates for a closest match.\r\n\r\nCan anyone point me in the right direction?","Url":"https://github.com/dotnet/machinelearning/issues/1880","RelatedDescription":"Open issue \"GPU-powered KNN\" (#1880)"},{"Id":"390916542","IsPullRequest":true,"CreatedAt":"2018-12-14T00:23:35","Actor":"sfilipi","Number":"1878","RawContent":null,"Title":"[WIP] Schema based text loader","State":"open","Body":"Initial work to address #561. \r\n\r\nIt moves the current reflection-based logic outside of the legacy project, into the TextLoader catalog, creating an API for it. \r\nDecouples the LoadColumn and Column attributes.\r\n\r\nReading the description of both #561 and #1515, i prototyped around having more attribute parameters for the LoadColumn attribute, to get closed to the TextLoader.Range. \r\nIn the process, discovered that the members for the Attribute derived class cannot be of the more advanced types: like classes, nullable primitives (ints), tuples. \r\n\r\nI tried to eliminate the need for the existing Ordinal string by adding a` start/end string` (can't do int? ), `int[] columns` and `int[]inverseColumns` thinking they would suffice to more strongly type and support most of the  scenarios. And with them we can do the \r\n1-*  - auto end\r\n1-4 - defined ranges \r\n1, 2, 3 - defined columns, or inverse columns\r\n\r\nbut the scenario that we can't do is multiple ranges. i.e. 1-4, 5-6\r\n\r\nOne idea on how to convert that would be to provide an array where the users  would specify the indexes with the convention that they should be treated in groups; example: new [] { 1, 3, 5, 7} would translate to 1-3, 5-7 but that seems UGLY. \r\n\r\nAnother idea is to let the user specify multiple attributes for the range, and have the column name specified separately. Example:\r\n\r\n```\r\n [LoadColumn(start:\"0\", end: \"8\")]\r\n [LoadColumn(start:\"10\", end: \"18\")]\r\n [ColumnName( \"Features\")]\r\n public float SepalLength;\r\n```\r\n\r\nBut, IMHO, the range regex beats this too from the prospective of simplicity and ease of use. \r\n\r\n**So to summarize, i propose**:\r\n1-  We keep the old ordinal, as string, rename to range\r\n2-  We add a boolean `LoadInverseRange` to determine whether we add the columns defined in range or they should be the one not loaded (AllOther in TextLoader.Range)  \r\n\r\nThe construction of the TextLoader columns from the attributes is not final. I will complete after getting a final word here. \r\n\r\n@eerhardt, @TomFinley, @Zruty0, @CESARDELATORRE \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1878","RelatedDescription":"Open PR \"[WIP] Schema based text loader\" (#1878)"},{"Id":"390896380","IsPullRequest":true,"CreatedAt":"2018-12-13T22:56:19","Actor":"wschin","Number":"1873","RawContent":null,"Title":"[WIP] Fix LightGBM and add test","State":"open","Body":"Fixes #1424. The first commit only creates some doc strings created when I felt very struggling when trying to reuse LightGBM facilities in ML.NET.","Url":"https://github.com/dotnet/machinelearning/pull/1873","RelatedDescription":"Open PR \"[WIP] Fix LightGBM and add test\" (#1873)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-18T05:30:59.7117306Z","RunDurationInMilliseconds":1203}