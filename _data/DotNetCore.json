{"Data":{"Blog":{"FeedItems":[{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7697516495","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:04:23","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Merged pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7828992215","Type":"IssuesEvent","CreatedAt":"2018-06-15T05:29:38","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18478","RelatedDescription":"Opened issue \"Question: Does profiling API support Linux?\" (#18478) at dotnet/coreclr","RelatedBody":"This was originally posted by @dotnetjt . To avoid pinging the subscribers to our announcement issue (#15136) with a potentially ongoing discussion I moved it here:\r\n\r\n> Hi @noahfalk - just wondering if the profiling API support for Linux went out in 2.1. I've been coding off and on, still working against a 2.1 preview.\r\n> I fired up a new Ubuntu server and installed the 2.1 runtime, and set up environment to point to my (portable) profiler library and it doesn't even attempt to load. I'm pretty sure it's not me as ldd shows that I'm not missing any libraries, so all of my static linking is fine.\r\n> Only other thing I can think of is that 2.1 doesn't support it yet.\r\n\r\nGlad you reached out and sorry its causing you trouble! Linux is fully supported ([profiler status page](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/profiling-api-status.md)) so this should work.\r\n\r\nIf you have a repro I could help diagnose the problem, or if you are set up to [debug the runtime](https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md) (you don't need SOS, regular C++ debugging is fine) you could set a breakpoint at https://github.com/dotnet/coreclr/blob/master/src/vm/profilinghelper.cpp#L690 and then see what fails.\r\n"},{"Id":"7828708802","Type":"PullRequestEvent","CreatedAt":"2018-06-15T03:17:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/8677","RelatedDescription":"Closed pull request \"[WIP] Collectible Assemblies and AssemblyLoadContext\" (#8677) at dotnet/coreclr","RelatedBody":"This is a followup of the issue #1684 (work done by @Rohansi) and the original issue #552 \r\n\r\nThis is PR is not mergeable as it is. It is a single commit for now to simplify the tracking of things that are changed. I will recommit everything once I have cleanup some bits here and there (the changes are very rough now... I haven't followed also using the define `FEATURE_COLLECTIBLE_ALC`...etc.)\r\n\r\nThe difference with #1684 is that a single `AssemblyLoaderAllocator` is now associated to the `AssemblyLoadContext`. Without changing much this class, I have added the ability to add a `DomainAssembly` (instead of the previous `SetDomainAssembly` method) to chain it to another domain assembly that is in the same ALC (via the member `DomainAssembly::m_NextDomainAssemblyInSameALC`). It allows to use the original code for single collectible assembly.\r\n\r\nAlso, the `AssemblyLoadContext` creates a weak handle on itself instead of a strong handle (otherwise it cannot self finalize). The Destroy of this context doesn't actually delete the native ALC but instead release a strong handle to the `LoaderAllocator` managed object (associated to the `AssemblyLoaderAllocator`). Then the finalizer of the `LoaderAllocator` via the `LoaderAllocatorScout` will be called, and there we will cleanup everything, including releasing the native `AssemblyLoadContext`.\r\n\r\nA simple test with an assembly loaded in loop seems to indicate that the memory is stable and nothing so far is crashing, but I expect many problems in many places, so this is really an early POC.\r\n\r\nI originally didn't use the PR #1684 and tried to perform the changes on my side, but I had to cherry pick some parts of the previous PR while encountering the same issues. One thing I'm really not happy currently is the code in the `LoaderAllocator::GCLoaderAllocators_RemoveAssemblies` (I had to fight with issues with part of the code `GC_NOTRIGGER` and others incompatible `GC_TRIGGERS`...etc.). One thing I don't like is to have multiple methods to remove all the internal caches associated to a `DomainAssembly` in the `AppDomain`. This code should be part of `AppDomain` instead. There  is also some issues with some maps that are using some `AssemblySpec` that were problematic because they were doing some GC_TRIGGERS (and the original `GCLoaderAllocators_RemoveAssemblies` was `GC_NOTRIGGER`)... so yeah, this part has to be heavily rewrite/cleanup somehow.\r\n\r\nComments are welcome (sorry if it is a bit of a mess!)\r\n\r\ncc: @jkotas @gkhanna79 @rahku \r\n\r\n\r\n\r\n"},{"Id":"7828697328","Type":"PullRequestEvent","CreatedAt":"2018-06-15T03:12:29","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18460","RelatedDescription":"Merged pull request \"Fix handling of generating relative path to parent\" (#18460) at dotnet/coreclr","RelatedBody":"Addresses https://github.com/dotnet/corefx/issues/30263\r\n\r\nTest change in CoreFX will be linked in as soon as I post the PR."},{"Id":"7828453748","Type":"PullRequestEvent","CreatedAt":"2018-06-15T01:32:42","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18318","RelatedDescription":"Merged pull request \"clean up list of disabled warnings.\" (#18318) at dotnet/coreclr","RelatedBody":"contributes to #18128"},{"Id":"7828365307","Type":"PullRequestEvent","CreatedAt":"2018-06-15T00:55:19","Actor":"krwq","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18477","RelatedDescription":"Opened pull request \"Ensure AdjustmentRule.DaylightDelta is withing [-12,12]\" (#18477) at dotnet/coreclr","RelatedBody":"Fixes: https://github.com/dotnet/corefx/issues/29914\r\n\r\nUnfortunately this is not ideal way to fix this - Linux currently lacks a good way to get BaseUtcOffset and getting it is purely heuristic. This PR ensures it is at least in the [-12,12] range\r\n\r\ncc: @jskeet"},{"Id":"7828341039","Type":"PullRequestEvent","CreatedAt":"2018-06-15T00:44:56","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18475","RelatedDescription":"Merged pull request \"fix the desktop build break\" (#18475) at dotnet/coreclr","RelatedBody":"Introduced by #18346.\r\n\r\n`BuildPutArgSplit` returns `The number of sources consumed by this node.`, so looks like it should go into `srcCount`.\r\n\r\nThe warning was: `lsraarm64.cpp(811): warning C4701: potentially uninitialized local variable 'srcCount' used`.\r\nAfter I merge PR #18318 I will try to sync the list of warnings enabled on desktop with CoreCLR to prevent such breaks.\r\n\r\nPTAL @dotnet/jit-contrib "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7828631070","Type":"IssuesEvent","CreatedAt":"2018-06-15T02:45:19","Actor":"gongdo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/476","RelatedDescription":"Closed issue \"Unit Test project(.NET 4.7) cannot load System.ValueTuple\" (#476) at dotnet/standard","RelatedBody":"> (The original issue was reported by Gyuwon Yi from here: https://developercommunity.visualstudio.com/content/problem/102236/unit-test-projectnet-47-cannot-load-systemvaluetup.html )\r\n\r\nUnit Test project(.NET 4.7) referencing .NET Core library using value tuple cannot load System.ValueTuple assembly.\r\nBut console client application works correctly.\r\nYou can repro with code from https://github.com/gyuwon/ValueTypeTestingProblem\r\n\r\nThe whole message:\r\n\r\n> Test Name: Bar_returns_value_tuple_correctly\r\n> Test FullName: ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly\r\n> Test Source: c:\\users\\gyuwon\\Documents\\Projects\\ValueTupleTesting\\ValueTupleTestsNet47\\FooService_specs.cs : line 16\r\n> Test Outcome: Failed\r\n> Test Duration: 0:00:00.0261781 Result StackTrace: at ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly()\r\n> Result Message: \r\n> Test method ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly threw exception: \r\n> System.IO.FileLoadException: Could not load file or assembly 'System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nAs I replied on the original issue, it can be solved by making library project to target multiple frameworks.\r\nBut it's just a work-around, not a solution.\r\nI think it's not a single ValueTuple problem. There's some referencing issue on .NET Standard 2.0.\r\nFor example this issue on Azure Function(Web Job) project with .NET Standard 2.0 library, looks like similar: https://github.com/Azure/azure-webjobs-sdk-script/issues/1792"},{"Id":"7827023981","Type":"IssuesEvent","CreatedAt":"2018-06-14T19:02:04","Actor":"Rutix","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/775","RelatedDescription":"Opened issue \"[Question] Why does the releasenotes link to .NET Core?\" (#775) at dotnet/standard","RelatedBody":"In slack someone pointed out that the releasenotes link at https://www.nuget.org/packages/NETStandard.Library/2.0.3 points to https://github.com/dotnet/core/tree/master/release-notes (using an go.microsoft link). Why is this? I noticed that not all version of .NET Standard have seperate releasenotes, is this the reason?"},{"Id":"7819553637","Type":"PullRequestEvent","CreatedAt":"2018-06-13T15:18:33","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/773","RelatedDescription":"Merged pull request \"Add diagnostic logging to trimming\" (#773) at dotnet/standard","RelatedBody":"Enable diagnostic logging to help understand the state of the task if a failure occurs.\r\n\r\nAlso guard against unpopulated dependencies."},{"Id":"7815209945","Type":"IssuesEvent","CreatedAt":"2018-06-12T21:33:08","Actor":"GoldenCrystal","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/774","RelatedDescription":"Opened issue \"Idea/Proposal: Split .NET Standard into multiple smaller standards by relying on tooling\" (#774) at dotnet/standard","RelatedBody":"First, let me start by saying that this is not supposed to be a final proposal, but more like a rough draft / general idea, that I hope to tranform into a valid proposal with the help of everyone here.\r\nI fear this is going to be a controversial topic, but I've had this idea in the back of my head for a few days now, and I'd like to at least try explaining it there, so as to have your feedback.\r\nSo, please bear with me until the end of this topic. 😅\r\n\r\n# Abstract\r\n\r\n[Like many others](https://github.com/dotnet/standard/issues/682), I do wish .NET Standard 2.1 was already a thing.\r\nBut I do also perfectly understand the concerns about .NET Core 2.1 being the only implementation already ahead in the standard. And because of that I do fear that .NET Standard 2.0 will be the last .NET Standard version ever. (But at the same time, I'm kinda going to propose replacing it by something else here… 😒)\r\n\r\nAside of that, the fact that .NET Standard 2.0 is not compatible with .NET 4.5 can sometimes be an obstacle in the migration process to .NET Core. (That's something we are faced with everyday in my current job)\r\n\r\nSo I wondered, what if, instead of having *one unique standard*, there were *many smaller standards* that could be implemented à-la-carte by runtimes/frameworks/NuGet ?\r\nWhat if we could already define something such as a \"Span Standard 1.0\" ?\r\n\r\nAnd yes, I know that the original design of DNX / .NET Standard 1.0 was more modular, I know that there were once such a thing as Assembly Neutral Interfaces, and I know all of this did not work out that well. This did obviously lead to the acceptable compromise that is .NET Standard 2.0.\r\n\r\nBut, I assure you, I am *not* proposing to reiterate the exact same mistakes as in .NET Standard 1 era. (Which is not to say that I'm not taking strong inspiration on what has/had already been done. 😉)\r\n\r\nWhat I'm thinking of is a mechanism that should help reduce coupling **without** requiring changes in the existing runtimes, and could work reasonably well with support in the tooling.\r\n\r\n# The general idea\r\n\r\nWe would define many ````feature```` sets that can overlap eachother. At the begining, features would likely be defined based on current .NET Standard 1.0~2.0 APIs, by splitting unrelated features away from eachother. (Basically what I call a ````feature```` here is like a much smaller .NET Standard) \r\n\r\nA ````feature```` would be defined very *similarly* to a reference assembly (i.e. no implementation), and define what API a consumer should expect when **depending** on the ````feature````.\r\n\r\nI'll take as an example the current hot topic of ````Span<T>```` and .NET Standard 2.0/2.1 to illustrate how ````features```` could help:\r\n````Span<T>```` is available to altmost anyone, but only .NET Core 2.1 supports the fast ````Span<T>```` and the new Span-based APIs:\r\n\r\n - Assume that there is no such thing as ````.NET Standard````\r\n - We could define ````Feature.Span, Version=1.0```` for the portable span, as implemented in ````System.Memory````\r\n - We could define ````Feature.Span, Version=1.1```` for the fast span, as implemented in .NET Core 2.1\r\n - Let's assume that we already have ````Feature.Sockets, Version=2.0```` representing the ````System.Net.Sockets```` feature from .NET Framework 2.0.\r\n - We could define ````Feature.Span.Sockets, Version=1.0````:\r\n   - This feature would have a feature dependecy on both ````Feature.Span, Version=1.0```` and ````Feature.Net.Sockets, Version=2.0````\r\n   - This feature would define all the new Span-related members introduced on Sockets\r\n - Let's assume that we have ````Feature.IO, Version=4.5```` representing the ````System.IO```` subset from the NuGet package with the same name.\r\n - We could define ````Feature.Span.Streams, Version=1.0````:\r\n   - This feature would have a feature dependecy on both ````Feature.Span, Version=1.0```` and ````Feature.IO, Version=4.5````\r\n   - This feature would define all the new Span-related members introduced on System.IO.Stream\r\n - We could go on with all the other places where Span-related API were introduced, but I'm sure you get the idea…\r\n\r\nℹ️ Note: Don't pay too much attention about the fictional boundaries of the features yet, I'm pretty sure I wouldn't want the feature to be shaped _exactly_ like described above. 😉\r\n\r\nWith such ````features```` defined, I could write a database client library, and declare that it depends on ````Feature.Runtime````, ````Feature.CSharp, Version=7.3````, ````Feature.Net.Sockets````, ````Feature.Span.Sockets````, ````Feature.Collections````, and ````Feature.Data.Common````.\r\nThis would allow my library to run on any runtime, provided that it at least supports all the ````features```` I used.\r\n\r\n# The (Draft) Proposal\r\n\r\n## Defining features\r\n\r\nA ````feature```` is an API shape, or contract (similar to .NET Standard), whose concrete implementation is provided by either a runtime (e.g. .NET Core) **or** by NuGet packages.\r\n\r\nWe would ideally reserve a prefix on NuGet for official .NET features. (e.g. ````Feature.````)\r\n\r\n - In the initial version, features would only ever be created by Microsoft / .NET Foundation\r\n - A ````feature```` is represented as a **single** assembly, typically exposed as a NuGet package.\r\n - A ````feature```` assembly contains only metadata (no implementation), like would any reference assembly.\r\n - A ````feature```` assembly contains only public types and members. (public types, public members and protected members)\r\n - A ````feature```` assembly can (will) have dependencies on other ````feature```` assemblies. (Dependencies would be supported via NuGet packages)\r\n - A ````feature```` assembly defines only the exact API surface that it supports\r\n   - A ````feature```` can only provide complete interface definitions. (Interface versioning problem: it is not possible to add or remove interface members)\r\n   - A ````feature```` can provide delegates. (Complete definition, not that any other form would be valid anyway)\r\n   - A ````feature```` provides only partial type definitions for structs, classes, and enums: Only publicly visible members that are provided by the ````feature````, are included in the metadata.\r\n   - ````features```` don't need to provide public constructors to type they augment\r\n   - A ````feature```` cannot add an abstract method to a pre-existing type (TBD: How can this be enforced ? Maybe based on the presence of a public constructor ?)\r\n   - (Obvious) Every type that is referenced in the ````feature```` assembly must exist either in the ````feature```` assembly itself or in one of its dependent ````feature```` assemblies.\r\n - Multiple ````features```` can provide the same member on the same type, if they both provide it for different reasons\r\n - Across ````feature```` assemblies, type identity is only determined by their full name \r\n - ````features```` follow Semantic Versioning (TBD)\r\n   - A ````feature```` of minor version M > N must always depend on the ````feature```` version N (Version M should only include the new types and members)\r\n   - A ````feature```` of major version M > N can depend on ````feature```` version N if it doesn't include breaking changes (In the current state of affairs, I expect that there would never be breaking changes)\r\n\r\nI expect that ````feature```` assemblies will never be referenced by concrete runtime, library or application assemblies.\r\n\r\nFor the rest of this proposal, I will address the proposed feature (sorry 😑) as ````feature````:\r\nA ````feature```` is either ````provided```` or ````depended upon````. Usage of any other term is likely a mistake on my part.\r\n\r\n## Wiring up features\r\n\r\n### Within libraries\r\n\r\nA new TFM ````features```` is created, acting similarly to ````netstandard```` TFMs.\r\nLibrary projects can target the TFM ````features```` like they would target .NET Standard, .NET FX, .NET Core or other TFMs.\r\n\r\nWhen targeting the TFM ````features````, the library project must reference all features it depends on:\r\n\r\n - We could assume that the TFM ````features```` provide **zero** API by default. (But maybe it provide some kind of minimal subset ?)\r\n - Features could be bundled in larger feature packages to avoid referencing hundreds of feature packages. (Similar to ````Microsoft.AspNetCore.All````)\r\n - The project can reference other libraries that are based on the ````features```` TFM, and will transitively inherit feature dependencies.\r\n\r\nAt build time, the toochain will load all ````feature```` assemblies and construct a model of the global feature set required by the library by merging all type definitions in the feature assemblies.\r\nThis can be done in the compiler or before calling the compiler, via an external tool. (I feel it might be easier to add this in the MSBuild build process than in Roslyn.)\r\n\r\nAll metadata references to ````features```` would be mapped to a non-existant and well-known ````features```` assembly (possibly signed, and in that case, the signing key would have to be public).\r\n\r\n⚠️ Important: The feature dependencies still need to be stored somewhere inside the resulting assembly… But I don't know how they should be stored. (Custom attributes, or regular .NET assembly references ?)\r\n\r\n### Within applications\r\n\r\nWhat is true today will still hold true with features: Applications are expected to target a concrete framework.\r\nHowever, application projects would gain the ability to reference features-based projects and libraries.\r\n\r\nWhen an application references a features-based project, the toolchain (NuGet & MSBuild) must always validate that the current TFMs for the project support all of the required ````features````, directly, or via compatibility NuGet packages.\r\n\r\nAt build time, the toochain will load all ````feature```` assemblies indirectly referenced by the project and construct a **shim** assembly covering all of the required ````features````:\r\n\r\n - This assembly will have the well-known name ````features```` (identical to what is referenced by ````feature````-based library projects)\r\n - This assembly will contain ````TypeForwardedToAttribute```` attributes for each and every type referenced by the features. (That's assuming that feature support has already verified for the project, so that all the members of forwarded types are guaranteed to exist)\r\n - The assembly is (likely) signed with the well-known signing key.\r\n\r\nThe generated ````features```` **shim** assembly will be bundled with the application, and act as the glue between features-based libraries and the underlying framework. (This should be very similar to how .NET Standard works, if I'm not mistaken)\r\n\r\nℹ️ NB: In the end, what I propose is that, rather than the runtime(s), the **application** is responsible for **providing** (wire-up) the features that the libraries depend upon. (But that this is handled by the toolchain)\r\n\r\n## Providing features (i.e. Concrete implementations)\r\n\r\nSplitting type definitions across multiple reference-like assemblies should not break typical .NET expectations:\r\n\r\n - A concrete type implementation can only be provided by **one** assembly\r\n - Where the concrete type implementation ends up being (i.e. in which assembly) is dependent on the runtime, and *should not matter to the library developer*\r\n - The runtime is never aware of the partial type definitions that were used to build libraries\r\n\r\nThere must exist a mapping between runtimes/frameworks and features, and features could likely be always provided via NuGet packages.\r\nThis would provide a single source of metadata for the toolchain to generate its shim assemblies.\r\n\r\nThis is basically what we could expect:\r\n\r\n - A NuGet package can declare a list of implemented ````features````.\r\n - If a NuGet package claims to **provide** a ````feature````, it must **provide** this ````feature```` entirely, even if that means that some method would throw ````NotImplementedException````\r\n   - Implementation of the feature could, however, rely on other dependencies (via ````TypeForwardedToAttribute````)\r\n   - Implementation of a feature is always relative to a valid TFM that **is not** ````features```` (but it could be ````netstandard2.0````)\r\n - For each framework, a NuGet package with the correct Major.Minor version would exist. (e.g. ````Framework.NETCoreApp, Version=2.1.0````)\r\n   - Framework NuGet packages would **not** contain the framework itself\r\n   - Framework NuGet packages would define which features the framework supports, and how they are mapped\r\n   - Framework NuGet packages could be updated incrementally to add features as they are standardized\r\n   - Framework NuGet packages would be flagged specifically\r\n\r\n## Features on the NuGet side\r\n\r\nAll of the above requirements would likely require adaptations on the NuGet side:\r\n\r\n - As said earlier, Microsoft or .NET Foundation should reserve a NuGet prefix for features (e.g. ````Feature.````) to ease discovery of features and avoid pollution\r\n - Microsoft or .NET Foundation should reserve a NuGet prefix for frameworks (e.g. ````Framework.````) to ease discovery of framework-feature mappings\r\n - A NuGet package must be identifiable as a ````feature````\r\n   - ````features```` are to be always considered framework agnostic\r\n   - ````feature```` packages should only contain one reference assembly (Named the same as the feature ?)\r\n   - ````feature```` packages should be ignored by older NuGet implementations\r\n - A NuGet package must be able to **depend on** a ````feature````\r\n   - That might be as simple as declaring a regular package dependency\r\n - A NuGet package must be able to **provide** a ````feature````\r\n   - The features which are provided must be listed in the package… (How ?)\r\n   - A NuGet package implementing one ore more feature must contain, for each TFM where it applies, exactly **one** well-known assembly named ````features````, signed with a well-known key, and containing/forwarding the implementation of all the features.\r\n - A NuGet package must be identifiable as a ````framework````\r\n   - Framework NuGet packages are not considered framework agnostic (they… are… applying to themselves, somehow)\r\n   - Framework NuGet packages follow the same rules as NuGet packages that **provide** ````features````\r\n\r\n# Remarks\r\n\r\n## How should ````features```` be sliced from .NET Standard ?\r\n\r\nThe goal of this proposal is not (yet) to propose how ````features```` should be sliced, but to propose how to allow them to be sliced.\r\nHowever, it must be noted, that there are many ways to slice an API with the feature proposed here.\r\nWhile most types will not require any special treatment, some types may be better sliced into multiple separate features, rather than exported as a single feature.\r\n\r\nWe could consider, for example, that the ````Stream```` class could be exported in a ````Feature.IO.Stream.Sync```` and ````Feature.IO.Stream.Async````, with possibly even a common feature ````Feature.IO.Stream.Core````.\r\n\r\nI'm sure that would generate a lot of discussions anyway… 🙂\r\n\r\n## Possible uses of ````features````\r\n\r\nApart from the obvious modularization of the standard, ````features```` could also be used in the following scenarios:\r\n\r\n - For framework dependencies of a .NET language such as C#: The ````feature```` for the language would be versioned in parallel with the language version, and, for each version, declare every type and member needed to fully support that version of the language.\r\n - For defining an optional standardized .NET UI API. (Whose implementation might be tied to the runtime)\r\n - Defining a new ````feature```` over a third party API, for allowing developers to more easily swap the implementation (because ````features```` apply to any .NET type, and not just only interfaces)\r\n\r\n ## Finding how ````features```` are provided\r\n\r\n While ````features```` provided by the runtime can be easy to discover (the user only would only need to import the corresponding package, and the tools might even do it automatically), it might be much harder to find that a package for supporting a feature exists on a given runtime.\r\n\r\n Given that the responsibility for ensuring that à ````feature```` is **provided** is delegated to the final user (user of the library(ies) depending on ````features````), there might be a need for some sort of mechanism helping to discover feature implementations.\r\n\r\n It would be great if NuGet coult auto import default feature-providing packages, based on some kind of repository… So that everything goes smoothly on the end-user side.\r\n\r\n# (Supposed) pros and cons of this proposal\r\n\r\n## Pros\r\n\r\n - More fine grained control over dependencies (looser coupling, maybe recovering some of the possibilities that were lost by removing Assembly Neutral Interfaces)\r\n - Ability to standardize small parts of the API surface rather than a whole framework (e.g. new Span APIs could be standardized faster on their own)\r\n - Ability to make some newer APIs compatible with old .NET versions again (That is an important scenario in some migration paths)\r\n - Ability to standardize things such as UI APIs (e.g. Windows Forms) without redefining \".NET Standard\"\r\n - This proposal does not require modifying existing runtimes\r\n\r\n## Cons\r\n\r\n - This proposal adds yet another layer of complexity to the already complicated world of framework compatibility\r\n - Consuming libraries implemented over ````features```` requires upgrading the toolchain (that is not a problem for everyone, but it can be for some)\r\n - This proposal may requires non-trivial additions to NuGet (let's hope not)\r\n - Slicing the .NET Standard API in a potentially large number of fine-grained features must be done very carefully, and may take quite a bit of time\r\n\r\n# Conclusion\r\n\r\nThank you very much for reading this to the end !\r\n\r\nI'm waiting for your feedback. 😉"},{"Id":"7813817261","Type":"PullRequestEvent","CreatedAt":"2018-06-12T17:02:16","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/773","RelatedDescription":"Opened pull request \"Add diagnostic logging to trimming\" (#773) at dotnet/standard","RelatedBody":"Enable diagnostic logging to help understand the state of the task if a failure occurs.\r\n\r\nAlso guard against unpopulated dependencies."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7828925347","Type":"IssuesEvent","CreatedAt":"2018-06-15T04:59:44","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30263","RelatedDescription":"Closed issue \"Path.GetRelativePath sometimes returns wrong result\" (#30263) at dotnet/corefx","RelatedBody":"`Path.GetRelativePath(\"C:\\\\a\\\\b\", \"C:\\\\c\")` outputs `..\\\\..\\\\c`\r\n\r\nbut\r\n\r\n`Path.GetRelativePath(\"C:\\\\a\\\\b\", \"C:\\\\a\")` outputs `..\\\\..\\\\`\r\n\r\nI expect the latter to be `..\\\\..\\\\a` or `..\\\\` or `..`\r\n\r\nIn node, `path.relative('a/b', 'a')`  --> `..`\r\n\r\n@JeremyKuhne "},{"Id":"7828924929","Type":"PullRequestEvent","CreatedAt":"2018-06-15T04:59:31","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30412","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#30412) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7828704694","Type":"PullRequestEvent","CreatedAt":"2018-06-15T03:15:47","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30412","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#30412) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7828645532","Type":"PullRequestEvent","CreatedAt":"2018-06-15T02:51:27","Actor":"rossslaney","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30411","RelatedDescription":"Opened pull request \"Port over non-redundant Span tests from corefxlab #28281\" (#30411) at dotnet/corefx","RelatedBody":"Started work on issue #28281. I am a first-timer, so I may have missed entirely with my work. I am having trouble with cast tests from corefxlab. Thanks. "},{"Id":"7828560857","Type":"PullRequestEvent","CreatedAt":"2018-06-15T02:16:46","Actor":"fiigii","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30410","RelatedDescription":"Opened pull request \"Improve Intel hardware intrinsic APIs\" (#30410) at dotnet/corefx","RelatedBody":"Match the CoreCLR changes https://github.com/dotnet/coreclr/pull/17637\r\n\r\n@CarolEidt @eerhardt @tannergooding "},{"Id":"7828386192","Type":"PullRequestEvent","CreatedAt":"2018-06-15T01:04:08","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30409","RelatedDescription":"Opened pull request \"Add test for IncompleteAsyncMethod async event\" (#30409) at dotnet/corefx","RelatedBody":"In 2.1, I added an event that's fired when an async method state machine object gets garbage collected without having reached a completed state.  Apparently I never added a test for that behavior.  This does.\r\n\r\ncc: @kouvel "},{"Id":"7828366951","Type":"PullRequestEvent","CreatedAt":"2018-06-15T00:55:59","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30408","RelatedDescription":"Opened pull request \"Add test for #29914 (TimeZoneInfo.AdjustmentRule on Unix: Daylight deltas of 23 hours)\" (#30408) at dotnet/corefx","RelatedBody":"Adds test for #29914 \r\n\r\nThis will fail on Linux until [CoreCLR PR](https://github.com/dotnet/coreclr/pull/18477) is merged"},{"Id":"7828258819","Type":"PullRequestEvent","CreatedAt":"2018-06-15T00:10:54","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30407","RelatedDescription":"Opened pull request \"[release/2.1] Fix WebSocket server split header parsing with large payload (#30402)\" (#30407) at dotnet/corefx","RelatedBody":"Port #30402 to release/2.1\r\nFixes #30375 "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7828880875","Type":"PullRequestEvent","CreatedAt":"2018-06-15T04:38:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5945","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5945) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7828701173","Type":"PullRequestEvent","CreatedAt":"2018-06-15T03:14:12","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5945","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5945) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7827379739","Type":"PullRequestEvent","CreatedAt":"2018-06-14T20:15:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5942","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5942) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7827378293","Type":"PullRequestEvent","CreatedAt":"2018-06-14T20:15:39","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5943","RelatedDescription":"Merged pull request \"Add ReadyToRun mode to ILCompiler\" (#5943) at dotnet/corert","RelatedBody":"Adds a ready-to-run compilation mode to ILCompiler which will live in ILCompiler.ReadyToRun library. Created separate versions of a few main classes (NodeFactory, Compilation, CompilationBuilder) specific to ready-to-run, whose implementations will be filled out as we build out ready-to-run support.\r\n\r\nAlso includes Tomas' PE file builder, which currently produces a valid executable round tripped from an input IL assembly."},{"Id":"7827350307","Type":"PullRequestEvent","CreatedAt":"2018-06-14T20:09:58","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5944","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5944) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7827345612","Type":"PullRequestEvent","CreatedAt":"2018-06-14T20:09:01","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5944","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5944) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1007054749512814592","CreatedAt":"2018-06-14T00:18:57+00:00","UserScreenname":"dotnet","Text":"Using .NET and Docker Together – DockerCon 2018 Update https://t.co/ZYju7lEGqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":135,"FavoriteCount":72,"RawContent":null},{"Id":"1007012327353454594","CreatedAt":"2018-06-13T21:30:22+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz tomorrow to learn how to use @AppInsights with your #ASP.NET Core project. https://t.co/pSofjdde2Y","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"1005426264029753345","CreatedAt":"2018-06-09T12:27:55+00:00","UserScreenname":"dotnet","Text":"Tune in today at 10a ET / 7a PT / 14:00 UTC / 8p IST and learn about global tools along with Jeff. https://t.co/hqxNjfqPMq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1005082168442449920","CreatedAt":"2018-06-08T13:40:37+00:00","UserScreenname":"dotnet","Text":"Tune in with Jeff as he works through the tutorials to learn F#.  Ask questions, and learn along with him https://t.co/rntL0szWYX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-06-15T05:30:33.2660211Z","RunDurationInMilliseconds":7675}