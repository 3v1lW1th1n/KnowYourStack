{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With .NET Core 3.0 Preview 6 out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null},{"Title":"Try the new System.Text.Json APIs","PublishedOn":"2019-06-13T17:39:05+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"For .NET Core 3.0, we&#8217;re shipping a brand new namespace called System.Text.Json with support for a reader/writer, a document object model (DOM), and a serializer. In this blog post, I&#8217;m...","Href":"https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 6","PublishedOn":"2019-06-12T17:00:14+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 6. It includes updates for compiling assemblies for improved startup, optimizing applications for size with linker and EventPipe improvements....","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-6/","RawContent":null},{"Title":"Announcing ML.NET 1.1 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-06-11T17:16:17+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers.\nML.NET offers Model Builder Model Builder (a simple UI tool for Visual Studio) and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-1-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Migrating a Sample WPF App to .NET Core 3 (Part 2)","PublishedOn":"2019-06-10T15:23:35+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"In part 1 of this blog series, I began the process of porting a sample WPF app to .NET Core. In that post, I described the .NET Core migration process as having four steps:\nWe previously went through...","Href":"https://devblogs.microsoft.com/dotnet/migrating-a-sample-wpf-app-to-net-core-3-part-2/","RawContent":null},{"Title":"Migrating a Sample WPF App to .NET Core 3 (Part 1)","PublishedOn":"2019-06-10T15:22:01+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Olia recently wrote a post about how to port a WinForms app from .NET Framework to .NET Core. Today, I&#8217;d like to follow that up by walking through the steps to migrate a sample WPF app to .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-a-sample-wpf-app-to-net-core-3-part-1/","RawContent":null},{"Title":"Supporting the community with WF and WCF OSS projects","PublishedOn":"2019-06-07T17:06:06+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"At the Build conference in May 2019, we mentioned that, after we add WinForms, WPF and Entity Framework 6 to .NET Core 3.0, we do not plan to add any more of the technologies from .NET Framework to...","Href":"https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/","RawContent":null},{"Title":"Porting desktop apps to .NET Core","PublishedOn":"2019-05-28T16:00:55+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Since I&#8217;ve been working with the community on porting desktop applications from .NET Framework to .NET Core, I&#8217;ve noticed that there are two camps of folks: some want a very simple and...","Href":"https://devblogs.microsoft.com/dotnet/porting-desktop-apps-to-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9849453592","Type":"PullRequestEvent","CreatedAt":"2019-06-19T04:55:45","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25247","RelatedDescription":"Opened pull request \"Restrict copyprop if address-taken\" (#25247) at dotnet/coreclr","RelatedBody":"Fix #25231"},{"Id":"9848981992","Type":"IssuesEvent","CreatedAt":"2019-06-19T02:38:32","Actor":"RickStrahl","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25246","RelatedDescription":"Opened issue \"InitializeCoreClr() and multiple calls\" (#25246) at dotnet/coreclr","RelatedBody":"I have an application that hosts the .NET Core runtime, which can effectively clear out memory - it's a host IDE and it has the ability to basically clear memory. When this happens it effectively releases all the state in my host DLL including the `hostHandle` and `domainId` that the `initializerCoreClr()` delegate generates.\r\n\r\nI use a few global variables to cache the runtime specific values:\r\n\r\n```cpp\r\nvoid* hostHandle;\r\nunsigned int domainId = 0;\r\n```\r\n\r\nand on subsequent requests check if these exist and then reuse. \r\n\r\n```cpp\r\n       if (domainId == 0)\r\n       {\r\n               coreclr_initialize_ptr initializeCoreClr = (coreclr_initialize_ptr)GetProcAddress(coreClr, \"coreclr_initialize\");\r\n\r\n                // This function both starts the .NET Core runtime and creates\r\n\t\t// the default (and only) AppDomain\r\n\t\tHRESULT hr = initializeCoreClr(\r\n\t\t\truntimePath,        // App base path\r\n\t\t\tappDomainName,\r\n\t\t\tsizeof(propertyKeys) / sizeof(char*),   // Property count\r\n\t\t\tpropertyKeys,       // Property names\r\n\t\t\tpropertyValues,     // Property values\r\n\t\t\t&hostHandle,        // Host handle\r\n\t\t\t&domainId);         // AppDomain ID\r\n       }\r\n```\r\n\r\nThis works fine for standard operation - multiple calls call the init once, and then just re-use the hostHandle and domainId for the actual invocation to create a proxy. \r\n\r\nBut if the host clears memory the domainId goes away and neither it or hostHandle are available for the required delegate invokations later. If I call the delegate a second time  I get an 'Invalid Operation' error.\r\n\r\nI think it would be useful to allow for this API to return the one and only **existing** runtime reference and repopulate the hostHandle and domainId if this is called subsequent times.\r\n\r\nEither that or provide some way to attach to find an existing (or rather the only one) runtime and re-populate the hostHandle and domainId.\r\n\r\nClassic .NET hosting allowed for this and simply returned the existing default AppDomain which seems to be a good alternative.\r\n\r\nI realize _this is a bit of a special case_ (releasing all memory) but I've not found a way around this issue, which is kind of a deal breaker for using .NET Core (over classic .NET Framework) on a technicality. \r\n"},{"Id":"9848867642","Type":"IssuesEvent","CreatedAt":"2019-06-19T02:06:44","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25245","RelatedDescription":"Opened issue \"Test failed: JIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh\" (#25245) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190617.1/workItem/JIT.jit64.opt/analysis/xunit/JIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_~2F_opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh\r\n\r\n**Failed tests:**\r\nJIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      /datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Work/f12f573f-8b1f-4062-868b-c339cea75cbc/Exec/JIT/jit64/Reports/JIT.jit64/opt/rngchk/ArrayWithThread_o/ArrayWithThread_o.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Payload/corerun ArrayWithThread_o.exe ''\r\nTest 1 Failed\r\nTest 2 Passed\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Payload\r\n> /datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Work/f12f573f-8b1f-4062-868b-c339cea75cbc/Exec/JIT/jit64/opt/rngchk/ArrayWithThread_o/ArrayWithThread_o.sh\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9848814125","Type":"IssuesEvent","CreatedAt":"2019-06-19T01:51:45","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25244","RelatedDescription":"Opened issue \"Assert failure: HasPerInstInfo()\" (#25244) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190616.1/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_~2F_CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_cmd\r\n\r\n**Failed tests:**\r\nJIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4460 [0x0000116c], Thread: 3048 [0x0be8]): HasPerInstInfo()\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\methodtable.h Line: 2955\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Work\\\\e39edb3b-c408-480c-a752-84aca6598fdc\\\\Exec\\\\JIT\\\\Performance\\\\Reports\\\\JIT.Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-5\\\\regex-redux-5.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Payload\\\\corerun.exe\\\" regex-redux-5.exe \r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Work\\\\e39edb3b-c408-480c-a752-84aca6598fdc\\\\Exec\\\\JIT\\\\Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-5\\\\regex-redux-5.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9848803930","Type":"IssuesEvent","CreatedAt":"2019-06-19T01:48:54","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25243","RelatedDescription":"Opened issue \"Assert failure: !CREATE_CHECK_STRING(pMT && pMT->Validate())\" (#25243) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190616.1/workItem/baseservices.threading/analysis/xunit/baseservices_threading._interlocked_compareexchange_compareexchangeint_compareexchangeint_~2F_interlocked_compareexchange_compareexchangeint_compareexchangeint_cmd\r\n\r\n**Failed tests:**\r\nbaseservices_threading._interlocked_compareexchange_compareexchangeint_compareexchangeint_._interlocked_compareexchange_compareexchangeint_compareexchangeint_cmd()\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 5140 [0x00001414], Thread: 856 [0x0358]): !CREATE_CHECK_STRING(pMT && pMT->Validate())\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x20CFD5 (0x71ed5f65)\r\nCORECLR! GetCLRRuntimeHost + 0x20CD51 (0x71ed5ce1)\r\nCORECLR! GetCLRRuntimeHost + 0x20D474 (0x71ed6404)\r\nCORECLR! GetCLRRuntimeHost + 0x1B64B2 (0x71e7f442)\r\nCORECLR! GetCLRRuntimeHost + 0x1B6402 (0x71e7f392)\r\nCORECLR! GetCLRRuntimeHost + 0x423EE7 (0x720ece77)\r\nCORECLR! GetCLRRuntimeHost + 0x864D9 (0x71d4f469)\r\nCORECLR! GetCLRRuntimeHost + 0x87B0A (0x71d50a9a)\r\nCORECLR! GetCLRRuntimeHost + 0x8791C (0x71d508ac)\r\nCORECLR! GetCLRRuntimeHost + 0x531464 (0x721fa3f4)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\object.cpp Line: 597\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Work\\\\210d9a54-e3d6-46a0-a8d8-4134a10fda50\\\\Exec\\\\baseservices\\\\threading\\\\Reports\\\\baseservices.threading\\\\interlocked\\\\compareexchange\\\\compareexchangeint\\\\compareexchangeint.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Payload\\\\corerun.exe\\\" compareexchangeint.exe \r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Work\\\\210d9a54-e3d6-46a0-a8d8-4134a10fda50\\\\Exec\\\\baseservices\\\\threading\\\\interlocked\\\\compareexchange\\\\compareexchangeint\\\\compareexchangeint.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9848783641","Type":"IssuesEvent","CreatedAt":"2019-06-19T01:42:54","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25242","RelatedDescription":"Opened issue \"Test failed: baseservices_threading._threadstatic_threadstatic07_threadstatic07_._threadstatic_threadstatic07_threadstatic07_cmd\" (#25242) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190616.1/workItem/baseservices.threading/analysis/xunit/baseservices_threading._threadstatic_threadstatic07_threadstatic07_~2F_threadstatic_threadstatic07_threadstatic07_cmd\r\n\r\n**Failed tests:**\r\nbaseservices_threading._threadstatic_threadstatic07_threadstatic07_._threadstatic_threadstatic07_threadstatic07_cmd\r\n\r\n**Log:**\r\n```\r\nProcess terminated. Assertion failed.\r\nA QueueUserWorkItemCallback was never called!\r\n   at System.Threading.QueueUserWorkItemCallbackBase.Finalize()\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Work\\\\39898ba4-9c86-4f7e-8e8a-a031500af3b1\\\\Exec\\\\baseservices\\\\threading\\\\Reports\\\\baseservices.threading\\\\threadstatic\\\\threadstatic07\\\\threadstatic07.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Payload\\\\corerun.exe\\\" threadstatic07.exe \r\nHello NBA Fans!!\r\nThreadStatic test 2: Various reading and writing of Threadstatic variables.\r\n1, 2, 3, 4, 6/16/2019 10:15:27 PM, John Stockton\r\n-1, -2, -3, -4, 6/16/2019 10:15:27 PM, Karl Malone\r\nThreadStarted.. 6\r\nThreadStarted.. 9\r\nThreadStarted.. 8\r\nThreadStarted.. 10\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: -1, -1, -1, -1, 6/16/2019 10:15:32 PM, 1\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nAA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nAAA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nThreadStarted.. 7\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nAA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nAAA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nAA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nAAA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nX: 0, 9\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nAA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nAAA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nX: 0, 6\r\nThreadpool Started.. 4\r\nTP A: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP AA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nTP AAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP A: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nTP AA: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nTP AAA: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nX: 0, 4\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nAA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nAAA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nX: 0, 8\r\nThreadStarted.. 5\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nAA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nAAA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nX: 0, 5\r\nX: 0, 10\r\nX: 0, 7\r\nThreadpool Started.. 3\r\nTP A: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP AA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nTP AAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP A: 3, 3, 3, 3, 6/16/2019 10:15:32 PM, 3\r\nTP AA: 3, 3, 3, 3, 6/16/2019 10:15:32 PM, 3\r\nTP AAA: 3, 3, 3, 3, 6/16/2019 10:15:32 PM, 3\r\nX: 0, 3\r\nMain A: 1, 1, 1, 1, 6/16/2019 10:15:32 PM, 1\r\nMain AA: 1, 1, 1, 1, 6/16/2019 10:15:32 PM, 1\r\nMain AAA: 1, 1, 1, 1, 6/16/2019 10:15:32 PM, 1\r\nX: 0, 1\r\nTest Succeeded.\r\nExpected: 100\r\nActual: -2146232797\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Work\\\\39898ba4-9c86-4f7e-8e8a-a031500af3b1\\\\Exec\\\\baseservices\\\\threading\\\\threadstatic\\\\threadstatic07\\\\threadstatic07.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9848712207","Type":"IssuesEvent","CreatedAt":"2019-06-19T01:22:07","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25241","RelatedDescription":"Opened issue \"Test failed: System.Net.WebSockets.Client.Tests.ConnectTest/ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation \" (#25241) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190617.1/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.ConnectTest~2FConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation\r\n\r\n**Failed tests:**\r\nSystem.Net.WebSockets.Client.Tests.ConnectTest/ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation\r\n\r\n**Log:**\r\n```\r\nSystem.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 83\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 111\r\n   at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in /_/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 83\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /_/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 66\r\n   at System.Net.WebSockets.Client.Tests.ConnectTest.ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation() in /_/src/System.Net.WebSockets.Client/tests/ConnectTest.cs:line 237\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9847790890","Type":"PullRequestEvent","CreatedAt":"2019-06-18T21:31:11","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11583","RelatedDescription":"Opened pull request \"Update MSBuild to 16.2.0-preview-19318-05\" (#11583) at dotnet/cli","RelatedBody":""},{"Id":"9847774263","Type":"PullRequestEvent","CreatedAt":"2019-06-18T21:28:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11582","RelatedDescription":"Opened pull request \"Update MSBuild to 16.2.0-preview-19318-05\" (#11582) at dotnet/cli","RelatedBody":""},{"Id":"9846892015","Type":"IssuesEvent","CreatedAt":"2019-06-18T19:10:21","Actor":"ravarnamsft","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11544","RelatedDescription":"Closed issue \"dotnet publish results in wrong runtimeTarget in dependencies.json\" (#11544) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a .Net core project targeting 3.0 (having installed 3.0 preview 5 SDK)\r\nAdd runtime identifiers linux-64 and win-64 to the project file.\r\nIn powershell,\r\nrun dotnet publish -c release -o outputFolder --runtime win-x64 myProject.csproj\r\ndelete the \"outputFolder\"\r\nrun dotnet publish -c release -o outputFolder --runtime linux-x64 myProject.csproj\r\n\r\nThe deps.json file in the outputFolder has run time target of win-x64 when published for linux and therefore fails to start on a linux VM. I have seen this happen the other way around as well, if I switch the ordering of the publish commands above and linux gets written to the windows deps.json file, causing the app to fail on a Windows VM.\r\n\r\n## Expected  behavior\r\nThe deps.json in the output folder should have the correct runtimeTarget.\r\n\r\n## Actual behavior\r\nThe deps.json file has the wrong runtimeTarget and the app doesn't run on the target platform.\r\n\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.107 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\nHere are some settings from the project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <TargetFrameworkVersion>v3.0</TargetFrameworkVersion>\r\n    <LangVersion>latest</LangVersion>\r\n    <RuntimeIdentifiers>linux-x64;win-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n```\r\n\r\nThis used to work properly all the time in 2.1 and 2.2. Is there some static state maintained in the cli session that doesn't get reset properly?\r\n\r\n"},{"Id":"9846425780","Type":"IssuesEvent","CreatedAt":"2019-06-18T18:00:37","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11581","RelatedDescription":"Opened issue \"Implement improvements for SDK resolution in global.json.\" (#11581) at dotnet/cli","RelatedBody":"Tracking issue for implementing backwards-compatible improvements to global.json for .NET Core SDK resolution.\n\nThis feature will give users more flexibility in determining how SDKs are resolved by the command line tools.\n\nCurrently, a SDK version specified in `global.json` will always use the specified version or roll-forward to a compatible patch level if not found.\n\nThe improvement will allow users to prevent rolling-forward or given more control over how the roll-forward is performed.\n\nTODO: link to public design document once available."},{"Id":"9846380953","Type":"IssuesEvent","CreatedAt":"2019-06-18T17:54:02","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11522","RelatedDescription":"Closed issue \"Review global.json design document.\" (#11522) at dotnet/cli","RelatedBody":"Issue to track the review of the proposed changes to global.json for SDK versioning."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9847276869","Type":"PullRequestEvent","CreatedAt":"2019-06-18T20:10:07","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1260","RelatedDescription":"Closed pull request \"[automated] Merge branch 'master' => 'release/3.0'\" (#1260) at dotnet/standard","RelatedBody":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @dotnet-maestro[bot]\n* @terrajobst\n* @wtgodbe\n* @safern\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"9847274376","Type":"PullRequestEvent","CreatedAt":"2019-06-18T20:09:44","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1260","RelatedDescription":"Opened pull request \"[automated] Merge branch 'master' => 'release/3.0'\" (#1260) at dotnet/standard","RelatedBody":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @dotnet-maestro[bot]\n* @terrajobst\n* @wtgodbe\n* @safern\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"9844105984","Type":"PullRequestEvent","CreatedAt":"2019-06-18T13:13:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1259","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1259) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190618.1\r\n- **Date Produced**: 6/18/2019 9:46 AM\r\n- **Commit**: 1fca079ddec2aabf56e256dab03e39b31b5036c7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19318.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19318.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19318.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9844023422","Type":"PullRequestEvent","CreatedAt":"2019-06-18T13:02:59","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1259","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1259) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190618.1\r\n- **Date Produced**: 6/18/2019 9:46 AM\r\n- **Commit**: 1fca079ddec2aabf56e256dab03e39b31b5036c7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19318.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19318.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19318.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9843658195","Type":"PullRequestEvent","CreatedAt":"2019-06-18T12:14:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1258","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1258) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190618.2\r\n- **Date Produced**: 6/18/2019 8:19 AM\r\n- **Commit**: dc538a29793fd56618d0fa3186e2388d47d00c19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19318.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"9843588736","Type":"PullRequestEvent","CreatedAt":"2019-06-18T12:04:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1258","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1258) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190618.2\r\n- **Date Produced**: 6/18/2019 8:19 AM\r\n- **Commit**: dc538a29793fd56618d0fa3186e2388d47d00c19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19318.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"9835704416","Type":"PullRequestEvent","CreatedAt":"2019-06-17T12:58:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1257","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1257) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190617.2\r\n- **Date Produced**: 6/17/2019 11:31 AM\r\n- **Commit**: 7acfe7156497d667fc39bc1cdb5a7e95d12f5dca\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19317.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19317.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19317.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9849530835","Type":"PullRequestEvent","CreatedAt":"2019-06-19T05:18:37","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/38648","RelatedDescription":"Merged pull request \"Update the PackageReference for Pkcs in netstandard.depproj\" (#38648) at dotnet/corefx","RelatedBody":"The 4.5.0 ref/netstandard2.0 had three properties declared get/set which were\r\nactually get-only.  Updating the depproj version allows removal of the\r\nApiCompat errors in the shims.\r\n\r\nFixes #32178."},{"Id":"9849530809","Type":"IssuesEvent","CreatedAt":"2019-06-19T05:18:37","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/32178","RelatedDescription":"Closed issue \"Clean-up apicompat baseline files once we release the removed APIs\" (#32178) at dotnet/corefx","RelatedBody":"As part of harvesting the netstandard ref for some System.Security.Cryptography.Pkcs we had to baseline some compat errors until we can harvest a released version of it with those APIs removed.\r\n\r\nThis issue is to track updating the harvested version and cleaning up the apicompat baseline entries added as part of https://github.com/dotnet/corefx/pull/32148. "},{"Id":"9848983075","Type":"IssuesEvent","CreatedAt":"2019-06-19T02:38:50","Actor":"mqudsi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38668","RelatedDescription":"Opened issue \"System.Text.Json wrongly complains about duplicate property names when one is ignored\" (#38668) at dotnet/corefx","RelatedBody":"A common \"hack\" used anytime you're working with convention-based serializers (so JSON converters or Entity Framework alike) is to create proxies as converters (I know there is converter support separately):\r\n\r\n```cs\r\nenum MyEnum {\r\n\tCase1 = 0,\r\n\tCase2 = 1,\r\n}\r\n\r\nstruct Foo {\r\n\t[JsonIgnore]\r\n\tMyEnum Bar { get; set; }\t\r\n\r\n\t[JsonPropertyName(\"Bar\")]\r\n\tstring BarString\r\n\t{\r\n\t\tget => Enum.GetName(typeof(MyEnum), MyEnum);\r\n\t\tset => value switch {\r\n\t\t\t\"Case1\" => MyEnum.Case1,\r\n\t\t\t\"Case2\" => MyEnum.Case2,\r\n\t\t\t_ => throw new Exception(\"Unknown value!\"),\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAttempting to (de)serialize this type throws an exception complaining about duplicate property names. Since `Foo.Bar` is ignored, `Foo.BarString` should be the only JSON property with the name \"Bar\".\r\n\r\nCurrently, it is necessary to also change the JSON property name of the original property:\r\n\r\n```cs\r\nstruct Foo {\r\n\t[JsonIgnore]\r\n\t[JsonPropertyName(\"NotBar\")]\r\n\tMyEnum Bar { get; set; }\t\r\n\r\n\t[JsonPropertyName(\"Bar\")]\r\n\tstring MyEnumString\r\n\t{\r\n\t\tget => Enum.GetName(typeof(MyEnum), MyEnum);\r\n\t\tset => value switch {\r\n\t\t\t\"Case1\" => MyEnum.Case1,\r\n\t\t\t\"Case2\" => MyEnum.Case2,\r\n\t\t\t_ => throw new Exception(\"Unknown value!\"),\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThis hack work in Entity Framework and NewtonSoft's JSON serializer, among others."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9849565401","Type":"IssuesEvent","CreatedAt":"2019-06-19T05:27:59","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30172","RelatedDescription":"Closed issue \"Programmatic suppression of warnings\" (#30172) at dotnet/roslyn","RelatedBody":"Serialization frameworks and tools embedding .NET Core or Mono often set the value of fields or call methods outside of user code.\r\n\r\nThis leads the IDE to show warning about unused code while the user of the framework knows the fields and methods are going to be used. One example of this scenario is Unity. A typical game object will look like this:\r\n\r\n```csharp\r\nusing UnityEngine;\r\n\r\nclass BulletMovement : MonoBehaviour\r\n{\r\n    [SerializeField] private float speed;\r\n\r\n    private void Update()\r\n    {\r\n         this.transform.position *= speed;\r\n    }\r\n}\r\n```\r\n\r\nIn that case:\r\n\r\n* the value of the field speed is set by Unity based on the value set in the Unity Editor.\r\n* the method Update is going to be invoked by Unity at each and every frame of the game.\r\n\r\nFor the Tools for Unity, we'd like a way to suppress the warning `CS0649` for the field.\r\n\r\nIf down the line there is a warning about an unused private method such as Update, we'll want to suppress it as well.\r\n\r\n@tmat suggested offline:\r\n\r\n> we could allow analyzers to register for callbacks on specified compiler warnings, pass the callback the context and let it decide whether the warning should be reported or not.\r\n\r\n"},{"Id":"9849564726","Type":"IssuesEvent","CreatedAt":"2019-06-19T05:27:49","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20242","RelatedDescription":"Closed issue \"Allow an analyzer to suppress diagnostics\" (#20242) at dotnet/roslyn","RelatedBody":"There are several situations where it would be helpful for an analyzer, or an analyzer assembly, to have the ability to suppress diagnostics reported by another analyzer or as a warning by the compiler. For example:\r\n\r\n* StyleCop Analyzers rule to \"Use 'this.'\" could automatically disable the IDE warning with the same intent\r\n* Analyzers could suppress compiler warnings like CS1591 using application-specific logic\r\n\r\nSuch a \"Diagnostic Filter\" feature would likely run after analysis is complete, and be provided a list of reported diagnostics with the ability to suppress specific diagnostics. It would be helpful if the diagnostics were treated as suppressed in the Error List window, with the suppression source set to the name of the filter responsible for suppressing it."},{"Id":"9849562252","Type":"PullRequestEvent","CreatedAt":"2019-06-19T05:27:09","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36067","RelatedDescription":"Merged pull request \"Add new analyzer API (DiagnosticSuppressor) to allow programmatic sup…\" (#36067) at dotnet/roslyn","RelatedBody":"…pression of analyzer and/or compiler non-error diagnostics\r\n\r\nFixes #20242 \r\nFixes #30172\r\n\r\nDetailed design proposal [here](https://gist.github.com/mavasani/fcac17a9581b5c54cef8a689eeec954a)"},{"Id":"9849559143","Type":"IssuesEvent","CreatedAt":"2019-06-19T05:26:21","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36568","RelatedDescription":"Opened issue \"Consider if SuppressionDescriptor should be a struct\" (#36568) at dotnet/roslyn","RelatedBody":"https://github.com/dotnet/roslyn/pull/36067 adds a new public API `SuppressionDescriptor` which is analogous to `DiagnosticDescriptor` - `DiagnosticSuppressor` declaratively provides its supported suppression descriptors, similar to the way that `DiagnosticAnalyzer` provides its supported diagnostic descriptors. `SuppressionDescriptor` is a class in the PR for consistency with `DiagnosticDescriptor`. It was suggested [here](https://github.com/dotnet/roslyn/pull/36067#discussion_r295020664) that it could be a struct. This issue tracks whether or not to make this change."},{"Id":"9849393083","Type":"PullRequestEvent","CreatedAt":"2019-06-19T04:37:16","Actor":"panopticoncentral","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36567","RelatedDescription":"Opened pull request \"Make metadata properties more efficient\" (#36567) at dotnet/roslyn","RelatedBody":"In heap dumps of large CPS solutions, ~15% of the heap is taken up by VisualStudioProject instances. The issue is VisualStudioProject._allMetadataReferences. While most metadata references have the default metadata properties, every time a metadata reference is added the code currently adds an entry in _allMetadataReferences pointing to a list of metadata properties. First, if the metadata properties are default and there's only one reference, we're wasting space by allocating the list in the first place. But second, this list starts with an initial capacity of 4, which means that we're wasting quadruple the space. For every metadata reference. Of which there are a _lot_ in .NET Core.\r\n\r\nThe solution is just to optimize the case where there is only one of the metadata reference and it has the default properties. So:\r\n\r\n* `!_allMetadataReferences.TryGetValue(path, out var list)` means \"we have not seen this reference\"\r\n* `_allMetadataReferences.TryGetValue(path, out var list) && list == null` means \"we have seen only one of this reference and its metadata properties are the default ones.\"\r\n* Otherwise, we've either seen this reference multiple times, or the one time we saw it its metadata properties were not the default.\r\n\r\nI chose not to optimize the remove path (i.e. you have multiple references and you remove every one except the default properties) because it seemed to be a pretty esoteric situation."},{"Id":"9849285818","Type":"PullRequestEvent","CreatedAt":"2019-06-19T04:04:46","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36566","RelatedDescription":"Opened pull request \"Change dotnet_diagnostic.*.severity settings to match code style\" (#36566) at dotnet/roslyn","RelatedBody":"The code style settings we already had in a .editorconfig file supplied a set of terms to set different diagnostic severities. The terms don't match the underlying compiler enum, but we will adopt them for setting compiler diagnostic settings as well to keep the values consistent inside a .editorconfig file.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/35690"},{"Id":"9849247171","Type":"PullRequestEvent","CreatedAt":"2019-06-19T03:53:35","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36534","RelatedDescription":"Merged pull request \"added basic completion statement telemetry\" (#36534) at dotnet/roslyn","RelatedBody":"added very basic telemetry to make dashboard to track how often new feature is being used. \r\n\r\nsee other features dashboard here\r\nblock comment - https://devdiv.visualstudio.com/DevDiv/_dashboards/dashboard/2faa643f-88ea-48b3-8e14-d96874ef9662\r\ntype import completion - https://devdiv.visualstudio.com/DevDiv/_dashboards/dashboard/73a410a4-f68c-404f-938a-ab5f821532f9\r\n\r\nI didn't add undo tracking telemetry for now. it looks like due to the way code is written, I need a bit of refactoring to add that telemetry, so didn't add it for now. but what I added should at least give us some idea how often it is used in the wild."},{"Id":"9849210729","Type":"PullRequestEvent","CreatedAt":"2019-06-19T03:42:30","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36565","RelatedDescription":"Opened pull request \"Set a non-fatal error handler that rethrows exceptions\" (#36565) at dotnet/roslyn","RelatedBody":"Without this our unit tests will throw non-fatal exceptions and just march on silently, making us unaware of bad things happening."},{"Id":"9849097366","Type":"IssuesEvent","CreatedAt":"2019-06-19T03:10:32","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36561","RelatedDescription":"Closed issue \"[RPS] Additional Image loads as part of initializing the Csharp language service\" (#36561) at dotnet/roslyn","RelatedBody":"[This ](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/FindReferences/StreamingFindUsagesPresenter.cs#L53) logic ends up importing all implementations of `ITableColumnDefinition` which is essentially the base interface for any component that has a table control (Test Explorer being one of them since 16.2). This causes unnecessary image loads on solution open/project creation. \r\n\r\nFiling this to track fixing this to be more specific to the column definitions that Roslyn needs.\r\n\r\nAdditional odities - I haven't seen this repro in IntPreview bits though(VisualStudio.16.IntPreview/16.2.0-pre.4.0+29017.117.d16.2stg) and this specific code has not changed."},{"Id":"9849085725","Type":"PullRequestEvent","CreatedAt":"2019-06-19T03:07:17","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36562","RelatedDescription":"Merged pull request \"existing code loaded everyone in VS who MEF exported ITableColumnDefi…\" (#36562) at dotnet/roslyn","RelatedBody":"…nition. now we make sure we only load one that we care"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9849306355","Type":"PullRequestEvent","CreatedAt":"2019-06-19T04:11:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7504","RelatedDescription":"Merged pull request \"Fixed errors when targeting ARM64 on Linux.\" (#7504) at dotnet/corert","RelatedBody":"Fixed several compilation errors found while trying to compile for ARM64 under Linux via cross-compilation.\r\n\r\nRelated to: #7500"},{"Id":"9848496262","Type":"PullRequestEvent","CreatedAt":"2019-06-19T00:16:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7540","RelatedDescription":"Merged pull request \"Update dependencies\" (#7540) at dotnet/corert","RelatedBody":""},{"Id":"9848228891","Type":"PullRequestEvent","CreatedAt":"2019-06-18T23:03:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7540","RelatedDescription":"Opened pull request \"Update dependencies\" (#7540) at dotnet/corert","RelatedBody":""},{"Id":"9847771230","Type":"PullRequestEvent","CreatedAt":"2019-06-18T21:27:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7536","RelatedDescription":"Merged pull request \"Ensure ObjectWriter package does not get used on ObjWriterBuild mode\" (#7536) at dotnet/corert","RelatedBody":""},{"Id":"9846348656","Type":"IssuesEvent","CreatedAt":"2019-06-18T17:49:09","Actor":"forestbat","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7539","RelatedDescription":"Opened issue \"There is a IL2CPP compiler on tap\" (#7539) at dotnet/corert","RelatedBody":"The origin maintainer of the compiler has abandoned this project，so I fork it and made some small changes。\r\nIt's dependency is still .NET Framework and its built-in clang and llvm-linker should be updated to 8.0.\r\nPlease see this and hope your reply。\r\n[https://github.com/forestbat/il2cpp](url)"},{"Id":"9844291025","Type":"IssuesEvent","CreatedAt":"2019-06-18T13:35:22","Actor":"hhblaze","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7538","RelatedDescription":"Closed issue \"Win10, NetCore 2.2, simple \"HelloWorld\" with Google.Cloud.Datastore.V1 dependency fails to compile (with Firestore all is good)\" (#7538) at dotnet/corert","RelatedBody":"Content of HelloWorld.csproj\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Google.Cloud.Datastore.V1\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nCompilation output\r\n\r\n```\r\nH:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld>dotnet publish -r win-x64 -c release\r\nMicrosoft (R) Build Engine 16.1.76+g14b0a930a7 для .NET Core\r\n(C) (Microsoft Corporation). \r\n\r\n  Restore completed в 1,7 sec для H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj.\r\n  HelloWorld -> H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\bin\\release\\netcoreapp2.2\\win-x64\\HelloWorld.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : warning : Method `[System.Interactive.Async]System.Linq.AsyncEnumerable+CatchAsyncIterator`2+<MoveNextCore>d__7<System.__Canon,System.__Canon>.MoveNext()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramDefault: [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\n\r\nHelloWorld.obj : error LNK2001: unresolved external symbol dlopen [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\nHelloWorld.obj : error LNK2001: unresolved external symbol dlsym [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\nbin\\release\\netcoreapp2.2\\win-x64\\native\\HelloWorld.exe : fatal error LNK1120: 2 unresolved externals [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\nC:\\Users\\blaze\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27818-01\\build\\Microsoft.NETCore.Native.targets(342,5): error MSB3073: comand output \"\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64\\link.exe\"  @\"obj\\release\\netcoreapp2.2\\win-x64\\native\\link.rsp\"\" wit code 1120. [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9849403299","Type":"PullRequestEvent","CreatedAt":"2019-06-19T04:40:21","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3340","RelatedDescription":"Merged pull request \"Fix small build issues\" (#3340) at dotnet/sdk","RelatedBody":"Three separate small issues in three commits:\r\n\r\n\r\n1. Fix incremental build in VS when only target files change. This had been driving me crazy causing tests to run without my targets changes. Fixed the other two while I was playing around nearby.\r\n\r\n2. Remove outdated workaround\r\n\r\n3. Auto-bump version of task assemblies. Fix #2953. Follows [Arcade recommendation](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md#recommanded-settings). "},{"Id":"9849403287","Type":"IssuesEvent","CreatedAt":"2019-06-19T04:40:21","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2953","RelatedDescription":"Closed issue \"Assembly version stopped being bumped with every build in 2.1.300+\" (#2953) at dotnet/sdk","RelatedBody":"MSBuild on desktop cannot load more than one version of our tasks unless we bump the assembly version. (MSBuild on coreclr can't either, but we have a 1:1 msbuild:sdk relationship on coreclr so it's moot. The current limitations on coreclr are even worse, can't load SxS in same load context regardless of version, but again moot here.)\r\n\r\nIf an MSBuild node is alive using a different build of the same Major.Minor.Patch release, then it will use targets from the new build and tasks from the old one. When there are contract changes between the tasks and targets, this can lead to confounding errors  like \"task X could not be loaded from Microsoft.NET.Build.Tasks.dll\" or \"task Y does not take parameter Z\". \r\n\r\nWe got around this in the past by bumping the assembly version with every build. Since tasks are always dynamically loaded and never referenced directly at compilation time, this doesn't have the usual negative consequences of requiring excessive binding redirects, etc.\r\n\r\nThis has a history of regressing with infrastructure (repo toolset, arcade, etc.,) because the infrastructure is opinionated that the build number should not be part of the assembly version, which makes sense for most things, but not build tasks. We need to add test coverage to stop this from regressing. It can go a long time unreported because 1) things might still work when mixing tasks and targets between builds and 2) msbuild nodes eventually shut down and things start working again, letting the problem get chalked up to flakiness that can't be reproduced.\r\n\r\nNow, with the move to build-to-build upgrades of patches, https://github.com/dotnet/core-sdk/pull/530, I think there will be a prompt to terminate users of older build or a prompt to reboot following the upgrade.That would mitigate this, but we should still be defensive for forced SxS patch installs (via .zip or whatever)."},{"Id":"9848479559","Type":"PullRequestEvent","CreatedAt":"2019-06-19T00:11:56","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3331","RelatedDescription":"Merged pull request \"Preserve metadata from Reference items\" (#3331) at dotnet/sdk","RelatedBody":"Fix #2254 "},{"Id":"9848479548","Type":"IssuesEvent","CreatedAt":"2019-06-19T00:11:56","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2254","RelatedDescription":"Closed issue \"Reference metadata is not preserved by ImplicitlyExpandNETStandardFacades\" (#2254) at dotnet/sdk","RelatedBody":"For a project targeting .Net Framework 4.7.1 with a reference to netstandard libraries, the target `ImplicitlyExpandNETStandardFacades` replaces certain references with their Facades so netstandard based assemblies work as expected. This currently works great if the project does not associate metadata(like aliases) with any of these references, but when it does - those aren't honored breaking build. \r\n\r\nFiling this issue to ensure that the missing metadata is preserved when the replacement is done.\r\n\r\nAdding few more details, here is the reference in question:\r\n```\r\n<ReferenceInclude=\"System.Net.Http\">\r\n     <HintPath>E:\\SomeRandomProjectPath\\bin\\debug\\System.Net.Http.dll</HintPath>\r\n     <Aliases>snh</Aliases>\r\n     <EmbedInteropTypes>False</EmbedInteropTypes>\r\n   </Reference>\r\n```\r\nand here is what is passed on to csc:\r\n```\r\nE:\\Program Files (x86)\\Microsoft Visual Studio\\15.7Prev\\Enterprise\\MSBuild\\15.0\\bin\\Roslyn\\csc.exe /noconfig /unsafe+ /nowarn:1587,1591,1701,1702 /nostdlib+ /errorreport:prompt /warn:4 /define:DEBUG;TRACE /highentropyva+  /reference:\"E:\\Program Files (x86)\\Microsoft Visual Studio\\15.7Prev\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\net471\\lib\\System.Net.Http.dll ....\"\r\n```\r\nNotice the missing alias to System.Net.http."},{"Id":"9848164707","Type":"PullRequestEvent","CreatedAt":"2019-06-18T22:48:12","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3326","RelatedDescription":"Merged pull request \"Support PublishReadyToRun for framework-dependent deployment\" (#3326) at dotnet/sdk","RelatedBody":"Fix #3110 "}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"457806313","IsPullRequest":true,"CreatedAt":"2019-06-19T04:55:45","Actor":"CarolEidt","Number":"25247","RawContent":null,"Title":"Restrict copyprop if address-taken","State":"open","Body":"Fix #25231","Url":"https://github.com/dotnet/coreclr/pull/25247","RelatedDescription":"Open PR \"Restrict copyprop if address-taken\" (#25247)"},{"Id":"457778269","IsPullRequest":false,"CreatedAt":"2019-06-19T02:38:31","Actor":"RickStrahl","Number":"25246","RawContent":null,"Title":"InitializeCoreClr() and multiple calls","State":"open","Body":"I have an application that hosts the .NET Core runtime, which can effectively clear out memory - it's a host IDE and it has the ability to basically clear memory. When this happens it effectively releases all the state in my host DLL including the `hostHandle` and `domainId` that the `initializerCoreClr()` delegate generates.\r\n\r\nI use a few global variables to cache the runtime specific values:\r\n\r\n```cpp\r\nvoid* hostHandle;\r\nunsigned int domainId = 0;\r\n```\r\n\r\nand on subsequent requests check if these exist and then reuse. \r\n\r\n```cpp\r\n       if (domainId == 0)\r\n       {\r\n               coreclr_initialize_ptr initializeCoreClr = (coreclr_initialize_ptr)GetProcAddress(coreClr, \"coreclr_initialize\");\r\n\r\n                // This function both starts the .NET Core runtime and creates\r\n\t\t// the default (and only) AppDomain\r\n\t\tHRESULT hr = initializeCoreClr(\r\n\t\t\truntimePath,        // App base path\r\n\t\t\tappDomainName,\r\n\t\t\tsizeof(propertyKeys) / sizeof(char*),   // Property count\r\n\t\t\tpropertyKeys,       // Property names\r\n\t\t\tpropertyValues,     // Property values\r\n\t\t\t&hostHandle,        // Host handle\r\n\t\t\t&domainId);         // AppDomain ID\r\n       }\r\n```\r\n\r\nThis works fine for standard operation - multiple calls call the init once, and then just re-use the hostHandle and domainId for the actual invocation to create a proxy. \r\n\r\nBut if the host clears memory the domainId goes away and neither it or hostHandle are available for the required delegate invokations later. If I call the delegate a second time  I get an 'Invalid Operation' error.\r\n\r\nI think it would be useful to allow for this API to return the one and only **existing** runtime reference and repopulate the hostHandle and domainId if this is called subsequent times.\r\n\r\nEither that or provide some way to attach to find an existing (or rather the only one) runtime and re-populate the hostHandle and domainId.\r\n\r\nClassic .NET hosting allowed for this and simply returned the existing default AppDomain which seems to be a good alternative.\r\n\r\nI realize _this is a bit of a special case_ (releasing all memory) but I've not found a way around this issue, which is kind of a deal breaker for using .NET Core (over classic .NET Framework) on a technicality. \r\n","Url":"https://github.com/dotnet/coreclr/issues/25246","RelatedDescription":"Open issue \"InitializeCoreClr() and multiple calls\" (#25246)"},{"Id":"457771509","IsPullRequest":false,"CreatedAt":"2019-06-19T02:06:44","Actor":"VincentBu","Number":"25245","RawContent":null,"Title":"Test failed: JIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190617.1/workItem/JIT.jit64.opt/analysis/xunit/JIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_~2F_opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh\r\n\r\n**Failed tests:**\r\nJIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      /datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Work/f12f573f-8b1f-4062-868b-c339cea75cbc/Exec/JIT/jit64/Reports/JIT.jit64/opt/rngchk/ArrayWithThread_o/ArrayWithThread_o.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Payload/corerun ArrayWithThread_o.exe ''\r\nTest 1 Failed\r\nTest 2 Passed\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Payload\r\n> /datadisks/disk1/work/008d0f9c-767e-4400-b1f7-04862694c6ba/Work/f12f573f-8b1f-4062-868b-c339cea75cbc/Exec/JIT/jit64/opt/rngchk/ArrayWithThread_o/ArrayWithThread_o.sh\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25245","RelatedDescription":"Open issue \"Test failed: JIT_jit64._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_._opt_rngchk_ArrayWithThread_o_ArrayWithThread_o_sh\" (#25245)"},{"Id":"457768469","IsPullRequest":false,"CreatedAt":"2019-06-19T01:51:45","Actor":"VincentBu","Number":"25244","RawContent":null,"Title":"Assert failure: HasPerInstInfo()","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190616.1/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_~2F_CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_cmd\r\n\r\n**Failed tests:**\r\nJIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4460 [0x0000116c], Thread: 3048 [0x0be8]): HasPerInstInfo()\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\methodtable.h Line: 2955\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Work\\\\e39edb3b-c408-480c-a752-84aca6598fdc\\\\Exec\\\\JIT\\\\Performance\\\\Reports\\\\JIT.Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-5\\\\regex-redux-5.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Payload\\\\corerun.exe\\\" regex-redux-5.exe \r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\d612e967-3739-4ea0-bbcf-da077764d85b\\\\Work\\\\e39edb3b-c408-480c-a752-84aca6598fdc\\\\Exec\\\\JIT\\\\Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-5\\\\regex-redux-5.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25244","RelatedDescription":"Open issue \"Assert failure: HasPerInstInfo()\" (#25244)"},{"Id":"457767883","IsPullRequest":false,"CreatedAt":"2019-06-19T01:48:54","Actor":"VincentBu","Number":"25243","RawContent":null,"Title":"Assert failure: !CREATE_CHECK_STRING(pMT && pMT->Validate())","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190616.1/workItem/baseservices.threading/analysis/xunit/baseservices_threading._interlocked_compareexchange_compareexchangeint_compareexchangeint_~2F_interlocked_compareexchange_compareexchangeint_compareexchangeint_cmd\r\n\r\n**Failed tests:**\r\nbaseservices_threading._interlocked_compareexchange_compareexchangeint_compareexchangeint_._interlocked_compareexchange_compareexchangeint_compareexchangeint_cmd()\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 5140 [0x00001414], Thread: 856 [0x0358]): !CREATE_CHECK_STRING(pMT && pMT->Validate())\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x20CFD5 (0x71ed5f65)\r\nCORECLR! GetCLRRuntimeHost + 0x20CD51 (0x71ed5ce1)\r\nCORECLR! GetCLRRuntimeHost + 0x20D474 (0x71ed6404)\r\nCORECLR! GetCLRRuntimeHost + 0x1B64B2 (0x71e7f442)\r\nCORECLR! GetCLRRuntimeHost + 0x1B6402 (0x71e7f392)\r\nCORECLR! GetCLRRuntimeHost + 0x423EE7 (0x720ece77)\r\nCORECLR! GetCLRRuntimeHost + 0x864D9 (0x71d4f469)\r\nCORECLR! GetCLRRuntimeHost + 0x87B0A (0x71d50a9a)\r\nCORECLR! GetCLRRuntimeHost + 0x8791C (0x71d508ac)\r\nCORECLR! GetCLRRuntimeHost + 0x531464 (0x721fa3f4)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\object.cpp Line: 597\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Work\\\\210d9a54-e3d6-46a0-a8d8-4134a10fda50\\\\Exec\\\\baseservices\\\\threading\\\\Reports\\\\baseservices.threading\\\\interlocked\\\\compareexchange\\\\compareexchangeint\\\\compareexchangeint.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Payload\\\\corerun.exe\\\" compareexchangeint.exe \r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\5b5c1116-6f7e-4d57-a589-44eabce78c88\\\\Work\\\\210d9a54-e3d6-46a0-a8d8-4134a10fda50\\\\Exec\\\\baseservices\\\\threading\\\\interlocked\\\\compareexchange\\\\compareexchangeint\\\\compareexchangeint.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25243","RelatedDescription":"Open issue \"Assert failure: !CREATE_CHECK_STRING(pMT && pMT->Validate())\" (#25243)"},{"Id":"457766772","IsPullRequest":false,"CreatedAt":"2019-06-19T01:42:54","Actor":"VincentBu","Number":"25242","RawContent":null,"Title":"Test failed: baseservices_threading._threadstatic_threadstatic07_threadstatic07_._threadstatic_threadstatic07_threadstatic07_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190616.1/workItem/baseservices.threading/analysis/xunit/baseservices_threading._threadstatic_threadstatic07_threadstatic07_~2F_threadstatic_threadstatic07_threadstatic07_cmd\r\n\r\n**Failed tests:**\r\nbaseservices_threading._threadstatic_threadstatic07_threadstatic07_._threadstatic_threadstatic07_threadstatic07_cmd\r\n\r\n**Log:**\r\n```\r\nProcess terminated. Assertion failed.\r\nA QueueUserWorkItemCallback was never called!\r\n   at System.Threading.QueueUserWorkItemCallbackBase.Finalize()\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Work\\\\39898ba4-9c86-4f7e-8e8a-a031500af3b1\\\\Exec\\\\baseservices\\\\threading\\\\Reports\\\\baseservices.threading\\\\threadstatic\\\\threadstatic07\\\\threadstatic07.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Payload\\\\corerun.exe\\\" threadstatic07.exe \r\nHello NBA Fans!!\r\nThreadStatic test 2: Various reading and writing of Threadstatic variables.\r\n1, 2, 3, 4, 6/16/2019 10:15:27 PM, John Stockton\r\n-1, -2, -3, -4, 6/16/2019 10:15:27 PM, Karl Malone\r\nThreadStarted.. 6\r\nThreadStarted.. 9\r\nThreadStarted.. 8\r\nThreadStarted.. 10\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: -1, -1, -1, -1, 6/16/2019 10:15:32 PM, 1\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nAA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nAAA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nThreadStarted.. 7\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 10, 10, 10, 10, 6/16/2019 10:15:32 PM, 10\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nAA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nAAA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 7, 7, 7, 7, 6/16/2019 10:15:32 PM, 7\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nAA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nAAA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nX: 0, 9\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 9, 9, 9, 9, 6/16/2019 10:15:32 PM, 9\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nAA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nAAA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nX: 0, 6\r\nThreadpool Started.. 4\r\nTP A: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP AA: 6, 6, 6, 6, 6/16/2019 10:15:32 PM, 6\r\nTP AAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP A: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nTP AA: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nTP AAA: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nX: 0, 4\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 4, 4, 4, 4, 6/16/2019 10:15:32 PM, 4\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nAA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nAAA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nX: 0, 8\r\nThreadStarted.. 5\r\nA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nAA: 8, 8, 8, 8, 6/16/2019 10:15:32 PM, 8\r\nAAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nAA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nAAA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nX: 0, 5\r\nX: 0, 10\r\nX: 0, 7\r\nThreadpool Started.. 3\r\nTP A: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP AA: 5, 5, 5, 5, 6/16/2019 10:15:32 PM, 5\r\nTP AAA: 0, 0, 0, 0, 1/1/0001 12:00:00 AM, \r\nTP A: 3, 3, 3, 3, 6/16/2019 10:15:32 PM, 3\r\nTP AA: 3, 3, 3, 3, 6/16/2019 10:15:32 PM, 3\r\nTP AAA: 3, 3, 3, 3, 6/16/2019 10:15:32 PM, 3\r\nX: 0, 3\r\nMain A: 1, 1, 1, 1, 6/16/2019 10:15:32 PM, 1\r\nMain AA: 1, 1, 1, 1, 6/16/2019 10:15:32 PM, 1\r\nMain AAA: 1, 1, 1, 1, 6/16/2019 10:15:32 PM, 1\r\nX: 0, 1\r\nTest Succeeded.\r\nExpected: 100\r\nActual: -2146232797\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\a84dd54d-0589-4343-9b1b-dc7dfeb2c6cd\\\\Work\\\\39898ba4-9c86-4f7e-8e8a-a031500af3b1\\\\Exec\\\\baseservices\\\\threading\\\\threadstatic\\\\threadstatic07\\\\threadstatic07.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25242","RelatedDescription":"Open issue \"Test failed: baseservices_threading._threadstatic_threadstatic07_threadstatic07_._threadstatic_threadstatic07_threadstatic07_cmd\" (#25242)"},{"Id":"457762707","IsPullRequest":false,"CreatedAt":"2019-06-19T01:22:07","Actor":"VincentBu","Number":"25241","RawContent":null,"Title":"Test failed: System.Net.WebSockets.Client.Tests.ConnectTest/ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation ","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190617.1/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.ConnectTest~2FConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation\r\n\r\n**Failed tests:**\r\nSystem.Net.WebSockets.Client.Tests.ConnectTest/ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation\r\n\r\n**Log:**\r\n```\r\nSystem.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 83\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 111\r\n   at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in /_/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 83\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /_/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 66\r\n   at System.Net.WebSockets.Client.Tests.ConnectTest.ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation() in /_/src/System.Net.WebSockets.Client/tests/ConnectTest.cs:line 237\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25241","RelatedDescription":"Open issue \"Test failed: System.Net.WebSockets.Client.Tests.ConnectTest/ConnectAsync_NonStandardRequestHeaders_HeadersAddedWithoutValidation \" (#25241)"},{"Id":"457761174","IsPullRequest":true,"CreatedAt":"2019-06-19T01:14:27","Actor":"echesakovMSFT","Number":"25240","RawContent":null,"Title":"[WIP] Triage issues in #25098","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25240","RelatedDescription":"Open PR \"[WIP] Triage issues in #25098\" (#25240)"},{"Id":"457742395","IsPullRequest":false,"CreatedAt":"2019-06-18T23:40:45","Actor":"sbomer","Number":"25239","RawContent":null,"Title":"Set up illink test jobs","State":"open","Body":"We used to run illink jobs on the old infrastructure. They have been broken for a long time as they relied on build commands that changed in the linker repo, and had some other issues as well. We now get validation from running the mono/linker tests, which are actually designed to exercise various linker behaviors, on .NET Core. We may still want to run illink on the .NET Core tests for additional validation - this issue tracks that work.","Url":"https://github.com/dotnet/coreclr/issues/25239","RelatedDescription":"Open issue \"Set up illink test jobs\" (#25239)"},{"Id":"457721913","IsPullRequest":false,"CreatedAt":"2019-06-18T22:20:34","Actor":"noahfalk","Number":"25238","RawContent":null,"Title":"[Code cleanup] We have many macros named ETW* that are not specific to ETW","State":"open","Body":"Throughout the runtime there are macros such as ETW_TRACING_CATEGORY_ENABLED, EtwFireEvent(), or ETW::\\*Log::\\* that were originally used exclusively for ETW. Many of these APIs now apply equally to ETW, Lttng, or EventPipe but the naming obscures this. If you know the naming the is bad in this way then it is hard to distinguish the portions of the tracing code that are ETW agnostic from the smaller subsection that is in fact still ETW specific because ETW terminology is used indiscriminately.\r\n\r\nWe need to pick better names and do a rename, but only on the scope of code that is ETW agnostic.\r\n\r\ncc @dotnet/dotnet-diag ","Url":"https://github.com/dotnet/coreclr/issues/25238","RelatedDescription":"Open issue \"[Code cleanup] We have many macros named ETW* that are not specific to ETW\" (#25238)"},{"Id":"457457339","IsPullRequest":true,"CreatedAt":"2019-06-18T21:17:41","Actor":"dotnet-maestro[bot]","Number":"25223","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190618.02\r\n- **Date Produced**: 6/18/2019 11:39 AM\r\n- **Commit**: 00df5c6b304566a04d15dcdadfda710d73dd950b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27818-02\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25223","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25223)"},{"Id":"457640896","IsPullRequest":true,"CreatedAt":"2019-06-18T20:59:49","Actor":"BruceForstall","Number":"25235","RawContent":null,"Title":"Reduce corefx testing load","State":"closed","Body":"Have azure-pipelines.yml specify the Helix queue group to use instead of platform-matrix.yml determining it by consulting the Build.Reason variable. This allows the corefx testing to force using a smaller queue group (just one queue per platform), to reduce corefx test load in the system. We don't believe running corefx-on-coreclr testing across multiple queues (e.g., different versions of Windows, or different flavors of Linux) provides valuable additional coverage above single queue coverage, and it has a high cost.","Url":"https://github.com/dotnet/coreclr/pull/25235","RelatedDescription":"Closed or merged PR \"Reduce corefx testing load\" (#25235)"},{"Id":"457632685","IsPullRequest":true,"CreatedAt":"2019-06-18T20:44:01","Actor":"jashook","Number":"25234","RawContent":null,"Title":"Fix 25233","State":"closed","Body":"Fixes copy paste issues and delayed expansion issues.","Url":"https://github.com/dotnet/coreclr/pull/25234","RelatedDescription":"Closed or merged PR \"Fix 25233\" (#25234)"},{"Id":"457685519","IsPullRequest":false,"CreatedAt":"2019-06-18T20:40:48","Actor":"chuckries","Number":"25237","RawContent":null,"Title":"Managed Data Breakpoints don't work on Windows 7 when targeting x64.","State":"open","Body":"**It is important that this gets fixed for .NET Core 3.0**\r\n\r\nAs the title says, managed data breakpoints do not work on Windows 7 against an x64 target app. They appear to work when targeting x86.\r\n\r\nRepro steps:\r\n1. Get a machine running Windows 7\r\n2. Install VS 2019 (either release or public preview)\r\n3. Install .NET Core 3.0 Preview 6.\r\n4. Create a new console app with the following code:\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Test\r\n    {\r\n        public int One { get; set; }\r\n        public int Two { get; set; }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Test t = new Test();\r\n            Console.WriteLine(\"Hello World!\"); // <-- bp here\r\n            t.One = 1;\r\n            t.Two = 2;\r\n        }\r\n    }\r\n}\r\n```\r\n5. set a breakpoint on the Console.WriteLine, run the app and stop at the breakpoint\r\n6. From locals window, expand `t`\r\n7. Right click 'One', select 'Break When Value Changes'\r\n8. Continue the process\r\n\r\nExpected: Debugger stops inside the property setter for One\r\nActual: Process continues to completion, never stops under the debugger.\r\n\r\nThis appears to be an issue with the ICorDebugProcess::SetThreadContext API, as the dr0 register is never getting written to the actual thread context, but it is returning S_OK. Therefore the debugger thinks all is well, but the data bp is never actually written into the process.","Url":"https://github.com/dotnet/coreclr/issues/25237","RelatedDescription":"Open issue \"Managed Data Breakpoints don't work on Windows 7 when targeting x64.\" (#25237)"},{"Id":"457672039","IsPullRequest":true,"CreatedAt":"2019-06-18T20:09:02","Actor":"dotnet-maestro-bot","Number":"25236","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @sandreenko\n* @dotnet-maestro[bot]\n* @MichalStrehovsky\n* @fadimounir\n* @danmosemsft\n* @noahfalk\n* @jkoritzinsky\n* @jkotas\n* @wtgodbe\n* @stephentoub\n* @janvorli\n* @hoyosjs\n* @echesakovMSFT\n* @davmason\n* @adamsitnik\n* @sywhang\n* @47805090+elinor-fung\n* @jorive\n* @kouvel\n* @jashook\n* @tarekgh\n* @sergiy-k\n* @tannergooding\n* @CarolEidt\n* @AndyAyersMS\n* @andy-ms\n* @BruceForstall\n* @cshung\n* @davidwrighton\n* @maryamariyan\n* @sdmaclea\n* @VSadov\n* @safern\n* @AaronRobinsonMSFT\n* @brianrob\n* @Maoni0\n* @mikedn\n* @josalem\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/25236","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#25236)"},{"Id":"457611620","IsPullRequest":false,"CreatedAt":"2019-06-18T17:41:19","Actor":"mikem8361","Number":"25233","RawContent":null,"Title":"The Window x86 and x64 Release legs in the dotnet-coreclr official are failing ","State":"open","Body":"The Window x86 and x64 Release legs in the dotnet-coreclr official are failing with this:\r\n\r\n```\r\nRunning: dotnet msbuild \"F:\\workspace\\_work\\1\\s\\src\\.nuget\\optdata\\ibcmerge.csproj\" /t:DumpIbcMergePackageVersion /nologo /p:__BuildOS=Windows_NT /p:__BuildType=Release /p:__BuildArch=x64 /p:RestoreDuringBuild=true /p:OfficialBuildId=20190617.5 /p:IbcMergePackageVersionOutputFile=\r\nF:\\workspace\\_work\\1\\s\\src\\.nuget\\optdata\\ibcmerge.csproj(24,5): error : IbcMergePackageVersionOutputFile must be passed as a property.\r\n\"Failed to determine IBC Merge version.\"\r\n##[error]Cmd.exe exited with code '1'.\r\n##[section]Finishing: Build product\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/internal/_build/results?buildId=228006\r\n\r\nI (with Juan's help) fixed a few delayed expansion problems in build.cmd but the ibcmerge needs to be installed/restored.\r\n\r\n```\r\nRunning: dotnet msbuild \"F:\\workspace\\_work\\1\\s\\src\\.nuget\\optdata\\ibcmerge.csproj\" /t:DumpIbcMergePackageVersion /nologo /p:__BuildOS=Windows_NT /p:__BuildType=Release /p:__BuildArch=x64 /p:RestoreDuringBuild=true /p:OfficialBuildId=20190617.9 /p:IbcMergePackageVersionOutputFile=\"\"F:\\workspace\\_work\\1\\s\\bin\\obj\\Windows_NT.x64.Release\\ibcmergeversion.txt\"\"\r\n  IbcMergePackageVersion: 5.0.6-beta.19203.1 written to: F:\\workspace\\_work\\1\\s\\bin\\obj\\Windows_NT.x64.Release\\ibcmergeversion.txt\r\nCould not find IBCMerge at F:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.ibcmerge\\99.99.99-master-20190614.1\\tools\\netcoreapp2.0\\ibcmerge.dll. Have you restored src/.nuget/optdata/ibcmerge.csproj?\r\n##[error]Cmd.exe exited with code '1'.\r\n```\r\n\r\nbuild.cmd changes;\r\n\r\n```\r\ndiff --git a/build.cmd b/build.cmd\r\nindex f3090e7f79..1f6fbebfbb 100644\r\n--- a/build.cmd\r\n+++ b/build.cmd\r\n@@ -659,18 +659,18 @@ if %__BuildCoreLib% EQU 1 (\r\n         echo %__MsgPrefix%Commencing IBCMerge of System.Private.CoreLib for %__BuildOS%.%__BuildArch%.%__BuildType%\r\n         set IbcMergeProjectFilePath=%__ProjectDir%\\src\\.nuget\\optdata\\ibcmerge.csproj\r\n         set IbcMergePackageVersionOutputFile=\"%__IntermediatesDir%\\ibcmergeversion.txt\"\r\n-        call \"%__ProjectDir%\\dotnet.cmd\" msbuild \"!IbcMergeProjectFilePath!\" /t:DumpIbcMergePackageVersion /nologo %__CommonMSBuildArgs% /p:IbcMergePackageVersionOutputFile=%IbcMergePackageVersionOutputFile%\r\n+        call \"%__ProjectDir%\\dotnet.cmd\" msbuild \"!IbcMergeProjectFilePath!\" /t:DumpIbcMergePackageVersion /nologo %__CommonMSBuildArgs% /p:IbcMergePackageVersionOutputFile=\"!IbcMergePackageVersionOutputFile!\"\r\n\r\n         if not !errorlevel! == 0 (\r\n             echo \"Failed to determine IBC Merge version.\"\r\n             exit /b !errorlevel!\r\n         )\r\n-        if not exist \"%IbcMergePackageVersionOutputFile%\" (\r\n+        if not exist \"!IbcMergePackageVersionOutputFile!\" (\r\n             echo \"Failed to determine IBC Merge version.\"\r\n             exit /b 1\r\n         )\r\n\r\n-        set /p __IbcMergeVersion=<\"%IbcMergePackageVersionOutputFile%\"\r\n+        set /p __IbcMergeVersion=<\"!IbcMergePackageVersionOutputFile!\"\r\n\r\n         set IbcMergePath=%__PackagesDir%\\microsoft.dotnet.ibcmerge\\!__IbcMergeVersion!\\tools\\netcoreapp2.0\\ibcmerge.dll\r\n         if exist !IbcMergePath! (\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25233","RelatedDescription":"Open issue \"The Window x86 and x64 Release legs in the dotnet-coreclr official are failing \" (#25233)"},{"Id":"457580891","IsPullRequest":false,"CreatedAt":"2019-06-18T16:29:38","Actor":"tommcdon","Number":"25232","RawContent":null,"Title":"EventPipe sessions should only listen to events they have requested","State":"open","Body":"Track active listening sessions on `EventPipeEvent` (using a 64-bit mask). Currently, providers track listening session by using a 64-bit bitmask. We should track at the event level instead, so sessions will listen to the events they requested.","Url":"https://github.com/dotnet/coreclr/issues/25232","RelatedDescription":"Open issue \"EventPipe sessions should only listen to events they have requested\" (#25232)"},{"Id":"457577589","IsPullRequest":false,"CreatedAt":"2019-06-18T16:22:17","Actor":"CarolEidt","Number":"25231","RawContent":null,"Title":"Liveness assert in RayTracer","State":"open","Body":"Found in https://github.com/dotnet/coreclr/pull/25120","Url":"https://github.com/dotnet/coreclr/issues/25231","RelatedDescription":"Open issue \"Liveness assert in RayTracer\" (#25231)"},{"Id":"457577578","IsPullRequest":true,"CreatedAt":"2019-06-18T16:22:16","Actor":"maryamariyan","Number":"25230","RawContent":null,"Title":"Reenable temporarily disabled Debug.Print corefx tests","State":"open","Body":"Concludes: https://github.com/dotnet/corefx/issues/38359\r\n\r\ncc: @stephentoub @adamsitnik \r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25230","RelatedDescription":"Open PR \"Reenable temporarily disabled Debug.Print corefx tests\" (#25230)"},{"Id":"457576640","IsPullRequest":false,"CreatedAt":"2019-06-18T16:20:21","Actor":"tommcdon","Number":"25229","RawContent":null,"Title":"Prevent EventPipe Sessions IDs from being reused on disconnect","State":"open","Body":"This issue is tracking reverting the EventPipeSessionID to be address of the pointer instead of the bit mask.  See https://github.com/dotnet/coreclr/pull/24417#discussion_r286384780","Url":"https://github.com/dotnet/coreclr/issues/25229","RelatedDescription":"Open issue \"Prevent EventPipe Sessions IDs from being reused on disconnect\" (#25229)"},{"Id":"457574859","IsPullRequest":false,"CreatedAt":"2019-06-18T16:16:31","Actor":"tommcdon","Number":"25228","RawContent":null,"Title":"EventPipe does not properly dispose of itself on an active session error","State":"open","Body":"Add a mechanism that can notify EventPipe when there is an error on an active session, so it can be disposed properly from the list of active sessions.","Url":"https://github.com/dotnet/coreclr/issues/25228","RelatedDescription":"Open issue \"EventPipe does not properly dispose of itself on an active session error\" (#25228)"},{"Id":"457541227","IsPullRequest":true,"CreatedAt":"2019-06-18T15:12:54","Actor":"gbalykov","Number":"25227","RawContent":null,"Title":"Add custom default base address option to crossgen","State":"open","Body":"This PR allows to manually setup default base address option for native images during `crossgen`\r\n\r\n```\r\ncrossgen /BaseAddress <base_addr_value> <other_options>\r\n```\r\n\r\nAlso, env variable could be setup to enable/disable mapping of images at default base address.\r\n\r\ncc @alpencolt @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/25227","RelatedDescription":"Open PR \"Add custom default base address option to crossgen\" (#25227)"},{"Id":"457462175","IsPullRequest":true,"CreatedAt":"2019-06-18T14:47:00","Actor":"dotnet-maestro[bot]","Number":"25224","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190618.1\r\n- **Date Produced**: 6/18/2019 11:22 AM\r\n- **Commit**: b016d41296329d649ab1b7161d068f5ac8fbf82e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190618.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190618.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25224","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25224)"},{"Id":"457505797","IsPullRequest":false,"CreatedAt":"2019-06-18T14:09:48","Actor":"Anna-Guseva","Number":"25226","RawContent":null,"Title":"gcConcurrent flag in App.config is not taken into account for .net core 3.0 apps","State":"open","Body":"I created a simple console app with target framework .NET Core 3.0 (preview6 is installed on my machine). 'gcServer enabled' is set to false and gcConcurrent enabled=false in App.config.\r\n\r\n```\r\n<configuration>\r\n  <runtime>\r\n    <gcServer enabled=\"false\"/> \r\n    <gcConcurrent enabled=\"false\"/>\r\n  </runtime>\r\n</configuration>\r\n```\r\n\r\nWhen I try to attach memory profiler to already started app, attach fails with ```CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE``` error.\r\n\r\nIt looks like concurrent GC isn't disabled despite the config file.","Url":"https://github.com/dotnet/coreclr/issues/25226","RelatedDescription":"Open issue \"gcConcurrent flag in App.config is not taken into account for .net core 3.0 apps\" (#25226)"},{"Id":"457504764","IsPullRequest":false,"CreatedAt":"2019-06-18T14:07:53","Actor":"ww898","Number":"25225","RawContent":null,"Title":"Concurrent GC isn't disabled automatically when attach memory profiler to .NET Core v3.0.0-preview6 process","State":"open","Body":"I receive `CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE` for memory profiler during `SetEventMask` call in `InitializeForAttach` callback. The error appears under .NET Core v3.0.0-preview6, but the same code works properly under .NET Framework v4.5+.\r\n\r\nP.S. I assume that there is the bug with attach thread detection: https://github.com/dotnet/coreclr/blob/be5445e56ea2bdb6de907e3f892ca732fc802f0f/src/vm/eetoprofinterfaceimpl.cpp#L2389-L2396","Url":"https://github.com/dotnet/coreclr/issues/25225","RelatedDescription":"Open issue \"Concurrent GC isn't disabled automatically when attach memory profiler to .NET Core v3.0.0-preview6 process\" (#25225)"},{"Id":"457448949","IsPullRequest":true,"CreatedAt":"2019-06-18T12:23:46","Actor":"dotnet-maestro[bot]","Number":"25222","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190618.2\r\n- **Date Produced**: 6/18/2019 8:19 AM\r\n- **Commit**: dc538a29793fd56618d0fa3186e2388d47d00c19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19318.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19318.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25222","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25222)"},{"Id":"457305198","IsPullRequest":true,"CreatedAt":"2019-06-18T07:25:34","Actor":"sywhang","Number":"25221","RawContent":null,"Title":"[WIP] Fix eventpipe filtering","State":"open","Body":"Addresses EventPipe part of #23087 - LTTng part will follow since the PR was getting too large with both changes. \r\n\r\ncc @jorive @cshung @tommcdon ","Url":"https://github.com/dotnet/coreclr/pull/25221","RelatedDescription":"Open PR \"[WIP] Fix eventpipe filtering\" (#25221)"},{"Id":"457218757","IsPullRequest":true,"CreatedAt":"2019-06-18T01:39:07","Actor":"mikem8361","Number":"25220","RawContent":null,"Title":"Remove SOS and lldb plugin","State":"open","Body":"Issue: https://github.com/dotnet/coreclr/issues/24092","Url":"https://github.com/dotnet/coreclr/pull/25220","RelatedDescription":"Open PR \"Remove SOS and lldb plugin\" (#25220)"},{"Id":"457218124","IsPullRequest":true,"CreatedAt":"2019-06-18T01:36:05","Actor":"stephentoub","Number":"25219","RawContent":null,"Title":"Reduce string allocation in DiagnosticCounter.GetMetadataString","State":"open","Body":"When the _metadata dictionary contains a single key/value pair, the method ends up allocating an unnecessary StringBuilder, char[] beneath it, and input string. When the _metadata dictionary contains more key/value pairs, the method ends up allocating an unnecessary string per key/value pair.\r\n\r\n(I don't know how important allocations here are.  If they don't really matter, feel free to close this.  If they're really important, we could subsequently take it a step further and store the StringBuilder instance onto the DiagnosticCounter instance, or use a ValueStringBuilder, or so on.)\r\n\r\ncc: @sywhang, @jkotas","Url":"https://github.com/dotnet/coreclr/pull/25219","RelatedDescription":"Open PR \"Reduce string allocation in DiagnosticCounter.GetMetadataString\" (#25219)"},{"Id":"457217185","IsPullRequest":true,"CreatedAt":"2019-06-18T01:31:15","Actor":"echesakovMSFT","Number":"25218","RawContent":null,"Title":"Fix JIT.superpmi\\superpmicollect broken on ReadyToRun jobs","State":"open","Body":"Fix https://github.com/dotnet/coreclr/issues/22027","Url":"https://github.com/dotnet/coreclr/pull/25218","RelatedDescription":"Open PR \"Fix JIT.superpmi\\superpmicollect broken on ReadyToRun jobs\" (#25218)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"457705721","IsPullRequest":true,"CreatedAt":"2019-06-18T21:31:10","Actor":"livarcocc","Number":"11583","RawContent":null,"Title":"Update MSBuild to 16.2.0-preview-19318-05","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11583","RelatedDescription":"Open PR \"Update MSBuild to 16.2.0-preview-19318-05\" (#11583)"},{"Id":"457704645","IsPullRequest":true,"CreatedAt":"2019-06-18T21:28:16","Actor":"livarcocc","Number":"11582","RawContent":null,"Title":"Update MSBuild to 16.2.0-preview-19318-05","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11582","RelatedDescription":"Open PR \"Update MSBuild to 16.2.0-preview-19318-05\" (#11582)"},{"Id":"457619529","IsPullRequest":false,"CreatedAt":"2019-06-18T18:00:36","Actor":"peterhuene","Number":"11581","RawContent":null,"Title":"Implement improvements for SDK resolution in global.json.","State":"open","Body":"Tracking issue for implementing backwards-compatible improvements to global.json for .NET Core SDK resolution.\n\nThis feature will give users more flexibility in determining how SDKs are resolved by the command line tools.\n\nCurrently, a SDK version specified in `global.json` will always use the specified version or roll-forward to a compatible patch level if not found.\n\nThe improvement will allow users to prevent rolling-forward or given more control over how the roll-forward is performed.\n\nTODO: link to public design document once available.","Url":"https://github.com/dotnet/cli/issues/11581","RelatedDescription":"Open issue \"Implement improvements for SDK resolution in global.json.\" (#11581)"},{"Id":"456378466","IsPullRequest":false,"CreatedAt":"2019-06-18T17:37:42","Actor":"peterhuene","Number":"11564","RawContent":null,"Title":"'Dotnet.exe publish' silently creates bad format for mis-matching architectures","State":"closed","Body":"@jjxtra commented on [Thu Jun 13 2019](https://github.com/dotnet/core/issues/2869)\n\nWhen using `dotnet.exe publish` for specific runtimes, say win-x86, if using the 64 bit dotnet.exe, this runs without error, but when running the result executable, a `BadImageFormatException `is thrown. Same with target win-x64 from 32 bit dotnet.exe\r\n\r\nIt should be an error to create a runtime with the wrong 32 bit or 64 bit dotnet.exe, there should be an exception clearly stating that you need to run the dotnet.exe with the same architecture as the runtime you are targetting.\r\n\r\nAfter two days of pain, I finally realized I had to fully qualify the path to dotnet.exe as I had both 32 bit and 64 bit sdk installed. So now for my 32 bit runtime targets, I use the 32 bit dotnet.exe, for the 64 bit targets, the 64 bit dotnet.exe. All run fine without errors.\r\n\r\nPlease add this as an error condition and save many, many people a lot of pain, headaches and frustration.\r\n\r\nExample that fixes the problem in powershell:\r\n\r\n```powershell\r\n& \"c:/program files/dotnet/dotnet.exe\" publish Project.csproj -f netcoreapp2.2 -o package/linux-x64 -c Release -r linux-x64\r\n& \"c:/program files (x86)/dotnet/dotnet.exe\" publish Project.csproj -f netcoreapp2.2 -o package/win-x86 -c Release -r win-x86\r\n```\n\n---\n\n@karelz commented on [Fri Jun 14 2019](https://github.com/dotnet/core/issues/2869#issuecomment-502213331)\n\n@livarcocc @nguerrera does it belong to CLI or core-setup?\n\n---\n\n@livarcocc commented on [Fri Jun 14 2019](https://github.com/dotnet/core/issues/2869#issuecomment-502213616)\n\nCLI would be a good starting point. We can move it to core-setup if the issue was in the production of the apphost.\r\n\r\ncc @peterhuene \n\n","Url":"https://github.com/dotnet/cli/issues/11564","RelatedDescription":"Closed issue \"'Dotnet.exe publish' silently creates bad format for mis-matching architectures\" (#11564)"},{"Id":"457441420","IsPullRequest":true,"CreatedAt":"2019-06-18T17:34:53","Actor":"dotnet-maestro[bot]","Number":"11576","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190618.2\r\n- **Date Produced**: 6/18/2019 8:19 AM\r\n- **Commit**: dc538a29793fd56618d0fa3186e2388d47d00c19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19318.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11576","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11576)"},{"Id":"457432436","IsPullRequest":false,"CreatedAt":"2019-06-18T17:16:52","Actor":"chrisbecke","Number":"11575","RawContent":null,"Title":"dotnet publish recursivly publishes its own output","State":"closed","Body":"## Steps to reproduce\r\ncreate a new dotnet core application, and publish it multiple times using the -o option\r\n\r\n```\r\nmkdir aspnetpublishtest\r\ncd aspnetpublishtest\r\ndotnet publish -o publish\r\ndotnet publish -o publish\r\n```\r\n\r\n## Expected  behavior\r\nThe publish folder should be unaltered on the 2nd call to publish\r\n\r\n## Actual behavior\r\nThe publish folder contains a copy of the publish folder for each call to publish.\r\n\r\n## Discussion\r\nWhile the problem doesn't occur in the default (bin/) output location, this seems an easy situation to end up in as it seems a common practice in CI/CD to use a folder with a stable name in the project tp publish to.","Url":"https://github.com/dotnet/cli/issues/11575","RelatedDescription":"Closed issue \"dotnet publish recursivly publishes its own output\" (#11575)"},{"Id":"457583974","IsPullRequest":false,"CreatedAt":"2019-06-18T17:08:31","Actor":"basbossink","Number":"11580","RawContent":null,"Title":"dotnet nuget push --no-symbols requires option value while documented as switch","State":"closed","Body":"## Steps to reproduce\r\n\r\nRun \r\n```\r\ndotnet nuget push *.nupkg --api-key api-key --source https://api.nuget.org/v3/index.json --no-symbols\r\n```\r\n\r\n## Expected  behavior\r\nPackages successfully pushed to NuGet.\r\n\r\n## Actual behavior\r\n`dotnet nuget push` returns:\r\n```\r\nMissing value for option 'no-symbols'\r\n```\r\nChanging the above command to:\r\n```\r\ndotnet nuget push *.nupkg --api-key api-key --source https://api.nuget.org/v3/index.json --no-symbols true\r\n```\r\ngives the expected result.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\nVersion:   2.2.300\r\nCommit:    73efd5bd87\r\n\r\nRuntime Environment:\r\nOS Name:     Windows\r\nOS Version:  10.0.17134\r\nOS Platform: Windows\r\nRID:         win10-x64\r\nBase Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300\\\r\n\r\nHost (useful for support):\r\n Version: 2.2.5\r\n Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n 2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n 2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n 2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11580","RelatedDescription":"Closed issue \"dotnet nuget push --no-symbols requires option value while documented as switch\" (#11580)"},{"Id":"457540685","IsPullRequest":false,"CreatedAt":"2019-06-18T15:11:48","Actor":"Jaygem","Number":"11579","RawContent":null,"Title":"Feature Request : dotnet add file -lang [C#/F#] [MyClass/MyScript]","State":"open","Body":"Context : \r\n\r\nadding a class file/script file to the project. I'm currently using Ionide for F# and a 3rd party extension of VsCode to add a C# class file. Else i'm forced to add the file manually and rewrite the boilerplate code (usings and namespaces)\r\n\r\nPossible use : \r\n\r\nC#\r\n```powershell\r\ndotnet add file -lang C# MyClass\r\n```\r\n\r\nF#\r\n```powershell\r\ndotnet add file -lang F# MyScript\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11579","RelatedDescription":"Open issue \"Feature Request : dotnet add file -lang [C#/F#] [MyClass/MyScript]\" (#11579)"},{"Id":"457540344","IsPullRequest":false,"CreatedAt":"2019-06-18T15:11:08","Actor":"daniefer","Number":"11578","RawContent":null,"Title":"dotnet pack fails because command builds project into wrong target directory","State":"open","Body":"Using this simple repo: https://github.com/daniefer/dotnetcliissue\r\nWhen the `<GeneratePackageOnBuild>true</GeneratePackageOnBuild>` project attribute is specified and the project has not been built with `dotnet build` before hand, the build will target netcoreapp2.2 instead of the target framework specified with the `<TargetFramework>netstandard2.0</TargetFramework>` attribute.  When this happens running `dotnet pack` will build the project into the `bin/Debug/netcoreapp2.2` folder instead of `bin/Debug/netstandard2.0` and the pack command will fail with the below error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.300\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(199,5): error NU5026: The file 'C:\\Repos\\dotnetcliissue\\bin\\Debug\\netstandard2.0\\testing.dll' to be packed was not found on disk. [C:\\Repos\\dotnetcliissue\\testing.csproj]\r\n```\r\n\r\n## Steps to reproduce\r\nClone https://github.com/daniefer/dotnetcliissue\r\nEnsure bin/Debug is empty\r\nRun `dotnet pack` from project directory or by providing path the `*.csproj`\r\n\r\n## Expected  behavior\r\nShould pack project.\r\n\r\n## Actual behavior\r\ndotnet pack fails with below error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.300\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(199,5): error NU5026: The file 'C:\\Repos\\dotnetcliissue\\bin\\Debug\\netstandard2.0\\testing.dll' to be packed was not found on disk. [C:\\Repos\\dotnetcliissue\\testing.csproj]\r\n```\r\n\r\n## Environment data\r\nglobal.json file (location - C:\\Repos):\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.300\"\r\n  }\r\n}\r\n```\r\n\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Repos\\dotnetcliissue> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.105 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11578","RelatedDescription":"Open issue \"dotnet pack fails because command builds project into wrong target directory\" (#11578)"},{"Id":"457441642","IsPullRequest":true,"CreatedAt":"2019-06-18T12:36:57","Actor":"dotnet-maestro[bot]","Number":"11577","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190617.2\r\n- **Date Produced**: 6/17/2019 8:02 PM\r\n- **Commit**: a604702d687ad3ccdc5e0be45300588921cd7a51\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19317.2\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11577","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11577)"},{"Id":"456531276","IsPullRequest":true,"CreatedAt":"2019-06-17T23:14:20","Actor":"dotnet-maestro[bot]","Number":"11567","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11567","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11567)"},{"Id":"456897753","IsPullRequest":true,"CreatedAt":"2019-06-17T21:10:22","Actor":"dotnet-maestro[bot]","Number":"11572","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190616.1\r\n- **Date Produced**: 6/16/2019 7:58 PM\r\n- **Commit**: 77d6311a5dd7e519e6b496e97e93085bf2d3beb4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19316.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11572","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11572)"},{"Id":"457044414","IsPullRequest":false,"CreatedAt":"2019-06-17T20:14:42","Actor":"vsccarl","Number":"11574","RawContent":null,"Title":"‘Dotnet new‘ shows WPF template for VB only","State":"closed","Body":"## Steps to reproduce\r\nUsing CLI:\r\n\r\n1. Run dotnet new help \r\n```\r\ndotnet new -h\r\n```\r\n\r\n## Expected  behavior\r\nTemplate for C# is included\r\n\r\n## Actual behavior\r\n![wpfVBonly](https://user-images.githubusercontent.com/12900364/59622778-5cc88100-90e7-11e9-9ed5-fe97f16c1056.jpg)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nCLI\\SDK: 3.0.100-preview7-012422 (runtime-3.0.0-preview7-27816-02)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11574","RelatedDescription":"Closed issue \"‘Dotnet new‘ shows WPF template for VB only\" (#11574)"},{"Id":"456899046","IsPullRequest":true,"CreatedAt":"2019-06-17T18:32:56","Actor":"dotnet-maestro[bot]","Number":"11573","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190616.1\r\n- **Date Produced**: 6/16/2019 12:45 PM\r\n- **Commit**: 88feb5983d2b7bce61bcf8dff10ba74231f876f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19316.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11573","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11573)"},{"Id":"456371598","IsPullRequest":true,"CreatedAt":"2019-06-17T18:32:39","Actor":"livarcocc","Number":"11562","RawContent":null,"Title":"Updating SDK to 2.1.800-preview-64213-01","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11562","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.1.800-preview-64213-01\" (#11562)"},{"Id":"456372012","IsPullRequest":true,"CreatedAt":"2019-06-17T17:05:33","Actor":"livarcocc","Number":"11563","RawContent":null,"Title":"Update SDK to 2.2.400-preview-64213-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11563","RelatedDescription":"Closed or merged PR \"Update SDK to 2.2.400-preview-64213-02\" (#11563)"},{"Id":"456689630","IsPullRequest":true,"CreatedAt":"2019-06-16T22:39:41","Actor":"wli3","Number":"11571","RawContent":null,"Title":"ToolManifestEditor catches FormatException","State":"open","Body":"Fix https://github.com/dotnet/cli/issues/11482\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11571","RelatedDescription":"Open PR \"ToolManifestEditor catches FormatException\" (#11571)"},{"Id":"456634619","IsPullRequest":true,"CreatedAt":"2019-06-16T12:45:27","Actor":"dotnet-maestro[bot]","Number":"11570","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190615.1\r\n- **Date Produced**: 6/15/2019 12:48 PM\r\n- **Commit**: c561d7deb8e1a7ff7a73d0fd5abec8556dae922b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19315.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11570","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11570)"},{"Id":"456531818","IsPullRequest":true,"CreatedAt":"2019-06-15T12:46:30","Actor":"dotnet-maestro[bot]","Number":"11569","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190614.1\r\n- **Date Produced**: 6/14/2019 12:48 PM\r\n- **Commit**: 15694b8f9d762edfe94551c45cb5a3d9b73ca3f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19314.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11569","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11569)"},{"Id":"456531309","IsPullRequest":true,"CreatedAt":"2019-06-15T12:35:50","Actor":"dotnet-maestro[bot]","Number":"11568","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190614.1\r\n- **Date Produced**: 6/15/2019 12:47 AM\r\n- **Commit**: 1157aa7da48528f15a090fe49a0259e10b5a2163\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19314.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11568","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11568)"},{"Id":"456517057","IsPullRequest":false,"CreatedAt":"2019-06-15T09:03:06","Actor":"mallikarjunpatala","Number":"11566","RawContent":null,"Title":"Cannot find project info.... This can indicate a missing project reference , C:\\Program Files\\dotnet\\sdk\\2.1.505\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets","State":"open","Body":"## Steps to reproduce\r\nOne PCL class is referencing another PCL classs\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11566","RelatedDescription":"Open issue \"Cannot find project info.... This can indicate a missing project reference , C:\\Program Files\\dotnet\\sdk\\2.1.505\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\" (#11566)"},{"Id":"456458650","IsPullRequest":true,"CreatedAt":"2019-06-14T22:16:05","Actor":"dotnet-bot","Number":"11565","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11565","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11565)"},{"Id":"456360063","IsPullRequest":true,"CreatedAt":"2019-06-14T18:46:09","Actor":"peterhuene","Number":"11561","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.1.7xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11561","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.1.7xx\" (#11561)"},{"Id":"456071070","IsPullRequest":true,"CreatedAt":"2019-06-14T17:32:08","Actor":"peterhuene","Number":"11554","RawContent":null,"Title":"Merge release/2.2.2xx to release/2.2.3xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11554","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/2.2.3xx\" (#11554)"},{"Id":"456212804","IsPullRequest":true,"CreatedAt":"2019-06-14T17:31:16","Actor":"dotnet-bot","Number":"11555","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11555","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11555)"},{"Id":"456213334","IsPullRequest":true,"CreatedAt":"2019-06-14T17:30:48","Actor":"dotnet-maestro[bot]","Number":"11557","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190613.18\r\n- **Date Produced**: 6/13/2019 11:28 PM\r\n- **Commit**: 8952b877fa6bca387cd4321b33dcdf6778e31240\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19313.18\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11557","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11557)"},{"Id":"456296262","IsPullRequest":false,"CreatedAt":"2019-06-14T15:05:50","Actor":"enricoreich","Number":"11560","RawContent":null,"Title":"Unable to restore packages on Ubuntu 18.04 (3.0 preview7)","State":"open","Body":"Hello,\r\n\r\nI'm trying to get the latest 3.0 preview7 working on my Ubuntu 18.04 remote server using the latest tar.gz from [core-sdk](https://github.com/dotnet/core-sdk) for Linux x64.\r\nThe dotnet command is working but if I try to install new templates eg. for blazor, the restore process fires up but then -> nothing. The process stays in my process list:\r\n\r\n![Screenshot_1](https://user-images.githubusercontent.com/316637/59516876-940a1880-8ec2-11e9-968e-b2e1a6146f65.png)\r\n\r\nAfter running the command, that's all that happens:\r\n![boring](https://user-images.githubusercontent.com/316637/59518633-4d1e2200-8ec6-11e9-80b4-7535689a3f57.gif)\r\n\r\nI also tried `dotnet restore` with a newly created AspNetCoreApp project but the result is the same. \r\n\r\nAny ideas? Do I miss something here?\r\nThanks in advance!\r\n\r\n## Steps to reproduce\r\n1. Download latest preview7 tar.gz from [core-sdk](https://github.com/dotnet/core-sdk) for Linux x64\r\n2. unpack with `tar zxvf dotnet-sdk-latest-linux-x64.tar.gz -C ./dotnet3` (create destination folder befor extracting)\r\n3. setup environment variables `export DOTNET_ROOT=$HOME/dotnet3` & `export PATH=$PATH:$HOME/dotnet3`, I'm using zsh so they goes into my .zshrc (or .zprofile)\r\n4. reopen shell\r\n5. run `dotnet new -i \"Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview7.*\"`\r\n6. restore process hangs with no output or any message\r\n\r\nAlso with preview6 bits as root or user, does not make any difference.\r\nIt works on Windows 10 and WSL (Ubuntu 18.04) perfectly!\r\n\r\n## Expected  behavior\r\nThe command should restore necessary files from Nuget and install new templates so they can be used with `dotnet new`\r\n\r\n## Actual behavior\r\nRestore process hangs with no output or any message.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012398\r\n Commit:    028dd7635a\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/---/dotnet3/sdk/3.0.100-preview7-012398/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27813-06\r\n  Commit:  5cfc2cab25\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview7-012398 [/home/---/dotnet3/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19311.5 [/home/---/dotnet3/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27813-06 [/home/---/dotnet3/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11560","RelatedDescription":"Open issue \"Unable to restore packages on Ubuntu 18.04 (3.0 preview7)\" (#11560)"},{"Id":"456216241","IsPullRequest":true,"CreatedAt":"2019-06-14T12:53:25","Actor":"dotnet-maestro[bot]","Number":"11559","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190613.1\r\n- **Date Produced**: 6/13/2019 12:55 PM\r\n- **Commit**: 4f65a5662b1ce832c946f4120744b4da46f20d39\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19313.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11559","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11559)"},{"Id":"456213496","IsPullRequest":true,"CreatedAt":"2019-06-14T12:41:29","Actor":"dotnet-maestro[bot]","Number":"11558","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190613.3\r\n- **Date Produced**: 6/14/2019 1:49 AM\r\n- **Commit**: cb8c89e71323d667cac97fcbe6ad6cf95a11068a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19313.3\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11558","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11558)"},{"Id":"456212847","IsPullRequest":true,"CreatedAt":"2019-06-14T12:04:22","Actor":"dotnet-bot","Number":"11556","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11556","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11556)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"457672725","IsPullRequest":true,"CreatedAt":"2019-06-18T20:10:06","Actor":"dotnet-maestro-bot","Number":"1260","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @dotnet-maestro[bot]\n* @terrajobst\n* @wtgodbe\n* @safern\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/standard/pull/1260","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#1260)"},{"Id":"457468774","IsPullRequest":true,"CreatedAt":"2019-06-18T13:13:08","Actor":"dotnet-maestro[bot]","Number":"1259","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190618.1\r\n- **Date Produced**: 6/18/2019 9:46 AM\r\n- **Commit**: 1fca079ddec2aabf56e256dab03e39b31b5036c7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19318.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19318.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19318.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1259","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1259)"},{"Id":"457440540","IsPullRequest":true,"CreatedAt":"2019-06-18T12:14:19","Actor":"dotnet-maestro[bot]","Number":"1258","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190618.2\r\n- **Date Produced**: 6/18/2019 8:19 AM\r\n- **Commit**: dc538a29793fd56618d0fa3186e2388d47d00c19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19318.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19318.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1258","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1258)"},{"Id":"456916169","IsPullRequest":true,"CreatedAt":"2019-06-17T12:58:44","Actor":"dotnet-maestro[bot]","Number":"1257","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190617.2\r\n- **Date Produced**: 6/17/2019 11:31 AM\r\n- **Commit**: 7acfe7156497d667fc39bc1cdb5a7e95d12f5dca\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19317.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19317.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19317.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1257","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1257)"},{"Id":"456638679","IsPullRequest":true,"CreatedAt":"2019-06-16T13:06:10","Actor":"dotnet-maestro[bot]","Number":"1256","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190615.6\r\n- **Date Produced**: 6/16/2019 6:29 AM\r\n- **Commit**: 23faf5d032feef556f5399b46a92a6e4aef7d84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19315.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1256","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1256)"},{"Id":"456634075","IsPullRequest":true,"CreatedAt":"2019-06-16T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1255","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1255","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1255)"},{"Id":"456535222","IsPullRequest":true,"CreatedAt":"2019-06-15T13:06:53","Actor":"dotnet-maestro[bot]","Number":"1254","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190614.4\r\n- **Date Produced**: 6/15/2019 3:37 AM\r\n- **Commit**: 5fa3d3b8f89302202091993681391c9b356755a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19314.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1254","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1254)"},{"Id":"456531161","IsPullRequest":true,"CreatedAt":"2019-06-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1253","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190614.27\r\n- **Date Produced**: 6/15/2019 1:53 AM\r\n- **Commit**: 372249cafc24384ae3488aab4e815e54c2ff3938\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19314.27\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1253","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1253)"},{"Id":"456237914","IsPullRequest":true,"CreatedAt":"2019-06-14T13:22:47","Actor":"dotnet-maestro[bot]","Number":"1252","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190613.10\r\n- **Date Produced**: 6/14/2019 8:01 AM\r\n- **Commit**: c3f4524c785a226bae79cc82a96f7525460e2b5e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19313.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19313.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19313.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1252","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1252)"},{"Id":"456212743","IsPullRequest":true,"CreatedAt":"2019-06-14T12:14:12","Actor":"dotnet-maestro[bot]","Number":"1251","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190613.18\r\n- **Date Produced**: 6/13/2019 11:28 PM\r\n- **Commit**: 8952b877fa6bca387cd4321b33dcdf6778e31240\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19313.18\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1251","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1251)"},{"Id":"456107920","IsPullRequest":false,"CreatedAt":"2019-06-14T07:46:44","Actor":"marzim","Number":"1250","RawContent":null,"Title":"Expose System.ServiceModel.ServiceHost in .NET Standard 2.0","State":"open","Body":"Currently we can't access the ServiceHost under the System.ServiceModel.\r\nIs there a way that we can access the ServiceHost under the NET Standard 2.0?\r\n\r\n\r\nAny inputs are much appreciated.\r\n\r\nThanks,\r\n-Marvin","Url":"https://github.com/dotnet/standard/issues/1250","RelatedDescription":"Open issue \"Expose System.ServiceModel.ServiceHost in .NET Standard 2.0\" (#1250)"},{"Id":"455732093","IsPullRequest":true,"CreatedAt":"2019-06-13T13:18:52","Actor":"dotnet-maestro[bot]","Number":"1249","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190612.7\r\n- **Date Produced**: 6/13/2019 7:43 AM\r\n- **Commit**: cc8137ede09cdf16811767a6fb262fb498d85e67\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19312.7\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19312.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19312.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1249","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1249)"},{"Id":"455728018","IsPullRequest":false,"CreatedAt":"2019-06-13T13:00:29","Actor":"SebastianStruct","Number":"1248","RawContent":null,"Title":"Multiple DLLs from referenced .NET Standard projects","State":"open","Body":"I've created three .NET Standard 2.0 class library C# projects with Visual Studio 2017 (default settings).\r\n\r\n**Projects:**\r\n\r\n- MainProject (no dependencies)\r\n- TimeProject -> Dependencies -> Projects -> MainProject\r\n- ClockProject -> Dependencies -> Projects -> TimeProject\r\n\r\nEach of them have its own output directory. The DLL file should and is placed that output directory but the problem is that the referenced project DLLs are also placed in each output directory.\r\n\r\n**Output directories and files:**\r\n- Projects\\Build\\MainProject\r\n  - MainProject.dll\r\n- Projects\\Build\\TimeProject \r\n  - TimeProject.dll\r\n- Projects\\Build\\ClockProject \r\n  - ClockProject.dll\r\n  - MainProject.dll <-- my problem\r\n\r\n**Example of ProjectReference in ClockProject.csproj file:**\r\n\r\n```\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\TimeProject\\TimeProject.csproj\">\r\n    <Private>false</Private>\r\n  </ProjectReference>\r\n</ItemGroup>\r\n```\r\n\r\nThe ClockProject referencing the TimeProject which referencing the MainProject.\r\n\r\nI want to prevent that the ClockProject creates a MainProject.dll in its output directory because the MainProject.dll already exists in the output directory of the MainProject.","Url":"https://github.com/dotnet/standard/issues/1248","RelatedDescription":"Open issue \"Multiple DLLs from referenced .NET Standard projects\" (#1248)"},{"Id":"455701722","IsPullRequest":true,"CreatedAt":"2019-06-13T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1247","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190612.21\r\n- **Date Produced**: 6/13/2019 7:23 AM\r\n- **Commit**: e5cd71926eaa13aba3138c14cd80def0ccfebb30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19312.21\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1247","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1247)"},{"Id":"455203364","IsPullRequest":true,"CreatedAt":"2019-06-12T13:17:20","Actor":"dotnet-maestro[bot]","Number":"1246","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190611.10\r\n- **Date Produced**: 6/12/2019 9:52 AM\r\n- **Commit**: f5399d9d24536697a3bc36339e13ba085fc28938\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19311.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19311.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19311.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1246","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1246)"},{"Id":"455174207","IsPullRequest":true,"CreatedAt":"2019-06-12T12:14:57","Actor":"dotnet-maestro[bot]","Number":"1245","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190611.2\r\n- **Date Produced**: 6/11/2019 12:55 PM\r\n- **Commit**: dfc41299b9aadb1ca98093d660df81811eca901b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19311.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1245","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1245)"},{"Id":"454680960","IsPullRequest":true,"CreatedAt":"2019-06-11T13:19:14","Actor":"dotnet-maestro[bot]","Number":"1244","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190611.1\r\n- **Date Produced**: 6/11/2019 11:00 AM\r\n- **Commit**: a78bd7308555926f88aad3d0ecaaebae0f9204cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19311.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19311.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19311.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1244","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1244)"},{"Id":"454649658","IsPullRequest":true,"CreatedAt":"2019-06-11T12:15:00","Actor":"dotnet-maestro[bot]","Number":"1243","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190610.24\r\n- **Date Produced**: 6/11/2019 12:59 AM\r\n- **Commit**: f268510de7a7bcf800a6966830f8d11ff8d24e0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19310.24\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1243)"},{"Id":"454251339","IsPullRequest":false,"CreatedAt":"2019-06-10T16:19:02","Actor":"vixisoft","Number":"1242","RawContent":null,"Title":"ExcludeFromCodeCoverageAttribute should have Justification property","State":"open","Body":"Hi,\r\n\r\nWe are trying to build our Organisation Framework for DotNetCore and while we tried to test everything, some of the methods cannot be tested directly. (EF Core Wrapper mainly)\r\n\r\nSo we added the Attribute ExcludeFromCodeCoverage but we are not satisfied with the attribute.\r\n\r\nFirst, it doesn't have any Justification property so it not clear for other person why this has been added. ( Missing expertise to test ?, Cannot be tested ?, why !)\r\n\r\nSecond, it cannot be inherited because its marked as sealed class...\r\n\r\nThere is no way we can use this attribute to help others ?\r\nTelling them why this is in place?\r\n\r\nWe put the justification in the summary at the moment but i feel it's the worse place to put it...\r\n\r\nBecause:\r\n- it's added to the documentation when it shouldn't.\r\n- Someone can erase the summary because it has been refactored or anything and kill the justification. If it was in Justification property of the attribute we could at leat keep it safe until we judge that it can be removed and tested!\r\n\r\nCan you modify this attribute? \r\nOr how can i add this justification without putting it in the summary of the method / class ?","Url":"https://github.com/dotnet/standard/issues/1242","RelatedDescription":"Open issue \"ExcludeFromCodeCoverageAttribute should have Justification property\" (#1242)"},{"Id":"454161356","IsPullRequest":true,"CreatedAt":"2019-06-10T13:16:44","Actor":"dotnet-maestro[bot]","Number":"1241","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190609.5\r\n- **Date Produced**: 6/10/2019 12:19 AM\r\n- **Commit**: 7e56d8bd8b224d834b782a98bfd7035f71c3f547\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19309.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19309.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19309.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1241","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1241)"},{"Id":"454137194","IsPullRequest":true,"CreatedAt":"2019-06-10T12:14:25","Actor":"dotnet-maestro[bot]","Number":"1240","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190609.1\r\n- **Date Produced**: 6/9/2019 12:42 PM\r\n- **Commit**: 45361625125cdd3119050a852bd73163ca4b73f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19309.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1240","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1240)"},{"Id":"453895716","IsPullRequest":true,"CreatedAt":"2019-06-09T13:13:58","Actor":"dotnet-maestro[bot]","Number":"1239","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190609.1\r\n- **Date Produced**: 6/9/2019 11:19 AM\r\n- **Commit**: 48c3adf8ad0256689375060437c2e6262d5e805a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19309.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19309.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19309.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1239","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1239)"},{"Id":"453891137","IsPullRequest":true,"CreatedAt":"2019-06-09T12:09:21","Actor":"dotnet-maestro[bot]","Number":"1238","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190608.1\r\n- **Date Produced**: 6/8/2019 12:50 PM\r\n- **Commit**: 747a1bdf2a74a486fb075045cb2384fa89a7983c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19308.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1238","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1238)"},{"Id":"453791889","IsPullRequest":true,"CreatedAt":"2019-06-08T13:12:04","Actor":"dotnet-maestro[bot]","Number":"1237","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190607.10\r\n- **Date Produced**: 6/8/2019 7:24 AM\r\n- **Commit**: 20ba99aaf60ba91180f304211b096e1147564a7c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19307.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19307.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19307.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1237","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1237)"},{"Id":"453787233","IsPullRequest":true,"CreatedAt":"2019-06-08T12:14:16","Actor":"dotnet-maestro[bot]","Number":"1236","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190607.62\r\n- **Date Produced**: 6/8/2019 3:43 AM\r\n- **Commit**: 29999b2846623e2d96733577165968d09bc2bcc1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19307.62\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1236","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1236)"},{"Id":"453504450","IsPullRequest":true,"CreatedAt":"2019-06-07T13:16:47","Actor":"dotnet-maestro[bot]","Number":"1235","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190606.9\r\n- **Date Produced**: 6/7/2019 5:48 AM\r\n- **Commit**: de1da50fc5f972348aba2fa40ff14e1cbadb13de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19306.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19306.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19306.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1235","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1235)"},{"Id":"453479367","IsPullRequest":true,"CreatedAt":"2019-06-07T12:24:35","Actor":"dotnet-maestro[bot]","Number":"1234","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190606.12\r\n- **Date Produced**: 6/6/2019 9:47 PM\r\n- **Commit**: a1805103791e43031355e11c0d037bca803a9593\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19306.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1234","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1234)"},{"Id":"453020508","IsPullRequest":true,"CreatedAt":"2019-06-06T13:17:28","Actor":"dotnet-maestro[bot]","Number":"1233","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190606.1\r\n- **Date Produced**: 6/6/2019 10:50 AM\r\n- **Commit**: 71aec681dd1247979e7956372abae8bbc02c9546\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19306.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19306.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19306.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1233","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1233)"},{"Id":"452992389","IsPullRequest":true,"CreatedAt":"2019-06-06T12:14:38","Actor":"dotnet-maestro[bot]","Number":"1232","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190605.13\r\n- **Date Produced**: 6/6/2019 5:54 AM\r\n- **Commit**: d05c046913964e880be08b804e7249f297617c2f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19305.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1232","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1232)"},{"Id":"452490563","IsPullRequest":true,"CreatedAt":"2019-06-05T13:16:16","Actor":"dotnet-maestro[bot]","Number":"1231","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190605.1\r\n- **Date Produced**: 6/5/2019 11:29 AM\r\n- **Commit**: 656ccfbbef3a0d75c02e17b7477122a658b92557\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19305.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19305.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19305.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1231","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1231)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"457584591","IsPullRequest":true,"CreatedAt":"2019-06-19T05:18:37","Actor":"bartonjs","Number":"38648","RawContent":null,"Title":"Update the PackageReference for Pkcs in netstandard.depproj","State":"closed","Body":"The 4.5.0 ref/netstandard2.0 had three properties declared get/set which were\r\nactually get-only.  Updating the depproj version allows removal of the\r\nApiCompat errors in the shims.\r\n\r\nFixes #32178.","Url":"https://github.com/dotnet/corefx/pull/38648","RelatedDescription":"Closed or merged PR \"Update the PackageReference for Pkcs in netstandard.depproj\" (#38648)"},{"Id":"457778329","IsPullRequest":false,"CreatedAt":"2019-06-19T02:38:50","Actor":"mqudsi","Number":"38668","RawContent":null,"Title":"System.Text.Json wrongly complains about duplicate property names when one is ignored","State":"open","Body":"A common \"hack\" used anytime you're working with convention-based serializers (so JSON converters or Entity Framework alike) is to create proxies as converters (I know there is converter support separately):\r\n\r\n```cs\r\nenum MyEnum {\r\n\tCase1 = 0,\r\n\tCase2 = 1,\r\n}\r\n\r\nstruct Foo {\r\n\t[JsonIgnore]\r\n\tpublic MyEnum Bar { get; set; }\t\r\n\r\n\t[JsonPropertyName(\"Bar\")]\r\n\tpublic string BarString\r\n\t{\r\n\t\tget => Enum.GetName(typeof(MyEnum), MyEnum);\r\n\t\tset => value switch {\r\n\t\t\t\"Case1\" => MyEnum.Case1,\r\n\t\t\t\"Case2\" => MyEnum.Case2,\r\n\t\t\t_ => throw new Exception(\"Unknown value!\"),\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAttempting to (de)serialize this type throws an exception complaining about duplicate property names. Since `Foo.Bar` is ignored, `Foo.BarString` should be the only JSON property with the name \"Bar\".\r\n\r\nCurrently, it is necessary to also change the JSON property name of the original property:\r\n\r\n```cs\r\nstruct Foo {\r\n\t[JsonIgnore]\r\n\t[JsonPropertyName(\"NotBar\")]\r\n\tpublic MyEnum Bar { get; set; }\t\r\n\r\n\t[JsonPropertyName(\"Bar\")]\r\n\tpublic string MyEnumString\r\n\t{\r\n\t\tget => Enum.GetName(typeof(MyEnum), MyEnum);\r\n\t\tset => value switch {\r\n\t\t\t\"Case1\" => MyEnum.Case1,\r\n\t\t\t\"Case2\" => MyEnum.Case2,\r\n\t\t\t_ => throw new Exception(\"Unknown value!\"),\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThis hack work in Entity Framework and NewtonSoft's JSON serializer, among others.","Url":"https://github.com/dotnet/corefx/issues/38668","RelatedDescription":"Open issue \"System.Text.Json wrongly complains about duplicate property names when one is ignored\" (#38668)"},{"Id":"457725585","IsPullRequest":true,"CreatedAt":"2019-06-19T02:25:25","Actor":"stephentoub","Number":"38662","RawContent":null,"Title":"Disable InvokeOnEventsThreadRunsAsynchronously test on netfx","State":"closed","Body":"And avoid the whole suite from hanging by changing an ~3hr timeout to a 30s timeout.\r\n\r\nhttps://github.com/dotnet/corefx/issues/38661","Url":"https://github.com/dotnet/corefx/pull/38662","RelatedDescription":"Closed or merged PR \"Disable InvokeOnEventsThreadRunsAsynchronously test on netfx\" (#38662)"},{"Id":"457766162","IsPullRequest":false,"CreatedAt":"2019-06-19T01:40:00","Actor":"stephentoub","Number":"38667","RawContent":null,"Title":"Seg fault in System.Drawing.Common.Tests on macOS","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F38662~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190618.48/workItem/System.Drawing.Common.Tests/wilogs\r\n\r\nOSX.1013.Amd64.Open-x64:Debug\r\nDetails from Job e87cd21d-0e6c-4442-9465-977d4ddc342c\r\nExitCode: 139 \r\nRan on Machine: dci-macpro-07.local \r\n\r\n```\r\n  Discovering: System.Drawing.Common.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Drawing.Common.Tests (found 1440 of 1915 test cases)\r\n  Starting:    System.Drawing.Common.Tests (parallel test collections = on, max threads = 8)\r\n\r\n** (process:89777): WARNING **: 18:00:24.730: Path conversion requested 0 bytes (8388608 x 8388608). Maximum size is 8388608 bytes.\r\n    System.Drawing.Printing.Tests.PrinterSettingsTests.IsPlotter_ReturnsExpected [SKIP]\r\n      Condition(s) not met: \"IsAnyInstalledPrinters\"\r\n    System.Drawing.Printing.Tests.PrinterSettingsTests.Collate_Default_ReturnsExpected [SKIP]\r\n      Condition(s) not met: \"IsAnyInstalledPrinters\"\r\n    System.Drawing.Printing.Tests.PrinterSettingsTests.Clone_Success [SKIP]\r\n      Condition(s) not met: \"IsAnyInstalledPrinters\"\r\n    System.Drawing.Printing.Tests.PrinterSettingsTests.MaximumCopies_ReturnsExpected [SKIP]\r\n      Condition(s) not met: \"IsAnyInstalledPrinters\"\r\n    System.Drawing.Printing.Tests.PrinterSettingsTests.Static_InstalledPrinters_ReturnsExpected [SKIP]\r\n      Condition(s) not met: \"IsAnyInstalledPrinters\"\r\n    System.Drawing.Printing.Tests.PrinterSettingsTests.LandscapeAngle_ReturnsExpected [SKIP]\r\n      Condition(s) not met: \"IsAnyInstalledPrinters\"\r\n./RunTests.sh: line 164: 89777 Segmentation fault: 11  (core dumped) \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Drawing.Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n~/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Work/5dbc13e0-1d78-402a-8e94-b089b6678c3e/Exec\r\n----- end Tue Jun 18 18:00:34 PDT 2019 ----- exit code 139 ----------------------------------------------------------\r\nexit code 139 means SIGSEGV Illegal memory access. Deref invalid pointer, overrunning buffer, stack overflow etc. Core dumped.\r\n+ export _commandExitCode=139\r\n+ _commandExitCode=139\r\n+ /bin/sh /Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Payload/reporter/run.sh https://dev.azure.com/dnceng/ public 5693916 eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im9PdmN6NU1fN3AtSGpJS2xGWHo5M3VfVjBabyJ9.eyJuYW1laWQiOiJlNDI4NWM4Yy0zZmQ1LTQyNjctOWIxYy00MjE5NWM0N2E1NTMiLCJzY3AiOiJMb2NhdGlvblNlcnZpY2UuQ29ubmVjdCBSZWFkQW5kUHVibGlzaFRlc3Q6OWVlNmQ0NzgtZDI4OC00N2Y3LWFhY2MtZjZlNmQwODJhZTZkIFJlYWRBbmRVcGRhdGVCdWlsZEJ5VXJpOjllZTZkNDc4LWQyODgtNDdmNy1hYWNjLWY2ZTZkMDgyYWU2ZC9kb3RuZXQvY29yZWZ4LzE5NjpCdWlsZC9CdWlsZC8yMjk4NTgiLCJhdWkiOiIzYmNhNjQ3ZS1kMGEzLTQzNTQtYTUwMi1mOWZkOTc0NWY3ODciLCJzaWQiOiJlZDBmN2UzMS0zNWM0LTQyYTItODlmNy1jNTViZjE2ZDcwOGYiLCJpc3MiOiJhcHAudnN0b2tlbi52aXN1YWxzdHVkaW8uY29tIiwiYXVkIjoiYXBwLnZzdG9rZW4udmlzdWFsc3R1ZGlvLmNvbXx2c286YjU1ZGU0ZWQtNGI1YS00MjE1LWE4ZTQtMGEwYTVmNzFlN2Q4IiwibmJmIjoxNTYwOTA0MTU1LCJleHAiOjE1NjA5MTQzNTV9.Eo4P_neqxQFGfZYWYGWebIxWVAMpOZZqQHm1bS-I1c688t-sPIiNDVyNN_iNLaxywybrv20h04dlQlO6HpDcYaRevznKQAjkr1ZDfTnhJnyXM5l4HvFfUkOimkzA-ktkRjZfff3YTn-W-Y9JdXKj03_PJEVK2Cb7qgWPCrZzKFO660PqzukR00_BhqLbPxay2_1mdcHWJogAliH9SzEGgmIgwKJbYBFCuQM6ZIyGoYWm5bBfdeYX_S5HoKsd93xFb2vw7JZx9qzyzfLKCxKFrDzgVDhQ1hdkU3L54y9trz6jsSG0BJrgvWWMr7Znp01HVpMjWJo9rhCbMz4LCT0wMw\r\n+++ dirname -- /Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Payload/reporter/run.sh\r\n++ CDPATH=\r\n++ cd -- /Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Payload/reporter\r\n++ pwd\r\n+ script_path=/Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Payload/reporter\r\n+ ENV_PATH=/Users/dotnet-bot/.vsts-env\r\n+ date -u +%FT%TZ\r\n2019-06-19T01:00:34Z\r\n+ '[' '!' -f /Users/dotnet-bot/.vsts-env/bin/python ']'\r\n+ /Users/dotnet-bot/.vsts-env/bin/python -c 'import future'\r\n+ echo 'future module already available'\r\nfuture module already available\r\n+ date -u +%FT%TZ\r\n2019-06-19T01:00:34Z\r\n+ /Users/dotnet-bot/.vsts-env/bin/python /Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Payload/reporter/run.py https://dev.azure.com/dnceng/ public 5693916 eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im9PdmN6NU1fN3AtSGpJS2xGWHo5M3VfVjBabyJ9.eyJuYW1laWQiOiJlNDI4NWM4Yy0zZmQ1LTQyNjctOWIxYy00MjE5NWM0N2E1NTMiLCJzY3AiOiJMb2NhdGlvblNlcnZpY2UuQ29ubmVjdCBSZWFkQW5kUHVibGlzaFRlc3Q6OWVlNmQ0NzgtZDI4OC00N2Y3LWFhY2MtZjZlNmQwODJhZTZkIFJlYWRBbmRVcGRhdGVCdWlsZEJ5VXJpOjllZTZkNDc4LWQyODgtNDdmNy1hYWNjLWY2ZTZkMDgyYWU2ZC9kb3RuZXQvY29yZWZ4LzE5NjpCdWlsZC9CdWlsZC8yMjk4NTgiLCJhdWkiOiIzYmNhNjQ3ZS1kMGEzLTQzNTQtYTUwMi1mOWZkOTc0NWY3ODciLCJzaWQiOiJlZDBmN2UzMS0zNWM0LTQyYTItODlmNy1jNTViZjE2ZDcwOGYiLCJpc3MiOiJhcHAudnN0b2tlbi52aXN1YWxzdHVkaW8uY29tIiwiYXVkIjoiYXBwLnZzdG9rZW4udmlzdWFsc3R1ZGlvLmNvbXx2c286YjU1ZGU0ZWQtNGI1YS00MjE1LWE4ZTQtMGEwYTVmNzFlN2Q4IiwibmJmIjoxNTYwOTA0MTU1LCJleHAiOjE1NjA5MTQzNTV9.Eo4P_neqxQFGfZYWYGWebIxWVAMpOZZqQHm1bS-I1c688t-sPIiNDVyNN_iNLaxywybrv20h04dlQlO6HpDcYaRevznKQAjkr1ZDfTnhJnyXM5l4HvFfUkOimkzA-ktkRjZfff3YTn-W-Y9JdXKj03_PJEVK2Cb7qgWPCrZzKFO660PqzukR00_BhqLbPxay2_1mdcHWJogAliH9SzEGgmIgwKJbYBFCuQM6ZIyGoYWm5bBfdeYX_S5HoKsd93xFb2vw7JZx9qzyzfLKCxKFrDzgVDhQ1hdkU3L54y9trz6jsSG0BJrgvWWMr7Znp01HVpMjWJo9rhCbMz4LCT0wMw\r\n('Got args', 'https://dev.azure.com/dnceng/', 'public', '5693916', 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im9PdmN6NU1fN3AtSGpJS2xGWHo5M3VfVjBabyJ9.eyJuYW1laWQiOiJlNDI4NWM4Yy0zZmQ1LTQyNjctOWIxYy00MjE5NWM0N2E1NTMiLCJzY3AiOiJMb2NhdGlvblNlcnZpY2UuQ29ubmVjdCBSZWFkQW5kUHVibGlzaFRlc3Q6OWVlNmQ0NzgtZDI4OC00N2Y3LWFhY2MtZjZlNmQwODJhZTZkIFJlYWRBbmRVcGRhdGVCdWlsZEJ5VXJpOjllZTZkNDc4LWQyODgtNDdmNy1hYWNjLWY2ZTZkMDgyYWU2ZC9kb3RuZXQvY29yZWZ4LzE5NjpCdWlsZC9CdWlsZC8yMjk4NTgiLCJhdWkiOiIzYmNhNjQ3ZS1kMGEzLTQzNTQtYTUwMi1mOWZkOTc0NWY3ODciLCJzaWQiOiJlZDBmN2UzMS0zNWM0LTQyYTItODlmNy1jNTViZjE2ZDcwOGYiLCJpc3MiOiJhcHAudnN0b2tlbi52aXN1YWxzdHVkaW8uY29tIiwiYXVkIjoiYXBwLnZzdG9rZW4udmlzdWFsc3R1ZGlvLmNvbXx2c286YjU1ZGU0ZWQtNGI1YS00MjE1LWE4ZTQtMGEwYTVmNzFlN2Q4IiwibmJmIjoxNTYwOTA0MTU1LCJleHAiOjE1NjA5MTQzNTV9.Eo4P_neqxQFGfZYWYGWebIxWVAMpOZZqQHm1bS-I1c688t-sPIiNDVyNN_iNLaxywybrv20h04dlQlO6HpDcYaRevznKQAjkr1ZDfTnhJnyXM5l4HvFfUkOimkzA-ktkRjZfff3YTn-W-Y9JdXKj03_PJEVK2Cb7qgWPCrZzKFO660PqzukR00_BhqLbPxay2_1mdcHWJogAliH9SzEGgmIgwKJbYBFCuQM6ZIyGoYWm5bBfdeYX_S5HoKsd93xFb2vw7JZx9qzyzfLKCxKFrDzgVDhQ1hdkU3L54y9trz6jsSG0BJrgvWWMr7Znp01HVpMjWJo9rhCbMz4LCT0wMw')\r\nMain thread starting workers\r\nWorker 0: starting...\r\nWorker 1: starting...\r\nWorker 2: starting...\r\nWorker 3: starting...\r\nWorker 4: starting...\r\nWorker 5: starting...\r\nWorker 6: starting...\r\nWorker 7: starting...\r\nWorker 8: starting...\r\nWorker 9: starting...\r\nBeginning reading of test results.\r\nUploading results in batches of size 1000\r\nSearching '/Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Work/5dbc13e0-1d78-402a-8e94-b089b6678c3e/Exec/..' for log files\r\nFound log '/Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Work/5dbc13e0-1d78-402a-8e94-b089b6678c3e/Exec/../console.f492715a.log'\r\nUri 'https://helixexternalresults.blob.core.windows.net/dotnet-corefx-refs-pull-38662-merge-e87cd21d0e6c444294/System.Drawing.Common.Tests/console.f492715a.log?sv=2017-07-29&sr=c&sig=BfhEIjJ0MhsCfUYy8vnG7A9p7CBR5tQL5PJrHMJID4k%3D&se=2019-06-29T00%3A59%3A14Z&sp=rl'\r\nGenerated log list: <ul><li><a href='https://helixexternalresults.blob.core.windows.net/dotnet-corefx-refs-pull-38662-merge-e87cd21d0e6c444294/System.Drawing.Common.Tests/console.f492715a.log?sv=2017-07-29&sr=c&sig=BfhEIjJ0MhsCfUYy8vnG7A9p7CBR5tQL5PJrHMJID4k%3D&se=2019-06-29T00%3A59%3A14Z&sp=rl' target='_blank'>console.f492715a.log</a></li></ul>\r\nSearching '/Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Work/5dbc13e0-1d78-402a-8e94-b089b6678c3e/Exec' for test results files\r\nNo results file found in any of the following formats: xunit, junit, trx\r\nMain thread finished queueing batches\r\nWorker 0: uploaded 1 results\r\nMain thread exiting\r\n+ date -u +%FT%TZ\r\n2019-06-19T01:00:35Z\r\n+ /usr/local/bin/python2 /Users/dotnet-bot/dotnetbuild/work/e87cd21d-0e6c-4442-9465-977d4ddc342c/Payload/xunit-reporter.py\r\n2019-06-18 18:00:35,679: ERROR: xunit-reporter(69): main: Unable to report xunit results: no test results xml file found.\r\n+ exit 139\r\n```\r\n\r\ncc: @safern","Url":"https://github.com/dotnet/corefx/issues/38667","RelatedDescription":"Open issue \"Seg fault in System.Drawing.Common.Tests on macOS\" (#38667)"},{"Id":"457759920","IsPullRequest":false,"CreatedAt":"2019-06-19T01:07:49","Actor":"ahsonkhan","Number":"38666","RawContent":null,"Title":"S.T.Json remarks section from the xml comments doesn't port well (there should be just one per API)","State":"open","Body":"A few of the `System.Text.Json` APIs have multiple `remarks` tags within the xml comments. This does not work well when ported to the https://github.com/dotnet/dotnet-api-docs repo since only **one** `remarks` tag is allowed. We need to fix the comments in source such that there is only a single `remarks` tag, and then we can update the docs repo accordingly.\r\n\r\n**An example where we see an issue:**\r\nhttps://github.com/dotnet/corefx/blob/c0ed16860e62eea24620b7144ef72d5819ddb2b2/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.cs#L314-L321\r\n\r\nNote that only one of the remarks shows up.\r\nhttps://github.com/dotnet/dotnet-api-docs/blob/ebb4761136a7baba7c8a42784803af99b139f67d/xml/System.Text.Json/Utf8JsonWriter.xml#L188-L197\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.text.json.utf8jsonwriter.dispose?view=netcore-3.0#remarks\r\n\r\n**An example of what the remarks should look like (single `remarks` tag with `para` tags to separate each one):**\r\nhttps://github.com/dotnet/corefx/blob/c0ed16860e62eea24620b7144ef72d5819ddb2b2/src/System.Text.Json/src/System/Text/Json/Document/JsonElement.cs#L124-L133\r\n\r\nhttps://github.com/dotnet/dotnet-api-docs/blob/ebb4761136a7baba7c8a42784803af99b139f67d/xml/System.Text.Json/JsonElement.xml#L822-L830\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonelement.trygetdouble?view=netcore-3.0#remarks\r\n\r\nAnywhere we have multiple remarks tags needs to be fixed by merging it into one (this applies across all the Json APIs). Take another example:\r\nhttps://github.com/dotnet/corefx/blob/c0ed16860e62eea24620b7144ef72d5819ddb2b2/src/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs#L93-L99\r\n\r\ncc @carlossanlop, @mairaw ","Url":"https://github.com/dotnet/corefx/issues/38666","RelatedDescription":"Open issue \"S.T.Json remarks section from the xml comments doesn't port well (there should be just one per API)\" (#38666)"},{"Id":"457759770","IsPullRequest":true,"CreatedAt":"2019-06-19T01:07:02","Actor":"stephentoub","Number":"38665","RawContent":null,"Title":"Add debugging info for sporadic Dns.GetHostEntry(\"\") CI failures","State":"open","Body":"Also changed the Dns tests to default to IPv4 instead of IPv6 on Windows, as a) that's what we do on Unix, and b) locally on my machine the tests fail on IPv6 when I'm connected to a VPN.  Plus a little cleanup elsewhere, e.g. making test methods be `async` so that the test methods themselves show up as part of call stacks for failures.\r\n\r\nhttps://github.com/dotnet/corefx/issues/24355","Url":"https://github.com/dotnet/corefx/pull/38665","RelatedDescription":"Open PR \"Add debugging info for sporadic Dns.GetHostEntry(\"\") CI failures\" (#38665)"},{"Id":"457749950","IsPullRequest":true,"CreatedAt":"2019-06-19T00:34:14","Actor":"HongGit","Number":"38664","RawContent":null,"Title":"update system.transactions owner names","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/38664","RelatedDescription":"Closed or merged PR \"update system.transactions owner names\" (#38664)"},{"Id":"457725997","IsPullRequest":false,"CreatedAt":"2019-06-18T22:35:50","Actor":"stephentoub","Number":"38663","RawContent":null,"Title":"BasicAuthentication_InvalidRequest_SendsStatusCodeClient test hung in CI on Linux","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F38651~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190618.27/workItem/System.Net.HttpListener.Tests/wilogs\r\n```\r\n  Discovering: System.Net.HttpListener.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Net.HttpListener.Tests (found 265 of 297 test cases)\r\n  Starting:    System.Net.HttpListener.Tests (parallel test collections = on, max threads = 2)\r\n    System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_RealmSet_SendsChallengeToClient [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n    System.Net.Tests.HttpListenerAuthenticationTests.NoAuthentication_AuthenticationProvided_ReturnsForbiddenStatusCode [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n    System.Net.Tests.HttpListenerAuthenticationTests.NtlmAuthentication_InvalidRequestHeaders_ReturnsExpectedStatusCode [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n    System.Net.Tests.HttpListenerAuthenticationTests.NtlmAuthentication_Conversation_ReturnsExpectedType2Message [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n    System.Net.Tests.HttpListenerAuthenticationTests.NoAuthenticationGetContextAsync_AuthenticationProvided_ReturnsForbiddenStatusCode [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n    System.Net.Tests.HttpListenerAuthenticationTests.NegotiateAuthentication_InvalidRequestHeaders_ReturnsExpectedStatusCode [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n    System.Net.Tests.HttpListenerAuthenticationTests.NegotiateAuthentication_Conversation_ReturnsExpectedType2Message [SKIP]\r\n      Condition(s) not met: \"IsWindowsImplementation\"\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:02:11\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:04:11\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:06:11\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:08:11\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:10:11\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:12:11\r\n   System.Net.HttpListener.Tests: [Long Running Test] 'System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_InvalidRequest_SendsStatusCodeClient', Elapsed: 00:14:11\r\n```\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/issues/38663","RelatedDescription":"Open issue \"BasicAuthentication_InvalidRequest_SendsStatusCodeClient test hung in CI on Linux\" (#38663)"},{"Id":"457725046","IsPullRequest":false,"CreatedAt":"2019-06-18T22:31:59","Actor":"stephentoub","Number":"38661","RawContent":null,"Title":"SystemEvents InvokeOnEventsThreadRunsAsynchronously test hung in CI","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F38651~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190618.27/workItem/Microsoft.Win32.SystemEvents.Tests/wilogs\r\n```\r\nC:\\dotnetbuild\\work\\720b1511-6cc1-4fab-8d9f-5b21503a5366\\Work\\f6705600-4815-41a9-af81-dc9beee9e540\\Exec>xunit.console.exe Microsoft.Win32.SystemEvents.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetfxtests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: Microsoft.Win32.SystemEvents.Tests (app domain = on [no shadow copy], method display = ClassAndMethod, method display options = None)\r\n  Discovered:  Microsoft.Win32.SystemEvents.Tests (found 26 of 27 test cases)\r\n  Starting:    Microsoft.Win32.SystemEvents.Tests (parallel test collections = on, max threads = 2)\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:02:11\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:04:12\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:06:12\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:08:12\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:10:12\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:12:12\r\n   Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously', Elapsed: 00:14:12\r\n```","Url":"https://github.com/dotnet/corefx/issues/38661","RelatedDescription":"Open issue \"SystemEvents InvokeOnEventsThreadRunsAsynchronously test hung in CI\" (#38661)"},{"Id":"457721927","IsPullRequest":true,"CreatedAt":"2019-06-18T22:20:37","Actor":"Anipik","Number":"38660","RawContent":null,"Title":"Adding New Idictionary tests and fixing test name and input for type Mismatch","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/38660","RelatedDescription":"Open PR \"Adding New Idictionary tests and fixing test name and input for type Mismatch\" (#38660)"},{"Id":"457636586","IsPullRequest":true,"CreatedAt":"2019-06-18T22:08:21","Actor":"stephentoub","Number":"38651","RawContent":null,"Title":"Try to make MonitoringIsEnabled more stable","State":"closed","Body":"Add a GC.Collect call to ensure the GC.GetMemoryInfo sees the object being kept alive.\r\n\r\nCloses https://github.com/dotnet/corefx/issues/38595","Url":"https://github.com/dotnet/corefx/pull/38651","RelatedDescription":"Closed or merged PR \"Try to make MonitoringIsEnabled more stable\" (#38651)"},{"Id":"457651411","IsPullRequest":true,"CreatedAt":"2019-06-18T22:06:46","Actor":"stephentoub","Number":"38653","RawContent":null,"Title":"Fix GetLogInformation_UsingLogName_DoesNotThrow test","State":"closed","Body":"The test was doing multiple reads from the underlying log and expecting them to be equivalent.  That's not guaranteed, as it's a global machine resource.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/38652\r\ncc: @Anipik","Url":"https://github.com/dotnet/corefx/pull/38653","RelatedDescription":"Closed or merged PR \"Fix GetLogInformation_UsingLogName_DoesNotThrow test\" (#38653)"},{"Id":"457639804","IsPullRequest":false,"CreatedAt":"2019-06-18T22:06:46","Actor":"stephentoub","Number":"38652","RawContent":null,"Title":"GetLogInformation_UsingLogName_DoesNotThrow(logName: \\\"Application\\\") failed in CI","State":"closed","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F38642~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190618.12/workItem/System.Diagnostics.EventLog.Tests/analysis/xunit/System.Diagnostics.Tests.EventLogInformationTests~2FGetLogInformation_UsingLogName_DoesNotThrow(logName:%20%5C%22Application%5C%22)\r\n```\r\nWindows.10.Amd64.ClientRS5.Open-x86-Release\r\nGet Repro environment\r\nUnhandled Exception of Type Xunit.Sdk.EqualException\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: 2019-06-18T14:21:22.8017779+00:00\r\nActual:   2019-06-18T14:28:06.0035030+00:00\r\nStack Trace :\r\n   at System.Diagnostics.Tests.EventLogInformationTests.GetLogInformation_UsingLogName_DoesNotThrow(String logName) in /_/src/System.Diagnostics.EventLog/tests/System/Diagnostics/Reader/EventLogInformationTests.cs:line 59\r\n```","Url":"https://github.com/dotnet/corefx/issues/38652","RelatedDescription":"Closed issue \"GetLogInformation_UsingLogName_DoesNotThrow(logName: \\\"Application\\\") failed in CI\" (#38652)"},{"Id":"457714761","IsPullRequest":false,"CreatedAt":"2019-06-18T21:57:13","Actor":"chrisd8088","Number":"38659","RawContent":null,"Title":"broken symlinks and non-executable files not ignored in FindProgramInPath()","State":"open","Body":"I bumped into a difficult-to-debug problem when using `Process.Start()` on Linux, which ultimately was due to the fact that the `FindProgramInPath()` internal method used to look for a given executable file in each component of the `$PATH` environment variable does not ignore broken symlinks and non-executable files, the way Linux shells and other tools such as `which` do.\r\n\r\nConsider the following scenario, where `/usr/local/bin/date` is a bad symlink which will be found first when searching `$PATH`; however, normal system utilities ignore the broken symlink and proceed to find and use `/bin/date`:\r\n\r\n```\r\n$ /bin/ls -lF /bin/date\r\n-rwxr-xr-x 1 root root 100568 Jan 18  2018 /bin/date*\r\n$ /bin/ls -lF /usr/local/bin/date\r\nlrwxrwxrwx 1 root root 10 Jun 18 11:02 /usr/local/bin/date -> /tmp/dummy\r\n$ printenv PATH\r\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\n$ which date\r\n/bin/date\r\n$ date\r\nTue Jun 18 17:32:10 EDT 2019\r\n```\r\n\r\nThe following example .NET program, though, throws an exception:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace Foo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            ProcessStartInfo procInfo = new ProcessStartInfo(\"date\");\r\n            procInfo.WorkingDirectory = \"/tmp\";\r\n            procInfo.UseShellExecute = false;\r\n            procInfo.RedirectStandardOutput = true;\r\n            procInfo.RedirectStandardError = true;\r\n\r\n            using (Process proc = new Process())\r\n            {\r\n                proc.StartInfo = procInfo;\r\n                proc.Start();\r\n                Console.WriteLine($\"out: {proc.StandardOutput.ReadToEnd()}\");\r\n                proc.WaitForExit();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\n$ dotnet run\r\nUnhandled Exception: System.ComponentModel.Win32Exception: No such file or directory\r\n   at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at Foo.Program.Main(String[] args)\r\n```\r\n\r\nI believe this is due to the fact that the [`File.Exists()` check](https://github.com/dotnet/corefx/blob/800f1b3da5fe1519d333e7772ba98b2277564d4a/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L742) in `FindProgramInPath()` in `src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs` is insufficient to determine if the path is merely a symlink, or an actual executable file.\r\n\r\nNote that the same example C# code above also fails if `/usr/local/bin/date` is a regular file which lacks an execute permission mode setting, e.g.:\r\n\r\n```\r\n$ sudo touch /usr/local/bin/date\r\n$ ls -lF /usr/local/bin/date\r\n-rw-r--r-- 1 root root 0 Jun 18 14:52 /usr/local/bin/date\r\n$ which date\r\n/bin/date\r\n$ date\r\nTue Jun 18 17:32:10 EDT 2019\r\n$ dotnet run\r\nUnhandled Exception: System.ComponentModel.Win32Exception: Permission denied\r\n   at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow)\r\n```\r\n\r\nIt would be ideal if, instead of using `File.Exists()`, these tests (and others used in [`ResolvePath()`](https://github.com/dotnet/corefx/blob/800f1b3da5fe1519d333e7772ba98b2277564d4a/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L682)) could instead perform `stat(2)` and `readlink(2)` calls to check whether the path corresponds to a valid executable file.\r\n\r\nWhile this wouldn't prevent races with file deletion, etc. (which can happen with the existing code, too), under normal circumstances it would bring the .NET parsing of `$PATH` more in line with other system utilities.\r\n\r\nAnd if that isn't possible, then at least having the code output the path used in the [`ForkAndExecProcess()`](https://github.com/dotnet/corefx/blob/800f1b3da5fe1519d333e7772ba98b2277564d4a/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L542) call would be superb, because otherwise it's very difficult and frustrating to ascertain why an executable which can be executed without problems from the command line can't be executed by a .NET program.\r\n\r\n(In my case, I ended up tracking down the relevant code here, then cut-and-pasting it over into my program and debugging it piece by piece until I realized it was finding a broken symlink from earlier in `$PATH`.  There may be better ways to do that, but regardless, having an error message which output the path that was not found would be incredibly helpful!)","Url":"https://github.com/dotnet/corefx/issues/38659","RelatedDescription":"Open issue \"broken symlinks and non-executable files not ignored in FindProgramInPath()\" (#38659)"},{"Id":"457479066","IsPullRequest":false,"CreatedAt":"2019-06-18T21:31:22","Actor":"martincostello","Number":"38640","RawContent":null,"Title":"JsonSerializer.Parse<T>() throws if object has an collection property with a default array value","State":"closed","Body":"Using 3.0.100-preview6-012264 of the .NET Core 3.0 SDK, if a type which sets a collection property to a default value which is an array, then the deserialization fails with the following exception:\r\n\r\n```\r\nSystem.NotSupportedException: Collection was of a fixed size.\r\n   at System.Array.System.Collections.IList.Add(Object value)\r\n   at System.Text.Json.Serialization.JsonSerializer.ApplyObjectToEnumerable(Object value, ReadStack& state, Utf8JsonReader& reader, Boolean setPropertyDirectly)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleEndObject(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.Parse[TValue](String json, JsonSerializerOptions options)\r\n```\r\n\r\nIt would appear that the serializer assumes the non-null default collection can be written to, and then fails to add the item as the backing implementation is an array. The unit test below demonstrates the difference in behaviour with System.Text.Json for the two objects, as well as the same behaviour using JSON .NET to perform the same operation.\r\n\r\nIdeally the implementation would do something like check the value of the `IsReadOnly` property of the collection/list, and if it is `true` create a new list to append the items to and assign that value to the property.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Xunit;\r\nusing JsonConvert = Newtonsoft.Json.JsonConvert;\r\nusing JsonSerializer = System.Text.Json.Serialization.JsonSerializer;\r\n\r\nnamespace JsonSerializerNotSupportedException\r\n{\r\n    public static class Repro\r\n    {\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_Default_Array_SystemTextJson()\r\n        {\r\n            // Arrange\r\n            string json = @\"{\"\"Messages\"\":[\"\"Hello\"\",\"\"World\"\"]}\";\r\n\r\n            // Act (fails in preview 6, throws: System.NotSupportedException : Collection was of a fixed size.)\r\n            var actual = JsonSerializer.Parse<MessageWithDefaultArray>(json);\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Messages);\r\n            Assert.Equal(new[] { \"Hello\", \"World\" }, actual.Messages);\r\n        }\r\n\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_Default_List_SystemTextJson()\r\n        {\r\n            // Arrange\r\n            string json = @\"{\"\"Messages\"\":[\"\"Hello\"\",\"\"World\"\"]}\";\r\n\r\n            // Act\r\n            var actual = JsonSerializer.Parse<MessageWithDefaultList>(json);\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Messages);\r\n            Assert.Equal(new[] { \"Hello\", \"World\" }, actual.Messages);\r\n        }\r\n\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_Default_Array_NewtonsoftJson()\r\n        {\r\n            // Arrange\r\n            string json = @\"{\"\"Messages\"\":[\"\"Hello\"\",\"\"World\"\"]}\";\r\n\r\n            // Act (fails in preview 6, throws: System.NotSupportedException : Collection was of a fixed size.)\r\n            var actual = JsonConvert.DeserializeObject<MessageWithDefaultArray>(json);\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Messages);\r\n            Assert.Equal(new[] { \"Hello\", \"World\" }, actual.Messages);\r\n        }\r\n\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_Default_List_NewtonsoftJson()\r\n        {\r\n            // Arrange\r\n            string json = @\"{\"\"Messages\"\":[\"\"Hello\"\",\"\"World\"\"]}\";\r\n\r\n            // Act\r\n            var actual = JsonConvert.DeserializeObject<MessageWithDefaultList>(json);\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Messages);\r\n            Assert.Equal(new[] { \"Hello\", \"World\" }, actual.Messages);\r\n        }\r\n\r\n        private sealed class MessageWithDefaultArray\r\n        {\r\n            public IList<string> Messages { get; set; } = Array.Empty<string>();\r\n        }\r\n\r\n        private sealed class MessageWithDefaultList\r\n        {\r\n            public IList<string> Messages { get; set; } = new List<string>();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/38640","RelatedDescription":"Closed issue \"JsonSerializer.Parse<T>() throws if object has an collection property with a default array value\" (#38640)"},{"Id":"457688950","IsPullRequest":false,"CreatedAt":"2019-06-18T20:48:43","Actor":"layomia","Number":"38658","RawContent":null,"Title":"Add support for ImmutableArray to JsonSerializer","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/issues/38658","RelatedDescription":"Open issue \"Add support for ImmutableArray to JsonSerializer\" (#38658)"},{"Id":"457476833","IsPullRequest":true,"CreatedAt":"2019-06-18T20:37:30","Actor":"dotnet-maestro[bot]","Number":"38639","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190618.2\r\n- **Date Produced**: 6/18/2019 1:30 PM\r\n- **Commit**: 77d16163420dc29e7d617be52870dd58b7538d03\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19318.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/38639","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/standard\" (#38639)"},{"Id":"457670767","IsPullRequest":true,"CreatedAt":"2019-06-18T20:05:49","Actor":"dotnet-maestro-bot","Number":"38657","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @danmosemsft\n* @stephentoub\n* @maryamariyan\n* @msftbot[bot]\n* @safern\n* @bartonjs\n* @Anipik\n* @wtgodbe\n* @joperezr\n* @ViktorHofer\n* @layomia\n* @wfurt\n* @davidsh\n* @dotnet-maestro[bot]\n* @GrabYourPitchforks\n* @JeremyKuhne\n* @ahsonkhan\n* @scalablecory\n* @davidfowl\n* @sdmaclea\n* @ericstj\n* @lmolkova\n* @buyaa-n\n* @tarekgh\n* @VSadov\n* @roji\n* @jkotas\n* @krwq\n* @1175054+carlossanlop\n* @DustinCampbell\n* @MattGal\n* @45860872+Gary-Zh\n* @Wraith2\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/38657","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#38657)"},{"Id":"457667961","IsPullRequest":true,"CreatedAt":"2019-06-18T19:58:00","Actor":"cston","Number":"38656","RawContent":null,"Title":"Port DynamicMetaObjectProviderDebugView","State":"open","Body":"Port `Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView` from https://github.com/microsoft/referencesource/tree/master/Microsoft.CSharp/Microsoft/CSharp.\r\n","Url":"https://github.com/dotnet/corefx/pull/38656","RelatedDescription":"Open PR \"Port DynamicMetaObjectProviderDebugView\" (#38656)"},{"Id":"457662677","IsPullRequest":true,"CreatedAt":"2019-06-18T19:44:50","Actor":"layomia","Number":"38655","RawContent":null,"Title":"Add support for Uri to JsonSerializer","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/38536.\r\nPartially addresses https://github.com/dotnet/corefx/issues/38568.\r\n\r\nThis doesn't utilize the reader and writer because (Try)GetUri methods are not implemented yet: https://github.com/dotnet/corefx/issues/38647.\r\nThere are to-dos to replace serializer-level parsing once they are.","Url":"https://github.com/dotnet/corefx/pull/38655","RelatedDescription":"Open PR \"Add support for Uri to JsonSerializer\" (#38655)"},{"Id":"457652455","IsPullRequest":true,"CreatedAt":"2019-06-18T19:19:31","Actor":"MarcoRossignoli","Number":"38654","RawContent":null,"Title":"Fix ipv6 address parsing with leading compressor","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/38634\r\n\r\nThere is a bug if address has got leading compressor.\r\nBug doesn't raise if we have trailing compressor because compressor index math  exists loop after one cycle.\r\nAdded a fix that skip expansion if from/to index calculation ends with same value, mean that zeros are already in the right place.\r\n\r\ncc: @davidsh @wfurt @caesar-chen @rmkerr @karelz @scalablecory\r\n\r\nI didn't found area owner for System.Net.Primitives https://github.com/dotnet/corefx/blob/d3942d4671919edb0cca6ddc1840190f524a809d/Documentation/project-docs/issue-guide.md#areas","Url":"https://github.com/dotnet/corefx/pull/38654","RelatedDescription":"Open PR \"Fix ipv6 address parsing with leading compressor\" (#38654)"},{"Id":"457600357","IsPullRequest":true,"CreatedAt":"2019-06-18T18:44:56","Actor":"safern","Number":"38649","RawContent":null,"Title":"Disable System.Drawing.Common tests for RedHat6","State":"closed","Body":"Disabling tests due to: https://github.com/dotnet/core-eng/issues/6370\r\n\r\ncc: @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/38649","RelatedDescription":"Closed or merged PR \"Disable System.Drawing.Common tests for RedHat6\" (#38649)"},{"Id":"457510423","IsPullRequest":true,"CreatedAt":"2019-06-18T18:37:09","Actor":"stephentoub","Number":"38642","RawContent":null,"Title":"Disable MonitoringIsEnabled test on UAP","State":"closed","Body":"https://github.com/dotnet/corefx/issues/38595\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/38642","RelatedDescription":"Closed or merged PR \"Disable MonitoringIsEnabled test on UAP\" (#38642)"},{"Id":"457604786","IsPullRequest":false,"CreatedAt":"2019-06-18T17:24:37","Actor":"steveharter","Number":"38650","RawContent":null,"Title":"Support polymorphic serialization through new option","State":"open","Body":"# Current behavior\r\nConsider a simple model:\r\n```cs\r\nabstract class Person {...}\r\nclass Customer : Person {...}\r\n```\r\n\r\nThe current behavior, by design, is to use the static type and not serialize polymorphically.\r\n```cs\r\n// This will serialize all properties on `Person` but not `Customer`:\r\nPerson person = new Customer();\r\nstring str = JsonSerializer.ToString<Person>(person);\r\n\r\n// This does the same thing through generic type inference:\r\nstring str = JsonSerializer.ToString(person);\r\n```\r\n\r\nHowever, if the type is declared to be `System.Object` then all properties will be serialized:\r\n```cs\r\nobject person = new Customer();\r\n// This will serialize all properties on `Customer`\r\nstring str = JsonSerializer.ToString(person);\r\n```\r\n\r\nIn addition, the `Type` parameter can be specified:\r\n```cs\r\nPerson person = new Customer();\r\n// This will serialize all properties on `Customer`\r\nstring str = JsonSerializer.ToString(person, person.GetType());\r\n```\r\n\r\nAll of these semantics are current as will remain as-is.\r\n\r\n# Proposed API\r\nAdd an opt-in setting that will serialize all types polymorphically, instead of just `System.Object`:\r\n```cs\r\nnamespace System.Text.Json\r\n{\r\n    public class JsonSerializerOptions // existing class\r\n    {\r\n. . .\r\n        bool SerializePolymorphically { get; set; }    \r\n. . .\r\n    }\r\n}\r\n```\r\n\r\nExample of new behavior:\r\n```cs\r\n\r\nvar options = new JsonSerializerOptions();\r\noptions.SerializePolymorphically = true;\r\n\r\n// This will serialize all properties on `Customer`:\r\nPerson person = new Customer();\r\nstring str = JsonSerializer.ToString(person, options);\r\n```\r\n\r\nThis new behavior applies both to the root object being serialized (as shown above) plus any properties on POCOs including collections, such as `List<Person>`.\r\n\r\nNote: this issue does not enable any additional support for polymorphic **deserialize**. Currently, a property or collection of type `System.Object` will result in a `JsonElement` being created. Any additional polymorphic deserialize support must be done with a custom converter.\r\n","Url":"https://github.com/dotnet/corefx/issues/38650","RelatedDescription":"Open issue \"Support polymorphic serialization through new option\" (#38650)"},{"Id":"457582873","IsPullRequest":false,"CreatedAt":"2019-06-18T16:33:54","Actor":"layomia","Number":"38647","RawContent":null,"Title":"Add URI read and write methods to Utf8JsonReader/Writer and JsonElement","State":"open","Body":"There is a strong need for URI support:\r\n- https://github.com/dotnet/corefx/issues/38536\r\n- https://github.com/dotnet/corefx/issues/38568\r\n\r\nWe should add the following APIs to the reader, writer, and JsonElement:\r\n\r\n```C#\r\n\r\npublic ref partial struct Utf8JsonReader\r\n{\r\n    public System.Uri GetUri() { throw null; }\r\n    public bool TryGetUri(out System.Uri value) { throw null; }\r\n}\r\n\r\npublic sealed partial class Utf8JsonWriter : System.IAsyncDisposable, System.IDisposable\r\n{\r\n    public void WriteString(System.ReadOnlySpan<byte> utf8PropertyName, System.Uri value) { }\r\n    public void WriteString(System.ReadOnlySpan<char> propertyName, System.Uri value) { }\r\n    public void WriteString(string propertyName, System.Uri value) { }\r\n    public void WriteString(System.Text.Json.JsonEncodedText propertyName, System.Uri value) { }\r\n    public void WriteStringValue(System.Uri value) { }\r\n}\r\n\r\npublic readonly partial struct JsonElement\r\n{\r\n    public System.Uri GetUri() { throw null; }\r\n    public bool TryGetUri(out System.Uri value) { throw null; }\r\n}\r\n```\r\n\r\ncc @ahsonkhan, @steveharter, @JeremyKuhne, @bartonjs","Url":"https://github.com/dotnet/corefx/issues/38647","RelatedDescription":"Open issue \"Add URI read and write methods to Utf8JsonReader/Writer and JsonElement\" (#38647)"},{"Id":"457579948","IsPullRequest":false,"CreatedAt":"2019-06-18T16:27:30","Actor":"davidsh","Number":"38646","RawContent":null,"Title":"WindowsIdentity.RunImpersonated causes access denied issues on .NET Core","State":"open","Body":"It seems that WindowsIdentity.RunImpersonated() works differently in .NET Core compared with .NET Framework. This is causing a variety of issues including one affecting ASP.NET Core, #37120.\r\n\r\nThere is some difference in the way that the identity token permissions are getting set on the impersonated token. This is causing \"access denied\" issues in a variety of ways.\r\n\r\nConsider the following repro program included in this issue.\r\n\r\n<details>\r\n<summary>\r\nProgram.cs\r\n</summary>\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Runtime.InteropServices;\r\nusing System.Security.Principal;\r\nusing Microsoft.Win32.SafeHandles;\r\n\r\nnamespace ImpersonateTest\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\r\n        public static extern bool LogonUser(\r\n            string username,\r\n            string domain,\r\n            string password,\r\n            int logonType,\r\n            int logonProvider,\r\n            out SafeAccessTokenHandle token);\r\n\r\n        const int LOGON32_PROVIDER_DEFAULT = 0;\r\n        const int LOGON32_LOGON_INTERACTIVE = 2;\r\n        const int LOGON_TYPE_NETWORK = 3;\r\n        const int LOGON_TYPE_NEW_CREDENTIALS = 9;\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"(Framework: {Path.GetDirectoryName(typeof(object).Assembly.Location)})\");\r\n            SafeAccessTokenHandle tokenin;\r\n            bool returnValue = LogonUser(\"test1\", \".\", \"****\", LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, out tokenin); // ** Fails on .NET Core\r\n            //bool returnValue = LogonUser(\"test1\", \".\", \"****\", LOGON_TYPE_NETWORK, LOGON32_PROVIDER_DEFAULT, out tokenin); // ** Works on .NET Core\r\n            Debug.Assert(returnValue);\r\n            Run(tokenin);\r\n            tokenin.Dispose();\r\n        }\r\n\r\n        static void Run(SafeAccessTokenHandle token)\r\n        {\r\n            WindowsIdentity.RunImpersonated(token, () =>\r\n            {\r\n                RunDnsTest();\r\n                RunSocketsHttpHandlerTest();\r\n                RunWinHttpHandlerTest();\r\n            });\r\n        }\r\n\r\n        static void RunSocketsHttpHandlerTest()\r\n        {\r\n            try\r\n            {\r\n                var client = new HttpClient();\r\n                HttpResponseMessage response = client.GetAsync(\"http://corefx-net.cloudapp.net/echo.ashx\").GetAwaiter().GetResult();\r\n                Console.WriteLine($\"{WindowsIdentity.GetCurrent().Name} {WindowsIdentity.GetCurrent().ImpersonationLevel}\");\r\n                Console.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex);\r\n            }\r\n        }\r\n\r\n        static void RunWinHttpHandlerTest()\r\n        {\r\n            try\r\n            {\r\n                var handler = new WinHttpHandler();\r\n                var client = new HttpClient(handler);\r\n                HttpResponseMessage response = client.GetAsync(\"http://corefx-net.cloudapp.net/echo.ashx\").GetAwaiter().GetResult();\r\n                Console.WriteLine($\"{WindowsIdentity.GetCurrent().Name} {WindowsIdentity.GetCurrent().ImpersonationLevel}\");\r\n                Console.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex);\r\n            }\r\n        }\r\n\r\n        static void RunDnsTest()\r\n        {\r\n            try\r\n            {\r\n                string host = \"www.google.it\";\r\n                Console.WriteLine($\"{WindowsIdentity.GetCurrent().Name} {WindowsIdentity.GetCurrent().ImpersonationLevel}\");\r\n                Console.WriteLine($\"Dns.GetHostAddressesAsync({host}) \" + Dns.GetHostAddressesAsync(host).Result[0].ToString());\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\nImpersonateTest.csproj\r\n</summary>\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp2.2;netcoreapp3.0;net47</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http.WinHttpHandler\" Version=\"4.5.4\" />\r\n    <PackageReference Include=\"System.Security.Principal\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Security.Principal.Windows\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n  \r\n  <!-- Conditionally obtain references for the .NET Framework 4.7 target -->\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net47' \">\r\n    <Reference Include=\"System.Net.Http\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n</details>\r\n\r\nTo demonstrate the repro, create a local machine account (different from the one you use to run this repro) on the Windows machine. It doesn't matter if it belongs to the \"Administrators\" group or not.\r\n\r\nOn .NET Framework, the repro works fine with either LOGON32_LOGON_INTERACTIVE or LOGON_TYPE_NETWORK being used to create the impersonated identity. But .NET Core shows a variety of problems with using LOGON32_LOGON_INTERACTIVE. This repro is a simplified version of the ASP.NET Core issue #37120 which is presumably using a logged on identity similar to LOGON32_LOGON_INTERACTIVE.\r\n\r\nThe problems on .NET Core are the same using .NET Core 2.2 or .NET Core 3.0 Preview 6.\r\n\r\nThere are three tests in this repro. In one case, the System.IO.FileLoadException is not even catch'able. In my repro here, I have created a secondary Windows account called \"test1\".\r\n\r\nSuccess case:\r\n```\r\nS:\\dotnet\\ImpersonateTest>dotnet run -f netcoreapp2.2\r\n(Framework: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.5)\r\nDSHULMAN-REPRO1\\test1 Impersonation\r\nDns.GetHostAddressesAsync(www.google.it) 2607:f8b0:400a:800::2003\r\nDSHULMAN-REPRO1\\test1 Impersonation\r\n200 OK\r\nDSHULMAN-REPRO1\\test1 Impersonation\r\n200 OK\r\n```\r\n\r\n\r\nFailure case:\r\n```\r\nS:\\dotnet\\ImpersonateTest>dotnet run -f netcoreapp2.2\r\n(Framework: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.5)\r\nDSHULMAN-REPRO1\\test1 Impersonation\r\nSystem.AggregateException: One or more errors occurred. (This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server) ---> System.Net.Sockets.SocketException: This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server\r\n   at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult)\r\n   at System.Net.Dns.EndGetHostAddresses(IAsyncResult asyncResult)\r\n   at System.Net.Dns.<>c.<GetHostAddressesAsync>b__25_1(IAsyncResult asyncResult)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at ImpersonateTest.Program.RunDnsTest() in S:\\dotnet\\ImpersonateTest\\Program.cs:line 87\r\n---> (Inner Exception #0) System.Net.Sockets.SocketException (11002): This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server\r\n   at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult)\r\n   at System.Net.Dns.EndGetHostAddresses(IAsyncResult asyncResult)\r\n   at System.Net.Dns.<>c.<GetHostAddressesAsync>b__25_1(IAsyncResult asyncResult)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)<---\r\n\r\nSystem.Net.Http.HttpRequestException: This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server ---> System.Net.Sockets.SocketException: This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at ImpersonateTest.Program.RunSocketsHttpHandlerTest() in S:\\dotnet\\ImpersonateTest\\Program.cs:line 55\r\n\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Net.Http.WinHttpHandler, Version=4.0.3.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Access is denied.\r\n   at ImpersonateTest.Program.RunWinHttpHandlerTest()\r\n   at ImpersonateTest.Program.<>c.<Run>b__6_0() in S:\\dotnet\\ImpersonateTest\\Program.cs:line 46\r\n   at System.Security.Principal.WindowsIdentity.<>c__DisplayClass64_0.<RunImpersonatedInternal>b__0(Object <p0>)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonatedInternal(SafeAccessTokenHandle token, Action action)\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)\r\n   at ImpersonateTest.Program.Run(SafeAccessTokenHandle token) in S:\\dotnet\\ImpersonateTest\\Program.cs:line 42\r\n   at ImpersonateTest.Program.Main(String[] args) in S:\\dotnet\\ImpersonateTest\\Program.cs:line 35\r\n```\r\n\r\nIn the RunSocketsHttpHandlerTest() and RunDnsTest(), the error:\r\n\r\n>System.Net.Sockets.SocketException: This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server\r\n\r\nis being caused by the Win32 API GetAddrInfoExW() returning WSATRY_AGAIN error. This error is occurring immediately after calling the API. .NET Core is using GetAddrInfoExW() instead of GetAddrInfoW() because the former supports async (via overlapped callback). The GetAddrInfoW() API doesn't seem to be affected.  .NET Framework doesn't use GetAddrInfoExW() so it isn't affected.  I suspect that GetAddrInfoExW() is returning WSATRY_AGAIN due to the same access permissions problem running in the WindowsIdentity.RunImpersonated() context.\r\n\r\nWe also have #34697 which is a related problem with impersonation where DNS resolution is not working. That's probably due to the same GetAddrInfoExW() problem here.\r\n\r\nThis seems like a compatibility break from .NET Framework in how WindowsIdentity.RunImpersonated() behaves.","Url":"https://github.com/dotnet/corefx/issues/38646","RelatedDescription":"Open issue \"WindowsIdentity.RunImpersonated causes access denied issues on .NET Core\" (#38646)"},{"Id":"457563442","IsPullRequest":true,"CreatedAt":"2019-06-18T16:23:49","Actor":"dotnet-maestro-bot","Number":"38645","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @MattGal\n* @mmitche\n* @wtgodbe\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/38645","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#38645)"},{"Id":"457561680","IsPullRequest":true,"CreatedAt":"2019-06-18T15:50:43","Actor":"MattGal","Number":"38644","RawContent":null,"Title":"Change to internal Helix queue","State":"closed","Body":"I fixed one part but not the other (.Open no longer allow anonymous access)","Url":"https://github.com/dotnet/corefx/pull/38644","RelatedDescription":"Closed or merged PR \"Change to internal Helix queue\" (#38644)"},{"Id":"457555333","IsPullRequest":false,"CreatedAt":"2019-06-18T15:39:12","Actor":"martincostello","Number":"38643","RawContent":null,"Title":"JsonSerializer throws TypeLoadException in Parse<T> call","State":"open","Body":"Using 3.0.100-preview6-012264 of the .NET Core 3.0 SDK, when trying to serialize an object that contains property that is an `IDictionary<string, T>`, then the following exception is thrown:\r\n\r\n```\r\nSystem.ArgumentException : GenericArguments[2], 'System.Collections.Generic.Dictionary`2[System.String,System.String]', on 'System.Text.Json.Serialization.JsonPropertyInfoNotNullable`3[TClass,TDeclaredProperty,TRuntimeProperty]' violates the constraint of type 'TRuntimeProperty'.\r\n---- System.TypeLoadException : GenericArguments[2], 'System.Collections.Generic.Dictionary`2[System.String,System.String]', on 'System.Text.Json.Serialization.JsonPropertyInfoNotNullable`3[TClass,TDeclaredProperty,TRuntimeProperty]' violates the constraint of type parameter 'TRuntimeProperty'.\r\nStack Trace:\r\n     at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n     at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n     at System.Text.Json.Serialization.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n     at System.Text.Json.Serialization.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n     at System.Text.Json.Serialization.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n     at System.Text.Json.Serialization.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n     at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n     at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n     at System.Text.Json.Serialization.JsonSerializer.Parse[TValue](String json, JsonSerializerOptions options)\r\n\r\n```\r\n\r\nThis issue was found while testing out the new System.Text.Json APIs with an existing production application when trying to serialize and deserialize objects containing dictionaries.\r\n\r\nA unit test that demonstrates this issue and the comparable working JSON .NET behaviour is below:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text.Json.Serialization;\r\nusing Xunit;\r\nusing JsonConvert = Newtonsoft.Json.JsonConvert;\r\nusing JsonSerializer = System.Text.Json.Serialization.JsonSerializer;\r\n\r\nnamespace JsonSerializerTypeLoadException\r\n{\r\n    public static class Repro\r\n    {\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_SystemTextJson()\r\n        {\r\n            // Arrange\r\n            string json = \"{\\\"Child\\\":{\\\"1\\\":{\\\"A\\\":\\\"1\\\",\\\"B\\\":\\\"\\\",\\\"C\\\":[],\\\"D\\\":[],\\\"E\\\":null,\\\"F\\\":[],\\\"G\\\":null,\\\"H\\\":null,\\\"I\\\":null,\\\"J\\\":null,\\\"K\\\":[]}}}\";\r\n\r\n            var actual = JsonSerializer.Parse<Parent>(json, new JsonSerializerOptions() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Child);\r\n            Assert.Equal(1, actual.Child.Count);\r\n            Assert.True(actual.Child.ContainsKey(\"1\"));\r\n            Assert.Equal(\"1\", actual.Child[\"1\"].A);\r\n        }\r\n\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_NewtonsoftJson()\r\n        {\r\n            // Arrange\r\n            string json = \"{\\\"Child\\\":{\\\"1\\\":{\\\"A\\\":\\\"1\\\",\\\"B\\\":\\\"\\\",\\\"C\\\":[],\\\"D\\\":[],\\\"E\\\":null,\\\"F\\\":[],\\\"G\\\":null,\\\"H\\\":null,\\\"I\\\":null,\\\"J\\\":null,\\\"K\\\":[]}}}\";\r\n\r\n            var actual = JsonConvert.DeserializeObject<Parent>(json);\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Child);\r\n            Assert.Equal(1, actual.Child.Count);\r\n            Assert.True(actual.Child.ContainsKey(\"1\"));\r\n            Assert.Equal(\"1\", actual.Child[\"1\"].A);\r\n        }\r\n\r\n        public class Parent\r\n        {\r\n            public IDictionary<string, Child> Child { get; set; }\r\n        }\r\n\r\n        public class Child\r\n        {\r\n            public string A { get; set; }\r\n            public string B { get; set; }\r\n            public string[] C { get; set; }\r\n            public string[] D { get; set; }\r\n            public bool? E { get; set; }\r\n            public string[] F { get; set; }\r\n            public DateTimeOffset? G { get; set; }\r\n            public DateTimeOffset? H { get; set; }\r\n            public int? I { get; set; }\r\n            public int? J { get; set; }\r\n            public string[] K { get; set; }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/38643","RelatedDescription":"Open issue \"JsonSerializer throws TypeLoadException in Parse<T> call\" (#38643)"},{"Id":"457507588","IsPullRequest":false,"CreatedAt":"2019-06-18T14:13:16","Actor":"martincostello","Number":"38641","RawContent":null,"Title":"JsonSerializer support for TimeSpan in 3.0?","State":"open","Body":"_Apologies if this is already answered somewhere else, but if it was my search abilities failed me._\r\n\r\nI'm trying out the preview 6 of 3.0 with some existing production application code, and one of the issues that's come out of testing is that some of our existing objects we use in our API contracts use properties which are `TimeSpan` values, which are then represented as strings.\r\n\r\nIs support for `TimeSpan` properties planned for 3.0 for the new System.Text.Json APIs?\r\n\r\nIf it's not going to be that gives us notice to do some refactoring ahead of September to change them to strings so we can use the new serializer, where as if it's planned but just not implemented yet then we just need to wait for a later preview to get this working.\r\n\r\nBelow is a minimal repro unit test that demonstrates the failure for `TimeSpan` to be handled compared to our existing JSON .NET code.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Text.Json.Serialization;\r\nusing Xunit;\r\nusing JsonConvert = Newtonsoft.Json.JsonConvert;\r\nusing JsonSerializer = System.Text.Json.Serialization.JsonSerializer;\r\n\r\nnamespace JsonSerializerTimeSpanNotSupportedException\r\n{\r\n    public static class Repro\r\n    {\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_SystemTextJson()\r\n        {\r\n            // Arrange\r\n            string json = \"{\\\"child\\\":{\\\"value\\\":\\\"00:10:00\\\"}}\";\r\n\r\n            // Act (fails in preview 6, throws: System.Text.Json.JsonException : The JSON value could not be converted to System.TimeSpan. Path: $.child.value | LineNumber: 0 | BytePositionInLine: 28.)\r\n            var actual = JsonSerializer.Parse<Parent>(json, new JsonSerializerOptions() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Child);\r\n            Assert.Equal(TimeSpan.FromMinutes(10), actual.Child.Value);\r\n        }\r\n\r\n        [Fact]\r\n        public static void Can_Deserialize_Object_With_NewtonsoftJson()\r\n        {\r\n            // Arrange\r\n            string json = \"{\\\"child\\\":{\\\"value\\\":\\\"00:10:00\\\"}}\";\r\n\r\n            var actual = JsonConvert.DeserializeObject<Parent>(json);\r\n\r\n            // Assert\r\n            Assert.NotNull(actual);\r\n            Assert.NotNull(actual.Child);\r\n            Assert.Equal(TimeSpan.FromMinutes(10), actual.Child.Value);\r\n        }\r\n\r\n        private sealed class Parent\r\n        {\r\n            public Child Child { get; set; }\r\n        }\r\n\r\n        private sealed class Child\r\n        {\r\n            public TimeSpan Value { get; set; }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/38641","RelatedDescription":"Open issue \"JsonSerializer support for TimeSpan in 3.0?\" (#38641)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"457812625","IsPullRequest":false,"CreatedAt":"2019-06-19T05:26:20","Actor":"mavasani","Number":"36568","RawContent":null,"Title":"Consider if SuppressionDescriptor should be a struct","State":"open","Body":"https://github.com/dotnet/roslyn/pull/36067 adds a new public API `SuppressionDescriptor` which is analogous to `DiagnosticDescriptor` - `DiagnosticSuppressor` declaratively provides its supported suppression descriptors, similar to the way that `DiagnosticAnalyzer` provides its supported diagnostic descriptors. `SuppressionDescriptor` is a class in the PR for consistency with `DiagnosticDescriptor`. It was suggested [here](https://github.com/dotnet/roslyn/pull/36067#discussion_r295020664) that it could be a struct. This issue tracks whether or not to make this change.","Url":"https://github.com/dotnet/roslyn/issues/36568","RelatedDescription":"Open issue \"Consider if SuppressionDescriptor should be a struct\" (#36568)"},{"Id":"457802304","IsPullRequest":true,"CreatedAt":"2019-06-19T04:37:15","Actor":"panopticoncentral","Number":"36567","RawContent":null,"Title":"Make metadata properties more efficient","State":"open","Body":"In heap dumps of large CPS solutions, ~15% of the heap is taken up by VisualStudioProject instances. The issue is VisualStudioProject._allMetadataReferences. While most metadata references have the default metadata properties, every time a metadata reference is added the code currently adds an entry in _allMetadataReferences pointing to a list of metadata properties. First, if the metadata properties are default and there's only one reference, we're wasting space by allocating the list in the first place. But second, this list starts with an initial capacity of 4, which means that we're wasting quadruple the space. For every metadata reference. Of which there are a _lot_ in .NET Core.\r\n\r\nThe solution is just to optimize the case where there is only one of the metadata reference and it has the default properties. So:\r\n\r\n* `!_allMetadataReferences.TryGetValue(path, out var list)` means \"we have not seen this reference\"\r\n* `_allMetadataReferences.TryGetValue(path, out var list) && list == null` means \"we have seen only one of this reference and its metadata properties are the default ones.\"\r\n* Otherwise, we've either seen this reference multiple times, or the one time we saw it its metadata properties were not the default.\r\n\r\nI chose not to optimize the remove path (i.e. you have multiple references and you remove every one except the default properties) because it seemed to be a pretty esoteric situation.","Url":"https://github.com/dotnet/roslyn/pull/36567","RelatedDescription":"Open PR \"Make metadata properties more efficient\" (#36567)"},{"Id":"457795588","IsPullRequest":true,"CreatedAt":"2019-06-19T04:04:46","Actor":"jasonmalinowski","Number":"36566","RawContent":null,"Title":"Change dotnet_diagnostic.*.severity settings to match code style","State":"open","Body":"The code style settings we already had in a .editorconfig file supplied a set of terms to set different diagnostic severities. The terms don't match the underlying compiler enum, but we will adopt them for setting compiler diagnostic settings as well to keep the values consistent inside a .editorconfig file.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/35690","Url":"https://github.com/dotnet/roslyn/pull/36566","RelatedDescription":"Open PR \"Change dotnet_diagnostic.*.severity settings to match code style\" (#36566)"},{"Id":"457791299","IsPullRequest":true,"CreatedAt":"2019-06-19T03:42:30","Actor":"jasonmalinowski","Number":"36565","RawContent":null,"Title":"Set a non-fatal error handler that rethrows exceptions","State":"open","Body":"Without this our unit tests will throw non-fatal exceptions and just march on silently, making us unaware of bad things happening.","Url":"https://github.com/dotnet/roslyn/pull/36565","RelatedDescription":"Open PR \"Set a non-fatal error handler that rethrows exceptions\" (#36565)"},{"Id":"457755995","IsPullRequest":false,"CreatedAt":"2019-06-19T03:10:32","Actor":"AbhitejJohn","Number":"36561","RawContent":null,"Title":"[RPS] Additional Image loads as part of initializing the Csharp language service","State":"closed","Body":"[This ](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/FindReferences/StreamingFindUsagesPresenter.cs#L53) logic ends up importing all implementations of `ITableColumnDefinition` which is essentially the base interface for any component that has a table control (Test Explorer being one of them since 16.2). This causes unnecessary image loads on solution open/project creation. \r\n\r\nFiling this to track fixing this to be more specific to the column definitions that Roslyn needs.\r\n\r\nAdditional odities - I haven't seen this repro in IntPreview bits though(VisualStudio.16.IntPreview/16.2.0-pre.4.0+29017.117.d16.2stg) and this specific code has not changed.","Url":"https://github.com/dotnet/roslyn/issues/36561","RelatedDescription":"Closed issue \"[RPS] Additional Image loads as part of initializing the Csharp language service\" (#36561)"},{"Id":"457760545","IsPullRequest":true,"CreatedAt":"2019-06-19T03:07:16","Actor":"heejaechang","Number":"36562","RawContent":null,"Title":"existing code loaded everyone in VS who MEF exported ITableColumnDefi…","State":"closed","Body":"…nition. now we make sure we only load one that we care","Url":"https://github.com/dotnet/roslyn/pull/36562","RelatedDescription":"Closed or merged PR \"existing code loaded everyone in VS who MEF exported ITableColumnDefi…\" (#36562)"},{"Id":"457739722","IsPullRequest":true,"CreatedAt":"2019-06-19T02:26:51","Actor":"dibarbet","Number":"36552","RawContent":null,"Title":"Merge 16.3 into features/lspSupport","State":"closed","Body":"merging 16.3 changes into features/lspSupport","Url":"https://github.com/dotnet/roslyn/pull/36552","RelatedDescription":"Closed or merged PR \"Merge 16.3 into features/lspSupport\" (#36552)"},{"Id":"457775551","IsPullRequest":true,"CreatedAt":"2019-06-19T02:25:52","Actor":"dibarbet","Number":"36564","RawContent":null,"Title":"Cherry pick rdt","State":"open","Body":"Cherry pick the rdt changes made on the 16.3 preview branch.","Url":"https://github.com/dotnet/roslyn/pull/36564","RelatedDescription":"Open PR \"Cherry pick rdt\" (#36564)"},{"Id":"457747066","IsPullRequest":true,"CreatedAt":"2019-06-19T02:00:07","Actor":"dotnet-bot","Number":"36557","RawContent":null,"Title":"Merge master to demos/records","State":"closed","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36557","RelatedDescription":"Closed or merged PR \"Merge master to demos/records\" (#36557)"},{"Id":"457746970","IsPullRequest":true,"CreatedAt":"2019-06-19T01:30:24","Actor":"dotnet-bot","Number":"36554","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36554","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#36554)"},{"Id":"457747000","IsPullRequest":true,"CreatedAt":"2019-06-19T01:30:19","Actor":"dotnet-bot","Number":"36555","RawContent":null,"Title":"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps\ngit reset --hard upstream/release/dev16.3-preview1-vs-deps\ngit merge upstream/release/dev16.3-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36555","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps\" (#36555)"},{"Id":"457747026","IsPullRequest":true,"CreatedAt":"2019-06-19T01:30:15","Actor":"dotnet-bot","Number":"36556","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36556","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#36556)"},{"Id":"457747093","IsPullRequest":true,"CreatedAt":"2019-06-19T01:30:06","Actor":"dotnet-bot","Number":"36558","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36558","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#36558)"},{"Id":"457762313","IsPullRequest":true,"CreatedAt":"2019-06-19T01:20:12","Actor":"333fred","Number":"36563","RawContent":null,"Title":"Wire NullableWalker snapshotting to the public SpeculativeSemanticModel apis","State":"open","Body":"This PR wires ups the speculative semantic models created for `StatementSyntax`es in method and property bodies to the snapshots we are now creating in NullableWalker. We use a binary search to find the appropriate snapshot for a given position, restore a walker for that position, and then run analysis on that restored information. I have some minimal testing to verify that this speculative model works as expected within a statement and expression, but I expect that we will add more tests as we verify the results of the NullableAnalysis rewriting.\r\n\r\nFYI @jasonmalinowski.","Url":"https://github.com/dotnet/roslyn/pull/36563","RelatedDescription":"Open PR \"Wire NullableWalker snapshotting to the public SpeculativeSemanticModel apis\" (#36563)"},{"Id":"457751767","IsPullRequest":false,"CreatedAt":"2019-06-19T00:24:11","Actor":"333fred","Number":"36560","RawContent":null,"Title":"Use block body for getter not available in expression-bodied getter","State":"open","Body":"Given the following code in a getter:\r\n\r\n```C#\r\nclass C\r\n{\r\n\tint Prop { get => 1; }\r\n}\r\n```\r\n\r\nWhen I `CTRL+.` on the getter, I am not offered a refactoring to move to a block body. I _am_ offered a refactoring to move the whole thing to an expression-bodied property. Not useful if I'm looking to expand the body of the getter.\r\n\r\n![image](https://user-images.githubusercontent.com/2371880/59728178-ce8af280-91ed-11e9-812a-7eac8223211a.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/36560","RelatedDescription":"Open issue \"Use block body for getter not available in expression-bodied getter\" (#36560)"},{"Id":"457751323","IsPullRequest":false,"CreatedAt":"2019-06-19T00:21:59","Actor":"heejaechang","Number":"36559","RawContent":null,"Title":"Make RemoteHost to start itself when someone ask for it.","State":"open","Body":"right now, RemoteHost is designed to start when package is loaded or first workspace event is fired.\r\n\r\nif there is someone who ask for it before those, they will think remote host is disabled. \r\n\r\nconsider changing remote host to start itself when someone ask for it before roslyn pre-emptively starts it if remote host is enabled.","Url":"https://github.com/dotnet/roslyn/issues/36559","RelatedDescription":"Open issue \"Make RemoteHost to start itself when someone ask for it.\" (#36559)"},{"Id":"457741147","IsPullRequest":false,"CreatedAt":"2019-06-18T23:35:20","Actor":"jcouv","Number":"36553","RawContent":null,"Title":"Allow `#nullable` as a shorthand for `#nullable enable`","State":"open","Body":"I expect `#nullable enable` will be the most common usage of `#nullable` directive, so it makes sense to give it a shorter form and nicer default.","Url":"https://github.com/dotnet/roslyn/issues/36553","RelatedDescription":"Open issue \"Allow `#nullable` as a shorthand for `#nullable enable`\" (#36553)"},{"Id":"457714686","IsPullRequest":true,"CreatedAt":"2019-06-18T21:57:00","Actor":"sharwell","Number":"36551","RawContent":null,"Title":"Apply a hang mitigating timeout to UI thread operations","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/36551","RelatedDescription":"Open PR \"Apply a hang mitigating timeout to UI thread operations\" (#36551)"},{"Id":"457709719","IsPullRequest":false,"CreatedAt":"2019-06-18T21:42:10","Actor":"jcouv","Number":"36550","RawContent":null,"Title":"Consider removing support for `#pragma warning *enable*`","State":"open","Body":"In earlier designs of nullability, the `enable` setting was pretty useful for the nullability feature.\r\nBut now, users can enable nullable warnings with `#nullable enable warnings` instead.\r\n\r\nThe question is whether `#pragma warning enable ...` still stands on its own as a feature to be included in C# 8.0, or whether we should remove it.\r\n\r\nIn recent LDM, we said we need to come back to this question: https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-13.md#removing-support-for-pragma-warning-enable-\r\n\r\nTagging @AlekseyTs @gafter @RikkiGibson ","Url":"https://github.com/dotnet/roslyn/issues/36550","RelatedDescription":"Open issue \"Consider removing support for `#pragma warning *enable*`\" (#36550)"},{"Id":"457704909","IsPullRequest":true,"CreatedAt":"2019-06-18T21:28:57","Actor":"agocke","Number":"36549","RawContent":null,"Title":"Update compiler toolset to arcade version","State":"open","Body":"Fixes #36037","Url":"https://github.com/dotnet/roslyn/pull/36549","RelatedDescription":"Open PR \"Update compiler toolset to arcade version\" (#36549)"},{"Id":"457704198","IsPullRequest":false,"CreatedAt":"2019-06-18T21:27:03","Actor":"333fred","Number":"36548","RawContent":null,"Title":"Improve codegen for ??= in Nullable Value Type scenarios","State":"open","Body":"Because of concerns with the underlying code of `TransformCompoundAssignmentLHS` (https://github.com/dotnet/roslyn/issues/36443), we're not currently using `BoundSpillSequence`s to lower ??= in the nullable value type case. We can improve codegen by using these after we're sure that the causes of https://github.com/dotnet/roslyn/issues/36443 are fixed.\r\n\r\nCurrent codegen form:\r\n```c#\r\nvar tmp = lhsRead.GetValueOrDefault()\r\nlhsRead.HasValue ? tmp : { /* sequence */ tmp = loweredRight; transformedLhs = tmp; tmp }\r\n```\r\n\r\nBetter form:\r\n```C#\r\nvar tmp = lhsRead.GetValueOrDefault();\r\nif (lhsRead.GetValueOrDefault())\r\n{\r\n\ttmp = loweredRight;\r\n\ttransformedLhs = tmp;\r\n}\r\ntmp\r\n```\r\n\r\nThis better form needs a `BoundSpillSequence`.","Url":"https://github.com/dotnet/roslyn/issues/36548","RelatedDescription":"Open issue \"Improve codegen for ??= in Nullable Value Type scenarios\" (#36548)"},{"Id":"457703517","IsPullRequest":true,"CreatedAt":"2019-06-18T21:25:13","Actor":"bbartels","Number":"36547","RawContent":null,"Title":"[WIP] Lowering foreach iteration over List<T> to for-loop","State":"open","Body":"# General\r\n\r\nLowering foreach iteration over List<T> to for loop, when applicable.\r\n\r\nIt came to me as quite the surprise when I found out that roslyn doesn't actually lower foreach loops to for\r\nwhen iterating through a List<T>.  \r\nUpon looking at the List<T> implementation I found out, that the reason why this isn't as trivial as for T[] is because List<T> keeps track of an internal version, which changes each time the list is modified.\r\nAs that internal version is not exposed publically this optimization would require a change in the List<T> API to allow the said version to be accessed.\r\n\r\nBy moving all the List<T>.Enumerator logic onto the callsite itself it would drastically increase performance in certain scenarios.\r\nI would still need some further confirmation that this is actually a side-effect less optimization, I myself couldn't think of \r\nany possible things that could go wrong, but I may be completely missing something.\r\n\r\nCurrently using the Capacity property as a placeholder until the internal version of List<T> is exposed.\r\n\r\n# Demonstration\r\n\r\n## Initial C# code\r\n\r\n```csharp\r\nforeach (var x in some_list)\r\n{\r\n    // Do something with x\r\n}\r\n```\r\n\r\n## Previous Roslyn translation \r\n\r\n```csharp\r\nvar enumerator = some_list.GetEnumerator();\r\ntry\r\n{\r\n    while (enumerator.MoveNext())\r\n    {\r\n        // Do something with enumerator.Current\r\n    }\r\n}\r\nfinally\r\n{\r\n    enumerator.Dispose();\r\n}\r\n```\r\n\r\n## New roslyn translation\r\n\r\n```csharp\r\nint version = some_list.Version; // Version property does not currently exist\r\nint i = 0;\r\nwhile (i < some_list.Count)\r\n{\r\n    // Do something with some_list[i]\r\n    if (version != some_list.Version)\r\n    {\r\n        throw new InvalidOperationException(); // Matching Exception message still needs to be passed to .ctor\r\n    }\r\n    i++;\r\n}\r\n```\r\n\r\n# Benefits\r\n\r\nPro:\r\n- Massive performance benefits when body of loop performs little work\r\n    - In case of summing the length of all strings in List\\<string\\> up to 2.5x better performance\r\n- No allocation of Enumerator object\r\n\r\nCon:\r\n- Increased IL size (6 bytes per loop)\r\n- Necessity of modifying the List<T> API in order to expose internal version \r\n\r\n## Benchmarks\r\n\r\nThis benchmark just sums up a list of integers for the first three results and the lengths of a list of strings for the last three.\r\n\r\n![](https://media.discordapp.net/attachments/406551726896709632/590592060617261065/unknown.png)\r\n\r\n# Considerations\r\n\r\nThere are a couple more things that have to be considered:\r\n\r\n- Would this cause any side-effects?\r\n- Would it cause issues when allowing lowering of types that derive from List\\<T\\>?\r\n- Is it a good idea to expose the internal version field of List\\<T\\>?\r\n    - If not, maybe a hashed version?\r\n- Could this be implemented in RyuJit to do runtime checking for List\\<T\\>, as e.g. IList\\<T\\> would not be lowered?\r\n\r\n# Todo\r\n\r\nThings that are yet to be completed, assuming aforementioned considerations are not going to be an issue:\r\n- Add Tests\r\n- Investigate/Implement possibility of allowing lowering of types that derive from List\\<T\\>\r\n- Add API to expose internal version of List\\<T\\>\r\n- Modify invoking InvalidOperationException constructor to take correct string argument\r\n    - I am actually not quite sure how to do this as the no parameter constructor is already added as a WellKnownMember,\r\n        so I can't add another one in WellKnownMembers.cs that takes one parameter, any help is appreciated!\r\n- Modify PR to change WellKnownMember from System_Collections_Generic_List_T__get_Capacity to System_Collections_Generic_List_T__get_Version,\r\n    once the Version API has been added","Url":"https://github.com/dotnet/roslyn/pull/36547","RelatedDescription":"Open PR \"[WIP] Lowering foreach iteration over List<T> to for-loop\" (#36547)"},{"Id":"457684224","IsPullRequest":false,"CreatedAt":"2019-06-18T20:37:34","Actor":"sharwell","Number":"36546","RawContent":null,"Title":"Backspace completion disappears if entire identifier is removed","State":"open","Body":"**Version Used**: 16.2 Preview 2\r\n\r\n:link: https://developercommunity.visualstudio.com/content/problem/567910/vs2019-intellisense-worst-than-vs2010.html\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In a VB method, type `Console.W`\r\n2. Press <kbd>Backspace</kbd>\r\n\r\n**Expected Behavior**:\r\n\r\nCompletion is visible, just as though the user just typed `.`.\r\n\r\n**Actual Behavior**:\r\n\r\nCompletion disappears.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36546","RelatedDescription":"Open issue \"Backspace completion disappears if entire identifier is removed\" (#36546)"},{"Id":"457683242","IsPullRequest":false,"CreatedAt":"2019-06-18T20:35:11","Actor":"sharwell","Number":"36545","RawContent":null,"Title":"VB line commit should add missing argument parentheses","State":"open","Body":"**Version Used**: 16.2 Preview 2\r\n\r\n:link: https://developercommunity.visualstudio.com/content/problem/567910/vs2019-intellisense-worst-than-vs2010.html\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Type the following VB code:\r\n\r\n    ```vb\r\n    Console.WriteLine \"Text\"\r\n    ```\r\n\r\n2. Press <kbd>Enter</kbd>\r\n\r\n**Expected Behavior**:\r\n\r\nParentheses are automatically added:\r\n\r\n```vb\r\nConsole.WriteLine(\"Text\")\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe text is not changed, and error BC30800 is reported saying:\r\n\r\n> Method arguments must be enclosed in parentheses.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36545","RelatedDescription":"Open issue \"VB line commit should add missing argument parentheses\" (#36545)"},{"Id":"457678812","IsPullRequest":false,"CreatedAt":"2019-06-18T20:24:10","Actor":"CoolDadTx","Number":"36544","RawContent":null,"Title":"IDE0040 warning ","State":"open","Body":"Visual Studio 2019 16.2.0 Preview 2.0\r\n\r\nIDE0040 warning generated on partial classes even if one of the partial class declarations have one.\r\n\r\nSteps:\r\n1. Create a partial class definition with an access modifier for the type.\r\n2. Create a partial class definition for the same type without the modifier.\r\n\r\n```csharp\r\npublic static partial class ContainerConfig\r\n{}\r\n\r\nstatic partial class ContainerConfig   //IDE0040\r\n{ }\r\n```\r\n\r\nExpected Behavior:\r\nThis is debatable but the general rule of thumb (from my observation) for partials is to only specify the type (class/struct) and name of the partial class in all but one declaration. This reduces the likelihood of making a mistake that conflicts with one of the other declarations. The language will use whichever one has the access modifier and therefore, while it is not explicitly set on all the partial declarations, it is inferred from the partial declaration that has it.\r\n\r\nActual Behavior:\r\nThe partial declarations that don't have the modifier are flagged with a warning.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36544","RelatedDescription":"Open issue \"IDE0040 warning \" (#36544)"},{"Id":"457666345","IsPullRequest":true,"CreatedAt":"2019-06-18T19:54:09","Actor":"agocke","Number":"36543","RawContent":null,"Title":"Implement parsing changes from LDM","State":"open","Body":"Fixes #36514","Url":"https://github.com/dotnet/roslyn/pull/36543","RelatedDescription":"Open PR \"Implement parsing changes from LDM\" (#36543)"},{"Id":"457643137","IsPullRequest":true,"CreatedAt":"2019-06-18T18:56:55","Actor":"ivanbasov","Number":"36542","RawContent":null,"Title":"For To Foreach Bug CS1656","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/36506","Url":"https://github.com/dotnet/roslyn/pull/36542","RelatedDescription":"Open PR \"For To Foreach Bug CS1656\" (#36542)"},{"Id":"457635421","IsPullRequest":false,"CreatedAt":"2019-06-18T18:38:50","Actor":"TessenR","Number":"36541","RawContent":null,"Title":"Roslyn should not infer oblivious annotations when nullable context is enabled","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (18 Jun 2019)\r\nLatest commit d4afae by Andrew Hall:\r\nDisable move type when the options service isn't present (#36334)\r\n\r\nUse MEF to provide implementation contract\r\n\r\n**Steps to Reproduce**:\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\ninterface I1<T> { T Prop { get; set; } }\r\n\r\nclass D\r\n{\r\n    void M(ref I1<I1<string?>> i1, ref I1<I1<string>?> i2, bool b)\r\n    {\r\n        var x = b ? ref i1 : ref i2;\r\n\r\n        x.Prop.Prop.ToString();\r\n        x.Prop.Prop = null;\r\n        x.Prop.ToString();\r\n        x.Prop = null;\r\n    }        \r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n`x` is inferred to some type you can write explicitly. Consequently `x.Prop` and `x.Prop.Prop` are either nullable or non-nullable and either dereferneces of these properties or assignments of null values to them reported as warnings.\r\n\r\n**Actual Behavior**:\r\nNo warnings are reported for usages of `x` and its properties.\r\n\r\n**Notes**\r\nIt looks like `x` is inferred to a type with oblivious annotations (except for the top-level annotation which is notnull) since neither dereferences of `x.Prop` and `x.Prop.Prop` nor assigning `null` values to them produce any warnings.\r\n\r\nNote that you cannot achieve the same warnings behavior with explicitly specified type usage. I.e.\r\n`I1<I1<string>> x = ...` produces warnings for assignments of null values\r\n`I1<I1<string?>> x = ...` produces warnings for the first dereference of `x.Prop.Prop` and assignment of null to `x.Prop`\r\n`I1<I1<string>?> x = ...` produces warnings for the first dereference of `x.Prop` and assignment of null to `x.Prop.Prop`\r\n`I1<I1<string?>?> x = ...` produces warnings for the first dereferences of `x.Prop` and `x.Prop.Prop`","Url":"https://github.com/dotnet/roslyn/issues/36541","RelatedDescription":"Open issue \"Roslyn should not infer oblivious annotations when nullable context is enabled\" (#36541)"},{"Id":"457628708","IsPullRequest":false,"CreatedAt":"2019-06-18T18:23:02","Actor":"TessenR","Number":"36540","RawContent":null,"Title":"Roslyn does not provide a way to suppress nullability mismatch warnings in conditional operators","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (18 Jun 2019)\r\nLatest commit d4afae by Andrew Hall:\r\nDisable move type when the options service isn't present (#36334)\r\n\r\nUse MEF to provide implementation contract\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n#nullable enable\r\ninterface I1<T> { }\r\n\r\nclass D\r\n{\r\n    void M(ref I1<I1<string?>> i1, ref I1<I1<string>?> i2, bool b)\r\n    {\r\n        _ = (b!! ? ref i1!!! : ref i2!!!)!!;\r\n    }        \r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNullability warnings are suppressed\r\n\r\n**Actual Behavior**:\r\n`warning CS8619: Nullability of reference types in value of type 'I1<I1<string?>>' doesn't match target type 'I1<I1<string>?>'.`\r\n","Url":"https://github.com/dotnet/roslyn/issues/36540","RelatedDescription":"Open issue \"Roslyn does not provide a way to suppress nullability mismatch warnings in conditional operators\" (#36540)"},{"Id":"457604114","IsPullRequest":true,"CreatedAt":"2019-06-18T17:22:56","Actor":"sharwell","Number":"36539","RawContent":null,"Title":"Formatter benchmark","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/36539","RelatedDescription":"Open PR \"Formatter benchmark\" (#36539)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"457733189","IsPullRequest":true,"CreatedAt":"2019-06-19T00:16:53","Actor":"jkotas","Number":"7540","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7540","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7540)"},{"Id":"457279660","IsPullRequest":true,"CreatedAt":"2019-06-18T21:27:44","Actor":"jkotas","Number":"7536","RawContent":null,"Title":"Ensure ObjectWriter package does not get used on ObjWriterBuild mode","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7536","RelatedDescription":"Closed or merged PR \"Ensure ObjectWriter package does not get used on ObjWriterBuild mode\" (#7536)"},{"Id":"457614786","IsPullRequest":false,"CreatedAt":"2019-06-18T17:49:09","Actor":"forestbat","Number":"7539","RawContent":null,"Title":"There is a IL2CPP compiler on tap","State":"open","Body":"The origin maintainer of the compiler has abandoned this project，so I fork it and made some small changes。\r\nIt's dependency is still .NET Framework and its built-in clang and llvm-linker should be updated to 8.0.\r\nPlease see this and hope your reply。\r\nhttps://github.com/forestbat/il2cpp","Url":"https://github.com/dotnet/corert/issues/7539","RelatedDescription":"Open issue \"There is a IL2CPP compiler on tap\" (#7539)"},{"Id":"457470464","IsPullRequest":false,"CreatedAt":"2019-06-18T13:35:21","Actor":"hhblaze","Number":"7538","RawContent":null,"Title":"Win10, NetCore 2.2, simple \"HelloWorld\" with Google.Cloud.Datastore.V1 dependency fails to compile (with Firestore all is good)","State":"closed","Body":"Content of HelloWorld.csproj\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Google.Cloud.Datastore.V1\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nCompilation output\r\n\r\n```\r\nH:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld>dotnet publish -r win-x64 -c release\r\nMicrosoft (R) Build Engine 16.1.76+g14b0a930a7 для .NET Core\r\n(C) (Microsoft Corporation). \r\n\r\n  Restore completed в 1,7 sec для H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj.\r\n  HelloWorld -> H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\bin\\release\\netcoreapp2.2\\win-x64\\HelloWorld.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : warning : Method `[System.Interactive.Async]System.Linq.AsyncEnumerable+CatchAsyncIterator`2+<MoveNextCore>d__7<System.__Canon,System.__Canon>.MoveNext()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramDefault: [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\n\r\nHelloWorld.obj : error LNK2001: unresolved external symbol dlopen [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\nHelloWorld.obj : error LNK2001: unresolved external symbol dlsym [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\nbin\\release\\netcoreapp2.2\\win-x64\\native\\HelloWorld.exe : fatal error LNK1120: 2 unresolved externals [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\nC:\\Users\\blaze\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27818-01\\build\\Microsoft.NETCore.Native.targets(342,5): error MSB3073: comand output \"\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64\\link.exe\"  @\"obj\\release\\netcoreapp2.2\\win-x64\\native\\link.rsp\"\" wit code 1120. [H:\\c\\blaze_svn\\Projects\\blaze\\_Tests\\CoreDatastore\\HelloWorld\\HelloWorld.csproj]\r\n```","Url":"https://github.com/dotnet/corert/issues/7538","RelatedDescription":"Closed issue \"Win10, NetCore 2.2, simple \"HelloWorld\" with Google.Cloud.Datastore.V1 dependency fails to compile (with Firestore all is good)\" (#7538)"},{"Id":"457362196","IsPullRequest":false,"CreatedAt":"2019-06-18T09:31:43","Actor":"hhblaze","Number":"7537","RawContent":null,"Title":"\"Hello World\" compilation fails: Ubuntu 19.04 Clang-6.0 .NetCore 2.2.204","State":"open","Body":"```\r\nosboxes@osboxes:~/Documents/HelloWorld$ export CppCompilerAndLinker=clang-6.0\r\nosboxes@osboxes:~/Documents/HelloWorld$ dotnet publish -r linux-x64 -c release\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 123.17 ms for /home/osboxes/Documents/HelloWorld/HelloWorld.csproj.\r\n  HelloWorld -> /home/osboxes/Documents/HelloWorld/bin/release/netcoreapp2.2/linux-x64/HelloWorld.dll\r\n  /usr/bin/clang-6.0\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Unable to load shared library 'objwriter' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libobjwriter: cannot open shared object file: No such file or directory [/home/osboxes/Documents/HelloWorld/HelloWorld.csproj]\r\n  System.DllNotFoundException: Unable to load shared library 'objwriter' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libobjwriter: cannot open shared object file: No such file or directory\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.InitObjWriter(String objectFilePath, String triple)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter..ctor(String objectFilePath, NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, IObjectDumper dumper)\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n/home/osboxes/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27817-01/build/Microsoft.NETCore.Native.targets(248,5): error MSB3073: The command \"\"/home/osboxes/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27817-01/tools/ilc\" @\"obj/release/netcoreapp2.2/linux-x64/native/HelloWorld.ilc.rsp\"\" exited with code 1. [/home/osboxes/Documents/HelloWorld/HelloWorld.csproj]\r\n\r\nosboxes@osboxes:~/Documents/HelloWorld$ uname -a\r\nLinux osboxes 5.0.0-13-generic #14-Ubuntu SMP Mon Apr 15 14:59:14 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\nldd /home/osboxes/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27817-01/tools/objwriter.so\r\nldd: /home/osboxes/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27817-01/tools/objwriter.so: No such file or directory\r\n\r\nosboxes@osboxes:~/Documents/HelloWorld$ ls /home/osboxes/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27817-01/tools\r\ncreatedump\r\nilc\r\nilc.deps.json\r\nilc.dll\r\nILCompiler.Compiler.dll\r\nILCompiler.CppCodeGen.dll\r\nILCompiler.DependencyAnalysisFramework.dll\r\nILCompiler.MetadataTransform.dll\r\nILCompiler.MetadataWriter.dll\r\nILCompiler.ReadyToRun.dll\r\nILCompiler.RyuJit.dll\r\nILCompiler.TypeSystem.dll\r\nILCompiler.WebAssembly.dll\r\nilc.runtimeconfig.json\r\njitinterface.so\r\nlibclrjitilc.so\r\nlibclrjit.so\r\nlibcoreclr.so\r\nlibcoreclrtraceptprovider.so\r\nlibdbgshim.so\r\nlibhostfxr.so\r\nlibhostpolicy.so\r\nlibLLVM.so\r\nlibmscordaccore.so\r\nlibmscordbi.so\r\nlibobjwriter.so\r\nlibsosplugin.so\r\nlibsos.so\r\nLLVMSharp.dll\r\nMicrosoft.CSharp.dll\r\nMicrosoft.DiaSymReader.dll\r\nMicrosoft.VisualBasic.dll\r\nMicrosoft.Win32.Primitives.dll\r\nMicrosoft.Win32.Registry.dll\r\nmscorlib.dll\r\nnetstandard.dll\r\nsosdocsunix.txt\r\nSOS.NETCore.dll\r\nSystem.AppContext.dll\r\nSystem.Buffers.dll\r\nSystem.Collections.Concurrent.dll\r\nSystem.Collections.dll\r\nSystem.Collections.Immutable.dll\r\nSystem.Collections.NonGeneric.dll\r\nSystem.Collections.Specialized.dll\r\nSystem.CommandLine.dll\r\nSystem.ComponentModel.Annotations.dll\r\nSystem.ComponentModel.DataAnnotations.dll\r\nSystem.ComponentModel.dll\r\nSystem.ComponentModel.EventBasedAsync.dll\r\nSystem.ComponentModel.Primitives.dll\r\nSystem.ComponentModel.TypeConverter.dll\r\nSystem.Configuration.dll\r\nSystem.Console.dll\r\nSystem.Core.dll\r\nSystem.Data.Common.dll\r\nSystem.Data.dll\r\nSystem.Diagnostics.Contracts.dll\r\nSystem.Diagnostics.Debug.dll\r\nSystem.Diagnostics.DiagnosticSource.dll\r\nSystem.Diagnostics.FileVersionInfo.dll\r\nSystem.Diagnostics.Process.dll\r\nSystem.Diagnostics.StackTrace.dll\r\nSystem.Diagnostics.TextWriterTraceListener.dll\r\nSystem.Diagnostics.Tools.dll\r\nSystem.Diagnostics.TraceSource.dll\r\nSystem.Diagnostics.Tracing.dll\r\nSystem.dll\r\nSystem.Drawing.dll\r\nSystem.Drawing.Primitives.dll\r\nSystem.Dynamic.Runtime.dll\r\nSystem.Globalization.Calendars.dll\r\nSystem.Globalization.dll\r\nSystem.Globalization.Extensions.dll\r\nSystem.Globalization.Native.so\r\nSystem.IO.Compression.Brotli.dll\r\nSystem.IO.Compression.dll\r\nSystem.IO.Compression.FileSystem.dll\r\nSystem.IO.Compression.Native.a\r\nSystem.IO.Compression.Native.so\r\nSystem.IO.Compression.ZipFile.dll\r\nSystem.IO.dll\r\nSystem.IO.FileSystem.AccessControl.dll\r\nSystem.IO.FileSystem.dll\r\nSystem.IO.FileSystem.DriveInfo.dll\r\nSystem.IO.FileSystem.Primitives.dll\r\nSystem.IO.FileSystem.Watcher.dll\r\nSystem.IO.IsolatedStorage.dll\r\nSystem.IO.MemoryMappedFiles.dll\r\nSystem.IO.Pipes.AccessControl.dll\r\nSystem.IO.Pipes.dll\r\nSystem.IO.UnmanagedMemoryStream.dll\r\nSystem.Linq.dll\r\nSystem.Linq.Expressions.dll\r\nSystem.Linq.Parallel.dll\r\nSystem.Linq.Queryable.dll\r\nSystem.Memory.dll\r\nSystem.Native.a\r\nSystem.Native.so\r\nSystem.Net.dll\r\nSystem.Net.Http.dll\r\nSystem.Net.HttpListener.dll\r\nSystem.Net.Http.Native.a\r\nSystem.Net.Http.Native.so\r\nSystem.Net.Mail.dll\r\nSystem.Net.NameResolution.dll\r\nSystem.Net.NetworkInformation.dll\r\nSystem.Net.Ping.dll\r\nSystem.Net.Primitives.dll\r\nSystem.Net.Requests.dll\r\nSystem.Net.Security.dll\r\nSystem.Net.Security.Native.a\r\nSystem.Net.Security.Native.so\r\nSystem.Net.ServicePoint.dll\r\nSystem.Net.Sockets.dll\r\nSystem.Net.WebClient.dll\r\nSystem.Net.WebHeaderCollection.dll\r\nSystem.Net.WebProxy.dll\r\nSystem.Net.WebSockets.Client.dll\r\nSystem.Net.WebSockets.dll\r\nSystem.Numerics.dll\r\nSystem.Numerics.Vectors.dll\r\nSystem.ObjectModel.dll\r\nSystem.Private.CoreLib.dll\r\nSystem.Private.DataContractSerialization.dll\r\nSystem.Private.Uri.dll\r\nSystem.Private.Xml.dll\r\nSystem.Private.Xml.Linq.dll\r\nSystem.Reflection.DispatchProxy.dll\r\nSystem.Reflection.dll\r\nSystem.Reflection.Emit.dll\r\nSystem.Reflection.Emit.ILGeneration.dll\r\nSystem.Reflection.Emit.Lightweight.dll\r\nSystem.Reflection.Extensions.dll\r\nSystem.Reflection.Metadata.dll\r\nSystem.Reflection.Primitives.dll\r\nSystem.Reflection.TypeExtensions.dll\r\nSystem.Resources.Reader.dll\r\nSystem.Resources.ResourceManager.dll\r\nSystem.Resources.Writer.dll\r\nSystem.Runtime.CompilerServices.Unsafe.dll\r\nSystem.Runtime.CompilerServices.VisualC.dll\r\nSystem.Runtime.dll\r\nSystem.Runtime.Extensions.dll\r\nSystem.Runtime.Handles.dll\r\nSystem.Runtime.InteropServices.dll\r\nSystem.Runtime.InteropServices.RuntimeInformation.dll\r\nSystem.Runtime.InteropServices.WindowsRuntime.dll\r\nSystem.Runtime.Loader.dll\r\nSystem.Runtime.Numerics.dll\r\nSystem.Runtime.Serialization.dll\r\nSystem.Runtime.Serialization.Formatters.dll\r\nSystem.Runtime.Serialization.Json.dll\r\nSystem.Runtime.Serialization.Primitives.dll\r\nSystem.Runtime.Serialization.Xml.dll\r\nSystem.Security.AccessControl.dll\r\nSystem.Security.Claims.dll\r\nSystem.Security.Cryptography.Algorithms.dll\r\nSystem.Security.Cryptography.Cng.dll\r\nSystem.Security.Cryptography.Csp.dll\r\nSystem.Security.Cryptography.Encoding.dll\r\nSystem.Security.Cryptography.Native.OpenSsl.a\r\nSystem.Security.Cryptography.Native.OpenSsl.so\r\nSystem.Security.Cryptography.OpenSsl.dll\r\nSystem.Security.Cryptography.Primitives.dll\r\nSystem.Security.Cryptography.X509Certificates.dll\r\nSystem.Security.dll\r\nSystem.Security.Principal.dll\r\nSystem.Security.Principal.Windows.dll\r\nSystem.Security.SecureString.dll\r\nSystem.ServiceModel.Web.dll\r\nSystem.ServiceProcess.dll\r\nSystem.Text.Encoding.dll\r\nSystem.Text.Encoding.Extensions.dll\r\nSystem.Text.RegularExpressions.dll\r\nSystem.Threading.dll\r\nSystem.Threading.Overlapped.dll\r\nSystem.Threading.Tasks.Dataflow.dll\r\nSystem.Threading.Tasks.dll\r\nSystem.Threading.Tasks.Extensions.dll\r\nSystem.Threading.Tasks.Parallel.dll\r\nSystem.Threading.Thread.dll\r\nSystem.Threading.ThreadPool.dll\r\nSystem.Threading.Timer.dll\r\nSystem.Transactions.dll\r\nSystem.Transactions.Local.dll\r\nSystem.ValueTuple.dll\r\nSystem.Web.dll\r\nSystem.Web.HttpUtility.dll\r\nSystem.Windows.dll\r\nSystem.Xml.dll\r\nSystem.Xml.Linq.dll\r\nSystem.Xml.ReaderWriter.dll\r\nSystem.Xml.Serialization.dll\r\nSystem.Xml.XDocument.dll\r\nSystem.Xml.XmlDocument.dll\r\nSystem.Xml.XmlSerializer.dll\r\nSystem.Xml.XPath.dll\r\nSystem.Xml.XPath.XDocument.dll\r\nWindowsBase.dll\r\n\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7537","RelatedDescription":"Open issue \"\"Hello World\" compilation fails: Ubuntu 19.04 Clang-6.0 .NetCore 2.2.204\" (#7537)"},{"Id":"456464202","IsPullRequest":true,"CreatedAt":"2019-06-18T00:18:12","Actor":"jkotas","Number":"7525","RawContent":null,"Title":"Update libunwind to latest","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7525","RelatedDescription":"Closed or merged PR \"Update libunwind to latest\" (#7525)"},{"Id":"457178956","IsPullRequest":true,"CreatedAt":"2019-06-18T00:18:01","Actor":"Dotnet-GitSync-Bot","Number":"7535","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @jkotas @tarekgh @sywhang @marek-safar @adamsitnik @benaadams @ViktorHofer","Url":"https://github.com/dotnet/corert/pull/7535","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7535)"},{"Id":"456690465","IsPullRequest":true,"CreatedAt":"2019-06-17T22:24:37","Actor":"trylek","Number":"7533","RawContent":null,"Title":"More precise handling of instantiating stubs according to CoreCLR","State":"closed","Body":"I have found a few places in ceeInfoGetCallInfo where I originally\r\ndidn't fully understand the intent of the CoreCLR code so\r\nI converted it imprecisely. This change fixes two such imprecisions\r\nregarding instantiating stubs and, in doing so, fixes about\r\n300 more CoreCLR classloader Pri#1 tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7533","RelatedDescription":"Closed or merged PR \"More precise handling of instantiating stubs according to CoreCLR\" (#7533)"},{"Id":"456800818","IsPullRequest":true,"CreatedAt":"2019-06-17T13:32:28","Actor":"MichalStrehovsky","Number":"7534","RawContent":null,"Title":"Port GC changes from coreclr","State":"closed","Body":"Porting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.","Url":"https://github.com/dotnet/corert/pull/7534","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr\" (#7534)"},{"Id":"456684435","IsPullRequest":true,"CreatedAt":"2019-06-17T01:40:50","Actor":"MichalStrehovsky","Number":"7532","RawContent":null,"Title":"Do not generate object array thunk for byref-returning delegates","State":"closed","Body":"Object array thunks are the weird thunks we make for delegates for the LINQ expression interpreter that dispatch to a method that takes an object array and returns object. There's no way to turn object returned from that method into a byref so we shouldn't try to make the thunks.\r\n\r\nAlso hit an assert in dynamic invoke method thunk, so fixed that too.\r\n\r\nFixes #7526.","Url":"https://github.com/dotnet/corert/pull/7532","RelatedDescription":"Closed or merged PR \"Do not generate object array thunk for byref-returning delegates\" (#7532)"},{"Id":"456480061","IsPullRequest":false,"CreatedAt":"2019-06-17T01:40:50","Actor":"kvittokonito","Number":"7526","RawContent":null,"Title":"Compilation error when using \"ref\" returns ","State":"closed","Body":"I am getting the following error:\r\n```csharp\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [Path/To/Project/With/Confidential/Class.csproj]\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: SomeConfidentialClass ByRef, ? [Path/To/Project/With/Confidential/Class.csproj]\r\n  Internal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: SomeConfidentialClass ByRef, ?\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.InstantiateDependencies(NodeFactory factory, Instantiation typeInstantiation, Instantiation methodInstantiation)\r\n     at ILCompiler.DependencyAnalysis.ShadowConcreteMethodNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\n\r\nWhen using \"ref\" returns like this:\r\n```csharp\r\nprivate ITransform _transform;\r\npublic ref ITransform TransformByRef => ref _transform;\r\n```\r\n\r\nIs this feature not supported in CoreRT?","Url":"https://github.com/dotnet/corert/issues/7526","RelatedDescription":"Closed issue \"Compilation error when using \"ref\" returns \" (#7526)"},{"Id":"456575788","IsPullRequest":true,"CreatedAt":"2019-06-16T15:45:55","Actor":"MichalStrehovsky","Number":"7530","RawContent":null,"Title":"Implement obsolete Marshal.Read APIs","State":"closed","Body":"If there's a bad obsolete API we added to .NET Core, chances are WinForms uses it.","Url":"https://github.com/dotnet/corert/pull/7530","RelatedDescription":"Closed or merged PR \"Implement obsolete Marshal.Read APIs\" (#7530)"},{"Id":"456568649","IsPullRequest":true,"CreatedAt":"2019-06-16T15:43:39","Actor":"MichalStrehovsky","Number":"7527","RawContent":null,"Title":"Fix CharSet on GetProcAddress","State":"closed","Body":"This flavor is used in NativeLibrary.GetSymbol so we didn't hit this before.","Url":"https://github.com/dotnet/corert/pull/7527","RelatedDescription":"Closed or merged PR \"Fix CharSet on GetProcAddress\" (#7527)"},{"Id":"456568694","IsPullRequest":true,"CreatedAt":"2019-06-16T05:16:48","Actor":"MichalStrehovsky","Number":"7529","RawContent":null,"Title":"Scan for `Marshal.SizeOf(Type)` usage","State":"closed","Body":"WinForms codebase is full of this pattern and there's no reason we couldn't misuse the reflection method body scanner to scan for this too.","Url":"https://github.com/dotnet/corert/pull/7529","RelatedDescription":"Closed or merged PR \"Scan for `Marshal.SizeOf(Type)` usage\" (#7529)"},{"Id":"456568676","IsPullRequest":true,"CreatedAt":"2019-06-16T04:27:48","Actor":"MichalStrehovsky","Number":"7528","RawContent":null,"Title":"Implement generation of function pointer metadata","State":"closed","Body":"Hit this while accidentally compiling WPF, but might as well just implement this.","Url":"https://github.com/dotnet/corert/pull/7528","RelatedDescription":"Closed or merged PR \"Implement generation of function pointer metadata\" (#7528)"},{"Id":"456580659","IsPullRequest":true,"CreatedAt":"2019-06-15T22:13:47","Actor":"trylek","Number":"7531","RawContent":null,"Title":"Initial support for R2RDump in SuperIlc","State":"open","Body":"I have added initial minimalistic support for R2RDump to SuperIlc.\r\nUsing the new switch -r2r <path> we can specify the path to the\r\nR2RDump tool and SuperIlc will use it to disassemble each\r\nsuccessfully compiled assembly in the \"naked\" and \"raw\" mode\r\n(from a completely selfish point of view these are the modes I'm\r\nusing most of the time). These dumps make it much easier to compare\r\nCPAOT and Crossgen output when analyzing the remaining failing\r\ntests.\r\n\r\nAs a caveat this cannot be yet added to automated testing because\r\nof the known backlog item \"R2RDump build doesn't publish\r\nCoreDisTools.dll it requires\" (even though the library is available\r\nin the build outputs and just copying it next to R2RDump fixes the\r\nproblem - that's what I've been doing since the very beginning).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7531","RelatedDescription":"Open PR \"Initial support for R2RDump in SuperIlc\" (#7531)"},{"Id":"456373747","IsPullRequest":false,"CreatedAt":"2019-06-14T18:14:20","Actor":"christianscheuer","Number":"7524","RawContent":null,"Title":"Finalize Alpine Linux / linux-musl-x64 support","State":"open","Body":"Thanks to @janvorli's fix in #7522 we can now build the objwriter package on Alpine Linux (in the Docker image from https://github.com/dotnet/corert/issues/7510#issuecomment-501516667 - mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.6-WithNode-cfdd435-20190521001804), by invoking:\r\n\r\n```\r\n./build.sh objwriter Release\r\n```\r\n\r\nHowever, even while the ObjectWriter package itself builds, CoreRT does not pick it up. CoreRT expects to find a published ObjectWriter package, musl edition, in the nuget feed. The error message when invoking the above is therefore (after having successfully built the native components of CoreRT + objwriter):\r\n\r\n```\r\n Restoring packages for /corertalpine/src/ILCompiler/ObjectWriter/ObjectWriter.depproj...\r\n  Installing Microsoft.DotNet.ObjectWriter 1.0.0-alpha-27619-05.\r\n/corertalpine/src/ILCompiler/ObjectWriter/ObjectWriter.depproj : error NU1101: Unable to find package runtime.linux-musl-x64.Microsoft.DotNet.ObjectWriter. No packages exist with this id in source(s): dotnetfeed dotnet-core, dotnetfeed dotnet-coreclr, myget.org dotnet-buildtools, myget.org dotnet-core, myget.org dotnet-corefxlab, myget.org system-commandline, nuget.org\r\n  Generating MSBuild file /corertalpine/bin/obj/Linux.x64.Release/ObjectWriter/ObjectWriter.depproj.nuget.g.props.\r\n  Generating MSBuild file /corertalpine/bin/obj/Linux.x64.Release/ObjectWriter/ObjectWriter.depproj.nuget.g.targets.\r\n```\r\n\r\n### Proper fix: Publish linux-musl-x64 packages\r\nI suspect the best longtime fix would be for CoreRT to publish linux-musl-x64 packages by adding a linux-musl-x64 flavor to the `eng/platform-matrix.yml`, if I'm understanding the infrastructure correctly.\r\nIf this is the way going forward, would it then be as simple as just adding it there, or do things need to be changed in other places too?\r\nSince CoreCLR builds musl flavors and we can now build those manually for CoreRT with janvorli's fix, I suspect this should be a pretty simple change, right?\r\n\r\n### Workaround for now: Patch CoreRT to pick up the built objwriter package\r\nFor now I'm fine with having to build CoreRT myself on Alpine Linux, even if we need to do some manual patches to the tree to allow CoreRT to pick up the built objwriter package.\r\nBut, how should I patch it so that it does that? I'm assuming the ObjectWriter.depproj is part of the solution (or the problem).\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7524","RelatedDescription":"Open issue \"Finalize Alpine Linux / linux-musl-x64 support\" (#7524)"},{"Id":"455898750","IsPullRequest":true,"CreatedAt":"2019-06-13T23:26:35","Actor":"janvorli","Number":"7522","RawContent":null,"Title":"Fix build with clang on Alpine Linux","State":"closed","Body":"On Alpine Linux (and some other Linuxes as well), there versioned\r\nfile name for clang exists only for clang and not clang++. So\r\nthere is e.g. clang-5.0, clang and clang++. This makes build to\r\npick only the C compiler, but leaves the C++ unspecified, so\r\ncmake picks g++ and the build fails.\r\n\r\nThis change fixes it by ensuring that we pick both clang and clang++\r\neither unversioned or versioned.","Url":"https://github.com/dotnet/corert/pull/7522","RelatedDescription":"Closed or merged PR \"Fix build with clang on Alpine Linux\" (#7522)"},{"Id":"455960432","IsPullRequest":true,"CreatedAt":"2019-06-13T23:17:23","Actor":"Dotnet-GitSync-Bot","Number":"7523","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7523","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7523)"},{"Id":"454944688","IsPullRequest":true,"CreatedAt":"2019-06-13T18:54:32","Actor":"trylek","Number":"7516","RawContent":null,"Title":"Method call info cleanup pt. 1 - wrong method called","State":"closed","Body":"This change fixes about 280 Pri#1 Loader/classloader tests where\r\npreviously we were using slightly incorrect method info. This\r\ncorresponds to the biggest error bucket \"wrong method called\".\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7516","RelatedDescription":"Closed or merged PR \"Method call info cleanup pt. 1 - wrong method called\" (#7516)"},{"Id":"455716021","IsPullRequest":false,"CreatedAt":"2019-06-13T12:36:12","Actor":"BaCtr0x","Number":"7521","RawContent":null,"Title":"VS Code 2019 cannot open file 'kernel32.lib'","State":"open","Body":"I reinstallt everything and checked my SDK version.\r\nThe testprogram is a simple hello world program.\r\nThe error promt is:\r\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.21.27702.2 for x86\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\nhello.cpp\r\nMicrosoft (R) Incremental Linker Version 14.21.27702.2\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\n/out:hello.exe\r\nhello.obj\r\nLINK : fatal error LNK1104: cannot open file 'kernel32.lib'","Url":"https://github.com/dotnet/corert/issues/7521","RelatedDescription":"Open issue \"VS Code 2019 cannot open file 'kernel32.lib'\" (#7521)"},{"Id":"455490633","IsPullRequest":true,"CreatedAt":"2019-06-13T04:20:34","Actor":"jkotas","Number":"7519","RawContent":null,"Title":"Delete unnecessary code","State":"closed","Body":"Fixes some errors while building with clang5.0","Url":"https://github.com/dotnet/corert/pull/7519","RelatedDescription":"Closed or merged PR \"Delete unnecessary code\" (#7519)"},{"Id":"455496226","IsPullRequest":true,"CreatedAt":"2019-06-13T04:20:10","Actor":"Dotnet-GitSync-Bot","Number":"7520","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @stephentoub @dotnet-maestro[bot]","Url":"https://github.com/dotnet/corert/pull/7520","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7520)"},{"Id":"455223188","IsPullRequest":true,"CreatedAt":"2019-06-13T01:37:18","Actor":"Dotnet-GitSync-Bot","Number":"7518","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7518","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7518)"},{"Id":"454961949","IsPullRequest":true,"CreatedAt":"2019-06-12T02:02:06","Actor":"Suchiman","Number":"7517","RawContent":null,"Title":"Unify GC sources and implement GetGCMemoryInfo","State":"closed","Body":"The first commit copies everything from coreclr (mainly formatting differences).\r\n\r\nThe second commit implements `GC.GetGCMemoryInfo` for #5680.\r\nI don't know how to test it though, the simple tests in corert yield\r\n> 'GC' does not contain a definition for 'GetGCMemoryInfo'\r\n\r\nand the [instructions](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built) are failing for me because\r\n> error MSB4064: The \"DotNetAppHostExecutableName\" parameter is not supported by the \"ComputeManagedAssemblies\" task. Verify the parameter exists on the task, and it is a settable public instance property","Url":"https://github.com/dotnet/corert/pull/7517","RelatedDescription":"Closed or merged PR \"Unify GC sources and implement GetGCMemoryInfo\" (#7517)"},{"Id":"454902237","IsPullRequest":true,"CreatedAt":"2019-06-11T23:01:35","Actor":"Dotnet-GitSync-Bot","Number":"7515","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @kouvel","Url":"https://github.com/dotnet/corert/pull/7515","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7515)"},{"Id":"454726423","IsPullRequest":true,"CreatedAt":"2019-06-11T17:57:05","Actor":"Suchiman","Number":"7513","RawContent":null,"Title":"Port GC changes from coreclr - 17","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7512\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/141926d90c54bb358cfe8d9eb641c88e94639a8c):**\r\n- https://github.com/dotnet/coreclr/commit/2832f54a6602cd4c0dff4fa65163345ab3ad953c (already merged)\r\n- https://github.com/dotnet/coreclr/commit/5a34da317e3f8cef7895d6d4ad6ed75f3a79d38e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/f143d0e3e1aff6fc5c3470a3a6e2d0732c23b7ce (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/b271aff1fa54c1385143f3b45c1bf3af01c901cd (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/e985b20260631c98a09f08cb67e93d690a6ffd0b (not applicable)\r\n- https://github.com/dotnet/coreclr/commit/67c83438bad8cd8f0ba20b370e4cace746ef57d1 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/934d73fea95b4c479b67fee0ff53caea4a325ee5 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/718598334310f6ad331ba2893ee4557beffaa74c (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/bdb995987178231ba541f22143cb3cab56309daa (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/2a175563b5c1b04083da6841f84a991ac576446a (manual port)\r\n- https://github.com/dotnet/coreclr/commit/b676246c1dd880b7290a1313cdac309fe020aa6f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3489e56c875c6144c729b51063300c7d60b1ae31 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4ca032d49b0718eb40f2105f94db2b243cf94957 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/476dc1cb88a0dcedd891a0ef7a2e05d5c2f94f68 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4c82068adb046eee3573984392a0d1e774062ae0 (gc only port, omitted changes)","Url":"https://github.com/dotnet/corert/pull/7513","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 17\" (#7513)"},{"Id":"454781157","IsPullRequest":true,"CreatedAt":"2019-06-11T17:56:14","Actor":"Dotnet-GitSync-Bot","Number":"7514","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7514","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7514)"},{"Id":"454599070","IsPullRequest":true,"CreatedAt":"2019-06-11T14:07:29","Actor":"Suchiman","Number":"7512","RawContent":null,"Title":"Port GC changes from coreclr - 16","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7511\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/060990945a0117cb824b9d1c1e6c3a336533a3ee):**\r\n- https://github.com/dotnet/coreclr/commit/cee1a8c9d9c6669318d1567c85457fbcd642587d (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3c07febf02b67c4c5f8eef846d5aa581372e454e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/fe355a617ff5e56c8607c2b12c650c3b95c5cfbd (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77bd2c4aab50f84d2a0a94275072ee52f295757c (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/b56d39c5812db4780c818140083cf753aca8ca5a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/473993d3b9b1a50931392c7689872d4f16f140f7 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/577f8b84113fdf5ff001732b93da6733842123ec (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bef5dd6507f2e8ac163941646ef9936d6ced3715 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0d9114b1f5d0b125f04f1ec17064a761fb26ba66 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4029007b7edd290c236901a246ef48ac3e9de4b6 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3f21a0f6cc8e0036ad536c791d7877a35d22cd01 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/c2dacd2025145c586a5569408c1427899a3767cc (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a9b6851ad1a9551f3f654b654b094147b50e5999 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/8d93bd9080f47efd87dc5420a6e600f8dc432659 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/9733c30b27ca90d3eeb07928df6e6e5861c203bb (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/141926d90c54bb358cfe8d9eb641c88e94639a8c (gc only port)","Url":"https://github.com/dotnet/corert/pull/7512","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 16\" (#7512)"},{"Id":"454427739","IsPullRequest":true,"CreatedAt":"2019-06-11T08:59:13","Actor":"Suchiman","Number":"7511","RawContent":null,"Title":"Port GC changes from coreclr - 15","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7508\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/4932d0f6fa87b9a6e3293aacd35cecedde44d87a):**\r\n- https://github.com/dotnet/coreclr/commit/dacab04a17e0cd4ed2b321be936f233cf75bb7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/c1801e85024add717f518feb6a9caed60d54500f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5a97d8e9f14763a4ff90d14d045f0173e8d4b944 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4685a1e008ad7cf4118e8778d89e63d87ca5b7b6 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/23fbf7e7ab231876b9d54b52bac044cdde159118 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/66009329a187634dc432854cdd7c893d972156eb (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/07f9f2f101754c38570ed75ce9a7083090769a0f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/6100a9faf1c29b06aed3ad5bef00ce905880309d (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/cf887c943bf1dee978bc863b7481686ecee8ad83 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/cc14e6cecf6984c991fe906c9fe4b327b4f93f96 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/67f1116cea421ebbe516fafc963e213cc6f0e117 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/94359a5208206be08ff44a1fc14e0334e2af2071 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/cb8b829fd3717acc2688025341f822e4097cf5c5 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/dd80afe98f969e3a309917643c0e45e83aaa37bf (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/6e629e9ccd58be36fcc858d357cdf0811bdcb380 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/aea3b1a80d6c114e3e67bc9521bf39a8a17371d1 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/98d2b480ff9fc207f568ed2ac8dcbcb7c9d6a719 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/2c6c6c9ffe6ef40320dfce3c6e53e953485f21a6 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/d33f73f69051d2861454081bb3211615413d8ed0 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/060990945a0117cb824b9d1c1e6c3a336533a3ee (manual port)","Url":"https://github.com/dotnet/corert/pull/7511","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 15\" (#7511)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"457688407","IsPullRequest":true,"CreatedAt":"2019-06-19T04:40:21","Actor":"nguerrera","Number":"3340","RawContent":null,"Title":"Fix small build issues","State":"closed","Body":"Three separate small issues in three commits:\r\n\r\n\r\n1. Fix incremental build in VS when only target files change. This had been driving me crazy causing tests to run without my targets changes. Fixed the other two while I was playing around nearby.\r\n\r\n2. Remove outdated workaround\r\n\r\n3. Auto-bump version of task assemblies. Fix #2953. Follows [Arcade recommendation](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md#recommanded-settings). ","Url":"https://github.com/dotnet/sdk/pull/3340","RelatedDescription":"Closed or merged PR \"Fix small build issues\" (#3340)"},{"Id":"456008150","IsPullRequest":true,"CreatedAt":"2019-06-19T00:11:56","Actor":"dsplaisted","Number":"3331","RawContent":null,"Title":"Preserve metadata from Reference items","State":"closed","Body":"Fix #2254 ","Url":"https://github.com/dotnet/sdk/pull/3331","RelatedDescription":"Closed or merged PR \"Preserve metadata from Reference items\" (#3331)"},{"Id":"455368499","IsPullRequest":true,"CreatedAt":"2019-06-18T22:48:11","Actor":"nguerrera","Number":"3326","RawContent":null,"Title":"Support PublishReadyToRun for framework-dependent deployment","State":"closed","Body":"Fix #3110 ","Url":"https://github.com/dotnet/sdk/pull/3326","RelatedDescription":"Closed or merged PR \"Support PublishReadyToRun for framework-dependent deployment\" (#3326)"},{"Id":"455469527","IsPullRequest":true,"CreatedAt":"2019-06-18T18:02:52","Actor":"nguerrera","Number":"3327","RawContent":null,"Title":"Reduce verbosity of conflict resolution","State":"closed","Body":"Also:\r\n* Reduce line noise in preview message\r\n* Log info about arbitrary copy-local choice in conflict resolution\r\n\r\nFix #2468 \r\nFix #3319 ","Url":"https://github.com/dotnet/sdk/pull/3327","RelatedDescription":"Closed or merged PR \"Reduce verbosity of conflict resolution\" (#3327)"},{"Id":"454842931","IsPullRequest":false,"CreatedAt":"2019-06-18T18:02:52","Actor":"nguerrera","Number":"3319","RawContent":null,"Title":"Issues with conflict resolution logging","State":"closed","Body":"1. At normal verbosity, there are unactionable messages about things that happen in very common cases. For example, every core WPF project has a conflict between WindowsBase in netcore app. Importance should be lowered so that you can still see in binlog/diag, but not otherwise. We regularly get questions about what to do about a conflict, when there is nothing to do.\r\n\r\n2. It is quite noisy to have codes associated with non-error, non-warnings. We should refactor to not bother having codes for messages. Related: https://github.com/dotnet/sdk/issues/2468\r\n\r\n3. We are concatenating strings, so we end up with a code inside a code. NETSDKXXXX: Encountered conflict yada, yada.  NETSDKYYYY. Choosing Foo.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3319","RelatedDescription":"Closed issue \"Issues with conflict resolution logging\" (#3319)"},{"Id":"457564494","IsPullRequest":false,"CreatedAt":"2019-06-18T17:34:22","Actor":"lzganec","Number":"3338","RawContent":null,"Title":"SatelliteResourceLanguages property doesn't filter all resources when publishing test projects","State":"closed","Body":"Having a dependency to Microsoft.CodeCoverage (which comes from Microsoft.NET.Test.Sdk) leaves Microsoft.VisualStudio.TraceDataCollector.resources.dll localized resource satellite assembly in the publish output using .NET Core version 2.2.","Url":"https://github.com/dotnet/sdk/issues/3338","RelatedDescription":"Closed issue \"SatelliteResourceLanguages property doesn't filter all resources when publishing test projects\" (#3338)"},{"Id":"457573123","IsPullRequest":false,"CreatedAt":"2019-06-18T16:12:55","Actor":"vitek-karas","Number":"3339","RawContent":null,"Title":"Add ability to differentiate framework assemblies in self-contained apps","State":"open","Body":"In .NET Core 3.0 we're introducing `AssemblyDependencyResolver` which is a managed API to basically parse and process a `.deps.json` for a component (think plugin). The API uses existing algorithms in `hostpolicy` which are executed during application startup to process the `.deps.json` for the app.\r\n\r\nApps are allowed to contain assemblies which are also part of a framework which the app relies on. As an example app which relies on ASP.NET framework can also have a package reference for `System.Threading.Channels` (assembly which is part of the ASP.NET framework). The current behavior is:\r\n* For self-contained apps, the SDK will pick the higher version of the two and copy it into the app (so if the package reference is higher it overwrites the one in the framework, otherwise the one from framework wins).\r\n* For framework-dependent apps, the SDK will make the package assembly part of the app and it will write the assembly and file versions into the `.deps.json`. At runtime `hostpolicy` uses the version information to compare the assembly from the app against the one in the framework and it picks the one with the higher version.\r\n\r\nApplying this logic to dynamically loaded components means that we would want the \"framework dependent\" behavior for components as well (we don't support self-contained components - that sort of doesn't make sense). Note that during component dependency resolution we intentionally ignore the assemblies from the app itself (this is to enable component isolation), but we do want to consider the frameworks (as frameworks are assumed to always be shared between the app and the components).\r\n\r\nIf the component is loaded into a framework dependent app, this is easy to solve as `hostpolicy` will apply the exact same logic and compare assembly and file versions for framework assemblies.\r\n\r\nThe problem is if the component is loaded into a self-contained app, there's no way to tell which assemblies are from a framework and which belong to the app itself. As noted above we want to consider the framework assemblies, but ignore the app assemblies.\r\n\r\nThe ask here is to add some information somewhere such that the dependency resolution could always tell which assemblies are framework assemblies, even in self-contained apps. For the hosting layer, putting this information into `.deps.json` would make a lot of sense, but if it makes sense to put it elsewhere, it might work as well.\r\n\r\nThe problem is also discussed here: https://github.com/dotnet/core-setup/issues/6826\r\n\r\nWe would be OK for this to not be solved in 3.0 as we probably don't have enough time to make the necessary hosting changes to support the new information coming from the SDK.","Url":"https://github.com/dotnet/sdk/issues/3339","RelatedDescription":"Open issue \"Add ability to differentiate framework assemblies in self-contained apps\" (#3339)"},{"Id":"457161990","IsPullRequest":false,"CreatedAt":"2019-06-17T21:42:34","Actor":"fadimounir","Number":"3337","RawContent":null,"Title":"App host not published correctly after a previous PublishSingleFile","State":"open","Body":"To repro:\r\n1) dotnet new console\r\n2) dotnet publish -r win-x64 /p:PublishSingleFile\r\n3) dotnet publish -r win-x64\r\n\r\nAfter step 2, there will be a single app.exe (+pdb) file in the publish folder. Approx size is ~70 MB.\r\nStep 3 correctly copies all dlls and other files to the publish folder, but fails to overwrite app.exe with the non-bundled version of the file (should be around ~150 KB). The large single-file bundle is still there in the publish folder.\r\n\r\nNot sure if we can do something about it. This falls in the \"clean publish\" category of bugs, but I thing at least we should overwrite the app.exe in the publish folder with the correct one.","Url":"https://github.com/dotnet/sdk/issues/3337","RelatedDescription":"Open issue \"App host not published correctly after a previous PublishSingleFile\" (#3337)"},{"Id":"457128227","IsPullRequest":false,"CreatedAt":"2019-06-17T20:15:30","Actor":"fadimounir","Number":"3336","RawContent":null,"Title":"Unable to use ReadyToRun on Debian 8 due to incorrect runtime bits resolution by SDK","State":"open","Body":"Original bug: https://github.com/dotnet/coreclr/issues/24565\r\n\r\nRepro app is here: https://github.com/wieslawsoltes/Draw2D. To repro, clone and run this command:\r\n``` console\r\ndotnet publish ./src/Draw2D/Draw2D.csproj -f netcoreapp3.0 -c Release -r debian.8-x64 -o Draw2D_netcoreapp3.0_debian.8-x64\r\n```\r\n\r\nRunning the application throws a `Failed to initialize CoreCLR,, HRESULT: 0x80131500` error.\r\n\r\nLooking at the msbuild verbose logs, you can see that the SDK is copying the runtime bits from the runtime.debian.8-x64.microsoft.netcore.runtime.coreclr/1.0.7/runtimes/debian.8-x64 package, which is incorrect.\r\n\r\nOn Debian9 targets, the runtime bits are copied correctly (version 3). On Debian8, the SDK doesn't resolve correctly. Here's an example error I got: \r\n\r\n``` console\r\n/home/fadi/dotnet_preview5/sdk/3.0.100-preview5-011569/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.ConflictResolution.targets(39,5): message NETSDK1041: Encountered conflict between 'CopyLocal:/home/fadi/.nuget/packages/runtime.debian.8-x64.microsoft.netcore.runtime.coreclr/1.0.7/runtimes/debian.8-x64/native/libcoreclr.so' and 'CopyLocal:/home/fadi/.nuget/packages/runtime.linux-x64.microsoft.netcore.app/3.0.0-preview5-27709-08/runtimes/linux-x64/native/libcoreclr.so'.  NETSDK1037: Could not determine winner due to equal file and assembly versions. [/home/fadi/git/Draw2D/src/Draw2D/Draw2D.csproj]\r\n```\r\n\r\nAlso, it ends up copying the runtime bits from the 1.0.7 runtime package. Example:\r\n\r\n``` console\r\nCopying file from \"/home/fadi/.nuget/packages/runtime.debian.8-x64.microsoft.netcore.runtime.coreclr/1.0.7/runtimes/debian.8-x64/native/libcoreclr.so\" to \"/home/fadi/git/Draw2D/src/Draw2D/bin/Release/netcoreapp3.0/debian.8-x64/libcoreclr.so\".\r\n```","Url":"https://github.com/dotnet/sdk/issues/3336","RelatedDescription":"Open issue \"Unable to use ReadyToRun on Debian 8 due to incorrect runtime bits resolution by SDK\" (#3336)"},{"Id":"454964340","IsPullRequest":true,"CreatedAt":"2019-06-17T18:56:57","Actor":"dsplaisted","Number":"3324","RawContent":null,"Title":"Use runtime pack manifest","State":"closed","Body":"Use runtime pack manifest instead of using conventions and scanning folders.\r\n\r\nResources are still handled using conventions, we need updates to the runtime pack manifest in order to be able to consume them from it: https://github.com/dotnet/core-setup/issues/6768","Url":"https://github.com/dotnet/sdk/pull/3324","RelatedDescription":"Closed or merged PR \"Use runtime pack manifest\" (#3324)"},{"Id":"456910488","IsPullRequest":false,"CreatedAt":"2019-06-17T12:35:44","Actor":"ViktorHofer","Number":"3335","RawContent":null,"Title":"What is the expected path for ResolvePackageFileConflicts to work with repositories that build their own platforms","State":"open","Body":"CoreFx doesn't use the Microsoft.NETCore.App.Ref targeting pack as we build the refs ourselves. Without that targeting pack the `ResolvePackageFileConflicts` task seems to not be able to handle conflicts between package runtime assemblies and the live built ones.\r\n\r\nComparing an example project with a test project in CoreFx I can see the following differences:\r\n- PlatformManifests: not set, points to a manifest file on disk which contains all the platform assemblies\r\n- PreferredPackages: not set, a list of packages that are preferred?\r\n\r\nConflicts as such are therefore missing in CoreFx:\r\n\r\n`Encountered conflict between 'Platform:System.Xml.XDocument.dll' and 'CopyLocal:C:\\Users\\vihofer\\.nuget\\packages\\system.xml.xdocument\\4.0.11\\lib\\netstandard1.3\\System.Xml.XDocument.dll'.  NETSDK1033: Choosing 'Platform:System.Xml.XDocument.dll' because AssemblyVersion '4.1.1.0' is greater than '4.0.11.0'.`\r\n\r\nThe impact of this is that dependencies that come via packages are copied to the output directory and are preferred over the live built ones.\r\n\r\nWhat is the expected path for repositories that live build platforms?\r\n\r\nEDIT: Attaching the binlog of the corefx test project: [msbuild.zip](https://github.com/dotnet/sdk/files/3297026/msbuild.zip)\r\n\r\ncc @ericstj @dsplaisted @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3335","RelatedDescription":"Open issue \"What is the expected path for ResolvePackageFileConflicts to work with repositories that build their own platforms\" (#3335)"},{"Id":"454300900","IsPullRequest":true,"CreatedAt":"2019-06-16T18:04:30","Actor":"vatsan-madhavan","Number":"3315","RawContent":null,"Title":"Add warnings related to Microsoft.NET.Sdk.WindowsDesktop","State":"closed","Body":"Related: #3126 \r\nThis is also needed to completely fix https://github.com/dotnet/wpf/issues/866 - we still can't support support multitargeting `netcoreapp2.2`, and also to fix https://github.com/dotnet/wpf/issues/867\r\n\r\n- Adds warning strings related to `Microsoft.NET.Sdk.WindowsDesktop`\r\n- Adds a check to warn when `UseWpf` or `UseWindowsForms` is set without including `Microsoft.NET.Sdk.WindowsDesktop`","Url":"https://github.com/dotnet/sdk/pull/3315","RelatedDescription":"Closed or merged PR \"Add warnings related to Microsoft.NET.Sdk.WindowsDesktop\" (#3315)"},{"Id":"456547388","IsPullRequest":false,"CreatedAt":"2019-06-15T15:19:55","Actor":"MeikTranel","Number":"3334","RawContent":null,"Title":"Hide or Move generated *.designer.cs to obj directory","State":"open","Body":"When using .RESX files for localization the sdk currently compiles this file at design time / build time to be able to reference it as static properties from any csharp code (or xaml for that matter).\r\n\r\nThe generated file probably should not be put under version control, so my preferred way would be moving the output file of the generator into the obj directory, where it would fall under common gitignore rules.\r\n","Url":"https://github.com/dotnet/sdk/issues/3334","RelatedDescription":"Open issue \"Hide or Move generated *.designer.cs to obj directory\" (#3334)"},{"Id":"455826747","IsPullRequest":false,"CreatedAt":"2019-06-15T03:39:50","Actor":"amh1979","Number":"3329","RawContent":null,"Title":"NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized","State":"closed","Body":"SDK: 3.0.0-preview6-27804-01\r\nMicrosoft.NET.Sdk.TargetingPackResolution.targets(185,5): error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized","Url":"https://github.com/dotnet/sdk/issues/3329","RelatedDescription":"Closed issue \"NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\" (#3329)"},{"Id":"456439257","IsPullRequest":true,"CreatedAt":"2019-06-14T23:25:37","Actor":"dsplaisted","Number":"3333","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Replaces #3332, hopefully fixing test failures","Url":"https://github.com/dotnet/sdk/pull/3333","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3333)"},{"Id":"456342176","IsPullRequest":true,"CreatedAt":"2019-06-14T21:04:49","Actor":"wli3","Number":"3332","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3332","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3332)"},{"Id":"455914987","IsPullRequest":true,"CreatedAt":"2019-06-14T00:19:59","Actor":"dsplaisted","Number":"3330","RawContent":null,"Title":"Don't hash DesignTimeBould for ResolvePackageAssets","State":"closed","Body":"Fixes #3313 ","Url":"https://github.com/dotnet/sdk/pull/3330","RelatedDescription":"Closed or merged PR \"Don't hash DesignTimeBould for ResolvePackageAssets\" (#3330)"},{"Id":"453733086","IsPullRequest":false,"CreatedAt":"2019-06-14T00:19:59","Actor":"nguerrera","Number":"3313","RawContent":null,"Title":"DesignTimeBuild is included in ResolvePackageAssets HashSettings","State":"closed","Body":"This will cause the cache to be rebuilt always when building after a design time build, or design time building after a build.\r\n\r\nThe test was updated to allow DesignTimeBuild to not be in the cache:\r\n\r\nhttps://github.com/dotnet/sdk/blob/de72490d26acee011e22f40113209323976980e0/src/Tasks/Microsoft.NET.Build.Tasks.UnitTests/GivenAResolvePackageAssetsTask.cs#L21\r\n\r\nBut it is actually written:\r\n\r\nhttps://github.com/dotnet/sdk/blob/de72490d26acee011e22f40113209323976980e0/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L376\r\n\r\nProbably need a test that checks the opposite of the settings hash test for DesignTimeBuild: that you can change it without influencing the hash.","Url":"https://github.com/dotnet/sdk/issues/3313","RelatedDescription":"Closed issue \"DesignTimeBuild is included in ResolvePackageAssets HashSettings\" (#3313)"},{"Id":"454941152","IsPullRequest":true,"CreatedAt":"2019-06-13T19:44:06","Actor":"nugetlurker","Number":"3321","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6045 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-preview2.6045 into sdk release/2.2.4xx branch","Url":"https://github.com/dotnet/sdk/pull/3321","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-preview2.6045 into sdk\" (#3321)"},{"Id":"454941165","IsPullRequest":true,"CreatedAt":"2019-06-13T18:55:43","Actor":"nugetlurker","Number":"3322","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6045 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-preview2.6045 into sdk release/2.1.8xx branch","Url":"https://github.com/dotnet/sdk/pull/3322","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-preview2.6045 into sdk\" (#3322)"},{"Id":"455480612","IsPullRequest":false,"CreatedAt":"2019-06-13T05:12:14","Actor":"heejaechang","Number":"3328","RawContent":null,"Title":"use different assembly version for different build task","State":"closed","Body":"a lot of times, I get something like this whenever I do branch switch and restore and open solution in VS\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/59394912-5d06fc00-8d36-11e9-81c1-d2f0ad724168.png)\r\n\r\nand I believe that is happening because different dll that has same assembly version is already loaded in the msbuild which got reused.\r\n\r\ncan we make different build task dll to use different assembly version so that we don't get into this problem?","Url":"https://github.com/dotnet/sdk/issues/3328","RelatedDescription":"Closed issue \"use different assembly version for different build task\" (#3328)"},{"Id":"454819855","IsPullRequest":true,"CreatedAt":"2019-06-12T19:59:06","Actor":"wli3","Number":"3318","RawContent":null,"Title":"Collect crash exception","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3318","RelatedDescription":"Closed or merged PR \"Collect crash exception\" (#3318)"},{"Id":"455273191","IsPullRequest":false,"CreatedAt":"2019-06-12T15:14:24","Actor":"dsplaisted","Number":"3325","RawContent":null,"Title":"Supply RuntimeIdentifier graph to NuGet","State":"open","Body":"Once this NuGet feature is implemented: https://github.com/NuGet/Client.Engineering/pull/96\r\n\r\nWe will need to set the appropriate property to supply the SDKs graph to NuGet, as well as remove the infrastructure that implicitly references Microsoft.NETCore.App.","Url":"https://github.com/dotnet/sdk/issues/3325","RelatedDescription":"Open issue \"Supply RuntimeIdentifier graph to NuGet\" (#3325)"},{"Id":"454848287","IsPullRequest":true,"CreatedAt":"2019-06-12T03:09:18","Actor":"nguerrera","Number":"3320","RawContent":null,"Title":"Fix duplicate resolved files to publish","State":"closed","Body":"Fix #3257 \r\n\r\nThere were two issues.\r\n\r\n1. A misunderstanding of msbuild batching rules and unqualified metadata caused satellite assemblies to be included twice (from same source location) into the publish list. (See https://github.com/microsoft/msbuild/issues/4429)\r\n2. There are assemblies with the same name and version in multiple frameworks. We have to choose one arbitrarily.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3320","RelatedDescription":"Closed or merged PR \"Fix duplicate resolved files to publish\" (#3320)"},{"Id":"454941183","IsPullRequest":true,"CreatedAt":"2019-06-11T23:05:54","Actor":"nugetlurker","Number":"3323","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6045 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6045 into sdk master branch","Url":"https://github.com/dotnet/sdk/pull/3323","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6045 into sdk\" (#3323)"},{"Id":"454317577","IsPullRequest":true,"CreatedAt":"2019-06-11T00:58:34","Actor":"dsplaisted","Number":"3316","RawContent":null,"Title":"Remove old deps file generation logic","State":"closed","Body":"No need to keep both old and new copies anymore.\r\n\r\nThis ends up deleting some of the DependencyContextBuilder unit test coverage, as with the new design the builder depends on the output of ResolvePackageAssets, which isn't so easy to mock.","Url":"https://github.com/dotnet/sdk/pull/3316","RelatedDescription":"Closed or merged PR \"Remove old deps file generation logic\" (#3316)"},{"Id":"454341820","IsPullRequest":false,"CreatedAt":"2019-06-10T19:50:29","Actor":"crummel","Number":"3317","RawContent":null,"Title":"Source-build patch removal for SDK.","State":"open","Body":"Source-build has some patches that we are currently applying to your repo.  This issue tracks removing the patches.  These patches can be found at https://github.com/dotnet/source-build/tree/release/3.0/patches/sdk.\r\n\r\nPatches that have the responsibility \"Repo\" and the Disposition \"Incorporate\" are patches that we believe are valid source-build fixes that should be moved into your repo.  Please let us know if these don't seem like good patches.  Any changes with the responsibility \"source-build\" is something that we plan to keep going forward or integrate in another way - please also let us know if you think there may be problems with those patches.\r\n\r\nPatch name | Type | Disposition | Responsibility | Notes\r\n-- | -- | -- | -- | --\r\nsdk/0001-Upgrade-to-netcoreapp2.1.patch | ToolCompat | Unknown | source-build | May go away with SDK uptake.  Otherwise needs investigation similar to   nuget-client/0001\r\nsdk/0002-Add-missing-PlatformAbstractions-reference.patch | Bug | Incorporate | Repo |  \r\nsdk/0003-Consolidate-versions.patch | Coherence | Incorporate | Repo |  \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3317","RelatedDescription":"Open issue \"Source-build patch removal for SDK.\" (#3317)"},{"Id":"453311134","IsPullRequest":true,"CreatedAt":"2019-06-10T18:11:01","Actor":"dsplaisted","Number":"3311","RawContent":null,"Title":"Exclude Publish=\"false\" package assets from build output, don't infer Publish=\"false\" from PrivateAssets=\"all\"","State":"closed","Body":"See https://github.com/dotnet/designs/pull/78","Url":"https://github.com/dotnet/sdk/pull/3311","RelatedDescription":"Closed or merged PR \"Exclude Publish=\"false\" package assets from build output, don't infer Publish=\"false\" from PrivateAssets=\"all\"\" (#3311)"},{"Id":"453775677","IsPullRequest":false,"CreatedAt":"2019-06-08T09:32:34","Actor":"martincostello","Number":"3314","RawContent":null,"Title":"Regression in build times for Travis CI using 2.2.300 SDK","State":"open","Body":"I've noticed across several different projects I maintain that since the SDK was updated from 2.2.1xx or 2.2.2xx to 2.2.300, the time to build the projects in Travis CI has regressed by up to an order of magnitude on both Linux and macOS.\r\n\r\nHowever I'm not seeing the same regression in Azure DevOps pipelines for Linux, macOS or Windows, or AppVeyor for Windows.\r\n\r\nBelow are a selection of projects that show a build time regression immediately after merging a PR that contains a commit that updates the SDK to 2.2.300:\r\n\r\n| History | Build time pre-update | Build time post-update | Delta | PR with SDK update | Commit with SDK update |\r\n|:-:|:-:|:-:|:-:|:-:|:-:|\r\n| [project-euler](https://travis-ci.org/martincostello/project-euler/builds) | 3 min 40 sec | 37 min 13 sec | +1,015% | [#33](https://github.com/martincostello/project-euler/pull/33) | [b2c7ed3](https://github.com/martincostello/project-euler/commit/b2c7ed39e539201c6625f0d06787de42cb50abaa) |\r\n| [JustEat.StatsD](https://travis-ci.org/justeat/JustEat.StatsD/builds) |  2 min 33 sec | 12 min 19 sec | +483% | [#177](https://github.com/justeat/JustEat.StatsD/pull/177) | [4f4ac55](https://github.com/justeat/JustEat.StatsD/commit/4f4ac5505f2953efa09eef8cc304aad514e49099) |\r\n| [sqllocaldb](https://travis-ci.org/martincostello/sqllocaldb/builds) | 3 min 31 sec | 16 min 28 sec | +468% | [#88](https://github.com/martincostello/sqllocaldb/pull/88) | [671307a](https://github.com/martincostello/sqllocaldb/commit/671307a1fc216d1514f32c787aff547570408e37) |\r\n| [adventofcode](https://travis-ci.org/martincostello/adventofcode/builds) | 7 min 4 sec | 31 min 51 sec | +450% | [#72](https://github.com/martincostello/adventofcode/pull/72) | [8ecc3a7](https://github.com/martincostello/adventofcode/commit/8ecc3a77b5696e5eae735826ef510ef3599447b1) |\r\n| [JustSaying](https://travis-ci.org/justeat/JustSaying/builds) | 6 min 49 sec | 25 min 55 sec | +380% | [#545](https://github.com/justeat/JustSaying/pull/545) | [88f241c](https://github.com/justeat/JustSaying/commit/88f241c8a6bcb5768e2d57fae4aef906aacad53a) |\r\n| [httpclient-interception](https://travis-ci.org/justeat/httpclient-interception/builds) | 6 min 26 sec | 16 min 26 sec | +255% | [#85](https://github.com/justeat/httpclient-interception/pull/85) | [065c722](https://github.com/justeat/httpclient-interception/commit/065c7222669c291baf1fc75f20ce7c6f4863568c) |\r\n| [alexa-london-travel-site](https://travis-ci.org/martincostello/alexa-london-travel-site/builds) | 5 min 34 sec | 11 min 31 sec | +206% | [#267](https://github.com/martincostello/alexa-london-travel-site/pull/267) | [48b47a5](https://github.com/martincostello/alexa-london-travel-site/commit/48b47a5497e9e824fe3ba0d41ef4d9ef299773e0) |\r\n| [api](https://travis-ci.org/martincostello/api/builds) | 5 min 54 sec | 9 min 46 sec | +165% | [#112](https://github.com/martincostello/api/pull/112) | [40c1dee](https://github.com/martincostello/api/commit/40c1dee042f02e18f64c68fcdac7c4500559f907) |\r\n| [website](https://travis-ci.org/martincostello/website/builds) | 4 min 26 sec | 7 min 13 sec | +162% | [#263](https://github.com/martincostello/website/pull/263) | [3a43580](https://github.com/martincostello/website/commit/3a4358008c7022d0abf667774a26505ad9892a47) |\r\n\r\nMy hunch is that it is related to the new \"progress bar\" when running `dotnet test` which is causing the Travis agents to waste a lot of time trying to \"draw\" it because the actual test run times printed in the build output are equivalent:\r\n\r\n  * [Build before](https://travis-ci.org/martincostello/project-euler/jobs/513808297#L560) - `Time Elapsed 00:00:10.86`\r\n  * [Build after](https://travis-ci.org/martincostello/project-euler/jobs/537916269#L556) - `Time Elapsed 00:00:15.31`\r\n  * [Test before](https://travis-ci.org/martincostello/project-euler/jobs/513808297#L706) - `Test execution time: 46.8778 Seconds`\r\n  * [Test after](https://travis-ci.org/martincostello/project-euler/jobs/537916269#L700) - `Total time: 46.5308 Seconds`\r\n","Url":"https://github.com/dotnet/sdk/issues/3314","RelatedDescription":"Open issue \"Regression in build times for Travis CI using 2.2.300 SDK\" (#3314)"},{"Id":"453443961","IsPullRequest":false,"CreatedAt":"2019-06-07T10:26:09","Actor":"vitek-karas","Number":"3312","RawContent":null,"Title":"What should be default RollForward for component projects","State":"open","Body":"We haven’t made an official decision on the default value for `RollForward` in our new component scenarios.\r\n\r\nTLDR;\r\nShould we use `LatestMinor` or `LatestMajor` for component projects by default.\r\n\r\nThe long version:\r\nCurrently `RollForward` is set to `Minor` (roll to closest available version while staying with the same `major.` part of the version, then roll to latest patch of that version) for all projects by default. This is the value used when no `RollForward` is specified by the SDK in `.runtimeconfig.json`. More details about `RollForward` are here and here.\r\n\r\nFor dynamically loaded components this value would come with problems. The most important one being ordering issues. For example let’s have two COM components `A 3.0 Minor` and `B 3.1 Minor` on a machine which has both `3.0` and `3.1` installed. If the native app activates B first, it will load `3.1` runtime and then when it activates A second it will just work (since A can run on `3.1`). But if the app activates A first, it would load `3.0` (closest available match to `3.0 Minor`) and then when it would try to activate B that would fail (B is not compatible with `3.0`).\r\n\r\nTo overcome this problem the `RollForward` has two settings:\r\n* `LatestMinor` – pick the highest available version with the same `major.` part of the version (so `3.0 LatestMinor` would roll to latest `3.*` version)\r\n* `LatestMajor` – pick the highest available version (all up)\r\n\r\nIf in the above scenario A would be `3.0 LatestMinor` and B would be `3.1 LatestMinor`, no matter which one got activated first, they both would load `3.1` (as the latest `3.*` available version).\r\n\r\nSo to make it easy for users and make things just work out of the box, we would like to set `RollForward` to one of the `LatestMinor`/`LatestMajor` by default on component projects.\r\nElinor has a PR out which introduces the notion of “component project”: https://github.com/dotnet/sdk/pull/3305\r\n\r\nThe question is if we should use `LatestMinor` or `LatestMajor` as the default for component projects.\r\n\r\n*`LatestMinor`:*\r\n* Pros: Higher chance of providing the expected compatibility – in general we try really hard to avoid breaking changes for minor versions, so 3.1 is expected to be fully backward compatible with 3.0. We tell people that upgrading to minor version is “safe”.\r\n* Cons: Come .NET 5 components targeting 3.0 would not run on 5.0. Basically creating an upgrade problem. Combining components targeting both 3.0 and 5.0 would fail.\r\n\r\n*`LatestMajor`:*\r\n* Pros: No upgrade problems – all components run everywhere and together.\r\n* Cons: Potentially breaking for some components as we may introduce some breaking changes between `5.0` and `3.0`. That said `classlibs` (which components are a special case of) are already assumed to work just fine even across major versions (NuGet has no notion of compatibility ranges, and will let people use `3.0` `classlibs` in `5.0` projects).\r\n\r\nSome related discussions already happened:\r\nhttps://github.com/dotnet/core-setup/issues/5870\r\nhttps://github.com/dotnet/core-setup/issues/5062\r\n\r\nThoughs?","Url":"https://github.com/dotnet/sdk/issues/3312","RelatedDescription":"Open issue \"What should be default RollForward for component projects\" (#3312)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1141115444708823040","CreatedAt":"2019-06-18T22:48:17+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"1141074032273453056","CreatedAt":"2019-06-18T20:03:44+00:00","UserScreenname":"dotnet","Text":"The Evolving Infrastructure of .NET Core https://t.co/modbwJLbCR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":187,"FavoriteCount":91,"RawContent":null},{"Id":"1139464997086515200","CreatedAt":"2019-06-14T09:30:00+00:00","UserScreenname":"dotnet","Text":"In this episode of On .NET, @merrie_mcgaw and @dcampbell share some interesting insights on the work that's going i… https://t.co/lk13vbgcLT","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":9,"RawContent":null},{"Id":"1138862091987800064","CreatedAt":"2019-06-12T17:34:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 6 https://t.co/33ez5lSv95","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":373,"FavoriteCount":200,"RawContent":null},{"Id":"1138808172397899781","CreatedAt":"2019-06-12T14:00:00+00:00","UserScreenname":"dotnet","Text":"Announcing ML .NET 1.1 and Model Builder updates (Machine Learning for .NET)\nhttps://t.co/XN6b6HRpSP https://t.co/3pmcAPxoN9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":39,"RawContent":null},{"Id":"1138490776495697920","CreatedAt":"2019-06-11T16:58:47+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":2,"RawContent":null},{"Id":"1138476484010446848","CreatedAt":"2019-06-11T16:02:00+00:00","UserScreenname":"dotnet","Text":"Find out what the @aspnet team has been working to add better support for building microservices in… https://t.co/kDZY18RslQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":17,"RawContent":null},{"Id":"1138214322503426048","CreatedAt":"2019-06-10T22:40:16+00:00","UserScreenname":"dotnet","Text":"On this week's #ASPNET Community Standup, we'll be talking to @danroth27 about the Blazing Pizza demo he showed at… https://t.co/EoPKEmeHPX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":23,"RawContent":null},{"Id":"1137047014795911168","CreatedAt":"2019-06-07T17:21:48+00:00","UserScreenname":"dotnet","Text":"We're happy to support Core WF and Core WCF open source projects https://t.co/4hjysrl1X8 https://t.co/JWwVvdv01f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":141,"FavoriteCount":73,"RawContent":null}]}},"RunOn":"2019-06-19T05:30:38.0525476Z","RunDurationInMilliseconds":13533}