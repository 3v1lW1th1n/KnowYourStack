{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes. .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/12/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/07/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T16:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft. F# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/05/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":49,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3734","PublishedOn":"2019-01-29T00:30:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are getting closer to the final version now! This release includes several accessibility, performance and reliability fixes across the major framework libraries. We will continue to stabilize this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/announcing-net-framework-4-8-early-access-build-3734/","RawContent":null},{"Title":"Help us plan the future of .NET and Big Data","PublishedOn":"2019-01-28T22:05:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We’re currently looking into how we can make .NET great for Big Data scenarios.    Please fill out the survey below and help shape how we can improve .NET for Big Data by sharing your experiences,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/help-us-plan-the-future-of-net-and-big-data/","RawContent":null},{"Title":"Debugging .NET Apps with Time Travel Debugging (TTD)","PublishedOn":"2019-01-25T19:32:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"When you are debugging an application, there are many tools and techniques you can use, like logs, memory dumps and Event Tracing for Windows (ETW). In this post, we will talk about Time Travel...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/25/debugging-net-apps-with-time-travel-debugging-ttd/","RawContent":null},{"Title":".NET and TypeScript at FOSDEM 2019","PublishedOn":"2019-01-24T20:50:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The schedule for the .NET and Typescript Developer Room at FOSDEM has now been published! FOSDEM is one of the longest running Free and Open Source conferences, and we’re excited to have a .NET and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-and-typescript-at-fosdem-2019/","RawContent":null},{"Title":"Do more with patterns in C# 8.0","PublishedOn":"2019-01-24T18:00:30+00:00","CommentsCount":78,"FacebookCount":0,"Summary":"Do more with patterns in C# 8.0 Visual Studio 2019 Preview 2 is out! And with it, a couple more C# 8.0 features are ready for you to try. It&#8217;s mostly about pattern matching, though I&#8217;ll...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/","RawContent":null},{"Title":"Announcing F# 4.6 Preview","PublishedOn":"2019-01-24T15:45:40+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that Visual Studio 2019 will ship a new version of F# when it releases: F# 4.6! F# 4.6 is a smaller update to the F# language, making it a &#8220;true&#8221;...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/announcing-f-4-6-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9057403849","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:49:58","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22530","RelatedDescription":"Merged pull request \"Fix min-opts spill of tree temp large vectors\" (#22530) at dotnet/coreclr","RelatedBody":"Even if we're not enregistering local vars, we may have large vectors live across a call that need to be spilled.\r\n\r\nFix #22200"},{"Id":"9057403838","Type":"IssuesEvent","CreatedAt":"2019-02-13T04:49:58","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22200","RelatedDescription":"Closed issue \"[arm64] Test failed: JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh\" (#22200) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/97/\r\n\r\n**Failed tests:**\r\nJIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh\r\n\r\n**Log:**\r\n```\r\nJIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh [FAIL]\r\n        /n/nReturn code:      1/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/JIT/Regression/Reports/JIT.Regression/JitBlue/GitHub_20657/GitHub_20657/GitHub_20657.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/corerun GitHub_20657.exe\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/JIT/Regression/JitBlue/GitHub_20657/GitHub_20657/GitHub_20657.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Regression/JIT.Regression.XUnitWrapper.cs(82989,0): at JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh()\r\n```"},{"Id":"9057372241","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:39:49","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22565","RelatedDescription":"Opened pull request \"Move EventRegistrationToken to shared\" (#22565) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/coreclr/issues/17903"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9057509723","Type":"IssuesEvent","CreatedAt":"2019-02-13T05:23:26","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10602","RelatedDescription":"Closed issue \"Dotnet publish with -r ubuntu-x64 and --self-contained=false fails to find framework\" (#10602) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\n$ docker run -it ubuntu:18.04 bash\r\n$ apt-get update\r\n$ apt-get install liblttng-ust0 libcurl3 libssl1.0.0 libkrb5-3 zlib1g libicu60 -y\r\n$ dotnet --version\r\n> 2.2.101\r\n$ dotnet --list-runtimes\r\n> Microsoft.AspNetCore.All 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.All]\r\n> Microsoft.AspNetCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.App]\r\n> Microsoft.NETCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.NETCore.App]\r\n$ dotnet new webapi\r\n$ dotnet publish -r ubuntu-x64 --self-contained=false\r\n$ cd bin/Debug/netcoreapp2.2/ubuntu-x64/publish/\r\n$ ./project --server.urls http://0.0.0.0:8080\r\n> The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /tmp/project/bin/Debug/netcoreapp2.2/ubuntu-x64/publish/\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n```\r\n\r\n## Expected  behavior\r\n\r\nWe are not sure if this is a valid workflow but we expected `Microsoft.AspNetCore.App` to be found.\r\n\r\n## Actual behavior\r\n\r\nThe error seen above with missing framework.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    29ae5ac2c2\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /tmp/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/tmp/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nThis is using an SDK built from source against ubuntu 18.04 and everything else seems to be working: https://github.com/dotnet/cli/blob/master/Documentation/project-docs/developer-guide.md#buildingrunning\r\n\r\nI don't see why the framework wouldn't be found. Should this workflow with `dotnet publish -r ubuntu-x64 --self-contained=false` be valid? I've found some other issues where the `-r` flag and `--self-contained=false` are used together. What should we expect to happen in this case? Is the app packaged with the specific runtime but not entirely self-contained?\r\n\r\nThanks for the help!"},{"Id":"9057501062","Type":"PullRequestEvent","CreatedAt":"2019-02-13T05:20:46","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10767","RelatedDescription":"Merged pull request \"Update branding to 2.2.105.\" (#10767) at dotnet/cli","RelatedBody":""},{"Id":"9057489588","Type":"PullRequestEvent","CreatedAt":"2019-02-13T05:17:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10769","RelatedDescription":"Opened pull request \"WIP test CI\" (#10769) at dotnet/cli","RelatedBody":"will an empty check in fail with the same reason as https://github.com/dotnet/cli/pull/10759 ?"},{"Id":"9057442686","Type":"PullRequestEvent","CreatedAt":"2019-02-13T05:02:08","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/10742","RelatedDescription":"Closed pull request \"Merge release/2.2.2xxto release/3.0.1xx\" (#10742) at dotnet/cli","RelatedBody":"Please review carefully. I updated versions.props by diffing with build/versions.props which is quiet different in 2.2.2xxx vs 3.0.1xx"},{"Id":"9057441377","Type":"PullRequestEvent","CreatedAt":"2019-02-13T05:01:41","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10768","RelatedDescription":"Opened pull request \"Merge release/2.2.2xxto release/3.0.1xx 2\" (#10768) at dotnet/cli","RelatedBody":"continue of https://github.com/dotnet/cli/pull/10742\r\nI updated versions.props by diffing with build/versions.props which is quiet different in 2.2.2xxx vs 3.0.1xx\r\n"},{"Id":"9057089052","Type":"PullRequestEvent","CreatedAt":"2019-02-13T03:13:28","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10767","RelatedDescription":"Opened pull request \"Update branding to 2.2.105.\" (#10767) at dotnet/cli","RelatedBody":""},{"Id":"9057065152","Type":"PullRequestEvent","CreatedAt":"2019-02-13T03:06:46","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10764","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx-MSRC to release/2.2.1xx\" (#10764) at dotnet/cli","RelatedBody":""},{"Id":"9057007141","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:51:02","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10766","RelatedDescription":"Merged pull request \"Update branding to 2.1.505.\" (#10766) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"9056909426","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:24:48","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/10764","RelatedDescription":null,"RelatedBody":""},{"Id":"9056909142","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:24:44","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/10764","RelatedDescription":"Closed pull request \"Merge release/2.2.1xx-MSRC to release/2.2.1xx\" (#10764) at dotnet/cli","RelatedBody":""},{"Id":"9056903148","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:23:02","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10766","RelatedDescription":"Opened pull request \"Update branding to 2.1.505.\" (#10766) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"9056877411","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:16:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10765","RelatedDescription":"Opened pull request \"Update dependencies from dotnet/sdk\" (#10765) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19112.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9039898540","Type":"IssuesEvent","CreatedAt":"2019-02-10T11:39:52","Actor":"jmroyb","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Opened issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066) at dotnet/standard","RelatedBody":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers"},{"Id":"9037661459","Type":"IssuesEvent","CreatedAt":"2019-02-09T13:00:39","Actor":"kaby76","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Opened issue \"CI build status log is not public\" (#1065) at dotnet/standard","RelatedBody":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9057395884","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:47:24","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35284","RelatedDescription":"Merged pull request \"Fix argument name in GCHandleTests\" (#35284) at dotnet/corefx","RelatedBody":"A GCHandle test is validating that an argument exception contains a null parameter name.  That's been fixed in coreclr, so this test will start to fail when we ingest a new coreclr.  For now, just removing the null validation, as it's not useful."},{"Id":"9057302835","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:17:50","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35286","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27413-00, beta-27413-00, respectively (master)\" (#35286) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9057299037","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:16:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35285","RelatedDescription":"Opened pull request \"Add a few more Parse_Subspan_Success inline datas\" (#35285) at dotnet/corefx","RelatedBody":"Addressing PR feedback that I missed."},{"Id":"9057275215","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:08:55","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35284","RelatedDescription":"Opened pull request \"Fix argument name in GCHandleTests\" (#35284) at dotnet/corefx","RelatedBody":"A GCHandle test is validating that an argument exception contains a null parameter name.  That's been fixed in coreclr, so this test will start to fail when we ingest a new coreclr.  For now, just removing the null validation, as it's not useful."},{"Id":"9057195056","Type":"PullRequestEvent","CreatedAt":"2019-02-13T03:44:07","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35077","RelatedDescription":"Merged pull request \"Cleanup AssociatedMetadataTypeTypeDescriptor\" (#35077) at dotnet/corefx","RelatedBody":"Move to using immutable `ValueTuple` and some naming fixes"},{"Id":"9057187076","Type":"IssuesEvent","CreatedAt":"2019-02-13T03:41:41","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35283","RelatedDescription":"Opened issue \"SslStream.AuthenticateAsServer/ClientAsync methods should default CancellationToken to default(CancellationToken)\" (#35283) at dotnet/corefx","RelatedBody":"The new Authenticate overloads on SslStream take a CancellationToken, but don't provide a default value for this. These should default to default(CancellationToken), i.e. CancellationToken.None.\r\n\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L425\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L390\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9057067008","Type":"IssuesEvent","CreatedAt":"2019-02-13T03:07:14","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33345","RelatedDescription":"Opened issue \"Code fix for \"use pattern matching\" should be removing blanks lines it introduces\" (#33345) at dotnet/roslyn","RelatedBody":"Unlike other code fixes, \"use pattern matching\" doesn't remove blank lines when it removes an assignment:\r\n\r\n``` C#\r\n                        var receivingData = this.receiveBuffer[i] as IProjectVersionedValue<IProjectSubscriptionUpdate>;\r\n\r\n                        // We should prevent processing the same delta again.\r\n                        if (receivingData != null && receivingData.DataSourceVersions == resultUpdate.DataSourceVersions && receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)\r\n                        {\r\n                            this.receiveBuffer[i] = this.processingBuffer[i];\r\n                        }\r\n```\r\n\r\nExpected:\r\n\r\n``` C# \r\n                 lock (this.SyncObject)\r\n                 {\r\n                        // We should prevent processing the same delta again.\r\n                        if (this.receiveBuffer[i] is IProjectVersionedValue<IProjectSubscriptionUpdate> receivingData && receivingData.DataSourceVersions == resultUpdate.DataSourceVersions && receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)\r\n                        {\r\n                            this.receiveBuffer[i] = this.processingBuffer[i];\r\n                        }\r\n                 }\r\n```\r\n\r\nActual:\r\n\r\n``` C#\r\n                    lock (this.SyncObject)\r\n                    {\r\n\r\n                        // We should prevent processing the same delta again.\r\n                        if (this.receiveBuffer[i] is IProjectVersionedValue<IProjectSubscriptionUpdate> receivingData && receivingData.DataSourceVersions == resultUpdate.DataSourceVersions && receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)\r\n                        {\r\n                            this.receiveBuffer[i] = this.processingBuffer[i];\r\n                        }\r\n                    }\r\n```\r\n\r\nHit in: https://devdiv.visualstudio.com/DevDiv/_git/CPS/pullrequest/164018?path=%2Fsrc%2FMicrosoft.VisualStudio.ProjectSystem%2FCore%2FDataflow%2FSyncLinkToLink.cs&discussionId=1641980&_a=files.\r\n\r\nMake sure it handles both the case where code _and_ trivia follows it."},{"Id":"9056816014","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:00:11","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33339","RelatedDescription":"Merged pull request \"Merge dev16.0 to master\" (#33339) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9056766301","Type":"IssuesEvent","CreatedAt":"2019-02-13T01:47:16","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33344","RelatedDescription":"Opened issue \"NullableWalker fails to update type for a default expression\" (#33344) at dotnet/roslyn","RelatedBody":"In the following code in `NullableWalker`, the result tuple type is not updated to reflect that some of its element types may contain null.\r\n\r\n``` c#\r\n        public override BoundNode VisitDefaultExpression(BoundDefaultExpression node)\r\n        {\r\n            Debug.Assert(!this.IsConditionalState);\r\n\r\n            var result = base.VisitDefaultExpression(node);\r\n            TypeSymbol type = node.Type;\r\n            if (EmptyStructTypeCache.IsTrackableStructType(type))\r\n            {\r\n                int slot = GetOrCreateObjectCreationPlaceholderSlot(node);\r\n                if (slot > 0)\r\n                {\r\n                    this.State[slot] = NullableFlowState.NotNull;\r\n                    InheritNullableStateOfTrackableStruct(type, slot, valueSlot: -1, isDefaultValue: true, isByRefTarget: false, slotWatermark: GetSlotWatermark());\r\n                }\r\n            }\r\n\r\n            // PROTOTYPE(ngafter): this fails to produce an updated tuple type for a default expression\r\n            // (with nullable element types where those element types were capable of containing null)\r\n            _resultType = TypeWithState.ForType(type);\r\n            return result;\r\n        }\r\n```\r\n"},{"Id":"9056703211","Type":"PullRequestEvent","CreatedAt":"2019-02-13T01:30:19","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33340","RelatedDescription":"Merged pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#33340) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9056702756","Type":"PullRequestEvent","CreatedAt":"2019-02-13T01:30:13","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33341","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#33341) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9056639647","Type":"IssuesEvent","CreatedAt":"2019-02-13T01:14:06","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29489","RelatedDescription":"Closed issue \"Translation error from .net 4.6.1\" (#29489) at dotnet/roslyn","RelatedBody":"It seems there are a large number of translation error(Chinese) from .net 4.6.1\r\nFor example:\r\nToolStripSplitButton.Enabled\r\n获取或设置一个值，该值指示是否启用了 ToolStripItem 的父控件。 (.net 2.0--4.6)\r\n获取或设置一个值，该值指示是否的父控件的 ToolStripItem 已启用。 (.net 4.6.1--4.7.2)\r\n\r\nToolStripSplitButton.SplitterBounds\r\n获取 ToolStripSplitButton 的标准按钮和下拉按钮部分之间的分隔符的边界。 (.net 2.0--4.6)\r\n获取的标准和下拉按钮部分之间的分隔符的边界 ToolStripSplitButton。  (.net 4.6.1--4.7.2)\r\n\r\nIntelliSense gives us error translation for .net 4.6.1+\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9057305326","Type":"PullRequestEvent","CreatedAt":"2019-02-13T04:18:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7011","RelatedDescription":"Merged pull request \"Pin CoreRT OS modules in memory\" (#7011) at dotnet/corert","RelatedBody":"CoreRT is not designed to be unloadable. Unloading modules before process shutdown leads to crashes and memory leaks.\r\n\r\nFixes #6993"},{"Id":"9057305315","Type":"IssuesEvent","CreatedAt":"2019-02-13T04:18:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6993","RelatedDescription":"Closed issue \"Crash on library unload via Python\" (#6993) at dotnet/corert","RelatedBody":"The following code invokes the NativeLibrary sample shared library in Python on Windows using CFFI. It exits with code -1073741819. Note that \"checks pass\" is printed and the crash happens on shutdown / library unloading or similar.\r\n\r\n```py\r\n# pip install cffi\r\n# dotnet publish /p:NativeLib=Shared -r win-x64 -c Debug\r\n\r\nimport os\r\nfrom cffi import FFI\r\n\r\nPROJ_DIR = os.path.join(os.path.dirname(__file__))\r\nLIB_BASE_DIR = os.path.join(PROJ_DIR, 'bin', 'Debug', 'netstandard2.0')\r\nLIB_PATH = os.path.join(LIB_BASE_DIR, 'win-x64', 'native', 'NativeLibrary.dll')\r\n\r\nffi = FFI()\r\nffi.cdef('long add(long a, long b);')\r\nlib = ffi.dlopen(LIB_PATH)\r\n\r\nassert lib.add(1, 2) == 3\r\nassert lib.add(2147483647, 1) == -2147483648\r\nprint('checks pass')\r\n```\r\nSimply copy this into a `test.py` file in the project folder and run `python test.py`. Check the exit code with `echo %errorlevel%` if using command prompt/Anaconda prompt.\r\n\r\nWhen running this under WinDbg I can see that the crash happens here:\r\n```\r\n<Unloaded_NativeLibrary.dll>+0x2ca820\r\nntdll!RtlProcessFlsData+0x145\r\nntdll!LdrShutdownProcess+0x92\r\nntdll!RtlExitUserProcess+0xad\r\nKERNEL32!FatalExit+0xa\r\nucrtbase!exit+0x1d4\r\nucrtbase!exit+0x7f\r\npython!__scrt_common_main_seh+0x13d\r\nKERNEL32!BaseThreadInitThunk+0x14\r\nntdll!RtlUserThreadStart+0x21\r\n```\r\n\r\nThe log says:\r\n```\r\n(5540.5dbc): Access violation - code c0000005 (first chance)\r\n```\r\n\r\nFor reference, this uses Python 3.6.7 64 bit from the Anaconda distribution."},{"Id":"9056949881","Type":"PullRequestEvent","CreatedAt":"2019-02-13T02:35:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7010) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose @tannergooding @sywhang"},{"Id":"9056284814","Type":"PullRequestEvent","CreatedAt":"2019-02-12T23:45:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":null,"RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose @tannergooding @sywhang"},{"Id":"9056284503","Type":"PullRequestEvent","CreatedAt":"2019-02-12T23:45:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7010) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose @tannergooding @sywhang"},{"Id":"9055923654","Type":"PullRequestEvent","CreatedAt":"2019-02-12T22:31:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7011","RelatedDescription":"Opened pull request \"Pin CoreRT OS modules in memory\" (#7011) at dotnet/corert","RelatedBody":"CoreRT is not designed to be unloadable. Unloading modules before process shutdown leads to crashes and memory leaks.\r\n\r\nFixes #6993"},{"Id":"9055385680","Type":"PullRequestEvent","CreatedAt":"2019-02-12T20:59:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7010) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose @tannergooding @sywhang"},{"Id":"9055385629","Type":"PullRequestEvent","CreatedAt":"2019-02-12T20:59:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":null,"RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose @tannergooding @sywhang"},{"Id":"9055344393","Type":"PullRequestEvent","CreatedAt":"2019-02-12T20:52:24","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7010) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9055327438","Type":"PullRequestEvent","CreatedAt":"2019-02-12T20:49:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6999","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6999) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @stephentoub"},{"Id":"9055256717","Type":"PullRequestEvent","CreatedAt":"2019-02-12T20:37:48","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7009","RelatedDescription":"Merged pull request \"Exclude System.Runtime.Windows.Runtime[.UI.Xaml] from /r2rframework\" (#7009) at dotnet/corert","RelatedBody":"Based on Simon's advice I have excluded the above two assemblies\r\nfrom CPAOT compilation as part of the CoreCLR framework.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9054880708","Type":"PullRequestEvent","CreatedAt":"2019-02-12T19:36:14","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7009","RelatedDescription":"Opened pull request \"Exclude System.Runtime.Windows.Runtime[.UI.Xaml] from /r2rframework\" (#7009) at dotnet/corert","RelatedBody":"Based on Simon's advice I have excluded the above two assemblies\r\nfrom CPAOT compilation as part of the CoreCLR framework.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9054705091","Type":"PullRequestEvent","CreatedAt":"2019-02-12T19:08:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6999","RelatedDescription":null,"RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @stephentoub"},{"Id":"9054704931","Type":"PullRequestEvent","CreatedAt":"2019-02-12T19:08:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6999","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6999) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @stephentoub"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9057503647","Type":"PullRequestEvent","CreatedAt":"2019-02-13T05:21:36","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2881","RelatedDescription":"Merged pull request \"Ensure Microsoft.NETCore.App is an implicit dependency for publish.\" (#2881) at dotnet/sdk","RelatedBody":"This commit ensures that we exclude files from the `Microsoft.NETCore.App`\r\nplatform library on publish when the platform library is\r\n`Microsoft.AspNetCore.App`, which doesn't have an explicit dependency on\r\n`Microsoft.NETCore.App`.\r\n\r\nWhen publishing a 2.x ASP.NET application, the `MicrosoftNETPlatformLibrary`\r\nproperty gets changed by ASP.NET to `Microsoft.AspNetCore.App`.  This causes\r\nthe task responsible for determining what files to copy locally to treat files\r\nfrom `Microsoft.NETCore.App` and its dependencies as not being part of the\r\nplatform.\r\n\r\nHowever, when publishing the application as framework-dependent, almost all the\r\nplatform files get excluded thanks to conflict resolution which has the files\r\nas part of the platform manifest and preferred packages.  Unfortunately, the\r\napphost, hostpolicy, and hostfxr files are not part of these lists and as a\r\nresult will be copied locally.\r\n\r\nThis breaks framework-dependent apphost activation because hostfxr and\r\nhostpolicy are copied locally.  Additionally, these files end up in the\r\ndeps.json file which also prevents roll-forward activation if the two files are\r\nmanually deleted.\r\n\r\nThe fix is to treat `Microsoft.NETCore.App` as an implicit dependency of\r\n`Microsoft.AspNetCore.App` where we calculate the list of excluded packages for\r\na framework-dependent publish.\r\n\r\nFixes dotnet/cli#10602."},{"Id":"9056561554","Type":"PullRequestEvent","CreatedAt":"2019-02-13T00:53:55","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2929","RelatedDescription":"Merged pull request \"Speed up GetPackageDirectory task and clean up NuGetPackageResolver\" (#2929) at dotnet/sdk","RelatedBody":"1. Never use INuGetPathContext. It is slow an unpredictable. It was left as a fallback when #361 was fixed, but we should never be resolving from package folders other than what is listed in the assets file. So  instead, if no package folders are in the assets file, we will find no packages. This path should not ever have been taken. Most tasks that call this are skipped in design-time when no assets file is available yet. GetPackageDirectory is not, but that is handled by (3) below.\r\n\r\n2. Stop hitting the disk twice on GetPackageDirectory. We were calling GetPackageInfo and GetPackageDirectory and both probe on disk for the package. Instead, use GetInstallPath on result PackageInfo or use GetPackageDirectory alone when we do not need the RootPath.\r\n\r\n3. Fix #2928: Replace incorrect check for null package resolver and replace it with up-front defense against empty PackageFolders.\r\n\r\n4. Eliminate unnecessary allocations for List<T> resizing and copying to array.\r\n\r\n5. Fix TODO in NuGetPackageResolver and Use RootPath property instead of workaround.\r\n\r\n6. Stop treating \"\\\\%(RelativePath)\" as targeting pack path when not downloaded.\r\n\r\n7. Follow same pattern for apphost as targeting pack to avoid probing in packages folder when found in packs folder."},{"Id":"9055203781","Type":"IssuesEvent","CreatedAt":"2019-02-12T20:28:47","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2875","RelatedDescription":"Closed issue \"Cannot force ResolveFrameworkReference to avoid downloading targeting packs\" (#2875) at dotnet/sdk","RelatedBody":"Feature request: for the sake of things like source-build and building your own targeting pack (e.g. https://github.com/aspnet/AspNetCore), I'd like to be able to force the SDK into an \"offline mode\" which fails instead of attempting to download targeting packs. The current code only checks for `Directory.Exists`\r\n\r\nhttps://github.com/dotnet/sdk/blob/915adb77cc3763f88aca3da622961abd54f100f2/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L112-L126\r\n\r\n\r\n**Options I've considered:**\r\n\r\n* Add a global property, like `DisableTargetingPackAcquisition`\r\n* Add something to `KnownFrameworkReference` or `<FrameworkReference>` as metadata\r\n\r\ncc @dsplaisted @nguerrera\r\n"},{"Id":"9055181625","Type":"IssuesEvent","CreatedAt":"2019-02-12T20:25:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2792","RelatedDescription":"Closed issue \"RuntimeFrameworkVersion for 3.0 apps\" (#2792) at dotnet/sdk","RelatedBody":"Filing on behalf of @DamianEdwards @davidfowl \r\n\r\nIt appears the RuntimeFrameworkVersion property is no longer honored in netcoreapp3.0 projects. If our recollection is correct, the plan was to use this property so customers could define the versions used by FrameworkReference. \r\n\r\nOpen question: how to handle the difference between shared framework versions. After RTM, we should (in theory) always patch all in-box shared frameworks. But during per-release, however, these versions will rarely align. \r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"open","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Open PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"open","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Open PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"409623578","IsPullRequest":true,"CreatedAt":"2019-02-13T04:39:49","Actor":"stephentoub","Number":"22565","RawContent":null,"Title":"Move EventRegistrationToken to shared","State":"open","Body":"Contributes to https://github.com/dotnet/coreclr/issues/17903","Url":"https://github.com/dotnet/coreclr/pull/22565","RelatedDescription":"Open PR \"Move EventRegistrationToken to shared\" (#22565)"},{"Id":"409607871","IsPullRequest":true,"CreatedAt":"2019-02-13T03:25:25","Actor":"stephentoub","Number":"22564","RawContent":null,"Title":"Move SafeHandle to managed code and shared","State":"open","Body":"This moves the implementation of SafeHandle from native code in the runtime to managed.  I used corert's implementation as a base, and reviewed it again against the existing native implementation, making a few tweaks to better match the existing semantics.\r\n\r\nThis should be a valid move because of the reduced goals around CERs, thread aborts, etc.\r\n\r\nHowever, there are places in the runtime that access SafeHandle functionality via its native counterpart, so I kept the relevant pieces of the native code intact.  Most code will continue to use the managed APIs, but the runtime can continue calling into the native versions when needed.\r\n\r\nThis also gives a boost to throughput.  For this microbenchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\n[InProcess]\r\n[MemoryDiagnoser]\r\npublic class Test\r\n{\r\n    public static void Main() => BenchmarkRunner.Run<Test>();\r\n\r\n    private CustomSafeHandle _handle = new CustomSafeHandle();\r\n\r\n    [Benchmark]\r\n    public void AddRelease()\r\n    {\r\n        bool success = false;\r\n        _handle.DangerousAddRef(ref success);\r\n        _handle.DangerousRelease();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void CreateDispose() => new CustomSafeHandle().Dispose();\r\n}\r\n\r\nclass CustomSafeHandle : SafeHandle\r\n{\r\n    public CustomSafeHandle() : base((IntPtr)(-1), true) => SetHandle((IntPtr)12345);\r\n    public override bool IsInvalid => false;\r\n    protected override bool ReleaseHandle() => true;\r\n}\r\n```\r\n\r\nBefore:\r\n```\r\n        Method |      Mean |     Error |    StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n-------------- |----------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n    AddRelease |  35.25 ns | 0.4177 ns | 0.3703 ns |           - |           - |           - |                   - |\r\n CreateDispose | 114.17 ns | 2.1516 ns | 2.0126 ns |      0.0076 |           - |           - |                32 B |\r\n```\r\n\r\nAfter:\r\n```\r\n        Method |     Mean |     Error |    StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n-------------- |---------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n    AddRelease | 16.82 ns | 0.2752 ns | 0.2574 ns |           - |           - |           - |                   - |\r\n CreateDispose | 67.18 ns | 1.3370 ns | 1.3131 ns |      0.0076 |           - |           - |                32 B |\r\n```\r\n\r\nContributes to https://github.com/dotnet/coreclr/issues/17903","Url":"https://github.com/dotnet/coreclr/pull/22564","RelatedDescription":"Open PR \"Move SafeHandle to managed code and shared\" (#22564)"},{"Id":"409604835","IsPullRequest":true,"CreatedAt":"2019-02-13T03:12:11","Actor":"erozenfeld","Number":"22563","RawContent":null,"Title":"Fix check for memory containment safety.","State":"open","Body":"This change ensures that if an operand can produce an exception\r\nand any instructions executed after the operand evaluation but before\r\nthe operand's parent can also produce an exception, the operand\r\nshouldn't be contained. The reason is that in this case operand\r\ncontainment may reorder exceptions.\r\n\r\nWith `strict` set to true the containment is blocked here:\r\nhttps://github.com/dotnet/coreclr/blob/d27fff3f65193dd71c6197e9876101f496bbd28b/src/jit/sideeffects.cpp#L485-L488\r\n\r\nFixes #22556.","Url":"https://github.com/dotnet/coreclr/pull/22563","RelatedDescription":"Open PR \"Fix check for memory containment safety.\" (#22563)"},{"Id":"409588288","IsPullRequest":false,"CreatedAt":"2019-02-13T02:21:20","Actor":"VincentBu","Number":"22562","RawContent":null,"Title":"[arm] Test failed: System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstressregs3_tst/50/\r\n\r\n**Failed tests:**\r\nSystem.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException\r\n\r\n**Log:**\r\n```\r\nSystem.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException(value: System.Runtime.InteropServices.Tests.GCHandleTests+NonBlittable) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: (null)\r\n      Actual:   value\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---470eb69d\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(86,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---470eb69d\\_\\fx\\src\\System.Runtime.InteropServices\\tests\\System\\Runtime\\InteropServices\\GCHandleTests.cs(78,0): at System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException(Object value)\r\n    System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException(value: []) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: (null)\r\n      Actual:   value\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---470eb69d\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(86,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---470eb69d\\_\\fx\\src\\System.Runtime.InteropServices\\tests\\System\\Runtime\\InteropServices\\GCHandleTests.cs(78,0): at System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException(Object value)\r\n    System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException(value: []) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: (null)\r\n      Actual:   value\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---470eb69d\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(86,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---470eb69d\\_\\fx\\src\\System.Runtime.InteropServices\\tests\\System\\Runtime\\InteropServices\\GCHandleTests.cs(78,0): at System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException(Object value)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22562","RelatedDescription":"Closed issue \"[arm] Test failed: System.Runtime.InteropServices.Tests.GCHandleTests.Alloc_InvalidPinnedObject_ThrowsArgumentException\" (#22562)"},{"Id":"409580220","IsPullRequest":false,"CreatedAt":"2019-02-13T01:26:53","Actor":"lostmsu","Number":"22561","RawContent":null,"Title":"DllNotFoundException after successful manual dlopen on MacOS","State":"open","Body":"I am trying to embed Python 3.6 into my cross-platform C# app.\r\n\r\nSince I want the app to rely on an existing Python installation, I let the user pick the Python interpreter, then preload its the dynamic library with `LoadLibrary`/`dlopen`, and rely on `DllImport` to use the preloaded library.\r\n\r\nThis approach works no problem on Windows and Linux (though in the later case I only tried with the library actually being in the load path), however on MacOS I get `Unhandled Exception: System.DllNotFoundException: Unable to load shared library 'python3.6m' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(libpython3.6m, 1): image not found`\r\n\r\nHere's the repro example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace DynPreload\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            const string pythonLib = \"/usr/local/opt/python36/Frameworks/Python.framework/Versions/3.6/lib/python3.6/config-3.6m-darwin/libpython3.6m.dylib\";\r\n            if (dlopen(pythonLib, DLOpenFlags.RTLD_NOW) == IntPtr.Zero) throw new Exception();\r\n            Console.WriteLine(\"Preloaded!\");\r\n            Py_SetProgramName(\"42\"); // <- this throws DllNotFoundException\r\n        }\r\n\r\n        enum DLOpenFlags {\r\n            RTLD_NOW = 2,\r\n        }\r\n        [DllImport(\"dl\")]\r\n        static extern IntPtr dlopen(string path, DLOpenFlags flag);\r\n        [DllImport(\"python3.6m\")]\r\n        static extern void Py_SetProgramName(string name);\r\n    }\r\n}\r\n```\r\n(to get Python 3.6 installed into the specified folder using `brew`, run `brew install sashkab/python/python36`)\r\n\r\nThis happens despite `dlopen` successfully preloading `libpython3.6m.dylib` in the second line.\r\n\r\nTargetFramework is `netcoreapp2.0`","Url":"https://github.com/dotnet/coreclr/issues/22561","RelatedDescription":"Open issue \"DllNotFoundException after successful manual dlopen on MacOS\" (#22561)"},{"Id":"409144213","IsPullRequest":true,"CreatedAt":"2019-02-13T01:22:36","Actor":"BrianBohe","Number":"22543","RawContent":null,"Title":"Refactoring siVarLoc creation","State":"closed","Body":"This is an existing PR [https://github.com/dotnet/coreclr/pull/22472](https://github.com/dotnet/coreclr/pull/22472), with:\r\n1) A commit moving types from compiler.h to codegeninterface.h\r\n2) Commits encapsulating the creation of siVarLoc and removing code from CodeGen::genSetScopeInfo\r\n3) Commits adding some comments and changing & to * in existing functions. Those changes were reviews in the previous PR.","Url":"https://github.com/dotnet/coreclr/pull/22543","RelatedDescription":"Closed or merged PR \"Refactoring siVarLoc creation\" (#22543)"},{"Id":"409573613","IsPullRequest":true,"CreatedAt":"2019-02-13T00:59:11","Actor":"fadimounir","Number":"22560","RawContent":null,"Title":"[WIP] Enable some pinvokes - Do not merge","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22560","RelatedDescription":"Open PR \"[WIP] Enable some pinvokes - Do not merge\" (#22560)"},{"Id":"409562883","IsPullRequest":true,"CreatedAt":"2019-02-13T00:16:16","Actor":"wtgodbe","Number":"22559","RawContent":null,"Title":"Bump to 1.0.17 & mark as non-stable","State":"closed","Body":"CC @safern ","Url":"https://github.com/dotnet/coreclr/pull/22559","RelatedDescription":"Closed or merged PR \"Bump to 1.0.17 & mark as non-stable\" (#22559)"},{"Id":"409494825","IsPullRequest":true,"CreatedAt":"2019-02-12T23:46:39","Actor":"Dotnet-GitSync-Bot","Number":"22551","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/22551","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22551)"},{"Id":"409550898","IsPullRequest":true,"CreatedAt":"2019-02-12T23:32:57","Actor":"dotnet-maestro-bot","Number":"22558","RawContent":null,"Title":"Update CoreFx to servicing-27317-03 (release/uwp6.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22558","RelatedDescription":"Open PR \"Update CoreFx to servicing-27317-03 (release/uwp6.2)\" (#22558)"},{"Id":"409550874","IsPullRequest":true,"CreatedAt":"2019-02-12T23:32:53","Actor":"dotnet-maestro-bot","Number":"22557","RawContent":null,"Title":"Update CoreClr, CoreFx to servicing-27317-03, servicing-27317-03, respectively (release/2.1)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22557","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to servicing-27317-03, servicing-27317-03, respectively (release/2.1)\" (#22557)"},{"Id":"409539360","IsPullRequest":false,"CreatedAt":"2019-02-12T22:56:17","Actor":"erozenfeld","Number":"22556","RawContent":null,"Title":"Incorrect exception thrown when evaluating addition operands","State":"open","Body":"This method\r\n```\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static int foo(Test t, int i)\r\n    {\r\n        int x = t.f + 1 / i;\r\n        return x;\r\n    }\r\n```\r\nshould throw `NullReferenceException` when passed null, 0 (operands have to be evaluated left to right).\r\n\r\nInstead it's currently throwing `DivideByZeroException`.\r\n\r\nThe generated code:\r\n\r\n```\r\n; Assembly listing for method Test:foo(ref,int):int\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; Tier-0 compilation\r\n; compiler->opts.MinOpts() is true\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00    ] (  1,  1   )     ref  ->  [rbp+0x10]   class-hnd\r\n;  V01 arg1         [V01    ] (  1,  1   )     int  ->  [rbp+0x18]\r\n;# V02 OutArgs      [V02    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M14944_IG01:\r\n       55                   push     rbp\r\n       488BEC               mov      rbp, rsp\r\n       48894D10             mov      gword ptr [rbp+10H], rcx\r\n       895518               mov      dword ptr [rbp+18H], edx\r\n\r\nG_M14944_IG02:\r\n       488B4D10             mov      rcx, gword ptr [rbp+10H]\r\n       B801000000           mov      eax, 1\r\n       99                   cdq\r\n       F77D18               idiv     edx:eax, dword ptr [rbp+18H]\r\n       034108               add      eax, dword ptr [rcx+8]\r\n\r\nG_M14944_IG03:\r\n       5D                   pop      rbp\r\n       C3                   ret\r\n\r\n; Total bytes of code 29, prolog size 4 for method Test:foo(ref,int):int\r\n; ============================================================\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22556","RelatedDescription":"Open issue \"Incorrect exception thrown when evaluating addition operands\" (#22556)"},{"Id":"409117134","IsPullRequest":true,"CreatedAt":"2019-02-12T22:43:15","Actor":"erozenfeld","Number":"22542","RawContent":null,"Title":"Fix exception sets for indirections in value numbering.","State":"closed","Body":"fgValueNumberAddExceptionSetForIndirection had a bug\r\nwhere INDIR(ADD(x, <big_offset>)) had NullReferenceException(x)\r\nadded instead of NullReferenceException(ADD(x, <big_offset>)).\r\n\r\nFixes #20358.","Url":"https://github.com/dotnet/coreclr/pull/22542","RelatedDescription":"Closed or merged PR \"Fix exception sets for indirections in value numbering.\" (#22542)"},{"Id":"409525031","IsPullRequest":false,"CreatedAt":"2019-02-12T22:14:23","Actor":"kouvel","Number":"22555","RawContent":null,"Title":"Calls to virtual methods with generic parameters are slower with tiering","State":"open","Body":"See example:\r\nhttps://github.com/dotnet/coreclr/blob/8ad7d5e57e0eb0308453895693a996f5a93c8e08/tests/src/baseservices/TieredCompilation/TieredVtableMethodTests.cs#L107\r\n\r\nThe call uses an instantiating stub that does a direct call if the method's code entry point is stable at the time of stub generation, or an indirect call otherwise. With tiering, an indirect call is always used, and this indirect call doesn't seem to be easily prefetched, it's sort of like a dependent load. This could be fixed by making the instantiating stub use a direct call, making the call target backpatchable, and backpatching it when the entry point changes.","Url":"https://github.com/dotnet/coreclr/issues/22555","RelatedDescription":"Open issue \"Calls to virtual methods with generic parameters are slower with tiering\" (#22555)"},{"Id":"409522915","IsPullRequest":false,"CreatedAt":"2019-02-12T22:08:16","Actor":"kouvel","Number":"22554","RawContent":null,"Title":"Add perf tests for slot backpatching with tiering","State":"open","Body":"For PR https://github.com/dotnet/coreclr/pull/21292, for cases covered in https://github.com/dotnet/coreclr/blob/master/tests/src/baseservices/TieredCompilation/TieredVtableMethodTests.cs","Url":"https://github.com/dotnet/coreclr/issues/22554","RelatedDescription":"Open issue \"Add perf tests for slot backpatching with tiering\" (#22554)"},{"Id":"409510874","IsPullRequest":false,"CreatedAt":"2019-02-12T21:35:11","Actor":"gafter","Number":"22553","RawContent":null,"Title":"Arrays should not contribute to cyclic struct layout","State":"open","Body":"Consider the following code: \r\n\r\n```\r\nstruct ImmutableArray<T>\r\n{\r\n    private T[] _array;\r\n}\r\n\r\nstruct S\r\n{\r\n    internal readonly ImmutableArray<S> More;\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        F();\r\n    }\r\n\r\n    static void F()\r\n    {\r\n        var s = new S();\r\n    }\r\n}\r\n```\r\n\r\nThis code will compile with C# 6.0 and is legal according to the CLI spec.  The type definition is recursive but the layout of the struct is not because the field involved here is an array (just a reference).  The CLR is unable to handle this though and fails at runtime with a `TypeLoadException`\r\n\r\nSee also https://github.com/dotnet/coreclr/issues/4049 and https://github.com/dotnet/coreclr/issues/7957\r\n/cc @cston @jaredpar @jkotas \r\n","Url":"https://github.com/dotnet/coreclr/issues/22553","RelatedDescription":"Open issue \"Arrays should not contribute to cyclic struct layout\" (#22553)"},{"Id":"409496849","IsPullRequest":true,"CreatedAt":"2019-02-12T20:57:36","Actor":"dotnet-maestro-bot","Number":"22552","RawContent":null,"Title":"Update CoreClr, CoreFx to servicing-27317-07, servicing-27318-02, respectively (release/2.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22552","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to servicing-27317-07, servicing-27318-02, respectively (release/2.2)\" (#22552)"},{"Id":"409455537","IsPullRequest":true,"CreatedAt":"2019-02-12T19:15:04","Actor":"dotnet-maestro[bot]","Number":"22550","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19112.3\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22550","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#22550)"},{"Id":"409207047","IsPullRequest":false,"CreatedAt":"2019-02-12T18:26:30","Actor":"klesta490","Number":"22545","RawContent":null,"Title":"Full dump from CreateDump utility is huge","State":"closed","Body":"Simple few line .net core app that is full dumped using createdump utility has dump size  ~2,697,043,968  bytes, that is roughly 2.5GB. That is quite a lot for 10 line application :(. Our production dump, have 25GB+ even when consumed RAM shown in htop is 2.2 GB. \r\n\r\nAny advice? Minidumps are not an options because there are not visible method names from our assemblies.","Url":"https://github.com/dotnet/coreclr/issues/22545","RelatedDescription":"Closed issue \"Full dump from CreateDump utility is huge\" (#22545)"},{"Id":"409115937","IsPullRequest":true,"CreatedAt":"2019-02-12T18:20:36","Actor":"adityamandaleeka","Number":"22541","RawContent":null,"Title":"Enable portable fast alloc helpers on ARM64 Windows","State":"closed","Body":"Address https://github.com/dotnet/coreclr/issues/13053\r\n\r\nSee https://github.com/dotnet/coreclr/issues/13053#issuecomment-462595248 for more details.","Url":"https://github.com/dotnet/coreclr/pull/22541","RelatedDescription":"Closed or merged PR \"Enable portable fast alloc helpers on ARM64 Windows\" (#22541)"},{"Id":"409434971","IsPullRequest":false,"CreatedAt":"2019-02-12T18:17:10","Actor":"CarolEidt","Number":"22549","RawContent":null,"Title":"[Arm64] Loader/NativeLibs test failing","State":"open","Body":"This test:\r\n```\r\n   Loader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh\r\n```\r\nIs failing with:\r\n```\r\n   Unable to find an entry point named 'NativeFunc' in shared library 'FromNativePaths_lib\r\n```\r\nExample: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_ubuntu16.04_minopts_tst/113/testReport/","Url":"https://github.com/dotnet/coreclr/issues/22549","RelatedDescription":"Open issue \"[Arm64] Loader/NativeLibs test failing\" (#22549)"},{"Id":"409311840","IsPullRequest":false,"CreatedAt":"2019-02-12T18:02:16","Actor":"MohammadHamdyGhanem","Number":"22547","RawContent":null,"Title":"x64 app with references to x86 dlls","State":"closed","Body":"I send this in Roslyn repo, but comments say it maybe belong here:\r\nhttps://github.com/dotnet/roslyn/issues/33294\r\n\r\nx64 apps that references x86 dlls\r\nVS.NET 2019 Preview 2.2\r\nWin10 x64\r\n\r\nWhy can't Roslyn run x634 apps that have some x86 components?\r\nTo demonstrate that, I created a simple console app (compiled as X64), and added two trivial .net standard library projects to it, one compiled as x64, and the other as x86. When I run the app, it breaks with this message:\r\n>Your app has entered a break state, but no code is currently executing that is supported by the selected debug engine (e.g. only native runtime code is executing).\r\n\r\nand the exception window shows:\r\n> System.BadImageFormatException: 'Could not load file or assembly 'ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.'\r\n\r\nI don't understand why does this happen? Window 64bit it self can run 32bit apps! Why don't Roslyn have some bridge to run 32 bit dlls on 64bit aps? Even more: why can't it run 64 bit dlls on 32bit aps? these dlls are not true assembly code, and they are compiled by JIT compiler, so, is it possible to do something in this stage to bridge the gab?\r\n\r\nOtherwise, It will be better to give the programmer a hint from the begging that mixing different platforms in the same app will not work.\r\n \r\nIf I am the owner of the dll source code, sure I can fix such problems, but there are legacy .net dlls which are 32 bits, and they will force us to compile our new apps as x86 if we want to use them! This becomes worst if you have an x64 dll and an x86 dll that you don't have thier source codes and want to use them in same project!\r\n So, I think Roslyn should find a way to solve such problems. JIT can compile x86 to x64 native code if the main app is x64, and vice versa. If there is an unmanaged component, then VS.NET must force all app components to target the same platephorm as that unmanaged component.\r\n I don't have enough details about the differnce between x86 and x64 IL codes, but if the difference is just some header format or attribute value, then I think solving this incompatabily should be easy.\r\n\r\n> x64 process cannot run x86 code or dll\r\n\r\nCan't Roslyn create a temp process to run the x86 dll and make it communicat with the x64 process? In other words: Wrap the dll in a siutable process?\r\n I don't know if this can be done or be practical. I have no enough knowlage about this, but I faced such a prblem in practice once, and I had to compile to x86 to solve it. This can be impossible if I deal with both x86 and x64 dlls in same project and have not theie source codes.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/22547","RelatedDescription":"Closed issue \"x64 app with references to x86 dlls\" (#22547)"},{"Id":"409422538","IsPullRequest":true,"CreatedAt":"2019-02-12T17:46:33","Actor":"jkotas","Number":"22548","RawContent":null,"Title":"Test CI","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22548","RelatedDescription":"Open PR \"Test CI\" (#22548)"},{"Id":"409282104","IsPullRequest":true,"CreatedAt":"2019-02-12T17:10:11","Actor":"Dotnet-GitSync-Bot","Number":"22546","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/22546","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22546)"},{"Id":"409176555","IsPullRequest":true,"CreatedAt":"2019-02-12T08:28:27","Actor":"hoyosjs","Number":"22544","RawContent":null,"Title":"Use dependency flow for core-setup and corefx dependencies","State":"open","Body":"Starts to use Maestro++ subcriptions to update versions for:\r\nMicrosoft.NETCore.App\r\nMicrosoft.Private.CoreFx.NETCoreApp\r\nMicrosoft.NETCore.Platforms\r\n\r\nThe subscriptions are already running, we just need to add the packages to the version files with this PR.\r\n\r\nPackages that we still need to get into the new dependency flow:\r\n- PGO and IBC (I see some optimization data in the bar, but for some reason I can't query using \r\n- CoreCLR (Publishes versions to BAR, but to keep using ILasm with buildtools as we currently do, we require ILasmVersion.txt that's updated only on the old system)\r\n\r\nBuildtools will likely remain using the old update logic until it becomes deprecated.","Url":"https://github.com/dotnet/coreclr/pull/22544","RelatedDescription":"Open PR \"Use dependency flow for core-setup and corefx dependencies\" (#22544)"},{"Id":"409113733","IsPullRequest":true,"CreatedAt":"2019-02-12T04:21:54","Actor":"stephentoub","Number":"22540","RawContent":null,"Title":"Replace Win32Native.cs with Interop files","State":"open","Body":"- Replace Win32Native usage with existing Interop.* calls where they already existed\r\n- Moved Win32Native.* to their own files otherwise, and changed call sites\r\n- Deleted Win32Native.cs","Url":"https://github.com/dotnet/coreclr/pull/22540","RelatedDescription":"Open PR \"Replace Win32Native.cs with Interop files\" (#22540)"},{"Id":"409031339","IsPullRequest":true,"CreatedAt":"2019-02-12T02:33:51","Actor":"marek-safar","Number":"22536","RawContent":null,"Title":" Make Module partial to allow additional changed for Mono","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22536","RelatedDescription":"Closed or merged PR \" Make Module partial to allow additional changed for Mono\" (#22536)"},{"Id":"409076596","IsPullRequest":true,"CreatedAt":"2019-02-12T01:53:14","Actor":"echesakovMSFT","Number":"22539","RawContent":null,"Title":"Remove unnecessary ProjectReferences to CoreCLRTestLibrary","State":"open","Body":"Remove the **ProjectReference**-s to CoreCLRTestLibrary.csproj in those project files where the CoreCLRTestLibrary is not actually being used.\r\n\r\nEach **ProjectReference** item is ended up in **PrepareProjectReferences** target that creates unnecessary items.","Url":"https://github.com/dotnet/coreclr/pull/22539","RelatedDescription":"Open PR \"Remove unnecessary ProjectReferences to CoreCLRTestLibrary\" (#22539)"},{"Id":"409071649","IsPullRequest":false,"CreatedAt":"2019-02-12T01:43:12","Actor":"AaronRobinsonMSFT","Number":"22538","RawContent":null,"Title":"Remove MDAs related to Interop code","State":"open","Body":"See https://github.com/dotnet/coreclr/pull/22535\r\n\r\ncc @stephentoub @jkoritzinsky @jkotas ","Url":"https://github.com/dotnet/coreclr/issues/22538","RelatedDescription":"Open issue \"Remove MDAs related to Interop code\" (#22538)"},{"Id":"409062866","IsPullRequest":false,"CreatedAt":"2019-02-12T01:09:05","Actor":"fiigii","Number":"22537","RawContent":null,"Title":"[RyuJIT] Refactoring Vector128/256 intrinsic importation into architecture-specific files","State":"open","Body":"Currently, we have too much architecture-specific code that imports `Vector128/256` intrinsic in `importer.cpp`. They need to be refactored and moved into architecture-specific files (e.g., `hwintrinsicxarch.cpp`).","Url":"https://github.com/dotnet/coreclr/issues/22537","RelatedDescription":"Open issue \"[RyuJIT] Refactoring Vector128/256 intrinsic importation into architecture-specific files\" (#22537)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"409605132","IsPullRequest":true,"CreatedAt":"2019-02-13T05:20:46","Actor":"peterhuene","Number":"10767","RawContent":null,"Title":"Update branding to 2.2.105.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10767","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.105.\" (#10767)"},{"Id":"409631172","IsPullRequest":true,"CreatedAt":"2019-02-13T05:17:19","Actor":"wli3","Number":"10769","RawContent":null,"Title":"WIP test CI","State":"open","Body":"will an empty check in fail with the same reason as https://github.com/dotnet/cli/pull/10759 ?","Url":"https://github.com/dotnet/cli/pull/10769","RelatedDescription":"Open PR \"WIP test CI\" (#10769)"},{"Id":"408397299","IsPullRequest":true,"CreatedAt":"2019-02-13T05:02:07","Actor":"wli3","Number":"10742","RawContent":null,"Title":"Merge release/2.2.2xxto release/3.0.1xx","State":"closed","Body":"Please review carefully. I updated versions.props by diffing with build/versions.props which is quiet different in 2.2.2xxx vs 3.0.1xx","Url":"https://github.com/dotnet/cli/pull/10742","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xxto release/3.0.1xx\" (#10742)"},{"Id":"409628182","IsPullRequest":true,"CreatedAt":"2019-02-13T05:01:40","Actor":"wli3","Number":"10768","RawContent":null,"Title":"Merge release/2.2.2xxto release/3.0.1xx 2","State":"open","Body":"continue of https://github.com/dotnet/cli/pull/10742\r\nI updated versions.props by diffing with build/versions.props which is quiet different in 2.2.2xxx vs 3.0.1xx\r\n","Url":"https://github.com/dotnet/cli/pull/10768","RelatedDescription":"Open PR \"Merge release/2.2.2xxto release/3.0.1xx 2\" (#10768)"},{"Id":"409585021","IsPullRequest":true,"CreatedAt":"2019-02-13T03:06:45","Actor":"peterhuene","Number":"10764","RawContent":null,"Title":"Merge release/2.2.1xx-MSRC to release/2.2.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10764","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx-MSRC to release/2.2.1xx\" (#10764)"},{"Id":"409593309","IsPullRequest":true,"CreatedAt":"2019-02-13T02:51:01","Actor":"peterhuene","Number":"10766","RawContent":null,"Title":"Update branding to 2.1.505.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10766","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.505.\" (#10766)"},{"Id":"409591628","IsPullRequest":true,"CreatedAt":"2019-02-13T02:16:18","Actor":"dotnet-maestro[bot]","Number":"10765","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19112.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10765","RelatedDescription":"Open PR \"Update dependencies from dotnet/sdk\" (#10765)"},{"Id":"409548880","IsPullRequest":true,"CreatedAt":"2019-02-13T02:07:37","Actor":"dotnet-maestro-bot","Number":"10761","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to servicing-31150, servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10761","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to servicing-31150, servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#10761)"},{"Id":"409575304","IsPullRequest":false,"CreatedAt":"2019-02-13T01:06:43","Actor":"natemcmaster","Number":"10763","RawContent":null,"Title":"Use releases-index.json as the source for \"channels\" for dotnet-install.ps1/sh","State":"open","Body":"This file contains a list of latest stable releases: https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json.\r\n\r\nIt would be nice if `dotnet-install.ps1` could use this to automatically interpret `-Channel` into the exact version it should download.\r\n\r\nProposed usage:\r\n```\r\n./dotnet-install.ps1 -Channel 2.1 -Runtime aspnetcore\r\n```\r\n\r\nHow this might work:\r\nThe script could download https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json. `-Channel 2.1` maps to this entry:\r\n```js\r\n{\r\n    \"channel-version\": \"2.1\",\r\n\t// .... other stuff ...\r\n    \"releases.json\": \"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.1/releases.json\"\r\n}\r\n```\r\nNext, fetch https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.1/releases.json and read the data from this file to find the appropriate file.","Url":"https://github.com/dotnet/cli/issues/10763","RelatedDescription":"Open issue \"Use releases-index.json as the source for \"channels\" for dotnet-install.ps1/sh\" (#10763)"},{"Id":"409558869","IsPullRequest":true,"CreatedAt":"2019-02-13T00:01:23","Actor":"dotnet-bot","Number":"10762","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10762","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10762)"},{"Id":"409453739","IsPullRequest":true,"CreatedAt":"2019-02-12T23:37:07","Actor":"dotnet-maestro[bot]","Number":"10755","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10755","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10755)"},{"Id":"409533029","IsPullRequest":true,"CreatedAt":"2019-02-12T23:30:44","Actor":"dsplaisted","Number":"10758","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"Dependency updates from #10756, plus updating latest patch versions.","Url":"https://github.com/dotnet/cli/pull/10758","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#10758)"},{"Id":"409539682","IsPullRequest":true,"CreatedAt":"2019-02-12T22:57:18","Actor":"livarcocc","Number":"10760","RawContent":null,"Title":"Update license to match coreclr","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10760","RelatedDescription":"Open PR \"Update license to match coreclr\" (#10760)"},{"Id":"409538670","IsPullRequest":true,"CreatedAt":"2019-02-12T22:54:12","Actor":"wli3","Number":"10759","RawContent":null,"Title":"Remove package with --interactive","State":"open","Body":"a small change but a lot of loc files\r\n\r\ncontinue https://github.com/dotnet/cli/pull/10674\r\n\r\npart of https://github.com/dotnet/cli/issues/10529\r\n\r\n@nkolev92 please review","Url":"https://github.com/dotnet/cli/pull/10759","RelatedDescription":"Open PR \"Remove package with --interactive\" (#10759)"},{"Id":"409493926","IsPullRequest":true,"CreatedAt":"2019-02-12T22:50:13","Actor":"dotnet-maestro-bot","Number":"10756","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10756","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#10756)"},{"Id":"409524306","IsPullRequest":false,"CreatedAt":"2019-02-12T22:16:17","Actor":"alirezajm","Number":"10757","RawContent":null,"Title":"[Feature] Allow `dotnet add package` command to add a reference without setting the version ","State":"closed","Body":"Allow adding package references via the cli without it setting the version in the project file.\r\nThis is useful when a **Directory.build.targets** file is present and it is used to manage package versions.\r\n\r\n## Feature behavior\r\nConsidering there is a Directory.Build.targes file present, containing the following\r\n`<PackageReference Update=\"Microsoft.Orleans.Core\" Version=\"2.1.2\" />` \r\nrunning\r\n`dotnet add package Microsoft.Orleans.Core --use-targets-version`\r\nwill add\r\n `<PackageReference Include=\"Microsoft.Orleans.Core\" />` in the .csproj file.\r\nAll compatibility checks are intact.\r\n\r\nIf no reference is present in the .targets file, it should result in an error. Or maybe add an `<PackageReference Include=\"...` item.\r\n\r\nAdditional feature:\r\nEnable adding and removing packages to .targets file. This of course is a bit more complex as currently **dotnet add package** command adds/upgrades package references, which will not work quite well with .target files","Url":"https://github.com/dotnet/cli/issues/10757","RelatedDescription":"Closed issue \"[Feature] Allow `dotnet add package` command to add a reference without setting the version \" (#10757)"},{"Id":"409427560","IsPullRequest":true,"CreatedAt":"2019-02-12T21:05:29","Actor":"peterhuene","Number":"10754","RawContent":null,"Title":"Merge rel/1.1.0-MSRC to rel/1.1.0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10754","RelatedDescription":"Closed or merged PR \"Merge rel/1.1.0-MSRC to rel/1.1.0\" (#10754)"},{"Id":"409185952","IsPullRequest":false,"CreatedAt":"2019-02-12T17:54:56","Actor":"JoasE","Number":"10751","RawContent":null,"Title":"Azure Functions V2.0 with EntityFramework Core unable to create migration","State":"closed","Body":"## Steps to reproduce\r\n1. Create a new Azure Functions V2.0 project in visual studio\r\n2. Install:\r\n   - Microsoft.EntityFrameworkCore v2.2.1\r\n   - Microsoft.EntityFrameworkCore.Design v2.2.1\r\n   - Microsoft.EntityFrameworkCore.SqlServer v2.2.1\r\n3. Add a model to the project (EG: `User`)\r\n4. Add a `DbContext` to the project and include a `DbSet<User>`\r\n5. Open the project in your favorite CLI.\r\n6. Type: `dotnet ef migrations add Initial --verbose`\r\n\r\nRepro repo: https://github.com/JoasE/ReproDotnetEFError\r\n\r\n## Expected  behavior\r\nA migration is created.\r\n\r\n## Actual behavior\r\n```\r\n>dotnet ef migrations add Initial --verbose\r\nUsing project 'C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\TestApp.csproj'.\r\nUsing startup project 'C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\TestApp.csproj'.\r\nWriting 'C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\obj\\TestApp.csproj.EntityFrameworkCore.targets'...\r\ndotnet msbuild /target:GetEFProjectMetadata /property:EFProjectMetadataFile=C:\\Users\\Joas\\AppData\\Local\\Temp\\tmpE710.tmp /verbosity:quiet /nologo C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\TestApp.csproj\r\nWriting 'C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\obj\\TestApp.csproj.EntityFrameworkCore.targets'...\r\ndotnet msbuild /target:GetEFProjectMetadata /property:EFProjectMetadataFile=C:\\Users\\Joas\\AppData\\Local\\Temp\\tmpEABA.tmp /verbosity:quiet /nologo C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\TestApp.csproj\r\ndotnet build C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\TestApp.csproj /verbosity:quiet /nologo\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.14\r\ndotnet exec --depsfile C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\bin\\Debug\\netcoreapp2.1\\TestApp.deps.json --additionalprobingpath C:\\Users\\Joas\\.nuget\\packages --additionalprobingpath \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\" --runtimeconfig C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\bin\\Debug\\netcoreapp2.1\\TestApp.runtimeconfig.json \"C:\\Program Files\\dotnet\\sdk\\2.2.103\\DotnetTools\\dotnet-ef\\2.2.1\\tools\\netcoreapp2.2\\any\\tools\\netcoreapp2.0\\any\\ef.dll\" migrations add Initial --assembly C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\bin\\Debug\\netcoreapp2.1\\TestApp.dll --startup-assembly C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\bin\\Debug\\netcoreapp2.1\\TestApp.dll --project-dir C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp\\ --language C# --working-dir C:\\Users\\Joas\\source\\repos\\TestApp\\TestApp --verbose --root-namespace TestApp\r\nError:\r\n  An assembly specified in the application dependencies manifest (TestApp.deps.json) was not found:\r\n    package: 'TestApp', version: '1.0.0'\r\n    path: 'TestApp.dll'\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10751","RelatedDescription":"Closed issue \"Azure Functions V2.0 with EntityFramework Core unable to create migration\" (#10751)"},{"Id":"408907694","IsPullRequest":true,"CreatedAt":"2019-02-12T17:52:39","Actor":"livarcocc","Number":"10749","RawContent":null,"Title":"Updating Roslyn to 3.0.0-beta4-19108-04","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10749","RelatedDescription":"Closed or merged PR \"Updating Roslyn to 3.0.0-beta4-19108-04\" (#10749)"},{"Id":"408908069","IsPullRequest":true,"CreatedAt":"2019-02-12T17:52:17","Actor":"livarcocc","Number":"10750","RawContent":null,"Title":"Updating Roslyn to 3.0.0-beta4-19108-04 for 2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10750","RelatedDescription":"Closed or merged PR \"Updating Roslyn to 3.0.0-beta4-19108-04 for 2.2.2xx\" (#10750)"},{"Id":"409290374","IsPullRequest":true,"CreatedAt":"2019-02-12T13:36:53","Actor":"dotnet-maestro[bot]","Number":"10753","RawContent":null,"Title":"Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19111.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10753","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/templating\" (#10753)"},{"Id":"409286323","IsPullRequest":true,"CreatedAt":"2019-02-12T13:26:31","Actor":"dotnet-maestro[bot]","Number":"10752","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19111.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10752","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10752)"},{"Id":"408534530","IsPullRequest":true,"CreatedAt":"2019-02-11T17:12:28","Actor":"dotnet-maestro[bot]","Number":"10748","RawContent":null,"Title":"Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19103.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19103.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10748","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/clicommandlineparser\" (#10748)"},{"Id":"408404307","IsPullRequest":true,"CreatedAt":"2019-02-10T19:05:48","Actor":"wli3","Number":"10745","RawContent":null,"Title":"Update sdk 2.2.200-preview-63809-01","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10745","RelatedDescription":"Closed or merged PR \"Update sdk 2.2.200-preview-63809-01\" (#10745)"},{"Id":"408429614","IsPullRequest":true,"CreatedAt":"2019-02-10T13:34:39","Actor":"dotnet-maestro[bot]","Number":"10747","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19108.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19109.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10747","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10747)"},{"Id":"408429587","IsPullRequest":true,"CreatedAt":"2019-02-09T13:31:47","Actor":"dotnet-maestro[bot]","Number":"10746","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10746","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10746)"},{"Id":"408399380","IsPullRequest":false,"CreatedAt":"2019-02-09T05:04:59","Actor":"mairaw","Number":"10744","RawContent":null,"Title":"dotnet clean also supports solution files","State":"open","Body":"## Steps to reproduce\r\n`dotnet clean --help` says that the argument is a project but it seems that the command accepts solution as well.\r\nRunning on a folder with no solution or project gives the following error message:\r\n`MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.`\r\n\r\n## Expected  behavior\r\n`dotnet clean --help` would say it supports solution files as well.\r\n\r\n## Actual behavior\r\n`dotnet clean --help` says it supports project files.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10744","RelatedDescription":"Open issue \"dotnet clean also supports solution files\" (#10744)"},{"Id":"408399081","IsPullRequest":false,"CreatedAt":"2019-02-09T05:00:17","Actor":"mairaw","Number":"10743","RawContent":null,"Title":"dotnet migrate --help says \"Migration failed.\" before printing help","State":"open","Body":"## Steps to reproduce\r\ndotnet migrate --help\r\n\r\n## Expected  behavior\r\nOnly help would be displayed.\r\n\r\n## Actual behavior\r\nMessage \"Migration failed.\" + help is displayed.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download","Url":"https://github.com/dotnet/cli/issues/10743","RelatedDescription":"Open issue \"dotnet migrate --help says \"Migration failed.\" before printing help\" (#10743)"},{"Id":"408373704","IsPullRequest":true,"CreatedAt":"2019-02-09T02:40:22","Actor":"wli3","Number":"10741","RawContent":null,"Title":"Update to Sdk.2.1.600-preview-63808-04.","State":"closed","Body":"https://github.com/dotnet/cli/issues/10628","Url":"https://github.com/dotnet/cli/pull/10741","RelatedDescription":"Closed or merged PR \"Update to Sdk.2.1.600-preview-63808-04.\" (#10741)"},{"Id":"408348560","IsPullRequest":true,"CreatedAt":"2019-02-09T00:48:36","Actor":"livarcocc","Number":"10740","RawContent":null,"Title":"Updating branding for preview3 and adding a build trigger to the release branch","State":"closed","Body":"Updating branding for preview3 and adding a build trigger to the release branch.\r\n","Url":"https://github.com/dotnet/cli/pull/10740","RelatedDescription":"Closed or merged PR \"Updating branding for preview3 and adding a build trigger to the release branch\" (#10740)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"408526522","IsPullRequest":false,"CreatedAt":"2019-02-10T11:39:52","Actor":"jmroyb","Number":"1066","RawContent":null,"Title":"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?","State":"open","Body":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers","Url":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Open issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066)"},{"Id":"408429514","IsPullRequest":false,"CreatedAt":"2019-02-09T13:00:38","Actor":"kaby76","Number":"1065","RawContent":null,"Title":"CI build status log is not public","State":"open","Body":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work.","Url":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Open issue \"CI build status log is not public\" (#1065)"},{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"409616997","IsPullRequest":true,"CreatedAt":"2019-02-13T04:47:24","Actor":"stephentoub","Number":"35284","RawContent":null,"Title":"Fix argument name in GCHandleTests","State":"closed","Body":"A GCHandle test is validating that an argument exception contains a null parameter name.  That's been fixed in coreclr, so this test will start to fail when we ingest a new coreclr.  For now, just removing the null validation, as it's not useful.","Url":"https://github.com/dotnet/corefx/pull/35284","RelatedDescription":"Closed or merged PR \"Fix argument name in GCHandleTests\" (#35284)"},{"Id":"409618771","IsPullRequest":true,"CreatedAt":"2019-02-13T04:17:50","Actor":"dotnet-maestro-bot","Number":"35286","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27413-00, beta-27413-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35286","RelatedDescription":"Open PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27413-00, beta-27413-00, respectively (master)\" (#35286)"},{"Id":"409618538","IsPullRequest":true,"CreatedAt":"2019-02-13T04:16:37","Actor":"stephentoub","Number":"35285","RawContent":null,"Title":"Add a few more Parse_Subspan_Success inline datas","State":"open","Body":"Addressing PR feedback that I missed.","Url":"https://github.com/dotnet/corefx/pull/35285","RelatedDescription":"Open PR \"Add a few more Parse_Subspan_Success inline datas\" (#35285)"},{"Id":"409611423","IsPullRequest":false,"CreatedAt":"2019-02-13T03:41:40","Actor":"geoffkizer","Number":"35283","RawContent":null,"Title":"SslStream.AuthenticateAsServer/ClientAsync methods should default CancellationToken to default(CancellationToken)","State":"open","Body":"The new Authenticate overloads on SslStream take a CancellationToken, but don't provide a default value for this. These should default to default(CancellationToken), i.e. CancellationToken.None.\r\n\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L425\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L390\r\n","Url":"https://github.com/dotnet/corefx/issues/35283","RelatedDescription":"Open issue \"SslStream.AuthenticateAsServer/ClientAsync methods should default CancellationToken to default(CancellationToken)\" (#35283)"},{"Id":"409590432","IsPullRequest":true,"CreatedAt":"2019-02-13T02:12:31","Actor":"dotnet-maestro-bot","Number":"35282","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @stephentoub\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35282","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#35282)"},{"Id":"409562663","IsPullRequest":true,"CreatedAt":"2019-02-13T02:12:04","Actor":"davidsh","Number":"35280","RawContent":null,"Title":"Add simple http Windows auth tests using loopback server","State":"closed","Body":"I added this test to help get familiar with the new GenericLoopbackServer\r\ntest pattern as well as use the new SkipTestException() ability.\r\n\r\nThe test is not an end-to-end test. It simply validates that the client is able\r\nto begin the multi-leg Windows auth handshake and send the initial Authorization\r\nheader.\r\n\r\nIn addition, once https://github.com/dotnet/core-eng/issues/5135 is completed,\r\nthe 'IsNtlmInstalled' condition will always be true for the CI machines. Thus,\r\nwe will get better test coverage for Windows auth scenarios.\r\n\r\nContributes to #34878","Url":"https://github.com/dotnet/corefx/pull/35280","RelatedDescription":"Closed or merged PR \"Add simple http Windows auth tests using loopback server\" (#35280)"},{"Id":"409550982","IsPullRequest":true,"CreatedAt":"2019-02-13T02:08:51","Actor":"dotnet-maestro-bot","Number":"35276","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-27317-03, servicing-27317-03, stable, respectively (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35276","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to servicing-27317-03, servicing-27317-03, stable, respectively (release/2.1)\" (#35276)"},{"Id":"409494711","IsPullRequest":true,"CreatedAt":"2019-02-13T02:08:12","Actor":"dotnet-maestro-bot","Number":"35273","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-27317-07, servicing-27318-02, stable, respectively (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35273","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to servicing-27317-07, servicing-27318-02, stable, respectively (release/2.2)\" (#35273)"},{"Id":"409508679","IsPullRequest":true,"CreatedAt":"2019-02-13T01:58:09","Actor":"Dotnet-GitSync-Bot","Number":"35275","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @sywhang","Url":"https://github.com/dotnet/corefx/pull/35275","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#35275)"},{"Id":"409562693","IsPullRequest":true,"CreatedAt":"2019-02-13T00:15:32","Actor":"wtgodbe","Number":"35281","RawContent":null,"Title":"Reset packages.builds for 1.0.15","State":"closed","Body":"CC @safern ","Url":"https://github.com/dotnet/corefx/pull/35281","RelatedDescription":"Closed or merged PR \"Reset packages.builds for 1.0.15\" (#35281)"},{"Id":"409562621","IsPullRequest":true,"CreatedAt":"2019-02-13T00:15:07","Actor":"wtgodbe","Number":"35279","RawContent":null,"Title":"Update branding for preview4","State":"open","Body":"CC @dagood @danmosemsft @mmitche @leecow","Url":"https://github.com/dotnet/corefx/pull/35279","RelatedDescription":"Open PR \"Update branding for preview4\" (#35279)"},{"Id":"409552145","IsPullRequest":true,"CreatedAt":"2019-02-12T23:37:17","Actor":"EgorBo","Number":"35278","RawContent":null,"Title":"Allow interface names in IPv6 link-local addresses","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/27529\r\nI tried to re-use `IPAddress`-related stuff in mono and our `Dns` implementation doesn't hesitate to use `fe80::e8b0:63ff:fee8:6b3b%awdl0`-like format.\r\n\r\nE.g. if I type `ipconfig |grep inet` in my terminal on OSX I get:\r\n```\r\negor-macbook:System egorb$ ifconfig |grep inet\r\n\tinet 127.0.0.1 netmask 0xff000000\r\n\tinet6 ::1 prefixlen 128\r\n\tinet6 fe80::1%lo0 prefixlen 64 scopeid 0x1\r\n\tinet 192.168.100.3 netmask 0xffffff00 broadcast 192.168.100.255\r\n\tinet6 fe80::e8b0:63ff:fee8:6b3b%awdl0 prefixlen 64 scopeid 0x7\r\n\tinet6 fe80::8729:7785:ecd8:ed6%utun0 prefixlen 64 scopeid 0xb\r\n\tinet6 fe80::50:41ff:fe00:101%gpd0 prefixlen 64 scopeid 0xc\r\n\tinet 100.64.118.134 netmask 0xffffffff broadcast 100.64.118.134\r\n```\r\nSo I expect `IPAddress.Parse(\"fe80::e8b0:63ff:fee8:6b3b%awdl0\").ScopeId` to return `0x7` instead of a `FormatException` or at least `0` (ignore that part).\r\n\r\nJava supports this format (`Inet6Address.getByName(\"fe80::e8b0:63ff:fee8:6b3b%awdl0\")`) but throws `java.net.UnknownHostException: no such interface fakei123` for unknown interfaces.\r\n\r\n/cc @marek-safar \r\nAlso cc @MarcoRossignoli who worked on https://github.com/dotnet/corefx/issues/28863","Url":"https://github.com/dotnet/corefx/pull/35278","RelatedDescription":"Open PR \"Allow interface names in IPv6 link-local addresses\" (#35278)"},{"Id":"409551018","IsPullRequest":true,"CreatedAt":"2019-02-12T23:33:26","Actor":"dotnet-maestro-bot","Number":"35277","RawContent":null,"Title":"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-03131-06, uwp62-27322-01, servicing-27317-03, rel-27408-00, rel-27408-00, respectively (release/uwp6.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35277","RelatedDescription":"Open PR \"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-03131-06, uwp62-27322-01, servicing-27317-03, rel-27408-00, rel-27408-00, respectively (release/uwp6.2)\" (#35277)"},{"Id":"409416395","IsPullRequest":false,"CreatedAt":"2019-02-12T22:05:47","Actor":"livarcocc","Number":"35263","RawContent":null,"Title":"dotnet-core MyGet gallery flags old version of package as latest","State":"closed","Body":"@livarcocc commented on [Tue Feb 12 2019](https://github.com/dotnet/roslyn/issues/33324)\n\n@KexyBiscuit commented on [Mon Feb 11 2019](https://github.com/dotnet/core-sdk/issues/466)\n\nFor example, [Microsoft.CSharp](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.CSharp) tells me that 4.6.0-preview1-27018-01 is the latest, but 4.6.0-preview.19111.6 is published today, why isn't that the latest? I wonder if there's some rule preventing ones from downloading the latest bit of these package, or it's just a operation mistake.\n\n---\n\n@livarcocc commented on [Tue Feb 12 2019](https://github.com/dotnet/core-sdk/issues/466#issuecomment-462846028)\n\nMoving this to Roslyn. We don't produce this package on the SDK.\n\n\n\n","Url":"https://github.com/dotnet/corefx/issues/35263","RelatedDescription":"Closed issue \"dotnet-core MyGet gallery flags old version of package as latest\" (#35263)"},{"Id":"409452607","IsPullRequest":false,"CreatedAt":"2019-02-12T21:46:17","Actor":"fillmore","Number":"35268","RawContent":null,"Title":"ManagedWebSocket: Inconsistent check in EnsureBufferContainsAsync?","State":"closed","Body":"In [ManagedWebSocket.cs](https://github.com/dotnet/corefx/blob/release/3.0/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs), [Line 1194](https://github.com/dotnet/corefx/blob/release/3.0/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs#L1194) has assertion that _numRead_ should be non-negative. But in following [Line 1195](https://github.com/dotnet/corefx/blob/release/3.0/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs#L1195), it would throw expcetion when _numRead_ is ZERO. \r\n```\r\n\tDebug.Assert(**numRead >= 0**, $\"Expected non-negative bytes read, got {numRead}\");\r\n\tif (**numRead <= 0**)\r\n\t{\r\n\t\tThrowIfEOFUnexpected(throwOnPrematureClosure);\r\n\t\tbreak;\r\n\t}\r\n```","Url":"https://github.com/dotnet/corefx/issues/35268","RelatedDescription":"Closed issue \"ManagedWebSocket: Inconsistent check in EnsureBufferContainsAsync?\" (#35268)"},{"Id":"409504053","IsPullRequest":true,"CreatedAt":"2019-02-12T21:29:39","Actor":"mmitche","Number":"35274","RawContent":null,"Title":"Fix triggers to include 3.0","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/35274","RelatedDescription":"Closed or merged PR \"Fix triggers to include 3.0\" (#35274)"},{"Id":"409455239","IsPullRequest":true,"CreatedAt":"2019-02-12T21:27:17","Actor":"Dotnet-GitSync-Bot","Number":"35270","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corefx/pull/35270","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35270)"},{"Id":"409489611","IsPullRequest":true,"CreatedAt":"2019-02-12T20:43:29","Actor":"dotnet-maestro[bot]","Number":"35272","RawContent":null,"Title":"Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview3-27412-72\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview3-27412-72\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview3-27412-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35272","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/coreclr\" (#35272)"},{"Id":"409287954","IsPullRequest":true,"CreatedAt":"2019-02-12T19:30:08","Actor":"dotnet-maestro[bot]","Number":"35259","RawContent":null,"Title":"Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27411-72\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27411-72\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27411-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35259","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/coreclr\" (#35259)"},{"Id":"409457202","IsPullRequest":true,"CreatedAt":"2019-02-12T19:19:18","Actor":"dotnet-maestro[bot]","Number":"35271","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.Build.Tasks.Configuration - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.19112.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.CoreFxTesting - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.19112.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19112.3\r\n- Microsoft.DotNet.SourceRewriter - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.19112.3\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35271","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#35271)"},{"Id":"409294519","IsPullRequest":true,"CreatedAt":"2019-02-12T19:04:27","Actor":"Dotnet-GitSync-Bot","Number":"35261","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corefx/pull/35261","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#35261)"},{"Id":"409452925","IsPullRequest":true,"CreatedAt":"2019-02-12T19:03:09","Actor":"stephentoub","Number":"35269","RawContent":null,"Title":"Fix race condition in DiagnosticSourceEventSource","State":"open","Body":"If multiple threads all try to write different objects at the same time, PropertySpec.Fetch can manifest a race condition that results in potentially trying to cast one call's object to another call's type.  The fix is to allow for atomically storing the cached data, and using a local to ensure that a calling thread's view is consistent.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/31322\r\ncc: @jorive, @vancem","Url":"https://github.com/dotnet/corefx/pull/35269","RelatedDescription":"Open PR \"Fix race condition in DiagnosticSourceEventSource\" (#35269)"},{"Id":"409452271","IsPullRequest":true,"CreatedAt":"2019-02-12T19:01:21","Actor":"benaadams","Number":"35267","RawContent":null,"Title":"Schedule completion prior to pooling segments","State":"open","Body":"`BufferSegment:ResetMemory()` is not an inexpensive operation (blanking 80 bytes + returning data to pool); however it doesn't need to be done under the Pipe's reader/writer sync lock.\r\n\r\nAlso the scheduling/marking of completion can happen prior to the Segments being reset and returned to the pool, allowing for lower latency.\r\n\r\nThis change changes the segment pool to be lock-free so the whole pipe doesn't need to be locked to return them; interleaves ResetMemory and return; eagerly making the BufferSegments available and triggers completion prior to returning the segments.\r\n\r\n/cc @davidfowl @pakrym @jkotalik","Url":"https://github.com/dotnet/corefx/pull/35267","RelatedDescription":"Open PR \"Schedule completion prior to pooling segments\" (#35267)"},{"Id":"409438613","IsPullRequest":false,"CreatedAt":"2019-02-12T18:26:43","Actor":"wfurt","Number":"35266","RawContent":null,"Title":"HTTP2: add missing tests for connection limits and header processing","State":"open","Body":"This is mostly reminder to add tests for #31294, #34377 and #35164.\r\n\r\nThere are different ways how to do that but it may be most practical to convert existing test when new generic loopback is ready. #34345\r\nFor example SendAsync_UserAgent_CorrectlyWritten test exist but it will not run with HTTP2.\r\nWe should find or add tests with invalid characters and long values. ","Url":"https://github.com/dotnet/corefx/issues/35266","RelatedDescription":"Open issue \"HTTP2: add missing tests for connection limits and header processing\" (#35266)"},{"Id":"409436535","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:05","Actor":"leecow","Number":"35265","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/corefx/issues/35265","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#35265)"},{"Id":"409416757","IsPullRequest":true,"CreatedAt":"2019-02-12T18:01:40","Actor":"filipnavara","Number":"35264","RawContent":null,"Title":"NO MERGE: Dummy PR to check Azure Pipelines triggers","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/35264","RelatedDescription":"Closed or merged PR \"NO MERGE: Dummy PR to check Azure Pipelines triggers\" (#35264)"},{"Id":"409296122","IsPullRequest":true,"CreatedAt":"2019-02-12T14:50:53","Actor":"dotnet-maestro[bot]","Number":"35262","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19112.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35262","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#35262)"},{"Id":"409294494","IsPullRequest":true,"CreatedAt":"2019-02-12T14:47:13","Actor":"dotnet-maestro[bot]","Number":"35260","RawContent":null,"Title":"Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27412-2\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27412-2\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27412-2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35260","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/core-setup\" (#35260)"},{"Id":"409240558","IsPullRequest":true,"CreatedAt":"2019-02-12T13:17:56","Actor":"Dotnet-GitSync-Bot","Number":"35258","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose","Url":"https://github.com/dotnet/corefx/pull/35258","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35258)"},{"Id":"409199296","IsPullRequest":false,"CreatedAt":"2019-02-12T09:27:47","Actor":"tmds","Number":"35257","RawContent":null,"Title":"api suggestion: Process.Kill shouldn't throw when the process has exited","State":"open","Body":"Currently, `Process.Kill` throws when the process has already exited.\r\n\r\nPerhaps the method should noop if the process has already exited.\r\n\r\nIt avoids a try-catch to check (and ignore) the 'has already terminated' case.\r\nAnd it avoids unexpected exceptions if the user forgot to add the try-catch.","Url":"https://github.com/dotnet/corefx/issues/35257","RelatedDescription":"Open issue \"api suggestion: Process.Kill shouldn't throw when the process has exited\" (#35257)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"409603765","IsPullRequest":false,"CreatedAt":"2019-02-13T03:07:14","Actor":"davkean","Number":"33345","RawContent":null,"Title":"Code fix for \"use pattern matching\" should be removing blanks lines it introduces","State":"open","Body":"Unlike other code fixes, \"use pattern matching\" doesn't remove blank lines when it removes an assignment:\r\n\r\n``` C#\r\n                        var receivingData = this.receiveBuffer[i] as IProjectVersionedValue<IProjectSubscriptionUpdate>;\r\n\r\n                        // We should prevent processing the same delta again.\r\n                        if (receivingData != null && receivingData.DataSourceVersions == resultUpdate.DataSourceVersions && receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)\r\n                        {\r\n                            this.receiveBuffer[i] = this.processingBuffer[i];\r\n                        }\r\n```\r\n\r\nExpected:\r\n\r\n``` C# \r\n                 lock (this.SyncObject)\r\n                 {\r\n                        // We should prevent processing the same delta again.\r\n                        if (this.receiveBuffer[i] is IProjectVersionedValue<IProjectSubscriptionUpdate> receivingData && receivingData.DataSourceVersions == resultUpdate.DataSourceVersions && receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)\r\n                        {\r\n                            this.receiveBuffer[i] = this.processingBuffer[i];\r\n                        }\r\n                 }\r\n```\r\n\r\nActual:\r\n\r\n``` C#\r\n                    lock (this.SyncObject)\r\n                    {\r\n\r\n                        // We should prevent processing the same delta again.\r\n                        if (this.receiveBuffer[i] is IProjectVersionedValue<IProjectSubscriptionUpdate> receivingData && receivingData.DataSourceVersions == resultUpdate.DataSourceVersions && receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)\r\n                        {\r\n                            this.receiveBuffer[i] = this.processingBuffer[i];\r\n                        }\r\n                    }\r\n```\r\n\r\nHit in: https://devdiv.visualstudio.com/DevDiv/_git/CPS/pullrequest/164018?path=%2Fsrc%2FMicrosoft.VisualStudio.ProjectSystem%2FCore%2FDataflow%2FSyncLinkToLink.cs&discussionId=1641980&_a=files.\r\n\r\nMake sure it handles both the case where code _and_ trivia follows it.","Url":"https://github.com/dotnet/roslyn/issues/33345","RelatedDescription":"Open issue \"Code fix for \"use pattern matching\" should be removing blanks lines it introduces\" (#33345)"},{"Id":"409558530","IsPullRequest":true,"CreatedAt":"2019-02-13T02:00:10","Actor":"dotnet-bot","Number":"33339","RawContent":null,"Title":"Merge dev16.0 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33339","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to master\" (#33339)"},{"Id":"409584688","IsPullRequest":false,"CreatedAt":"2019-02-13T01:47:16","Actor":"gafter","Number":"33344","RawContent":null,"Title":"NullableWalker fails to update type for a default expression","State":"open","Body":"In the following code in `NullableWalker`, the result tuple type is not updated to reflect that some of its element types may contain null.\r\n\r\n``` c#\r\n        public override BoundNode VisitDefaultExpression(BoundDefaultExpression node)\r\n        {\r\n            Debug.Assert(!this.IsConditionalState);\r\n\r\n            var result = base.VisitDefaultExpression(node);\r\n            TypeSymbol type = node.Type;\r\n            if (EmptyStructTypeCache.IsTrackableStructType(type))\r\n            {\r\n                int slot = GetOrCreateObjectCreationPlaceholderSlot(node);\r\n                if (slot > 0)\r\n                {\r\n                    this.State[slot] = NullableFlowState.NotNull;\r\n                    InheritNullableStateOfTrackableStruct(type, slot, valueSlot: -1, isDefaultValue: true, isByRefTarget: false, slotWatermark: GetSlotWatermark());\r\n                }\r\n            }\r\n\r\n            // PROTOTYPE(ngafter): this fails to produce an updated tuple type for a default expression\r\n            // (with nullable element types where those element types were capable of containing null)\r\n            _resultType = TypeWithState.ForType(type);\r\n            return result;\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33344","RelatedDescription":"Open issue \"NullableWalker fails to update type for a default expression\" (#33344)"},{"Id":"409558615","IsPullRequest":true,"CreatedAt":"2019-02-13T01:30:19","Actor":"dotnet-bot","Number":"33340","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33340","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33340)"},{"Id":"409558632","IsPullRequest":true,"CreatedAt":"2019-02-13T01:30:13","Actor":"dotnet-bot","Number":"33341","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33341","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#33341)"},{"Id":"409561829","IsPullRequest":true,"CreatedAt":"2019-02-13T00:12:10","Actor":"agocke","Number":"33343","RawContent":null,"Title":"Enable analyzers in CoreCLR on Mac","State":"open","Body":"Fixes #23736","Url":"https://github.com/dotnet/roslyn/pull/33343","RelatedDescription":"Open PR \"Enable analyzers in CoreCLR on Mac\" (#33343)"},{"Id":"409558651","IsPullRequest":true,"CreatedAt":"2019-02-13T00:00:41","Actor":"dotnet-bot","Number":"33342","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33342","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#33342)"},{"Id":"409558507","IsPullRequest":true,"CreatedAt":"2019-02-13T00:00:08","Actor":"dotnet-bot","Number":"33338","RawContent":null,"Title":"Merge dev15.9.x to dev16.0-preview3","State":"open","Body":"\nThis is an automatically generated pull request from dev15.9.x into dev16.0-preview3.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.9.x-to-dev16.0-preview3\ngit reset --hard upstream/dev16.0-preview3\ngit merge upstream/dev15.9.x\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev15.9.x-to-dev16.0-preview3 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33338","RelatedDescription":"Open PR \"Merge dev15.9.x to dev16.0-preview3\" (#33338)"},{"Id":"409556662","IsPullRequest":false,"CreatedAt":"2019-02-12T23:53:31","Actor":"ivanbasov","Number":"33337","RawContent":null,"Title":"workspace.WithDebuggerCompletionOptions should not be called in completion. Workspace should handle this internally","State":"open","Body":"https://github.com/dotnet/roslyn/pull/33269/files#diff-95ca19432a9f170fb70acb10dfd39f13R261\r\n\r\nCode like \r\n` _isDebuggerTextView ? workspace.Options.WithDebuggerCompletionOptions() : workspace.Options;`\r\nshould not be executed in completion code (CompletionSource.cs or Controller.cs)\r\n\r\n@jasonmalinowski wrote:\r\n\r\n> This is fine especially since it's mirroring what we're already doing in the Controller, but it's possible for a workspace to override options so workspace.Options does the right thing without having to couple these components together.\r\n\r\n> Want to file a bug on this (or just fix it in master?) This will probably also remove @Amadeusz Wieczorek's questions about \"why is this magic\" because it doesn't have to be magic here.","Url":"https://github.com/dotnet/roslyn/issues/33337","RelatedDescription":"Open issue \"workspace.WithDebuggerCompletionOptions should not be called in completion. Workspace should handle this internally\" (#33337)"},{"Id":"409555595","IsPullRequest":true,"CreatedAt":"2019-02-12T23:49:43","Actor":"jaredpar","Number":"33336","RawContent":null,"Title":"Nullable tuple constraints in method bodies","State":"open","Body":"This change enforces nullable validation on tuple type parameters,\r\nassuming a custom defined tuple, inside of method bodies.\r\n\r\ncloses #33303","Url":"https://github.com/dotnet/roslyn/pull/33336","RelatedDescription":"Open PR \"Nullable tuple constraints in method bodies\" (#33336)"},{"Id":"409536536","IsPullRequest":false,"CreatedAt":"2019-02-12T23:28:02","Actor":"cston","Number":"33332","RawContent":null,"Title":"Warning reported for [CallerMemberName] argument default value","State":"closed","Body":"A warning is reported for the `[CallerMemberName]` argument default value although the argument could be considered non-null.\r\n```C#\r\n#nullable enable\r\n\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n    static void F([CallerMemberName]string name = null) // warning: converting null literal\r\n    {\r\n    }\r\n}\r\n```\r\nReported by @onovotny.","Url":"https://github.com/dotnet/roslyn/issues/33332","RelatedDescription":"Closed issue \"Warning reported for [CallerMemberName] argument default value\" (#33332)"},{"Id":"409545278","IsPullRequest":false,"CreatedAt":"2019-02-12T23:14:42","Actor":"kendrahavens","Number":"33335","RawContent":null,"Title":"Check expression for null","State":"open","Body":"Customer request copying here.\r\n\r\n**Version Used**: Visual Studio 2017\r\n\r\n**Steps to Reproduce**:\r\n\r\n> 1. Have a potential nullreferenceexception \r\n![image](https://user-images.githubusercontent.com/8293542/52672308-5a081600-2ed2-11e9-9ef9-6d792c343f15.png)\r\n\r\n> 2. The variable attrib can be null and attrib.Value throws NullReferenceException. Resharper prompts an option to add null check or use ?. to avoid this exception.\r\n![image](https://user-images.githubusercontent.com/8293542/52672333-68eec880-2ed2-11e9-81c6-cc41e13da191.png)\r\n\r\n\r\n**Expected Behavior**:\r\nReceive warning on potential null reference exception.\r\n\r\n**Actual Behavior**:\r\nNo warning is given.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33335","RelatedDescription":"Open issue \"Check expression for null\" (#33335)"},{"Id":"409544617","IsPullRequest":false,"CreatedAt":"2019-02-12T23:12:45","Actor":"mikadumont","Number":"33334","RawContent":null,"Title":"Switch Keyboard Language Layout Automatically","State":"open","Body":"**Steps to Reproduce**:\r\n1. Use multiple languages on computer.\r\n2. Start typing in a wrong language, for example, in Russian. Just because this layout was the last one used.\r\n\r\n**Expected Behavior**:\r\n1. Switch keyboard to automatically convert Russian letters to English letters, by knowing which letters have the same keys on the keyboard.\r\n\r\nThis is how it looks in search:\r\n\r\n![image](https://user-images.githubusercontent.com/46729679/52676601-7eb6ba80-2edf-11e9-8bf6-b7df9578f9de.png)\r\n\r\n\r\nThis is how it looks in code:\r\n\r\n![image](https://user-images.githubusercontent.com/46729679/52676556-5a5ade00-2edf-11e9-964d-645ea85bee13.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33334","RelatedDescription":"Open issue \"Switch Keyboard Language Layout Automatically\" (#33334)"},{"Id":"409539265","IsPullRequest":false,"CreatedAt":"2019-02-12T22:55:59","Actor":"xCyborg","Number":"33333","RawContent":null,"Title":"C# Interactive REPL language version selection.","State":"open","Body":"Using C# REPL with VS 2019 but can't test latest C# 8 features, is there a way to change language to latest in the REPL?\r\n\r\n![image](https://user-images.githubusercontent.com/10322873/52673636-a2025980-2f21-11e9-9ce4-a6d80a1cc7d0.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/33333","RelatedDescription":"Open issue \"C# Interactive REPL language version selection.\" (#33333)"},{"Id":"409508567","IsPullRequest":true,"CreatedAt":"2019-02-12T22:48:57","Actor":"jaredpar","Number":"33327","RawContent":null,"Title":"Correct assert in CustomModifierUtils","State":"closed","Body":"The assert for custom modifier checking should include the nullable\r\nvalidation\r\n\r\ncloses #30740","Url":"https://github.com/dotnet/roslyn/pull/33327","RelatedDescription":"Closed or merged PR \"Correct assert in CustomModifierUtils\" (#33327)"},{"Id":"409534126","IsPullRequest":false,"CreatedAt":"2019-02-12T22:41:02","Actor":"edward-a","Number":"33331","RawContent":null,"Title":"Allow type inference for class members","State":"open","Body":"I understand that using type inference for class members is a topic already raised in the past but here I want to show how the absence of it is highly detrimental to performance in some cases. In our code we have big auto-generated chunks with lots of lambdas passed as arguments. After removing all bottlenecks related to heap allocation, we are still stuck with delegates for lambdas heap-allocated upon instantiation of an object which significantly slows down the instantiation. We’d like to use class methods instead of lambdas called through static class methods to avoid the delegate allocations but in that case we would lose type inference which is no go for us. Please check the code below that presents the issue and the proposed solution.\r\n`\r\n        class Class1\r\n        {\r\n            bool b;\r\n\r\n            static double F(Class1 c) { return c.f(); }\r\n            static Func<Class1, double> _F = F;\r\n            double f() { return this.b ? 10.0 : 20.0; }\r\n\r\n            public Class1()\r\n            {\r\n                Class2.Create(this, () => this.b ? 10.0 : 20.0); // Type inference but heap allocation (assume hundreds of this)\r\n\r\n                Class2.Create(this, _F); // No heap allocation but can't use type inference for class members\r\n\r\n                // Proposal:\r\n                // static var F(Class1 c) { return c.f(); }\r\n                // static var _F = F;\r\n                // var f() { return this.b ? 10.0 : 20.0; }\r\n            }\r\n        }\r\n\r\n        class Class2\r\n        {\r\n            public static Class3<T> Create<T>(Class1 c, Func<T> f)\r\n            {\r\n                return new Class3<T>(c, f);\r\n            }\r\n\r\n            public static Class3<T> Create<T>(Class1 c, Func<Class1, T> f)\r\n            {\r\n                return new Class3<T>(c, f);\r\n            }\r\n\r\n            public class Class3<T>\r\n            {\r\n                public Class3(Class1 c, Func<T> f) { }\r\n                public Class3(Class1 c, Func<Class1, T> f) { }\r\n            }\r\n        }`","Url":"https://github.com/dotnet/roslyn/issues/33331","RelatedDescription":"Open issue \"Allow type inference for class members\" (#33331)"},{"Id":"409531433","IsPullRequest":false,"CreatedAt":"2019-02-12T22:33:11","Actor":"cston","Number":"33330","RawContent":null,"Title":"Nullable warnings reported for lifted operators when operands are not null","State":"open","Body":"```C#\r\n#nullable enable\r\n\r\nclass Program\r\n{\r\n    static void F(int? i)\r\n    {\r\n        if (i.HasValue)\r\n        {\r\n            _ = (int)(i & 0xff); // warning: may be null\r\n            _ = (int)(~i);       // warning: may be null\r\n        }\r\n    }\r\n}\r\n```\r\nReported by @onovotny.","Url":"https://github.com/dotnet/roslyn/issues/33330","RelatedDescription":"Open issue \"Nullable warnings reported for lifted operators when operands are not null\" (#33330)"},{"Id":"409529373","IsPullRequest":false,"CreatedAt":"2019-02-12T22:27:10","Actor":"AlekseyTs","Number":"33329","RawContent":null,"Title":"Accessibility violation around overriding internal member is not detected by the compiler, causes a TypeLoadException exception at runtime","State":"open","Body":"Compile lib1.dll ```csc /t:library lib1.cs```:\r\n```\r\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"lib2\")]\r\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"lib3\")]\r\n\r\npublic class A\r\n{\r\n    internal virtual void M() => System.Console.WriteLine(\"A\");\r\n}\r\n```\r\n\r\nCompile lib2.dll ```csc /t:library lib2.cs /r:lib1.dll```:\r\n```\r\npublic class B : A\r\n{\r\n    internal override void M() => System.Console.WriteLine(\"B\");\r\n}\r\n```\r\n\r\nCompile lib3.exe ```csc lib3.cs /out:lib3.exe /r:lib1.dll /r:lib2.dll```\r\n```\r\n    public class C : B\r\n    {\r\n        internal override void M() => System.Console.WriteLine(\"C\");\r\n\r\n        static void Main()\r\n        {\r\n            new C().Test();\r\n        }\r\n\r\n        void Test()\r\n        {\r\n            base.M();\r\n            M();\r\n        }\r\n    }\r\n```\r\n\r\nRun or PEVerify lib3.exe.\r\n```\r\n>lib3.exe\r\n\r\nUnhandled Exception: System.TypeLoadException: Method 'M' on type 'C' from assembly 'lib3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' is overriding a method that is not\r\n visible from that assembly.\r\n\r\n>peverify lib3.exe\r\n\r\nMicrosoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n[token  0x02000002] Type load failed.\r\n1 Error(s) Verifying lib3.exe\r\n```\r\n\r\nExpected: \r\nEither execution should succeed and no exception should be thrown, the overriding works. Or, compiler should report an accessibility error for the overriding.\r\n\r\n\r\nNow comment out the ```internal override void M() => System.Console.WriteLine(\"C\");``` line in lib3.cs and rebuild lib3.exe.\r\n\r\nRun or PEVerify lib3.exe:\r\n```\r\n>lib3.exe\r\nA\r\nB\r\n\r\n>peverify lib3.exe\r\n\r\nMicrosoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nAll Classes and Methods in lib3.exe Verified.\r\n```\r\n\r\nObserved: \r\nNote that ```base.M();``` prints \"A\", i.e. A.M is invoked instead of an inaccessible most derived override B.M. B.M is successfully executed by a virtual call ```M();```.\r\n\r\nExpected:\r\nThe ```base.M();``` should report an error about the fact that B.M is not accessible.\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33329","RelatedDescription":"Open issue \"Accessibility violation around overriding internal member is not detected by the compiler, causes a TypeLoadException exception at runtime\" (#33329)"},{"Id":"409519410","IsPullRequest":false,"CreatedAt":"2019-02-12T21:58:38","Actor":"sharwell","Number":"33328","RawContent":null,"Title":"Implement caching for parsed editorconfig values in the code style layer","State":"open","Body":"Identified by @heejaechang in https://github.com/dotnet/roslyn/pull/33291#discussion_r255694197.\r\n\r\nCurrently `TryGetEditorConfigOption` does not cache results for specific options, which can lead to reparsing of the raw string every time an option is requested.\r\nhttps://github.com/dotnet/roslyn/blob/a557079b3b5562c16c1feb3bebd0391926a01c6e/src/CodeStyle/Core/Analyzers/Options/AnalyzerConfigOptionsExtensions.cs#L30\r\n\r\n📝 This code is intended as an interim solution until the new editorconfig-in-compiler APIs replace it.","Url":"https://github.com/dotnet/roslyn/issues/33328","RelatedDescription":"Open issue \"Implement caching for parsed editorconfig values in the code style layer\" (#33328)"},{"Id":"409490541","IsPullRequest":true,"CreatedAt":"2019-02-12T20:40:55","Actor":"RikkiGibson","Number":"33326","RawContent":null,"Title":"Merge master into features/readonly-members","State":"open","Body":"Bringing this feature branch up to date.","Url":"https://github.com/dotnet/roslyn/pull/33326","RelatedDescription":"Open PR \"Merge master into features/readonly-members\" (#33326)"},{"Id":"409263730","IsPullRequest":true,"CreatedAt":"2019-02-12T20:30:08","Actor":"dotnet-bot","Number":"33319","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33319","RelatedDescription":"Closed or merged PR \"Merge master to features/NullableDogfood\" (#33319)"},{"Id":"409172177","IsPullRequest":false,"CreatedAt":"2019-02-12T19:59:47","Actor":"aka-STInG","Number":"33316","RawContent":null,"Title":"Local function hides functions declared in class","State":"closed","Body":"**Version Used**: \r\n\r\nC# 7.3 (Visual Studio 2017 15.9.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n\r\n\r\n    public class Mutator\r\n    {\r\n        public int Mutate(int a, int b)\r\n        {\r\n            bool IsSum(int x)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (IsSum(a, b))\r\n            {\r\n                return a + b;\r\n            }\r\n            else\r\n            {\r\n                return a - b;\r\n            }\r\n        }\r\n\r\n        public bool IsSum(int a, int b)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nCompilation without errors\r\n\r\n**Actual Behavior**:\r\n\r\nerror CS1501: No overload for method 'IsSum' takes 2 arguments\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33316","RelatedDescription":"Closed issue \"Local function hides functions declared in class\" (#33316)"},{"Id":"409447790","IsPullRequest":true,"CreatedAt":"2019-02-12T18:49:59","Actor":"JoeRobich","Number":"33325","RawContent":null,"Title":"Use TaggedTextExtension method for getting ClassificationTypeName","State":"open","Body":"Moves changes from https://github.com/dotnet/roslyn/pull/32307 back into master.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33266","Url":"https://github.com/dotnet/roslyn/pull/33325","RelatedDescription":"Open PR \"Use TaggedTextExtension method for getting ClassificationTypeName\" (#33325)"},{"Id":"409406384","IsPullRequest":false,"CreatedAt":"2019-02-12T17:31:43","Actor":"livarcocc","Number":"33324","RawContent":null,"Title":"dotnet-core MyGet gallery flags old version of package as latest","State":"closed","Body":"@KexyBiscuit commented on [Mon Feb 11 2019](https://github.com/dotnet/core-sdk/issues/466)\n\nFor example, [Microsoft.CSharp](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.CSharp) tells me that 4.6.0-preview1-27018-01 is the latest, but 4.6.0-preview.19111.6 is published today, why isn't that the latest? I wonder if there's some rule preventing ones from downloading the latest bit of these package, or it's just a operation mistake.\n\n---\n\n@livarcocc commented on [Tue Feb 12 2019](https://github.com/dotnet/core-sdk/issues/466#issuecomment-462846028)\n\nMoving this to Roslyn. We don't produce this package on the SDK.\n\n","Url":"https://github.com/dotnet/roslyn/issues/33324","RelatedDescription":"Closed issue \"dotnet-core MyGet gallery flags old version of package as latest\" (#33324)"},{"Id":"409263704","IsPullRequest":true,"CreatedAt":"2019-02-12T17:00:23","Actor":"dotnet-bot","Number":"33318","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33318","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#33318)"},{"Id":"409396370","IsPullRequest":true,"CreatedAt":"2019-02-12T16:46:50","Actor":"sharwell","Number":"33323","RawContent":null,"Title":"Remember decompiler EULA in the solution user options","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33323","RelatedDescription":"Open PR \"Remember decompiler EULA in the solution user options\" (#33323)"},{"Id":"409383443","IsPullRequest":false,"CreatedAt":"2019-02-12T16:20:52","Actor":"Evangelink","Number":"33322","RawContent":null,"Title":"How to interpret entries in roslynRemoteHost.log file","State":"open","Body":"We write a C# and VB.NET Roslyn Analyzer.\r\n\r\nWe have received some user questions about what is the content of this file and whether this was useful to report it back to us.\r\n\r\nI have failed to find some useful information about this file and about its entries, so I am wondering whether you could help me have a clear understanding.\r\n\r\nWhen is this file generated? What is the content (is it linked to performance?)?\r\n\r\nOur ticket: https://github.com/SonarSource/sonar-dotnet/issues/2248","Url":"https://github.com/dotnet/roslyn/issues/33322","RelatedDescription":"Open issue \"How to interpret entries in roslynRemoteHost.log file\" (#33322)"},{"Id":"409381590","IsPullRequest":true,"CreatedAt":"2019-02-12T16:17:12","Actor":"JoeRobich","Number":"33321","RawContent":null,"Title":"Change Linux build legs to run on a different agent pool","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33321","RelatedDescription":"Open PR \"Change Linux build legs to run on a different agent pool\" (#33321)"},{"Id":"409301196","IsPullRequest":false,"CreatedAt":"2019-02-12T13:35:30","Actor":"mrvoorhe","Number":"33320","RawContent":null,"Title":"Compile fails in server mode on OSX involving defines","State":"open","Body":"This is an intermittent bug that I am only seeing on OSX with roslyn server mode enabled.  I have *not* experienced this bug a single time on Windows.\r\n\r\nUnity is hitting this bug in our UnityLinker test suite.  The UnityLinker test framework follows the same structure as https://github.com/mono/linker.  The scenario that seems to trigger this bug is compiling the same and/or similar files in the same location with almost identical command line arguments.  The difference that seems to be key in triggering the bug is specifying a define.\r\n\r\nIn case these clues are of any using, here are things I've done that make the bug go away\r\n* Don't use server mode\r\n* Use `mcs`\r\n* Change `Run2` to use different output assembly file names than `Run1`\r\n\r\n**Version Used**: \r\n```\r\nMicrosoft (R) Visual C# Compiler version 2.9.1.65535 (4d10ef64)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open the attached solution\r\n2. Open `Program.cs`\r\n3. Implement the property `YourRoslynPathOnOSX`\r\n4. Implement the property `PathToAnMscorlibOnOSX`  (You could probably cut out the /nostdlib and get rid of this part if you wanted to)\r\n5. Compile the solution\r\n6. Open a terminal and cd `RoslynDefineBug/bin/Debug`\r\n7. Run `mono RoslynDefineBug.exe` (Mono has nothing to do with the bug, you could adjust the project to compile for .NET Core and use that if you wanted)\r\n\r\n**Expected Behavior**:\r\n\r\nNo compile errors should occur\r\n\r\n**Actual Behavior**:\r\n\r\nThe following errors will appear one or more times\r\n```\r\nFailed to compile assembly with csc:\r\ncommon/Executable.cs(3,7): error CS0246: The type or namespace name 'ONE' could not be found (are you missing a using directive or an assembly reference?)\r\ncommon/Executable.cs(22,47): error CS0246: The type or namespace name 'IntegratedSubsystemDescriptor<>' could not be found (are you missing a using directive or an assembly reference?)\r\ncommon/Executable.cs(32,37): error CS0246: The type or namespace name 'IntegratedSubsystem<>' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\nFailed to compile assembly with csc:\r\ncommon/Executable.cs(3,7): error CS0246: The type or namespace name 'ONE' could not be found (are you missing a using directive or an assembly reference?)\r\ncommon/Executable.cs(22,47): error CS0246: The type or namespace name 'IntegratedSubsystemDescriptor<>' could not be found (are you missing a using directive or an assembly reference?)\r\ncommon/Executable.cs(32,37): error CS0246: The type or namespace name 'IntegratedSubsystem<>' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\n[RoslynDefineBug.zip](https://github.com/dotnet/roslyn/files/2856022/RoslynDefineBug.zip)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33320","RelatedDescription":"Open issue \"Compile fails in server mode on OSX involving defines\" (#33320)"},{"Id":"409263626","IsPullRequest":true,"CreatedAt":"2019-02-12T13:30:16","Actor":"dotnet-bot","Number":"33317","RawContent":null,"Title":"Merge dev16.0-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33317","RelatedDescription":"Closed or merged PR \"Merge dev16.0-vs-deps to master-vs-deps\" (#33317)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"409530728","IsPullRequest":true,"CreatedAt":"2019-02-13T04:18:38","Actor":"jkotas","Number":"7011","RawContent":null,"Title":"Pin CoreRT OS modules in memory","State":"closed","Body":"CoreRT is not designed to be unloadable. Unloading modules before process shutdown leads to crashes and memory leaks.\r\n\r\nFixes #6993","Url":"https://github.com/dotnet/corert/pull/7011","RelatedDescription":"Closed or merged PR \"Pin CoreRT OS modules in memory\" (#7011)"},{"Id":"408880954","IsPullRequest":false,"CreatedAt":"2019-02-13T04:18:38","Actor":"letmaik","Number":"6993","RawContent":null,"Title":"Crash on library unload via Python","State":"closed","Body":"The following code invokes the NativeLibrary sample shared library in Python on Windows using CFFI. It exits with code -1073741819. Note that \"checks pass\" is printed and the crash happens on shutdown / library unloading or similar.\r\n\r\n```py\r\n# pip install cffi\r\n# dotnet publish /p:NativeLib=Shared -r win-x64 -c Debug\r\n\r\nimport os\r\nfrom cffi import FFI\r\n\r\nPROJ_DIR = os.path.join(os.path.dirname(__file__))\r\nLIB_BASE_DIR = os.path.join(PROJ_DIR, 'bin', 'Debug', 'netstandard2.0')\r\nLIB_PATH = os.path.join(LIB_BASE_DIR, 'win-x64', 'native', 'NativeLibrary.dll')\r\n\r\nffi = FFI()\r\nffi.cdef('long add(long a, long b);')\r\nlib = ffi.dlopen(LIB_PATH)\r\n\r\nassert lib.add(1, 2) == 3\r\nassert lib.add(2147483647, 1) == -2147483648\r\nprint('checks pass')\r\n```\r\nSimply copy this into a `test.py` file in the project folder and run `python test.py`. Check the exit code with `echo %errorlevel%` if using command prompt/Anaconda prompt.\r\n\r\nWhen running this under WinDbg I can see that the crash happens here:\r\n```\r\n<Unloaded_NativeLibrary.dll>+0x2ca820\r\nntdll!RtlProcessFlsData+0x145\r\nntdll!LdrShutdownProcess+0x92\r\nntdll!RtlExitUserProcess+0xad\r\nKERNEL32!FatalExit+0xa\r\nucrtbase!exit+0x1d4\r\nucrtbase!exit+0x7f\r\npython!__scrt_common_main_seh+0x13d\r\nKERNEL32!BaseThreadInitThunk+0x14\r\nntdll!RtlUserThreadStart+0x21\r\n```\r\n\r\nThe log says:\r\n```\r\n(5540.5dbc): Access violation - code c0000005 (first chance)\r\n```\r\n\r\nFor reference, this uses Python 3.6.7 64 bit from the Anaconda distribution.","Url":"https://github.com/dotnet/corert/issues/6993","RelatedDescription":"Closed issue \"Crash on library unload via Python\" (#6993)"},{"Id":"409494888","IsPullRequest":true,"CreatedAt":"2019-02-13T02:35:44","Actor":"Dotnet-GitSync-Bot","Number":"7010","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hamish-rose @tannergooding @sywhang","Url":"https://github.com/dotnet/corert/pull/7010","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7010)"},{"Id":"409088878","IsPullRequest":true,"CreatedAt":"2019-02-12T20:49:35","Actor":"Dotnet-GitSync-Bot","Number":"6999","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @stephentoub","Url":"https://github.com/dotnet/corert/pull/6999","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6999)"},{"Id":"409465815","IsPullRequest":true,"CreatedAt":"2019-02-12T20:37:48","Actor":"trylek","Number":"7009","RawContent":null,"Title":"Exclude System.Runtime.Windows.Runtime[.UI.Xaml] from /r2rframework","State":"closed","Body":"Based on Simon's advice I have excluded the above two assemblies\r\nfrom CPAOT compilation as part of the CoreCLR framework.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7009","RelatedDescription":"Closed or merged PR \"Exclude System.Runtime.Windows.Runtime[.UI.Xaml] from /r2rframework\" (#7009)"},{"Id":"409422442","IsPullRequest":true,"CreatedAt":"2019-02-12T17:49:33","Actor":"dotnet-bot","Number":"7008","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7008","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7008)"},{"Id":"409406951","IsPullRequest":true,"CreatedAt":"2019-02-12T17:25:03","Actor":"dotnet-bot","Number":"7007","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7007","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7007)"},{"Id":"409215603","IsPullRequest":true,"CreatedAt":"2019-02-12T17:05:38","Actor":"filipnavara","Number":"7001","RawContent":null,"Title":"Implement SetEnvironmentVariable","State":"closed","Body":"Fixes #6971","Url":"https://github.com/dotnet/corert/pull/7001","RelatedDescription":"Closed or merged PR \"Implement SetEnvironmentVariable\" (#7001)"},{"Id":"409334718","IsPullRequest":true,"CreatedAt":"2019-02-12T16:59:03","Actor":"dotnet-bot","Number":"7006","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7006","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7006)"},{"Id":"409301795","IsPullRequest":true,"CreatedAt":"2019-02-12T15:26:07","Actor":"MichalStrehovsky","Number":"7005","RawContent":null,"Title":"Fix bug in PreInitFieldInfo comparison","State":"closed","Body":"Unblocks the integration from CoreCLR.","Url":"https://github.com/dotnet/corert/pull/7005","RelatedDescription":"Closed or merged PR \"Fix bug in PreInitFieldInfo comparison\" (#7005)"},{"Id":"409301410","IsPullRequest":true,"CreatedAt":"2019-02-12T13:36:07","Actor":"MichalStrehovsky","Number":"7004","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7004","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7004)"},{"Id":"409259102","IsPullRequest":true,"CreatedAt":"2019-02-12T12:45:48","Actor":"MichalStrehovsky","Number":"7003","RawContent":null,"Title":"Ifdef out code that triggers UTC bug","State":"closed","Body":"This results in bad codegen on AMD64. I filed a bug internally; hopefully we can get a fix soon.","Url":"https://github.com/dotnet/corert/pull/7003","RelatedDescription":"Closed or merged PR \"Ifdef out code that triggers UTC bug\" (#7003)"},{"Id":"409222205","IsPullRequest":true,"CreatedAt":"2019-02-12T10:19:46","Actor":"trylek","Number":"7002","RawContent":null,"Title":"Additional changes to make CPAOT getCallInfo more similar to Crossgen","State":"open","Body":"After Simon forked away getCallInfo for CPAOT, we landed in a\r\nbetter position to steer further away from the RyuJit version.\r\nI have split the method getCallInfo into two parts corresponding\r\nto CoreCLR CEEInfo::getCallInfo vs. ZapInfo::getCallInfo and\r\nI refactored the methods to be as similar to their Crossgen\r\ncounterparts as possible.\r\n\r\nI have also forked embedGenericHandle because its implementation\r\nis differs somewhat between CoreRT and Crossgen. Similarly I had\r\nto provide a separate implementation for\r\nTryResolveConstraintMethodApprox and\r\nComputeRuntimeLookupForSharedGenericToken.\r\n\r\nAs part of this effort I had to generalize local method imports\r\nto distinguish between the actual compiled method and its logical\r\nview in the import cell as a shareable instantiated or generic\r\nmethod may end up in multiple import cells corresponding to\r\ndifferent type parameters or to different values of the\r\nisInstantiatingStub flag.\r\n\r\nAs a slight cleanup I have also unified parameter ordering such\r\nthat, for methods accepting the unboxing / instantiating stub flags\r\nand the signature context, the signature context always goes last.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. There seems to be a bit of an overlap between Simon's most\r\nrecent PR and mine. I assume Simon's change should go in first\r\nand I'll rebase my change after resolving the conflict.\r\n\r\nP.P.S. Based on Michal's advice I have also removed the method\r\nShadowConcreteMethod that is no longer used in CPAOT.\r\n\r\nP.P.P.S. This change seems to be fixing about 200 Pri#1 tests.","Url":"https://github.com/dotnet/corert/pull/7002","RelatedDescription":"Open PR \"Additional changes to make CPAOT getCallInfo more similar to Crossgen\" (#7002)"},{"Id":"409129409","IsPullRequest":false,"CreatedAt":"2019-02-12T05:38:37","Actor":"miramaris","Number":"7000","RawContent":null,"Title":"Unable to run compiled binary on Ubuntu 18.04","State":"open","Body":"When running a binary built on the `dotnet-sdk:2.2-latest` Docker image (which is based on Debian Stretch), I get the following error in Ubuntu 18.04:\r\n\r\n```\r\n/usr/lib/x86_64-linux-gnu/libcurl.so.4: version `CURL_OPENSSL_3' not found\r\n```\r\n\r\nIf I'm understanding correctly, this means the binary is looking for `libcurl3`, which is odd since I had to install `libcurl4-openssl-dev` to get it to compile in the first place. As far as I know, it's not possible to have `libcurl3` and `libcurl4` installed on the same system, so I'm at a loss as to how to resolve this.\r\n\r\nFrom my Googling it seems this is a known issue with Ubuntu being funky with `libcurl`. However my application doesn't even perform any network requests so I'm not entirely sure why a system without a compatible `libcurl` won't run the produced binary.\r\n\r\nAlso, just for fun, I decided to do the reverse: build on Ubuntu Bionic and run on Debian Stretch. I got a similar, but different issue:\r\n\r\n```\r\n/usr/lib/x86_64-linux-gnu/libcurl.so.4: version `CURL_OPENSSL_4' not found\r\n```\r\n\r\nSo it seems that if you build on a distro that supplies `libcurl3`, it won't run on a distro that supplies `libcurl4` and vice-versa.","Url":"https://github.com/dotnet/corert/issues/7000","RelatedDescription":"Open issue \"Unable to run compiled binary on Ubuntu 18.04\" (#7000)"},{"Id":"408988543","IsPullRequest":true,"CreatedAt":"2019-02-12T02:47:29","Actor":"stephentoub","Number":"6996","RawContent":null,"Title":"Adapt corert to ConditionalWeakTable moving to shared","State":"closed","Body":"Depends on https://github.com/dotnet/coreclr/pull/22531","Url":"https://github.com/dotnet/corert/pull/6996","RelatedDescription":"Closed or merged PR \"Adapt corert to ConditionalWeakTable moving to shared\" (#6996)"},{"Id":"409026872","IsPullRequest":true,"CreatedAt":"2019-02-12T02:32:33","Actor":"Dotnet-GitSync-Bot","Number":"6997","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @stephentoub","Url":"https://github.com/dotnet/corert/pull/6997","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6997)"},{"Id":"409047630","IsPullRequest":true,"CreatedAt":"2019-02-12T00:28:20","Actor":"nattress","Number":"6998","RawContent":null,"Title":"CPAOT Method handle support","State":"open","Body":"Add support for loading method handles. Modify the `PreCodeHelperMethodImport` to support loading method handles eagerly. As with Tomas' GVM support change, root the canonical instantiation when a method handle is loaded to ensure the method body is generated by the JIT.\r\n\r\nThis change fixes compilation for several ASP.NET Core assemblies:\r\n- Microsoft.AspNetCore.Connections.Abstractions\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.Extensions.DependencyInjection\r\n- Microsoft.Extensions.DependencyInjection.Abstractions\r\n","Url":"https://github.com/dotnet/corert/pull/6998","RelatedDescription":"Open PR \"CPAOT Method handle support\" (#6998)"},{"Id":"408985705","IsPullRequest":true,"CreatedAt":"2019-02-12T00:14:11","Actor":"stephentoub","Number":"6995","RawContent":null,"Title":"Adapt corert to Volatile moving to shared","State":"closed","Body":"Depends on https://github.com/dotnet/coreclr/pull/22523","Url":"https://github.com/dotnet/corert/pull/6995","RelatedDescription":"Closed or merged PR \"Adapt corert to Volatile moving to shared\" (#6995)"},{"Id":"408950270","IsPullRequest":false,"CreatedAt":"2019-02-11T20:23:58","Actor":"homer90","Number":"6994","RawContent":null,"Title":"Exclude Nuget Packages from native compilation","State":"closed","Body":"I am converting one of my applications to CoreRT. It's a plugin system with 1 main application and many small dlls that are loaded by the main application.\r\n\r\nThe main application (.exe) references NuGet Packages Newtonsoft.Json and SharpDX.\r\nEach of the plugins also references those two NuGet Packages.\r\n\r\nSo when building one plugin it's size is over > 20MB and generating native code taks about 2 minutes.\r\n\r\nIs it possible to exclude those NuGet Packages from native compilation for my plugins as they are already present/loaded in the main application? Thanks.\r\n\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6994","RelatedDescription":"Closed issue \"Exclude Nuget Packages from native compilation\" (#6994)"},{"Id":"408740391","IsPullRequest":true,"CreatedAt":"2019-02-11T19:38:10","Actor":"Dotnet-GitSync-Bot","Number":"6989","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6989","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6989)"},{"Id":"408826804","IsPullRequest":true,"CreatedAt":"2019-02-11T15:11:01","Actor":"MichalStrehovsky","Number":"6992","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"@dotnet-bot skip ci please","Url":"https://github.com/dotnet/corert/pull/6992","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#6992)"},{"Id":"408824730","IsPullRequest":true,"CreatedAt":"2019-02-11T15:06:12","Actor":"MichalStrehovsky","Number":"6991","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"Fell into the trap of \"I couldn't have possibly made a mistake in this - no need to try compiling it first\"\r\n\r\n@dotnet-bot skip ci (this doesn't build here anyway)","Url":"https://github.com/dotnet/corert/pull/6991","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#6991)"},{"Id":"408749968","IsPullRequest":true,"CreatedAt":"2019-02-11T14:22:09","Actor":"MichalStrehovsky","Number":"6990","RawContent":null,"Title":"Annotate EventCounter as a relocated type","State":"closed","Body":"This moved to CoreLib and needs to be annotated as such for Project N.","Url":"https://github.com/dotnet/corert/pull/6990","RelatedDescription":"Closed or merged PR \"Annotate EventCounter as a relocated type\" (#6990)"},{"Id":"408646416","IsPullRequest":false,"CreatedAt":"2019-02-11T10:08:37","Actor":"homer90","Number":"6988","RawContent":null,"Title":"Build CoreRT binaries within Visual Studio 17/19","State":"closed","Body":"When I want to compile my project to CoreRT native binaries I have to use the command line:\r\n`dotnet publish -c Release -r win-x64`\r\n\r\nHow can I compile native builds when using \"Build\" operation in Visual Studio?\r\n\r\nI tried this StackOverflow answer (https://stackoverflow.com/questions/54542158/c-sharp-compile-net-core-3-0-to-native-code-through-visual-studio-2019#comment95894438_54542158) but I end up in an endless loop of builds (one build finishes and the next one starts).","Url":"https://github.com/dotnet/corert/issues/6988","RelatedDescription":"Closed issue \"Build CoreRT binaries within Visual Studio 17/19\" (#6988)"},{"Id":"408595876","IsPullRequest":true,"CreatedAt":"2019-02-10T23:20:39","Actor":"MichalStrehovsky","Number":"6987","RawContent":null,"Title":"Instantiate generic types over something if possible","State":"open","Body":"When rooting generic types for reflection, try to pregenerate code for the type instantiated over a suitable type.\r\n\r\nThis makes more reflection just work at the cost of sacrificing more size and compilation speed. ASP.NET WebApi sample goes from 29.4 MB to 30.6 MB, but we can delete 75% of its RD.XML.\r\n\r\nThe size regression can be recovered by using the [documented](http://aka.ms/OptimizeCoreRT) switches. The RD.XML needs to come back in that case, obviously.","Url":"https://github.com/dotnet/corert/pull/6987","RelatedDescription":"Open PR \"Instantiate generic types over something if possible\" (#6987)"},{"Id":"408567295","IsPullRequest":true,"CreatedAt":"2019-02-10T21:05:35","Actor":"jkotas","Number":"6986","RawContent":null,"Title":"Refactor Interop.manual.cs to follow coding conventions","State":"closed","Body":"Windows-specific OS APIs are not called on non-Windows now.\r\n\r\nFixes #6956","Url":"https://github.com/dotnet/corert/pull/6986","RelatedDescription":"Closed or merged PR \"Refactor Interop.manual.cs to follow coding conventions\" (#6986)"},{"Id":"408541156","IsPullRequest":false,"CreatedAt":"2019-02-10T18:17:09","Actor":"homer90","Number":"6984","RawContent":null,"Title":"Compile C# and C++ code in one executable","State":"closed","Body":"Is it possible to combine c# and c++ code in executable with CoreRT?\r\n\r\nI saw the following sample project where it contains a CppCompile item:\r\nhttps://github.com/dotnet/corert/blob/dec344c6a4ec6d6a1cbc456f5035a100333aa8e5/tests/src/Simple/SharedLibrary/SharedLibrary.csproj#L18\r\n\r\nAlso how would you call a C++ Function at runtime from C#?","Url":"https://github.com/dotnet/corert/issues/6984","RelatedDescription":"Closed issue \"Compile C# and C++ code in one executable\" (#6984)"},{"Id":"408552752","IsPullRequest":true,"CreatedAt":"2019-02-10T16:58:17","Actor":"jkotas","Number":"6985","RawContent":null,"Title":"Append NativeLibrary list to the linker arguments in the targets file","State":"closed","Body":"Related to #6235","Url":"https://github.com/dotnet/corert/pull/6985","RelatedDescription":"Closed or merged PR \"Append NativeLibrary list to the linker arguments in the targets file\" (#6985)"},{"Id":"408493027","IsPullRequest":true,"CreatedAt":"2019-02-10T06:41:11","Actor":"Dotnet-GitSync-Bot","Number":"6983","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/6983","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6983)"},{"Id":"408476002","IsPullRequest":true,"CreatedAt":"2019-02-10T02:45:30","Actor":"jkotas","Number":"6982","RawContent":null,"Title":"Fix casing of interop directories","State":"closed","Body":"Match convention introduced by https://github.com/dotnet/corefx/pull/35085","Url":"https://github.com/dotnet/corert/pull/6982","RelatedDescription":"Closed or merged PR \"Fix casing of interop directories\" (#6982)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"408605617","IsPullRequest":true,"CreatedAt":"2019-02-13T00:53:54","Actor":"nguerrera","Number":"2929","RawContent":null,"Title":"Speed up GetPackageDirectory task and clean up NuGetPackageResolver","State":"closed","Body":"1. Never use INuGetPathContext. It is slow an unpredictable. It was left as a fallback when #361 was fixed, but we should never be resolving from package folders other than what is listed in the assets file. So  instead, if no package folders are in the assets file, we will find no packages. This path should not ever have been taken. Most tasks that call this are skipped in design-time when no assets file is available yet. GetPackageDirectory is not, but that is handled by (3) below.\r\n\r\n2. Stop hitting the disk twice on GetPackageDirectory. We were calling GetPackageInfo and GetPackageDirectory and both probe on disk for the package. Instead, use GetInstallPath on result PackageInfo or use GetPackageDirectory alone when we do not need the RootPath.\r\n\r\n3. Fix #2928: Replace incorrect check for null package resolver and replace it with up-front defense against empty PackageFolders.\r\n\r\n4. Eliminate unnecessary allocations for List<T> resizing and copying to array.\r\n\r\n5. Fix TODO in NuGetPackageResolver and Use RootPath property instead of workaround.\r\n\r\n6. Stop treating \"\\\\%(RelativePath)\" as targeting pack path when not downloaded.\r\n\r\n7. Follow same pattern for apphost as targeting pack to avoid probing in packages folder when found in packs folder.","Url":"https://github.com/dotnet/sdk/pull/2929","RelatedDescription":"Closed or merged PR \"Speed up GetPackageDirectory task and clean up NuGetPackageResolver\" (#2929)"},{"Id":"409453305","IsPullRequest":true,"CreatedAt":"2019-02-12T20:24:39","Actor":"dotnet-maestro[bot]","Number":"2934","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19112.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2934","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2934)"},{"Id":"409090070","IsPullRequest":false,"CreatedAt":"2019-02-12T02:40:46","Actor":"dsplaisted","Number":"2933","RawContent":null,"Title":"Get platform manifest and conflict resolution data from targeting packs or runtime packs if appropriate","State":"open","Body":"For .NET Core 2.x, the `Microsoft.NETCore.App` package includes a platform manifest .txt file as well as `PackageConflictOverrides` MSBuild items for conflict resolution.  For .NET Core 3.0, these should come from the targeting pack for framework dependent apps, and from the runtime pack for self-contained apps.\r\n\r\nThis means that both targeting packs and runtime packs need to include this data, and the SDK needs to use the data from the appropriate type of pack depending on whether the app is self-contained or not.","Url":"https://github.com/dotnet/sdk/issues/2933","RelatedDescription":"Open issue \"Get platform manifest and conflict resolution data from targeting packs or runtime packs if appropriate\" (#2933)"},{"Id":"409036772","IsPullRequest":true,"CreatedAt":"2019-02-12T00:01:33","Actor":"dotnet-bot","Number":"2932","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2932","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2932)"},{"Id":"409036755","IsPullRequest":true,"CreatedAt":"2019-02-12T00:01:30","Actor":"dotnet-bot","Number":"2931","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2931","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#2931)"},{"Id":"406574224","IsPullRequest":true,"CreatedAt":"2019-02-11T20:29:54","Actor":"dotnet-bot","Number":"2907","RawContent":null,"Title":"Merge release/2.1.4xx to release/2.1.5xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2907","RelatedDescription":"Closed or merged PR \"Merge release/2.1.4xx to release/2.1.5xx\" (#2907)"},{"Id":"408369264","IsPullRequest":true,"CreatedAt":"2019-02-11T19:31:14","Actor":"dotnet-bot","Number":"2924","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2924","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2924)"},{"Id":"408852652","IsPullRequest":false,"CreatedAt":"2019-02-11T16:02:19","Actor":"nguerrera","Number":"2930","RawContent":null,"Title":"Improve missing targeting pack error handling","State":"open","Body":"Today, in the implementation so far, we have: `GenerateErrorForMissingTargetingPacks` that is set to false for all design-time builds:\r\n\r\nhttps://github.com/dotnet/sdk/blob/b8c8d680ef807a8d35e3ce1dfceb3e69ca7be394/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.TargetingPackResolution.targets#L151-L155\r\n\r\nBut we want an error in design-time builds when restore has happened. Should this instead be conditioned on the presence of an assets file + !design-time like other targets?\r\n\r\nWe also discussed special handling to surface errors from packagedownload of targeting pack to project system.\r\n\r\ncc @dsplaisted @davkean\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2930","RelatedDescription":"Open issue \"Improve missing targeting pack error handling\" (#2930)"},{"Id":"408397107","IsPullRequest":true,"CreatedAt":"2019-02-11T15:52:53","Actor":"kouvel","Number":"2925","RawContent":null,"Title":"Expose option to disable tier 0 JIT for configuring from a project file","State":"closed","Body":"- For scenarios that don't mind giving up some startup time (but not too much), it may be a reasonable option when it is desirable to avoid spending two JIT cycles on methods\r\n- I'd like to use this mode as the default for microbenchmarks in the performance repo and the most convenient way of doing so would be to have a way to specify it in a project file, to keep benchmarks easily runnable with `dotnet run`. It serves as a soft workaround to https://github.com/dotnet/coreclr/issues/19751 while still allowing perf improvements from tiering to show when R2R is being used, in benchmarks that could help to get more representative numbers.","Url":"https://github.com/dotnet/sdk/pull/2925","RelatedDescription":"Closed or merged PR \"Expose option to disable tier 0 JIT for configuring from a project file\" (#2925)"},{"Id":"408585850","IsPullRequest":false,"CreatedAt":"2019-02-10T22:01:57","Actor":"nguerrera","Number":"2928","RawContent":null,"Title":"Possible dead code handling null resolver, which doesn't appear to be possible","State":"open","Body":"We create a resolver here:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/GetPackageDirectory.cs#L30\r\n\r\nWhich doesn't look like it can return null:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/NuGetPackageResolver.cs#L71-L82\r\n\r\nBut we check for null here:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/GetPackageDirectory.cs#L43-L45\r\n\r\n@dsplaisted What's the origin of this comment. How can this be null in design time builds?\r\n\r\nIs there something else we are supposed to be handling?","Url":"https://github.com/dotnet/sdk/issues/2928","RelatedDescription":"Open issue \"Possible dead code handling null resolver, which doesn't appear to be possible\" (#2928)"},{"Id":"408412866","IsPullRequest":false,"CreatedAt":"2019-02-09T17:51:55","Actor":"aodl","Number":"2926","RawContent":null,"Title":"Attributing arbitrary identifiers/values to a project's package and project references","State":"closed","Body":"Relates to [NuGet#7776](https://github.com/NuGet/Home/issues/7776)   \r\n\r\nIs there a facility available for assigning arbitrary attributes to the project and package references of a particular project, in a way that the information becomes available at runtime? i.e.\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"some.random.package1\"  CustomAttribute=\"banana\"/>\r\n    <PackageReference Include=\"some.random.package2\"  CustomAttribute=\"flowers\" />\r\n  </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <ProjectReference Include=\"..\\project1\\project1.csproj\" CustomAttribute=\"0\" />\r\n      <ProjectReference Include=\"..\\project1\\project2.csproj\" CustomAttribute=\"1\"/>\r\n    </ItemGroup>\r\n```\r\nI'm aware that this customAttribute information couldn't be made available on the package reference **assemblies** as they will already be built; and in the case of project references I expect it's either not possible or would require adding a task info the csproj. of the referenced projects themselves (to pick up a custom property passed in by msbuild and embedded it into an assembly attribute).\r\n\r\nIn the case of the package reference, I have control over how they are built, but they are built before knowing what custom attribute might be assigned to it from a referencing project.\r\n\r\nThe only way I can think of doing this for both project and package references is to have a build task that retrieves the `PackageReference` and `ProjectReference` ItemGroups, checks for the presence of `CustomAttribute` and in each case writes the package/project name and custom attribute value to a file for lookup at runtime.\r\n\r\nAre there built in ways to do this sort of thing?\r\n","Url":"https://github.com/dotnet/sdk/issues/2926","RelatedDescription":"Closed issue \"Attributing arbitrary identifiers/values to a project's package and project references\" (#2926)"},{"Id":"408429520","IsPullRequest":true,"CreatedAt":"2019-02-09T14:26:10","Actor":"dotnet-maestro[bot]","Number":"2927","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19108.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2927","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2927)"},{"Id":"407840981","IsPullRequest":true,"CreatedAt":"2019-02-09T04:24:00","Actor":"nugetlurker","Number":"2917","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5821 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5821 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2917","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5821 into sdk\" (#2917)"},{"Id":"408352052","IsPullRequest":true,"CreatedAt":"2019-02-09T01:40:38","Actor":"livarcocc","Number":"2922","RawContent":null,"Title":"Updating branding for preview3 and adding a build trigger to the release branch.","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2922","RelatedDescription":"Closed or merged PR \"Updating branding for preview3 and adding a build trigger to the release branch.\" (#2922)"},{"Id":"408353445","IsPullRequest":true,"CreatedAt":"2019-02-09T00:14:47","Actor":"livarcocc","Number":"2923","RawContent":null,"Title":"Update branding to preview4","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2923","RelatedDescription":"Closed or merged PR \"Update branding to preview4\" (#2923)"},{"Id":"407841007","IsPullRequest":true,"CreatedAt":"2019-02-08T23:46:37","Actor":"nugetlurker","Number":"2918","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5821 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5821 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2918","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5821 into sdk\" (#2918)"},{"Id":"408192687","IsPullRequest":false,"CreatedAt":"2019-02-08T15:09:50","Actor":"bitbonk","Number":"2921","RawContent":null,"Title":"Forms dll not found when using Forms in a dependent DLL referenced by a project without Microsoft.NET.Sdk.WindowsDesktop","State":"open","Body":"We have some .NET Core applications that reference 3rd party assemblies (initially made for .NET Classic) that occasionally open a custom message box and therefore references Windows Forms.\r\n\r\nNow that .NET Core 3.0 supports Windows Forms we can finally use those assemblies in .NET Core applications who themselves do not use Windows Forms at all.\r\n\r\nHowever currently (SDK 3.0.100-preview-010184), the main application csproj that references this 3rd party assembly must be set to `<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">` event though it is just a simple console app and has no knowledge of the fact that one of its dependencies uses windows forms. If I do not set the SDK as above, I get the following exception: \r\n\r\n> System.IO.FileNotFoundException\r\n>   HResult=0x80070002\r\n>   Message=Could not load file or assembly 'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\r\n>   Source=winformslib\r\n>   StackTrace:\r\n>    at winforms.PublicApi.Show() in C:\\temp\\winforms\\winformslib\\Form1.cs:line 32\r\n>    at app.Program.Main(String[] args) in C:\\temp\\winforms\\app\\Program.cs:line 11\r\n\r\nHere is the code that can be used to reproduce the issue:\r\n\r\n*app.csproj*\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\winformslib\\winformslib.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n*Program.cs*\r\n```\r\nusing System;\r\nusing winforms;\r\n\r\nnamespace app\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"I will now open a windos form\");\r\n            PublicApi.Show();\r\n            Console.WriteLine(\"It should be open now\");\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*winformslib.csproj*\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n*Form1.cs*\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\n\r\nnamespace winforms\r\n{\r\n    internal partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            this.InitializeComponent();\r\n        }\r\n\r\n        private void buttonExit_Click(object sender, EventArgs e)\r\n        {\r\n            Application.Exit();\r\n        }\r\n    }\r\n\r\n    public static class PublicApi\r\n    {\r\n        public static void Show()\r\n        {\r\n            var form = new Form1();\r\n            form.Show();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/sdk/issues/2921","RelatedDescription":"Open issue \"Forms dll not found when using Forms in a dependent DLL referenced by a project without Microsoft.NET.Sdk.WindowsDesktop\" (#2921)"},{"Id":"408142603","IsPullRequest":true,"CreatedAt":"2019-02-08T14:41:28","Actor":"dotnet-maestro[bot]","Number":"2920","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19107.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19107.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2920","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2920)"},{"Id":"407980129","IsPullRequest":true,"CreatedAt":"2019-02-08T02:17:33","Actor":"dsplaisted","Number":"2919","RawContent":null,"Title":"Support \".Ref\" targeting packs and .NET Standard 2.1","State":"open","Body":"This supports the \".Ref\" targeting packs for .NET Core and ASP.NET Core, as well as .NET Standard 2.1.\r\n\r\nThe core-sdk repo needs to be updated to include these in the `KnownFrameworkReference` items in the bundled versions file.  However, we need to check this logic into the SDK (and flow it into core-sdk) first, because we changed the layout for the .NET Core targeting pack and things would fail if we bundled a version of the targeting pack that the SDK code couldn't understand.  (Note that the layout in this PR isn't necessarily final either.)\r\n\r\nThere's temporary logic in this PR to update the `KnownFrameworkReference` items to refer to the new targeting packs for testing purposes.  Once we do the round trip through core-sdk, we can remove that logic.\r\n\r\nAlso note that this PR currently adds a `KnownFrameworkReference` for NETStandard.Library, but that is checked in to core-sdk already (since it's for a new TargetFramework), so once we have a build from core-sdk with the changes from https://github.com/dotnet/core-sdk/pull/477, I will update this PR to remove that workaround.","Url":"https://github.com/dotnet/sdk/pull/2919","RelatedDescription":"Open PR \"Support \".Ref\" targeting packs and .NET Standard 2.1\" (#2919)"},{"Id":"407762335","IsPullRequest":false,"CreatedAt":"2019-02-07T16:03:27","Actor":"tester962","Number":"2916","RawContent":null,"Title":"Port \"Microsoft.WindowsDesktop.App\" to ARM/ARM64 Windows","State":"closed","Body":"Hi! I can't find the \"Microsoft.WindowsDesktop.App\" framework in ARM builds of the SDK.\r\nCan this be added?","Url":"https://github.com/dotnet/sdk/issues/2916","RelatedDescription":"Closed issue \"Port \"Microsoft.WindowsDesktop.App\" to ARM/ARM64 Windows\" (#2916)"},{"Id":"407688681","IsPullRequest":true,"CreatedAt":"2019-02-07T14:21:30","Actor":"dotnet-maestro[bot]","Number":"2915","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19106.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19106.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2915","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2915)"},{"Id":"407523414","IsPullRequest":false,"CreatedAt":"2019-02-07T03:01:57","Actor":"dsplaisted","Number":"2914","RawContent":null,"Title":"Decide whether to remove support for `dotnet store`","State":"open","Body":"The [runtime package store feature](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store) was used for ASP.NET Core in .NET Core 2.0, but was replaced by a shared framework for ASP.NET Core in 2.1.\r\n\r\nUsing the `dotnet store` command, it's also possible to create your own runtime store.  However, this has been a bit of a bug farm in .NET Core 3.0 (with all of the framework composition changes).  So we may want to remove support for creating a runtime store in the .NET Core 3 SDK.","Url":"https://github.com/dotnet/sdk/issues/2914","RelatedDescription":"Open issue \"Decide whether to remove support for `dotnet store`\" (#2914)"},{"Id":"407391022","IsPullRequest":true,"CreatedAt":"2019-02-07T02:57:23","Actor":"dsplaisted","Number":"2913","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"CI legs on #2887 started timing out when I updated stage 0, so this PR isolates the stage 0 update to see if that's the problem.","Url":"https://github.com/dotnet/sdk/pull/2913","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#2913)"},{"Id":"407278108","IsPullRequest":false,"CreatedAt":"2019-02-07T02:17:13","Actor":"vitek-karas","Number":"2912","RawContent":null,"Title":"Self contained publish on linux includes .a files","State":"closed","Body":"Using relatively new 3.0 SDK\r\n\r\n```\r\nmkdir ca1\r\ncd ca1\r\ndotnet new console\r\ndotnet publish --self-contained -r linux-x64\r\n```\r\n\r\nIn the publish directory there are 6 `.a` files which don't seem to have any purpose. Basically for every native library (`.so`) coming from CoreFx, there's a corresponding `.a` as well:\r\n```\r\n-rwxrw-rw- 1 vitek vitek 2836614 Feb  5 04:05 System.IO.Compression.Native.a\r\n-rwxrw-rw- 1 vitek vitek   27254 Feb  5 04:05 System.IO.Ports.Native.a\r\n-rwxrw-rw- 1 vitek vitek  396432 Feb  5 04:05 System.Native.a\r\n-rwxrw-rw- 1 vitek vitek   79868 Feb  5 04:05 System.Net.Http.Native.a\r\n-rwxrw-rw- 1 vitek vitek   29400 Feb  5 04:05 System.Net.Security.Native.a\r\n-rwxrw-rw- 1 vitek vitek  906184 Feb  5 04:05 System.Security.Cryptography.Native.OpenSsl.a\r\n```\r\nI don't think these files are needed for anything. \r\nPer customer report this also reproes on MacOS, but I didn't verify.","Url":"https://github.com/dotnet/sdk/issues/2912","RelatedDescription":"Closed issue \"Self contained publish on linux includes .a files\" (#2912)"},{"Id":"407224370","IsPullRequest":true,"CreatedAt":"2019-02-06T14:17:06","Actor":"dotnet-maestro[bot]","Number":"2911","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19105.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19105.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2911","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2911)"},{"Id":"406573912","IsPullRequest":false,"CreatedAt":"2019-02-05T23:36:39","Actor":"pranavkm","Number":"2906","RawContent":null,"Title":"Building a project with OutputType = Exe and implicit fx reference disabled causes build to fail.","State":"closed","Body":"## Repro steps\r\n\r\n1. dotnet new console\r\n2. Edit the project file to disable implicit fx reference and instead add an explicit reference to `Microsoft.NETCore.App`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n3. `dotnet build`\r\n\r\nBuild fails saying it was unable to copy the AssemblyName.exe file\r\n\r\n> C:\\Users\\Pranav\\.dotnet\\x64\\sdk\\3.0.100-preview-010184\\Microsoft.Common.CurrentVersion.targets(4560,5): error MSB3030: Could not copy the file \"D:\\temp\\test1\\obj\\Debug\\netcoreapp3.0\\test1.exe\" because it was not found. [D:\\temp\\test1\\test1.csproj]\r\n\r\nSetting `<UseAppHost>false</UseAppHost>` in the project file fixes things.\r\n\r\n*Background*:\r\nThe RazorSdk builds in a separate repo that's an arcade dependency to AspNetCore. The Sdk's test applications build against test shims rather than the actual AspNetCore fx to avoid cyclical dependencies. To do so, they set `DisableImplicitFrameworkReferences = true`.","Url":"https://github.com/dotnet/sdk/issues/2906","RelatedDescription":"Closed issue \"Building a project with OutputType = Exe and implicit fx reference disabled causes build to fail.\" (#2906)"},{"Id":"406926342","IsPullRequest":false,"CreatedAt":"2019-02-05T18:56:25","Actor":"natemcmaster","Number":"2910","RawContent":null,"Title":"Building a targeting and runtime pack locally","State":"open","Body":"In aspnet/AspNetCore, I'd like to build a large number of projects that fall into two groups\r\n\r\nA) produces an assembly in the AspNetCore framework\r\nB) references the AspNetCore framework\r\n\r\nWith the 3.0 Preview 2 SDK, I can get this working, but it feels hacky. Here's what I've done:\r\n\r\n* Change the repo bootstrapping to install to `$repoRoot/.dotnet`\r\n* Overridden NetCoreTargetingPackRoot  `<NetCoreTargetingPackRoot>$(RepoRoot).dotnet\\packs\\</NetCoreTargetingPackRoot>`\r\n* Created a dummy projects which copy build assets into NetCoreTargetingPackRoot. For example, Microsoft.AspNetCore.App.Ref.csproj copies assemblies into `$(RepoRoot).dotnet\\packs\\Microsoft.AspNetCore.App.Ref\\3.0.0-preview-t000\\ref\\netcoreapp3.0\\`\r\n* Add `<KnownFrameworkReference Update=\"Microsoft.AspNetCore.App\" ....`. This overrides bundled metadata so the SDK will look for \"my\" versions. (In aspnet, we use 't000' to mean 'local build')\r\n* Update all projects with a `FrameworkReference` to also have a ProjectReference (ReferenceOutputAssembly=false) to ensure the references are built first. (Done  repo-wide via Directory.Build.targets)\r\n\r\n## Problem\r\n\r\nThis \"pollutes\" the installation of the SDK with an imitation of a targeting pack. This will be problematic for build environments such as https://github.com/dotnet/source-build in which the repo is expected to use an externally-provided SDK: See https://github.com/dotnet/source-build/blob/master/Documentation/RepoApi.md. It would make it tricky to implement this \"API\" well:\r\n\r\n    /path/to/aspnet/build.sh -DotNetBuildFromSource true -DotNetCoreSdkDir \"/path/to/dotnet\"\r\n\r\nWe may not have write-access to DotNetCoreSdkDir.\r\n\r\n## Proposal\r\n\r\nI think the problem has a simple solution, so here's my proposal.\r\n\r\n1. Update `ResolveFrameworkReferences` to support resolving targeting and runtime packs from multiple folders\r\n2. Allow user projects to specify additional folders via property (this lets me control precedence)\r\n\r\nExample: `<NetCoreTargetingPackPaths>$(RepoRoot)tmp\\whatever\\;$(NetCoreTargetingPackPaths)</NetCoreTargetingPackPaths>`\r\n\r\ncc @pakrym @dagood @dsplaisted @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/2910","RelatedDescription":"Open issue \"Building a targeting and runtime pack locally\" (#2910)"},{"Id":"406771721","IsPullRequest":true,"CreatedAt":"2019-02-05T14:16:27","Actor":"dotnet-maestro[bot]","Number":"2909","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19104.18\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19104.18\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2909","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2909)"},{"Id":"406604347","IsPullRequest":false,"CreatedAt":"2019-02-05T02:21:52","Actor":"nguerrera","Number":"2908","RawContent":null,"Title":"Improve performance of ResolveFrameworkReferences and related tasks/targets","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2887#issuecomment-460488924\r\n","Url":"https://github.com/dotnet/sdk/issues/2908","RelatedDescription":"Open issue \"Improve performance of ResolveFrameworkReferences and related tasks/targets\" (#2908)"},{"Id":"406426405","IsPullRequest":false,"CreatedAt":"2019-02-04T17:02:21","Actor":"livarcocc","Number":"2905","RawContent":null,"Title":"Microsoft.PackageDependencyResolution.targets failed when project has %20 in the name","State":"open","Body":"We have git repo with whitespace in name \"Test repo\". Once I cloned it in Windows 8.1 I got path \"C:\\somepath\\Test%20repo\". This path was generated by git clone command. When I open ASP.NET Core project under this path I can't see cs files at all. Once I change %20 to simple ' ' space it works. Not sure is this .NET Core or VS2017 or even git, but it once you have such path with %20 .net core projects fails.\r\n\r\nThe git part is not really needed. Just adding %20 to the name of the project will lead to the error.","Url":"https://github.com/dotnet/sdk/issues/2905","RelatedDescription":"Open issue \"Microsoft.PackageDependencyResolution.targets failed when project has %20 in the name\" (#2905)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1093308202496647168","CreatedAt":"2019-02-07T00:39:22+00:00","UserScreenname":"dotnet","Text":"Did you know that the WPF team is hiring developers? If you're interested, ping Amit Kabra via @LinkedIn https://t.co/b3cxGZuhmP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":37,"RawContent":null},{"Id":"1093184056282337280","CreatedAt":"2019-02-06T16:26:04+00:00","UserScreenname":"dotnet","Text":"This is a great program. Go check it out! https://t.co/tR4dh1UcC5","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"1092843649904271360","CreatedAt":"2019-02-05T17:53:24+00:00","UserScreenname":"dotnet","Text":"Take a look at today's new On .NET episode.\n\n\"Learning Machine Learning with .NET, PyTorch and the ONNX Runtime\"… https://t.co/DLFVmdR0m1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":36,"RawContent":null},{"Id":"1091393276047876097","CreatedAt":"2019-02-01T17:50:08+00:00","UserScreenname":"dotnet","Text":"Into a different kind of curlies? Our C++ friends are hiring too! https://t.co/CWYhdMAqnt","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-02-13T05:30:44.9542892Z","RunDurationInMilliseconds":18191}