{"Data":{"Blog":{"FeedItems":[{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null},{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7861288625","Type":"IssuesEvent","CreatedAt":"2018-06-21T23:28:49","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1877","RelatedDescription":"Opened issue \"\"make framework-assemblies\" should not fail by broken framework lookup\" (#1877) at xamarin/xamarin-android","RelatedBody":"`make framework-assemblies` is to get all the frameworks and mono runtimes for each ABI and it need to run successfully (at least to build product). However it has been broken for months and it's never fixed:\r\n\r\n```\r\n\"/sources/xamarin-android/src/Mono.Android/Mono.Android.csproj\" (default target) (1) ->\r\n(GetReferenceAssemblyPaths target) -> \r\n  /devel/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(1140,5): error MSB3644: The reference assemblies for framework \"MonoAndroid,Version=v1.0\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [/sources/xamarin-android/src/Mono.Android/Mono.Android.csproj]\r\n```\r\n\r\n`make framework-assemblies` internally runs make and msbuild many times, and the verbose build log for the most relevant msbuild execution can be found at: https://gist.github.com/atsushieno/1b8861f733c2562953b47f7f59e3527c"},{"Id":"7861046927","Type":"PullRequestEvent","CreatedAt":"2018-06-21T22:14:25","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1876","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tests] prevent build logs locking up IDEs\" (#1876) at xamarin/xamarin-android","RelatedBody":"When running tests in Visual Studio's test runner UI (Windows and\r\nmacOS), a test failure causes an unpleasant experience...\r\n\r\nSince the entire MSBuild diagnostic log is contained in\r\n`FailedBuildException`, the UI will hang anywhere from 30 seconds to 1\r\nminute while it tries to render the exception details in the IDE.\r\n\r\nThe solution here is to:\r\n- Detect if the unit test is running inside an IDE\r\n- Don't include the build log in the exception details in this case\r\n\r\nOn Windows, we can detect the test running by the process name, which\r\nis either `testhost.x86` or `testhost.x64`.\r\n\r\nOn macOS, we can detect VS for Mac by looking for the\r\n`MONO_GAC_PREFIX` environment variable, which points to\r\n`/Applications/Visual Studio.app/Contents/Resources` by default.\r\n\r\nIf neither of these cases are met, such as command line, the exception\r\nremains unchanged."},{"Id":"7859996568","Type":"IssuesEvent","CreatedAt":"2018-06-21T18:25:59","Actor":"garuma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1778","RelatedDescription":"Closed issue \"Xamarin.Android designer: How to tell when in design mode\" (#1778) at xamarin/xamarin-android","RelatedBody":"I don't know if this is the right place for this question but I don't know where to find the team in charge of the Designer.\r\n\r\nIn MvvmCross we have a bunch of code that fails in the designer because we count on things set up in a certain way.  I want to be able to mock these so that we can at least get our widgets displaying something useful in design mode.  Android provides a `View.isInEditMode` but by that point it's too late (at least for a clean solution.  Is there any other way to determine if we are in the designer?\n\n> VS bug [#629212](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/629212)"},{"Id":"7859552516","Type":"IssuesEvent","CreatedAt":"2018-06-21T16:57:57","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1874","RelatedDescription":"Closed issue \"Failure to bind AAR library that depends on AppCompat and uses camera API\" (#1874) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an AAR binding library as described [in official documentation](https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/binding-an-aar/), but instead of example AAR, use AAR that depends on AppCompat and uses camera API, like for example [BlinkID Android AAR](https://github.com/BlinkID/blinkid-android/blob/master/LibBlinkID.aar).\r\n2. Try building the binding library\r\n3. It fails with these errors: [xamarin.log](https://github.com/xamarin/xamarin-android/files/2124255/xamarin.log)\r\n\r\nReference AppCompat by adding package `Xamarin.Android.Support.v7.AppCompat` to the binding library, but this fails with following log:\r\n\r\n```\r\nAttempting to gather dependency information for package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' with respect to project 'BlinkIDAARBinding', targeting 'MonoAndroid,Version=v4.1'\r\n  GET https://api.nuget.org/v3/registration3-gz-semver2/xamarin.android.support.v7.appcompat/index.json\r\n  OK https://api.nuget.org/v3/registration3-gz-semver2/xamarin.android.support.v7.appcompat/index.json 601ms\r\nTotal number of results gathered : 1\r\nGathering dependency information took 611.5 ms\r\nSummary of time taken to gather dependencies per source :\r\nhttps://api.nuget.org/v3/index.json\t-\t611.05 ms\r\nAttempting to resolve dependencies for package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1'\r\nResolved actions to install package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1'\r\nRetrieving package 'Xamarin.Android.Support.v7.AppCompat 27.0.2.1' from 'nuget.org'.\r\nFor adding package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' to project 'BlinkIDAARBinding' that targets 'monoandroid41'.\r\nInstall failed. Rolling back...\r\nPackage 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' does not exist in project 'BlinkIDAARBinding'\r\nPackage 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' does not exist in folder '/Users/dodo/Work/Microblink/deployRepos/blinkid/blinkid-xamarin/Samples/BlinkID-Xamarin-Android/packages'\r\nExecuting nuget actions took 131.95 ms\r\nCould not install package 'Xamarin.Android.Support.v7.AppCompat 27.0.2.1'. You are trying to install this package into a project that targets 'MonoAndroid,Version=v4.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\r\n```\r\n\r\nNext thing I tried is to manually download [AppCompat AAR](https://maven.google.com/com/android/support/appcompat-v7/27.1.1/appcompat-v7-27.1.1.aar) and create another binding library for it, using [the same instructions](https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/binding-an-aar/) as for my original AAR, however when building this binding library, I get following errors in build log:\r\n\r\n[xamarin-appcompat.log](https://github.com/xamarin/xamarin-android/files/2124293/xamarin-appcompat.log)\r\n\r\n\r\n### Expected Behavior\r\nThe created binding library should build and work.\r\n\r\n### Actual Behavior\r\nSee above.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.5.1 (build 22)\r\nInstallation UUID: af0c96ed-b55d-45fa-b2f3-1fef37c9d8af\r\nRuntime:\r\n\tMono 5.10.1.47 (2017-12/8eb8f7d5e74) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010047\r\n\r\nNuGet\r\nVersion: 4.3.1.4445\r\n\r\n.NET Core\r\nRuntime: Not installed\r\nSDK: Not installed\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nApple Developer Tools\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\nXamarin.Mac\r\nVersion: 2.10.0.103 (Visual Studio Community)\r\n\r\nXamarin.iOS\r\nVersion: 11.10.1.178 (Visual Studio Community)\r\nHash: 408d3574\r\nBranch: d15-7\r\nBuild date: 2018-05-08 18:56:30-0400\r\n\r\nXamarin.Android\r\nVersion: 8.3.0.19 (Visual Studio Community)\r\nAndroid SDK: /Users/dodo/android-sdks\r\n\tSupported Android versions:\r\n\t\t4.1 (API level 16)\r\n\t\t4.2 (API level 17)\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 28.0.0 rc2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_162\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_162-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nXamarin Inspector\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\nBuild Information\r\nRelease ID: 705010022\r\nGit revision: 60442dd643a20c7a4ae1f8705b8d1de8972eee78\r\nBuild date: 2018-05-15 01:43:39+00\r\nXamarin addins: 4194ffe4868321e4c3477bd56aed579bda4c6fbb\r\n\r\nOperating System\r\nMac OS X 10.13.5\r\nDarwin 17.6.0 Darwin Kernel Version 17.6.0\r\n    Tue May  8 15:22:16 PDT 2018\r\n    root:xnu-4570.61.1~1/RELEASE_X86_64 x86_64\r\n\r\n\r\n### Log File\r\nBuild logs attached above."},{"Id":"7859363258","Type":"IssuesEvent","CreatedAt":"2018-06-21T16:22:06","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1875","RelatedDescription":"Opened issue \"Empower error message around drawable resource names\" (#1875) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a File -> New Android Project\r\n2. Add an image named 1.jpg to a drawable folder\r\n3. You'll get the following errors:\r\n\r\n```\r\n1>  C:\\Users\\dougl\\source\\repos\\App40\\App40\\Resources\\Resource.Designer.cs(1982,21,1982,22): error CS1001: Identifier expected\r\n1>  C:\\Users\\dougl\\source\\repos\\App40\\App40\\Resources\\Resource.Designer.cs(1982,21,1982,22): error CS0145: A const field requires a value to be provided\r\n1>  C:\\Users\\dougl\\source\\repos\\App40\\App40\\Resources\\Resource.Designer.cs(1982,21,1982,22): error CS1003: Syntax error, ',' expected\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe error message should be more empowering such as:\r\n\r\n`The resource name must start with a letter`\r\n\r\n### Actual Behavior\r\n\r\nThe error message is cryptic and does not lead to a resolution\r\n\r\n### Version Information\r\n\r\nXamarin.Android 8.3.3.2\r\n"},{"Id":"7859058042","Type":"IssuesEvent","CreatedAt":"2018-06-21T15:30:26","Actor":"DoDoENT","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1874","RelatedDescription":"Opened issue \"Failure to bind AAR library that depends on AppCompat and uses camera API\" (#1874) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an AAR binding library as described [in official documentation](https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/binding-an-aar/), but instead of example AAR, use AAR that depends on AppCompat and uses camera API, like for example [BlinkID Android AAR](https://github.com/BlinkID/blinkid-android/blob/master/LibBlinkID.aar).\r\n2. Try building the binding library\r\n3. It fails with these errors: [xamarin.log](https://github.com/xamarin/xamarin-android/files/2124255/xamarin.log)\r\n\r\nReference AppCompat by adding package `Xamarin.Android.Support.v7.AppCompat` to the binding library, but this fails with following log:\r\n\r\n```\r\nAttempting to gather dependency information for package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' with respect to project 'BlinkIDAARBinding', targeting 'MonoAndroid,Version=v4.1'\r\n  GET https://api.nuget.org/v3/registration3-gz-semver2/xamarin.android.support.v7.appcompat/index.json\r\n  OK https://api.nuget.org/v3/registration3-gz-semver2/xamarin.android.support.v7.appcompat/index.json 601ms\r\nTotal number of results gathered : 1\r\nGathering dependency information took 611.5 ms\r\nSummary of time taken to gather dependencies per source :\r\nhttps://api.nuget.org/v3/index.json\t-\t611.05 ms\r\nAttempting to resolve dependencies for package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1'\r\nResolved actions to install package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1'\r\nRetrieving package 'Xamarin.Android.Support.v7.AppCompat 27.0.2.1' from 'nuget.org'.\r\nFor adding package 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' to project 'BlinkIDAARBinding' that targets 'monoandroid41'.\r\nInstall failed. Rolling back...\r\nPackage 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' does not exist in project 'BlinkIDAARBinding'\r\nPackage 'Xamarin.Android.Support.v7.AppCompat.27.0.2.1' does not exist in folder '/Users/dodo/Work/Microblink/deployRepos/blinkid/blinkid-xamarin/Samples/BlinkID-Xamarin-Android/packages'\r\nExecuting nuget actions took 131.95 ms\r\nCould not install package 'Xamarin.Android.Support.v7.AppCompat 27.0.2.1'. You are trying to install this package into a project that targets 'MonoAndroid,Version=v4.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\r\n```\r\n\r\nNext thing I tried is to manually download [AppCompat AAR](https://maven.google.com/com/android/support/appcompat-v7/27.1.1/appcompat-v7-27.1.1.aar) and create another binding library for it, using [the same instructions](https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/binding-an-aar/) as for my original AAR, however when building this binding library, I get following errors in build log:\r\n\r\n[xamarin-appcompat.log](https://github.com/xamarin/xamarin-android/files/2124293/xamarin-appcompat.log)\r\n\r\n\r\n### Expected Behavior\r\nThe created binding library should build and work.\r\n\r\n### Actual Behavior\r\nSee above.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.5.1 (build 22)\r\nInstallation UUID: af0c96ed-b55d-45fa-b2f3-1fef37c9d8af\r\nRuntime:\r\n\tMono 5.10.1.47 (2017-12/8eb8f7d5e74) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010047\r\n\r\nNuGet\r\nVersion: 4.3.1.4445\r\n\r\n.NET Core\r\nRuntime: Not installed\r\nSDK: Not installed\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nApple Developer Tools\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\nXamarin.Mac\r\nVersion: 2.10.0.103 (Visual Studio Community)\r\n\r\nXamarin.iOS\r\nVersion: 11.10.1.178 (Visual Studio Community)\r\nHash: 408d3574\r\nBranch: d15-7\r\nBuild date: 2018-05-08 18:56:30-0400\r\n\r\nXamarin.Android\r\nVersion: 8.3.0.19 (Visual Studio Community)\r\nAndroid SDK: /Users/dodo/android-sdks\r\n\tSupported Android versions:\r\n\t\t4.1 (API level 16)\r\n\t\t4.2 (API level 17)\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 28.0.0 rc2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_162\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_162-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nXamarin Inspector\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\nBuild Information\r\nRelease ID: 705010022\r\nGit revision: 60442dd643a20c7a4ae1f8705b8d1de8972eee78\r\nBuild date: 2018-05-15 01:43:39+00\r\nXamarin addins: 4194ffe4868321e4c3477bd56aed579bda4c6fbb\r\n\r\nOperating System\r\nMac OS X 10.13.5\r\nDarwin 17.6.0 Darwin Kernel Version 17.6.0\r\n    Tue May  8 15:22:16 PDT 2018\r\n    root:xnu-4570.61.1~1/RELEASE_X86_64 x86_64\r\n\r\n\r\n### Log File\r\nBuild logs attached above."},{"Id":"7858986221","Type":"IssuesEvent","CreatedAt":"2018-06-21T15:18:58","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1841","RelatedDescription":"Closed issue \"When two EditText are being used EditText unfocused gets the focus when one is in focus and the other one is in unfocussable state.\" (#1841) at xamarin/xamarin-android","RelatedBody":"\r\n[EditTextSample.zip](https://github.com/xamarin/xamarin-android/files/2111964/EditTextSample.zip)\r\n### Steps to Reproduce\r\n\r\nI have used the two EditText in Xamarin.Android project. One is Enabled true and other one is Enabled false. If I will not set the InputType and focus the first EditText the Next symbol was shown on the keypad. If I have pressed Next symbol, nothing happened. But I have set the InputType and focus the first EditText the Next symbol was shown on the Keypad. If I have pressed the Next symbol the focus gone into the disabled EditText. I have attached the simple sample. Please check and let me know the details.\r\n\r\n### Expected Behavior\r\nIt should not get the focus when it is unfocussable.\r\n\r\n### Actual Behavior\r\nIt is getting the focus when it is unfocussable.\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7861973665","Type":"PullRequestEvent","CreatedAt":"2018-06-22T04:06:33","Actor":"AxelUser","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3113","RelatedDescription":"Opened pull request \"[WIP] Fixing #2680 for ScrollView\" (#3113) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n- Implemented scrolling disabling for `ScrollView` via `ScrollOrientation.Neither`.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #2680 \r\n\r\n### API Changes ###\r\n\r\nChanged:\r\n- Added `Neither` to `ScrollOrientation`;\r\n- Added handling of `Neither` option in `ScrollView`;\r\n\r\n### Platforms Affected ###\r\n\r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNothing will change for old code, because these fixes handle only cases for `ScrollView` with `Orientation = ScrollOrientation.Neither`\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7861275654","Type":"IssuesEvent","CreatedAt":"2018-06-21T23:24:06","Actor":"Keboo","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3112","RelatedDescription":"Opened issue \"ScrollView on iOS resets its scroll offset\" (#3112) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn iOS the `UIScrollView` used to render the `ScrollView` resets its [contentOffset](https://developer.apple.com/documentation/uikit/uiscrollview/1619404-contentoffset) to (0,0) when the size of the ScrollView changes. The examples used here use horizontal scrolling, but the same issue applies in vertical mode, it just takes more effort to re-create the same conditions. \r\nI believe this is the same issue described in this [existing bugzilla report](https://bugzilla.xamarin.com/show_bug.cgi?id=43947).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a XF app.\r\n2. Add a `ScrollView`. It should be positioned inside of a container such that its size can change. For simplicity, I set its Orientation to Horizontal, and centered inside of a `Grid`.\r\n3. Add content to the `ScrollView`. For my example I simply used a `StackLayout` (Orientation horizontal), with a bunch of `Labels`.\r\n4. Scroll the `ScrollView`, the cause its size to change. For this I added a `TapGestureRecognizer` that changed the `HeightRequest` of the label.\r\n\r\n### Expected Behavior\r\nThe `ScrollView` should maintain its offset.\r\n\r\n### Actual Behavior\r\nThe `ScrollView` resets its offset to 0.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: \r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: \r\n  - iOS:  11.4\r\n  - Xamarin.Forms: 3.1.0.583944 (though I suspect it goes back to 2.3.2)\r\n\r\n### Screenshots\r\n\r\n![scrollviewererror](https://user-images.githubusercontent.com/952248/41750174-5548f0e8-756f-11e8-9e7b-81acb088a10c.gif)\r\n\r\n### Reproduction Link\r\n\r\nExample project shown above is [here](https://github.com/Keboo/Xamarin.Forms.ScrollViewer.Bug)\r\nThere is also a sample project on the original [bugzilla report](https://bugzilla.xamarin.com/show_bug.cgi?id=43947)\r\n\r\n### Analysis\r\nIn my [example project ](https://github.com/Keboo/Xamarin.Forms.ScrollViewer.Bug) I have also included a workaround that I am using in my project. What follows is how I came to it.\r\nThe reset is occurring because the ContentSize of the `UIScrollView` is being set to a value smaller than the current `contentOffset`. Because the `contentOffset` is no longer contained with the new `contentSize` so it resets the `contentOffset` to (0,0). \r\n\r\nIn the [iOS ScrollViewRenderer.OnNativeControlUpdated](https://github.com/xamarin/Xamarin.Forms/blob/47fd55130bfa9bd78188d2c55b9ec3abef3cd8ea/Xamarin.Forms.Platform.iOS/Renderers/ScrollViewRenderer.cs#L214-L218) it sets the ContentSize to be equal to the `Bounds.Size`. In the example project, this set is what triggers the the `contentOffset` to move to (0,0). It then calls [ScrollViewRenderer.UpdateContentSize](https://github.com/xamarin/Xamarin.Forms/blob/47fd55130bfa9bd78188d2c55b9ec3abef3cd8ea/Xamarin.Forms.Platform.iOS/Renderers/ScrollViewRenderer.cs#L263-L268) which then properly resets the ContentSize based on the new ContentSize from the Forms element.\r\n\r\nFor my workaround, I simply derive from the ScrollViewRenderer and override the ContentSize property. It then blocks any change to this property that disagrees with the Forms ContentSize. At least for my application this is an acceptable workaround. However I suspect this may not work in all cases.\r\n"},{"Id":"7861159442","Type":"IssuesEvent","CreatedAt":"2018-06-21T22:47:14","Actor":"philmoz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3111","RelatedDescription":"Opened issue \"iOS - UISwitch.Appearance.OnTintColor broken in 3.1.0.583944 update.\" (#3111) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThe iOS setting UISwitch.Appearance.OnTintColor no longer works after the Xamarin.Forms 3.1.0.583944 update.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set UISwitch.Appearance.OnTintColor in the AppDelegage.cs FinishedLaunching method.\r\n(see https://docs.microsoft.com/en-au/xamarin/xamarin-forms/platform/ios/theme#uiswitch)\r\n\r\n### Expected Behavior\r\n\r\nOn iOS switches show the selected colour when in the On state.\r\n\r\n### Actual Behavior\r\n\r\nSwitches are shown with the default iOS green colour in the On state.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.583944\r\n- Last known good version: 3.0.0.561731\r\n- IDE: Visual Studio for Mac 7.5.3 (build 7)\r\n"},{"Id":"7861019081","Type":"IssuesEvent","CreatedAt":"2018-06-21T22:06:50","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3015","RelatedDescription":"Closed issue \"[UWP] : App crash when Loader and Alert popup collide.\" (#3015) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nIf Loader is running and Any Alert pop's up app crashes with following error message\r\nWhen multiple alerts are opened at the same time, UWP crashes with \"Only a single ContentDialog can be open at any time.\"\r\n\r\n   at Windows.UI.Xaml.Controls.ContentDialog.ShowAsync()\r\n   at Xamarin.Forms.Platform.UWP.Platform.<ShowAlert>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Xamarin.Forms.Platform.UWP.Platform.<OnPageAlert>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.<>c.<ThrowAsync>b__6_0(Object state)\r\n   at System.Threading.WinRTSynchronizationContextBase.Invoker.InvokeCore()\r\n\r\n\r\n### Bugs Fixed\r\nfixes #2369 - getting same error message.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Try to open Alert PopUp  while loader is running. \r\n2. App will not crash every time but if do fast process it will crash.\r\n\r\nFor Loader i am using\r\n Acr.UserDialogs - v7.0.1.\r\n\r\n private async void ButtonClickCommandReceiver()\r\n        {\r\n            try\r\n            {\r\n                UserDialogs.Instance.ShowLoading(\"Loading...\");\r\n                // Service call \r\n                await Application.Current.MainPage.DisplayAlert(\"Alert\", \"Add Item ?\", \"Yes\", \"No\");\r\n            }\r\n            catch (System.Exception ex)\r\n            {\r\n                Debug.WriteLine(ex.Message);\r\n            }\r\n        }\r\n\r\n\r\n### Expected Behavior\r\n - App should not crash\r\n\r\n### Actual Behavior\r\n - App crashes with  following error message:\r\n\r\nWhen multiple alerts are opened at the same time, UWP crashes with \"Only a single ContentDialog can be open at any time.\"\r\n\r\n### Basic Information\r\n\r\n- Version with issue: \r\nIssue was their in XF 2.4.0.275 - pre3 version and now i am using XF - 3.0.0.482510 issue still exist.\r\n- Last known good version: NA\r\n- IDE: Microsoft Visual Studio Community 2017 \r\n- Platform Target Frameworks: \r\n  - UWP: 16299\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n  Acr.UserDialogs - v7.0.1.\r\n   XF - 3.0.0.482510\r\n- Affected Devices: UWP\r\n"},{"Id":"7860798645","Type":"IssuesEvent","CreatedAt":"2018-06-21T21:14:24","Actor":"solomonfried","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3110","RelatedDescription":"Opened issue \"ArgumentNullException trying to load a custom font.\" (#3110) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI have an application that runs on UWP, Android and iOS. \r\nMy issue is on iOS. \r\nI have a custom font which I have added to Info.plist. The application would throw an ArgumentNullException at startup but was able to continue and the fonts displayed properly. However the application would eventually crash.\r\nIf I removed the fonts from the list, the application would start without any exceptions (but of course the fonts would not display.\r\n\r\nTrying to track the issue, I have removed the font from info.plist and am trying to register the fonts in code. (main.cs or AppDelegate,cs). The same exception is being thrown trying to create the font.\r\n\r\nI have attached the font file.\r\n[PnqAppFonts.zip](https://github.com/xamarin/Xamarin.Forms/files/2125335/PnqAppFonts.zip)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Fonts directory under Resources. \r\n2. Add the Font File (attached) \r\n3. At the beginning of the FinishedLaunching method in AppDelegate, add the following code \r\n\r\n```\r\nNSError error; \r\nvar f2 = CGFont.CreateWithFontName(\"Fonts/PnqAppFonts.otf\"); \r\nif (!CTFontManager.RegisterGraphicsFont(f2, out error)) \r\n{ \r\n     Debug.WriteLine( $\"!!! Font Register Error! Name = {f2.FullName}, Error = \r\n          {error.LocalizedFailureReason}\"); \r\n}\r\n```\r\n\r\n\r\n### Expected Behavior\r\nCGFont.CreateWithFontName should work\r\n### Actual Behavior\r\n ```\r\n {System.ArgumentNullException: Value cannot be null.\r\nParameter name: handle\r\n  at CoreGraphics.CGFont..ctor (System.IntPtr handle, System.Boolean owns) [0x00013] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/CoreGraphics/CGFont.cs:54 \r\n  at CoreGraphics.CGFont.CreateWithFontName (System.String name) [0x0000c] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/CoreGraphics/CGFont.cs:113 \r\n  at PositionalGridDriver.iOS.AppDelegate.FinishedLaunching (UIKit.UIApplication app, Foundation.NSDictionary options) [0x00002] in C:\\projects.vs\\classtars\\libraries\\PositionalGrid\\PositionalGridDriver\\PositionalGridDriver.iOS\\AppDelegate.cs:35 }\r\n```\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE: VS2017\r\n- Platform Target Frameworks: \r\n  - iOS:  11.12.0.4\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7860711310","Type":"IssuesEvent","CreatedAt":"2018-06-21T20:55:27","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1423","RelatedDescription":"Closed issue \"Xamarin.Forms UWP ButtonRenderer UpdateContent() ImageOpened event NullReferenceException\" (#1423) at xamarin/Xamarin.Forms","RelatedBody":"I'm getting an intermittent NullReferenceException from the ImageOpened event handler in the UWP ButtonRenderer UpdateContent() function.\r\n\r\nThe culprit appears to be this line:\r\nElement.InvalidateMeasureNonVirtual(InvalidationTrigger.RendererReady);\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Platform.UAP/ButtonRenderer.cs#L154\r\n\r\nIt seems that \"Element\" is getting set to null somewhere between the creation of my button and the ImageOpened event triggering.\r\n\r\nAn easy fix would be to capture the current value of Element in a temporary variable and use that in the lambda function.\r\n\r\nThere's a few other comments regarding the issue at these links, but I couldn't find any other direct reports of this bug\r\n\r\nForum › Xamarin.Forms › Xamarin.Forms Releases\r\nXamarin.Forms 2.3.4.270\r\nhttps://forums.xamarin.com/discussion/comment/264585/#Comment_264585\r\n\r\nalexrainman/CarouselView UWP: crash on window resize #199\r\nhttps://github.com/alexrainman/CarouselView/issues/199#issuecomment-322115694\r\n"},{"Id":"7860484918","Type":"IssuesEvent","CreatedAt":"2018-06-21T20:08:38","Actor":"MappingSteve","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3108","RelatedDescription":"Closed issue \"ListView item context actions do not display on Android\" (#3108) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nSwipe from right on a ListView item with attached context actions does not display those actions, on Android.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download https://developer.xamarin.com/samples/xamarin-forms/UserInterface/ListView/interactivity/\r\n2. Update Nuget components; run. A list of common household items appears.\r\n3. Swipe any item from right.\r\n\r\n\r\n### Expected Behavior\r\n\r\nContext actions appear at the right edge of the item.\r\n\r\n### Actual Behavior\r\n\r\n**Usually**: Slight gray color as press indicates touch is seen, but no actions appear.\r\n\r\n**If long-press before** swipe to left: context actions appear AT THE TOP OF THE LIST, instead of on the item. This is not useful because there is no way to tell which item it will apply to. In particular, if you then swipe-left on a DIFFERENT item, the correct behavior is that the original context actions disappear, and new ones appear on the NEW item, so you know you are now acting on it.\r\n\r\nUPDATE: I see from docs that this is the implemented location. While that isn't good, more important is that **I swiped many times before** I accidentally discovered I needed to press longer for this to work at all.\r\n\r\n**What does work**: IF these actions appear (though in the wrong location), clicking on one does call the expected method, and remove the visual actions. (Though I did not check whether the binding is the swiped item.)\r\n\r\n\r\n### Expected Behavior #2\r\n\r\nIf the context actions do appear (AT THE TOP OF THE LIST), it should be possible to **dismiss** them by **tapping on any OTHER list item**. That should dismiss any context actions, then activate the tap.\r\n\r\n(**Scrolling the list** should also **dismiss**; not tested because this sample does not have a list that extends beyond bottom of screen.)\r\n\r\n### Actual Behavior #2\r\n\r\nNothing happens. (The context actions remain on screen.)\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue:  tested both 3.0.0.561731 and 30.1.583944.\r\n\r\n- Last known good version: Unknown.\r\n\r\n- IDE: VS 2017.\r\n\r\n- Platform Target Frameworks:\r\n  - Android: 8.1\r\n- Android Support Library Version: tested both 25.4.0.2 and 27.0.2.1\r\n- Nuget Packages:  NetStandard 2.01\r\n\r\n- Affected Devices:  Android Emulator running Android 7.1.1, on Surface Pro 2017 touchscreen.\r\n\r\n\r\n### Reproduction Link\r\n\r\nhttps://developer.xamarin.com/samples/xamarin-forms/UserInterface/ListView/interactivity/\r\n"},{"Id":"7860459824","Type":"PullRequestEvent","CreatedAt":"2018-06-21T20:03:21","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3109","RelatedDescription":"Opened pull request \"Use GestureDetector constructor that takes in Context 3.0\" (#3109) at xamarin/Xamarin.Forms","RelatedBody":"This is just to get these changes into an early branch so that once 15.8 drops we'll still be able to compile\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/pull/2836"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7861951162","Type":"PullRequestEvent","CreatedAt":"2018-06-22T03:56:58","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4321","RelatedDescription":"Opened pull request \"[Vision] Update bindings to Xcode 10 beta 1, nothing in beta 2\" (#4321) at xamarin/xamarin-macios","RelatedBody":"Please review, this is the third iteration of the binding because I wasn't happy with the result:\r\n\r\nProblem\r\n======\r\n\r\nThe binding exposes new methods that take a revision number of what I presume is the version of the implementation of said API, for example:\r\n\r\n```objective-c\r\n+ (instancetype)observationWithRequestRevision:(NSUInteger)requestRevision boundingBox:(CGRect)boundingBox\r\n```\r\n\r\nThis method by itself is problematic because it is `static` + `instancetype` so it must be inlined on every subclass to return the actual type the its meant to be creating instead of top most parent class, this way we will save our customers tons of downcast pain.\r\n\r\nThe second issue is the weak requestRevision that takes an `nuint` and the headers are full of this kind of constants\r\n\r\n```objective-c\r\nstatic const NSUInteger VNDetectBarcodesRequestRevision1 = 1;\r\n``` \r\n\r\nJourney\r\n======\r\n\r\nI iterated 3 times over the API because I wasn't happy with the actual results of if:\r\n\r\n### First iteration:\r\n\r\nJust the raw bindings taking `NSUInteger` I did not like this because the actual constants were not discoverable because the constant would be hidden inside the class like `VNDetectBarcodesRequest.Revision1` which isn't obvious without a trip to the documentation.\r\n\r\n### Second iteration\r\n\r\nI moved all the constants into actual enums like:\r\n\r\n```csharp\r\n[Native]\r\nenum VNDetectFaceLandmarksRequestRevision : ulong {\r\n\tUnspecified = 0,\r\n\tOne = 1,\r\n\tTwo = 2,\r\n}\r\n```\r\n\r\nBut it was very repetitive and I created an additional issue for myself because not all `VNRequest` subclasses had matching enums so it was not possible to assign one to each and the difficulty to also assign a typed array of enums to `SupportedVersions` which leads me to the final iteration.\r\n\r\n### Third iteration\r\n\r\nA single enum to rule them all, introducing `VNRequestRevision` which will hold all the versions of the different APIs, this is kinda mix between first and second iterations.\r\n\r\nThe APIs will take `VNRequestRevision` enum instead of just a plain `nuint`, fortunately the classes provide a way to check available versions via `SupportedVersions` static property so users can dig in which version the API supports and use that; also `DefaultRevision` and `CurrentRevision` are available to deal with this. These static properties must be inlined on every subclass so the correct class_ptr is used."},{"Id":"7861433175","Type":"PullRequestEvent","CreatedAt":"2018-06-22T00:25:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4320","RelatedDescription":"Opened pull request \"Bump master versions over 15.8 branch\" (#4320) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7860232314","Type":"PullRequestEvent","CreatedAt":"2018-06-21T19:13:51","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4318","RelatedDescription":"Merged pull request \"[tests] Fix introspection tests when running on Mojave (10.14)\" (#4318) at xamarin/xamarin-macios","RelatedBody":"Mostly known iOS cases that are now part included in macOS.\n\nTwo failures remains until the AppKit update is merged, i.e.\nboth were _upgraded_ to conform to `NSSecureCoding`\n\n```\n[FAIL] NSBezierPath conforms to NSSecureCoding but does not implement INSSecureCoding\n[FAIL] NSGradient conforms to NSSecureCoding but does not implement INSSecureCoding\n```"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":41,"FavoriteCount":17,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":63,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":19,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":67,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null},{"Id":"1005116748180402176","CreatedAt":"2018-06-08T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/vjjKyuTsDH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"1004839391477592064","CreatedAt":"2018-06-07T21:35:54+00:00","UserScreenname":"xamarinhq","Text":"Check out the code for the #MSBuild 2018 Conference Vision demo app: https://t.co/tpcBITRsnu https://t.co/kVwUJR5NoL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":158,"FavoriteCount":84,"RawContent":null},{"Id":"1004743034813276160","CreatedAt":"2018-06-07T15:13:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/88r7PENPNw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1004393225787002881","CreatedAt":"2018-06-06T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/6IkmiiY1Jp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":32,"RawContent":null},{"Id":"1004381931470049282","CreatedAt":"2018-06-06T15:18:07+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/6jygocRw2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":24,"RawContent":null},{"Id":"1004017778859347975","CreatedAt":"2018-06-05T15:11:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/rS6ZWBVQDw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2018-06-22T05:31:00.3803793Z","RunDurationInMilliseconds":3972}