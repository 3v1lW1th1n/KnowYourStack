{"Data":{"Blog":{"FeedItems":[{"Title":"Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T14:03:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Update 2/15/19 @3:35 PM (PST): As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null},{"Title":"Microsoft’s Developer Blogs are Getting an Update","PublishedOn":"2019-02-13T19:49:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"In the coming days, we’ll be moving our developer blogs to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/microsofts-developer-blogs-are-getting-an-update/","RawContent":null},{"Title":"Help us make the .NET Architecture guides better for you!","PublishedOn":"2019-02-13T15:47:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the last couple of years, we worked with experts to create some incredible architecture guides &#38; reference samples for .NET developers. We focused on Microservices Architecture, Modernizing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/help-us-make-the-net-architecture-guides-better-for-you/","RawContent":null},{"Title":".NET Framework February 2019 Security and Quality Rollup","PublishedOn":"2019-02-13T14:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Updated: February 15, 2019 A new Advisory on February 2019 Security update for Windows 10 update 1809 has been released today for issues customers have reported with .NET 4.8 Preview and this security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes. .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/12/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/07/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T16:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft. F# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/05/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":51,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3734","PublishedOn":"2019-01-29T00:30:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are getting closer to the final version now! This release includes several accessibility, performance and reliability fixes across the major framework libraries. We will continue to stabilize this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/announcing-net-framework-4-8-early-access-build-3734/","RawContent":null},{"Title":"Help us plan the future of .NET and Big Data","PublishedOn":"2019-01-28T22:05:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We’re currently looking into how we can make .NET great for Big Data scenarios.    Please fill out the survey below and help shape how we can improve .NET for Big Data by sharing your experiences,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/help-us-plan-the-future-of-net-and-big-data/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9084725025","Type":"PullRequestEvent","CreatedAt":"2019-02-18T05:16:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22669","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#22669) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19115.1\r\n\r\n"},{"Id":"9084723956","Type":"PullRequestEvent","CreatedAt":"2019-02-18T05:16:21","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22670","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#22670) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19117.1\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19117.1\r\n\r\n"},{"Id":"9084720598","Type":"PullRequestEvent","CreatedAt":"2019-02-18T05:15:10","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22596","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/core-setup\" (#22596) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27413-11\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27414-11\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27416-4\r\n\r\n"},{"Id":"9084712907","Type":"PullRequestEvent","CreatedAt":"2019-02-18T05:12:29","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22645","RelatedDescription":"Merged pull request \"Fix Integer Rounding issue and duplicate definition of __deref in sal.h\" (#22645) at dotnet/coreclr","RelatedBody":""},{"Id":"9084632456","Type":"IssuesEvent","CreatedAt":"2019-02-18T04:44:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22671","RelatedDescription":"Closed issue \"Add Marshal.StructureToSpan\" (#22671) at dotnet/coreclr","RelatedBody":"I think it will be nice to have the possibility to marshal a structure directly into a Span instead to have to pass from a IntPtr that always forces you to do a copy.\r\nUsing a Span will permits to use stack memory to convert the struct to a Span<byte>.\r\n\r\nFor example having this struct:\r\n\r\n```cs\r\n   [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MyStruct\r\n    {\r\n        int a;\r\n        \r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)]\r\n        string b;\r\n\r\n        public MyStruct(int a, string b)\r\n        {\r\n            this.a = a;\r\n            this.b = b;\r\n        }\r\n    }\r\n```\r\n\r\nTo actually convert it to a Span<byte> I have to do:\r\n\r\n```cs\r\n        private static Span<byte> CvtStructToSpan<T>(T item) where T : struct\r\n        {\r\n            int rawSize = Marshal.SizeOf(typeof(T));\r\n            IntPtr buffer = Marshal.AllocHGlobal(rawSize);\r\n            Marshal.StructureToPtr(item, buffer, false);\r\n            byte[] rawData = new byte[rawSize];\r\n            Marshal.Copy(buffer, rawData, 0, rawSize);\r\n            Marshal.FreeHGlobal(buffer);\r\n            return rawData;\r\n        }\r\n```\r\n\r\nBut this is obviously not efficient what about writing in the Span directly?\r\n\r\nSomething similar to this:\r\n\r\n```cs\r\n        private static Span<byte> CvtStructToSpan<T>(T item) where T : struct\r\n        {\r\n            int rawSize = Marshal.SizeOf(typeof(T));\r\n            Span<byte> buffer = stackalloc(rawSize);\r\n            Marshal.StructureToSpan(item, buffer, false);\r\n            return buffer;\r\n        }\r\n```"},{"Id":"9084591033","Type":"PullRequestEvent","CreatedAt":"2019-02-18T04:29:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22668","RelatedDescription":"Merged pull request \"Delete RtlMoveMemory and tests\" (#22668) at dotnet/coreclr","RelatedBody":""},{"Id":"9084105071","Type":"IssuesEvent","CreatedAt":"2019-02-18T01:43:52","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22676","RelatedDescription":"Opened issue \"Many tests failed with System.IO.FileNotFoundException\" (#22676) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitstressregs8_tst/39/\r\n\r\n**one of failed log:**\r\n```\r\nbaseservices_compilerservices._dynamicobjectproperties_test448035_test448035_._dynamicobjectproperties_test448035_test448035_cmd [FAIL]\r\n        \r\n  Unhandled Exception: System.IO.FileNotFoundException: ZapRequire: Could not get native image for test448035.\r\n  Use FusLogVw.exe to check the reason.\r\n  A subdirectory or file IL already exists.\r\n        The system cannot find the file specified.\r\n        Error compiling test448035.org: The system cannot find the file specified. (Exception from HRESULT: 0x80070002 (COR_E_FILENOTFOUND))\r\nEXEC : error : file \"test448035.org\" or one of its dependencies was not found [C:\\j\\workspace\\arm_cross_che---1b7b6972\\tests\\runtest.proj]\r\n```"},{"Id":"9084075175","Type":"IssuesEvent","CreatedAt":"2019-02-18T01:32:23","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22675","RelatedDescription":"Opened issue \"Test failed:  Loader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh\" (#22675) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/50/\r\n\r\n**Failed tests:**\r\nLoader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh\r\n\r\n**Log:**\r\n```\r\nLoader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh [FAIL]\r\n        /n/nReturn code:      1/nRaw output file:      /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Loader/NativeLibs/Reports/Loader.NativeLibs/FromNativePaths/FromNativePaths.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun FromNativePaths.exe ''\r\n        FromNativePaths failed: Failed to load the native library: Unable to find an entry point named 'NativeFunc' in shared library 'FromNativePaths_lib'.\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/n> /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Loader/NativeLibs/FromNativePaths/FromNativePaths.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/bin/tests/Linux.arm.Checked/TestWrappers/Loader.NativeLibs/Loader.NativeLibs.XUnitWrapper.cs(109,0): at Loader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh()\r\n```"},{"Id":"9084023958","Type":"IssuesEvent","CreatedAt":"2019-02-18T01:12:27","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22674","RelatedDescription":"Opened issue \"error MSB4020 in arm_cross_checked_windows_nt_r2r_tst\" (#22674) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm_cross_checked_windows_nt_r2r_tst/45/\r\n\r\n**Log:**\r\n```\r\nC:\\j\\workspace\\arm_cross_che---583430d8\\tests\\dir.props(111,3): error MSB4020: The value \"\" of the \"Project\" attribute in element <Import> is invalid. [C:\\j\\workspace\\arm_cross_che---583430d8\\tests\\runtest.proj]\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9084560570","Type":"IssuesEvent","CreatedAt":"2019-02-18T04:18:15","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10743","RelatedDescription":"Closed issue \"dotnet migrate --help says \"Migration failed.\" before printing help\" (#10743) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet migrate --help\r\n\r\n## Expected  behavior\r\nOnly help would be displayed.\r\n\r\n## Actual behavior\r\nMessage \"Migration failed.\" + help is displayed.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download"},{"Id":"9083994155","Type":"IssuesEvent","CreatedAt":"2019-02-18T00:59:33","Actor":"KathleenDollard","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10820","RelatedDescription":"Opened issue \"Improve message when roll forward fails\" (#10820) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nRun an app, dll or exe that does not have the requested major version of the runtime. \r\n\r\nOne way to do this is to install most global tools on a machine with only the .NET Core 3.0 previews on it. \r\n\r\n## Current behavior\r\n\r\n```\r\n$ dotnetsay Hi\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n  - The following versions are installed:\r\n      3.0.0-preview-27122-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n      3.0.0-preview-27218-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n## Suggested behavior\r\n\r\n```\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.0' was not found. The following frameworks were found:\r\n      3.0.0-preview-27122-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n      3.0.0-preview-27218-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework. .NET Core framework (Microsoft.NETCore.App) can be found at https://aka.ms/dotnet-download.\r\n \r\nYou can find out more about .NET Core prerequisites at https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n```\r\n\r\nIs SDK relevant in downloads (removed)?\r\n\r\nRemoved `- Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet`\r\nCan the viewer of this message do anything with this message? Can we just remove this, or if it adds value, lets extend this to share that value more clearly\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009988\r\n Commit:    8d071f3d19\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009988/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009988 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9083595054","Type":"IssuesEvent","CreatedAt":"2019-02-17T21:43:00","Actor":"cveld","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10819","RelatedDescription":"Opened issue \"dotnet sln remove -- flattens the solution items\" (#10819) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Set up an sln with nested solution items.\r\n- Remove a project\r\n\r\n## Expected  behavior\r\nThe nested solution items should be preserved.\r\n\r\n## Actual behavior\r\nThe nested solution items get flattened.\r\nFor a repro see the following repo: https://github.com/cveld/dotnet-cli-sln-remove-issue\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9083045931","Type":"PullRequestEvent","CreatedAt":"2019-02-17T17:21:58","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10818","RelatedDescription":"Opened pull request \"Update sdk version to 3.0.100-preview3.19116.2\" (#10818) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9080134815","Type":"PullRequestEvent","CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1072) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n"},{"Id":"9080118293","Type":"PullRequestEvent","CreatedAt":"2019-02-16T13:00:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1072) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n"},{"Id":"9077848937","Type":"PullRequestEvent","CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Merged pull request \"Label package as 'preview3'\" (#1069) at dotnet/standard","RelatedBody":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst"},{"Id":"9077848287","Type":"PullRequestEvent","CreatedAt":"2019-02-15T20:32:45","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1067","RelatedDescription":"Merged pull request \"Add netstandard.xml Intellisense file back to NetStandard.Library\" (#1067) at dotnet/standard","RelatedBody":"The SDK expects `XmlDocFileRoot` to be defined by the repo so that it can find the intellisense file to binplace into the package - redefining this property makes it so we get `netstandard.xml` in the package again for 2.1.\r\n\r\nCC @dsplaisted @terrajobst "},{"Id":"9077345221","Type":"IssuesEvent","CreatedAt":"2019-02-15T19:00:06","Actor":"mpetrinidev","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Opened issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071) at dotnet/standard","RelatedBody":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do i solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance"},{"Id":"9075160304","Type":"PullRequestEvent","CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1070) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n"},{"Id":"9075104673","Type":"PullRequestEvent","CreatedAt":"2019-02-15T13:00:51","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1070) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9084709529","Type":"IssuesEvent","CreatedAt":"2019-02-18T05:11:19","Actor":"tmat","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30823","RelatedDescription":"Closed issue \"SignatureDecoder does not support ELEMENT_TYPE_INTERNAL (0x21)\" (#30823) at dotnet/corefx","RelatedBody":"The System.Reflection.Metadata.Ecma335.SignatureDecoder structure currently throws an exception when it encounters ELEMENT_TYPE_INTERNAL in a signature. It seems to be mostly used with DynamicMethods and the like and probably is not included in the official specs, but (optional, e.g. via a flag) support for this would be nice to have.\r\n\r\nThe C++ sigparser in the CLR implements it: https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/utilcode/sigparser.cpp#L105\r\n\r\nIt would make sense to have the SignatureDecoder support things the runtime outputs so one can parse signatures created by the runtime (e.g. the local variable signature of a DynamicMethod), which currently is not possible, at least with this library."},{"Id":"9083700759","Type":"IssuesEvent","CreatedAt":"2019-02-17T22:34:19","Actor":"ycrumeyrolle","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35386","RelatedDescription":"Opened issue \"Allow to get string as a byte array/ROS<byte> from the Utf8JsonReader\" (#35386) at dotnet/corefx","RelatedBody":"The `Utf8JsonReader` allow to read a string with the method `.GetString()`. \r\nThis method will unescape the characters thanks to `JsonReaderHelper.Unescape()`\r\n\r\nIt is possible to read a byte array representing a string with the couple ValueSequence/ValueSpan, but the characters will not be escaped. \r\n\r\nFor performance reason, it would be great to have an option to read a string as its byte array/ReadOnlySpan<byte> representation, but still unescaped, by exposing a `.GetUtf8String()` to the `Utf8JsonReader`, or by exposing the `JsonReaderHelper.Unescape()` method as public.\r\n\r\n"},{"Id":"9083667436","Type":"IssuesEvent","CreatedAt":"2019-02-17T22:18:08","Actor":"ycrumeyrolle","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35385","RelatedDescription":"Opened issue \"Utf8JsonWriter does not respect RFC8259\" (#35385) at dotnet/corefx","RelatedBody":"The RFC8259 define as follow the character escaping:\r\nhttps://tools.ietf.org/html/rfc8259#section-7\r\n\r\n> All Unicode characters may be placed within the quotation marks, except for the characters that MUST be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F).\r\n\r\n> unescaped = %x20-21 / %x23-5B / %x5D-10FFFF\r\nMeaning that the escaped characters MUST be %x00-19 / %x22 / %x5C\r\n\r\nCurrently, the `Utf8JsonWriter` is escaping too much:\r\nunescaped = %x00-19 / %x22 / %x26 / %x27 %x2B / %x3C / %x3E / %x5C / %x61 / %x7F / %x80-FF\r\n\r\nIf the reason is for security, you may propose as a `JsonWriterOptions` a strict character table, and a safer character table.\r\n\r\nRelated to #34958\r\n@ahsonkhan "},{"Id":"9083627566","Type":"IssuesEvent","CreatedAt":"2019-02-17T21:58:39","Actor":"hognevevle","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35376","RelatedDescription":"Closed issue \"HttpWebRequest with default SocketsHttpHandler hangs for certain endpoints\" (#35376) at dotnet/corefx","RelatedBody":"Hello,\r\n\r\nI'm trying to consume a third party API via .NET Core 2.2. I'm experiencing that the request will simply hang, using both .NET Core 2.2 and 2.1. The hang appears to be indefinite, and I have not yet reached any timeout.\r\n\r\nAttempting the same in .NET Framework or .NET Core 2.0 works as intended. \r\n\r\nAlso, by issuing the code below prior to executing the request, my request will also work in .NET Core 2.2 and 2.1. \r\n`AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);`\r\n\r\nThis leads me to believe there is a bug in the SocketsHttpHandler introduced in .NET Core 2.1.\r\n\r\nIn its simplest form, the following console app replicates the issue. \r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\n\r\nnamespace SampleRequest\r\n{\r\n    class Program\r\n        {\r\n            static void Main(string[] args)\r\n            {\r\n                Console.WriteLine(\"Hello World!\");\r\n                \r\n                //AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n                \r\n                string html = string.Empty;\r\n                string url = @\"https://sso.godaddy.com/v1/secure/api/partner/foo/account/1\";\r\n    \r\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\r\n    \r\n                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())\r\n                using (Stream stream = response.GetResponseStream())\r\n                using (StreamReader reader = new StreamReader(stream))\r\n                {\r\n                    html = reader.ReadToEnd();\r\n                    Console.WriteLine(html);\r\n                }\r\n\r\n                Console.WriteLine(\"Request ended.\");    \r\n                Console.ReadLine();\r\n            }\r\n        }\r\n}\r\n```\r\n\r\n**Expected behaviour**\r\nAs this endpoint requires a client certificate for authentication, an exception should be thrown. \r\n\r\n**Actual behaviour**\r\nWith `UseSocketsHttpHandler` set to true (being the default in 2.1/2.2), the request will simply hang. I'm seeing this behaviour regardless of whether a certificate is provided or not.\r\n\r\nWith `UseSocketsHttpHandler` set to false, or using .NET Core 2.0/netfx, an exception is thrown as expected. \r\n\r\nIssue has been verified on three different machines (Windows)."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9084654169","Type":"IssuesEvent","CreatedAt":"2019-02-18T04:52:07","Actor":"AArnott","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33465","RelatedDescription":"Opened issue \"Changing rule severity does not update Error List or Solution Explorer item\" (#33465) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 2019 Preview 4 (28616.25.d16.0)\r\nThis is a **regression** from VS 2017.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open up any C# project with analyzers installed.\r\n2. Expand the analyzer hierarchy in Solution Explorer so rules are visible.\r\n2. Introduce a violation of that rule into the code so that it shows up in the error list.\r\n3. Right-click on a rule and adjust the severity to Hidden.\r\n\r\n**Expected Behavior**:\r\n\r\n1. The icon in Solution Explorer for that rule changes to reflect the new severity.\r\n1. The entry in the error list disappears.\r\n1. A `<Rule>` tag is added to the project's .ruleset file to mark the rule hidden.\r\n\r\n**Actual Behavior**:\r\n\r\n1. The icon **doesn't change** in Solution Explorer\r\n1. The entry **remains visible** in the error list\r\n1. The .ruleset file is in fact changed, as expected after #32990 fixed this part of the overall scenario."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9084374848","Type":"IssuesEvent","CreatedAt":"2019-02-18T03:15:39","Actor":"rainbowlee","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7044","RelatedDescription":"Opened issue \"How can i run samples in tests; \" (#7044) at dotnet/corert","RelatedBody":"I changed the project, but i can not open the project, eg hello\r\n\r\ncan not import E:\\build\\Microsoft.netcore.native.targets "},{"Id":"9083918465","Type":"IssuesEvent","CreatedAt":"2019-02-18T00:23:14","Actor":"szhaomsft","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7043","RelatedDescription":"Opened issue \"NativeCallableAttribute question\" (#7043) at dotnet/corert","RelatedBody":"does corert support exporting a function with callback function for other C program to call?\r\n\r\nif so, any example? \r\n\r\n**Exported methods can only naturally accept or return primitives or value types (i.e structs), they have to marshal all reference type arguments.**"},{"Id":"9083255682","Type":"PullRequestEvent","CreatedAt":"2019-02-17T19:01:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7042","RelatedDescription":"Opened pull request \"Fix mapping table emission for generic types\" (#7042) at dotnet/corert","RelatedBody":"We were only putting methods on instantiated types/fields into the mapping table because when the code was written, shared generics were wonky. We actually only need to emit a single entry for each canonically equivalent method/field though because the type loader can take care of the rest.\r\n\r\nThis reduces size of the mapping table for fields and methods and helps #6987 to avoid having to instantiate things over `Object`."},{"Id":"9082871729","Type":"PullRequestEvent","CreatedAt":"2019-02-17T16:00:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7034","RelatedDescription":"Merged pull request \"Update RyuJit\" (#7034) at dotnet/corert","RelatedBody":"CoreCLR has switched to publishing the Microsoft.NETCore.Jit package to a Nuget blob feed. Update the feed and instructions for updating.\r\n\r\n@MichalStrehovsky The JIT tests all stack overflow and I believe it was caused by https://github.com/dotnet/coreclr/pull/22117/files. Before I start debugging the intrinsic changes, any thoughts? Do we need to pass new flags to the Jit from the EE now?\r\n\r\nWe try to look up a resource string too early now and end up in an infinite loop:\r\n\r\n```\r\n # Call Site\r\n00 Threading!S_P_CoreLib_System_SR__get_InvalidOperation_TooEarly\r\n01 Threading!S_P_CoreLib_Internal_Runtime_Augments_RuntimeAugments__get_Callbacks\r\n02 Threading!S_P_CoreLib_Internal_Reflection_Core_NonPortable_RuntimeTypeUnifier_RuntimeTypeHandleToTypeCache__Factory\r\n03 Threading!S_P_CoreLib_System_Collections_Concurrent_ConcurrentUnifierW_2<IntPtr__System___Canon>__GetOrAdd\r\n04 Threading!S_P_CoreLib_Internal_Reflection_Core_NonPortable_RuntimeTypeUnifier__GetTypeForRuntimeTypeHandle\r\n05 Threading!S_P_CoreLib_System_Type__GetTypeFromHandle\r\n06 Threading!S_P_CoreLib_System_ThrowHelper__ThrowForUnsupportedVectorBaseType<UInt8>\r\n07 Threading!S_P_CoreLib_System_Runtime_Intrinsics_Vector128_1<UInt8>__get_Count\r\n08 Threading!S_P_CoreLib_System_SpanHelpers__IndexOf_0\r\n09 Threading!String__strlen\r\n0a Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName\r\n0b Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell\r\n0c Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow\r\n0d Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke\r\n0e Threading!S_P_CoreLib_Interop_BCrypt__BCryptGenRandom\r\n0f Threading!S_P_CoreLib_Interop__GetRandomBytes\r\n10 Threading!S_P_CoreLib_System_Marvin__GenerateSeed\r\n11 Threading!S_P_CoreLib_System_Marvin___cctor\r\n12 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__Call\r\n13 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun\r\n14 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnNonGCStaticBase\r\n15 Threading!S_P_CoreLib_System_Marvin__get_DefaultSeed\r\n16 Threading!String__GetHashCode\r\n17 Threading!S_P_CoreLib_System_Reflection_RuntimeAssemblyName__GetHashCode\r\n18 Threading!S_P_TypeLoader_System_Collections_Generic_LowLevelDictionary_2<System___Canon__System___Canon>__GetBucket\r\n19 Threading!S_P_TypeLoader_System_Collections_Generic_LowLevelDictionary_2<System___Canon__System___Canon>__Find\r\n1a Threading!S_P_TypeLoader_System_Collections_Generic_LowLevelDictionary_2<System___Canon__System___Canon>__TryGetValue\r\n1b Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation__AddScopesFromReaderToGroups\r\n1c Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation__RegisterModule\r\n1d Threading!S_P_TypeLoader_Internal_Runtime_TypeLoader_ModuleList__AddModuleRegistrationCallback\r\n1e Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation___ctor\r\n1f Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation___cctor\r\n20 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__Call\r\n21 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun\r\n22 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase\r\n23 Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation__get_Instance\r\n24 Threading!S_P_Reflection_Execution_Internal_Reflection_Execution_ReflectionDomainSetupImplementation___ctor\r\n25 Threading!S_P_Reflection_Execution_Internal_Reflection_Execution_ReflectionExecution__Initialize\r\n26 Threading!S_P_Reflection_Execution_Internal_Runtime_CompilerHelpers_LibraryInitializer__InitializeLibrary\r\n27 Threading!Threading__Module___StartupCodeMain\r\n28 Threading!wmain\r\n29 Threading!invoke_main\r\n2a Threading!__scrt_common_main_seh\r\n2b Threading!__scrt_common_main\r\n2c Threading!wmainCRTStartup\r\n2d KERNEL32!BaseThreadInitThunk\r\n2e ntdll!RtlUserThreadStart\r\n```"},{"Id":"9082770286","Type":"PullRequestEvent","CreatedAt":"2019-02-17T15:13:04","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7041","RelatedDescription":"Opened pull request \"WIP: Move WaitHandle to shared CoreLib\" (#7041) at dotnet/corert","RelatedBody":"Counter-part to https://github.com/dotnet/coreclr/pull/22634."},{"Id":"9081865105","Type":"IssuesEvent","CreatedAt":"2019-02-17T06:27:44","Actor":"szhaomsft","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7040","RelatedDescription":"Opened issue \"EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Windows.Forms\" (#7040) at dotnet/corert","RelatedBody":"seems like a regression \r\n\r\ni am compiling a dotnet core 2.1 console app.  why it looks for system windows forms now?\r\n\r\nusing official build \r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n    <PackageReference Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n    <PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n\r\nwhile an older build has no such error\r\n\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />\r\n    <PackageReference Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />\r\n    <PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />"},{"Id":"9081818134","Type":"PullRequestEvent","CreatedAt":"2019-02-17T05:52:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6501","RelatedDescription":"Closed pull request \"Initial support for cross-module signatures; improving method signatures\" (#6501) at dotnet/corert","RelatedBody":"This change lays down the preparatory framework for support of\r\ncross-module signatures. Sadly these don't yet fully work at the\r\nCoreCLR side so this will be somewhat tricky to pull off in sync\r\nwith Andon working on the CoreCLR-side support.\r\n\r\nThe change also contains a bunch of fixes related to my somewhat\r\nimproved understanding of constrained type calls. It looks like\r\nin some cases these are used to call instance methods on valuetypes\r\nwhere the eetype is separated from the actual instance value.\r\nIn light of this fact I had to put back the constrained type info\r\neven to the LocalMethodImport class.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. CoreCLR Pri#0 tests report 419 errors or 82% pass rate with\r\nthis change and with inclusion of the the CoreCLR runtime fix\r\nregarding Module::GetModuleFromIndex I described \r\nin the CPAOT planning e-mail."},{"Id":"9081813032","Type":"PullRequestEvent","CreatedAt":"2019-02-17T05:48:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7038","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7038) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"9081810236","Type":"PullRequestEvent","CreatedAt":"2019-02-17T05:45:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7039","RelatedDescription":"Opened pull request \"Add SimulatedLocationInBaseDirectory quirk\" (#7039) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9084537885","Type":"IssuesEvent","CreatedAt":"2019-02-18T04:10:02","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2955","RelatedDescription":"Closed issue \"\"MSBuildExtensionsPath\" in \"Sdk.props\" is empty\" (#2955) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/2eb6c546931b5bcb92cd3128b93932a980553ea1/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props#L31\r\n\r\nI create an object of [`Microsoft.Build.Evaluation.Project`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.evaluation.project?view=netframework-4.7.2&viewFallbackFrom=netcore-2.1) with existing `.csproj` file path.\r\nWhen I compile it in `net471` everything works fine.\r\n\r\nIf I compile it in `netcoreapp2.1`, the file `Sdk.props` throw an error because he search the file `Microsoft.Common.props` in current working directory (the folder of my executable dll) instead of in `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Microsoft.Common.props`.\r\nI think it is because the `$(MSBuildExtensionsPath)` is empty.\r\n\r\nIf you think to answer that \"this is not soppurted in *.net core*\", I will happy to know how to evulate `.csproj` files in *.net core*."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"open","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Open PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"open","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Open PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"411186722","IsPullRequest":true,"CreatedAt":"2019-02-18T05:16:43","Actor":"dotnet-maestro[bot]","Number":"22669","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22669","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#22669)"},{"Id":"411189157","IsPullRequest":true,"CreatedAt":"2019-02-18T05:16:20","Actor":"dotnet-maestro[bot]","Number":"22670","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19117.1\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19117.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22670","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#22670)"},{"Id":"411203308","IsPullRequest":false,"CreatedAt":"2019-02-18T04:44:24","Actor":"fanoI","Number":"22671","RawContent":null,"Title":"Add Marshal.StructureToSpan","State":"closed","Body":"I think it will be nice to have the possibility to marshal a structure directly into a Span instead to have to pass from a IntPtr that always forces you to do a copy.\r\nUsing a Span will permits to use stack memory to convert the struct to a Span<byte>.\r\n\r\nFor example having this struct:\r\n\r\n```cs\r\n   [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MyStruct\r\n    {\r\n        int a;\r\n        \r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)]\r\n        string b;\r\n\r\n        public MyStruct(int a, string b)\r\n        {\r\n            this.a = a;\r\n            this.b = b;\r\n        }\r\n    }\r\n```\r\n\r\nTo actually convert it to a Span<byte> I have to do:\r\n\r\n```cs\r\n        private static Span<byte> CvtStructToSpan<T>(T item) where T : struct\r\n        {\r\n            int rawSize = Marshal.SizeOf(typeof(T));\r\n            IntPtr buffer = Marshal.AllocHGlobal(rawSize);\r\n            Marshal.StructureToPtr(item, buffer, false);\r\n            byte[] rawData = new byte[rawSize];\r\n            Marshal.Copy(buffer, rawData, 0, rawSize);\r\n            Marshal.FreeHGlobal(buffer);\r\n            return rawData;\r\n        }\r\n```\r\n\r\nBut this is obviously not efficient what about writing in the Span directly?\r\n\r\nSomething similar to this:\r\n\r\n```cs\r\n        private static Span<byte> CvtStructToSpan<T>(T item) where T : struct\r\n        {\r\n            int rawSize = Marshal.SizeOf(typeof(T));\r\n            Span<byte> buffer = stackalloc(rawSize);\r\n            Marshal.StructureToSpan(item, buffer, false);\r\n            return buffer;\r\n        }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22671","RelatedDescription":"Closed issue \"Add Marshal.StructureToSpan\" (#22671)"},{"Id":"411172718","IsPullRequest":true,"CreatedAt":"2019-02-18T04:29:24","Actor":"am11","Number":"22668","RawContent":null,"Title":"Delete RtlMoveMemory and tests","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22668","RelatedDescription":"Closed or merged PR \"Delete RtlMoveMemory and tests\" (#22668)"},{"Id":"411268265","IsPullRequest":false,"CreatedAt":"2019-02-18T01:43:52","Actor":"AriNuer","Number":"22676","RawContent":null,"Title":"Many tests failed with System.IO.FileNotFoundException","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitstressregs8_tst/39/\r\n\r\n**one of failed log:**\r\n```\r\nbaseservices_compilerservices._dynamicobjectproperties_test448035_test448035_._dynamicobjectproperties_test448035_test448035_cmd [FAIL]\r\n        \r\n  Unhandled Exception: System.IO.FileNotFoundException: ZapRequire: Could not get native image for test448035.\r\n  Use FusLogVw.exe to check the reason.\r\n  A subdirectory or file IL already exists.\r\n        The system cannot find the file specified.\r\n        Error compiling test448035.org: The system cannot find the file specified. (Exception from HRESULT: 0x80070002 (COR_E_FILENOTFOUND))\r\nEXEC : error : file \"test448035.org\" or one of its dependencies was not found [C:\\j\\workspace\\arm_cross_che---1b7b6972\\tests\\runtest.proj]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22676","RelatedDescription":"Open issue \"Many tests failed with System.IO.FileNotFoundException\" (#22676)"},{"Id":"411266069","IsPullRequest":false,"CreatedAt":"2019-02-18T01:32:23","Actor":"VincentBu","Number":"22675","RawContent":null,"Title":"Test failed:  Loader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/50/\r\n\r\n**Failed tests:**\r\nLoader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh\r\n\r\n**Log:**\r\n```\r\nLoader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh [FAIL]\r\n        /n/nReturn code:      1/nRaw output file:      /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Loader/NativeLibs/Reports/Loader.NativeLibs/FromNativePaths/FromNativePaths.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun FromNativePaths.exe ''\r\n        FromNativePaths failed: Failed to load the native library: Unable to find an entry point named 'NativeFunc' in shared library 'FromNativePaths_lib'.\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/n> /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_jitstress2_jitstressregs4_tst/bin/tests/Linux.arm.Checked/Loader/NativeLibs/FromNativePaths/FromNativePaths.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/bin/tests/Linux.arm.Checked/TestWrappers/Loader.NativeLibs/Loader.NativeLibs.XUnitWrapper.cs(109,0): at Loader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22675","RelatedDescription":"Open issue \"Test failed:  Loader_NativeLibs._FromNativePaths_FromNativePaths_._FromNativePaths_FromNativePaths_sh\" (#22675)"},{"Id":"411262258","IsPullRequest":false,"CreatedAt":"2019-02-18T01:12:27","Actor":"VincentBu","Number":"22674","RawContent":null,"Title":"error MSB4020 in arm_cross_checked_windows_nt_r2r_tst","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm_cross_checked_windows_nt_r2r_tst/45/\r\n\r\n**Log:**\r\n```\r\nC:\\j\\workspace\\arm_cross_che---583430d8\\tests\\dir.props(111,3): error MSB4020: The value \"\" of the \"Project\" attribute in element <Import> is invalid. [C:\\j\\workspace\\arm_cross_che---583430d8\\tests\\runtest.proj]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22674","RelatedDescription":"Open issue \"error MSB4020 in arm_cross_checked_windows_nt_r2r_tst\" (#22674)"},{"Id":"410970921","IsPullRequest":true,"CreatedAt":"2019-02-17T21:27:42","Actor":"swaroop-sridhar","Number":"22648","RawContent":null,"Title":"Fix the build of Loader/NativeLib test","State":"closed","Body":"The native test assets were not build correctly on Unix platforms.\r\nThe native library exports were generated as private symbols by clang.\r\n\r\nThis change fixes the export declaration so that the global symbols are\r\ncorrectly generated for exported symbols.\r\n\r\nFixes #22549","Url":"https://github.com/dotnet/coreclr/pull/22648","RelatedDescription":"Closed or merged PR \"Fix the build of Loader/NativeLib test\" (#22648)"},{"Id":"411218220","IsPullRequest":false,"CreatedAt":"2019-02-17T18:26:37","Actor":"micampbell","Number":"22673","RawContent":null,"Title":"(System.Numerics) Cross Product for Vector2 and Vector4","State":"open","Body":"While it is mathematically true that you can only take the cross product of vectors of length 3, there is often a need in 2D geometry to perform the cross product. This technically creates a new vector only in the out-of-plane or z-direction. But it is just as common to call such a function as it is to call the dot-product. For example, for offsetting, or for determining if the next edge in a polygon turns right or left (or convex or concave).\r\nI suggest adding the following to Vector2_Instrinsics.cs (under Dot() line 109):\r\n```C#\r\n        /// <summary>\r\n        /// Returns the z-value of the cross product of two vectors.\r\n        /// Since the Vector2 is in the x-y plane, a 3D cross product\r\n        /// only produces the z-value\r\n        /// </summary>\r\n        /// <param name=\"value1\">The first vector.</param>\r\n        /// <param name=\"value2\">The second vector.</param>\r\n        /// <returns>The value of the z-coordinate from the cross product.</returns>\r\n        [JitIntrinsic]\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public static float Cross(Vector2 value1, Vector2 value2)\r\n        {\r\n            return value1.X * value2.Y \r\n                   - value1.Y * value2.X;\r\n        }\r\n```\r\n\r\nPerhaps, it is misleading to call it Cross. I'm okay with something like CrossZValue, but I feel strongly that it should be on par with Dot in terms of the SIMD optimization as it is likely to be called quite often. While we're at it. We might as well Cross to Vector4 as well, since this is to be typically used to represent homoegeneous coordinates. I suggest adding the following to Vector4_Instrinsics.cs (under Dot() line 157):\r\n```C#\r\n        /// <summary>\r\n        /// Computes the cross product of two vectors. For homogeneous\r\n        /// coordinates, the product of the weights is the new weight\r\n        /// for the resulting product.\r\n        /// </summary>\r\n        /// <param name=\"vector1\">The first vector.</param>\r\n        /// <param name=\"vector2\">The second vector.</param>\r\n        /// <returns>The cross product.</returns>\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public static Vector4 Cross(Vector4 vector1, Vector4 vector2)\r\n        {\r\n            return new Vector4(\r\n                vector1.Y * vector2.Z - vector1.Z * vector2.Y,\r\n                vector1.Z * vector2.X - vector1.X * vector2.Z,\r\n                vector1.X * vector2.Y - vector1.Y * vector2.X,\r\n                vector1.W * vector2.W);\r\n        }\r\n``` \r\n","Url":"https://github.com/dotnet/coreclr/issues/22673","RelatedDescription":"Open issue \"(System.Numerics) Cross Product for Vector2 and Vector4\" (#22673)"},{"Id":"411203431","IsPullRequest":true,"CreatedAt":"2019-02-17T16:06:30","Actor":"tannergooding","Number":"22672","RawContent":null,"Title":"Adding an update-dependencies.cmd script, like CoreFX has.","State":"open","Body":"This should resolve https://github.com/dotnet/coreclr/issues/22646 by allowing the maestro jobs to run without VS being on the machine.","Url":"https://github.com/dotnet/coreclr/pull/22672","RelatedDescription":"Open PR \"Adding an update-dependencies.cmd script, like CoreFX has.\" (#22672)"},{"Id":"411146670","IsPullRequest":true,"CreatedAt":"2019-02-17T04:16:41","Actor":"saucecontrol","Number":"22666","RawContent":null,"Title":"Fix BSWAP16 Intrinsic handling of signed values","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/22667\r\n\r\nThe BSWAP16 JIT intrisic uses a `ror` on the low word of the target register but fails to sign extend the result.  If the byte swap results in a change in sign, this leaves the high bits set incorrectly.\r\n\r\n~~This changes the Intrinsic implementation to emit a `movsx` following the `ror` for signed types.~~ This change adds an `int` cast to get the register sign/zero extended after the `ror`.\r\n\r\nI also fixed up the tests, which never returned a `Fail` value and added new tests to cover signed arguments that change sign on swap.\r\n","Url":"https://github.com/dotnet/coreclr/pull/22666","RelatedDescription":"Open PR \"Fix BSWAP16 Intrinsic handling of signed values\" (#22666)"},{"Id":"411024712","IsPullRequest":true,"CreatedAt":"2019-02-17T03:38:05","Actor":"tannergooding","Number":"22657","RawContent":null,"Title":"Fix the arm/arm64 jobs on Windows.","State":"closed","Body":"This should resolve https://github.com/dotnet/coreclr/issues/22654","Url":"https://github.com/dotnet/coreclr/pull/22657","RelatedDescription":"Closed or merged PR \"Fix the arm/arm64 jobs on Windows.\" (#22657)"},{"Id":"411004739","IsPullRequest":false,"CreatedAt":"2019-02-17T03:38:05","Actor":"RussKeldorph","Number":"22654","RawContent":null,"Title":"Some Win/ARM32/64 CI jobs are failing","State":"closed","Body":"https://ci.dot.net/job/dotnet_coreclr/job/master/job/arm_cross_checked_windows_nt_innerloop_tst_prtest/\r\n\r\nI think this is due to #22452.","Url":"https://github.com/dotnet/coreclr/issues/22654","RelatedDescription":"Closed issue \"Some Win/ARM32/64 CI jobs are failing\" (#22654)"},{"Id":"411143911","IsPullRequest":true,"CreatedAt":"2019-02-17T03:37:29","Actor":"tannergooding","Number":"22665","RawContent":null,"Title":"Adding tannergooding to the arm64Users list.","State":"open","Body":"Adding myself to the list as per https://github.com/dotnet/coreclr/pull/22657#issuecomment-464363755","Url":"https://github.com/dotnet/coreclr/pull/22665","RelatedDescription":"Open PR \"Adding tannergooding to the arm64Users list.\" (#22665)"},{"Id":"411137990","IsPullRequest":true,"CreatedAt":"2019-02-17T02:10:30","Actor":"jkotas","Number":"22664","RawContent":null,"Title":"Change Environment.Version to return product version","State":"open","Body":"Contributes to https://github.com/dotnet/corefx/issues/31099","Url":"https://github.com/dotnet/coreclr/pull/22664","RelatedDescription":"Open PR \"Change Environment.Version to return product version\" (#22664)"},{"Id":"411112549","IsPullRequest":false,"CreatedAt":"2019-02-17T01:51:07","Actor":"benaadams","Number":"22661","RawContent":null,"Title":"Assign (generic) struct to default causes overzealous CORINFO_HELP_ASSIGN_BYREF","State":"closed","Body":"Assigning references to null shouldn't need `Jit_ByRefWriteBarrier` however assigning a struct with GC references to default causes lots of write barrier calls; whereas I'd have thought it would just assign them to null?\r\n\r\ne.g. in ASP.NET Core there is a feature cache that gets set to default in Initialize\r\n\r\n[FeatureReferences](https://github.com/aspnet/AspNetCore/blob/799b91a324b531e1a91512ec3f77f783f61c3a82/src/Http/Http.Features/src/FeatureReferences.cs)\r\n```csharp\r\npublic struct FeatureReferences<TCache>\r\n{\r\n    public FeatureReferences(IFeatureCollection collection)\r\n    {\r\n        Collection = collection;\r\n        Cache = default(TCache); // zero the cache\r\n        Revision = collection.Revision;\r\n    }\r\n\r\n    public IFeatureCollection Collection { get; private set; }\r\n    public int Revision { get; private set; }\r\n    \r\n    // ...\r\n}\r\n```\r\n[DefaultHttpContext](https://github.com/aspnet/AspNetCore/blob/799b91a324b531e1a91512ec3f77f783f61c3a82/src/Http/Http/src/DefaultHttpContext.cs)\r\n```csharp\r\npublic sealed class DefaultHttpContext : HttpContext\r\n{\r\n    // ...\r\n\r\n    public void Initialize(IFeatureCollection features)\r\n    {\r\n        _features = new FeatureReferences<FeatureInterfaces>(features);\r\n        _request.Initialize();\r\n        _response.Initialize();\r\n        _connection?.Initialize(features);\r\n        _websockets?.Initialize(features);\r\n    }\r\n        \r\n    struct FeatureInterfaces // Cache is 6 references\r\n    {\r\n        public IItemsFeature Items;\r\n        public IServiceProvidersFeature ServiceProviders;\r\n        public IHttpAuthenticationFeature Authentication;\r\n        public IHttpRequestLifetimeFeature Lifetime;\r\n        public ISessionFeature Session;\r\n        public IHttpRequestIdentifierFeature RequestIdentifier;\r\n    }\r\n}\r\n```\r\nWhat it seems to do is blank out enough stack; then assign via `CORINFO_HELP_ASSIGN_BYREF`\r\n\r\n```asm\r\n; Assembly listing for method DefaultHttpContext:Initialize(ref):this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T00] (  7,  7   )     ref  ->  rbx         this class-hnd\r\n;  V01 arg1         [V01,T01] (  8,  6   )     ref  ->  rbp         class-hnd\r\n;  V02 OutArgs      [V02    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V03 tmp1         [V03,T02] (  4,  8   )  struct (64) [rsp+0x68]   do-not-enreg[SFB] must-init \"NewObj constructor temp\"\r\n;  V04 tmp2         [V04,T05] (  2,  4   )     ref  ->  rsi         class-hnd \"dup spill\"\r\n;  V05 tmp3         [V05,T08] (  3,  2.50)     ref  ->  rdi        \r\n;  V06 tmp4         [V06,T06] (  2,  4   )     ref  ->  rsi         class-hnd \"dup spill\"\r\n;  V07 tmp5         [V07,T09] (  3,  2.50)     ref  ->  rdi        \r\n;  V08 tmp6         [V08,T07] (  2,  4   )     int  ->  rax         \"Inlining Arg\"\r\n;  V09 tmp7         [V09,T03] (  5,  5   )  struct (32) [rsp+0x48]   do-not-enreg[SFB] must-init \"NewObj constructor temp\"\r\n;  V10 tmp8         [V10,T10] (  2,  2   )     int  ->  rax         \"Inlining Arg\"\r\n;  V11 tmp9         [V11,T04] (  5,  5   )  struct (32) [rsp+0x28]   do-not-enreg[SFB] must-init \"NewObj constructor temp\"\r\n;  V12 tmp10        [V12,T11] (  2,  2   )     int  ->  rax         \"Inlining Arg\"\r\n;\r\n; Lcl frame size = 168\r\n\r\nG_M56063_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       55                   push     rbp\r\n       53                   push     rbx\r\n       4881ECA8000000       sub      rsp, 168\r\n       C5F877               vzeroupper \r\n       488BF1               mov      rsi, rcx\r\n       488D7C2428           lea      rdi, [rsp+28H]\r\n       B920000000           mov      ecx, 32\r\n       33C0                 xor      rax, rax\r\n       F3AB                 rep stosd \r\n       488BCE               mov      rcx, rsi\r\n       488BD9               mov      rbx, rcx\r\n       488BEA               mov      rbp, rdx\r\n\r\nG_M56063_IG02:\r\n       48896C2468           mov      gword ptr [rsp+68H], rbp\r\n       488D4C2478           lea      rcx, bword ptr [rsp+78H]\r\n       C5F857C0             vxorps   xmm0, xmm0\r\n       C5FA7F01             vmovdqu  qword ptr [rcx], xmm0\r\n       C5FA7F4110           vmovdqu  qword ptr [rcx+16], xmm0\r\n       C5FA7F4120           vmovdqu  qword ptr [rcx+32], xmm0\r\n       488BCD               mov      rcx, rbp\r\n       49BBD811C8D9F87F0000 mov      r11, 0x7FF8D9C811D8\r\n       3909                 cmp      dword ptr [rcx], ecx\r\n       FF15CF52A3FF         call     [IFeatureCollection:get_Revision():int:this]\r\n       89442470             mov      dword ptr [rsp+70H], eax\r\n       488D7B38             lea      rdi, bword ptr [rbx+56]\r\n       488D742468           lea      rsi, bword ptr [rsp+68H]\r\n       E8E5FB675F           call     CORINFO_HELP_ASSIGN_BYREF\r\n       48A5                 movsq    \r\n\r\n                            ; // typeof(TCache) == typeof(DefaultHttpContext.FeatureInterfaces)\r\n                            ; Cache = default(TCache);\r\n       E8DEFB675F           call     CORINFO_HELP_ASSIGN_BYREF ; Items = null\r\n       E8D9FB675F           call     CORINFO_HELP_ASSIGN_BYREF ; ServiceProviders = null\r\n       E8D4FB675F           call     CORINFO_HELP_ASSIGN_BYREF ; Authentication = null \r\n       E8CFFB675F           call     CORINFO_HELP_ASSIGN_BYREF ; Lifetime = null\r\n       E8CAFB675F           call     CORINFO_HELP_ASSIGN_BYREF ; Session = null\r\n       E8C5FB675F           call     CORINFO_HELP_ASSIGN_BYREF ; RequestIdentifier = null\r\n\r\n       488B4B08             mov      rcx, gword ptr [rbx+8]\r\n       3909                 cmp      dword ptr [rcx], ecx\r\n       E85A1AFFFF           call     DefaultHttpRequest:Initialize():this\r\n       488B4B10             mov      rcx, gword ptr [rbx+16]\r\n       3909                 cmp      dword ptr [rcx], ecx\r\n       E87F1DFFFF           call     DefaultHttpResponse:Initialize():this\r\n       488B7318             mov      rsi, gword ptr [rbx+24]\r\n       488BFE               mov      rdi, rsi\r\n       4885FF               test     rdi, rdi\r\n       7460                 je       SHORT G_M56063_IG06\r\n\r\nG_M56063_IG03:\r\n```\r\n\r\nThis shows up at around 2% of total run time in the TE benchmarks:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/52905044-12fc8680-322c-11e9-9d70-a1a3d047ff50.png)\r\n\r\n/cc @AndyAyersMS @davidfowl @jkotas @mikedn ","Url":"https://github.com/dotnet/coreclr/issues/22661","RelatedDescription":"Closed issue \"Assign (generic) struct to default causes overzealous CORINFO_HELP_ASSIGN_BYREF\" (#22661)"},{"Id":"411136558","IsPullRequest":false,"CreatedAt":"2019-02-17T01:50:21","Actor":"kouvel","Number":"22663","RawContent":null,"Title":"Document config types that treat int values as hexadecimal (even without 0x prefix)","State":"open","Body":"At https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md\r\n\r\nRequested at https://github.com/dotnet/coreclr/issues/21879\r\n\r\nThings like `COMPlus_*` env vars and other forms of configuration that treat config values as hex even without a `0x` prefix should be documented as such.","Url":"https://github.com/dotnet/coreclr/issues/22663","RelatedDescription":"Open issue \"Document config types that treat int values as hexadecimal (even without 0x prefix)\" (#22663)"},{"Id":"411089326","IsPullRequest":true,"CreatedAt":"2019-02-17T01:49:08","Actor":"jkotas","Number":"22659","RawContent":null,"Title":"Avoid pulling in Lazy<T> during startup","State":"closed","Body":"Environment constructor runs on every startup path. Remove dependency on Lazy<T> from it.","Url":"https://github.com/dotnet/coreclr/pull/22659","RelatedDescription":"Closed or merged PR \"Avoid pulling in Lazy<T> during startup\" (#22659)"},{"Id":"411116464","IsPullRequest":true,"CreatedAt":"2019-02-16T21:36:43","Actor":"franksinankaya","Number":"22662","RawContent":null,"Title":"Abstract deprecated and selectany for GCC and remove LLVM'ism where possible","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22662","RelatedDescription":"Open PR \"Abstract deprecated and selectany for GCC and remove LLVM'ism where possible\" (#22662)"},{"Id":"411103543","IsPullRequest":true,"CreatedAt":"2019-02-16T19:17:58","Actor":"benaadams","Number":"22660","RawContent":null,"Title":"Fix warning causing error in warning as error (Windows)","State":"open","Body":"BOOL -> bool conversion\r\n```\r\nwarning C4800: 'BOOL': forcing value to bool 'true' or 'false' (performance warning)\r\nerror C2220: warning treated as error - no 'object' file generated\r\n```\r\n\r\n/cc @AndyAyersMS @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/22660","RelatedDescription":"Open PR \"Fix warning causing error in warning as error (Windows)\" (#22660)"},{"Id":"410995385","IsPullRequest":true,"CreatedAt":"2019-02-16T05:25:08","Actor":"AaronRobinsonMSFT","Number":"22652","RawContent":null,"Title":"Fix bug in FindDispatchSlot usage","State":"closed","Body":"PR https://github.com/dotnet/coreclr/pull/20458 introduced a subtle bug relating to how C++ coerces types. The issue here is an `INT` is coerced to an `UINT_PTR` which causes the non-explicit constructor for `DispatchToken` to be instantiated. This caused heck with some COM scenarios.\r\n\r\nMade the `DispatchToken` constructor explicit and fixed usage throughout.","Url":"https://github.com/dotnet/coreclr/pull/22652","RelatedDescription":"Closed or merged PR \"Fix bug in FindDispatchSlot usage\" (#22652)"},{"Id":"410966668","IsPullRequest":true,"CreatedAt":"2019-02-16T05:11:57","Actor":"tannergooding","Number":"22647","RawContent":null,"Title":"Update BuildTools, IbcData, PgoData to 3.0.0-preview1-03715-01, master-20190208.1, master-20190208.1, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22647","RelatedDescription":"Closed or merged PR \"Update BuildTools, IbcData, PgoData to 3.0.0-preview1-03715-01, master-20190208.1, master-20190208.1, respectively (master)\" (#22647)"},{"Id":"411025476","IsPullRequest":false,"CreatedAt":"2019-02-16T04:27:16","Actor":"iskiselev","Number":"22658","RawContent":null,"Title":"TypeSpec usage","State":"open","Body":"Looks like in some case usage of TypeSpec is not governed by ECMA-335 specification strict enough - resulting in not sync of PEVerify, runtime and other tools in ecosystem.\r\nI've done some test of using TypeSpec in extends clause of class (looks like there is nothing in specification that state that next samples invalid):\r\n```IL\r\npublic class SomeModReq {}\r\n\r\npublic class Generic`1<T> {\r\n  .method public specialname rtspecialname instance void .ctor() cil managed\r\n  {\r\n    ldarg.0      // this\r\n    call         instance void .base::.ctor()\r\n    ret\r\n  }\r\n}\r\n\r\npublic class ClassWithNonGenericTypeSpec extends class System.Object\r\n{\r\n  .method public specialname rtspecialname instance void .ctor() cil managed\r\n  {\r\n    ldarg.0      // this\r\n    call         instance void .base::.ctor()\r\n    ret\r\n  }\r\n}\r\n\r\npublic class ClassWithModReqInTypeSpec extends class Generic`1<int32> modreq(SomeModReq )\r\n{\r\n  .method public specialname rtspecialname instance void .ctor() cil managed\r\n  {\r\n    ldarg.0      // this\r\n    call         instance void .base::.ctor()\r\n    ret\r\n  }\r\n}\r\n```\r\n\r\nFor both ClassWithNonGenericTypeSpec and ClassWithModReqInTypeSpec  PEVerify shows error:\r\n```\r\n[MD]: Error: TypeDef extends a TypeSpec (...) that is not an instantiated type. [token: ...]\r\n```\r\nIn run-time, attempt to load ClassWithNonGenericTypeSpec results in `System.TypeLoadException Could not load TypeSpec from assembly`. C# compiler don't have any problems with using this class.\r\n\r\nIn run-time, attempt to load/create instance of ClassWithModReqInTypeSpec  works without any problem. At runtime ClassWithModReqInTypeSpec can be casted to Generic1<int32>. C# does not allow direct cast from ClassWithModReqInTypeSpec to Generic<int32> (compilation error), but such class can be casted through previous cast to object.\r\n\r\nI'm not sure, if ECMA-335 is not strict enough and should be update by next edition or CLR/PEVerify should work correctly with it. Current work of C# compiler is fully aligned with current ECMA-335 spec here.","Url":"https://github.com/dotnet/coreclr/issues/22658","RelatedDescription":"Open issue \"TypeSpec usage\" (#22658)"},{"Id":"411013963","IsPullRequest":true,"CreatedAt":"2019-02-16T02:08:22","Actor":"briansull","Number":"22656","RawContent":null,"Title":"ARM64: Correct the assert to add R8 as a potential valid arg register","State":"open","Body":"Also fix the calls to RemoveElemD to use lvVarIndex","Url":"https://github.com/dotnet/coreclr/pull/22656","RelatedDescription":"Open PR \"ARM64: Correct the assert to add R8 as a potential valid arg register\" (#22656)"},{"Id":"411004805","IsPullRequest":false,"CreatedAt":"2019-02-16T00:53:06","Actor":"davmason","Number":"22655","RawContent":null,"Title":"Work to complete the ReJIT on attach feature","State":"open","Body":"ReJIT was allowed on attach in #19054, but there are two more work items to make the feature work end to end:\r\n\r\n- Allow metadata changes at arbitrary times instead of at module load\r\n- Provide a way for profilers to ReJIT inliners of a method without having been attached to monitor inlining","Url":"https://github.com/dotnet/coreclr/issues/22655","RelatedDescription":"Open issue \"Work to complete the ReJIT on attach feature\" (#22655)"},{"Id":"410996315","IsPullRequest":false,"CreatedAt":"2019-02-16T00:05:18","Actor":"sandreenko","Number":"22653","RawContent":null,"Title":"Arm32 Ubuntu CoreFX tests started to fail with symbol lookup error.","State":"open","Body":"Example output:\r\n```\r\n15:48:19 /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/artifacts/bin/tests/System.Threading.Tasks.Dataflow.Tests/netcoreapp-Linux-Release-arm /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/artifacts/bin/tests/System.Threading.Tasks.Dataflow.Tests/netcoreapp-Linux-Release-arm\r\n15:48:19 /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm/dotnet: symbol lookup error: /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm/shared/Microsoft.NETCore.App/9.9.9/libhostpolicy.so: undefined symbol: __atomic_fetch_add_4\r\n15:48:19 /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/artifacts/bin/tests/System.Threading.Tasks.Dataflow.Tests/netcoreapp-Linux-Release-arm\r\n15:48:19 ----- end 23:48:19 ----- exit code 127 ----------------------------------------------------------\r\n15:48:19 Looking around for any Linux dump...\r\n15:48:19 ... found no dump in /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/_/fx/artifacts/bin/tests/System.Threading.Tasks.Dataflow.Tests/netcoreapp-Linux-Release-arm\r\n```\r\n\r\nLook like `undefined symbol: __atomic_fetch_add_4` is the important part here.\r\n\r\n[ci example](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/64/console)\r\n\r\nThat issue means we can't test CoreFX arm32 Ubuntu now.","Url":"https://github.com/dotnet/coreclr/issues/22653","RelatedDescription":"Open issue \"Arm32 Ubuntu CoreFX tests started to fail with symbol lookup error.\" (#22653)"},{"Id":"410993327","IsPullRequest":false,"CreatedAt":"2019-02-15T23:51:39","Actor":"iskiselev","Number":"22651","RawContent":null,"Title":"ILAsm special meaning classes","State":"open","Body":"Currently ILAsm always treat \"System.Enum\", \"System.Object\" and \"System.ValueType\" as classes defined in base library checking only their names.\r\nSo, next IL code will create ValueType from \"NotValueType\", instead of just creating class that extends `System.ValueType` from current assembly:\r\n```il\r\n.class public System.ValueType {}\r\n.class public NotValueType extends System.ValueType {}\r\n```\r\nSo next C# code could not be round-trip with ILDAsm/ILAsm:\r\n```c#\r\nnamespace System\r\n{\r\n    public class ValueType { }\r\n}\r\npublic class NotValueType : System.ValueType  { }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22651","RelatedDescription":"Open issue \"ILAsm special meaning classes\" (#22651)"},{"Id":"410993126","IsPullRequest":true,"CreatedAt":"2019-02-15T23:50:50","Actor":"RussKeldorph","Number":"22650","RawContent":null,"Title":"Enable telemetry for official builds","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22650","RelatedDescription":"Open PR \"Enable telemetry for official builds\" (#22650)"},{"Id":"410977143","IsPullRequest":true,"CreatedAt":"2019-02-15T22:44:01","Actor":"sandreenko","Number":"22649","RawContent":null,"Title":"[WIP] Test PR.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22649","RelatedDescription":"Open PR \"[WIP] Test PR.\" (#22649)"},{"Id":"411161533","IsPullRequest":false,"CreatedAt":"2019-02-15T09:02:15","Actor":"lrnstlt","Number":"22667","RawContent":null,"Title":"Incorrect cast from Int16 to Int32, Int64 in netcoreapp3.0","State":"open","Body":"# Incorrect cast from Int16 to Int32, Int64 in netcoreapp3.0\r\n\r\n# Program\r\n```CSharp\r\nusing System;\r\nusing System.Buffers.Binary;\r\n\r\ninternal static class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        var buffer = new byte[] {0x7F, 0xFF};\r\n\r\n        Int16 value16 = BinaryPrimitives.ReadInt16BigEndian(buffer);\r\n        Int32 value32 = BinaryPrimitives.ReadInt16BigEndian(buffer);\r\n        Int64 value64 = BinaryPrimitives.ReadInt16BigEndian(buffer);\r\n\r\n        Console.WriteLine($\"I16: {(Int16) value16} {(Int32) value16} {(Int64) value16}\");\r\n        Console.WriteLine($\"I32: {(Int16) value32} {(Int32) value32} {(Int64) value32}\");\r\n        Console.WriteLine($\"I64: {(Int16) value64} {(Int32) value64} {(Int64) value64}\");\r\n    }\r\n}\r\n```\r\n# Output\r\n`dotnet run -c Release -f netcoreapp2.2` outputs:\r\n```\r\nI16: 32767 32767 32767\r\nI32: 32767 32767 32767\r\nI64: 32767 32767 32767\r\n```\r\n\r\n`dotnet run -c Release -f netcoreapp3.0` outputs:\r\n```\r\nI16: 32767 -32769 -32769\r\nI32: 32767 -32769 -32769\r\nI64: 32767 -32769 -32769\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22667","RelatedDescription":"Open issue \"Incorrect cast from Int16 to Int32, Int64 in netcoreapp3.0\" (#22667)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"411260405","IsPullRequest":false,"CreatedAt":"2019-02-18T00:59:33","Actor":"KathleenDollard","Number":"10820","RawContent":null,"Title":"Improve message when roll forward fails","State":"open","Body":"## Steps to reproduce\r\n\r\nRun an app, dll or exe that does not have the requested major version of the runtime. \r\n\r\nOne way to do this is to install most global tools on a machine with only the .NET Core 3.0 previews on it. \r\n\r\n## Current behavior\r\n\r\n```\r\n$ dotnetsay Hi\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n  - The following versions are installed:\r\n      3.0.0-preview-27122-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n      3.0.0-preview-27218-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n## Suggested behavior\r\n\r\n```\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.0' was not found. The following frameworks were found:\r\n      3.0.0-preview-27122-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n      3.0.0-preview-27218-01 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework. .NET Core framework (Microsoft.NETCore.App) can be found at https://aka.ms/dotnet-download.\r\n \r\nYou can find out more about .NET Core prerequisites at https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n```\r\n\r\nIs SDK relevant in downloads (removed)?\r\n\r\nRemoved `- Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet`\r\nCan the viewer of this message do anything with this message? Can we just remove this, or if it adds value, lets extend this to share that value more clearly\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009988\r\n Commit:    8d071f3d19\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009988/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009988 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10820","RelatedDescription":"Open issue \"Improve message when roll forward fails\" (#10820)"},{"Id":"411238790","IsPullRequest":false,"CreatedAt":"2019-02-17T21:43:00","Actor":"cveld","Number":"10819","RawContent":null,"Title":"dotnet sln remove flattens the solution items","State":"open","Body":"## Steps to reproduce\r\n- Set up an sln with nested solution items.\r\n- Remove a project\r\n\r\n## Expected  behavior\r\nThe nested solution items should be preserved.\r\n\r\n## Actual behavior\r\nThe nested solution items get flattened.\r\nFor a repro see the following repo: https://github.com/cveld/dotnet-cli-sln-remove-issue\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10819","RelatedDescription":"Open issue \"dotnet sln remove flattens the solution items\" (#10819)"},{"Id":"411211356","IsPullRequest":true,"CreatedAt":"2019-02-17T17:21:57","Actor":"wli3","Number":"10818","RawContent":null,"Title":"Update sdk version to 3.0.100-preview3.19116.2","State":"open","Body":"part of https://github.com/dotnet/cli/issues/10628","Url":"https://github.com/dotnet/cli/pull/10818","RelatedDescription":"Open PR \"Update sdk version to 3.0.100-preview3.19116.2\" (#10818)"},{"Id":"411187355","IsPullRequest":true,"CreatedAt":"2019-02-17T13:50:16","Actor":"dotnet-maestro[bot]","Number":"10817","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19115.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10817","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#10817)"},{"Id":"411167616","IsPullRequest":false,"CreatedAt":"2019-02-17T09:32:14","Actor":"ZenoArrow","Number":"10816","RawContent":null,"Title":"dotnet telemetry off by default","State":"open","Body":"As mentioned in issues #3093 and #10497, there are significant concerns with having telemetry enabled by default. I understand why Microsoft is looking for telemetry data to understand what to focus development efforts on, but I would suggest that it's not a suitable feature for production releases and should be limited to only be enabled by default on prerelease builds. Is there any flexibility on this at all?\r\n","Url":"https://github.com/dotnet/cli/issues/10816","RelatedDescription":"Open issue \"dotnet telemetry off by default\" (#10816)"},{"Id":"410995461","IsPullRequest":true,"CreatedAt":"2019-02-16T17:02:58","Actor":"dotnet-bot","Number":"10810","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10810","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10810)"},{"Id":"411071892","IsPullRequest":true,"CreatedAt":"2019-02-16T13:14:53","Actor":"dotnet-maestro[bot]","Number":"10815","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19115.3\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19115.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10815","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#10815)"},{"Id":"411070937","IsPullRequest":true,"CreatedAt":"2019-02-16T13:02:30","Actor":"dotnet-maestro[bot]","Number":"10814","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19115.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19115.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10814","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#10814)"},{"Id":"411051970","IsPullRequest":false,"CreatedAt":"2019-02-16T09:20:09","Actor":"ranouf","Number":"10813","RawContent":null,"Title":"Could not load file or assembly 'System.Runtime, Version=4.2.0.0 on empty project","State":"open","Body":"Hi,\r\n\r\nI read other post about this error but I m not sure that the other have this issue only when the project is deployer to azure.\r\n\r\nHere is my cs projet:\r\n  ```\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <UseNETCoreGenerator>true</UseNETCoreGenerator>\r\n  </PropertyGroup>\r\n<ItemGroup>    \r\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"6.0.0\" />    \r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs.Extensions.Storage\" Version=\"3.0.3\" />\r\n    <PackageReference Include=\"Autofac.Extensions.DependencyInjection\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.6.1\" />\r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs.Logging.ApplicationInsights\" Version=\"3.0.4\" />\r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs\" Version=\"3.0.4\" />\r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs.Extensions\" Version=\"3.0.1\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.CommandLine\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Hosting.Abstractions\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Configuration\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"NetEscapades.Extensions.Logging.RollingFile\" Version=\"1.0.1\" />\r\n  </ItemGroup>\r\n```\r\n\r\nMy thinking is maybe, .net core 2.2.1 is not yet available on Azure. What do you think? How to fix this issue?","Url":"https://github.com/dotnet/cli/issues/10813","RelatedDescription":"Open issue \"Could not load file or assembly 'System.Runtime, Version=4.2.0.0 on empty project\" (#10813)"},{"Id":"410915834","IsPullRequest":false,"CreatedAt":"2019-02-16T00:51:42","Actor":"lostmsu","Number":"10806","RawContent":null,"Title":"Can not make a net472 project properly reference a netstandard package with multiple runtimes","State":"closed","Body":"## Steps to reproduce\r\n- use Windows\r\n- create a new-style .NET SDK project (can copy-paste from below)\r\n- set target to `net472` (or any net47x, maybe even 46x will do)\r\n- add package reference to `Python.Runtime.UnofficialNetStandard`, version `2.4.0-a6`\r\n- in the code, access something from `Python.Runtime` namespace\r\n- try building, running, publising\r\n\r\n## Expected  behavior\r\n- `build` and `publish` make a copy of Python.Runtime.dll in the output directory\r\n- `run` succeeds\r\n\r\n## Actual behavior\r\n- neither `build`, nor `publish` copy either of Python.Runtime.dll to the output\r\n- `run` fails with `FileNotFoundException: Could not load file or assembly 'Python.Runtime, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.`\r\n\r\n## Related/potentially useful\r\n**NuGet package structure**\r\n```\r\nref\r\n|- netstandard2.0\r\n |- Python.Runtime.dll\r\nruntimes\r\n|- win\r\n |- lib\r\n  |- netstandard2.0\r\n   |- Python.Runtime.dll\r\n|- unix\r\n |- ...\r\n```\r\n\r\nI also control the package, so if the problem is in the package itself, I'd like a guidance on how to make it the proper way.\r\n\r\nSame question/problem on [StackOverflow](https://stackoverflow.com/questions/54644219/how-to-properly-package-and-consume-net-standard-library-with-multiple-runtimes)\r\n\r\nLinking @onovotny, for he is the author of [SDK Extras](https://github.com/onovotny/MSBuildSdkExtras/#creating-per-runtimeidentifier-packages), which I used to create the package.\r\n\r\nThe problem only appears with net4xx family of targets. `netcoreapp2.0`, for example, works without the problem.\r\n\r\n**Sample project file**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Python.Runtime.UnofficialNetStandard\" Version=\"2.4.0-a6\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009171 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009297 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10806","RelatedDescription":"Closed issue \"Can not make a net472 project properly reference a netstandard package with multiple runtimes\" (#10806)"},{"Id":"410669735","IsPullRequest":false,"CreatedAt":"2019-02-16T00:28:51","Actor":"YunWeiaa","Number":"10793","RawContent":null,"Title":"For .NET Core 3.0, create a f# .net core ASP.NET Core mvc project via CLI, dotnet build failed with error FS0597: Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized.","State":"closed","Body":"## Steps to reproduce\r\nUsing CLI : Create a F# .net core ASP.NET Core Web App (Model-View-Controller) project\r\n\r\n## Expected  behavior\r\ndotnet restore and build succeed without errors or warnings.\r\n\r\n## Actual behavior\r\ndotnet new mvc --> succeed\r\ndotnet restore -->succeed\r\ndotnet build -->Failed with error FS0597: `Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized`\r\n![image](https://user-images.githubusercontent.com/33921754/52846148-d2294280-3143-11e9-8065-fa215b6984ad.png)\r\nNote: \r\n1. Add localfeed package source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json doesn’t work.\r\n2. Create a C# .net core ASP.NET Core Web App (Model-View-Controller) project via CLI, it can work well.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010274\r\n Commit:    0d4cadd604\r\n \r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010274\\\r\n \r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27413-7\r\n  Commit:  1c23cf9539\r\n \r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009804 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010274 [C:\\Program Files\\dotnet\\sdk]\r\n \r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19113-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27413-7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27413-30 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n \r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10793","RelatedDescription":"Closed issue \"For .NET Core 3.0, create a f# .net core ASP.NET Core mvc project via CLI, dotnet build failed with error FS0597: Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized.\" (#10793)"},{"Id":"410663527","IsPullRequest":false,"CreatedAt":"2019-02-16T00:28:24","Actor":"yuki233","Number":"10792","RawContent":null,"Title":"DEB installer only, for SDK 3.0.100-preview3-010278, aspnetcore-runtime 3.0.0-preview3-19113-07's installation depends on runtime 3.0.0-preview-27408-1 rather than 3.0.0-preview3-27414-8","State":"closed","Body":"## Steps to reproduce\r\n1. With DEB installer, install runtime 3.0.0-preview3-27414-8, aspnetcore-runtime 3.0.0-preview3-19113-07 and sdk 3.0.100-preview3-010278 in order\r\n\r\n## Expected  behavior\r\nAll packages are installed normally, below screenshot is the installation with RPM installer\r\n![image](https://user-images.githubusercontent.com/1578239/52844803-685b6980-3140-11e9-855f-e8b455e9d79d.png)\r\n\r\n## Actual behavior\r\nWith DEB installer, aspnetcore-runtime 3.0.0-preview3-19113-07's installation depends on runtime 3.0.0-preview-27408-1 rather than 3.0.0-preview3-27414-8\r\n![image](https://user-images.githubusercontent.com/1578239/52844893-9fca1600-3140-11e9-9fa1-bbef127e814c.png)\r\n\r\n##Note\r\nAs workaround, install runtime 3.0.0-preview-27408-1, aspnetcore-runtime 3.0.0-preview3-19113-07, runtime 3.0.0-preview3-27414-8 and sdk 3.0.100-preview3-010278 in order\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010278\r\n Commit:    3d17f286de\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview3-010278/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27414-8\r\n  Commit:  2c740c0ea8\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview3-010278 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19113-07 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27414-8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10792","RelatedDescription":"Closed issue \"DEB installer only, for SDK 3.0.100-preview3-010278, aspnetcore-runtime 3.0.0-preview3-19113-07's installation depends on runtime 3.0.0-preview-27408-1 rather than 3.0.0-preview3-27414-8\" (#10792)"},{"Id":"410996513","IsPullRequest":true,"CreatedAt":"2019-02-16T00:06:10","Actor":"zivkan","Number":"10812","RawContent":null,"Title":"Insert NuGet Build 4.3.1-rtm-5850 into cli 1.1","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10812","RelatedDescription":"Open PR \"Insert NuGet Build 4.3.1-rtm-5850 into cli 1.1\" (#10812)"},{"Id":"410995490","IsPullRequest":true,"CreatedAt":"2019-02-16T00:01:32","Actor":"dotnet-bot","Number":"10811","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10811","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10811)"},{"Id":"410995447","IsPullRequest":true,"CreatedAt":"2019-02-16T00:01:22","Actor":"dotnet-bot","Number":"10809","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10809","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10809)"},{"Id":"410994404","IsPullRequest":true,"CreatedAt":"2019-02-15T23:56:35","Actor":"KevinRansom","Number":"10808","RawContent":null,"Title":"Update FSHarp compiler to 10.4.2-rtm-190215-07","State":"open","Body":"Update FSHarp compiler to : 10.4.2-rtm-190215-07\r\n[Internal Insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/163340?_a=overview)","Url":"https://github.com/dotnet/cli/pull/10808","RelatedDescription":"Open PR \"Update FSHarp compiler to 10.4.2-rtm-190215-07\" (#10808)"},{"Id":"410994161","IsPullRequest":true,"CreatedAt":"2019-02-15T23:55:26","Actor":"KevinRansom","Number":"10807","RawContent":null,"Title":"Update FSHarp compiler to 10.4.2-rtm-190215-07","State":"open","Body":"Update the F# compiler to build:   10.4.2-rtm-190215-07\r\n[Internal Insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/163340?_a=overview)","Url":"https://github.com/dotnet/cli/pull/10807","RelatedDescription":"Open PR \"Update FSHarp compiler to 10.4.2-rtm-190215-07\" (#10807)"},{"Id":"410903162","IsPullRequest":true,"CreatedAt":"2019-02-15T23:35:43","Actor":"zivkan","Number":"10804","RawContent":null,"Title":"Insert NuGet Build 4.9.4-rtm.5839 into cli 2.1.5xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10804","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.4-rtm.5839 into cli 2.1.5xx\" (#10804)"},{"Id":"410764988","IsPullRequest":true,"CreatedAt":"2019-02-15T22:15:06","Actor":"dotnet-maestro[bot]","Number":"10799","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19115.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10799","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10799)"},{"Id":"410903942","IsPullRequest":true,"CreatedAt":"2019-02-15T21:17:34","Actor":"zivkan","Number":"10805","RawContent":null,"Title":"Insert NuGet Build 4.9.4-rtm.5839 into cli 2.2.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10805","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.4-rtm.5839 into cli 2.2.1xx\" (#10805)"},{"Id":"410888512","IsPullRequest":false,"CreatedAt":"2019-02-15T20:50:02","Actor":"Anipik","Number":"10802","RawContent":null,"Title":"quoted absolute paths being treated as relative paths when dotnet commands are run from unix bash script","State":"closed","Body":"## BackGround\r\nI am trying to build and runtests for dotnet\\machinelearning repo using  .net core 3.0 sdk preview 2 on a ubuntu machine.\r\n\r\nThis  https://github.com/dotnet/machinelearning/blob/master/init-tools.sh script is used to initialize the tools for the machine learning repo. \r\nThis script ends up calling https://github.com/dotnet/machinelearning/blob/master/init-tools.sh#L164\r\nwith parameters with absolute paths to csproj , tools and packages directory.\r\n\r\nThis script ends up calling https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/init-tools.sh#L82\r\n\r\nwhich packages path as \"\\machinelearning\\packages\\\" (an absolute path) which is set here https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/init-tools.sh#L38\r\n\r\nThe expected behoviour is packages being restored in \\machinelearning\\packages directory but they get restored in \\machinelearning\\machinelearning\\packages path.\r\n\r\n\r\n## Repro with Independent Project\r\n\r\nThis behavior can be easily repro with a standalone project.\r\n\r\n-  Create a new csproj project\r\n-  Create a new script (restore.sh) with content as follows\r\n```\r\n#!/usr/bin/env bash\r\n__PROJECT_DIR=${1:-}\r\n__DOTNET_CMD=${2:-}\r\n__PACKAGES_DIR=${3:-}\r\n\r\n__DEFAULT_RESTORE_ARGS=\"--no-cache --packages \\\"${__PACKAGES_DIR}\\\"\"\r\n__INIT_TOOLS_RESTORE_ARGS=\"${__DEFAULT_RESTORE_ARGS} --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json --source https://api.nuget.org/v3/index.json ${__INIT_TOOLS_RESTORE_ARGS:-}\"\r\n$__DOTNET_CMD restore  \"$__PROJECT_DIR\"  $__INIT_TOOLS_RESTORE_ARGS /pp``\r\n```\r\n- run the restore script with ``` ./restore.sh /git/RuntimeInformation/ConsoleApp18/ConsoleApp18.csproj  /machinelearning/Tools/dotnetcli/dotnet /git/packages```\r\n\r\n\r\nThis behavior can also be repro with the dotnet build command with specifying ```--output parameter```\r\n\r\nNote:- Everything works fine if we run this command(restore with --packages argument) from the command line. Another thing to notice if we remove the double quotes from here ```__DEFAULT_RESTORE_ARGS=\"--no-cache --packages \\\"${__PACKAGES_DIR}\\\"\"``` Then also it works fine.\r\n\r\nThis problem is not there if we change the sdk version to 2.1\r\n\r\n\r\nOn debugging a little deeper the property that is getting set wrong is ```RestorePackagesPath```.\r\n\r\n\r\ncc @eerhardt @safern @danmosemsft @livarcocc \r\n","Url":"https://github.com/dotnet/cli/issues/10802","RelatedDescription":"Closed issue \"quoted absolute paths being treated as relative paths when dotnet commands are run from unix bash script\" (#10802)"},{"Id":"410897444","IsPullRequest":false,"CreatedAt":"2019-02-15T18:47:58","Actor":"JoeRobich","Number":"10803","RawContent":null,"Title":"Global tool looking in incorrect path","State":"open","Body":"A bug was opened in Roslyn against the dotnet-format (https://github.com/dotnet/roslyn/issues/33414) where the cli is using the wrong path when running the global tool.\r\n\r\n## Steps to reproduce\r\nInstall the 3.0.0 release version of the dotnet-format global tool.\r\nRun `dotnet-format -?`\r\n\r\n## Expected  behavior\r\n\r\nThe app help would be displayed.\r\n\r\n## Actual behavior\r\n\r\n```\r\n~\\source\\repos> dotnet-format -?\r\nThe application to execute does not exist: 'C:\\Users\\jorobich\\.dotnet\\tools\\.store\\dotnet-format\\3.0.0-beta4-19105-10\\dotnet-format\\3.0.0-beta4-19105-10\\tools\\netcoreapp2.1\\any\\dotnet-format.dll'.\r\n```\r\n\r\nThe application is installed under a 3.0.0 folder.\r\n\r\n![image](https://user-images.githubusercontent.com/611219/52877170-29142500-310e-11e9-80fc-035505190a86.png)\r\n\r\nThe nuspec lists the version as 3.0.0.\r\n\r\n![image](https://user-images.githubusercontent.com/611219/52877237-4d700180-310e-11e9-975c-ad084574974c.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n~\\source\\repos> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-alpha1-009706\r\n Commit:    a2c490c483\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-alpha1-009706\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview1-27024-03\r\n  Commit:  0764a87431\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.12 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-rtm-009571 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009748 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009804 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009706 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.DesktopUI.App 3.0.0-alpha-27026-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.DesktopUI.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview1-27024-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27218-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10803","RelatedDescription":"Open issue \"Global tool looking in incorrect path\" (#10803)"},{"Id":"410738158","IsPullRequest":true,"CreatedAt":"2019-02-15T17:56:55","Actor":"dotnet-bot","Number":"10794","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10794","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10794)"},{"Id":"410770340","IsPullRequest":true,"CreatedAt":"2019-02-15T17:11:54","Actor":"dotnet-maestro[bot]","Number":"10800","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19114.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10800","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#10800)"},{"Id":"410827775","IsPullRequest":true,"CreatedAt":"2019-02-15T15:46:26","Actor":"v-zbsail","Number":"10801","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli release/2.2.2xx | 20190215","State":"open","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10801","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/cli release/2.2.2xx | 20190215\" (#10801)"},{"Id":"410760070","IsPullRequest":true,"CreatedAt":"2019-02-15T13:27:57","Actor":"dotnet-maestro[bot]","Number":"10798","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19114.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10798","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10798)"},{"Id":"410759913","IsPullRequest":true,"CreatedAt":"2019-02-15T13:02:17","Actor":"dotnet-maestro[bot]","Number":"10797","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10797","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#10797)"},{"Id":"410738205","IsPullRequest":true,"CreatedAt":"2019-02-15T12:01:31","Actor":"dotnet-bot","Number":"10796","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10796","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#10796)"},{"Id":"410738188","IsPullRequest":true,"CreatedAt":"2019-02-15T12:01:28","Actor":"dotnet-bot","Number":"10795","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10795","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#10795)"},{"Id":"410634773","IsPullRequest":true,"CreatedAt":"2019-02-15T07:11:20","Actor":"wli3","Number":"10791","RawContent":null,"Title":"Add --version to dotnet tool update -g","State":"open","Body":"fix https://github.com/dotnet/cli/issues/10734","Url":"https://github.com/dotnet/cli/pull/10791","RelatedDescription":"Open PR \"Add --version to dotnet tool update -g\" (#10791)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410533703","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Number":"1069","RawContent":null,"Title":"Label package as 'preview3'","State":"closed","Body":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Closed or merged PR \"Label package as 'preview3'\" (#1069)"},{"Id":"410527393","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:45","Actor":"wtgodbe","Number":"1067","RawContent":null,"Title":"Add netstandard.xml Intellisense file back to NetStandard.Library","State":"closed","Body":"The SDK expects `XmlDocFileRoot` to be defined by the repo so that it can find the intellisense file to binplace into the package - redefining this property makes it so we get `netstandard.xml` in the package again for 2.1.\r\n\r\nCC @dsplaisted @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1067","RelatedDescription":"Closed or merged PR \"Add netstandard.xml Intellisense file back to NetStandard.Library\" (#1067)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-15T19:00:06","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"open","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Open issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"},{"Id":"410528981","IsPullRequest":true,"CreatedAt":"2019-02-14T23:12:42","Actor":"dotnet-maestro[bot]","Number":"1068","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19113.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1068","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#1068)"},{"Id":"408526522","IsPullRequest":false,"CreatedAt":"2019-02-10T11:39:52","Actor":"jmroyb","Number":"1066","RawContent":null,"Title":"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?","State":"open","Body":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers","Url":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Open issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066)"},{"Id":"408429514","IsPullRequest":false,"CreatedAt":"2019-02-09T13:00:38","Actor":"kaby76","Number":"1065","RawContent":null,"Title":"CI build status log is not public","State":"open","Body":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work.","Url":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Open issue \"CI build status log is not public\" (#1065)"},{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"411244243","IsPullRequest":false,"CreatedAt":"2019-02-17T22:34:19","Actor":"ycrumeyrolle","Number":"35386","RawContent":null,"Title":"Allow to get string as a byte array/ROS<byte> from the Utf8JsonReader","State":"open","Body":"The `Utf8JsonReader` allow to read a string with the method `.GetString()`. \r\nThis method will unescape the characters thanks to `JsonReaderHelper.Unescape()`\r\n\r\nIt is possible to read a byte array representing a string with the couple ValueSequence/ValueSpan, but the characters will not be escaped. \r\n\r\nFor performance reason, it would be great to have an option to read a string as its byte array/ReadOnlySpan<byte> representation, but still unescaped, by exposing a `.GetUtf8String()` to the `Utf8JsonReader`, or by exposing the `JsonReaderHelper.Unescape()` method as public.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/35386","RelatedDescription":"Open issue \"Allow to get string as a byte array/ROS<byte> from the Utf8JsonReader\" (#35386)"},{"Id":"411242453","IsPullRequest":false,"CreatedAt":"2019-02-17T22:18:07","Actor":"ycrumeyrolle","Number":"35385","RawContent":null,"Title":"Utf8JsonWriter does not respect RFC8259","State":"open","Body":"The RFC8259 define as follow the character escaping:\r\nhttps://tools.ietf.org/html/rfc8259#section-7\r\n\r\n> All Unicode characters may be placed within the quotation marks, except for the characters that MUST be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F).\r\n\r\n> unescaped = %x20-21 / %x23-5B / %x5D-10FFFF\r\nMeaning that the escaped characters MUST be %x00-19 / %x22 / %x5C\r\n\r\nCurrently, the `Utf8JsonWriter` is escaping too much:\r\nunescaped = %x00-19 / %x22 / %x26 / %x27 %x2B / %x3C / %x3E / %x5C / %x61 / %x7F / %x80-FF\r\n\r\nIf the reason is for security, you may propose as a `JsonWriterOptions` a strict character table, and a safer character table.\r\n\r\nRelated to #34958\r\n@ahsonkhan ","Url":"https://github.com/dotnet/corefx/issues/35385","RelatedDescription":"Open issue \"Utf8JsonWriter does not respect RFC8259\" (#35385)"},{"Id":"411167228","IsPullRequest":false,"CreatedAt":"2019-02-17T21:58:38","Actor":"hognevevle","Number":"35376","RawContent":null,"Title":"HttpWebRequest with default SocketsHttpHandler hangs for certain endpoints","State":"closed","Body":"Hello,\r\n\r\nI'm trying to consume a third party API via .NET Core 2.2. I'm experiencing that the request will simply hang, using both .NET Core 2.2 and 2.1. The hang appears to be indefinite, and I have not yet reached any timeout.\r\n\r\nAttempting the same in .NET Framework or .NET Core 2.0 works as intended. \r\n\r\nAlso, by issuing the code below prior to executing the request, my request will also work in .NET Core 2.2 and 2.1. \r\n`AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);`\r\n\r\nThis leads me to believe there is a bug in the SocketsHttpHandler introduced in .NET Core 2.1.\r\n\r\nIn its simplest form, the following console app replicates the issue. \r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\n\r\nnamespace SampleRequest\r\n{\r\n    class Program\r\n        {\r\n            static void Main(string[] args)\r\n            {\r\n                Console.WriteLine(\"Hello World!\");\r\n                \r\n                //AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n                \r\n                string html = string.Empty;\r\n                string url = @\"https://sso.godaddy.com/v1/secure/api/partner/foo/account/1\";\r\n    \r\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\r\n    \r\n                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())\r\n                using (Stream stream = response.GetResponseStream())\r\n                using (StreamReader reader = new StreamReader(stream))\r\n                {\r\n                    html = reader.ReadToEnd();\r\n                    Console.WriteLine(html);\r\n                }\r\n\r\n                Console.WriteLine(\"Request ended.\");    \r\n                Console.ReadLine();\r\n            }\r\n        }\r\n}\r\n```\r\n\r\n**Expected behaviour**\r\nAs this endpoint requires a client certificate for authentication, an exception should be thrown. \r\n\r\n**Actual behaviour**\r\nWith `UseSocketsHttpHandler` set to true (being the default in 2.1/2.2), the request will simply hang. I'm seeing this behaviour regardless of whether a certificate is provided or not.\r\n\r\nWith `UseSocketsHttpHandler` set to false, or using .NET Core 2.0/netfx, an exception is thrown as expected. \r\n\r\nIssue has been verified on three different machines (Windows).","Url":"https://github.com/dotnet/corefx/issues/35376","RelatedDescription":"Closed issue \"HttpWebRequest with default SocketsHttpHandler hangs for certain endpoints\" (#35376)"},{"Id":"411229211","IsPullRequest":false,"CreatedAt":"2019-02-17T20:09:58","Actor":"gdkchan","Number":"35384","RawContent":null,"Title":"Consider adding a LOCK CMPXCHG16B intrinsic method","State":"open","Body":"The CMPXCHG16B instruction is required to do CAS or atomic read of 128-bits values in memory. Currently, atomic 64-bits read and CAS is supported on .NET with the `Interlocked.CompareExchange` and `Interlocked.Read`, however the same operations are not support for 128-bits values.\r\n\r\nI believe that the main problem is that the required instruction (CMPXCHG16B) is not supported on all CPUs, for example, it is not supported by some very old AMD CPUs, however it is a requirement to run Windows 8.1 and 10, so I beleive that the amount of CPUs were this instruction is not supported is very small.\r\n\r\nDue to the above limitation, I beleive that the best way to support it is through an intrinsic, and the user can check if the instruction is supported on the current CPU, much like the other `IsSupported` properties that are exposed on the other ISA classes. The API would be something like this:\r\n\r\n```cs\r\nnamespace System.Runtime.Intrinsics.X86\r\n{\r\n    public static class Cx16\r\n    {\r\n        // Cx16 flag check using the CPUID instruction (cached).\r\n        public static bool IsSupported { get; }\r\n        \r\n        // Returns the old value at destination.\r\n        public static Int128 InterlockedCompareExchange16Bytes(Int128* destination, Int128 value, Int128 comparand) { throw new PlatformNotSupportedException(); }\r\n        \r\n        // Returns true if the store was successful (*destination == comparand), and false otherwise.\r\n        public static bool InterlockedCompareExchange16BytesEqual(Int128* destination, Int128 value, Int128 comparand) { throw new PlatformNotSupportedException(); }\r\n    }\r\n}\r\n```\r\n\r\nIt uses an `Int128` type that is not yet available, but AFAIK work is being done to add it (https://github.com/dotnet/corefxlab/issues/2635).\r\nAnother alternative is passing the value as two 64-bits values (the low and high parts of the 128-bits value). Afterall, the instruction uses 2 64-bits registers. I beleive the main problem which this solution is returning the 128-bits value.\r\n\r\nThe CMPXCHG16B sets the zero flag, if the values at destination and the comparand are equal, and clears it otherwise. So, I included a method that returns bool (it would just return the ZF value basically), since it should have better codegen for the case where the user just wants to know if the two values are equal, and the store succeeded. On some cases, getting the value that is currently at `destination` is necessary (for example, when the user just wants to do a atomic 128-bits read), so in this case, the method returning a `Int128` can be used (an example is provided below, with the `AtomicRead128` method). The method returning a bool can be replaced with the one returning a `Int128`, by comparing the returned value with the comparand value, it has slightly worse codegen, but the same end result.\r\n\r\nIt's also worth noting that this instruction has alignment requirements, and the address should be 16 bytes aligned. I believe that the `LoadAligned` SSE intrinsic method had a similar problem, so peharps this can be handled in a similar way?\r\n\r\nExample usage, an atomic 128-bits increment, just for illustration purposes:\r\n\r\n```cs\r\npublic static Int128 AtomicIncrement128(Int128* destination)\r\n{\r\n    Int128 oldValue, newValue;\r\n    \r\n    do\r\n    {\r\n        oldValue = AtomicRead128(destination);\r\n        newValue = oldValue + 1;\r\n    }\r\n    while (!InterlockedCompareExchange16BytesEqual(destination, newValue, oldValue);\r\n\r\n    return oldValue;\r\n}\r\n\r\nprivate static Int128 AtomicRead128(Int128* source)\r\n{\r\n    // Note: Will cause an access violation for read-only mapped regions,\r\n    // because CMPXCHG16B always performs a write, even if the the store \"fails\".\r\n    return InterlockedCompareExchange16Bytes(source, Int128.Zero, Int128.Zero);\r\n}\r\n```\r\n\r\nIt may be worth noting (in case a implementation on `Interlocked` is desired) that it's also possible to implement this on ARM64, by using LDAXP/CMP/STLXP instruction sequences with two 64-bits registers.","Url":"https://github.com/dotnet/corefx/issues/35384","RelatedDescription":"Open issue \"Consider adding a LOCK CMPXCHG16B intrinsic method\" (#35384)"},{"Id":"411218661","IsPullRequest":true,"CreatedAt":"2019-02-17T18:30:52","Actor":"davidsh","Number":"35383","RawContent":null,"Title":"Fix Negotiate/SPNEGO Kerberos to NTLM fallback on Linux","State":"open","Body":"This PR adds support to our Linux gssapi layer so that we properly handle the Negotiate\r\nprotocol (SPNEGO) being able to to fall back from Kerberos to NTLM.\r\n\r\nWindows Negotiate SSPI implements the SPNEGO protocol. However, it has built-in error\r\nhandling for dealing with quick fallback from Kerberos to NTLM in error cases such as where\r\nthe client is not on a domain/Kerberos realm, the client is using a local credential, the\r\nclient is talking to a non-domain server, etc.\r\n\r\nHowever, the Linux implementation of SPNEGO doesn't handle those error cases very well.\r\nSo, I added the proper retry logic when generating the initial context token. Now, we will\r\nbe able to fall back from SPNEGO-wrapped Kerberos to SPNEGO-wrapped NTLM protocol blobs.\r\n\r\nA similar bug exists in libcurl which is why Curl and CurlHandler are unable to connect to\r\nNegotiate servers when not part of the Kerberos realm. I am considering proposing my fixes\r\nto the libcurl repo as well.\r\n\r\nI added more tests to support this PR and did manual testing. I added some additional\r\nEventSource tracing as well.\r\n\r\nContributes to #34878","Url":"https://github.com/dotnet/corefx/pull/35383","RelatedDescription":"Open PR \"Fix Negotiate/SPNEGO Kerberos to NTLM fallback on Linux\" (#35383)"},{"Id":"411212683","IsPullRequest":false,"CreatedAt":"2019-02-17T18:03:28","Actor":"Sioma112233","Number":"35382","RawContent":null,"Title":"Marshal.GetLastWin32Error doesnt seem to work (always return 0)","State":"closed","Body":"Hey, \r\nI am trying to use Marshal.GetLastWin32Error on Linux and always get a 0 return value.\r\nI tested the same code with dotnet-core and mono and came up with different results.\r\nthis code:\r\n``` csharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace Test\r\n{\r\n    static class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            int fd = open(\"/this-path-is-not-real\", 2); // 2 is ReadWrite\r\n\r\n            Console.WriteLine(fd);\r\n            Console.WriteLine(Marshal.GetLastWin32Error());\r\n        }\r\n\r\n  \r\n        [DllImport(\"libc\", SetLastError = true)]\r\n        static extern int open(string pathname, int flags);\r\n    }\r\n}\r\n```\r\n**Mono Output (correct behaviour)**\r\n```\r\n-1\r\n2 // 2 is the err-code of 'file not found'\r\n```\r\n**Dotnet-Core Output (incorrect behaviour)**\r\n```\r\n-1\r\n0\r\n```\r\nI also tried opening the file in ReadOnly mode with same result\r\n\r\nThanks in advance\r\n","Url":"https://github.com/dotnet/corefx/issues/35382","RelatedDescription":"Closed issue \"Marshal.GetLastWin32Error doesnt seem to work (always return 0)\" (#35382)"},{"Id":"411202143","IsPullRequest":false,"CreatedAt":"2019-02-17T15:53:55","Actor":"JustNrik","Number":"35381","RawContent":null,"Title":"[Proposal] GetLongHashCode()","State":"open","Body":"Basically, GetHashCode() but returning `long` instead. Enabled for 64bits only (?)\r\n\r\nThis would be useful to avoid hashcode collitions with big collections and collections that uses long/ulong as key.\r\n\r\nIt could co-exist along with GetHashCode or change GetHashCode return type to long if targeted platform is 64 bits.","Url":"https://github.com/dotnet/corefx/issues/35381","RelatedDescription":"Open issue \"[Proposal] GetLongHashCode()\" (#35381)"},{"Id":"411187755","IsPullRequest":true,"CreatedAt":"2019-02-17T14:59:43","Actor":"dotnet-maestro[bot]","Number":"35379","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19117.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35379","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#35379)"},{"Id":"411185522","IsPullRequest":true,"CreatedAt":"2019-02-17T14:30:27","Actor":"dotnet-maestro[bot]","Number":"35377","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27416-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27416-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27416-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35377","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35377)"},{"Id":"411193412","IsPullRequest":false,"CreatedAt":"2019-02-17T14:30:19","Actor":"pgolebiowski","Number":"35380","RawContent":null,"Title":"Add a pairing heap to System.Collections.Specialized","State":"open","Body":"## About\r\n\r\nOver four years ago, we started [a conversation on GitHub](https://github.com/dotnet/corefx/issues/574) about adding a priority queue to the framework. We didn't reach a consensus.\r\n\r\nWhen we started diving deep, we learned that customer expectations varied so much that we were going back and forth and none solution to the problem appeared to be good enough to end up in the framework. I think we've been tackling a problem that was too big. Instead of focusing on providing \"a priority queue\" to the `.General` namespace, let's focus on providing \"priority queue capabilities\" to the `.Specialized` namespace — a small and smart data structure that could be used to satisfy various customer expectations.\r\n\r\n## Proposal\r\n\r\nI believe that this would provide the right balance:\r\n\r\n```csharp\r\npublic class PairingHeap<TKey, TValue> : IEnumerable<PairingHeapNode<TKey, TValue>>\r\n{\r\n    public PairingHeap(IComparer<TKey> comparer);\r\n\r\n    public PairingHeapNode<TKey, TValue> Root { get; }\r\n    public int Count { get; }\r\n\r\n    public PairingHeapNode<TKey, TValue> Add(TKey key, TValue value);\r\n    public void Update(PairingHeapNode<TKey, TValue> node, TKey key);\r\n    public void Remove(PairingHeapNode<TKey, TValue> node);\r\n    public void Merge(PairingHeap<TKey, TValue> otherHeap);\r\n    \r\n    public IEnumerator<IHeapNode<TKey, TValue>> GetEnumerator();\r\n}\r\n\r\npublic class PairingHeapNode<TKey, TValue>\r\n{\r\n    public TKey Key { get; }\r\n    public TValue Value { get; }\r\n}\r\n```\r\n\r\n## Important\r\n\r\nI think that for every reasonable `X` in \"but why not `X` instead of `PairingHeap<TKey, TValue>`\", `X` could be implemented with `PairingHeap<TKey, TValue>`.\r\n\r\n## Before you comment\r\n\r\n1. Read [this thread](https://github.com/dotnet/corefx/issues/574) — so that you have the context and we don't repeat the same points over and over.\r\n2. At least skim through [this paper](https://arxiv.org/pdf/1403.0252v1.pdf).\r\n","Url":"https://github.com/dotnet/corefx/issues/35380","RelatedDescription":"Open issue \"Add a pairing heap to System.Collections.Specialized\" (#35380)"},{"Id":"411187326","IsPullRequest":true,"CreatedAt":"2019-02-17T13:24:41","Actor":"dotnet-maestro[bot]","Number":"35378","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27416-4\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview4-27416-4\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview4-27416-4\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35378","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#35378)"},{"Id":"411130219","IsPullRequest":true,"CreatedAt":"2019-02-17T05:15:34","Actor":"VSadov","Number":"35373","RawContent":null,"Title":"Updating timeout in `SslStream_SameCertUsedForClientAndServer_Ok` test","State":"closed","Body":"Updating timeout in `SslStream_SameCertUsedForClientAndServer_Ok` to match the rest of the tests in the area.\r\n\r\nAll other passing tests standardise on `TestConfiguration.PassingTestTimeoutMilliseconds`\r\n\r\nThere seems to be no reasons for `SslStream_SameCertUsedForClientAndServer_Ok` to use a hardcoded timeout.\r\nAlso the timeout is significantly shorter and occasionally leads to failures on low-spec test VMs.","Url":"https://github.com/dotnet/corefx/pull/35373","RelatedDescription":"Closed or merged PR \"Updating timeout in `SslStream_SameCertUsedForClientAndServer_Ok` test\" (#35373)"},{"Id":"411136556","IsPullRequest":true,"CreatedAt":"2019-02-17T03:04:57","Actor":"Dotnet-GitSync-Bot","Number":"35374","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/35374","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35374)"},{"Id":"411071393","IsPullRequest":true,"CreatedAt":"2019-02-16T14:29:03","Actor":"dotnet-maestro[bot]","Number":"35372","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27415-75\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27415-75\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27415-75\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35372","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35372)"},{"Id":"411070358","IsPullRequest":false,"CreatedAt":"2019-02-16T12:54:41","Actor":"frankhaugen","Number":"35371","RawContent":null,"Title":"Adding a .Batch to Linq","State":"open","Body":"This might have been suggested before, but I couldn't locate it. And it's my first attempt at something like this, so I apologize if I'm doing it wrong\r\n\r\nI fin myself re-using this extension in almost all of my \"large data\"-projects, and I miss it as a \"core feature\" of Linq:\r\n```C#\r\nstatic class EnumerableExtensions\r\n{\r\n\tpublic static IEnumerable<IEnumerable<TSource>> Batch<TSource>(this IEnumerable<TSource> source, int maxItems)\r\n\t{\r\n\t\treturn source.Select((item, inx) => new { item, inx })\r\n\t\t\t.GroupBy(x => x.inx / maxItems)\r\n\t\t\t.Select(g => g.Select(x => x.item));\r\n\t}\r\n}\r\n```\r\nIt's as simple as it get's though I'd have to delve deeper into the Linq code before making it, as it seems to be \"wrong\" to use Linq in a Linq \"feature\"\r\n\r\nThank you for taking the time to consider my proposal\r\n","Url":"https://github.com/dotnet/corefx/issues/35371","RelatedDescription":"Open issue \"Adding a .Batch to Linq\" (#35371)"},{"Id":"411065182","IsPullRequest":false,"CreatedAt":"2019-02-16T11:47:47","Actor":"ajtribick","Number":"35370","RawContent":null,"Title":"Add ReadOnlySpan<char> overloads to text element/CharUnicodeInfo routines","State":"open","Body":"Currently it is possible to process a string using text elements via the `StringInfo` class and `TextElementEnumerator`. Unfortunately these do not provide overloads for `ReadOnlySpan<char>`. Similarly there are no `ReadOnlySpan<char>` overloads for `CharUnicodeInfo`, where this would be useful to deal with characters outside the Basic Multilingual Plane. This could be very useful for parsers.","Url":"https://github.com/dotnet/corefx/issues/35370","RelatedDescription":"Open issue \"Add ReadOnlySpan<char> overloads to text element/CharUnicodeInfo routines\" (#35370)"},{"Id":"411055172","IsPullRequest":false,"CreatedAt":"2019-02-16T09:54:43","Actor":"Metalnem","Number":"35369","RawContent":null,"Title":"G17 format specifier doesn't always round-trip double values","State":"open","Body":"The documentation for numeric format strings says that the **G17** format specifier is the recommended way for round-tripping double values, but it doesn't always work. Here is the full example of one such case:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace Roundtripping\r\n{\r\n  public class Program\r\n  {\r\n    public static void Main(string[] args)\r\n    {\r\n      var s = \"23723333333333333433333337\";\r\n\r\n      double d1 = Double.Parse(s);\r\n      double d2 = Double.Parse(d1.ToString(\"G17\"));\r\n\r\n      Console.WriteLine(d1 == d2);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis program prints false on .NET Core 2.2.104, and true on .NET Core 3.0.100-preview-010184. I see that there were a lot of issues and commits fixing the **R** specifier, but I was under the impression that **G17** was always supposed to work.\r\n\r\nFound via [SharpFuzz](https://github.com/Metalnem/sharpfuzz).","Url":"https://github.com/dotnet/corefx/issues/35369","RelatedDescription":"Open issue \"G17 format specifier doesn't always round-trip double values\" (#35369)"},{"Id":"410919752","IsPullRequest":false,"CreatedAt":"2019-02-16T06:37:03","Actor":"Ziriax","Number":"35360","RawContent":null,"Title":"FILETIME structure uses wrong type","State":"closed","Body":"In file `corefx/src/Common/src/CoreLib/System/Runtime/InteropServices/ComTypes/IMoniker.cs`, the type `FILETIME` uses `int` to map `dwLowDateTime` and `dwHighDateTime`.\r\n\r\nHowever, this should be `uint`.\r\n\r\nIs this mapping intentional, maybe for historical reasons?\r\n","Url":"https://github.com/dotnet/corefx/issues/35360","RelatedDescription":"Closed issue \"FILETIME structure uses wrong type\" (#35360)"},{"Id":"411022828","IsPullRequest":false,"CreatedAt":"2019-02-16T04:00:00","Actor":"SoerenBusse","Number":"35368","RawContent":null,"Title":"Process kill tree - No such process when killing firefox","State":"open","Body":"Hey there,\r\n\r\nwe've started a new process and would like to use the new `Kill(true)` method for killing an entire process tree. However we encountered a special behaviour when trying to kill firefox or chrome. \r\n\r\nAfter calling the `Kill(true)` method of a process object starting firefox or chrome we get an `Win32Exception - No such process` exception.\r\n\r\n```\r\nUnhandled Exception: System.AggregateException: Not all processes in process tree could be terminated. (No such process) (No such process) (No such process) ---> System.ComponentModel.Win32Exception: No such process\r\n  at System.Diagnostics.Process.Stop()\r\n  at System.Diagnostics.Process.KillTree()\r\n  --- End of inner exception stack trace ---\r\n  at System.Diagnostics.Process.Kill(Boolean entireProcessTree)\r\n  at MagicApplication.Daemon.ProcessManagement.ManagedProcess.StopAsync(CancellationToken cancellationToken) in /home/user/Repositories/MagicApplication/MagicApplication.Daemon/ProcessManagement/ManagedProcess.cs:line 249\r\n  at MagicApplication.Daemon.Daemon.StopAsync() in /home/user/Repositories/MagicApplication/MagicApplication.Daemon/Daemon.cs:line 34\r\n  at MagicApplication.Daemon.Program.Main(String[] args) in /home/user/Repositories/MagicApplication/MagicApplication.Daemon/Program.cs:line 39\r\n  at MagicApplication.Daemon.Program.<Main>(String[] args)\r\n```\r\n\r\nWhen understanding the source code right it seems that first the child process list is retrieved and afterwards the main process is killed.\r\nhttps://github.com/dotnet/corefx/blob/81bd671efda5db20fae1eb381aeff2cf8ea727ac/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L99\r\nBut firefox automatically clean's up it's children so that the `Stop()` call on the entries of the child process list fails with a non zero exit code: `ESRCH`. This fires a `Win32Exception` and not as handled an `InvalidOperationException` \r\n\r\nOS: Ubuntu 18.04","Url":"https://github.com/dotnet/corefx/issues/35368","RelatedDescription":"Open issue \"Process kill tree - No such process when killing firefox\" (#35368)"},{"Id":"411018884","IsPullRequest":true,"CreatedAt":"2019-02-16T03:09:49","Actor":"bartonjs","Number":"35367","RawContent":null,"Title":"Add support for OCSP on Linux, overhaul X509Chain processing","State":"open","Body":"The primary motivator for this change is to enable support for validating certificates with the On-line Certificate Status Protocol (OCSP) in addition to Certificate Revocation Lists (CRLs).\r\n\r\nOCSP requests can't be done speculatively, as the issuer public key is used as part of the request payload; so the chain building can't just be done as a big data dump.\r\n\r\nWhile tinkering with the chain building, move a lot of the processing to the native side to cut down on the number of P/Invokes that are required.  In particular, loading CurrentUser\\My no longer has 3 P/Invokes per entry (File.Open, interpret the contents, add to the chain build context), but just one call for the whole store (the fopen/interpret/add are all done in the same iterated function).\r\n\r\nAdditionally, move some allocating things to rent from the array pool, or do one-time lookups and save the result in statics.\r\n\r\nFixes #3034.","Url":"https://github.com/dotnet/corefx/pull/35367","RelatedDescription":"Open PR \"Add support for OCSP on Linux, overhaul X509Chain processing\" (#35367)"},{"Id":"410985929","IsPullRequest":true,"CreatedAt":"2019-02-16T02:49:19","Actor":"Dotnet-GitSync-Bot","Number":"35365","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corefx/pull/35365","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35365)"},{"Id":"411016634","IsPullRequest":true,"CreatedAt":"2019-02-16T02:39:14","Actor":"davidsh","Number":"35366","RawContent":null,"Title":"NO MERGE: Test CI machines for NTLM support","State":"open","Body":"This PR will test the work being done by https://github.com/dotnet/core-eng/issues/5135 to add NTLM support to the Linux CI machines.","Url":"https://github.com/dotnet/corefx/pull/35366","RelatedDescription":"Open PR \"NO MERGE: Test CI machines for NTLM support\" (#35366)"},{"Id":"410908203","IsPullRequest":true,"CreatedAt":"2019-02-16T00:12:28","Actor":"dotnet-maestro-bot","Number":"35359","RawContent":null,"Title":"Update BuildTools, ProjectNTfs, ProjectNTfsTestILC to preview1-03715-01, beta-27415-00, beta-27415-00, respectively (release/3.0)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35359","RelatedDescription":"Closed or merged PR \"Update BuildTools, ProjectNTfs, ProjectNTfsTestILC to preview1-03715-01, beta-27415-00, beta-27415-00, respectively (release/3.0)\" (#35359)"},{"Id":"410977278","IsPullRequest":true,"CreatedAt":"2019-02-15T22:44:33","Actor":"omariom","Number":"35364","RawContent":null,"Title":"Improve BitArray's Get, Set, SetAll and Not methods performance","State":"open","Body":"The generated code got smaller so I added `AggressiveInlining` to `Get` and `Set`.\r\n\r\n**Benchmarks**:\r\n```C#\r\n[InProcessEmit]\r\npublic class BitArrayBenchmarks\r\n{\r\n    private BitArray bitArray = new BitArray(1000, true);\r\n\r\n    [Benchmark][Arguments(100)]\r\n    public bool Get(int index) => bitArray.Get(index);\r\n\r\n    [Benchmark][Arguments(100, false)]\r\n    public void Set(int index, bool value) => bitArray.Set(index, value);\r\n\r\n    [Benchmark]\r\n    public void SetAll() => bitArray.SetAll(false);\r\n\r\n    [Benchmark]\r\n    public void Not() => bitArray.Not();\r\n}\r\n\r\npublic class InProcessEmitAttribute : JobConfigBaseAttribute\r\n{\r\n    public InProcessEmitAttribute() : base(new Job(\"InProcessEmit\", new InfrastructureMode \r\n        { Toolchain = InProcessEmitToolchain.Instance }))\r\n    {\r\n    }\r\n}\r\n```\r\n**Results**:\r\n```\r\nBenchmarkDotNet=v0.11.4, OS=Windows 10.0.17763.316 (1809/October2018Update/Redstone5)\r\nIntel Core i7-8809G CPU 3.10GHz (Coffee Lake), 1 CPU, 8 logical and 4 physical cores\r\n.NET Core SDK=3.0.100-preview-010184\r\n  [Host] : .NET Core ? (CoreCLR 4.6.27514.0, CoreFX 4.7.19.11501), 64bit RyuJIT\r\n\r\nJob=InProcessEmit  Toolchain=InProcessEmitToolchain  \r\n```\r\n\r\n**Before**:\r\n\r\n| Method |      Mean |     Error |    StdDev |\r\n|------- |----------:|----------:|----------:|\r\n|    Get |  1.008 ns | 0.0359 ns | 0.0336 ns |\r\n|    Set |  1.811 ns | 0.0072 ns | 0.0060 ns |\r\n\r\n**After (without AggressiveInlining)**:\r\n\r\n| Method |       Mean |     Error |    StdDev |\r\n|------- |-----------:|----------:|----------:|\r\n|    Get |  0.9117 ns | 0.0482 ns | 0.0473 ns |\r\n|    Set |  1.4892 ns | 0.0884 ns | 0.1053 ns |\r\n\r\n**After (with AggressiveInlining)**:\r\n\r\n| Method |      Mean |     Error |    StdDev |\r\n|------- |----------:|----------:|----------:|\r\n|    Get | 0.2765 ns | 0.0055 ns | 0.0052 ns |\r\n|    Set | 0.7850 ns | 0.0267 ns | 0.0249 ns |\r\n\r\n------\r\n**Before**\r\n\r\n| Method |      Mean |     Error |    StdDev |\r\n|------- |----------:|----------:|----------:|\r\n| SetAll | 17.822 ns | 0.0541 ns | 0.0506 ns |\r\n|    Not | 21.032 ns | 0.1795 ns | 0.1679 ns |\r\n\r\n**After**:\r\n\r\n| Method |       Mean |     Error |    StdDev |\r\n|------- |-----------:|----------:|----------:|\r\n| SetAll | 10.2743 ns | 0.1039 ns | 0.0868 ns |\r\n|    Not | 19.0571 ns | 0.3053 ns | 0.2706 ns |\r\n\r\n<details><summary>Code generated BEFORE</summary><p>\r\n\r\n```ASM\r\n; Assembly listing for method BitArray:Get(int):bool:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T01] (  4,  4   )     ref  ->  rcx         this class-hnd\r\n;  V01 arg1         [V01,T00] (  6,  5   )     int  ->  rsi        \r\n;* V02 loc0         [V02    ] (  0,  0   )     int  ->  zero-ref   \r\n;  V03 loc1         [V03,T04] (  2,  2   )     int  ->  rsi         ld-addr-op\r\n;  V04 OutArgs      [V04    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V05 tmp1         [V05,T05] (  3,  0   )     ref  ->  rdi         class-hnd exact \"Single-def Box Helper\"\r\n;  V06 tmp2         [V06,T06] (  3,  0   )     ref  ->  rsi         class-hnd exact \"NewObj constructor temp\"\r\n;  V07 tmp3         [V07,T03] (  3,  3   )     int  ->  rax         \"Inline stloc first use temp\"\r\n;  V08 tmp4         [V08,T07] (  2,  0   )     ref  ->  rcx         \"argument with side effect\"\r\n;  V09 tmp5         [V09,T08] (  2,  0   )     ref  ->  rbx         \"argument with side effect\"\r\n;  V10 tmp6         [V10,T09] (  2,  0   )     ref  ->   r9         \"argument with side effect\"\r\n;  V11 tmp7         [V11,T02] (  3,  6   )     ref  ->  rcx         \"arr expr\"\r\n;\r\n; Lcl frame size = 32\r\n\r\nG_M31143_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       53                   push     rbx\r\n       4883EC20             sub      rsp, 32\r\n       8BF2                 mov      esi, edx\r\n\r\nG_M31143_IG02:\r\n       3B7110               cmp      esi, dword ptr [rcx+16]\r\n       732D                 jae      SHORT G_M31143_IG05\r\n\r\nG_M31143_IG03:\r\n       8BC6                 mov      eax, esi\r\n       C1E805               shr      eax, 5\r\n       83E61F               and      esi, 31\r\n       488B4908             mov      rcx, gword ptr [rcx+8]\r\n       3B4108               cmp      eax, dword ptr [rcx+8]\r\n       0F838E000000         jae      G_M31143_IG06\r\n       4863C0               movsxd   rax, eax\r\n       8B448110             mov      eax, dword ptr [rcx+4*rax+16]\r\n       0FA3F0               bt       eax, esi\r\n       0F92C0               setb     al\r\n       0FB6C0               movzx    rax, al\r\n\r\nG_M31143_IG04:\r\n       4883C420             add      rsp, 32\r\n       5B                   pop      rbx\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       C3                   ret      \r\n\r\nG_M31143_IG05:\r\n       48B9C8CE517CF97F0000 mov      rcx, 0x7FF97C51CEC8\r\n       E88688B25F           call     CORINFO_HELP_NEWSFAST\r\n       488BF8               mov      rdi, rax\r\n       897708               mov      dword ptr [rdi+8], esi\r\n       48B9B83A5C7CF97F0000 mov      rcx, 0x7FF97C5C3AB8\r\n       E87188B25F           call     CORINFO_HELP_NEWSFAST\r\n       488BF0               mov      rsi, rax\r\n       B91D080000           mov      ecx, 0x81D\r\n       48BA90CC5E7CF97F0000 mov      rdx, 0x7FF97C5ECC90\r\n       E8AA1DB25F           call     CORINFO_HELP_STRCNS\r\n       488BD8               mov      rbx, rax\r\n       B98F050000           mov      ecx, 0x58F\r\n       48BA90CC5E7CF97F0000 mov      rdx, 0x7FF97C5ECC90\r\n       E8931DB25F           call     CORINFO_HELP_STRCNS\r\n       488BC8               mov      rcx, rax\r\n       33D2                 xor      rdx, rdx\r\n       E8C9FBFFFF           call     SR:GetResourceString(ref,ref):ref\r\n       4C8BC8               mov      r9, rax\r\n       488BD3               mov      rdx, rbx\r\n       4C8BC7               mov      r8, rdi\r\n       488BCE               mov      rcx, rsi\r\n       E8507EFFFF           call     ArgumentOutOfRangeException:.ctor(ref,ref,ref):this\r\n       488BCE               mov      rcx, rsi\r\n       E82035A25F           call     CORINFO_HELP_THROW\r\n       CC                   int3     \r\n\r\nG_M31143_IG06:\r\n       E88A89C65F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 183, prolog size 7 for method BitArray:Get(int):bool:this\r\n; ============================================================\r\n\r\n; Assembly listing for method BitArray:Set(int,bool):this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T00] (  6,  6   )     ref  ->  rax         this class-hnd\r\n;  V01 arg1         [V01,T01] (  6,  5   )     int  ->  rsi        \r\n;  V02 arg2         [V02,T03] (  3,  3   )    bool  ->   r8        \r\n;  V03 loc0         [V03,T07] (  3,  3   )     int  ->  rcx        \r\n;  V04 loc1         [V04,T09] (  3,  2   )     int  ->  rsi         ld-addr-op\r\n;  V05 loc2         [V05,T04] (  6,  4   )     int  ->   r9        \r\n;  V06 OutArgs      [V06    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V07 tmp1         [V07,T12] (  3,  0   )     ref  ->  rdi         class-hnd exact \"Single-def Box Helper\"\r\n;  V08 tmp2         [V08,T13] (  3,  0   )     ref  ->  rsi         class-hnd exact \"NewObj constructor temp\"\r\n;  V09 tmp3         [V09,T10] (  2,  2   )     int  ->  rcx         \"Inline stloc first use temp\"\r\n;  V10 tmp4         [V10,T14] (  2,  0   )     ref  ->  rcx         \"argument with side effect\"\r\n;  V11 tmp5         [V11,T15] (  2,  0   )     ref  ->  rbx         \"argument with side effect\"\r\n;  V12 tmp6         [V12,T16] (  2,  0   )     ref  ->   r9         \"argument with side effect\"\r\n;  V13 tmp7         [V13,T02] (  3,  6   )     ref  ->   r9         \"arr expr\"\r\n;  V14 tmp8         [V14,T05] (  2,  4   )     ref  ->  rdx         \"arr expr\"\r\n;  V15 cse0         [V15,T06] (  3,  3   )     ref  ->  rdx         \"ValNumCSE\"\r\n;  V16 cse1         [V16,T11] (  2,  2   )     int  ->  r10         \"ValNumCSE\"\r\n;  V17 cse2         [V17,T08] (  3,  3   )    long  ->  r10         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 32\r\n\r\nG_M52659_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       53                   push     rbx\r\n       4883EC20             sub      rsp, 32\r\n       488BC1               mov      rax, rcx\r\n       8BF2                 mov      esi, edx\r\n\r\nG_M52659_IG02:\r\n       3B7010               cmp      esi, dword ptr [rax+16]\r\n       735F                 jae      SHORT G_M52659_IG07\r\n\r\nG_M52659_IG03:\r\n       8BCE                 mov      ecx, esi\r\n       C1E905               shr      ecx, 5\r\n       83E61F               and      esi, 31\r\n       488B5008             mov      rdx, gword ptr [rax+8]\r\n       4C8BCA               mov      r9, rdx\r\n       458B5108             mov      r10d, dword ptr [r9+8]\r\n       413BCA               cmp      ecx, r10d\r\n       0F83B9000000         jae      G_M52659_IG08\r\n       4C63D1               movsxd   r10, ecx\r\n       478B4C9110           mov      r9d, dword ptr [r9+4*r10+16]\r\n       4584C0               test     r8b, r8b\r\n       7410                 je       SHORT G_M52659_IG04\r\n       41B801000000         mov      r8d, 1\r\n       8BCE                 mov      ecx, esi\r\n       41D3E0               shl      r8d, cl\r\n       450BC8               or       r9d, r8d\r\n       EB16                 jmp      SHORT G_M52659_IG05\r\n\r\nG_M52659_IG04:\r\n       41B801000000         mov      r8d, 1\r\n       8BCE                 mov      ecx, esi\r\n       41D3E0               shl      r8d, cl\r\n       418BC8               mov      ecx, r8d\r\n       F7D1                 not      ecx\r\n       4123C9               and      ecx, r9d\r\n       448BC9               mov      r9d, ecx\r\n\r\nG_M52659_IG05:\r\n       46894C9210           mov      dword ptr [rdx+4*r10+16], r9d\r\n       FF4014               inc      dword ptr [rax+20]\r\n\r\nG_M52659_IG06:\r\n       4883C420             add      rsp, 32\r\n       5B                   pop      rbx\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       C3                   ret      \r\n\r\nG_M52659_IG07:\r\n       48B9C8CE517CF97F0000 mov      rcx, 0x7FF97C51CEC8\r\n       E85187B25F           call     CORINFO_HELP_NEWSFAST\r\n       488BF8               mov      rdi, rax\r\n       897708               mov      dword ptr [rdi+8], esi\r\n       48B9B83A5C7CF97F0000 mov      rcx, 0x7FF97C5C3AB8\r\n       E83C87B25F           call     CORINFO_HELP_NEWSFAST\r\n       488BF0               mov      rsi, rax\r\n       B91D080000           mov      ecx, 0x81D\r\n       48BA90CC5E7CF97F0000 mov      rdx, 0x7FF97C5ECC90\r\n       E8751CB25F           call     CORINFO_HELP_STRCNS\r\n       488BD8               mov      rbx, rax\r\n       B98F050000           mov      ecx, 0x58F\r\n       48BA90CC5E7CF97F0000 mov      rdx, 0x7FF97C5ECC90\r\n       E85E1CB25F           call     CORINFO_HELP_STRCNS\r\n       488BC8               mov      rcx, rax\r\n       33D2                 xor      rdx, rdx\r\n       E894FAFFFF           call     SR:GetResourceString(ref,ref):ref\r\n       4C8BC8               mov      r9, rax\r\n       488BD3               mov      rdx, rbx\r\n       4C8BC7               mov      r8, rdi\r\n       488BCE               mov      rcx, rsi\r\n       E81B7DFFFF           call     ArgumentOutOfRangeException:.ctor(ref,ref,ref):this\r\n       488BCE               mov      rcx, rsi\r\n       E8EB33A25F           call     CORINFO_HELP_THROW\r\n       CC                   int3     \r\n\r\nG_M52659_IG08:\r\n       E85588C65F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 236, prolog size 7 for method BitArray:Set(int,bool):this\r\n; ============================================================\r\n\r\n; Assembly listing for method BitArray:SetAll(bool):this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; fully interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T03] (  5,  5   )     ref  ->  rcx         this class-hnd\r\n;  V01 arg1         [V01,T04] (  3,  3   )    bool  ->  rdx        \r\n;  V02 loc0         [V02,T05] (  2,  5   )     int  ->  rax        \r\n;  V03 loc1         [V03,T01] (  6, 21   )     int  ->  rdx        \r\n;  V04 OutArgs      [V04    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V05 tmp1         [V05,T06] (  3,  2   )     int  ->  rax        \r\n;  V06 tmp2         [V06,T00] (  3, 24   )     ref  ->   r9         \"arr expr\"\r\n;  V07 cse0         [V07,T02] (  4, 10   )     ref  ->   r8         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M27665_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop      \r\n\r\nG_M27665_IG02:\r\n       84D2                 test     dl, dl\r\n       7504                 jne      SHORT G_M27665_IG03\r\n       33C0                 xor      eax, eax\r\n       EB05                 jmp      SHORT G_M27665_IG04\r\n\r\nG_M27665_IG03:\r\n       B8FFFFFFFF           mov      eax, -1\r\n\r\nG_M27665_IG04:\r\n       33D2                 xor      edx, edx\r\n       4C8B4108             mov      r8, gword ptr [rcx+8]\r\n       4183780800           cmp      dword ptr [r8+8], 0\r\n       7E19                 jle      SHORT G_M27665_IG06\r\n\r\nG_M27665_IG05:\r\n       4D8BC8               mov      r9, r8\r\n       413B5108             cmp      edx, dword ptr [r9+8]\r\n       7318                 jae      SHORT G_M27665_IG08\r\n       4C63D2               movsxd   r10, edx\r\n       4389449110           mov      dword ptr [r9+4*r10+16], eax\r\n       FFC2                 inc      edx\r\n       41395008             cmp      dword ptr [r8+8], edx\r\n       7FE7                 jg       SHORT G_M27665_IG05\r\n\r\nG_M27665_IG06:\r\n       FF4114               inc      dword ptr [rcx+20]\r\n\r\nG_M27665_IG07:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M27665_IG08:\r\n       E8EB87C65F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 70, prolog size 5 for method BitArray:SetAll(bool):this\r\n; ============================================================\r\n\r\n; Assembly listing for method BitArray:Not():ref:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; fully interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T06] (  6,  6   )     ref  ->  rcx         this class-hnd\r\n;  V01 loc0         [V01,T01] (  6, 21   )     int  ->  rax        \r\n;  V02 OutArgs      [V02    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V03 tmp1         [V03,T02] (  2, 16   )     ref  ->   r8         class-hnd \"Strict ordering of exceptions for Array store\"\r\n;  V04 tmp2         [V04,T03] (  2, 16   )     int  ->   r9         \"Strict ordering of exceptions for Array store\"\r\n;  V05 tmp3         [V05,T00] (  3, 24   )     ref  ->   r9         \"arr expr\"\r\n;  V06 cse0         [V06,T04] (  5, 14   )     ref  ->  rdx         \"ValNumCSE\"\r\n;  V07 cse1         [V07,T07] (  2,  8   )     int  ->  r10         \"ValNumCSE\"\r\n;  V08 cse2         [V08,T05] (  3, 12   )    long  ->  r10         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M5415_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop      \r\n\r\nG_M5415_IG02:\r\n       33C0                 xor      eax, eax\r\n       488B5108             mov      rdx, gword ptr [rcx+8]\r\n       837A0800             cmp      dword ptr [rdx+8], 0\r\n       7E26                 jle      SHORT G_M5415_IG04\r\n\r\nG_M5415_IG03:\r\n       4C8BC2               mov      r8, rdx\r\n       4C8BCA               mov      r9, rdx\r\n       458B5108             mov      r10d, dword ptr [r9+8]\r\n       413BC2               cmp      eax, r10d\r\n       7322                 jae      SHORT G_M5415_IG06\r\n       4C63D0               movsxd   r10, eax\r\n       478B4C9110           mov      r9d, dword ptr [r9+4*r10+16]\r\n       41F7D1               not      r9d\r\n       47894C9010           mov      dword ptr [r8+4*r10+16], r9d\r\n       FFC0                 inc      eax\r\n       394208               cmp      dword ptr [rdx+8], eax\r\n       7FDA                 jg       SHORT G_M5415_IG03\r\n\r\nG_M5415_IG04:\r\n       FF4114               inc      dword ptr [rcx+20]\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M5415_IG05:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M5415_IG06:\r\n       E88987C65F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 72, prolog size 5 for method BitArray:Not():ref:this\r\n; ============================================================\r\n\r\n```\r\n\r\n</p></details>\r\n<p>\r\n</p>\r\n\r\n<details><summary>Code generated AFTER. Get and Set inlined into the callers. Set was called with a constant value (true).</summary><p>\r\n\r\n```ASM\r\n; Assembly listing for method Program:BitArrayGet(ref,int):bool\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T01] (  4,  4   )     ref  ->  rcx         class-hnd\r\n;  V01 arg1         [V01,T00] (  6,  5   )     int  ->  rdx        \r\n;  V02 OutArgs      [V02    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V03 tmp1         [V03,T02] (  3,  6   )     ref  ->  rax         \"arr expr\"\r\n;  V04 cse0         [V04,T03] (  3,  3   )     int  ->  rcx         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M64820_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop      \r\n\r\nG_M64820_IG02:\r\n       3B5110               cmp      edx, dword ptr [rcx+16]\r\n       7323                 jae      SHORT G_M64820_IG05\r\n\r\nG_M64820_IG03:\r\n       488B4108             mov      rax, gword ptr [rcx+8]\r\n       8BCA                 mov      ecx, edx\r\n       C1F905               sar      ecx, 5\r\n       3B4808               cmp      ecx, dword ptr [rax+8]\r\n       731D                 jae      SHORT G_M64820_IG06\r\n       4863C9               movsxd   rcx, ecx\r\n       8B448810             mov      eax, dword ptr [rax+4*rcx+16]\r\n       0FA3D0               bt       eax, edx\r\n       0F92C0               setb     al\r\n       0FB6C0               movzx    rax, al\r\n\r\nG_M64820_IG04:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M64820_IG05:\r\n       8BCA                 mov      ecx, edx\r\n       E874F8FFFF           call     BitArray:ThrowIndexOutOfRange(int)\r\n       CC                   int3     \r\n\r\nG_M64820_IG06:\r\n       E8368AC65F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 59, prolog size 5 for method Program:BitArrayGet(ref,int):bool\r\n; ============================================================\r\n\r\n; Assembly listing for method Program:BitArraySet(ref,int)\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  6,  6   )     ref  ->  rax         class-hnd\r\n;  V01 arg1         [V01,T01] (  6,  5   )     int  ->  rdx        \r\n;  V02 OutArgs      [V02    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V03 tmp1         [V03,T05] (  2,  2   )     int  ->   r8         \"Inline stloc first use temp\"\r\n;  V04 tmp2         [V04,T03] (  3,  3   )   byref  ->  rcx         \"Inline stloc first use temp\"\r\n;  V05 tmp3         [V05,T02] (  3,  6   )     ref  ->  rcx         \"arr expr\"\r\n;  V06 cse0         [V06,T04] (  3,  3   )     int  ->  rdx         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M45352_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop      \r\n       488BC1               mov      rax, rcx\r\n\r\nG_M45352_IG02:\r\n       3B5010               cmp      edx, dword ptr [rax+16]\r\n       732A                 jae      SHORT G_M45352_IG05\r\n\r\nG_M45352_IG03:\r\n       41B801000000         mov      r8d, 1\r\n       8BCA                 mov      ecx, edx\r\n       41D3E0               shl      r8d, cl\r\n       488B4808             mov      rcx, gword ptr [rax+8]\r\n       C1FA05               sar      edx, 5\r\n       3B5108               cmp      edx, dword ptr [rcx+8]\r\n       731B                 jae      SHORT G_M45352_IG06\r\n       4863D2               movsxd   rdx, edx\r\n       488D4C9110           lea      rcx, bword ptr [rcx+4*rdx+16]\r\n       440901               or       dword ptr [rcx], r8d\r\n       FF4014               inc      dword ptr [rax+20]\r\n\r\nG_M45352_IG04:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M45352_IG05:\r\n       8BCA                 mov      ecx, edx\r\n       E81AF8FFFF           call     BitArray:ThrowIndexOutOfRange(int)\r\n       CC                   int3     \r\n\r\nG_M45352_IG06:\r\n       E8DC89C65F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 69, prolog size 5 for method Program:BitArraySet(ref,int)\r\n; ============================================================\r\n\r\n; Assembly listing for method BitArray:SetAll(bool):this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; fully interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T01] (  5,  5   )     ref  ->  rcx         this class-hnd\r\n;  V01 arg1         [V01,T04] (  3,  3   )    bool  ->  rdx        \r\n;  V02 loc0         [V02,T05] (  2,  5   )     int  ->  rax        \r\n;  V03 loc1         [V03,T02] (  3,  6   )     ref  ->  rdx         class-hnd\r\n;  V04 loc2         [V04,T00] (  5, 17   )     int  ->   r8        \r\n;# V05 OutArgs      [V05    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V06 tmp1         [V06,T06] (  3,  2   )     int  ->  rax        \r\n;  V07 cse0         [V07,T03] (  3,  6   )     int  ->   r9         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M27665_IG01:\r\n       0F1F440000           nop      \r\n\r\nG_M27665_IG02:\r\n       84D2                 test     dl, dl\r\n       7504                 jne      SHORT G_M27665_IG03\r\n       33C0                 xor      eax, eax\r\n       EB05                 jmp      SHORT G_M27665_IG04\r\n\r\nG_M27665_IG03:\r\n       B8FFFFFFFF           mov      eax, -1\r\n\r\nG_M27665_IG04:\r\n       488B5108             mov      rdx, gword ptr [rcx+8]\r\n       4533C0               xor      r8d, r8d\r\n       448B4A08             mov      r9d, dword ptr [rdx+8]\r\n       4585C9               test     r9d, r9d\r\n       7E10                 jle      SHORT G_M27665_IG06\r\n\r\nG_M27665_IG05:\r\n       4D63D0               movsxd   r10, r8d\r\n       4289449210           mov      dword ptr [rdx+4*r10+16], eax\r\n       41FFC0               inc      r8d\r\n       453BC8               cmp      r9d, r8d\r\n       7FF0                 jg       SHORT G_M27665_IG05\r\n\r\nG_M27665_IG06:\r\n       FF4114               inc      dword ptr [rcx+20]\r\n\r\nG_M27665_IG07:\r\n       C3                   ret      \r\n\r\n; Total bytes of code 54, prolog size 5 for method BitArray:SetAll(bool):this\r\n; ============================================================\r\n\r\n; Assembly listing for method BitArray:Not():ref:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; fully interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 this         [V00,T04] (  6,  6   )     ref  ->  rcx         this class-hnd\r\n;  V01 loc0         [V01,T03] (  4, 10   )     ref  ->  rax         class-hnd\r\n;  V02 loc1         [V02,T00] (  5, 17   )     int  ->  rdx        \r\n;# V03 OutArgs      [V03    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;  V04 tmp1         [V04,T01] (  2, 16   )     int  ->  r10         \"Strict ordering of exceptions for Array store\"\r\n;  V05 cse0         [V05,T05] (  3,  6   )     int  ->   r8         \"ValNumCSE\"\r\n;  V06 cse1         [V06,T02] (  3, 12   )    long  ->   r9         \"ValNumCSE\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M5415_IG01:\r\n       0F1F440000           nop      \r\n\r\nG_M5415_IG02:\r\n       488B4108             mov      rax, gword ptr [rcx+8]\r\n       33D2                 xor      edx, edx\r\n       448B4008             mov      r8d, dword ptr [rax+8]\r\n       4585C0               test     r8d, r8d\r\n       7E17                 jle      SHORT G_M5415_IG04\r\n\r\nG_M5415_IG03:\r\n       4C63CA               movsxd   r9, edx\r\n       468B548810           mov      r10d, dword ptr [rax+4*r9+16]\r\n       41F7D2               not      r10d\r\n       4689548810           mov      dword ptr [rax+4*r9+16], r10d\r\n       FFC2                 inc      edx\r\n       443BC2               cmp      r8d, edx\r\n       7FE9                 jg       SHORT G_M5415_IG03\r\n\r\nG_M5415_IG04:\r\n       FF4114               inc      dword ptr [rcx+20]\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M5415_IG05:\r\n       C3                   ret      \r\n\r\n; Total bytes of code 50, prolog size 5 for method BitArray:Not():ref:this\r\n; ============================================================\r\n```\r\n\r\n</p></details>\r\n<p>\r\n</p>\r\n","Url":"https://github.com/dotnet/corefx/pull/35364","RelatedDescription":"Open PR \"Improve BitArray's Get, Set, SetAll and Not methods performance\" (#35364)"},{"Id":"410976568","IsPullRequest":true,"CreatedAt":"2019-02-15T22:42:16","Actor":"Wraith2","Number":"35363","RawContent":null,"Title":"SqlClient managed networking improvements","State":"open","Body":"While profiling SqlClient for various other PR's it became clear that the managed implementation was wasting a lot of resources in networking and that this was severely degrading performance relative to the native pinvoke version. This PR works towards closing that gap.\r\n\r\nThe core of the changes start in SNIPacket. This has had a start field added which allows the ability to reserve space at the start of the packet for an additional header, the MARS smux function can now take advantage of this reservation removing the need to allocate a new packet and data array before sending. As a result of the header functionality it is no longer possible to cache and re-use a single attention packet.\r\n\r\nThe lifetime management of packets has been tightened and calls to `Release` added to avoid dropping packets and their rented buffers for the GC to deal with. The packet has had the IDispose and IEquatable removed because they are not needed and the explicit call to Release over Dispose makes the lifetime management much clearer in the code. As a result of the clearer packet management there is now no need to clone a packet before sending which avoids further re-allocation. This changes the number of packet copies from 2 to 1 in standard cases and with the smux reservation 3 to 1 for mars connections.\r\n\r\nThe functional and manual tests run through sucessfully.\r\n\r\nBenchmark results are overall positive:\r\n\r\n|           Method |     Mean |     Error |    StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|----------------- |---------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n| master native    | 75.37 ms | 0.5611 ms | 0.5249 ms |           - |           - |           - |           273.97 KB |\r\n| master managed   | 77.81 ms | 0.7198 ms | 0.6733 ms |   7000.0000 |           - |           - |           318.35 KB |\r\n| branch managed   | 74.07 ms | 0.2619 ms | 0.2322 ms |           - |           - |           - |           298.19 KB |\r\n\r\nThose results make the managed version looks very similat to the native one in performance, this isn't really the case. Profiles show the improvement in a slighlty more nuanced way. \r\n\r\nBaseline, master native: very little GC activity and the test takes 10s\r\n![master native](https://user-images.githubusercontent.com/13322696/52888147-7c1fc380-3172-11e9-8aec-c970505cda1f.PNG)\r\n\r\nCurrent, master managed: huge amounts of gc activity, a gen0 roughly every 16ms, the test takes 13s\r\n![master managed](https://user-images.githubusercontent.com/13322696/52888154-817d0e00-3172-11e9-9222-c422c767354b.PNG)\r\n\r\nImproved, branch managed: much less GC activity and the test takes 12s\r\n![smux managed](https://user-images.githubusercontent.com/13322696/52888158-8641c200-3172-11e9-81dc-3499e75bedb8.PNG)\r\n\r\nSo looking at it optimistically the memory improvements pull back roughly a third of the speed difference between managed and native.\r\n\r\n/cc @afsanehr, @tarikulsabbir, @david-engel, @saurabh500 \r\n","Url":"https://github.com/dotnet/corefx/pull/35363","RelatedDescription":"Open PR \"SqlClient managed networking improvements\" (#35363)"},{"Id":"410965980","IsPullRequest":true,"CreatedAt":"2019-02-15T22:08:23","Actor":"dotnet-maestro[bot]","Number":"35362","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview3-27415-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview3-27415-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview3-27415-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35362","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#35362)"},{"Id":"410939448","IsPullRequest":false,"CreatedAt":"2019-02-15T20:52:53","Actor":"richlander","Number":"35361","RawContent":null,"Title":"Improve .NET Core version APIs","State":"open","Body":"There should be APIs to get the actual .NET Version and the commit SHA for .NET Core. The version APIs have been a weak point of the product since .NET Core 1.0. If we're going to change existing behavior a major version would be a good time!\r\n\r\nIn particular, Environment.Version and RuntimeInformation.FrameworkDescription seem nearly useless in the majority of cases. It is particularly cute that they return different values. At least they agree on 4.x!\r\n\r\nThe OS Version and Bitness APIs are included for completeness. The OS version APIs could likely be improved in some way, but I don't have a specific need for that.\r\n\r\nThis is what I can produce today:\r\n\r\n```console\r\nC:\\testapps\\versioninfo>dotnet run\r\n.NET Core version:\r\nEnvironment.Version: 4.0.30319.42000\r\nRuntimeInformation.FrameworkDescription: .NET Core 4.6.27322.0\r\nRichHack.Version: 3.0.0-preview-27324-5\r\nRichHack.CommitUrl: https://github.com/dotnet/coreclr/tree/b9e88989458e24fa9764e045917b141e3338eae7\r\n\r\nOS Version\r\nEnvironment.OSVersion: Microsoft Windows NT 6.2.9200.0\r\nRuntimeInformation.OSDescription: Microsoft Windows 10.0.17763\r\n\r\nBitness\r\nRuntimeInformation.OSArchitecture: X64\r\nRuntimeInformation.ProcessArchitecture: X64\r\nEnvironment.Is64BitOperatingSystem: True\r\nEnvironment.Is64BitProcess: True\r\n\r\nC:\\testapps\\versioninfo>docker run --rm -it -v C:\\testapps\\versioninfo:/app -w /app microsoft/dotnet:3.0-sdk-alpine dotnet run\r\n.NET Core version:\r\nEnvironment.Version: 4.0.30319.42000\r\nRuntimeInformation.FrameworkDescription: .NET Core 4.6.27322.0\r\nRichHack.Version: 3.0.0-preview-27324-5\r\nRichHack.CommitUrl: https://github.com/dotnet/coreclr/tree/b9e88989458e24fa9764e045917b141e3338eae7\r\n\r\nOS Version\r\nEnvironment.OSVersion: Unix 4.9.125.0\r\nRuntimeInformation.OSDescription: Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\n\r\nBitness\r\nRuntimeInformation.OSArchitecture: X64\r\nRuntimeInformation.ProcessArchitecture: X64\r\nEnvironment.Is64BitOperatingSystem: True\r\nEnvironment.Is64BitProcess: True\r\n```\r\n\r\nCode: https://gist.github.com/richlander/f5849c6967c66d699301f75101906f99 ","Url":"https://github.com/dotnet/corefx/issues/35361","RelatedDescription":"Open issue \"Improve .NET Core version APIs\" (#35361)"},{"Id":"410906748","IsPullRequest":false,"CreatedAt":"2019-02-15T19:14:52","Actor":"jkotas","Number":"35358","RawContent":null,"Title":"Do not include System.IO.Ports.Native.* in NetCoreApp","State":"open","Body":"Repro: Download and expand latest .NET Core preview for Linux `.tar.gz` from https://github.com/dotnet/core-setup/\r\n\r\nResult: `System.IO.Ports.Native.*` is included in the package\r\n\r\nWe should not be including `System.IO.Ports.Native.*` in netcoreapp, since the `System.IO.Ports` is not included in netcoreapp either.","Url":"https://github.com/dotnet/corefx/issues/35358","RelatedDescription":"Open issue \"Do not include System.IO.Ports.Native.* in NetCoreApp\" (#35358)"},{"Id":"410903299","IsPullRequest":true,"CreatedAt":"2019-02-15T19:06:04","Actor":"dotnet-maestro-bot","Number":"35357","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35357","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#35357)"},{"Id":"411166827","IsPullRequest":false,"CreatedAt":"2019-02-11T12:30:34","Actor":"SCTIT","Number":"35375","RawContent":null,"Title":"socket.Send() throw a socket exception ErrorCode:95 on linux","State":"open","Body":"I'm setting up a linux server,but my application always throw an exception \"System.Net.Sockets.SocketException(95): Operation not supported.The same code can run on Windows Server perfectly.\r\nHere is the part of my code :\r\n```c#\r\nprivate void OnClientReceive(IAsyncResult ar)\r\n{\r\n        try\r\n        {\r\n            Socket socket = ar.AsyncState as Socket;\r\n            SocketError error;\r\n            int size = this.Client.EndReceive(ar, out error);\r\n            if (size > 0)\r\n            {\r\n                byte[] SendBuffer = new byte[size];\r\n                Array.Copy(Buffer , SendBuffer, size);\r\n                this.ServerClient.Client.Send(SendBuffer, SocketFlags.Partial);\r\n                if (this.Service.IsStarting)\r\n                    this.Client.BeginReceive(Buffer, 0, Buffer.Length, SocketFlags.None, this.OnClientReceive, this.Client);\r\n            }\r\n            else\r\n            {\r\n                this.Close();\r\n            }\r\n        }\r\n        catch(Exception ex)\r\n        {\r\n            Console.WriteLine(ex.ToString());\r\n            this.Close();\r\n        }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/35375","RelatedDescription":"Open issue \"socket.Send() throw a socket exception ErrorCode:95 on linux\" (#35375)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"411301053","IsPullRequest":false,"CreatedAt":"2019-02-18T04:52:06","Actor":"AArnott","Number":"33465","RawContent":null,"Title":"Changing rule severity does not update Error List or Solution Explorer item","State":"open","Body":"**Version Used**: VS 2019 Preview 4 (28616.25.d16.0)\r\nThis is a **regression** from VS 2017.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open up any C# project with analyzers installed.\r\n2. Expand the analyzer hierarchy in Solution Explorer so rules are visible.\r\n2. Introduce a violation of that rule into the code so that it shows up in the error list.\r\n3. Right-click on a rule and adjust the severity to Hidden.\r\n\r\n**Expected Behavior**:\r\n\r\n1. The icon in Solution Explorer for that rule changes to reflect the new severity.\r\n1. The entry in the error list disappears.\r\n1. A `<Rule>` tag is added to the project's .ruleset file to mark the rule hidden.\r\n\r\n**Actual Behavior**:\r\n\r\n1. The icon **doesn't change** in Solution Explorer\r\n1. The entry **remains visible** in the error list\r\n1. The .ruleset file is in fact changed, as expected after #32990 fixed this part of the overall scenario.","Url":"https://github.com/dotnet/roslyn/issues/33465","RelatedDescription":"Open issue \"Changing rule severity does not update Error List or Solution Explorer item\" (#33465)"},{"Id":"411246555","IsPullRequest":false,"CreatedAt":"2019-02-17T22:56:25","Actor":"jcouv","Number":"33464","RawContent":null,"Title":"Using-declaration should not trigger RemoveUnusedValues","State":"open","Body":"I suspect this is a compiler issue, as the `AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer` relies on the control flow graph to determine how variables are used.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/52920672-28bd8a80-32c4-11e9-8f0e-82b51439ca2e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/52920667-180d1480-32c4-11e9-99d5-cc59d339e5ec.png)\r\n\r\n\r\nFYI @mavasani ","Url":"https://github.com/dotnet/roslyn/issues/33464","RelatedDescription":"Open issue \"Using-declaration should not trigger RemoveUnusedValues\" (#33464)"},{"Id":"411245236","IsPullRequest":true,"CreatedAt":"2019-02-17T22:43:19","Actor":"jcouv","Number":"33463","RawContent":null,"Title":"Add MakeStatementAsynchronous fixer","State":"open","Body":"If you `foreach` on an `IAsyncEnumerable`, or use an `IAsyncDisposable` in a `using` (statement or declaration), the fixer offers to make the statement asynchronous (ie. `await foreach` or `await using`).\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/52920521-0e82ad00-32c2-11e9-8847-83d5a9559ea9.png)\r\n\r\nFYI @chsienki ","Url":"https://github.com/dotnet/roslyn/pull/33463","RelatedDescription":"Open PR \"Add MakeStatementAsynchronous fixer\" (#33463)"},{"Id":"411237382","IsPullRequest":true,"CreatedAt":"2019-02-17T21:29:01","Actor":"tiesmaster","Number":"33462","RawContent":null,"Title":"Fix issue #33242: ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body","State":"open","Body":"This crash was caused by [`CSharpCodeGenerator.CreateStatementsOrInitializerToInsertAtCallSiteAsync()` ](https://github.com/dotnet/roslyn/blob/de57f6daeee86908cc9dcd0386d2f66d60e8cee1/src/Features/CSharp/Portable/ExtractMethod/CSharpMethodExtractor.CSharpCodeGenerator.cs#L137-L140) not evaluating the expression bodied constructor as such, since [`MemberDeclarationSyntaxExtensions.GetExpressionBody()`](https://github.com/dotnet/roslyn/blob/de57f6daeee86908cc9dcd0386d2f66d60e8cee1/src/Workspaces/CSharp/Portable/Extensions/MemberDeclarationSyntaxExtensions.cs#L282-L299) wasn't updated yet to handle expression bodied constructors.\r\n\r\nIt seemed most appropriate to handle that in `MemberDeclarationSyntaxExtensions`, and not in `CSharpMethodExtractor.CSharpCodeGenerator`.","Url":"https://github.com/dotnet/roslyn/pull/33462","RelatedDescription":"Open PR \"Fix issue #33242: ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body\" (#33462)"},{"Id":"411180016","IsPullRequest":true,"CreatedAt":"2019-02-17T13:30:04","Actor":"dotnet-bot","Number":"33461","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33461","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33461)"},{"Id":"411174399","IsPullRequest":false,"CreatedAt":"2019-02-17T10:52:32","Actor":"vsfeedback","Number":"33460","RawContent":null,"Title":"IDE0032 suggestion on improper case","State":"open","Body":"<p>In the following code, VS throws an IDE0032 suggestion:<br><br></p><pre>        private (double X, double Y) position;\n\n        public (double X, double Y) Position\n        {\n            get =&gt; position;\n            set =&gt; position = value;\n        }\n        public double X\n        {\n            get =&gt; position.X;\n            set =&gt; position.X = value;\n        }\n        public double Y\n        {\n            get =&gt; position.Y;\n            set =&gt; position.Y = value;\n        }</pre><br>Converting this to an auto property results in a compiler error, which makes sense, since properties' members may not be changed.</p>\n</pre>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/436930/ide0032-suggestion-on-improper-case.html\nVSTS ticketId: 778746_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/33460","RelatedDescription":"Open issue \"IDE0032 suggestion on improper case\" (#33460)"},{"Id":"411172691","IsPullRequest":false,"CreatedAt":"2019-02-17T10:32:10","Actor":"vsfeedback","Number":"33459","RawContent":null,"Title":"LINQ debugging is total crap","State":"open","Body":"The tite says it...\n\nReally love LINQ, it produces a really clean and nice code.\n\nBut it can't be used when debugging is so bad.\nSo gotta convert it all to loops to be able to debug.\n\nPlease, please fix this.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/433733/linq-debugging-is-total-crap.html\nVSTS ticketId: 776232_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/33459","RelatedDescription":"Open issue \"LINQ debugging is total crap\" (#33459)"},{"Id":"411170479","IsPullRequest":false,"CreatedAt":"2019-02-17T10:07:04","Actor":"vsfeedback","Number":"33458","RawContent":null,"Title":"C# formatter missing linebreak after curly braces of for block","State":"open","Body":"When using an for block inside an if condition without curly braces, the else gets put in the same line as the closing brace of the for block.\n\nexample:\nif (true)\n    for (int i = 0; i &lt;2; i++) {\n       i++;\n    } else\n     b =5;\n\ninstead of the expected:\nif (true)\n    for (int i = 0; i &lt;2; i++) {\n       i++;\n    } \nelse\n     b =5;\n\ncorrect placement:\nif(true){\n   b=2;\n} else\n   b=3;\nand:\nif(true)\n   b=2;\nelse\n   b=4;\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/431619/c-formatter-missing-linebreak-after-curly-braces-o.html\nVSTS ticketId: 774047_\n_These are the original issue comments:_\n\nroland.fredenhagen on 1/20/2019, 06:42 AM (27 days ago): The Title misses \"else\" sorry for that, but it seams like I am not able to edit anything.\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/33458","RelatedDescription":"Open issue \"C# formatter missing linebreak after curly braces of for block\" (#33458)"},{"Id":"411148164","IsPullRequest":true,"CreatedAt":"2019-02-17T04:39:17","Actor":"jcouv","Number":"33457","RawContent":null,"Title":"Add FixReturnType fixer","State":"open","Body":"If you have a method that returns `void` (or an async method that returns `void` or `Task`), but you have a return statement with a value, the FixReturnType fixer offers to fix the return type.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/52908443-c82e3f00-322a-11e9-8b6d-1c8c570ecf23.png)\r\n","Url":"https://github.com/dotnet/roslyn/pull/33457","RelatedDescription":"Open PR \"Add FixReturnType fixer\" (#33457)"},{"Id":"411129368","IsPullRequest":true,"CreatedAt":"2019-02-17T01:30:06","Actor":"dotnet-bot","Number":"33456","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33456","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33456)"},{"Id":"411127026","IsPullRequest":true,"CreatedAt":"2019-02-16T23:25:45","Actor":"cston","Number":"33455","RawContent":null,"Title":"Replace slot watermark","State":"open","Body":"Stop copying nullable state at the target slot rather than at the highest slot.\r\n\r\nFixes #33429.","Url":"https://github.com/dotnet/roslyn/pull/33455","RelatedDescription":"Open PR \"Replace slot watermark\" (#33455)"},{"Id":"411115852","IsPullRequest":true,"CreatedAt":"2019-02-16T21:29:57","Actor":"jaredpar","Number":"33454","RawContent":null,"Title":"Increase diagnostics in determinism job","State":"open","Body":"The determinism job has started to intermittently timeout over the last\r\nfew days. The job typically runs in ~50 minutes which is well below the\r\n90 minute limit. On failed runs though there are no obvious outliers\r\nthat are causing the timeouts. The builds and restores are happening at\r\nthe time intervals we would expect.\r\n\r\nThis change adds more time diagontics to the run. It's unlikely that any\r\nof these sections are responsible for the 40 minute gap we're seeing in\r\nthe bad runs but at this point need to rule out everything.","Url":"https://github.com/dotnet/roslyn/pull/33454","RelatedDescription":"Open PR \"Increase diagnostics in determinism job\" (#33454)"},{"Id":"411109642","IsPullRequest":true,"CreatedAt":"2019-02-16T20:22:17","Actor":"jcouv","Number":"33453","RawContent":null,"Title":"ChangeSignature: select parameter based on cursor position","State":"open","Body":"Previously, the ChangeSignature dialog would always open with the default selection (ie. the first movable or removable parameter).\r\nWith this PR, if you select a parameter in a declaration and invoke ChangeSignature, that parameter will be selected.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/52904696-7b277a00-31e4-11e9-91bf-2141f894fa69.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/52904704-89759600-31e4-11e9-849c-0a6fb077f465.png)\r\n\r\nIf this PR is ok so far, I'll make the same change on the VB side.","Url":"https://github.com/dotnet/roslyn/pull/33453","RelatedDescription":"Open PR \"ChangeSignature: select parameter based on cursor position\" (#33453)"},{"Id":"411088829","IsPullRequest":false,"CreatedAt":"2019-02-16T20:12:38","Actor":"OnurGumus","Number":"33451","RawContent":null,"Title":"System.InvalidCastException on pattern matching with when condition","State":"closed","Body":"**Version Used**: \r\n7.3 and 8.0\r\n**Steps to Reproduce**:\r\nRun the below code:\r\n```\r\nobject s = \"a\";\r\nswitch (s)\r\n{\r\n    case IEnumerable<int> subList when subList.Any():\r\n        break;\r\n    case IEnumerable<object> subList2:\r\n        break;\r\n    case null:\r\n        break;\r\n}\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nIt should work without matching\r\n**Actual Behavior**:\r\nFails with below exception:\r\n```\r\nSystem.InvalidCastException: 'Unable to cast object of type 'System.String' to type 'System.Collections.Generic.IEnumerable`1[System.Object]'.'\r\n```\r\n**Fun fact**: this is the simplest possible case I can reproduce the error. Removing anything from above code fixes the problem\r\n","Url":"https://github.com/dotnet/roslyn/issues/33451","RelatedDescription":"Closed issue \"System.InvalidCastException on pattern matching with when condition\" (#33451)"},{"Id":"411097914","IsPullRequest":false,"CreatedAt":"2019-02-16T18:16:59","Actor":"jaredpar","Number":"33452","RawContent":null,"Title":"Pipename not being quoted when starting VBCSCompiler","State":"open","Body":"The pipename argument is not being properly quoted when starting the VBCSCompiler process from our MSBuild task. That means if there is a space in the name the client and server will have a mismatch and won't be able to communicate. All compilations will fall back to csc / vbc.","Url":"https://github.com/dotnet/roslyn/issues/33452","RelatedDescription":"Open issue \"Pipename not being quoted when starting VBCSCompiler\" (#33452)"},{"Id":"411066347","IsPullRequest":true,"CreatedAt":"2019-02-16T13:30:12","Actor":"dotnet-bot","Number":"33448","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33448","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33448)"},{"Id":"411066358","IsPullRequest":true,"CreatedAt":"2019-02-16T13:30:06","Actor":"dotnet-bot","Number":"33450","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33450","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33450)"},{"Id":"411066353","IsPullRequest":true,"CreatedAt":"2019-02-16T12:00:28","Actor":"dotnet-bot","Number":"33449","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33449","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#33449)"},{"Id":"410981327","IsPullRequest":true,"CreatedAt":"2019-02-16T05:27:49","Actor":"RikkiGibson","Number":"33438","RawContent":null,"Title":"Merges/dev16.0 to dev16.0 vs deps","State":"closed","Body":"Getting this merge kicked off a little earlier so we can get the insertion flow going. @jaredpar","Url":"https://github.com/dotnet/roslyn/pull/33438","RelatedDescription":"Closed or merged PR \"Merges/dev16.0 to dev16.0 vs deps\" (#33438)"},{"Id":"410995174","IsPullRequest":true,"CreatedAt":"2019-02-16T02:00:15","Actor":"dotnet-bot","Number":"33442","RawContent":null,"Title":"Merge dev16.0 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33442","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to master\" (#33442)"},{"Id":"410995276","IsPullRequest":true,"CreatedAt":"2019-02-16T02:00:11","Actor":"dotnet-bot","Number":"33444","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33444","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#33444)"},{"Id":"410995293","IsPullRequest":true,"CreatedAt":"2019-02-16T02:00:07","Actor":"dotnet-bot","Number":"33445","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33445","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33445)"},{"Id":"411012884","IsPullRequest":true,"CreatedAt":"2019-02-16T01:57:28","Actor":"jcouv","Number":"33447","RawContent":null,"Title":" Analyze ref/out arguments as output assignments","State":"open","Body":"`VisitArgumentConversion` tracks an invocation with a `ref` argument as an assignment from argument result to parameter, then from parameter to argument as l-value.\r\nTo achieve that without visiting the argument twice, I removed `VisitLValue` and keep track of l-value types when visiting expressions. The `NullableWalker._resultType` is now a pair of TSWAs (one for result type and the other for l-value type).\r\n\r\nI made a small adjustment to the order of parameters for some methods, so that the BoundExpression and the TSWA for a given input would be grouped together. For example, `TrackNullableStateForAssignment(BoundExpression value, TypeSymbolWithAnnotations valueType, TypeSymbolWithAnnotations targetType, ...)` (which is easier to read than previous order).\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/26739\r\nAddresses parts of https://github.com/dotnet/roslyn/issues/29958 (I'll try to fix it entirely)","Url":"https://github.com/dotnet/roslyn/pull/33447","RelatedDescription":"Open PR \" Analyze ref/out arguments as output assignments\" (#33447)"},{"Id":"411002928","IsPullRequest":false,"CreatedAt":"2019-02-16T00:40:17","Actor":"gafter","Number":"33446","RawContent":null,"Title":"Missing nullability warning after assignment to variable in finally block","State":"open","Body":"The following should, but does not, produce a warning.\r\n``` c#\r\nclass Node\r\n{\r\n    public Node? Next;\r\n    static void Mout(out Node node) => node = null!;\r\n    static void M(Node node)\r\n    {\r\n        try\r\n        {\r\n            Mout(out node.Next);\r\n        }\r\n        finally\r\n        {\r\n            Mout(out node); // might set node to one in which node.Next == null\r\n        }\r\n        node.Next.ToString(); // should be warning\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33446","RelatedDescription":"Open issue \"Missing nullability warning after assignment to variable in finally block\" (#33446)"},{"Id":"410995213","IsPullRequest":true,"CreatedAt":"2019-02-16T00:00:23","Actor":"dotnet-bot","Number":"33443","RawContent":null,"Title":"Merge dev16.0-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33443","RelatedDescription":"Open PR \"Merge dev16.0-vs-deps to master-vs-deps\" (#33443)"},{"Id":"410991230","IsPullRequest":false,"CreatedAt":"2019-02-15T23:43:03","Actor":"333fred","Number":"33441","RawContent":null,"Title":"Dynamic object and collection initializers are not handled correctly","State":"open","Body":"https://github.com/dotnet/roslyn/blob/0530f607e9f2ef1571b82f2c1be07893bed02a72/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L5363\r\n\r\nThis statement isn't true, dynamic collection initializers always hit this function. We need to look at this and re-evaluate whether these need to be handled differently, and some tests should be added.\r\n\r\nThis is also true for dynamic object initializers.","Url":"https://github.com/dotnet/roslyn/issues/33441","RelatedDescription":"Open issue \"Dynamic object and collection initializers are not handled correctly\" (#33441)"},{"Id":"410990502","IsPullRequest":true,"CreatedAt":"2019-02-15T23:39:49","Actor":"AlekseyTs","Number":"33440","RawContent":null,"Title":"Add PROTOTYPE comments to follow up on a previous change.","State":"open","Body":"This is a follow up on https://github.com/dotnet/roslyn/pull/33281.","Url":"https://github.com/dotnet/roslyn/pull/33440","RelatedDescription":"Open PR \"Add PROTOTYPE comments to follow up on a previous change.\" (#33440)"},{"Id":"410989147","IsPullRequest":false,"CreatedAt":"2019-02-15T23:33:50","Actor":"genlu","Number":"33439","RawContent":null,"Title":"Ensure workspace only returns document matches the content type of given text buffer","State":"open","Body":"@heejaechang commented on this in https://github.com/dotnet/roslyn/pull/33168#pullrequestreview-201399920","Url":"https://github.com/dotnet/roslyn/issues/33439","RelatedDescription":"Open issue \"Ensure workspace only returns document matches the content type of given text buffer\" (#33439)"},{"Id":"410981312","IsPullRequest":true,"CreatedAt":"2019-02-15T22:59:28","Actor":"dannyvv","Number":"33437","RawContent":null,"Title":"Add missing dot for `/embed` documentation of `csc.exe /?`","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33437","RelatedDescription":"Open PR \"Add missing dot for `/embed` documentation of `csc.exe /?`\" (#33437)"},{"Id":"410979281","IsPullRequest":false,"CreatedAt":"2019-02-15T22:52:07","Actor":"gafter","Number":"33436","RawContent":null,"Title":"Nullable ref types: handling unconstrained type parameters","State":"open","Body":"A variable of a type parameter that cannot be annotated, when read, may yield a null value.  But a (possibly) null value cannot be stored in it, because the type may be substituted with a type that is non-nullable.  If we apply the usual rules, that would mean this causes a diagnostic:\r\n``` c#\r\nvoid M<T>(T t)\r\n{\r\n    t = t; // warning: might be assigning null to T\r\n}\r\n```\r\nTo solve this, we propose the following rules:\r\n1. The warning that a possibly-null value is converted to a type that doesn't accept null has an exception for a conversion to a value of a type that is a \"type parameter that may possibly be a reference type and cannot be annotated\" when the conversion is an implicit conversion (with two exceptions below). An implicit conversion to such an unannotatable type causes no warning. If the conversion is not implicit (e.g. a downcast between related type parameters) the warning is given.\r\n2. We must introduce a safety warning whenever a possibly null value of such a type is introduced.  Those contexts are:\r\n  - `default` and `default(T)` (the default conversion, though implicit, does introduce a warning)\r\n  - `null` (the null conversion, though implicit, does introduce a warning)\r\n  - `e as T`\r\n  - `e.GetFirstOrDefault()` - which presumably would be annotated with `[MaybeNull]`\r\n","Url":"https://github.com/dotnet/roslyn/issues/33436","RelatedDescription":"Open issue \"Nullable ref types: handling unconstrained type parameters\" (#33436)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"411284368","IsPullRequest":false,"CreatedAt":"2019-02-18T03:15:39","Actor":"rainbowlee","Number":"7044","RawContent":null,"Title":"How can i run samples in tests; ","State":"open","Body":"I changed the project, but i can not open the project, eg hello\r\n\r\ncan not import E:\\build\\Microsoft.netcore.native.targets ","Url":"https://github.com/dotnet/corert/issues/7044","RelatedDescription":"Open issue \"How can i run samples in tests; \" (#7044)"},{"Id":"411256250","IsPullRequest":false,"CreatedAt":"2019-02-18T00:23:14","Actor":"szhaomsft","Number":"7043","RawContent":null,"Title":"NativeCallableAttribute question","State":"open","Body":"does corert support exporting a function with callback function for other C program to call?\r\n\r\nif so, any example? \r\n\r\n**Exported methods can only naturally accept or return primitives or value types (i.e structs), they have to marshal all reference type arguments.**","Url":"https://github.com/dotnet/corert/issues/7043","RelatedDescription":"Open issue \"NativeCallableAttribute question\" (#7043)"},{"Id":"411221984","IsPullRequest":true,"CreatedAt":"2019-02-17T19:01:13","Actor":"MichalStrehovsky","Number":"7042","RawContent":null,"Title":"Fix mapping table emission for generic types","State":"open","Body":"We were only putting methods on instantiated types/fields into the mapping table because when the code was written, shared generics were wonky. We actually only need to emit a single entry for each canonically equivalent method/field though because the type loader can take care of the rest.\r\n\r\nThis reduces size of the mapping table for fields and methods and helps #6987 to avoid having to instantiate things over `Object`.","Url":"https://github.com/dotnet/corert/pull/7042","RelatedDescription":"Open PR \"Fix mapping table emission for generic types\" (#7042)"},{"Id":"410975195","IsPullRequest":true,"CreatedAt":"2019-02-17T16:00:02","Actor":"nattress","Number":"7034","RawContent":null,"Title":"Update RyuJit","State":"closed","Body":"CoreCLR has switched to publishing the Microsoft.NETCore.Jit package to a Nuget blob feed. Update the feed and instructions for updating.\r\n\r\n@MichalStrehovsky The JIT tests all stack overflow and I believe it was caused by https://github.com/dotnet/coreclr/pull/22117/files. Before I start debugging the intrinsic changes, any thoughts? Do we need to pass new flags to the Jit from the EE now?\r\n\r\nWe try to look up a resource string too early now and end up in an infinite loop:\r\n\r\n```\r\n # Call Site\r\n00 Threading!S_P_CoreLib_System_SR__get_InvalidOperation_TooEarly\r\n01 Threading!S_P_CoreLib_Internal_Runtime_Augments_RuntimeAugments__get_Callbacks\r\n02 Threading!S_P_CoreLib_Internal_Reflection_Core_NonPortable_RuntimeTypeUnifier_RuntimeTypeHandleToTypeCache__Factory\r\n03 Threading!S_P_CoreLib_System_Collections_Concurrent_ConcurrentUnifierW_2<IntPtr__System___Canon>__GetOrAdd\r\n04 Threading!S_P_CoreLib_Internal_Reflection_Core_NonPortable_RuntimeTypeUnifier__GetTypeForRuntimeTypeHandle\r\n05 Threading!S_P_CoreLib_System_Type__GetTypeFromHandle\r\n06 Threading!S_P_CoreLib_System_ThrowHelper__ThrowForUnsupportedVectorBaseType<UInt8>\r\n07 Threading!S_P_CoreLib_System_Runtime_Intrinsics_Vector128_1<UInt8>__get_Count\r\n08 Threading!S_P_CoreLib_System_SpanHelpers__IndexOf_0\r\n09 Threading!String__strlen\r\n0a Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName\r\n0b Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell\r\n0c Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow\r\n0d Threading!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke\r\n0e Threading!S_P_CoreLib_Interop_BCrypt__BCryptGenRandom\r\n0f Threading!S_P_CoreLib_Interop__GetRandomBytes\r\n10 Threading!S_P_CoreLib_System_Marvin__GenerateSeed\r\n11 Threading!S_P_CoreLib_System_Marvin___cctor\r\n12 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__Call\r\n13 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun\r\n14 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnNonGCStaticBase\r\n15 Threading!S_P_CoreLib_System_Marvin__get_DefaultSeed\r\n16 Threading!String__GetHashCode\r\n17 Threading!S_P_CoreLib_System_Reflection_RuntimeAssemblyName__GetHashCode\r\n18 Threading!S_P_TypeLoader_System_Collections_Generic_LowLevelDictionary_2<System___Canon__System___Canon>__GetBucket\r\n19 Threading!S_P_TypeLoader_System_Collections_Generic_LowLevelDictionary_2<System___Canon__System___Canon>__Find\r\n1a Threading!S_P_TypeLoader_System_Collections_Generic_LowLevelDictionary_2<System___Canon__System___Canon>__TryGetValue\r\n1b Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation__AddScopesFromReaderToGroups\r\n1c Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation__RegisterModule\r\n1d Threading!S_P_TypeLoader_Internal_Runtime_TypeLoader_ModuleList__AddModuleRegistrationCallback\r\n1e Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation___ctor\r\n1f Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation___cctor\r\n20 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__Call\r\n21 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun\r\n22 Threading!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase\r\n23 Threading!S_P_TypeLoader_Internal_Reflection_Execution_AssemblyBinderImplementation__get_Instance\r\n24 Threading!S_P_Reflection_Execution_Internal_Reflection_Execution_ReflectionDomainSetupImplementation___ctor\r\n25 Threading!S_P_Reflection_Execution_Internal_Reflection_Execution_ReflectionExecution__Initialize\r\n26 Threading!S_P_Reflection_Execution_Internal_Runtime_CompilerHelpers_LibraryInitializer__InitializeLibrary\r\n27 Threading!Threading__Module___StartupCodeMain\r\n28 Threading!wmain\r\n29 Threading!invoke_main\r\n2a Threading!__scrt_common_main_seh\r\n2b Threading!__scrt_common_main\r\n2c Threading!wmainCRTStartup\r\n2d KERNEL32!BaseThreadInitThunk\r\n2e ntdll!RtlUserThreadStart\r\n```","Url":"https://github.com/dotnet/corert/pull/7034","RelatedDescription":"Closed or merged PR \"Update RyuJit\" (#7034)"},{"Id":"411197706","IsPullRequest":true,"CreatedAt":"2019-02-17T15:13:04","Actor":"filipnavara","Number":"7041","RawContent":null,"Title":"WIP: Move WaitHandle to shared CoreLib","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22634.","Url":"https://github.com/dotnet/corert/pull/7041","RelatedDescription":"Open PR \"WIP: Move WaitHandle to shared CoreLib\" (#7041)"},{"Id":"411154477","IsPullRequest":false,"CreatedAt":"2019-02-17T06:27:33","Actor":"szhaomsft","Number":"7040","RawContent":null,"Title":"EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Windows.Forms","State":"open","Body":"seems like a regression \r\n\r\ni am compiling a dotnet core 2.1 console app.  why it looks for system windows forms now?\r\n\r\nusing official build \r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n    <PackageReference Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n    <PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n\r\nwhile an older build has no such error\r\n\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />\r\n    <PackageReference Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />\r\n    <PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />","Url":"https://github.com/dotnet/corert/issues/7040","RelatedDescription":"Open issue \"EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Windows.Forms\" (#7040)"},{"Id":"411136571","IsPullRequest":true,"CreatedAt":"2019-02-17T05:48:02","Actor":"Dotnet-GitSync-Bot","Number":"7038","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7038","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7038)"},{"Id":"411152261","IsPullRequest":true,"CreatedAt":"2019-02-17T05:45:57","Actor":"jkotas","Number":"7039","RawContent":null,"Title":"Add SimulatedLocationInBaseDirectory quirk","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7039","RelatedDescription":"Open PR \"Add SimulatedLocationInBaseDirectory quirk\" (#7039)"},{"Id":"411007766","IsPullRequest":true,"CreatedAt":"2019-02-16T04:21:14","Actor":"jkotas","Number":"7037","RawContent":null,"Title":"Change buildtools semaphore trigger download of new Roslyn package","State":"closed","Body":"Fixes #7036","Url":"https://github.com/dotnet/corert/pull/7037","RelatedDescription":"Closed or merged PR \"Change buildtools semaphore trigger download of new Roslyn package\" (#7037)"},{"Id":"411000865","IsPullRequest":false,"CreatedAt":"2019-02-16T04:21:14","Actor":"szhaomsft","Number":"7036","RawContent":null,"Title":"build error","State":"closed","Body":"I sync latest, \r\n\r\nbuild clean Release  give me below error\r\n\r\n\r\nir.props(282,3): error MSB4019: The imported project \"D:\\git\\corert\\packages\\microsoft.netcore.compilers\\3.0.0-beta3-final\\build\\Microsoft.NETCore.Compilers.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [D:\\git\\corert\\build.proj]","Url":"https://github.com/dotnet/corert/issues/7036","RelatedDescription":"Closed issue \"build error\" (#7036)"},{"Id":"410985956","IsPullRequest":true,"CreatedAt":"2019-02-16T01:15:04","Actor":"Dotnet-GitSync-Bot","Number":"7035","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7035","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7035)"},{"Id":"410959696","IsPullRequest":true,"CreatedAt":"2019-02-15T21:51:40","Actor":"yowl","Number":"7033","RawContent":null,"Title":"Wasm : Enable method reflection","State":"open","Body":"This changes enables reflection over methods by deleting the wasm metadata policy and using `NoMetadataBlockingPolicy` as I dont think special casing wasm is required any more.","Url":"https://github.com/dotnet/corert/pull/7033","RelatedDescription":"Open PR \"Wasm : Enable method reflection\" (#7033)"},{"Id":"409954933","IsPullRequest":true,"CreatedAt":"2019-02-15T20:31:07","Actor":"nattress","Number":"7017","RawContent":null,"Title":"Basic Runner for CPAOT / Crossgen","State":"closed","Body":"This is a small test harness whose aim is to abstract away running compilation scenarios on either CPAOT or Crossgen. The goal is to produce an equivalent to UWP's TestIlc that lets us easily optimize a folder of assemblies without needing a project system.\r\n\r\nA second goal is to allow for special case compilation scenarios. For example, setting up SuperPMI before compilation so we can diff the answers provided by the front-end to the JIT.\r\n\r\nThe command line isn't fully baked yet but the goal is to specify an\r\ninput and output folder, plus reference folders. Then specify either\r\n--crossgen or --cpaot and the tool will pass the correct parameters\r\nto the selected compiler.\r\n\r\nExample command:\r\ndotnet run -- --cpaot --in c:\\git\\corert\\samples\\WebAPI\\bin\\Debug\\netcoreapp2.1\\win-x64\\publish --out c:\\repro\\r2r\\WebAPI\\cpaot --toolpath C:\\git\\corert\\bin\\Windows_NT.x64.Debug\\tools","Url":"https://github.com/dotnet/corert/pull/7017","RelatedDescription":"Closed or merged PR \"Basic Runner for CPAOT / Crossgen\" (#7017)"},{"Id":"410898235","IsPullRequest":false,"CreatedAt":"2019-02-15T18:50:18","Actor":"tannergooding","Number":"7032","RawContent":null,"Title":"Consume RoslynToolset via the appropriate mechanism","State":"open","Body":"https://github.com/dotnet/corert/pull/7015 added a workaround to consume the latest RoslynToolset. Normally, this would have been consumed via BuildTools, but the `tests/CoreCLR/runtests/tests.targets` file uses `xunit.runner.msbuild` which is Desktop only. Additionally, the RoslynToolset we need to depend on now requires net472 on Desktop, which is not installed on all the Jenkins build-machines.\r\n\r\nWe should ensure this workaround (which is explicitly restoring the appropriate toolset as part of the root `init-tools.cmd`) is removed once we either move to Arcade or update the BuildTools dependency (presumably both will require the `tests/CoreCLR` folder to drop the desktop dependency).","Url":"https://github.com/dotnet/corert/issues/7032","RelatedDescription":"Open issue \"Consume RoslynToolset via the appropriate mechanism\" (#7032)"},{"Id":"409904286","IsPullRequest":true,"CreatedAt":"2019-02-15T18:45:28","Actor":"tannergooding","Number":"7015","RawContent":null,"Title":"Update the repo to support VS2019 and to use C# 8.0","State":"closed","Body":"CC. @jkotas ","Url":"https://github.com/dotnet/corert/pull/7015","RelatedDescription":"Closed or merged PR \"Update the repo to support VS2019 and to use C# 8.0\" (#7015)"},{"Id":"410748615","IsPullRequest":true,"CreatedAt":"2019-02-15T16:02:05","Actor":"MichalStrehovsky","Number":"7029","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7029","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7029)"},{"Id":"410807733","IsPullRequest":true,"CreatedAt":"2019-02-15T16:01:46","Actor":"jkotas","Number":"7031","RawContent":null,"Title":"Delete unused Interop file","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7031","RelatedDescription":"Closed or merged PR \"Delete unused Interop file\" (#7031)"},{"Id":"410787200","IsPullRequest":true,"CreatedAt":"2019-02-15T15:10:00","Actor":"Dotnet-GitSync-Bot","Number":"7030","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7030","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7030)"},{"Id":"410628781","IsPullRequest":false,"CreatedAt":"2019-02-15T12:32:12","Actor":"rainbowlee","Number":"7026","RawContent":null,"Title":"source code contains unsafe code or System.Reflection.Emit.DynamicMethod, compiled error","State":"closed","Body":"unsafe code\r\n error CS0227: 不安全代码只会在使用 /unsafe 编译的情况下出现\r\n\r\nSystem.Reflection.Emit.DynamicMethod\r\nDynamic code generation is not supported on this platform.","Url":"https://github.com/dotnet/corert/issues/7026","RelatedDescription":"Closed issue \"source code contains unsafe code or System.Reflection.Emit.DynamicMethod, compiled error\" (#7026)"},{"Id":"410747283","IsPullRequest":true,"CreatedAt":"2019-02-15T12:30:03","Actor":"dotnet-bot","Number":"7028","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7028","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7028)"},{"Id":"410731201","IsPullRequest":true,"CreatedAt":"2019-02-15T11:42:14","Actor":"MichalStrehovsky","Number":"7027","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7027","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7027)"},{"Id":"410523963","IsPullRequest":true,"CreatedAt":"2019-02-15T09:02:32","Actor":"yowl","Number":"7022","RawContent":null,"Title":"Wasm: Enable field reflection","State":"closed","Body":"Fixes #6944  \r\n\r\nThis change enables reflection on fields and in doing so fixes some gaps in the `ExternalReferencesTableNode` which fixes reflecting on some types that were not previously caught in the tests.","Url":"https://github.com/dotnet/corert/pull/7022","RelatedDescription":"Closed or merged PR \"Wasm: Enable field reflection\" (#7022)"},{"Id":"410627695","IsPullRequest":true,"CreatedAt":"2019-02-15T08:12:22","Actor":"Dotnet-GitSync-Bot","Number":"7025","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @tannergooding","Url":"https://github.com/dotnet/corert/pull/7025","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7025)"},{"Id":"410576539","IsPullRequest":true,"CreatedAt":"2019-02-15T06:41:41","Actor":"Dotnet-GitSync-Bot","Number":"7024","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corert/pull/7024","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7024)"},{"Id":"410558910","IsPullRequest":true,"CreatedAt":"2019-02-15T02:22:06","Actor":"Dotnet-GitSync-Bot","Number":"7023","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corert/pull/7023","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7023)"},{"Id":"410502220","IsPullRequest":true,"CreatedAt":"2019-02-15T00:53:28","Actor":"Dotnet-GitSync-Bot","Number":"7021","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7021","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7021)"},{"Id":"410463972","IsPullRequest":true,"CreatedAt":"2019-02-14T21:33:57","Actor":"Dotnet-GitSync-Bot","Number":"7020","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @grant-d @AaronRobinsonMSFT @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7020","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7020)"},{"Id":"409950036","IsPullRequest":true,"CreatedAt":"2019-02-14T06:00:27","Actor":"Dotnet-GitSync-Bot","Number":"7016","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams @tannergooding @stephentoub @stephentoub @stephentoub","Url":"https://github.com/dotnet/corert/pull/7016","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7016)"},{"Id":"410071969","IsPullRequest":false,"CreatedAt":"2019-02-14T00:44:50","Actor":"Danl2620","Number":"7019","RawContent":null,"Title":"Q: CoreRT built native lib linked into a dynamic library, how to initialize?","State":"open","Body":"I've built the sample native library using CoreRT and linked it with a C++ dynamic library project (a `.dylib` on macOS). When that library is loaded during my application's runtime it hits an exception because `RuntimeInstance::Initialize` was never called (the callstack is below). Is there some call I need to make my host application or the rest of my dynamic library code to ensure the runtime is initialized?\r\n\r\n```\r\n SEGV_MAPERR at 0x0\r\n\r\nRuntimeInstance::GetThreadStore()\r\nThreadStore::AttachCurrentThread(bool)\r\nThread::ReversePInvokeAttachOrTrapThread(ReversePInvokeFrame*)\r\nFModuleManager::LoadModuleWithFailureReason(FName, EModuleLoadResult&)\r\n[...snip...]\r\n-[UE4AppDelegate runGameThread:] Address = 0x1096e28ee [/Users/danl/proj/ws/tdp1-unreal/UnrealEngine/Engine/Source/Runtime/Launch/Private/Mac/LaunchMac.cpp, line 232] [in UE4Editor]\r\n-[FCocoaGameThread main] Address = 0x10998b677 [/Users/danl/proj/ws/tdp1-unreal/UnrealEngine/Engine/Source/Runtime/Core/Private/Mac/CocoaThread.cpp, line 387] [in UE4Editor-Core.dylib]\r\n```","Url":"https://github.com/dotnet/corert/issues/7019","RelatedDescription":"Open issue \"Q: CoreRT built native lib linked into a dynamic library, how to initialize?\" (#7019)"},{"Id":"410043502","IsPullRequest":false,"CreatedAt":"2019-02-13T22:59:17","Actor":"KodrAus","Number":"7018","RawContent":null,"Title":"WASM (LLVM): Assertion failure when building on OSX","State":"open","Body":"Hi :wave:\r\n\r\nI have the following program:\r\n\r\n```chsarp\r\nusing System;\r\n\r\nnamespace NetApp\r\n{\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRight now we can't build wasm on OSX (because of #6827), but if I patch in my own working 6.x build of `libLLVM.dylib` (as described [here](https://github.com/Microsoft/LLVMSharp/issues/88#issuecomment-463402316)) then I run into a different issue.\r\n\r\nRunning:\r\n\r\n```\r\n$ ilc obj/release/netcoreapp2.1/osx-x64/native/netapp.ilc.rsp\r\n```\r\n\r\nwhere `netapp.ilc.rsp` looks something like this:\r\n\r\n```\r\nobj/release/netcoreapp2.1/osx-x64/netapp.dll\r\n-o:obj/release/netcoreapp2.1/osx-x64/native/netapp.bc\r\n-r:<lots of stuff>\r\n--wasm\r\n-O\r\n--initassembly:System.Private.CoreLib\r\n--initassembly:System.Private.DeveloperExperience.Console\r\n--initassembly:System.Private.StackTraceMetadata\r\n--initassembly:System.Private.TypeLoader\r\n--initassembly:System.Private.Reflection.Execution\r\n--initassembly:System.Private.Interop\r\n--completetypemetadata\r\n--stacktracedata\r\n--rootallapplicationassemblies\r\n```\r\n\r\nresults in:\r\n\r\n```\r\nAssertion failed: (C->getType()->isIntOrIntVectorTy() && Ty->isIntOrIntVectorTy() && \"Invalid integer cast\"), function CreateIntegerCast, file /Users/user/dev/dotnet/llvm/lib/IR/Instructions.cpp, line 2731.\r\nStop reason: signal SIGABRT\r\n```\r\n\r\nwith some extra info coming out of `lldb`:\r\n\r\n```\r\nclrstack\r\nOS Thread Id: 0x2d7b1c (1)\r\n        Child SP               IP Call Site\r\n00007FFEEFBF4A70 00007fff7a4db23e [InlinedCallFrame: 00007ffeefbf4a70] LLVMSharp.LLVM.BuildIntCast(LLVMSharp.LLVMBuilderRef, LLVMSharp.LLVMValueRef, LLVMSharp.LLVMTypeRef, System.String)\r\n00007FFEEFBF4A70 000000010a8879e1 [InlinedCallFrame: 00007ffeefbf4a70] LLVMSharp.LLVM.BuildIntCast(LLVMSharp.LLVMBuilderRef, LLVMSharp.LLVMValueRef, LLVMSharp.LLVMTypeRef, System.String)\r\n00007FFEEFBF4A60 000000010A8879E1 DomainBoundILStubClass.IL_STUB_PInvoke(LLVMSharp.LLVMBuilderRef, LLVMSharp.LLVMValueRef, LLVMSharp.LLVMTypeRef, System.String)\r\n00007FFEEFBF4B40 000000010A897746 Internal.IL.ILImporter.ThrowIfNull(LLVMSharp.LLVMValueRef) [/Users/user/dev/dotnet/corert/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs @ 3187]\r\n00007FFEEFBF5130 000000010A896CE6 Internal.IL.ILImporter.ImportLoadLength() [/Users/user/dev/dotnet/corert/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs @ 3530]\r\n00007FFEEFBF52B0 000000010A87836F Internal.IL.ILImporter.ImportBasicBlock(BasicBlock) [/Users/user/dev/dotnet/corert/src/Common/src/TypeSystem/IL/ILImporter.cs @ 667]\r\n00007FFEEFBF5720 000000010A877147 Internal.IL.ILImporter.ImportBasicBlocks() [/Users/user/dev/dotnet/corert/src/Common/src/TypeSystem/IL/ILImporter.cs @ 304]\r\n00007FFEEFBF5750 000000010A873AE9 Internal.IL.ILImporter.Import() [/Users/user/dev/dotnet/corert/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs @ 152]\r\n00007FFEEFBF58F0 000000010A7470FF Internal.IL.ILImporter.CompileMethod(ILCompiler.WebAssemblyCodegenCompilation, ILCompiler.DependencyAnalysis.WebAssemblyMethodCodeNode) [/Users/user/dev/dotnet/corert/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter_Statics.cs @ 86]\r\n00007FFEEFBF5A80 000000010A746CB6 ILCompiler.WebAssemblyCodegenCompilation.ComputeDependencyNodeDependencies(System.Collections.Generic.List`1<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore`1<ILCompiler.DependencyAnalysis.NodeFactory>>) [/Users/user/dev/dotnet/corert/src/ILCompiler.WebAssembly/src/Compiler/WebAssemblyCodegenCompilation.cs @ 61]\r\n00007FFEEFBF5B00 000000010A7451BC ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2[[ILCompiler.DependencyAnalysisFramework.NoLogStrategy`1[[System.__Canon, System.Private.CoreLib]], ILCompiler.DependencyAnalysisFramework],[System.__Canon, System.Private.CoreLib]].ComputeDependencies(System.Collections.Generic.List`1<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore`1<System.__Canon>>) [/Users/user/dev/dotnet/corert/src/ILCompiler.DependencyAnalysisFramework/src/DependencyAnalyzer.cs @ 139]\r\n00007FFEEFBF5B30 000000010A71D7B3 ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2[[ILCompiler.DependencyAnalysisFramework.NoLogStrategy`1[[System.__Canon, System.Private.CoreLib]], ILCompiler.DependencyAnalysisFramework],[System.__Canon, System.Private.CoreLib]].ComputeMarkedNodes() [/Users/user/dev/dotnet/corert/src/ILCompiler.DependencyAnalysisFramework/src/DependencyAnalyzer.cs @ 262]\r\n00007FFEEFBF5C20 000000010A71D69E ILCompiler.WebAssemblyCodegenCompilation.CompileInternal(System.String, ILCompiler.ObjectDumper) [/Users/user/dev/dotnet/corert/src/ILCompiler.WebAssembly/src/Compiler/WebAssemblyCodegenCompilation.cs @ 50]\r\n00007FFEEFBF5C80 000000010A71D47E ILCompiler.Compilation.ILCompiler.ICompilation.Compile(System.String, ILCompiler.ObjectDumper) [/Users/user/dev/dotnet/corert/src/ILCompiler.Compiler/src/Compiler/Compilation.cs @ 387]\r\n00007FFEEFBF5CD0 00000001099C67E1 ILCompiler.Program.Run(System.String[]) [/Users/user/dev/dotnet/corert/src/ILCompiler/src/Program.cs @ 573]\r\n00007FFEEFBF6790 00000001099C16F6 ILCompiler.Program.Main(System.String[]) [/Users/user/dev/dotnet/corert/src/ILCompiler/src/Program.cs @ 729]\r\n00007FFEEFBF6AF8 0000000102c877e7 [GCFrame: 00007ffeefbf6af8] \r\n00007FFEEFBF6EA0 0000000102c877e7 [GCFrame: 00007ffeefbf6ea0] \r\n\r\nprint C->getType()->ID\r\n(llvm::Type::TypeID) $6 = PointerTyID\r\nprint Ty->ID\r\n(llvm::Type::TypeID) $7 = PointerTyID\r\n```\r\n\r\nThe culprit seems to be [this operation](https://github.com/dotnet/corert/blob/5b103fba8576f294f1ed2e6cb454950e0a4c5ec9/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L3187), where llvm doesn't consider those pointer types to be valid to cast to.","Url":"https://github.com/dotnet/corert/issues/7018","RelatedDescription":"Open issue \"WASM (LLVM): Assertion failure when building on OSX\" (#7018)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"411161564","IsPullRequest":false,"CreatedAt":"2019-02-18T04:10:02","Actor":"baruchiro","Number":"2955","RawContent":null,"Title":"\"MSBuildExtensionsPath\" in \"Sdk.props\" is empty","State":"closed","Body":"https://github.com/dotnet/sdk/blob/2eb6c546931b5bcb92cd3128b93932a980553ea1/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props#L31\r\n\r\nI create an object of [`Microsoft.Build.Evaluation.Project`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.evaluation.project?view=netframework-4.7.2&viewFallbackFrom=netcore-2.1) with existing `.csproj` file path.\r\nWhen I compile it in `net471` everything works fine.\r\n\r\nIf I compile it in `netcoreapp2.1`, the file `Sdk.props` throw an error because he search the file `Microsoft.Common.props` in current working directory (the folder of my executable dll) instead of in `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Microsoft.Common.props`.\r\nI think it is because the `$(MSBuildExtensionsPath)` is empty.\r\n\r\nIf you think to answer that \"this is not soppurted in *.net core*\", I will happy to know how to evulate `.csproj` files in *.net core*.","Url":"https://github.com/dotnet/sdk/issues/2955","RelatedDescription":"Closed issue \"\"MSBuildExtensionsPath\" in \"Sdk.props\" is empty\" (#2955)"},{"Id":"411149954","IsPullRequest":true,"CreatedAt":"2019-02-17T05:06:36","Actor":"wli3","Number":"2954","RawContent":null,"Title":"merge release/2.2.2xx to release/release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2954","RelatedDescription":"Open PR \"merge release/2.2.2xx to release/release/3.0.1xx\" (#2954)"},{"Id":"411087965","IsPullRequest":false,"CreatedAt":"2019-02-16T16:28:28","Actor":"nguerrera","Number":"2953","RawContent":null,"Title":"Assembly version stopped being bumped with every build in 2.1.300+","State":"open","Body":"MSBuild on desktop cannot load more than one version of our tasks unless we bump the assembly version. (MSBuild on coreclr can't either, but we have a 1:1 msbuild:sdk relationship on coreclr so it's moot. The current limitations on coreclr are even worse, can't load SxS in same load context regardless of version, but again moot here.)\r\n\r\nIf an MSBuild node is alive using a different build of the same Major.Minor.Patch release, then it will use targets from the new build and tasks from the old one. When there are contract changes between the tasks and targets, this can lead to confounding errors  like \"task X could not be loaded from Microsoft.NET.Build.Tasks.dll\" or \"task Y does not take parameter Z\". \r\n\r\nWe got around this in the past by bumping the assembly version with every build. Since tasks are always dynamically loaded and never referenced directly at compilation time, this doesn't have the usual negative consequences of requiring excessive binding redirects, etc.\r\n\r\nThis has a history of regressing with infrastructure (repo toolset, arcade, etc.,) because the infrastructure is opinionated that the build number should not be part of the assembly version, which makes sense for most things, but not build tasks. We need to add test coverage to stop this from regressing. It can go a long time unreported because 1) things might still work when mixing tasks and targets between builds and 2) msbuild nodes eventually shut down and things start working again, letting the problem get chalked up to flakiness that can't be reproduced.\r\n\r\nNow, with the move to build-to-build upgrades of patches, https://github.com/dotnet/core-sdk/pull/530, I think there will be a prompt to terminate users of older build or a prompt to reboot following the upgrade.That would mitigate this, but we should still be defensive for forced SxS patch installs (via .zip or whatever).","Url":"https://github.com/dotnet/sdk/issues/2953","RelatedDescription":"Open issue \"Assembly version stopped being bumped with every build in 2.1.300+\" (#2953)"},{"Id":"411070823","IsPullRequest":true,"CreatedAt":"2019-02-16T13:01:02","Actor":"dotnet-maestro[bot]","Number":"2952","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19115.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2952","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#2952)"},{"Id":"408585850","IsPullRequest":false,"CreatedAt":"2019-02-16T00:30:20","Actor":"nguerrera","Number":"2928","RawContent":null,"Title":"Possible dead code handling null resolver, which doesn't appear to be possible","State":"closed","Body":"We create a resolver here:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/GetPackageDirectory.cs#L30\r\n\r\nWhich doesn't look like it can return null:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/NuGetPackageResolver.cs#L71-L82\r\n\r\nBut we check for null here:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/GetPackageDirectory.cs#L43-L45\r\n\r\n@dsplaisted What's the origin of this comment. How can this be null in design time builds?\r\n\r\nIs there something else we are supposed to be handling?","Url":"https://github.com/dotnet/sdk/issues/2928","RelatedDescription":"Closed issue \"Possible dead code handling null resolver, which doesn't appear to be possible\" (#2928)"},{"Id":"410738361","IsPullRequest":true,"CreatedAt":"2019-02-16T00:30:18","Actor":"dotnet-bot","Number":"2945","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2945","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2945)"},{"Id":"410997416","IsPullRequest":true,"CreatedAt":"2019-02-16T00:10:25","Actor":"zivkan","Number":"2951","RawContent":null,"Title":"Insert NuGet Build 4.3.1-rtm-5850 into sdk 1.1","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2951","RelatedDescription":"Open PR \"Insert NuGet Build 4.3.1-rtm-5850 into sdk 1.1\" (#2951)"},{"Id":"410738328","IsPullRequest":true,"CreatedAt":"2019-02-15T21:29:45","Actor":"dotnet-bot","Number":"2942","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2942","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2942)"},{"Id":"410900677","IsPullRequest":true,"CreatedAt":"2019-02-15T18:57:12","Actor":"zivkan","Number":"2950","RawContent":null,"Title":"Insert NuGet Build 4.9.4-rtm.5839 into SDK 2.2.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2950","RelatedDescription":"Open PR \"Insert NuGet Build 4.9.4-rtm.5839 into SDK 2.2.1xx\" (#2950)"},{"Id":"410899716","IsPullRequest":true,"CreatedAt":"2019-02-15T18:54:30","Actor":"zivkan","Number":"2949","RawContent":null,"Title":"Insert NuGet Build 4.9.4-rtm.5839 into sdk 2.1.5xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2949","RelatedDescription":"Open PR \"Insert NuGet Build 4.9.4-rtm.5839 into sdk 2.1.5xx\" (#2949)"},{"Id":"410896484","IsPullRequest":false,"CreatedAt":"2019-02-15T18:45:09","Actor":"danroth27","Number":"2948","RawContent":null,"Title":"Error when running Blazor app before running any other .NET Core 3.0 app: Unable to generate deps.json, it may have been already generated","State":"open","Body":"If you create a Blazor app after installing the .NET Core 3.0 Preview 2 SDK and you have a clean NuGet package cache you get an error when running the app: \"Unable to generate deps.json, it may have been already generated\". \r\n\r\nBlazor apps rely on a `DotNetCliToolReference` to run, but they also target .NET Standard:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RunCommand>dotnet</RunCommand>\r\n    <RunArguments>blazor serve</RunArguments> \r\n    <LangVersion>7.3</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor\" Version=\"0.8.0-preview-19104-04\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.8.0-preview-19104-04\" PrivateAssets=\"all\" />\r\n\r\n    <DotNetCliToolReference Include=\"Microsoft.AspNetCore.Blazor.Cli\" Version=\"0.8.0-preview-19104-04\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIt appears that the problem is that the Microsoft.NetCore.App package doesn't get restored, which then causes the Blazor app to fail at runtime. If you create any other .NET Core app before trying to run the Blazor app, the Microsoft.NetCore.App package is then already restored and the app runs fine. At the very least the error message doesn't really help you understand what is going on here.\r\n\r\nRepro steps:\r\n- Install .NET Core 3.0 Preview 2\r\n- `dotnet new -i Microsoft.AspNetCore.Blazor.Templates::0.8.0-preview-19104-04`\r\n- `dotnet nuget locals all -c`\r\n- `dotnet new blazor -o BlazorApp1`\r\n- `cd BlazorApp1`\r\n- `dotnet run`\r\n\r\nExpected result:\r\n- Blazor app runs successfully\r\n\r\nActual result:\r\n- Unable to generate deps.json, it may have been already generated.  You can specify the \"-d\" option before the tool name for diagnostic output (for example, \"dotnet -d <toolname>\": C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\Sdks\\Microsoft.NET.Sdk\\targets\\GenerateDeps\\GenerateDeps.proj\r\n\r\nTo workaround the issue you can create any .NET Core app, which will result in the missing Microsoft.AspNetCore.App package to get successfully restored.\r\n\r\nWorkaround:\r\n- `cd ..`\r\n- `dotnet new console -o ConsoleApp1`\r\n- `cd BlazorApp1`\r\n- `dotnet run`\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2948","RelatedDescription":"Open issue \"Error when running Blazor app before running any other .NET Core 3.0 app: Unable to generate deps.json, it may have been already generated\" (#2948)"},{"Id":"410829762","IsPullRequest":true,"CreatedAt":"2019-02-15T15:50:56","Actor":"v-zbsail","Number":"2947","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/2.2.2xx | 20190215","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2947","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/sdk release/2.2.2xx | 20190215\" (#2947)"},{"Id":"410759531","IsPullRequest":true,"CreatedAt":"2019-02-15T14:16:43","Actor":"dotnet-maestro[bot]","Number":"2946","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2946","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2946)"},{"Id":"410738350","IsPullRequest":true,"CreatedAt":"2019-02-15T12:01:56","Actor":"dotnet-bot","Number":"2944","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2944","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#2944)"},{"Id":"410738340","IsPullRequest":true,"CreatedAt":"2019-02-15T12:01:53","Actor":"dotnet-bot","Number":"2943","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2943","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2943)"},{"Id":"409036755","IsPullRequest":true,"CreatedAt":"2019-02-15T10:22:39","Actor":"dotnet-bot","Number":"2931","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2931","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#2931)"},{"Id":"409036772","IsPullRequest":true,"CreatedAt":"2019-02-15T10:22:34","Actor":"dotnet-bot","Number":"2932","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2932","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2932)"},{"Id":"410635017","IsPullRequest":false,"CreatedAt":"2019-02-15T07:12:20","Actor":"pawarvikaskwd","Number":"2941","RawContent":null,"Title":"project.assets.json not found. Run nuget package to restore","State":"open","Body":"I am trying to build MS Unit test project with .Net standard class library project on VSTS. Locally solution is working fine but when I am trying to build using VSTS it's failing. **project.assets.json' not found. Run a NuGet package restore to generate this file.** I am getting this error.\r\n\r\nI am using Nuget Restore in VSTS build before building the application. Nuget restore step is succeeded, but after that Build solution step is failing.  How to fix this?","Url":"https://github.com/dotnet/sdk/issues/2941","RelatedDescription":"Open issue \"project.assets.json not found. Run nuget package to restore\" (#2941)"},{"Id":"409771606","IsPullRequest":true,"CreatedAt":"2019-02-15T03:24:14","Actor":"dotnet-bot","Number":"2935","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2935","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2935)"},{"Id":"410141286","IsPullRequest":true,"CreatedAt":"2019-02-15T02:42:08","Actor":"peterhuene","Number":"2938","RawContent":null,"Title":"Ensure Build target isn't invoked when NoBuild is set.","State":"closed","Body":"For `dotnet pack --nobuild` and `dotnet publish --nobuild`, if a target\r\ninadvertently triggers the `Build` target, the build proceeds despite the user\r\nexplicitly requesting no build takes place.\r\n\r\nThis commit ensures the SDK errors if the `Build` target gets invoked when\r\n`NoBuild` is true.\r\n\r\nFixes dotnet/cli#9581.","Url":"https://github.com/dotnet/sdk/pull/2938","RelatedDescription":"Closed or merged PR \"Ensure Build target isn't invoked when NoBuild is set.\" (#2938)"},{"Id":"410480688","IsPullRequest":false,"CreatedAt":"2019-02-14T20:35:24","Actor":"nguerrera","Number":"2940","RawContent":null,"Title":"ResolveTargetingPackAssets crash in Dev16","State":"open","Body":"@DamianEdwards reports the stack below in error list with latest SDK, latest Dev16 and the following project created from template:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.NewtonsoftJson\" Version=\"3.0.0-preview-19106-07\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/75470/52815895-b5621180-3054-11e9-9d0f-dd70c23d59b5.png)\r\n\r\ncc @dsplaisted @natemcmaster \r\n \r\n","Url":"https://github.com/dotnet/sdk/issues/2940","RelatedDescription":"Open issue \"ResolveTargetingPackAssets crash in Dev16\" (#2940)"},{"Id":"410288585","IsPullRequest":true,"CreatedAt":"2019-02-14T14:31:38","Actor":"dotnet-maestro[bot]","Number":"2939","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19113.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2939","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2939)"},{"Id":"410049594","IsPullRequest":false,"CreatedAt":"2019-02-13T23:19:54","Actor":"nguerrera","Number":"2937","RawContent":null,"Title":"Get package overrides from txt file in targeting pack instead of msbuild item","State":"open","Body":"https://github.com/aspnet/AspNetCore/pull/7555\r\n\r\nThe file format is very similar to the item.\r\n\r\nBefore: build\\netcoreapp3.0\\Microsoft.AspNetCore.App.props:\r\n ```xml\r\n<ItemGroup>\r\n   <PackageConflictOverrides Include=\"Microsoft.AspNetCore.App\">\r\n       <OverriddenPackages>\r\n         Microsoft.AspNetCore.Antiforgery|3.0.0-preview3-19111-04;\r\n         Microsoft.AspNetCore.Authentication.Abstractions|3.0.0-preview3-19111-04;\r\n         Microsoft.AspNetCore.Authentication.Cookies|3.0.0-preview3-19111-04;\r\n         // ...\r\n \r\n```              \r\n \r\n\r\nAfter: build\\netcoreapp3.0\\Microsoft.AspNetCore.App.PackageOverrides.txt:\r\n\r\n```\r\nMicrosoft.AspNetCore.Antiforgery|3.0.0-preview3-19111-04\r\nMicrosoft.AspNetCore.Authentication.Abstractions|3.0.0-preview3-19111-04\r\nMicrosoft.AspNetCore.Authentication.Cookies|3.0.0-preview3-19111-04\r\n// ...\r\n```\r\n\r\nThe identity of the item follows from the package/file name, the metadata is the body of the txt file, where newlines delimit instead of `;` with whitespace ignored.\r\n","Url":"https://github.com/dotnet/sdk/issues/2937","RelatedDescription":"Open issue \"Get package overrides from txt file in targeting pack instead of msbuild item\" (#2937)"},{"Id":"409794010","IsPullRequest":true,"CreatedAt":"2019-02-13T14:06:19","Actor":"dotnet-maestro[bot]","Number":"2936","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19112.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2936","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2936)"},{"Id":"408605617","IsPullRequest":true,"CreatedAt":"2019-02-13T00:53:54","Actor":"nguerrera","Number":"2929","RawContent":null,"Title":"Speed up GetPackageDirectory task and clean up NuGetPackageResolver","State":"closed","Body":"1. Never use INuGetPathContext. It is slow an unpredictable. It was left as a fallback when #361 was fixed, but we should never be resolving from package folders other than what is listed in the assets file. So  instead, if no package folders are in the assets file, we will find no packages. This path should not ever have been taken. Most tasks that call this are skipped in design-time when no assets file is available yet. GetPackageDirectory is not, but that is handled by (3) below.\r\n\r\n2. Stop hitting the disk twice on GetPackageDirectory. We were calling GetPackageInfo and GetPackageDirectory and both probe on disk for the package. Instead, use GetInstallPath on result PackageInfo or use GetPackageDirectory alone when we do not need the RootPath.\r\n\r\n3. Fix #2928: Replace incorrect check for null package resolver and replace it with up-front defense against empty PackageFolders.\r\n\r\n4. Eliminate unnecessary allocations for List<T> resizing and copying to array.\r\n\r\n5. Fix TODO in NuGetPackageResolver and Use RootPath property instead of workaround.\r\n\r\n6. Stop treating \"\\\\%(RelativePath)\" as targeting pack path when not downloaded.\r\n\r\n7. Follow same pattern for apphost as targeting pack to avoid probing in packages folder when found in packs folder.","Url":"https://github.com/dotnet/sdk/pull/2929","RelatedDescription":"Closed or merged PR \"Speed up GetPackageDirectory task and clean up NuGetPackageResolver\" (#2929)"},{"Id":"409453305","IsPullRequest":true,"CreatedAt":"2019-02-12T20:24:39","Actor":"dotnet-maestro[bot]","Number":"2934","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19112.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2934","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2934)"},{"Id":"409090070","IsPullRequest":false,"CreatedAt":"2019-02-12T02:40:46","Actor":"dsplaisted","Number":"2933","RawContent":null,"Title":"Get platform manifest and conflict resolution data from targeting packs or runtime packs if appropriate","State":"open","Body":"For .NET Core 2.x, the `Microsoft.NETCore.App` package includes a platform manifest .txt file as well as `PackageConflictOverrides` MSBuild items for conflict resolution.  For .NET Core 3.0, these should come from the targeting pack for framework dependent apps, and from the runtime pack for self-contained apps.\r\n\r\nThis means that both targeting packs and runtime packs need to include this data, and the SDK needs to use the data from the appropriate type of pack depending on whether the app is self-contained or not.","Url":"https://github.com/dotnet/sdk/issues/2933","RelatedDescription":"Open issue \"Get platform manifest and conflict resolution data from targeting packs or runtime packs if appropriate\" (#2933)"},{"Id":"408852652","IsPullRequest":false,"CreatedAt":"2019-02-11T16:02:19","Actor":"nguerrera","Number":"2930","RawContent":null,"Title":"Improve missing targeting pack error handling","State":"open","Body":"Today, in the implementation so far, we have: `GenerateErrorForMissingTargetingPacks` that is set to false for all design-time builds:\r\n\r\nhttps://github.com/dotnet/sdk/blob/b8c8d680ef807a8d35e3ce1dfceb3e69ca7be394/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.TargetingPackResolution.targets#L151-L155\r\n\r\nBut we want an error in design-time builds when restore has happened. Should this instead be conditioned on the presence of an assets file + !design-time like other targets?\r\n\r\nWe also discussed special handling to surface errors from packagedownload of targeting pack to project system.\r\n\r\ncc @dsplaisted @davkean\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2930","RelatedDescription":"Open issue \"Improve missing targeting pack error handling\" (#2930)"},{"Id":"408412866","IsPullRequest":false,"CreatedAt":"2019-02-09T17:51:55","Actor":"aodl","Number":"2926","RawContent":null,"Title":"Attributing arbitrary identifiers/values to a project's package and project references","State":"closed","Body":"Relates to [NuGet#7776](https://github.com/NuGet/Home/issues/7776)   \r\n\r\nIs there a facility available for assigning arbitrary attributes to the project and package references of a particular project, in a way that the information becomes available at runtime? i.e.\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"some.random.package1\"  CustomAttribute=\"banana\"/>\r\n    <PackageReference Include=\"some.random.package2\"  CustomAttribute=\"flowers\" />\r\n  </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <ProjectReference Include=\"..\\project1\\project1.csproj\" CustomAttribute=\"0\" />\r\n      <ProjectReference Include=\"..\\project1\\project2.csproj\" CustomAttribute=\"1\"/>\r\n    </ItemGroup>\r\n```\r\nI'm aware that this customAttribute information couldn't be made available on the package reference **assemblies** as they will already be built; and in the case of project references I expect it's either not possible or would require adding a task info the csproj. of the referenced projects themselves (to pick up a custom property passed in by msbuild and embedded it into an assembly attribute).\r\n\r\nIn the case of the package reference, I have control over how they are built, but they are built before knowing what custom attribute might be assigned to it from a referencing project.\r\n\r\nThe only way I can think of doing this for both project and package references is to have a build task that retrieves the `PackageReference` and `ProjectReference` ItemGroups, checks for the presence of `CustomAttribute` and in each case writes the package/project name and custom attribute value to a file for lookup at runtime.\r\n\r\nAre there built in ways to do this sort of thing?\r\n","Url":"https://github.com/dotnet/sdk/issues/2926","RelatedDescription":"Closed issue \"Attributing arbitrary identifiers/values to a project's package and project references\" (#2926)"},{"Id":"408429520","IsPullRequest":true,"CreatedAt":"2019-02-09T14:26:10","Actor":"dotnet-maestro[bot]","Number":"2927","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19108.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2927","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2927)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em>\r\n\r\n<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this post and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1095786421221240833","CreatedAt":"2019-02-13T20:46:56+00:00","UserScreenname":"dotnet","Text":"The #DotNet blog is getting a major update! Find more details and get a sneak peek of our new and improved blog des… https://t.co/cIC92TS7qA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":34,"RawContent":null},{"Id":"1093308202496647168","CreatedAt":"2019-02-07T00:39:22+00:00","UserScreenname":"dotnet","Text":"Did you know that the WPF team is hiring developers? If you're interested, ping Amit Kabra via @LinkedIn https://t.co/b3cxGZuhmP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":37,"RawContent":null},{"Id":"1093184056282337280","CreatedAt":"2019-02-06T16:26:04+00:00","UserScreenname":"dotnet","Text":"This is a great program. Go check it out! https://t.co/tR4dh1UcC5","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"1092843649904271360","CreatedAt":"2019-02-05T17:53:24+00:00","UserScreenname":"dotnet","Text":"Take a look at today's new On .NET episode.\n\n\"Learning Machine Learning with .NET, PyTorch and the ONNX Runtime\"… https://t.co/DLFVmdR0m1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":36,"RawContent":null}]}},"RunOn":"2019-02-18T05:30:44.5143783Z","RunDurationInMilliseconds":14386}