{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":16,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6681620774","Type":"IssuesEvent","CreatedAt":"2017-10-06T05:31:19","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14251","RelatedDescription":"Closed issue \"[RyuJIT/armel] Pri2 Test Regression\" (#14251) at dotnet/coreclr","RelatedBody":"372 tests fail on my local target machine(tizen).\r\n\r\nIntroduced by #14171. It looked unit tests passed, but it turns out that i ran tests with Legacy Backend.\r\nI forgot giving AltJit option. My bad :("},{"Id":"6681620770","Type":"PullRequestEvent","CreatedAt":"2017-10-06T05:31:19","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14253","RelatedDescription":"Merged pull request \"[RyuJIT/armel] Fix regression\" (#14253) at dotnet/coreclr","RelatedBody":"Fix calling a function passing double-type stack arguments.\r\n\r\nFix #14251\r\n\r\ncc: @dotnet/arm32-contrib "},{"Id":"6681599813","Type":"PullRequestEvent","CreatedAt":"2017-10-06T05:20:54","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14353","RelatedDescription":"Opened pull request \"Fix RyuJIT/arm32 asserts\" (#14353) at dotnet/coreclr","RelatedBody":"Fix #14199: propagate `GTF_EXCEPT` bits from the end of `GT_FIELD_LIST`\r\nlists to the beginning, to avoid \"Missing flags on tree\" asserts.\r\n\r\nFix #14198: for RyuJIT/arm32, `GT_BITCAST` needs to be a MultiRegOp.\r\nThis is required when a varargs function, which includes the tailcall\r\nhelper, needs to pass a double in integer registers. We can end up\r\nwith `GT_PUTARG_REG/long(GT_BITCAST/long(double tree))`.\r\n\r\nFixed various GenTree node flags dumping issues."},{"Id":"6681580163","Type":"PullRequestEvent","CreatedAt":"2017-10-06T05:10:38","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14351","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#14351) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6681403539","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:35:52","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14352","RelatedDescription":"Opened pull request \"Add Span-based methods to DateTime{Offset}\" (#14352) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/22358\r\ncc: @tarekgh, @AlexGhiondea, @joperezr, @jkotas "},{"Id":"6681203946","Type":"PullRequestEvent","CreatedAt":"2017-10-06T01:53:11","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14351","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert\" (#14351) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6681119781","Type":"PullRequestEvent","CreatedAt":"2017-10-06T01:12:06","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14349","RelatedDescription":"Merged pull request \"Update CentOS 6 and 7 docker images\" (#14349) at dotnet/coreclr","RelatedBody":"The images now contains clang 3.9 with PGO support"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6681163383","Type":"IssuesEvent","CreatedAt":"2017-10-06T01:33:20","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7774","RelatedDescription":"Opened issue \".NET Core 2.0 SDK Build fail\" (#7774) at dotnet/cli","RelatedBody":"@wh1sp3r opened this issue here: https://github.com/dotnet/core/issues/946\r\n\r\nHello,\r\nI updated my SDK to version 2.0 and I am not able to build my project for Framework 4.6.\r\nI am using Microsoft.AspNetCore libraries in version **1.1.3**.\r\n\r\nOutput:\r\n```\r\nPM> dotnet build\r\nMicrosoft (R) Build Engine verze 15.3.409.57025 pro .NET Core\r\nCopyright (C) Microsoft Corporation. Vçechna pr va vyhrazena.\r\n\r\napp.config : error MSB3249: Konfiguraźnˇ soubor aplikace app.config je neplatně. Index and count must refer to a location within the string. [C:\\Project\\Project.csproj]\r\napp.config : error MSB3249: Parameter name: destinationIndex [C:\\Project\\Project.csproj]\r\n\r\nBuild failed.\r\n\r\napp.config : error MSB3249: Konfiguraźnˇ soubor aplikace app.config je neplatně. Index and count must refer to a location within the string. [C:\\Project\\Project.csproj]\r\napp.config : error MSB3249: Parameter name: destinationIndex [C:\\Project\\Project.csproj]\r\n    0 warningsˇ\r\n    Erorr count: 1\r\n```\r\n\r\nWell, my app.config is not used and is almost empty\r\n`<configuration>\r\n   <runtime>\r\n      <gcServer enabled=\"true\"/>\r\n   </runtime>\r\n</configuration>\r\n`\r\n\r\nWorked fine before installing 2.0 SDK.\r\n\r\n\r\n\r\n"},{"Id":"6681098489","Type":"PullRequestEvent","CreatedAt":"2017-10-06T01:01:59","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7768","RelatedDescription":"Merged pull request \"Append to existing PATH in build env scripts/cli-test-env.bat\" (#7768) at dotnet/cli","RelatedBody":"We were clobbering the path down to just one directory\r\n"},{"Id":"6681071588","Type":"PullRequestEvent","CreatedAt":"2017-10-06T00:49:25","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7773","RelatedDescription":"Opened pull request \"Attempt to fix tool json test flakiness\" (#7773) at dotnet/cli","RelatedBody":"Making the smallest possible code change for what I believe is causing tests that run project tool commands to fail occasionally with errors like:\r\n\r\n```\r\nA JSON parsing exception occurred in [D:\\j\\workspace\\debug_windows---bc3c3f12\\.nuget\\packages\\.tools\\dotnet-portable\\1.0.0\\netcoreapp2.0\\dotnet-portable.deps.json]: * Line 1, Column 2 Syntax error: Malformed literal\r\n```\r\n\r\nI am unable to reproduce the problem locally, though, so it might not really be the issue.\r\n\r\nDoing this sort of transactional write is something I've thought about in the past and found C# to be lacking in API support for getting it right. See https://github.com/dotnet/corefx/issues/20755  I'm purposely avoiding going down that rabbit hole here. Let's wait and see how Jenkins runs with\r\nthis small tweak. \r\n\r\nFix #4660 (hopefully)\r\n"},{"Id":"6680916989","Type":"PullRequestEvent","CreatedAt":"2017-10-05T23:42:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7766","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25805-02 (master)\" (#7766) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6680914565","Type":"PullRequestEvent","CreatedAt":"2017-10-05T23:41:37","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7772","RelatedDescription":"Opened pull request \"Update the SDK to 2.1.0-preview1-20171006-4\" (#7772) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/7691 by bringing the SDK with the necessary change.\r\n\r\n@dotnet/dotnet-cli "},{"Id":"6680828717","Type":"IssuesEvent","CreatedAt":"2017-10-05T23:09:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7691","RelatedDescription":"Closed issue \"Latest Nightly Build SDK (2.1.0-preview1-007214) Failed to Build netstandard2.0 Library\" (#7691) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Install the latest nightly build SDK. The one I used was of version (2.1.0-preview1-007214).\r\n2. `dotnet new library`\r\n3. Add the following code,\r\n\r\n```c#\r\nusing System;\r\nusing System.Reflection;\r\n\r\nnamespace Data1\r\n{\r\n    public class DataType\r\n    {\r\n        public static void WriteInfo()\r\n        {\r\n            Console.WriteLine($\"In DataType.WriteInfo, Assembly.GetExecutingAssembly().FullName: {Assembly.GetExecutingAssembly().FullName}\");\r\n        }\r\n    }\r\n}\r\n```\r\n4. `dotnet restore`\r\n5. `dotnet build`\r\n\r\n## Expected  behavior\r\nBuild succeeds.\r\n\r\n## Actual behavior\r\nBuild fails with the following error,\r\n\r\n```\r\nDataType.cs(12,108): error CS0117: 'Assembly' does not contain a definition for 'GetExecutingAssembly' [c:\\temp\\SgenTests\\Data1\\Data1.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.0-preview1-007214)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007214\r\n Commit SHA-1 hash:  2956c548b9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007214\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-25616-02\r\n  Build    : 8aa34a95bad481e1b5e4c8286e5cb2d7cb6ed943\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6680755309","Type":"IssuesEvent","CreatedAt":"2017-10-05T22:44:21","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7770","RelatedDescription":"Opened issue \"Cannot target portable or sl5\" (#7770) at dotnet/cli","RelatedBody":"@tpluscode opened this issue here: https://github.com/dotnet/core/issues/968\r\n\r\nIt's impossible to target some framework version (in my case portable or sl5) without adding a full framework too.\r\n\r\n# General\r\n\r\nIn one project I multi-target for a wide variety of frameworks including Silverlight 5, .NET 3.5 and portable. It worked fine in .NET 1.1 SDK. Here's an example project file.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <RootNamespace>Test</RootNamespace>\r\n    <AssemblyName>Test</AssemblyName>\r\n    <TargetFrameworks>sl5;netcoreapp1.1;net462;portable-net40+sl50+win8+wpa81+wp8</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'sl5'\">\r\n    <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>\r\n    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'portable-net40+sl50+win8+wpa81+wp8'\">\r\n    <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>\r\n    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nNot sure why I need the PropertyGroups with conditions but it worked.\r\n\r\nAfter updating to .NET Core 2.0 I'm seeing these errors:\r\n\r\n```\r\nMicrosoft.PackageDependencyResolution.targets(165,5): error : Assets file 'obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.5'. Ensure that restore has run and that you have included 'net45' in the TargetFrameworks for your project. [Test.csproj]\r\nMicrosoft.PackageDependencyResolution.targets(165,5): error : Assets file 'obj/project.assets.json' doesn't have a target for '.NETFramework,Version=v4.0'. Ensure that restore has run and that you have included 'net40' in the TargetFrameworks for your project. [Test.csproj]\r\n```\r\n\r\nThe error isn't incorrect, adding `net40;net45` to `TargetFrameworks` does help. But it shouldn't be necessary and I don't really want to target them explicitly. Especially the .NET 4.0 seems redundant given that the portable profile I use does include that."},{"Id":"6680628549","Type":"IssuesEvent","CreatedAt":"2017-10-05T22:05:28","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7769","RelatedDescription":"Opened issue \"Easy Acquisition via scripts and stable links\" (#7769) at dotnet/cli","RelatedBody":"@tannergooding filed a great issue over here: https://github.com/dotnet/core/issues/483\r\n\r\nIt hasn't been tracked because thats not a product repo but we should come up with a good plan across the board for how it should work.\r\n\r\n@richlander @leecow @KathleenDollard "},{"Id":"6680240154","Type":"PullRequestEvent","CreatedAt":"2017-10-05T20:31:15","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7768","RelatedDescription":"Opened pull request \"Append to existing PATH in build env scripts/cli-test-env.bat\" (#7768) at dotnet/cli","RelatedBody":"We were clobbering the path down to just one directory\r\n"},{"Id":"6679781952","Type":"PullRequestEvent","CreatedAt":"2017-10-05T18:46:51","Actor":"seancpeters","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7767","RelatedDescription":"Opened pull request \"updating dotnet/templating build to 20171004-309\" (#7767) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6679683607","Type":"PullRequestEvent","CreatedAt":"2017-10-05T18:25:09","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7751","RelatedDescription":"Merged pull request \"Update satellite assemblies and fix up roslyn satellite handling\" (#7751) at dotnet/cli","RelatedBody":"1. Publish satellites with a separate project and merge the resulting .deps.json into (csc|vbc).deps.json\r\n\r\n2. Move the build tasks satellites to the correct location next to main assembly (one level higher than bincore\\)\r\n\r\n3. Update roslyn satellite package to 2.6.x to get matching assembly version and updated strings\r\n\r\n4. Update F# satellite package\r\n\r\nMarked *no merge* because the CliDeps.Satellites being ingested isn't real-signed."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6678441453","Type":"IssuesEvent","CreatedAt":"2017-10-05T14:15:42","Actor":"Priya-John","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/527","RelatedDescription":"Opened issue \"HttpCookie class is not present in .netCore\" (#527) at dotnet/standard","RelatedBody":""},{"Id":"6674601934","Type":"PullRequestEvent","CreatedAt":"2017-10-04T19:06:28","Actor":"eerhardt","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/525","RelatedDescription":"Merged pull request \"[dev/release/2.0.0] Move web sources before potentially local sources\" (#525) at dotnet/standard","RelatedBody":"Followup to https://github.com/dotnet/standard/pull/523 (initial API implementation). Adds a workaround to a `--source` bug that I added to the CoreFX repo API PR discussed at https://github.com/dotnet/corefx/pull/24378#discussion_r142285244."},{"Id":"6670813476","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:27:22","Actor":"tmenier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/526","RelatedDescription":"Opened issue \"Did the term \"portable\" die with PCLs?\" (#526) at dotnet/standard","RelatedBody":"Not sure if this is a good place this question. I have a library that used to be a PCL and has since been updated to target .NET Standard. Should I no longer say the library is \"portable\"? Is there a replacement term I should use? \"Portable\" seems appropriate, yet the term seems to have died with PCLs and I'm not entirely sure why. Thanks!"},{"Id":"6668348275","Type":"PullRequestEvent","CreatedAt":"2017-10-03T15:30:58","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/525","RelatedDescription":"Opened pull request \"[dev/release/2.0.0] Move web sources before potentially local sources\" (#525) at dotnet/standard","RelatedBody":"Followup to https://github.com/dotnet/standard/pull/523 (initial API implementation). Adds a workaround to a `--source` bug that I added to the CoreFX repo API PR discussed at https://github.com/dotnet/corefx/pull/24378#discussion_r142285244."},{"Id":"6666299022","Type":"IssuesEvent","CreatedAt":"2017-10-03T07:37:10","Actor":"moh-hassan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/524","RelatedDescription":"Opened issue \"After the final release of .Net Standard 2.0 and .Net Core 2.0, what are the missing 43 API that not implemented in net461?\" (#524) at dotnet/standard","RelatedBody":"I read the discussion:\r\n[Understanding why there is no cleaner way than .NET Framework 4.6.1 supporting .NET Standard 2.0 #133](https://github.com/dotnet/standard/issues/133) and \r\n[What are the 43 APIs that are in .Net Standard 2.0 but not in .Net Framework 4.6.1?](https://stackoverflow.com/questions/43601101/what-are-the-43-apis-that-are-in-net-standard-2-0-but-not-in-net-framework-4-6)\r\nAnd find that these 43 API are not documented anywhere on the Internet, so I ask:\r\n\r\n- What are the missing 43 API that is not implemented in net461?\r\n- How to avoid their usage in net461 (before firing exceptions in unit test)?\r\n- Can we get a browser like [.NET API Browser](https://docs.microsoft.com/en-us/dotnet/api/) or tool in github  that mention frankly these API?\r\n- Can  multi target project (netstandard2,net461) protect against the usage of these 43 API?\r\n"},{"Id":"6664043234","Type":"PullRequestEvent","CreatedAt":"2017-10-02T18:39:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/523","RelatedDescription":"Merged pull request \"Add auto dependency flow repo API\" (#523) at dotnet/standard","RelatedBody":"Implement [auto dependency flow repo API](https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/auto-dependency-flow/api.md).\r\n\r\nThe new BuildTools package provides a common implementation for most of the args (https://github.com/dotnet/buildtools/pull/1707), but some changes are required:\r\n * The `dir.props` source changes are because BuildTools now provides a default value of `RestoreSources` based on repo API args. BuildTools also now automatically flows the property into the restore command."},{"Id":"6663597203","Type":"PullRequestEvent","CreatedAt":"2017-10-02T16:59:28","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/523","RelatedDescription":"Opened pull request \"Add auto dependency flow repo API\" (#523) at dotnet/standard","RelatedBody":"Implement [auto dependency flow repo API](https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/auto-dependency-flow/api.md).\r\n\r\nThe new BuildTools package provides a common implementation for most of the args (https://github.com/dotnet/buildtools/pull/1707), but some changes are required:\r\n * The `dir.props` source changes are because BuildTools now provides a default value of `RestoreSources` based on repo API args. BuildTools also now automatically flows the property into the restore command."},{"Id":"6662856018","Type":"IssuesEvent","CreatedAt":"2017-10-02T14:31:19","Actor":"mattkoch614","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/522","RelatedDescription":"Opened issue \"Creating a class library in 2.0 and referencing it from an SSIS script component/task\" (#522) at dotnet/standard","RelatedBody":"We have a set of SSIS packages that leverage script components and script tasks. These packages were written in Visual Studio 2012 and are deployed to a server that has the .NET framework 4.5 and SQL Server 2012 Standard installed.\r\n\r\nWhat we'd like to do is write some new class libraries using .NET Standard 2.0 and be able to reference them from the script components and tasks inside of our existing SSIS packages. The script components and tasks by default target the .NET Framework 4.0.  Is this possible?\r\n\r\nPreliminary testing of this scenario results in the script tasks throwing an error of ``'System.Obect' is not defined`` which leads me to believe there is some clashing going on with either the Visual Studio version or the .NET framework itself.\r\n\r\nAny help greatly appreciated. "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6681605732","Type":"IssuesEvent","CreatedAt":"2017-10-06T05:23:58","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24117","RelatedDescription":"Closed issue \"IPAddress.GetHashCode allocates a string for IPv6\" (#24117) at dotnet/corefx","RelatedBody":"In order to return a hash code for IPv6 IPAddress calls (and caches) `ToString` and returns the result's hash code:\r\n```csharp\r\npublic override int GetHashCode()\r\n{\r\n    if (IsIPv6)\r\n    {\r\n        if (_hashCode == 0)\r\n        {\r\n            _hashCode = StringComparer.OrdinalIgnoreCase.GetHashCode(ToString());\r\n        }\r\n\r\n        return _hashCode;\r\n    }\r\n    else\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nThese allocations constantly show up high on our list when we analyze our product's performance (even though the results are cached).\r\nIs there any reason not to just calculate the hash code from the internal `ushort[] _numbers` and `_addressOrScopeId`?\r\n\r\nA trivial implementation would be to simply xor all the values (but I can use something more complicated):\r\n\r\n```csharp\r\npublic override int GetHashCode()\r\n{\r\n    if (IsIPv6)\r\n    {\r\n        if (_hashCode == 0)\r\n        {\r\n            int hashCode = (int)PrivateScopeId;\r\n            for (int i = 0; i < NumberOfLabels; i += 2)\r\n            {\r\n                hashCode ^= _numbers[i] << 16 | _numbers[i + 1];\r\n            }\r\n\r\n            _hashCode = hashCode;\r\n        }\r\n\r\n        return _hashCode;\r\n    }\r\n    else\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nI might be missing something obvious, but if not, I would love to remove these unnecessary allocations."},{"Id":"6681510080","Type":"IssuesEvent","CreatedAt":"2017-10-06T04:32:23","Actor":"tintoy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24228","RelatedDescription":"Closed issue \"AnonymousPipeClientStream.ReadAsync does not seem to support cancellation\" (#24228) at dotnet/corefx","RelatedBody":"Hi.\r\n\r\nAfter some experimentation, it seems to me that unlike `NamedPipeClientStream`, `AnonymousPipeClientStream` (or `AnonymousPipeServerStream` for that matter) does not support cancellation (because there's no way to open the pipe in async mode and so `Stream.ReadAsync` is used instead of `PipeStream.ReadAsyncCore`). This is a little painful because it means there's no way to \"unblock\"  a pending read or write on that stream when the stream contains no data.\r\n\r\nHere's a simple repro that shows what I'm trying to do. It works for named pipes, but not for anonymous ones:\r\n\r\n```csharp\r\nNamedPipeServerStream source = new NamedPipeServerStream(\"pipe-test\", PipeDirection.Out, 1, PipeTransmissionMode.Byte, PipeOptions.Asynchronous);\r\nNamedPipeClientStream destination = new NamedPipeClientStream(\".\", \"pipe-test\", PipeDirection.In, PipeOptions.Asynchronous);\r\nawait destination.ConnectAsync();\r\n\r\nCancellationTokenSource cancellationSource = new CancellationTokenSource();\r\n\r\nbyte[] buffer = new byte[10];\r\nTask<int> readTask = destination.ReadAsync(buffer, 0, buffer.Length, cancellationSource.Token);\r\n\r\n// Right now, readTask is blocked waiting for data.\r\nTask timeout = Task.Delay(TimeSpan.FromSeconds(1));\r\nTask winner = await Task.WhenAny(readTask, timeout);\r\nAssert.Equal(timeout, winner);\r\n\r\ncancellationSource.Cancel();\r\n\r\n// readTask will now fault with TaskCanceledException\r\ntimeout = Task.Delay(TimeSpan.FromSeconds(5));\r\nwinner = await Task.WhenAny(readTask, timeout);\r\nAssert.Equal(readTask, winner);\r\n\r\n// Prove that it was canceled via the correct CancellationToken\r\nTaskCanceledException cancelled = await Assert.ThrowsAsync<TaskCanceledException>(() => readTask);\r\nAssert.Equal(cancellationSource.Token, cancelled.CancellationToken);\r\n```\r\n\r\nIs this by design, or simply something nobody has gotten around to, yet? Because it looks like it should be possible to implement by constructing the base `PipeStream` with `isAsync: true` to use the [correct code-path](https://github.com/dotnet/corefx/blob/1f434a9665d666542497250a0b4e211ce20b40df/src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs#L164-L175)."},{"Id":"6681442487","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:56:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24471","RelatedDescription":"Opened pull request \" Expose/test CancellationTokenRegistration.Token\" (#24471) at dotnet/corefx","RelatedBody":"Expose/test the new CancellationTokenRegistration.Token property.\r\n\r\nThen also use it in System.IO.Pipes to reduce the size of the object allocated for each async read/write by a reference field.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/23828\r\ncc: @pjanotti, @JeremyKuhne, @tarekgh, @kouvel "},{"Id":"6681405005","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:36:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24470","RelatedDescription":"Opened pull request \"Expose/test DateTime{Offset}'s Span-based {Try}Parse{Exact} and TryFormat methods\" (#24470) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/14352\r\nFixes https://github.com/dotnet/corefx/issues/22358\r\ncc: @tarekgh, @AlexGhiondea, @joperezr "},{"Id":"6681386863","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:27:04","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24469","RelatedDescription":"Opened pull request \"Port missing System.Net.Http NETFX fixes\" (#24469) at dotnet/corefx","RelatedBody":"Issue #23702 showed some Http test failures on NETFX. This was because\r\nPRs, #21325 and #21373 are missing from the release/2.0.0 branch.\r\n\r\nThese fixes are needed for the OOB System.Net.Http.dll that is being\r\nbuilt for the NETStandard Support Package.  This package is used when\r\nNETStandard is targeted and the platform is NETFX but less than .NET\r\n4.7.1."},{"Id":"6681350102","Type":"IssuesEvent","CreatedAt":"2017-10-06T03:08:00","Actor":"SimonCropp","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24468","RelatedDescription":"Opened issue \"ETA for a stable  System.ServiceProcess.ServiceController v4.5 package. \" (#24468) at dotnet/corefx","RelatedBody":"### Context\r\n\r\nThe `ServiceBase` functionality is provided by the [System.ServiceProcess.ServiceController](https://www.nuget.org/packages/System.ServiceProcess.ServiceController/) package. However the current stable version does not provide enough functionality so an [unstable version](https://dotnet.myget.org/feed/dotnet-core/package/nuget/System.ServiceProcess.ServiceController) needs to be used. The current unstable can be resolved from https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\n\r\n### Question\r\n\r\nWhat is the expected ETA of stable  System.ServiceProcess.ServiceController v4.5 package?\r\n\r\nIs there anything i can do to help progress this?\r\n\r\n"},{"Id":"6681340410","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:02:50","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24467","RelatedDescription":"Opened pull request \"initial Freebsd support. \" (#24467) at dotnet/corefx","RelatedBody":"This also add System.Diagnostic.Process so test can run.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6681098857","Type":"IssuesEvent","CreatedAt":"2017-10-06T01:02:11","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22566","RelatedDescription":"Opened issue \"Spurious squiggle sometimes stays in the editor after error is fixed\" (#22566) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n15.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nStarting with 15.3 I'm noticing that sometimes in a C# file when I quickly fix an error, a squiggle with the error stays in the editor. Then it keeps tracking with buffer changes and there's no way to remove it. There are no errors in the error list and it compiles fine. Hovering over the squiggle shows the error that used to be there.\r\n\r\nI don't remember this before 15.3 or maybe 15.2 so it's a regression.\r\n\r\nI'm not sure if it's the Editor or Roslyn. Unfortunately I don't have repro steps (fix errors fast?), but I'm filing this issue mainly for visibility and awareness. Hopefully as others run into this we can brainstorm and narrow it down eventually.\r\n\r\n@heejaechang "},{"Id":"6680968822","Type":"IssuesEvent","CreatedAt":"2017-10-06T00:02:47","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22091","RelatedDescription":"Closed issue \"First touch: VisualStudioSetup.Next VS instance fails to create new Console App\" (#22091) at dotnet/roslyn","RelatedBody":"Expect first touch experience to be sync, build, launch `VisualStudioSetup.Next`, create new `Console App (.NET Core)`. Actually, failed to create console app with the following exception:\r\n\r\n>Request locate failed with message: Cannot find service module info file '*/remoteHostService.servicehub.service.json' in 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\common7\\ServiceHub\\Services', using discovery services failed: \r\n\r\n>VsixServiceDiscovery: More than one service 'remoteHostService' found at: 'C:\\USERS\\KINGC\\APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\15.0_DA80E4B2ROSLYNDEV\\EXTENSIONS\\MICROSOFT\\ROSLYN LANGUAGE SERVICES FOR VISUAL STUDIO 15\\42.42.42.42424\\remoteHostService.servicehub.service.json'; \r\n\r\n>'C:\\USERS\\KINGC\\APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\15.0_DA80E4B2ROSLYNDEV\\EXTENSIONS\\MICROSOFT\\ROSLYN LANGUAGE SERVICES\\42.42.42.42424\\remoteHostService.servicehub.service.json'\r\n\r\nWill try to reproduce starting from a bare Windows 10 install if no one can just tell me where I've gone wrong. \r\n\r\n[Dump](https://microsoft-my.sharepoint.com/:u:/p/chrkin/EQH_S9G0VwNIg8tgO0oYZgUBYW4RBRuEoK2MOs_nwCQdDw)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6681528403","Type":"PullRequestEvent","CreatedAt":"2017-10-06T04:42:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4682","RelatedDescription":"Opened pull request \"Use Tls12 to download CoreCLR tests\" (#4682) at dotnet/corert","RelatedBody":"Tls10 that Powershell uses by default is prohibited on some machines"},{"Id":"6681394526","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:31:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4681","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4681) at dotnet/corert","RelatedBody":""},{"Id":"6681394183","Type":"PullRequestEvent","CreatedAt":"2017-10-06T03:30:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4681","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4681) at dotnet/corert","RelatedBody":""},{"Id":"6680593003","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:55:48","Actor":"kouvel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4294","RelatedDescription":"Closed pull request \"Fix FirstLevelSpinWaiter's proc count-based spin limiting\" (#4294) at dotnet/corert","RelatedBody":"I had intended for this limit to apply per process and not per instance, as the purpose of this limit is to limit the total number of spinners. Also made it a static class since it doesn't have any fields anymore."},{"Id":"6680526590","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:38:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4679","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4679) at dotnet/corert","RelatedBody":""},{"Id":"6680358209","Type":"PullRequestEvent","CreatedAt":"2017-10-05T20:57:05","Actor":"pentp","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4680","RelatedDescription":"Opened pull request \"Revert \"Revert \"Improved System.Decimal performance\"\"\" (#4680) at dotnet/corert","RelatedBody":"Reverts dotnet/corert#4651"},{"Id":"6680253601","Type":"PullRequestEvent","CreatedAt":"2017-10-05T20:34:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4678","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4678) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6680133342","Type":"PullRequestEvent","CreatedAt":"2017-10-05T20:06:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4679","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4679) at dotnet/corert","RelatedBody":""},{"Id":"6679879786","Type":"PullRequestEvent","CreatedAt":"2017-10-05T19:08:25","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4678","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4678) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6679711972","Type":"PullRequestEvent","CreatedAt":"2017-10-05T18:31:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4677","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4677) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6679709810","Type":"PullRequestEvent","CreatedAt":"2017-10-05T18:30:48","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4677","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4677) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6679581179","Type":"IssuesEvent","CreatedAt":"2017-10-05T18:02:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4676","RelatedDescription":"Opened issue \"Simple/Threading test is crashing intermittently on Linux/OSX Release\" (#4676) at dotnet/corert","RelatedBody":"Repro:\r\n1. Build release on Linux or OSX\r\n2. Run Simple/Threading test in a loop\r\n\r\nResult: Intermittent crash with this callstack:\r\n```\r\n  * frame #0: 0x000000010003c450 Threading`WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int) + 16\r\n    frame #1: 0x000000010000dd44 Threading`EnumGcRefsCallback(void*, void**, unsigned int) + 36\r\n    frame #2: 0x000000010009c2ae Threading`GcInfoDecoder::EnumerateLiveSlots(REGDISPLAY*, bool, unsigned int, void (*)(void*, void**, unsigned int), void*) + 5230\r\n    frame #3: 0x000000010009df78 Threading`UnixNativeCodeManager::EnumGcRefs(MethodInfo*, void*, REGDISPLAY*, GCEnumContext*) + 136\r\n    frame #4: 0x000000010000dd0d Threading`RedhawkGCInterface::EnumGcRefs(ICodeManager*, MethodInfo*, void*, REGDISPLAY*, void*, void*) + 45\r\n    frame #5: 0x000000010001bede Threading`Thread::GcScanRootsWorker(void*, void*, StackFrameIterator&) + 350\r\n    frame #6: 0x000000010001bd65 Threading`Thread::GcScanRoots(void*, void*) + 85\r\n    frame #7: 0x000000010000eaf9 Threading`GCToEEInterface::GcScanRoots(void (*)(Object**, ScanContext*, unsigned int), int, int, ScanContext*) + 313\r\n    frame #8: 0x0000000100030f74 Threading`WKS::gc_heap::mark_phase(int, unsigned int) + 420\r\n    frame #9: 0x000000010002e850 Threading`WKS::gc_heap::gc1() + 448\r\n```"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2017-10-06T05:31:46.738465Z","RunDurationInMilliseconds":43239}