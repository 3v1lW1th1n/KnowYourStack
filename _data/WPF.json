{"Data":{"GitHub":{"Issues":[{"Id":"390216875","IsPullRequest":true,"CreatedAt":"2018-12-12T13:14:22","Actor":"dotnet-maestro[bot]","Number":"163","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/163","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#163)"},{"Id":"390122077","IsPullRequest":false,"CreatedAt":"2018-12-12T08:50:38","Actor":"hez2010","Number":"162","RawContent":null,"Title":"Add F# support for WPF","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nCurrent there's no official F# support for WPF.\r\nxaml files were compiled to *.g.cs which can not be compiled with F# code together.\r\n\r\nPlease bring F# support to WPF, thanks!","Url":"https://github.com/dotnet/wpf/issues/162","RelatedDescription":"Open issue \"Add F# support for WPF\" (#162)"},{"Id":"390087434","IsPullRequest":false,"CreatedAt":"2018-12-12T06:48:33","Actor":"trodent83","Number":"161","RawContent":null,"Title":"DataTemplateSelector retriggering","State":"open","Body":"Currently there is no way to start the template selection process of DataTemplateSelector without removing it from the Control and reapplying it.\r\n\r\nIn some cases (if we have complex template selection mechanism) the simple Property Based template selection of the DataTemplate doesn't quite cut it, and because there is no retriggering of the datatemplate selection in the datatemplateselector it is not really usable it it's current form.","Url":"https://github.com/dotnet/wpf/issues/161","RelatedDescription":"Open issue \"DataTemplateSelector retriggering\" (#161)"},{"Id":"390084703","IsPullRequest":false,"CreatedAt":"2018-12-12T06:36:35","Actor":"Genteure","Number":"160","RawContent":null,"Title":"Improve I18N support","State":"open","Body":"- The [Globalization and Localization Guide](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/globalization-and-localization) is too confusing. After reading mutiple times, I still don't understand what exactly should I do.\r\n- The link to the tool \"LocBaml\" was dead. `archive.msdn.microsoft.com` doesn't even point to a IP address.\r\n- As stated on [this page](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-localize-an-application): _The LocBaml tool is not a production-ready application._ We should have a production-ready localization solution ready to use, you can't expect everyone make their own tools.\r\n\r\nIf I misunderstood something please point me to the right direction, thank you.","Url":"https://github.com/dotnet/wpf/issues/160","RelatedDescription":"Open issue \"Improve I18N support\" (#160)"},{"Id":"390084341","IsPullRequest":false,"CreatedAt":"2018-12-12T06:35:12","Actor":"trodent83","Number":"159","RawContent":null,"Title":"Better collection syncronization","State":"open","Body":"It would help quite alot if there would be the possibility to automatically use the Collection syncronization in the standard bindings, because the currently provided EnableCollectionSynchronization method on the BindingOperations class is quite suboptimal.\r\n\r\nIt makes not much sense that the binding handles internal the UI syncronization for normal object, but for Collections the Collection changes are not handled.\r\n\r\nMy suggessions would be to either:\r\n1. Use an extra property in the bindings which would then make the Syncroot of the Collections as lock object.\r\n2. Create a special \"Multibinding\" where the syncroot object could be set through a secondary binding.\r\n\r\nI personally would prefer the second solution (may be mixed with the first), because it would help a lot during development process of multi threaded applications.","Url":"https://github.com/dotnet/wpf/issues/159","RelatedDescription":"Open issue \"Better collection syncronization\" (#159)"},{"Id":"390081072","IsPullRequest":false,"CreatedAt":"2018-12-12T06:20:25","Actor":"trodent83","Number":"158","RawContent":null,"Title":"Default converter for Multibinding","State":"open","Body":"Currently there is no Default converter for the multibinding, make it nessasary to create one every time.\r\nThis is often quite repetative.","Url":"https://github.com/dotnet/wpf/issues/158","RelatedDescription":"Open issue \"Default converter for Multibinding\" (#158)"},{"Id":"390080662","IsPullRequest":false,"CreatedAt":"2018-12-12T06:18:37","Actor":"trodent83","Number":"157","RawContent":null,"Title":"Collapsable Grid Columns and Rows","State":"open","Body":"Hi,\r\n\r\nCurrently there is no way to set the visibility of a hole column or a row. (or atleast not without a Workaround)\r\n\r\nThis would be more then desirable.","Url":"https://github.com/dotnet/wpf/issues/157","RelatedDescription":"Open issue \"Collapsable Grid Columns and Rows\" (#157)"},{"Id":"389950526","IsPullRequest":false,"CreatedAt":"2018-12-11T20:57:39","Actor":"ccifra","Number":"156","RawContent":null,"Title":"x:Reference does not seem to be supported","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: 10.0.18298\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nWe are using x:Reference in some of the XAML that we are trying to port from .NET Framework WPF to .NET Core WPF and when building under .NET Core we a build error:\r\n\r\n```\r\nerror MC3074: The tag 'Reference' does not exist in XML namespace  'http://schemas.microsoft.com/winfx/2006/xaml'.\r\n ```\r\nWe are using X:Reference to set a converter parameter from a ControlTemplate like this:\r\n\r\n``` XML\r\nValue=\"{Binding SelectedColor, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RedToColorConverter}, ConverterParameter={x:Reference PART_HexInput}}\"\r\n```\r\n\r\n **Expected behavior:**\r\n x:Reference should be a supported construct\r\n\r\n **Minimal repro:**\r\nI can create one if needed \r\n","Url":"https://github.com/dotnet/wpf/issues/156","RelatedDescription":"Open issue \"x:Reference does not seem to be supported\" (#156)"},{"Id":"389928881","IsPullRequest":false,"CreatedAt":"2018-12-11T20:16:35","Actor":"elite-works","Number":"155","RawContent":null,"Title":" XAML Behaviors SDK","State":"closed","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10 version 1809 build 17134.441\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Don't Know\r\n\r\n **Problem description:**\r\nThe XAML behaviors is not supported/implemented in .NET Core 3.0.100-preview-009812, either by reference to \"Microsoft.Expression.Interactions\" and \"System.Windows.Interactivity\"\r\n<pre>\r\nxmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\r\nxmlns:ie=\"http://schemas.microsoft.com/expression/2010/interactions\"\r\n</pre>\r\nOr by \"Microsoft.Xaml.Behaviors.Wpf\" NuGet package (v1.0.1), and referencing \"Microsoft.Xaml.Behaviors\"\r\n<pre>\r\nxmlns:i=\"http://schemas.microsoft.com/xaml/behaviors\"\r\n</pre>\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n Using the first method results in the below error:\r\n<code>\r\n___error MC3074:___ The tag 'LaunchUriOrFileAction' does not exist in XML namespace 'http://schemas.microsoft.com/expression/2010/interactivity'.\r\n</code>\r\n\r\nAnd the second method result is:\r\n<code>\r\n___warning NU1701:___ Package 'Microsoft.Xaml.Behaviors.Wpf 1.0.1' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETCoreApp,Version=v3.0'. This package may not be fully compatible with your project.\r\n</code>\r\n\r\n **Expected behavior:**\r\n Ability to use XAML behaviors, like the simple one below:\r\n\r\n```xml\r\n        <Button Content=\"Click Me!\" >\r\n            <i:Interaction.Triggers>\r\n                <i:EventTrigger EventName=\"Click\">\r\n                    <i:LaunchUriOrFileAction Path=\"https://github.com/dotnet/wpf/\" />\r\n                </i:EventTrigger>\r\n            </i:Interaction.Triggers>\r\n        </Button>\r\n```\r\n\r\n\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/155","RelatedDescription":"Closed issue \" XAML Behaviors SDK\" (#155)"},{"Id":"389875776","IsPullRequest":false,"CreatedAt":"2018-12-11T18:32:51","Actor":"livarcocc","Number":"154","RawContent":null,"Title":"CS0118 if folder name ends with \"Application\"","State":"closed","Body":"@taori commented on [Sat Dec 08 2018](https://github.com/dotnet/cli/issues/10454)\n\n## Steps to reproduce\r\n- create folder like Company.Desktop.Application\r\n- enter folder\r\n- dotnet new wpf\r\n- dotnet run\r\n\r\n## Expected  behavior\r\nApplication runs\r\n\r\n## Actual behavior\r\nApplication can't compile because of CS0118\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ndotnet --info\r\n\r\nMicrosoft Windows [Version 6.3.9600]\r\n(c) 2013 Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n---\n\n@livarcocc commented on [Sun Dec 09 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445560538)\n\ncc @jaredpar \n\n---\n\n@jaredpar commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445908513)\n\n@taori can you post the error message please + the source for the main file? \r\n\r\nGuessing what is happening here is the namespace being generated here is `Company.Desktop.Application` and the code spit attempts to use a type named `Application` from the framework in the code spit. Essentially:\r\n\r\n``` csharp\r\nvar x = new Application();\r\n```\r\n\r\nThat would result in that particular error.\r\n\r\nIf I'm right that's really an issue for templates to solve. The compiler is behaving properly. But I think we'll either be faced with a choice of:\r\n\r\n1. Keep the templates simple and with standard C# code spit\r\n1. Make the templates resilient to issues like this by doing using aliases and lots of `::global` qualifiers. \r\n\r\n\n\n---\n\n@taori commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445940191)\n\n@jaredpar \r\n\r\n##generated app.xaml.cs\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Configuration;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\n\r\nnamespace test.Application\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for App.xaml\r\n    /// </summary>\r\n    public partial class App : Application\r\n    {\r\n    }\r\n}\r\n\r\n```\r\n\r\n`::global` seems like a great idea to solve it. \n\n---\n\n@jaredpar commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445985641)\n\n@taori thanks for providing the source there. \r\n\r\n> ::global seems like a great idea to solve it.\r\n\r\nThat will be up to the template owners to decide. I'm not sure what repository they live in (@livarcocc ?). \r\n\r\nMy 2 cents: there will always be a way to break templates. There needs to be a balance between robustness and simplicity. My gut is to vote against anything that has `::global` in it on the basis it's probably a tad too far on the robust side of templates. \n\n---\n\n@taori commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-446023200)\n\n> \r\n> \r\n> @taori thanks for providing the source there.\r\n> \r\n> > ::global seems like a great idea to solve it.\r\n> \r\n> That will be up to the template owners to decide. I'm not sure what repository they live in (@livarcocc ?).\r\n> \r\n> My 2 cents: there will always be a way to break templates. There needs to be a balance between robustness and simplicity. My gut is to vote against anything that has `::global` in it on the basis it's probably a tad too far on the robust side of templates.\r\n\r\nYeah. That level of robustness is overkill indeed. I am sure anyone would figure out how to fix it, since the diagnostic points it out just fine. Just thought it might be interesting if this is a case which can happen but was overlooked until now.\n\n---\n\n@livarcocc commented on [Tue Dec 11 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-446291414)\n\nMoving this issue to the wpf repo. They can decide to change the template there. Though, I also vote for simplicity here.\n\n","Url":"https://github.com/dotnet/wpf/issues/154","RelatedDescription":"Closed issue \"CS0118 if folder name ends with \"Application\"\" (#154)"},{"Id":"389754587","IsPullRequest":true,"CreatedAt":"2018-12-11T13:09:04","Actor":"dotnet-maestro[bot]","Number":"153","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/153","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#153)"},{"Id":"389659693","IsPullRequest":false,"CreatedAt":"2018-12-11T09:07:33","Actor":"pavelovcharov","Number":"152","RawContent":null,"Title":"WPF and Win32 interop: 'Airspace' issue","State":"open","Body":"If you've ever had to host any WinForms forms inside a WPF project, you might know about the 'Airspace' problem. Basically, the WinForms control must always be on top. It would be great if you consider to solve the 'Airspace' issue\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/wpf-and-win32-interoperation\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/technology-regions-overview","Url":"https://github.com/dotnet/wpf/issues/152","RelatedDescription":"Open issue \"WPF and Win32 interop: 'Airspace' issue\" (#152)"},{"Id":"389613803","IsPullRequest":false,"CreatedAt":"2018-12-11T06:24:35","Actor":"trodent83","Number":"151","RawContent":null,"Title":"Params support for custom markups","State":"open","Body":"If we create a custom Markup currently it is not possible to create a params Array as input parameter, this is sometimes quite troublesome.","Url":"https://github.com/dotnet/wpf/issues/151","RelatedDescription":"Open issue \"Params support for custom markups\" (#151)"},{"Id":"389612479","IsPullRequest":false,"CreatedAt":"2018-12-11T06:18:32","Actor":"trodent83","Number":"150","RawContent":null,"Title":"DockPanel LastChildFill doesn't consider visibility of control","State":"open","Body":"The dockpanel doesn't checks if the last Control in it's list is Visible, Hiden, or Collapsed, and always reserves the remaining place for it.\r\nThis if the Control is collapsed doesn't really make sence.\r\n\r\nIt would be good if the place calculation of the panel would also consider the visibility property of the Control.\r\n","Url":"https://github.com/dotnet/wpf/issues/150","RelatedDescription":"Open issue \"DockPanel LastChildFill doesn't consider visibility of control\" (#150)"},{"Id":"389610095","IsPullRequest":false,"CreatedAt":"2018-12-11T06:07:15","Actor":"trodent83","Number":"149","RawContent":null,"Title":"Correcting the readonly dependency property bug","State":"open","Body":"Now that the WPF will be open source it would be nice if the bug that readonly dependency properties cannot binded with OneWayToSource binding would be corrected. \r\nAs this is quite bothering somethime.","Url":"https://github.com/dotnet/wpf/issues/149","RelatedDescription":"Open issue \"Correcting the readonly dependency property bug\" (#149)"},{"Id":"389500205","IsPullRequest":false,"CreatedAt":"2018-12-10T21:46:04","Actor":"bitbonk","Number":"148","RawContent":null,"Title":"make behaviors usable in styles","State":"open","Body":"In the past there has been a lot of confusion and frustration about the fact that behaviors cannot be used in styles. \n\nNow that WPF is open source, I‘d like to suggest that we get rid of this odd limitation.\n\nBeing able to use behaviors in styles would be very helpful.","Url":"https://github.com/dotnet/wpf/issues/148","RelatedDescription":"Open issue \"make behaviors usable in styles\" (#148)"},{"Id":"389465276","IsPullRequest":true,"CreatedAt":"2018-12-10T20:36:33","Actor":"rladuca","Number":"147","RawContent":null,"Title":"Updating roadmap","State":"closed","Body":"Adding components that have not yet been published in their priority order.","Url":"https://github.com/dotnet/wpf/pull/147","RelatedDescription":"Closed or merged PR \"Updating roadmap\" (#147)"},{"Id":"389407384","IsPullRequest":false,"CreatedAt":"2018-12-10T17:28:26","Actor":"livarcocc","Number":"145","RawContent":null,"Title":"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1","State":"open","Body":"@taori commented on [Sun Dec 09 2018](https://github.com/dotnet/cli/issues/10457)\n\nI was able to create a control lib using dotnet new classlib, however this project lacks some attributes for wpf to bind to it properly. + at this stage it seems the targetframework has to be locked to .net461+ in order to reference PresentationCore and other relevant assemblies.\r\n\r\nIdeally that option should exist before netcore 3 is RTM\n\n","Url":"https://github.com/dotnet/wpf/issues/145","RelatedDescription":"Open issue \"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1\" (#145)"},{"Id":"389401748","IsPullRequest":false,"CreatedAt":"2018-12-10T17:14:57","Actor":"elad8a","Number":"144","RawContent":null,"Title":"Add the ability to render a XAML tree to a direct3d texture (offscreen rendering)","State":"open","Body":"Currently WPF offers the ability to render a xaml tree to a bitmap via RenderTargetBitmap.\r\nYet this API forces the client to do a copy of the render target to system memory (and back). \r\nIt would be much better if it would be possible to gain access the Direct3D9 render target.\r\n\r\nThere could be various applications to this feature. 3D game overlays, Heads up displays etc.\r\n\r\nHere are several discussions on this issue:\r\nhttps://stackoverflow.com/questions/10376016/rendering-from-wpfs-internals-to-a-directx-application\r\n[https://stackoverflow.com/questions/18881683/how-to-display-wpf-overlay-on-top-of-directx?noredirect=1&lq=1](url)\r\n[https://stackoverflow.com/questions/52918039/is-it-technically-possible-to-render-a-wpf-xaml-element-to-a-direct3d-texture](url)\r\n\r\n  ","Url":"https://github.com/dotnet/wpf/issues/144","RelatedDescription":"Open issue \"Add the ability to render a XAML tree to a direct3d texture (offscreen rendering)\" (#144)"},{"Id":"389432193","IsPullRequest":false,"CreatedAt":"2018-12-10T15:58:23","Actor":"ccifra","Number":"146","RawContent":null,"Title":"FileFormatException is in WindowsBase and System.IO.Packaging","State":"open","Body":"# FileFormatException is in WindowsBase and System.IO.Packaging\r\n\r\nI am working on porting a WPF application to .NET Core.  The projects reference the Microsoft.Windows.Compatibility nuget to bring in types that I need.  I am running into issues with FileFormatException.  When I use it I get a build error that FileFormatException is defined in WindowsBase and System.IO.Packaging.\r\n\r\n# General\r\n\r\nI am seeing this issue with .NET Core 3 preview 1 and Microsoft.Windows.Compatibility nuget version 2.1.0-preview.18571.3.  I could probably solve this with an Alias but that seems ugly and I don't even know how to alias an assembly that comes from a nuget.\r\n\r\nYou can see here where it is defined in more than 1 assembly:\r\nhttps://apisof.net/catalog/System.IO.FileFormatException\r\n\r\nYou can also reproduce the issue by creating a default WPF .NET Core app, reference Microsoft.Windows.Compatibility and try to use a FileFormatException.\r\n","Url":"https://github.com/dotnet/wpf/issues/146","RelatedDescription":"Open issue \"FileFormatException is in WindowsBase and System.IO.Packaging\" (#146)"},{"Id":"389222651","IsPullRequest":false,"CreatedAt":"2018-12-10T15:11:23","Actor":"FSharpCSharp","Number":"142","RawContent":null,"Title":"Library \"PresentationFramework\" and its dependencies","State":"closed","Body":"So first of all great praise to the whole team of Microsoft that now WPF is developed further under Open Source. This is a big milestone in the history of the .NET framework. \r\n\r\nI have already read all blogs and ReadMes, but unfortunately my question was not answered.\r\n\r\nIs Microsoft also planning to publish all controls and their dependencies under Open Source, or does WPF only refer to the actual technology? WinForms also provided all the controls, so far there is only System.Xaml, the origin of WPF.\r\n\r\nI know it's a very stupid question, but I'd be happy to get back to you if and when that will happen.\r\n\r\nThanks a lot!","Url":"https://github.com/dotnet/wpf/issues/142","RelatedDescription":"Closed issue \"Library \"PresentationFramework\" and its dependencies\" (#142)"},{"Id":"389227823","IsPullRequest":false,"CreatedAt":"2018-12-10T10:11:44","Actor":"shadowaltar","Number":"143","RawContent":null,"Title":"Source of Ribbon API?","State":"open","Body":"Current Ribbon API's SplitMenuItem is buggy (https://social.msdn.microsoft.com/Forums/vstudio/en-US/da13b5f5-5252-4332-9ec3-0b78c6395693/ribbonapplicationsplitmenuitem-triggers-command-twice?forum=wpf)\r\nWill this API be open-sourced too so that the community could fix it instead of downloading the source file and manually override the generic xaml file?\r\nThanks.","Url":"https://github.com/dotnet/wpf/issues/143","RelatedDescription":"Open issue \"Source of Ribbon API?\" (#143)"},{"Id":"389216940","IsPullRequest":true,"CreatedAt":"2018-12-10T09:45:03","Actor":"hughbe","Number":"141","RawContent":null,"Title":"Remove dead checks from TypeConverterHelper","State":"open","Body":"- `GetCoreConverterFromCoreType` is only called from `GetTypeConverter` which is only called from `ValueSerializer.GetSerializerFor`:\r\n\r\n```cs\r\npublic static ValueSerializer GetSerializerFor(Type type)\r\n{\r\n    if (type == null)\r\n        throw new ArgumentNullException(\"type\");\r\n    object value = _valueSerializers[type];\r\n    if (value != null)\r\n        // This uses _valueSerializersLock's instance as a sentinal for null  (as opposed to not attempted yet).\r\n        return value == _valueSerializersLock ? null : value as ValueSerializer;\r\n\r\n    AttributeCollection attributes = TypeDescriptor.GetAttributes(type);\r\n    ValueSerializerAttribute attribute = attributes[typeof(ValueSerializerAttribute)] as ValueSerializerAttribute;\r\n    ValueSerializer result = null;\r\n\r\n    if (attribute != null)\r\n        result = (ValueSerializer)Activator.CreateInstance(attribute.ValueSerializerType);\r\n\r\n    if (result == null)\r\n    {\r\n        if (type == typeof(string))\r\n        {\r\n            result = new StringValueSerializer();\r\n        }\r\n        else\r\n        {\r\n            // Try to use the type converter\r\n            TypeConverter converter = TypeConverterHelper.GetTypeConverter(type);\r\n\r\n            // DateTime is a special-case.  We can't use the DateTimeConverter, because it doesn't\r\n            // support anything other than user culture and invariant culture, and we need to specify\r\n            // en-us culture.\r\n            if (converter.GetType() == typeof(DateTimeConverter2))\r\n            {\r\n                result = new DateTimeValueSerializer();\r\n            }\r\n            else if (converter.CanConvertTo(typeof(string)) && converter.CanConvertFrom(typeof(string)) &&\r\n                        !(converter is ReferenceConverter))\r\n            {\r\n                result = new TypeConverterValueSerializer(converter);\r\n            }\r\n        }\r\n    }\r\n    lock (_valueSerializersLock)\r\n    {\r\n        // This uses _valueSerializersLock's instance as a sentinal for null (as opposed to not attempted yet).\r\n        _valueSerializers[type] = result == null ? _valueSerializersLock : result;\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n\r\nThis means that the check for if `type` is null and if `type` is string is redundant as these cases are covered already.\r\n\r\n- Secondly, `GetCoreConverterFromCustomType` is called from `GetTypeConverter`:\r\n```cs\r\ninternal static TypeConverter GetTypeConverter(Type type)\r\n{\r\n    Debug.Assert(type != null, \"Null passed for type to GetTypeConverter\");\r\n\r\n    TypeConverter typeConverter = GetCoreConverterFromCoreType(type);\r\n\r\n    if (typeConverter == null)\r\n    {\r\n        Type converterType = GetConverterType(type);\r\n        if (converterType != null)\r\n        {\r\n            typeConverter = Activator.CreateInstance(converterType,\r\n                                                        BindingFlags.Instance | BindingFlags.CreateInstance | BindingFlags.Public,\r\n                                                        null,\r\n                                                        null,\r\n                                                        InvariantEnglishUS) as TypeConverter;\r\n        }\r\n        else\r\n        {\r\n            typeConverter = GetCoreConverterFromCustomType(type);\r\n        }\r\n\r\n        if (typeConverter == null)\r\n        {\r\n            typeConverter = new TypeConverter();\r\n        }\r\n    }\r\n\r\n    return typeConverter;\r\n}\r\n```\r\n\r\n`GetCoreConverterFromCustomType` is called after `GetCoreConverterFromCoreType`, so all these checks for if the type is assignable from a struct are dead (because firstly only the struct type itself is assignable from itself, and secondly because these cases are already covered in `GetCoreConverterFromCoreType` so we bail out early","Url":"https://github.com/dotnet/wpf/pull/141","RelatedDescription":"Open PR \"Remove dead checks from TypeConverterHelper\" (#141)"},{"Id":"389125068","IsPullRequest":false,"CreatedAt":"2018-12-10T03:48:58","Actor":"hughbe","Number":"140","RawContent":null,"Title":"What is PBTCOMPILER? Is it redundant?","State":"open","Body":"There are a lot of ifdefs for `PBTCOMPILER` in the codebase. Are these redundant? What does this check for?","Url":"https://github.com/dotnet/wpf/issues/140","RelatedDescription":"Open issue \"What is PBTCOMPILER? Is it redundant?\" (#140)"},{"Id":"389123944","IsPullRequest":true,"CreatedAt":"2018-12-10T03:43:38","Actor":"hughbe","Number":"139","RawContent":null,"Title":" Remove dead code from ReflectionHelper","State":"open","Body":"Above, we have the code\r\n```\r\nstring[] nameFrags = typeName.Split(new char[] { ',' }, 2);\r\n```\r\n\r\nThis guarantees that `nameFrags.Length` is maximum 2/\r\n\r\nWe know that the string can not be empty and check for length one before, so therefore this check if irrelevant\r\n\r\nAlso put some minor code cleanup in there","Url":"https://github.com/dotnet/wpf/pull/139","RelatedDescription":"Open PR \" Remove dead code from ReflectionHelper\" (#139)"},{"Id":"389123016","IsPullRequest":true,"CreatedAt":"2018-12-10T03:39:15","Actor":"hughbe","Number":"138","RawContent":null,"Title":"Add Windows.Markup tests","State":"open","Body":"Bunch of tests for attributes, ValueSerializer, event args, converters etc in the System.Windows.Markup namespace\r\n\r\nAssistance required: wrote these on my mac, they pass :) but not sure how to integrate into CI\r\n\r\nPlanning on writing more for the remaining stuff soon!\r\n\r\n/cc @karelz ","Url":"https://github.com/dotnet/wpf/pull/138","RelatedDescription":"Open PR \"Add Windows.Markup tests\" (#138)"},{"Id":"389085006","IsPullRequest":false,"CreatedAt":"2018-12-10T00:27:05","Actor":"walterlv","Number":"137","RawContent":null,"Title":"Win32Exception (0x80004005): Not enough quota is available to process this command.","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: Windows 10 / 7 SP1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n \r\nWe sometimes get an `Win32Exception (0x80004005)` report from end-user' device, but we can't determine what happed at that time.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nWe sometimes get a feedback from the end-user that the app freezes at that moment when the exception is thrown.\r\n\r\n```\r\nSystem.ComponentModel.Win32Exception (0x80004005): Not enough quota is available to process this command.\r\n   at MS.Win32.UnsafeNativeMethods.PostMessage(HandleRef hwnd, WindowMessage msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowSettings(Boolean enableRenderTarget, Nullable`1 channelSet)\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowPos(IntPtr lParam)\r\n   at System.Windows.Interop.HwndTarget.HandleMessage(WindowMessage msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at MS.Internal.Threading.ExceptionFilterHelper.TryCatchWhen(Object source, Delegate method, Object args, Int32 numArgs, Delegate catchHandler)\r\n``` \r\n\r\n **Expected behavior:**\r\n \r\nThere is no such an exception.\r\n\r\n **Minimal repro:**\r\n \r\nNote that we still can't figure out all the reproduction, but I find a simple procedure to reproduce it.\r\n\r\n1. Launch a malicious app sending message to the target WPF app continuously;\r\n1. The WPF app will get the Win32Exception (0x80004005).","Url":"https://github.com/dotnet/wpf/issues/137","RelatedDescription":"Open issue \"Win32Exception (0x80004005): Not enough quota is available to process this command.\" (#137)"},{"Id":"389020876","IsPullRequest":true,"CreatedAt":"2018-12-09T13:07:59","Actor":"dotnet-maestro[bot]","Number":"136","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/136","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#136)"},{"Id":"389014123","IsPullRequest":true,"CreatedAt":"2018-12-09T11:45:34","Actor":"hughbe","Number":"135","RawContent":null,"Title":"Add OSX gitignore","State":"open","Body":"A `DS_Store` file popped up when I cloned the repo so I'm adding this gitignore to prevent unwanted files sneaking their way in","Url":"https://github.com/dotnet/wpf/pull/135","RelatedDescription":"Open PR \"Add OSX gitignore\" (#135)"},{"Id":"388970430","IsPullRequest":false,"CreatedAt":"2018-12-08T23:44:00","Actor":"wjk","Number":"134","RawContent":null,"Title":"MarkupCompilePass1 temp project looping","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10 1908, build 17763.134\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n## Problem description\r\n\r\nUnder circumstances I'm not yet able to fully pin down (outside of my proprietary project, I cannot get this bug to reproduce), the `MarkupCompilePass1` temporary projects for some bizarre reason create and invoke themselves recursively until one of the projects' paths hits the 260-character mark and the build fails. This only happens with one project in my solution, does not occur with the other two projects in the solution, and does not occur when I copy the project out of the solution into its own folder.\r\n\r\n## Actual behavior\r\n\r\nThe `*_wpftmp.csproj` files create and invoke themselves recursively, until the path name gets too long (it gets longer each iteration) and an exception is thrown.\r\n\r\n## Expected behavior\r\n\r\nIt should build!\r\n\r\n## Minimal repro\r\n\r\nCan't isolate one yet, but an MSBuild binlog is attached (zipped to get GitHub to accept it).\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/wpf/files/2660130/msbuild.binlog.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/134","RelatedDescription":"Open issue \"MarkupCompilePass1 temp project looping\" (#134)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-13T05:31:13.9754605Z","RunDurationInMilliseconds":944}