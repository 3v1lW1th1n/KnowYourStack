{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null},{"Title":"Creating a Minimal ASP.NET Core Windows Container","PublishedOn":"2017-11-09T16:18:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos One of the benefits of containers is their small size, which allows them to be more quickly deployed and more efficiently packed onto a host than virtual machines...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/09/creating-a-minimal-asp-net-core-windows-container/","RawContent":null},{"Title":"Publishing a Web App to an Azure VM from Visual Studio","PublishedOn":"2017-11-01T22:35:42+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We know virtual machines (VMs) are one of the most popular places to run apps in Azure, but publishing to a VM from Visual Studio has been a tricky experience for some. So, we’re pleased to announce...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/01/publishing-a-web-app-to-an-azure-vm-from-visual-studio/","RawContent":null},{"Title":"Recent updates for publishing","PublishedOn":"2017-10-31T18:18:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have recently added a few interesting features for ASP.NET publishing. The updates include: Container Registry Publish Updates Create publish profile without publishing In this post, we will...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/","RawContent":null},{"Title":"Sharing Configuration in ASP.NET Core SPA Scenarios","PublishedOn":"2017-10-27T15:17:34+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This is a guest post from Mike Rousos ASP.NET Core 2.0 recently released and, with it, came some new templates, including new project templates for single-page applications (SPA) served from an...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/","RawContent":null},{"Title":"User accounts made easy with Azure","PublishedOn":"2017-10-17T21:01:45+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"One of the most common requirements for web applications is for users create accounts for the purpose of access control and personalization. While ASP.NET templates have always made it easy to create...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/17/user-accounts-made-easy-with-azure/","RawContent":null},{"Title":"Announcing SignalR for ASP.NET Core Alpha 2","PublishedOn":"2017-10-09T22:46:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"A few weeks ago we released the alpha1 version of SignalR for ASP.NET Core 2.0. Today we are pleased to announce a release of the alpha2 version of SignalR for ASP.NET Core 2.0. This release contains...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/09/announcing-signalr-for-asp-net-core-alpha-2/","RawContent":null},{"Title":"Announcing SignalR (alpha) for ASP.NET Core 2.0","PublishedOn":"2017-09-14T23:41:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official preview release of a new SignalR that is compatible with ASP.NET Core. It consists of a...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T17:59:41+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6876498423","Type":"IssuesEvent","CreatedAt":"2017-11-20T01:10:59","Actor":"netsfx","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2239","RelatedDescription":"Closed issue \"Kestrel \"ignores\" listenOptions.UseHttps on asp.net Core 2.0 on Ubuntu - uses http instead - but works on Windows\" (#2239) at aspnet/Home","RelatedBody":"I want to run an asp.net core 2.0 site with Kestrel on Ubuntu with https and do:\r\n\r\n```\r\npublic static void Main(string[] args)\r\n\t\t{\r\n\t\t\tvar host = new WebHostBuilder()\r\n\t\t\t\t.UseKestrel(options =>\r\n\t\t\t\t{\r\n\t\t\t\t\toptions.ApplicationSchedulingMode = SchedulingMode.Inline;\r\n\t\t\t\t\toptions.Listen(IPAddress.Any, 80);\r\n\t\t\t\t\toptions.Listen(IPAddress.Any, 443,\r\n\t\t\t\t   listenOptions =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlistenOptions.NoDelay = true;\r\n\t\t\t\t\t\t\t\tlistenOptions.UseHttps(\"cert.pfx\", args[0]);\r\n\t\t\t\t\t\t\t\tlistenOptions.UseConnectionLogging();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Exception) { }\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\toptions.UseSystemd();\r\n\t\t\t\t})\r\n\t\t\t\t\r\n\t\t\t\t.UseContentRoot(Directory.GetCurrentDirectory())\r\n\t\t\t\t.UseStartup<Startup>()\r\n\t\t\t\t.Build();\r\n\t\t\thost.Run();\r\n\t\t}\r\n```\r\nOn Windows, that works as expected:\r\nNow listening on: http://0.0.0.0:80\r\n*Now listening on: https://0.0.0.0:443*\r\n\r\nBut the same on Ubuntu yields *http* instead of *https* on port 443:\r\nNow listening on: http://0.0.0.0:80\r\n*Now listening on: http://0.0.0.0:443*\r\n\r\nThe result is that on Ubuntu port 443 will not serve https but http, which is of course not what I want.\r\n\r\nAny ideas?\r\n"},{"Id":"6875569194","Type":"PullRequestEvent","CreatedAt":"2017-11-19T15:23:59","Actor":"suryagh","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/pull/2281","RelatedDescription":"Opened pull request \"Update doc to point to dotnet/templating\" (#2281) at aspnet/Home","RelatedBody":"The document is pointing to [aspnet/Templates](https://github.com/aspnet/Templates), which is obsolete repo. Updated to point to the [dotnet/templating](https://github.com/dotnet/templating)"},{"Id":"6872382142","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:38:06","Actor":"Petermarcu","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2280","RelatedDescription":"Opened issue \"Runtime store eula under program files by itself\" (#2280) at aspnet/Home","RelatedBody":"Was just browsing and noticed that under program files there is a eula for the runtime store\"\r\n\r\n\"C:\\Program Files\\Microsoft ASP.NET Core Runtime Package Store\\2.0\\eula.rtf\"\r\n\r\nI'm pretty sure that was intended to go with all the other files in the runtime store and not in its own place all by itself."},{"Id":"6868790381","Type":"IssuesEvent","CreatedAt":"2017-11-17T08:48:55","Actor":"ghd258","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2279","RelatedDescription":"Opened issue \"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容\" (#2279) at aspnet/Home","RelatedBody":"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容，如果不引用会自动增加 System.Net.Http.dll 4.6.25514.4这个版本，但是在NuGet就没有4.6.25514.4这个版本号；引用了System.Net.Http.dll 这个版本4.6.25220.1及 以上版本会把项目的引用Dll变为感叹号"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6876504488","Type":"IssuesEvent","CreatedAt":"2017-11-20T01:14:28","Actor":"RyanWang-Git","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1140","RelatedDescription":"Opened issue \"WebSocketTransport does not support proxy\" (#1140) at aspnet/SignalR","RelatedBody":"I am using `Microsoft.AspNetCore.SignalR.Client` to connect to SignalR Hub via `WebSocketsTransport` from .NET Core 2.0 console app and the connection is made via proxy.\r\n\r\nThe connection got through the negotiation phase `OPTIONS` successfully, however I encountered the following exception.\r\n```System.Net.WebSockets.WebSocketException (0x80004005): Unable to connect to the remote server```\r\n\r\nThe connection works fine via proxy if I choose `ServerSentEventsTransport` or `LongPollingTransport`. After looking into `WebSocketsTransport` implementation in `Microsoft.AspNetCore.Sockets.Client.Http`, I noticed that no proxy setting is actually passed in and assigned to `ClientWebSocket` to initiate the WebSocket handshaking.\r\n\r\nIs this going to be fixed in the next release?"},{"Id":"6875746703","Type":"IssuesEvent","CreatedAt":"2017-11-19T17:14:23","Actor":"tebeco","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1139","RelatedDescription":"Opened issue \"Restore fails\" (#1139) at aspnet/SignalR","RelatedBody":"@anurse \r\n\r\nFrom what i understand here :\r\n\r\nhttps://github.com/aspnet/SignalR/pull/437#issuecomment-299308997\r\n\r\n![image](https://user-images.githubusercontent.com/2266487/32993176-ac89ccba-cd54-11e7-84a3-112918d4c1b7.png)\r\n\r\n```\r\nThe \".Client\" and \".Common\" packages are for use by the client, which we want to keep netstandard1.3. They do not depend on anything in the ASP.NET Core stack (just some Extensions things).\r\n```\r\nis it still the case ?\r\n\r\n`Microsoft.AspNetCore.Sockets.Client` tries to resolve `Microsoft.Extensions.Logging.Abstractions` to v2.0.0\r\n\r\n`<PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"$(AspNetCoreVersion)\" />`\r\n\r\nSo it seems that it tried to target AspNetCoreVersion 2.0.0\r\nans here is `dependencies.props`\r\n\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <AspNetCoreIntegrationTestingVersion>0.4.0-*</AspNetCoreIntegrationTestingVersion>\r\n    <AspNetCoreVersion>2.0.0-*</AspNetCoreVersion>\r\n....\r\n```"},{"Id":"6874337289","Type":"IssuesEvent","CreatedAt":"2017-11-18T21:48:47","Actor":"ItWorksOnMyMachine","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1138","RelatedDescription":"Closed issue \"The specified LINQ expression contains references to queries that are associated with different contexts.\" (#1138) at aspnet/SignalR","RelatedBody":"I have a Hub that queries a database and then does work based on the data that comes back from the database.  I'm using an IObservable<HubMessage> stream to report status back to the client that kicked off the process.  Unfortunately I'm getting this error when executing the query: The specified LINQ expression contains references to queries that are associated with different contexts.\r\n\r\nThe query is built up using different services that all get the DbContext injected into the constructor.  It appears the Scope that SignalR is setting up for the object lifetime isn't consistent and I'm getting different DbContext objects injected into my services as they add to the query.\r\n\r\nNote: After further research, this is probably because of the way some of our services do DI.  They actually don't inject, they resolve.  The services are used by a legacy Asp.Net MVC4 web site and a new Asp.Net Core website.  The old website makes use of the Global DependencyResolver.  The .Net core site sets the DependencyResolver to use IHttpContextAccessor.HttpContext.RequestServices.  It looks like the HubEndpoint creates a new Service scope that is separate from the HttpContext's scope.  \r\n\r\nI'm not really sure how to resolve this.  Any thoughts? "},{"Id":"6874202405","Type":"IssuesEvent","CreatedAt":"2017-11-18T20:11:19","Actor":"ItWorksOnMyMachine","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1138","RelatedDescription":"Opened issue \"The specified LINQ expression contains references to queries that are associated with different contexts.\" (#1138) at aspnet/SignalR","RelatedBody":"I have  Hub that queries a database and then does work based on the data that comes back from the database.  I'm using an IObservable<HubMessage> stream to report status back to the client that kicked off the process.  Unfortunately I'm getting this error when executing the query: The specified LINQ expression contains references to queries that are associated with different contexts.\r\n\r\nThe query is built up using different services that all get the DbContext injected into the constructor.  It appears the Scope that SignalR is setting up for the object lifetime isn't consistent and I'm getting different DbContext objects injected into my services as they add to the query."},{"Id":"6873961140","Type":"IssuesEvent","CreatedAt":"2017-11-18T17:19:45","Actor":"celloudiallo","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1137","RelatedDescription":"Opened issue \"Error: Streaming methods must be invoked using HubConnection.stream\" (#1137) at aspnet/SignalR","RelatedBody":"In my Hub, I have an async function that query a cosmos db for data to be return to the client. the result is an IEnumerable of objects.\r\n\r\n`public async Task Get()`\r\n        `{`\r\n            `   var result = await _service.Get();`\r\n           `    await Clients.Client(Context.ConnectionId).InvokeAsync(\"Get\", result);`\r\n        `}`\r\n\r\nInvoking this method on the js client as follow throws the error as per the title.\r\n`connection.invoke('get');`\r\n\r\nStreaming it like the error mentioned works fine.\r\n`connection.stream(\"get\").subscribe({})`\r\n\r\nI am not writing a stream, only an async method. I would like to understand why the framework interprets it as a stream and is there an alternative way of achieving what I want without streaming the result?"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6876132155","Type":"PullRequestEvent","CreatedAt":"2017-11-19T21:19:17","Actor":"avertes","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7066","RelatedDescription":"Opened pull request \"Fixed rfc3339 formats to work with all localizations\" (#7066) at aspnet/Mvc","RelatedBody":"Changed time separator \":\" to \"\\:\" to prevent it from being substituted with a localized separtor. For example in it-IT locale, datetime-local was formatted as 2017-11-19T22.52.29.223 instead of correct format 2017-11-19T22:52:29.223"},{"Id":"6874464005","Type":"IssuesEvent","CreatedAt":"2017-11-18T23:26:03","Actor":"biqas","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7065","RelatedDescription":"Opened issue \"Razor Pages: Route parameter \"asp-route-action\"\" (#7065) at aspnet/Mvc","RelatedBody":"Not sure if it is intended or a bug.\r\n\r\nIf you have a form inside a razor page and you create a button inside the form which has the following asp route parameters \"asp-route-action\" then the page is going to the first default MapRoute definition.\r\n\r\n```html\r\n<form method=\"post\">\r\n    <button asp-route-action=\"some value\"></button>\r\n</form>\r\n```\r\n\r\n> asp-route-**action** is causing the problem.\r\n\r\n**ASP Core 2.0**"},{"Id":"6874258334","Type":"IssuesEvent","CreatedAt":"2017-11-18T20:51:39","Actor":"kshyju","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7064","RelatedDescription":"Opened issue \"Model binding fails when the posted form data has a key called \"Model\"\" (#7064) at aspnet/Mvc","RelatedBody":"When submit the form and if the form data has an item with key `Model`, Model binding is failing.\r\n\r\nFor example, let's say i have a view model like this and  I use that class as the param of my http post action method.\r\n\r\n    public class ModelBinderTestViewModel\r\n    {\r\n        public string Name { set; get; }\r\n        public string Model { set; get; }\r\n    }\r\nand if i am sending form data like this from my form\r\n`\r\nName=Shyju`\r\n\r\nModel binding works, but when i send \r\n\r\n```\r\nName:Shyju\r\nModel:Honda\r\n```\r\n\r\nModel binding does not work now.\r\n\r\n[Here ](https://github.com/kshyju/TempDataBug/blob/master/TempData/Views/ModelBinderTest/Index.cshtml)is the link to a minimal sample repo where you can see this issue . Just run the sample app and submit the form and you will see the results in the next view.\r\n\r\nIs this a know issue ? If yes, Is there some sort of documentation to advise users to not use `Model` as a property name.\r\n\r\n\r\n\r\n\r\n"},{"Id":"6874238124","Type":"IssuesEvent","CreatedAt":"2017-11-18T20:36:47","Actor":"AdnanCukur","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7063","RelatedDescription":"Opened issue \"ModelState.IsValid returning true when email is not valid\" (#7063) at aspnet/Mvc","RelatedBody":"```\r\n        [Required]\r\n        [EmailAddress]\r\n        public string Email { get; set; }\r\n```\r\n\r\nWhen I post the email \"aoao@aooa\" ModelState.IsValid returns true"},{"Id":"6873309731","Type":"IssuesEvent","CreatedAt":"2017-11-18T08:52:14","Actor":"TianVan","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7062","RelatedDescription":"Opened issue \"PasswordValidator Null Argument Exception Bug\" (#7062) at aspnet/Mvc","RelatedBody":"Even though I set the passwordRequireLength at ConfigurationService, when I call the PasswordValidator in the controller, null argument exception will throw if the password is empty.\r\n```c#\r\nprivate UserManager<AppUser> _userManager;\r\n        private IUserValidator<AppUser> _userValidator;\r\n        private IPasswordValidator<AppUser> _passwordValidator;\r\n        private IPasswordHasher<AppUser> _passwordHasher;\r\n\r\n        public AdminController(UserManager<AppUser> userManager, IUserValidator<AppUser> userValidator, IPasswordValidator<AppUser> passwordValidator, IPasswordHasher<AppUser> passwordHasher)\r\n        {\r\n            _userManager = userManager;\r\n            _userValidator = userValidator;\r\n            _passwordValidator = passwordValidator;\r\n            _passwordHasher = passwordHasher;\r\n        }\r\n```\r\n\r\n```c#\r\nIdentityResult validPassword = await _passwordValidator.ValidateAsync(_userManager, user, password);\r\n                if (!validPassword.Succeeded)\r\n                {\r\n                    AddErrorsFromResult(validPassword);\r\n                }\r\n                else\r\n                {\r\n                    user.PasswordHash = _passwordHasher.HashPassword(user, password);\r\n                }\r\n```\r\n\r\nArgumentNullException: Value cannot be null.\r\nParameter name: password\r\nMicrosoft.AspNetCore.Identity.PasswordValidator.ValidateAsync(UserManager<TUser> manager, TUser user, string password)"},{"Id":"6870818375","Type":"IssuesEvent","CreatedAt":"2017-11-17T16:22:36","Actor":"breyed","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6996","RelatedDescription":"Closed issue \"<select> with GetEnumSelectList loses state when browsing back\" (#6996) at aspnet/Mvc","RelatedBody":"Consider a page with a control like this, which lets you choose a value from a `State` enum:\r\n\r\n``` HTML\r\n<select asp-for=\"State\" asp-items=\"Html.GetEnumSelectList<State>()\"></select>\r\n```\r\n\r\n1. Set State to something besides the default choice.\r\n2. Enter text into text input controls on the same form.\r\n3. Click Submit. This causes a post to some page.\r\n4. Click the browser Back button.\r\n\r\n#### Result:\r\nNotice that the text controls all retain their previous values. Notice that the select control has its previous value - but only for a moment. It quickly gets reset to the default value.\r\n\r\n#### Desired result:\r\nThe select control retains its previous value (just like the text controls do)."},{"Id":"6870728685","Type":"IssuesEvent","CreatedAt":"2017-11-17T16:05:29","Actor":"DamianEdwards","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7061","RelatedDescription":"Closed issue \"Unit Test Razor Pages PageModel, ModelState threw NullReferenceException\" (#7061) at aspnet/Mvc","RelatedBody":"I want to write Uni test for my PageModel. Here is the method I want to test.\r\n\r\n```cs\r\npublic class CreateModel : PageModel\r\n    {\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return Page();\r\n            }\r\n            _context.Student.Add(Student);\r\n            await _context.SaveChangesAsync();\r\n            return RedirectToPage(\"./Index\");\r\n        }\r\n    }\r\n\r\n```\r\nHere is my test code\r\n\r\n```cs\r\n  [TestMethod]\r\n        public async Task OnPostAsync_ReturnPageResult()\r\n        {\r\n            //Arrange\r\n            var createModel = new CreateModel(Context);\r\n            createModel.Student = new RazorDemo.Models.Student();\r\n            createModel.ModelState.AddModelError(\"FirstName\", \"Required\");\r\n            //Act\r\n            var page = await createModel.OnPostAsync() as PageResult;\r\n            //Assert\r\n            Assert.IsNotNull(page);\r\n        }\r\n```\r\n\r\nIn MVC when I initialize a new Controller in my test method, the ModelState isn't not null, i can add ModelError like controller.ModelState.AddModelError(\"Email\", \"Required\"). It isn't possible with Razor ModelPage because ModelState threw an exception .\r\n\r\n![mock](https://user-images.githubusercontent.com/15146271/32955955-7fa0594c-cb85-11e7-80a2-ae542e5e4b72.png)\r\n\r\nWhat is the best way to avoid this exception in my unit test?"},{"Id":"6870699256","Type":"IssuesEvent","CreatedAt":"2017-11-17T15:59:59","Actor":"hinault","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7061","RelatedDescription":"Opened issue \"Unit Test Razor Pages PageModel, ModelState threw NullReferenceException\" (#7061) at aspnet/Mvc","RelatedBody":"I want to write Uni test for my PageModel. Here is the method I want to test.\r\n\r\npublic class CreateModel : PageModel\r\n    {\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return Page();\r\n            }\r\n\r\n            _context.Student.Add(Student);\r\n            await _context.SaveChangesAsync();\r\n\r\n            return RedirectToPage(\"./Index\");\r\n        }\r\n    }\r\n\r\nHere is my test code\r\n\r\n  [TestMethod]\r\n        public async Task OnPostAsync_ReturnPageResult()\r\n        {\r\n            //Arrange\r\n            var createModel = new CreateModel(Context);\r\n            createModel.Student = new RazorDemo.Models.Student();\r\n            createModel.ModelState.AddModelError(\"FirstName\", \"Required\");\r\n\r\n            //Act\r\n            var page = await createModel.OnPostAsync() as PageResult;\r\n\r\n            //Assert\r\n            Assert.IsNotNull(page);\r\n        }\r\n\r\nIn MVC when I initialize a new Controller in my test method, the ModelState isn't not null, i can add ModelError like controller.ModelState.AddModelError(\"Email\", \"Required\"). It isn't possible with Razor ModelPage because ModelState threw an exception .\r\n\r\n![mock](https://user-images.githubusercontent.com/15146271/32955955-7fa0594c-cb85-11e7-80a2-ae542e5e4b72.png)\r\n\r\nWhat is the best way to avoid this exception in my unit test?"},{"Id":"6868749180","Type":"IssuesEvent","CreatedAt":"2017-11-17T08:38:47","Actor":"ghd258","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7060","RelatedDescription":"Opened issue \"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容\" (#7060) at aspnet/Mvc","RelatedBody":"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容，如果不引用会自动增加 System.Net.Http.dll 4.6.25514.4这个版本，但是在NuGet就没有4.6.25514.4这个版本号；引用了System.Net.Http.dll 这个版本4.6.25220.1及 以上版本会把项目的引用Dll变为感叹号"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6872292610","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:11:34","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1478","RelatedDescription":"Closed issue \"ASP.NET Core 2.0 Identity Expiration\" (#1478) at aspnet/Identity","RelatedBody":"There is a cookie with the name \".AspNetCore.Identity.Application\" added after I login the user and it's expiration time is set to 14 days from now, `2017-11-05T15:52:03.669Z`\r\n\r\n````\r\n services.AddIdentity<ApplicationUser, ApplicationRole>()\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddUserManager<ApplicationUserManager>()\r\n                .AddSignInManager<ApplicationSignInManagerr>()\r\n                .AddDefaultTokenProviders();\r\n\r\n\r\nservices.AddMvc(opts =>\r\n            {\r\n                opts.Filters.AddService(typeof(AjaxAntiforgeryCookieResultFilter));\r\n            })\r\n services\r\n                .AddAuthentication()\r\n                .AddJwtBearer(options =>\r\n                {\r\n                    options.RequireHttpsMetadata = false;\r\n                    options.SaveToken = true;\r\n                    options.TokenValidationParameters = tokenValidationParameters;\r\n                    options.Events = jwtBearerEvents;\r\n                });\r\n\r\n            services.ConfigureApplicationCookie(options =>\r\n            {\r\n                options.AccessDeniedPath = new PathString(\"/login\");\r\n                options.LoginPath = new PathString(\"/login\");\r\n                options.Cookie.Expiration = TimeSpan.FromMinutes(1);\r\n            });\r\n\r\n            services.AddAuthorization();\r\n\r\n````\r\n\r\nAbove is the related part of the code for brevity.\r\n\r\nHow do I ensure that after 10 mins, if the user refreshes the webpage, he is logged out and re-directed to login.\r\n\r\nThe `ConfigureApplicationCookie` values seem to be ignored."},{"Id":"6872291702","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:11:18","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1488","RelatedDescription":"Closed issue \"Authentication Cookie not deleted when using HttpContext.SignOutAsync();\" (#1488) at aspnet/Identity","RelatedBody":"Whenever I call the said function, the cookies are never deleted.  I have to delete the cookies manually by calling the following:\r\n\r\n`await HttpContext.SignOutAsync();\r\nHttpContext.Response.Cookies.Delete(IdentityServerConstants.DefaultCookieAuthenticationScheme);\r\nHttpContext.Response.Cookies.Delete(IdentityServerConstants.DefaultCheckSessionCookieName);\r\nHttpContext.Response.Cookies.Delete(IdentityServerConstants.ExternalCookieAuthenticationScheme);\r\n`\r\nFrom everything I have read and based on the name, I should not have to do this.  Am I missing something?\r\n"},{"Id":"6872290316","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:10:57","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1490","RelatedDescription":"Closed issue \"IdentityConstants\" (#1490) at aspnet/Identity","RelatedBody":"Consider redeclaring `IdentityConstants` class properties as actual constants instead of static readonly fields. \r\n\r\nThese fields are used as authentication schema names. If the application uses more than one auth scheme it can specify the scheme to be used (or multiple) in `Authorize` attribute but the attribute only accepts compile-time constants as parameters. \r\n\r\nI've run into this issue when creating mixed MVC-WebAPI application with double authentication (cookies for MVC pages and JWT for API calls) and i had to declare a constant with value of `\"Identity.Application\"` to be used with `Authorize` attribute. "},{"Id":"6872268523","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:04:54","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1501","RelatedDescription":"Closed issue \"Password backward compatibility\" (#1501) at aspnet/Identity","RelatedBody":"I'm in the process of creating a new MVC application that has to plug in to our existing SQL Server based user store.  The problem is old user accounts can't be used in the new website, trying to log in with one results in \"failure\". New accounts can be created, but can't be used by the existing MVC web sites, try to login in with one results in \"failure\".  I'm guessing this is a compatibility issue for the hashed passwords.  How can I configure the new site, to use the existing (circa 2014 MVC) password hash?  I've compared the NuGet packages in both websites and they match (both are using 2.2.1)"},{"Id":"6863500748","Type":"IssuesEvent","CreatedAt":"2017-11-16T10:21:13","Actor":"andrew-vandenbrink","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1504","RelatedDescription":"Opened issue \"Using both identity and cookie authentication on the same time is not working\" (#1504) at aspnet/Identity","RelatedBody":"Startup.cs\r\n```\r\n services.AddIdentity<ApplicationUser, IdentityRole>()\r\n                .AddEntityFrameworkStores<MultipleDbContext>()\r\n                .AddDefaultTokenProviders();\r\n\r\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\r\n                .AddCookie();\r\n```\r\n\r\nIndex.cshtml\r\n```\r\n if (!HttpContext.User.HasClaim(c => c.Type == ClaimTypes.Name))\r\n{\r\n//This will be always called\r\n}\r\n```\r\n\r\nIf I use both identity and cookie authentication, the cookie authentication won't work\r\n\r\nIf change the Startup.cs like this, then it will work\r\nStartup.cs\r\n```\r\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\r\n                .AddCookie();\r\n```\r\n\r\nIs this by design?\r\n"},{"Id":"6859653074","Type":"IssuesEvent","CreatedAt":"2017-11-15T16:48:07","Actor":"daniel-tikhonov","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1503","RelatedDescription":"Opened issue \"IdentityServiceCollectionExtensions ambiguous reference\" (#1503) at aspnet/Identity","RelatedBody":"The type 'IdentityServiceCollectionExtensions' exists in both 'Microsoft.AspNetCore.Identity, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' and 'Microsoft.Extensions.Identity.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'\r\n\r\nJust trying to access IdentityServiceCollectionExtensions class in my project and it throws error. How can I get this class?\r\n"},{"Id":"6859492853","Type":"IssuesEvent","CreatedAt":"2017-11-15T16:21:11","Actor":"lurumad","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1493","RelatedDescription":"Closed issue \"ASP.NET Core Identity in multiple ASP.NET Core Applications: Invalid Token\" (#1493) at aspnet/Identity","RelatedBody":"Hi,\r\n\r\nI have two web applications, an administration app and Identity Server app. In the administration app, administrators create new users accounts and this app generates a token for email confirmation:\r\n\r\n```csharp\r\nvar token = await userManager.GenerateEmailConfirmationTokenAsync(user);\r\n```\r\nI want to confirm email and reset the password in the identity server app, but I always recieved an InvalidToken error.\r\n\r\nI've configured Identity in both apps:\r\n\r\n```csharp\r\nservices.AddIdentity<User, IdentityRole>()\r\n                .AddEntityFrameworkStores<AdministrationDbContext>()\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nIf I generate and confirm the email in the administration app works, but in identity server app always the same error: InvalidToken\r\n\r\nDid I missed something?\r\n\r\nRegards!"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6876495892","Type":"IssuesEvent","CreatedAt":"2017-11-20T01:09:31","Actor":"netsfx","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2110","RelatedDescription":"Closed issue \"Kestrel \"ignores\" listenOptions.UseHttps on asp.net Core 2.0 on Ubuntu - uses http instead - but works on Windows\" (#2110) at aspnet/KestrelHttpServer","RelatedBody":"I want to run Kestrel on Ubuntu with https and do:\r\n\r\n```\r\npublic static void Main(string[] args)\r\n\t\t{\r\n\t\t\tvar host = new WebHostBuilder()\r\n\t\t\t\t.UseKestrel(options =>\r\n\t\t\t\t{\r\n\t\t\t\t\toptions.ApplicationSchedulingMode = SchedulingMode.Inline;\r\n\t\t\t\t\toptions.Listen(IPAddress.Any, 80);\r\n\t\t\t\t\toptions.Listen(IPAddress.Any, 443,\r\n\t\t\t\t   listenOptions =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlistenOptions.NoDelay = true;\r\n\t\t\t\t\t\t\t\tlistenOptions.UseHttps(\"cert.pfx\", args[0]);\r\n\t\t\t\t\t\t\t\tlistenOptions.UseConnectionLogging();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Exception) { }\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\toptions.UseSystemd();\r\n\t\t\t\t})\r\n\t\t\t\t\r\n\t\t\t\t.UseContentRoot(Directory.GetCurrentDirectory())\r\n\t\t\t\t.UseStartup<Startup>()\r\n\t\t\t\t.Build();\r\n\t\t\thost.Run();\r\n\t\t}\r\n```\r\nOn Windows, that works as expected:\r\nNow listening on: http://0.0.0.0:80\r\n*Now listening on: https://0.0.0.0:443*\r\n\r\nBut the same on Ubuntu yields *http* instead of *https* on port 443:\r\nNow listening on: http://0.0.0.0:80\r\n*Now listening on: http://0.0.0.0:443*\r\n\r\nThe result is that on Ubuntu port 443 will not serve https but http, which is of course not what I want.\r\n\r\nAny ideas?\r\n"},{"Id":"6872444758","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:58:15","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2116","RelatedDescription":"Closed issue \"E2ETests.SmokeTests_X64.SmokeTests_X64_Kestrel_CoreClr_Standalone fails in MusicStore\" (#2116) at aspnet/KestrelHttpServer","RelatedBody":"Possibly related to the socket changes. @halter73 \r\nSee: https://ci.appveyor.com/project/aspnetci/musicstore/build/1.0.1182\r\nException:\r\n```\r\ndotnet.exe : [xUnit.net 00:08:53.6420886]     E2ETests.SmokeTests_X64.SmokeTests_X64_Kestrel_CoreClr_Standalone [FAIL]\r\nAt C:\\Users\\appveyor\\.dotnet\\buildtools\\korebuild\\2.1.0-preview1-15527\\scripts\\common.psm1:7 char:5\r\n+     & $cmd @args\r\n+     ~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: ([xUnit.net 00:0...andalone [FAIL]:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n \r\n[xUnit.net 00:08:53.6424855]       System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n[xUnit.net 00:08:53.6425527]       ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response\r\n[xUnit.net 00:08:53.6434887]       Stack Trace:\r\n[xUnit.net 00:08:53.6450987]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6451831]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6452483]            at Microsoft.AspNetCore.Server.IntegrationTesting.LoggingHandler.<SendAsync>d__2.MoveNext()\r\n[xUnit.net 00:08:53.6452998]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6453551]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6454098]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6454661]            at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n[xUnit.net 00:08:53.6455184]            at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n[xUnit.net 00:08:53.6455689]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6456221]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6456926]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6457604]         C:\\projects\\musicstore\\test\\MusicStore.E2ETests\\Implementation\\Validator.cs(58,0): at E2ETests.Validator.<DoPostAsync>d__15.MoveNext()\r\n[xUnit.net 00:08:53.6458643]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6459181]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6459793]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6460399]         C:\\projects\\musicstore\\test\\MusicStore.E2ETests\\Implementation\\Validator.cs(350,0): at E2ETests.Validator.<SignInWithUser>d__29.MoveNext()\r\n[xUnit.net 00:08:53.6461375]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6461943]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6462483]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6463075]         C:\\projects\\musicstore\\test\\MusicStore.E2ETests\\SmokeTestRunner.cs(106,0): at E2ETests.SmokeTestRunner.<RunTestsAsync>d__2.MoveNext()\r\n[xUnit.net 00:08:53.6464495]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6465231]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6465830]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6466481]         C:\\projects\\musicstore\\test\\MusicStore.E2ETests\\SmokeTestRunner.cs(59,0): at E2ETests.SmokeTestRunner.<SmokeTestSuite>d__1.MoveNext()\r\n[xUnit.net 00:08:53.6467475]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6468059]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6468557]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6469078]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6469703]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6470249]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6470729]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:08:53.6471247]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6471798]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:08:53.6472202]         ----- Inner Stack Trace -----\r\n[xUnit.net 00:08:53.6472725]            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n[xUnit.net 00:08:53.6473222]            at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()\r\n[xUnit.net 00:08:53.6473769]            at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\r\n```"},{"Id":"6872317270","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:18:40","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2172","RelatedDescription":"Closed issue \"Access-Control-Allow headers not set when exception is thrown.\" (#2172) at aspnet/KestrelHttpServer","RelatedBody":"**Problem**: I have enabled Cors and the developExceptionPage like this in the Startup.cs, but when I encounter a unhandeled exception I don't get a DeveloperExceptionPage beacuse the Cors header is not set.\r\n\r\n**Expected behavior** : Cors headers to bet set on Unhandled exception.\r\n**Actual behavior**: No cors header is set when request is aborted due to a Unhandled exception.\r\n\r\nI don't know if this is a bug or not but I don't find this behavior to be logic.\r\n\r\n```csharp\r\n app.UseDeveloperExceptionPage();\r\n app.UseCors(builder =>\r\n                {\r\n                    builder.AllowAnyHeader()\r\n                        .AllowAnyMethod()\r\n                        .AllowAnyOrigin()\r\n                        .AllowCredentials()\r\n                        .Build();\r\n                });\r\n```\r\nAnd when a unhandled exception happened.  The Cors headers is not set.\r\nExample \r\n```csharp\r\n[Route(\"crash\")]\r\n        [HttpGet]\r\n        public async Task Crash()\r\n        {\r\n            throw new Exception(\"Try and catch me!\");\r\n        }\r\n```\r\n\r\nFor those who have the same problem here is my solution\r\nI solved this by built my own Cors middleware.\r\n```csharp\r\n app.Use((context, func) =>\r\n                {\r\n                    context.Response.OnStarting(state => {\r\n                        var httpContext = (HttpContext) state;\r\n                        httpContext.Response.Headers.Add(\"Access-Control-Allow-Origin\", new [] {\"*\" });\r\n                        httpContext.Response.Headers.Add(\"Access-Control-Allow-Methods\", new [] {\"*\" });\r\n                        httpContext.Response.Headers.Add(\"Access-Control-Allow-Headers\", new [] {\"*\"});\r\n                        return Task.FromResult(0);\r\n                    }, context);\r\n                    return func();\r\n                });\r\n```\r\n\r\n"},{"Id":"6872309139","Type":"IssuesEvent","CreatedAt":"2017-11-17T22:16:16","Actor":"Zexuz","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2172","RelatedDescription":"Opened issue \"Access-Control-Allow headers not set when exception is thrown.\" (#2172) at aspnet/KestrelHttpServer","RelatedBody":"**Problem**: I have enabled Cors and the developExceptionPage like this in the Startup.cs, but when I encounter a unhandeled exception I don't get a DeveloperExceptionPage beacuse the Cors header is not set.\r\n\r\n**Expected behavior** : Cors headers to bet set on Unhandled exception.\r\n**Actual behavior**: No cors header is set when request is aborted due to a Unhandled exception.\r\n\r\nI don't know if this is a bug or not but I don't find this behavior to be logic.\r\n\r\n```csharp\r\n app.UseDeveloperExceptionPage();\r\n app.UseCors(builder =>\r\n                {\r\n                    builder.AllowAnyHeader()\r\n                        .AllowAnyMethod()\r\n                        .AllowAnyOrigin()\r\n                        .AllowCredentials()\r\n                        .Build();\r\n                });\r\n```\r\nAnd when a unhandled exception happened.  The Cors headers is not set.\r\nExample \r\n```csharp\r\n[Route(\"crash\")]\r\n        [HttpGet]\r\n        public async Task Crash()\r\n        {\r\n            throw new Exception(\"Try and catch me!\");\r\n        }\r\n```\r\n\r\nFor those who have the same problem here is my solution\r\nI solved this by built my own Cors middleware.\r\n```csharp\r\n app.Use((context, func) =>\r\n                {\r\n                    context.Response.OnStarting(state => {\r\n                        var httpContext = (HttpContext) state;\r\n                        httpContext.Response.Headers.Add(\"Access-Control-Allow-Origin\", new [] {\"*\" });\r\n                        httpContext.Response.Headers.Add(\"Access-Control-Allow-Methods\", new [] {\"*\" });\r\n                        httpContext.Response.Headers.Add(\"Access-Control-Allow-Headers\", new [] {\"*\"});\r\n                        return Task.FromResult(0);\r\n                    }, context);\r\n                    return func();\r\n                });\r\n```\r\n\r\n"},{"Id":"6871952204","Type":"PullRequestEvent","CreatedAt":"2017-11-17T20:41:37","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2164","RelatedDescription":"Merged pull request \"Null out send buffer less\" (#2164) at aspnet/KestrelHttpServer","RelatedBody":"Nulling out write buffers less greedily allows the Windows managed socket implementation to create less GCHandles. This improves the Socket transport performance on Windows by about 3%. Thanks to @stephentoub for the suggestion.\r\n\r\n### Windows Results (Plaintext RPS):\r\n\r\n  | SocketAsyncEventArgs 2.0 | SocketAsyncEventArgs 2.1 | SocketAsyncEventArgs 2.1 (null-less) | Libuv 2.0\r\n-- | -- | -- | -- | --\r\nAVG: | 187396 | 210402 | 216650 | 236338\r\n\r\n### Linux Results (Plaintext RPS):\r\n\r\n  | SocketAsyncEventArgs 2.0 | SocketAsyncEventArgs 2.1 | SocketAsyncEventArgs 2.1 (null-less) | Libuv 2.0\r\n-- | -- | -- | -- | --\r\nAVG: | 205213 | 204287 | 201845 | 235460\r\n\r\n\r\n### Benchmark environment info:\r\nPlatformLevelTechempower halter73/2.1-2.1 (ba483fc53bbaaef3b4cc59b621308ad5de5e85d2)\r\nKestrel halter73/null-less (f494adb344496f15a751f154de5ad738e3b02679)\r\n.NET Core Runtime 2.1.0-preview1-25907-02 Windows\r\n.NET Core Runtime 2.1.0-preview1-25909-03 Linux"},{"Id":"6871355817","Type":"IssuesEvent","CreatedAt":"2017-11-17T18:20:11","Actor":"desmondgc","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2171","RelatedDescription":"Opened issue \"The connection was closed because the response was not read by the client at the specified minimum data rate\" (#2171) at aspnet/KestrelHttpServer","RelatedBody":"After upgrading to ASP.NET Core 2.0, I've been encountering the MinResponseDataRate limit sporadically for a certain controller action that returns a ~30 MB response. I am able to work around the issue by disabling the limit, but it's not clear to me why the limit is being hit.\r\n\r\nTimeline:\r\n\r\n```\r\n11:28:28.992 - Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter' and content type 'application/json' to write the response.\r\n11:28:28.992 - Executing ObjectResult, writing value Microsoft.AspNetCore.Mvc.ControllerContext.\r\n11:28:37.153 - Connection id \"0HL9DJ6TCCU64\", Request id \"0HL9DJ6TCCU64:00000001\": the connection was closed becuase the response was not read by the client at the specified minimum data rate.\r\n11:28:37.153 - Connection id \"0HL9DJ6TCCU64\" disconnecting.\r\n11:28:37.153 - Connection id \"0HL9DJ6TCCU64\" communication error.\r\n```\r\n\r\nMy scenario is very similar to the one described in [this Stack Overflow thread](https://stackoverflow.com/questions/46584760/connection-was-closed-error-between-httpclient-and-asp-net-core-2-0-webservice).\r\n\r\nFrom what I can tell, the client is in the process of downloading the response at a reasonable rate when the connection is closed, but it's hard to troubleshoot because it happens intermittently. I'm basically looking for guidance on how to troubleshoot this issue."},{"Id":"6867440934","Type":"IssuesEvent","CreatedAt":"2017-11-17T00:30:00","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2139","RelatedDescription":"Closed issue \"Add KestrelServerOptions.ListenLocalhost\" (#2139) at aspnet/KestrelHttpServer","RelatedBody":""}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6876317278","Type":"IssuesEvent","CreatedAt":"2017-11-19T23:13:24","Actor":"PavelBansky","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1779","RelatedDescription":"Opened issue \"Partial views path is incorectly resolved in ViewComponent\" (#1779) at aspnet/Razor","RelatedBody":"I have a ViewComponent called PagerViewComponent with corresponding View(s) stored in the `Views/Shared/Components/Pager`\r\n\r\nThe content of the directory is this:\r\n```\r\n/Views\r\n  /Shared\r\n    /Components\r\n      /Pager\r\n        _Pager.cshtml\r\n        Default.cshtml\r\n        Search.cshtml\r\n```\r\n\r\nContent of `Default.cshtml` is this\r\n```csharp\r\n@model MyApp.ViewModel.PagedResultBase\r\n\r\n@Html.Partial(\"_Pager\", Model)\r\n```\r\n\r\nIt all ends with runtime exception:\r\n```\r\nAn unhandled exception occurred while processing the request.\r\nInvalidOperationException: The partial view '_Pager' was not found. The following locations were searched:\r\n/Views/Blog/_Pager.cshtml\r\n/Views/Shared/_Pager.cshtml\r\n\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper+<RenderPartialCoreAsync>d__60.MoveNext()\r\n```\r\n\r\nFor some reason **Razor would not look to resolve the partial view inside the ViewComponent directory** `Views/Shared/Components/Pager`\r\nWhen I move the `_Pager.cshtml` into `Views/Shared` directory it all works..\r\n\r\n\r\nOS: Windows 10 x64\r\n.Net Core: 2.0\r\nMicrosoft.AspNetCore.All Version=\"2.0.0\" \r\nMicrosoft.VisualStudio.Web.CodeGeneration.Tools Version=\"2.0.0\" \r\n"},{"Id":"6871512935","Type":"IssuesEvent","CreatedAt":"2017-11-17T18:56:19","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1742","RelatedDescription":"Closed issue \"Add VisualStudio integration tests for directive completion\" (#1742) at aspnet/Razor","RelatedBody":"This work will be done on the WTE side."},{"Id":"6871511891","Type":"IssuesEvent","CreatedAt":"2017-11-17T18:56:04","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1626","RelatedDescription":"Closed issue \"[Tracker] List of Razor items to be consumed by tooling.\" (#1626) at aspnet/Razor","RelatedBody":"Today the Visual Studio components utilize MEF exports/imports to interact with our VisualStudio.LanguageServices.Razor utilities. Once those VS components move to utilize the CodeAnalysis.Razor services (copies but updated) we'll need to work with them to consume the following changes:\r\n\r\n- [x] https://github.com/aspnet/Razor/issues/1572 - Shelveset `ajbaaska-1572`\r\n- [x] [Let Razor handle editing loop](https://github.com/aspnet/Razor/issues/1630) - Shelveset `NTM-VSRazorParser`\r\n- [x] [Add integration tests for directive completion](https://github.com/aspnet/Razor/issues/1742) - Shelveset `NTM-RazorDirectiveCompletionTests`"},{"Id":"6867542972","Type":"IssuesEvent","CreatedAt":"2017-11-17T01:05:22","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1776","RelatedDescription":"Closed issue \"Do not run Razor Core code for old Razor project types\" (#1776) at aspnet/Razor","RelatedBody":""},{"Id":"6867421933","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:23:26","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1777","RelatedDescription":"Merged pull request \"Prevent Razor Core from running in non-core scenarios.\" (#1777) at aspnet/Razor","RelatedBody":"- Also added tests.\r\n\r\n#1776"},{"Id":"6867267780","Type":"IssuesEvent","CreatedAt":"2017-11-16T23:33:54","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1778","RelatedDescription":"Opened issue \"Change TagHelperFactService.GetTagHelperBinding's parentIsTagHelper to take a location of a parent tag.\" (#1778) at aspnet/Razor","RelatedBody":"We'll have to do some extra work to resolve if the parents location associates with a TagHelper in the fact service but that will prevent callers from having to do that."},{"Id":"6866722416","Type":"PullRequestEvent","CreatedAt":"2017-11-16T21:20:38","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1777","RelatedDescription":"Opened pull request \"Prevent Razor Core from running in non-core scenarios.\" (#1777) at aspnet/Razor","RelatedBody":"- Also added tests.\r\n\r\n#1776"},{"Id":"6866567868","Type":"IssuesEvent","CreatedAt":"2017-11-16T20:46:25","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1776","RelatedDescription":"Opened issue \"Do not run Razor Core code for old Razor project types\" (#1776) at aspnet/Razor","RelatedBody":""}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"},{"Id":"6760767057","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:11","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/490","RelatedDescription":"Closed issue \"Show external providers on the Register page\" (#490) at aspnet/Templates","RelatedBody":"The individual auth template has a login page and a register page. Login shows a password login and external providers. Register only shows a password login. Register should also show external providers, as this is where new users will go to sign-up.\n"},{"Id":"6760766431","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:02","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/492","RelatedDescription":"Closed issue \"Add tests to project templates\" (#492) at aspnet/Templates","RelatedBody":"Hi,\n\nTesting is unfortunately a part of most of our jobs. I don't know if it is already planned/done but in visual studio when I create a new ASP.NET MVC 6 (or is it Core 1 ? Not sure) there are no tests. This is particularly annoying for the template including user accounts. I spent a few hours writing tests for the included templates.\n\nI was wondering whether other people would be interested ?\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6856182602","Type":"PullRequestEvent","CreatedAt":"2017-11-15T02:15:11","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Merged pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6856061013","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:32:45","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Opened pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6855974819","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:03:13","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Merged pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855941091","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:52:40","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Opened pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855898574","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:38:13","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Opened pull request \"Update migrate-sql-server.md\" (#1062) at aspnet/Tooling","RelatedBody":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top."},{"Id":"6854009328","Type":"PullRequestEvent","CreatedAt":"2017-11-14T17:26:43","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Merged pull request \"Create migrate-sql-server.md\" (#1061) at aspnet/Tooling","RelatedBody":""},{"Id":"6853947838","Type":"PullRequestEvent","CreatedAt":"2017-11-14T17:14:56","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Opened pull request \"Create migrate-sql-server.md\" (#1061) at aspnet/Tooling","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6854180246","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:26","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.5. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.5.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.5.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854178775","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:10","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability\" (#278) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where the application is hosted through Windows Http,Sys where a malformed request can lead to a Denial Of Service.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications hosted using Kestrel as their web server are not affected. By default ASP.NET Core Web applications are hosted with Kestrel. Developers must make specific decisions to switch to using HTTP.SYS.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.WebListener | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3 | 1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Server.HttpSys | 2.0.0 |  2.0.2\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.6\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.WebListener` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Server.WebListener` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Server.WebListener` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a two direct dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. The example shows a direct reference to the vulnerable package `Microsoft.AspNetCore.Server.WebListener` version 1.1.1.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.1.0 you would add a reference to the appropriate fixed version 1.1.3.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11883](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11883)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854177980","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege\" (#277) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability some public versions of ASP.NET Core where an Open Redirect exists, leading to Elevation Of Privilege.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 1.0.x or 1.1.x are not affected.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.0.0 |  2.0.1\r\nMicrosoft.AspNetCore.Mvc.Core | 2.0.0 |  2.0.1\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\nIf you are targeting .NET Core a \"meta-package\" is used, `Microsoft.AspNetCore.All`. You should begin by updating its version number to 2.0.1, this will pull in the fixed `Microsoft.AspNetCore.Mvc.Core` package.\r\n\r\nIf you are targeting .NET Framework you should first update the `Microsoft.AspNetCore` version to the version number to 2.0.1, then adjust the version number for any other packages beginning with `Microsoft.AspNetCore.` to 2.0.1.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Core\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference to the vulnerable metapackage, as seen by the single `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.All` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Framework\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference a single packages, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.Core` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.Core` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers a direct reference to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 2.0.0 when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.assets.json` file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Core` version 2.0.0 you would add a reference to the fixed version, 2.0.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11879:](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11879)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853300618","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:26:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/281","RelatedDescription":"Closed issue \"Reserved\" (#281) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853299320","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:47","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/280","RelatedDescription":"Closed issue \"Reserved\" (#280) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853297641","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:29","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Closed issue \"Reserved\" (#279) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853295578","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:10","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Closed issue \"Reserved\" (#278) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853295199","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:07","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Opened issue \"Reserved\" (#278) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853293682","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:24:50","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Closed issue \"Reserved\" (#277) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6780432155","Type":"IssuesEvent","CreatedAt":"2017-10-29T14:10:51","Actor":"smitpatel","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Closed issue \"Improved end to end testing support for MVC applications: Typo?\" (#276) at aspnet/Announcements","RelatedBody":"Hi @javiercn, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n"},{"Id":"6779929600","Type":"IssuesEvent","CreatedAt":"2017-10-29T07:24:18","Actor":"searus","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Opened issue \"Improved end to end testing support for MVC applications: Typo?\" (#276) at aspnet/Announcements","RelatedBody":"Hi, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"931580871378964481","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"aspnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/itxdVWOnG5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":6,"RawContent":null},{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"917877107904036865","CreatedAt":"2017-10-10T22:18:50+00:00","UserScreenname":"aspnet","Text":"Join us in a half hour (3:45 PM Pacific) for this week's #aspnet Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"915262407743647744","CreatedAt":"2017-10-03T17:08:57+00:00","UserScreenname":"aspnet","Text":"We're live at https://t.co/4Ioo9jNSN2 for the exciting #SignalR deep dive. Join us now!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"915242491774869504","CreatedAt":"2017-10-03T15:49:49+00:00","UserScreenname":"aspnet","Text":"Join us for some #SignalR Core demos at 10 AM PDT (UTC-7) on #ASPNET Community Standup w/ SignalR dev @moozzyk.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null},{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2017-11-20T05:30:09.9464314Z","RunDurationInMilliseconds":8084}