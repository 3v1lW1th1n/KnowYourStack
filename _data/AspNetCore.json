{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for using HTTPS","PublishedOn":"2018-02-27T18:01:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Securing web apps with HTTPS is more important than ever before. Browser enforcement of HTTPS is becoming increasingly strict. Sites that don&#8217;t use HTTPS are increasingly labeled as insecure....","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-https-improvements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1 now available","PublishedOn":"2018-02-27T18:00:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we&#8217;re very happy to announce that the first preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We&#8217;ve been working hard on this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-now-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7324394249","Type":"IssuesEvent","CreatedAt":"2018-03-02T22:31:03","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2329","RelatedDescription":"Closed issue \"BuildServiceProvider should return IServiceProvider instead of ServiceProvider\" (#2329) at aspnet/Home","RelatedBody":"_From @cknaap on Monday, November 27, 2017 6:26:06 AM_\r\n\r\nMethod Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider returns a ServiceProvider instead of the associated interface IServiceProvider.\r\n\r\nThe latter allows for better mocking in unit tests.\r\n\r\nPlus, the documentation on the method also says it returns *I*ServiceProvider.\r\n\r\n_Copied from original issue: aspnet/DependencyInjection#614_"},{"Id":"7324298146","Type":"IssuesEvent","CreatedAt":"2018-03-02T22:05:22","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2766","RelatedDescription":"Closed issue \"Adding a Refresh() to IServiceProvider [Dependency Injection]\" (#2766) at aspnet/Home","RelatedBody":"After adding most of my services in ConfigureServices(), One of the services is instantiated using app.ApplicationServices.GetServices<> at the beginning of Configure(). This utilizes the ServiceProvider instance. This occurs at the beginning of the method, and the service adds some more services to ServiceCollection which was preserved in the original ConfigureServices() call. The problem is that these new services are not available via the ServiceProvider instance. Creating another ServiceProvider instance from the ServiceCollection would lose previously modified and needed singletons.\r\n\r\n I downloaded the DependencyInjection, Metadata, and Hosting github repos. Digging into the ServiceProvider, ultimately revealed a reference to the ServiceCollection is preserved in the internal property and class CallSiteFactory inside the internal base class ServiceProviderEngine. The private method Populate() initializes the _descriptorLookup data member. It would be nice for ServiceProvider to have a Refresh() method that would call down into the CallSiteFactory and blow away and call Populate() to recreate the _descriptorLookup data member. If I am reading the code correctly, this would not affect the singleton instances, and the recreated cacheKey(s) would be the same.\r\n\r\nIf this would work and is acceptable, I would be glad to fork and try it out."},{"Id":"7323516131","Type":"IssuesEvent","CreatedAt":"2018-03-02T19:01:32","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2916","RelatedDescription":"Closed issue \"Asp.Net Identity stores for firebase\" (#2916) at aspnet/Home","RelatedBody":"If you are intersted, I've implement [Asp.Net Identity stores for firebase](https://github.com/aguacongas/Identity.Firebase)\r\n\r\nRegards"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7326874533","Type":"IssuesEvent","CreatedAt":"2018-03-04T01:50:09","Actor":"JakenVeina","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1528","RelatedDescription":"Opened issue \"Plans to port PersistentConnection\" (#1528) at aspnet/SignalR","RelatedBody":"I'm entirely new to SignalR, so feel free to tell me I'm crazy.\r\n\r\nAre there any plans to port PersistentConnection from .NET over to Core? Or is there a newer alternative I should look into for implementing a custom protocol (not Hubs)?\r\n\r\nSpecifically, I'd like to have a protocol that's more of an \"event subscription\" model, and I'd like it to integrate a little more fluently into a Web API, where all the real work happens."},{"Id":"7325612762","Type":"IssuesEvent","CreatedAt":"2018-03-03T11:17:24","Actor":"olofd","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1527","RelatedDescription":"Opened issue \"await SendAsync does not wait for message to be sent\" (#1527) at aspnet/SignalR","RelatedBody":"I know this is not perfect code, but I had an old application that I upgraded to SignalRCore\r\nand this application does this:\r\n\r\n```csharp\r\n            await _competitionHubContext.Clients.Group(HubEvent.CompetitionChanged + \"::\" + competitionChangedModel.Competition.CompetitionId)\r\n                .SendAsync(\"competitionUpdated\", competitionChangedModel.Competition);\r\n\r\n            //Avoid sending all teams:\r\n            competitionChangedModel.Competition.Teams = null;\r\n//...send to other groups\r\n```\r\n\r\nThe listeners in the first group receives teams == null.\r\nThat was not the case in old signalr, and the await, to me implies that I'm awaiting the message to at least be dispatched? Or what am i awaiting?"},{"Id":"7325486032","Type":"IssuesEvent","CreatedAt":"2018-03-03T09:34:32","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1526","RelatedDescription":"Opened issue \"Rename StreamAsync to StreamAsChannelAsync\" (#1526) at aspnet/SignalR","RelatedBody":"We don't want to burn the generic `StreamAsync` name on the Channel reader overload. Instead, we should make the StreamAsync overload exist when IAsyncEnumerable lands.\r\n\r\nWe could also consider adding StreamAsObservable with this approach.\r\n\r\n/cc @anurse "},{"Id":"7324082267","Type":"IssuesEvent","CreatedAt":"2018-03-02T21:13:07","Actor":"madskristensen","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1525","RelatedDescription":"Opened issue \"Publish signalr.js on cdnjs.com\" (#1525) at aspnet/SignalR","RelatedBody":"This will enable LibMan to provide the script file so developers don't have to use npm"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7327051086","Type":"IssuesEvent","CreatedAt":"2018-03-04T04:31:20","Actor":"smurtagh","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7433","RelatedDescription":"Opened issue \"ASP.NET Core IViewLocalizer not using resx file when assembly name != default namespace\" (#7433) at aspnet/Mvc","RelatedBody":"My view: /Views/Account/Login.cshtml\r\nMy Resource file: /Resources/Account/Login.en-US.resx\r\n\r\nKey lookups work when in my assembly name and default namespace are the same. If they are different, IViewLocalizer falls back to the key."},{"Id":"7325210623","Type":"PullRequestEvent","CreatedAt":"2018-03-03T05:45:02","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7432","RelatedDescription":"Opened pull request \"Remove FiltersWebSite\" (#7432) at aspnet/Mvc","RelatedBody":""},{"Id":"7324525667","Type":"PullRequestEvent","CreatedAt":"2018-03-02T23:10:22","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7431","RelatedDescription":"Opened pull request \"Ensure DebugType = embedded and DebugType = none work\" (#7431) at aspnet/Mvc","RelatedBody":"Fixes #7406"},{"Id":"7324086969","Type":"PullRequestEvent","CreatedAt":"2018-03-02T21:14:14","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7430","RelatedDescription":"Opened pull request \"Do not use `FormattedModelValue` in password editor template\" (#7430) at aspnet/Mvc","RelatedBody":"- #7418\r\n- add quirk switch to reverse this if necessary"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7323687348","Type":"PullRequestEvent","CreatedAt":"2018-03-02T19:39:24","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1656","RelatedDescription":"Merged pull request \"Add link to Identity.Firebase\" (#1656) at aspnet/Identity","RelatedBody":"In response to @Elion comment in this discussion https://github.com/aspnet/Home/issues/2916#issuecomment-370019674"},{"Id":"7323656044","Type":"PullRequestEvent","CreatedAt":"2018-03-02T19:32:24","Actor":"aguacongas","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1656","RelatedDescription":"Opened pull request \"Add link to Identity.Firebase\" (#1656) at aspnet/Identity","RelatedBody":"In response to @Elion comment in this discussion https://github.com/aspnet/Home/issues/2916#issuecomment-370019674"},{"Id":"7323530124","Type":"IssuesEvent","CreatedAt":"2018-03-02T19:04:39","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1654","RelatedDescription":"Closed issue \"Core Identity and the User.Identity.Name problem\" (#1654) at aspnet/Identity","RelatedBody":"After spending a couple of hours debugging the issue when the User.Identity.Name property was null (even when all the required claims were present on the ClaimsPrincipal) I discovered the following blog post which I was able to follow and solve the issue.\r\n\r\nhttps://cerkit.com/2017/07/25/asp-net-core-jwt-tokens-and-user-identity-name-property/\r\n\r\nIs there a specific reason why this isn't included by default in ASP.NET Core project templates?\r\n\r\nSeems really counter intuitive because when working with Identity and Claims you are bound to run into this issue."},{"Id":"7319357506","Type":"PullRequestEvent","CreatedAt":"2018-03-02T00:23:25","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1655","RelatedDescription":"Opened pull request \"[Design] Use RefreshSignInAsync\" (#1655) at aspnet/Identity","RelatedBody":"Addresses #1616 "}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7325511649","Type":"IssuesEvent","CreatedAt":"2018-03-03T09:55:11","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2358","RelatedDescription":"Closed issue \"Abstraction layer for Windows Service and systemd?\" (#2358) at aspnet/KestrelHttpServer","RelatedBody":"This is a question. I just finished getting my .NET Core ASP app deployed as a service, and thank you for [the help](https://github.com/aspnet/KestrelHttpServer/issues/2351). But I was trying something that might just not be possible - deploying the same app as a service under Ubuntu, [following instructions to deploy it as a service using systemd](http://pmcgrath.net/running-a-simple-dotnet-core-linux-daemon). It core dumps. So just to confirm, the WebHostService class is Windows specific? It is not an abstraction layer for all OS(s)? If this is the case, is there a way to check the OS you are running on and instantiate a similar class for Linux that provides the same kind of lifecycle execution points, like OnStopped()? Thank you."},{"Id":"7325160147","Type":"IssuesEvent","CreatedAt":"2018-03-03T05:02:35","Actor":"fbrier","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2358","RelatedDescription":"Opened issue \"Abstraction layer for Windows Service and systemd?\" (#2358) at aspnet/KestrelHttpServer","RelatedBody":"This is a question. I just finished getting my .NET Core ASP app deployed as a service, and thank you for [the help](https://github.com/aspnet/KestrelHttpServer/issues/2351). But I was trying something that might just not be possible - deploying the same app as a service under Ubuntu, [following instructions to deploy it as a service using systemd](http://pmcgrath.net/running-a-simple-dotnet-core-linux-daemon). It core dumps. So just to confirm, the WebHostService class is Windows specific? It is not an abstraction layer for all OS(s)? If this is the case, is there a way to check the OS you are running on and instantiate a similar class for Linux that provides the same kind of lifecycle execution points, like OnStopped()? Thank you."},{"Id":"7324632636","Type":"IssuesEvent","CreatedAt":"2018-03-02T23:48:45","Actor":"DamianEdwards","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2357","RelatedDescription":"Opened issue \"Support SNI to enable multiple HTTPS hosts on single server\" (#2357) at aspnet/KestrelHttpServer","RelatedBody":"Details to come...\r\n\r\n@Tratcher @muratg "},{"Id":"7323938342","Type":"PullRequestEvent","CreatedAt":"2018-03-02T20:38:33","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2354","RelatedDescription":"Merged pull request \"Add benchmark using InMemoryTransport\" (#2354) at aspnet/KestrelHttpServer","RelatedBody":"Results from my dev machine:\r\n\r\nMethod |     Mean |     Error |    StdDev |      Op/s | Allocated |\r\n------------------- |---------:|----------:|----------:|----------:|----------:|\r\nPlaintext | 9.734 us | 0.5443 us | 0.8147 us | 102,729.6 |     232 B |\r\nPlaintextPipelined | 6.002 us | 0.0678 us | 0.1015 us | 166,607.3 |      21 B |\r\n\r\nFor comparison, here are the `RequestParsing` benchmarks on the same machine:\r\n\r\nMethod |       Mean |     Error |    StdDev |        Op/s | Scaled | ScaledSD |  Gen 0 | Allocated |\r\n----------------------------------------- |-----------:|----------:|----------:|------------:|-------:|---------:|-------:|----------:|\r\nPlaintextTechEmpower | 1,380.3 ns |  8.413 ns |  12.59 ns |   724,481.9 |   1.00 |     0.00 | 0.0010 |     344 B |\r\nPipelinedPlaintextTechEmpower | 1,137.2 ns | 33.750 ns |  50.52 ns |   879,351.3 |   0.82 |     0.04 | 0.0013 |     344 B |\r\n\r\nCC: @benaadams "},{"Id":"7323483003","Type":"PullRequestEvent","CreatedAt":"2018-03-02T18:54:27","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2356","RelatedDescription":"Opened pull request \"More detailed request timeout exceptions\" (#2356) at aspnet/KestrelHttpServer","RelatedBody":"#2245\r\n"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7325971083","Type":"IssuesEvent","CreatedAt":"2018-03-03T15:33:39","Actor":"TheTrigger","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2130","RelatedDescription":"Opened issue \"Asp.net Core\" (#2130) at aspnet/Razor","RelatedBody":"I started a new project to try asp.net core 2.0 following [this microsoft guide](https://docs.microsoft.com/it-it/aspnet/core/).\r\nThe fact is **Microsoft.AspNet.Razor** package does not have the correct target framework\r\n\r\n![image](https://user-images.githubusercontent.com/6072718/36936053-25bbc384-1f00-11e8-821e-4a02f01fde15.png)\r\n"},{"Id":"7323596032","Type":"IssuesEvent","CreatedAt":"2018-03-02T19:19:34","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2047","RelatedDescription":"Reopened issue \"Support solution explorer nesting in Razor SDK\" (#2047) at aspnet/Razor","RelatedBody":"The solution explorer nesting of files in Razor Pages scenarios isn't showing up without the web sdk. We need to figure out what we need to add for this.\r\n\r\n**Expected**\r\n```\r\n  +Pages/Index.cshtml\r\n        Pages/Index.cshtml.cs\r\n```\r\n\r\n**Actual**\r\n```\r\n  Pages/Index.cshtml\r\n  Pages/Index.cshtml.cs\r\n```"},{"Id":"7323590082","Type":"PullRequestEvent","CreatedAt":"2018-03-02T19:18:12","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2129","RelatedDescription":"Merged pull request \"Import capabilities to support solution explorer nesting\" (#2129) at aspnet/Razor","RelatedBody":"Fixes #2047"},{"Id":"7323473406","Type":"PullRequestEvent","CreatedAt":"2018-03-02T18:52:20","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2129","RelatedDescription":"Opened pull request \"Import capabilities to support solution explorer nesting\" (#2129) at aspnet/Razor","RelatedBody":"Fixes #2047"},{"Id":"7323384759","Type":"PullRequestEvent","CreatedAt":"2018-03-02T18:32:51","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/2121","RelatedDescription":"Closed pull request \"Pack should pack symbol nupkg\" (#2121) at aspnet/Razor","RelatedBody":"* Update path calculation for BuiltProjectOutputGroupOutput to include full path. This matches\r\n  the behavior of Microsoft.Common.targets.\r\n* Add Razor symbols to DebugSymbolsProjectOutputGroupOutput\r\n\r\nFixes #2116"},{"Id":"7323262913","Type":"PullRequestEvent","CreatedAt":"2018-03-02T18:05:45","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2127","RelatedDescription":"Merged pull request \"Fix build break\" (#2127) at aspnet/Razor","RelatedBody":""},{"Id":"7323235109","Type":"PullRequestEvent","CreatedAt":"2018-03-02T17:59:35","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/1994","RelatedDescription":"Closed pull request \"Use ManualResetEventSlim instead of TaskCompletionSource\" (#1994) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/1991\r\n\r\nDoing this fixes the flakiness in two tests.\r\n\r\nBetter to review using https://github.com/aspnet/Razor/pull/1994/files?w=1"},{"Id":"7323200898","Type":"PullRequestEvent","CreatedAt":"2018-03-02T17:51:55","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2128","RelatedDescription":"Opened pull request \"Fixed flaky shutdown tests\" (#2128) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/1991\r\n\r\nThe flakiness was caused by the race between the compilation and the shutdown requests. There was nothing guaranteeing that compilation was in progress before shutdown is seen.\r\n\r\n"},{"Id":"7323142987","Type":"PullRequestEvent","CreatedAt":"2018-03-02T17:39:14","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2127","RelatedDescription":"Opened pull request \"Fix build break\" (#2127) at aspnet/Razor","RelatedBody":""},{"Id":"7322582925","Type":"IssuesEvent","CreatedAt":"2018-03-02T15:49:54","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2116","RelatedDescription":"Closed issue \"Pack should pack pdb (if present) in a symbol nupkg\" (#2116) at aspnet/Razor","RelatedBody":"We do some work to ensure the compiled Razor assembly is added to a package. We're missing the equivalent feature to include the pdb in the symbol nupkg."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"},{"Id":"7271114444","Type":"IssuesEvent","CreatedAt":"2018-02-20T18:33:27","Actor":"abpiskunov","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/347","RelatedDescription":"Closed issue \"File nesting in Solution Explorer is inconsistent and incorrect\" (#347) at aspnet/Tooling","RelatedBody":"The Solution Explorer for ASP.NET 5 MVC projects has several major problems - one of them is file nesting. The below issues affect Visual Studio 2015 Update 1 with ASP.NET 5 Release Candidate 1.\n#### tl;dr\n- Please fix nesting rules for `.less`, `.scss` and `.sass`, so those files are nested under `.html`.\n- Please fix incorrect nesting that sometimes appear after renaming/moving/copying files and folders.\n- Please provide an option to disable all file nesting, and eventually, options to configure nesting rules.\n- Please fix other critical Solution Explorer issues - this is just one of them, and there are many more.\n#### File nesting is inconsistent when nesting files under `.html`.\n\nThe `.less` and `.scss` files should be nested under `.html`. Those files compile to `.css` just like `.ts` compile to `.js` and they are just as much part of the view component. \n![less-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11942660/6452782c-a838-11e5-9a44-d7ab6a2e5fc9.png)\n![scss-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11942664/66bbd3a6-a838-11e5-8e3c-f1c369d5e1de.png)\nIn fact, if we only have a `.css` file in there, then it _is_ nested as expected, so clearly `.less` and `.scss` should also be nested:\n![css-is-nested-as-expected](https://cloud.githubusercontent.com/assets/6388663/11942670/6be4bdd4-a838-11e5-99b1-1dcc43238459.png)\n\nWhile the above is clearly a bug, and a very annoying one at that, the rules for other file types are less obvious, but should maybe also be considered... maybe `.json` should also be nested under `.html`?\nIt probably contains either settings, string resources, or data for that view component, so it seems resonable to me, although I consider this far less important than getting the style sheet nesting fixed.\n![json-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11939884/4a1bb224-a825-11e5-9ff6-631b4e8fed39.png)\n\nThose nesting rules have been inconsistent ever since they were introduced in ASP.NET 5, and **it really needs to be fixed**. Sure, everything compiles just fine, but I'm getting really pissed off looking at this mess in my Solution Explorer every day. Inconsistencies like this makes the whole concept of nesting seem like an annoyance more than a help, as it raises the obvious question \"if only some files are nested, then why nest anything at all - that's just an extra click to get to the .ts file\". Which brings me to...\n#### File nesting can be annoying\n\nWhile the fundamental idea of file nesting is not nessesarily bad, it can be _very_ annoying at times, which is why, as a _minimum_, **I want an option to disable all file nesting** - and ideally, options to configure the nesting rules.\n\nConsider this folder structure, where the folder already represents a container for the component:\n![file-nesting-is-annoying](https://cloud.githubusercontent.com/assets/6388663/11940913/ff28392a-a82b-11e5-86b4-571bc70d21bb.png)\nHere the file nesting provides no benefit at all, and actually just introduces a _really_ annoying extra click to get to the `.ts` file. A possible fix for this might be to only nest files if the folder name is different from the name of the `.html` file, but this might also be wrong - for example, a folder named `tabs` representing some fancy `tabs` component might actually contain multiple elements that work together, e.g. `tabs.html/js`, `tab-pane.html/js` and `tab-button.html/js`, and in this case we _do_ want nesting for all three of those. Therefore, I strongly believe an option to simply disable all nesting is the best option here - and it is very much needed, because despite this example, we do have projects in which the nesting provides absolutely no value and represents a major annoyance.\n\nOne could also argue that the `.html` file should actually be nested under the `.js` file.\nConsider an Angular 2 application, where the `.ts` file represents the actual Component, annotated with metadata specifying either the path to the `.html` file representing its view, or if the view is small, a string representing the markup of the view. Same for styles, where the metadata in the `.ts` file specifies either the path to the `.css` file, or a string representing the style rules. Here, both the view and the style sheet is clearly dependencies of the `.ts` file, so it would make sense to nest them below that...\n##### An alternative idea\n\nAlternatively, you could consider a completely different approach to nesting, where the part of the file name the files have in common, is used to show a \"virtual folder\" containing all the files - then file nesting could be used only for things like transpiler generated files. The image below is a concept I mocked up to illustrate this idea:\n![virtual-folder-concept](https://cloud.githubusercontent.com/assets/6388663/11942319/042b84ea-a836-11e5-80f1-b5941cfbdfa7.png)\nHere, all the files have the \"foo\" part of their name in common, and is therefore nested under a \"foo\" node in Solution Explorer. However, in the file system, the actual files are all located in the components folder, so in the code the path would be `app/components/foo.js` - nice an clean, works for any file type, and makes no assumptions about whether `.html` or `.js` is more important.\n\nGoing further with this idea, the IDE could also be smart, so when selecting this \"virtual folder\", it could maybe somehow open all the `foo.*` files in a split view (ignoring transpilation output of course), thus providing a quick way to see all the component code at once. Just a thought...\n### File nesting is broken\n\nNot only is file nesting inconsistent, and sometimes annoying, but it is also broken.\nHere are two cases of incorrect behavior I managed to reproduce - unfortunately, this does not seem to fail consistently, so it can be hard to reproduce - but it does happen often enough to be annoying.\n![file-nested-on-drag-copy](https://cloud.githubusercontent.com/assets/6388663/11943207/4749c9e8-a83c-11e5-9f15-304cb16e8419.png)\n![nesting-broken-when-folder-is-renamed](https://cloud.githubusercontent.com/assets/6388663/11943211/4c807074-a83c-11e5-8e71-4bed0bd4353c.png)\n\nPlease take those Solution Explorer issues seriously - I've provided feedback about multiple critical issues several several months ago, and thus far _nothing_ has improved. Solution Explorer still hangs or crashes the whole IDE when a large number of files is modified/moved/copied/renamed, it still has annoying, inconsistent and buggy file nesting, and it still constantly gets out of sync with the file system, crashing first the project system and eventually the whole IDE. I'm more that a little concerned about seeing a release candidate label on something this buggy and unpolished - if this is indeed what you intend to release, then we intend to find another IDE for our frontend development.\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7215731126","Type":"IssuesEvent","CreatedAt":"2018-02-08T09:18:22","Actor":"SteveSandersonMS","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Opened issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289) at aspnet/Announcements","RelatedBody":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"963559608869568512","CreatedAt":"2018-02-13T23:44:47+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null},{"Id":"963556129748918272","CreatedAt":"2018-02-13T23:30:57+00:00","UserScreenname":"aspnet","Text":"Starting in 15 minutes... join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/C7LilH9606","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":8,"RawContent":null},{"Id":"963413986912997376","CreatedAt":"2018-02-13T14:06:08+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz at 10am ET / 15:00 UTC to learn more about @AspNet Core and get your .NET related questions answeâ¦ https://t.co/ORAYG28QGW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"963180036571332609","CreatedAt":"2018-02-12T22:36:30+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"962026058412249090","CreatedAt":"2018-02-09T18:11:00+00:00","UserScreenname":"aspnet","Text":"ASPNET Core 2.0 is out! Join @csharpfritz as he walks you through the improvements, additions and enhancements of tâ¦ https://t.co/AC3AJnLo9t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":31,"RawContent":null},{"Id":"961980507939528705","CreatedAt":"2018-02-09T15:10:00+00:00","UserScreenname":"aspnet","Text":"Working with ASPNET and want to invest in Angular? Check out @Paladique at @DevIntersection, March 25-28 in Orlandoâ¦ https://t.co/i9BCRXD1fc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":15,"RawContent":null},{"Id":"961596291968102400","CreatedAt":"2018-02-08T13:43:16+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and ASPInsider @brendoneus will be showing unit testing patterns and structure practices LIVE onliâ¦ https://t.co/dvU3elJX8R","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"961390822993399809","CreatedAt":"2018-02-08T00:06:48+00:00","UserScreenname":"aspnet","Text":"Did you miss this week's #ASPNET Community Standup (with the latest news on Blazor, starring @danroth27 andâ¦ https://t.co/tfeqgnhClX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"961390078932148224","CreatedAt":"2018-02-08T00:03:51+00:00","UserScreenname":"aspnet","Text":"Sure, after you've left a PR on the #ASPNET docs...\n\nhttps://t.co/Dau0ZgAUbe\n\n;) https://t.co/s8UGKAhK0e","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2018-03-04T05:30:08.6618111Z","RunDurationInMilliseconds":7439}