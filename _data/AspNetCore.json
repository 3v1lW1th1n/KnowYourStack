{"Data":{"Blog":{"FeedItems":[{"Title":"Testing ASP.NET Core MVC web apps in-memory","PublishedOn":"2017-12-07T17:00:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written and submitted by Javier Calvarro Nelson, a developer on the ASP.NET Core MVC team Testing is an important part of the development process of any app. In this blog post...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/07/testing-asp-net-core-mvc-web-apps-in-memory/","RawContent":null},{"Title":"Configuring HTTPS in ASP.NET Core across different platforms","PublishedOn":"2017-11-29T17:00:12+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As the web moves to be more secure by default, it&#8217;s more important than ever to make sure your websites have HTTPS enabled. And if you&#8217;re going to use HTTPS in production its a good idea...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/29/configuring-https-in-asp-net-core-across-different-platforms/","RawContent":null},{"Title":"Improve website performance by optimizing images","PublishedOn":"2017-11-28T18:02:29+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We all want our web applications to load as fast as possible to give the best possible experience to the users. One of the steps to achieve that is to make sure the images we use are as optimized as...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/28/improve-website-performance-by-optimizing-images/","RawContent":null},{"Title":"Orchard Core Beta 1 released","PublishedOn":"2017-11-21T19:32:10+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This is a guest post by Sebastien Ros on behalf of the Orchard community Two years ago, the Orchard community started developing Orchard on .NET Core. After 1,500 commits, 297,000 lines of code, 127...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/21/orchard-core-beta-annoucement/","RawContent":null},{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null},{"Title":"Creating a Minimal ASP.NET Core Windows Container","PublishedOn":"2017-11-09T16:18:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos One of the benefits of containers is their small size, which allows them to be more quickly deployed and more efficiently packed onto a host than virtual machines...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/09/creating-a-minimal-asp-net-core-windows-container/","RawContent":null},{"Title":"Publishing a Web App to an Azure VM from Visual Studio","PublishedOn":"2017-11-01T22:35:42+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We know virtual machines (VMs) are one of the most popular places to run apps in Azure, but publishing to a VM from Visual Studio has been a tricky experience for some. So, we’re pleased to announce...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/01/publishing-a-web-app-to-an-azure-vm-from-visual-studio/","RawContent":null},{"Title":"Recent updates for publishing","PublishedOn":"2017-10-31T18:18:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have recently added a few interesting features for ASP.NET publishing. The updates include: Container Registry Publish Updates Create publish profile without publishing In this post, we will...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/","RawContent":null},{"Title":"Sharing Configuration in ASP.NET Core SPA Scenarios","PublishedOn":"2017-10-27T15:17:34+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This is a guest post from Mike Rousos ASP.NET Core 2.0 recently released and, with it, came some new templates, including new project templates for single-page applications (SPA) served from an...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7008741278","Type":"IssuesEvent","CreatedAt":"2017-12-19T16:38:01","Actor":"ColbyBurke","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2314","RelatedDescription":"Opened issue \"This site can’t be reached localhost refused to connect. (ASP.NET Core) + Angular + Swagger + SignalR\" (#2314) at aspnet/Home","RelatedBody":"Im getting the connection refused and I dont know why. Here is my \r\n**Startup.cs**\r\nnamespace AngularChat\r\n{\r\n    using AngularChat.Hubs;\r\n    using AngularChat.Services;\r\n    using AngularChat.Utils;\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.AspNetCore.Http;\r\n    using Microsoft.AspNetCore.Mvc;\r\n    using Microsoft.AspNetCore.Rewrite;\r\n    using Microsoft.AspNetCore.SpaServices.Webpack;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Microsoft.Extensions.Logging;\r\n    using Microsoft.Extensions.PlatformAbstractions;\r\n    using Swashbuckle.AspNetCore.Swagger;\r\n    using System.IO;\r\n\r\n    public sealed class Startup\r\n    {\r\n        public IConfigurationRoot Configuration { get; }\r\n\r\n        public Startup(IHostingEnvironment env)\r\n        {\r\n            var builder = new ConfigurationBuilder()\r\n                .SetBasePath(env.ContentRootPath)\r\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\r\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\r\n                .AddEnvironmentVariables();\r\n            Configuration = builder.Build();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n        {\r\n            app.UseAuthentication();\r\n\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n            loggerFactory.AddDebug();\r\n\r\n            var options = new RewriteOptions()\r\n                .AddRedirectToHttps();\r\n\r\n            app.UseRewriter(options);\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n                app.UseWebpackDevMiddleware(\r\n                    new WebpackDevMiddlewareOptions\r\n                    {\r\n                        HotModuleReplacement = true\r\n                    });\r\n            }\r\n            else\r\n            {\r\n                app.UseExceptionHandler(\"/Home/Error\");\r\n            }\r\n\r\n            app.UseStaticFiles();\r\n\r\n            app.UseSignalR(routes => routes.MapHub<ChatHub>(\"/chathub\"));\r\n\r\n#if DEBUG\r\n\r\n            app.UseSwagger();\r\n            app.UseSwaggerUI(c =>\r\n            {\r\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Chat API V1\");\r\n            });\r\n\r\n#endif\r\n\r\n            app.UseMvc(\r\n                routes =>\r\n                {\r\n                    routes.MapRoute(\r\n                        name: \"default\",\r\n                        template: \"{controller=Home}/{action=Index}/{id?}\");\r\n\r\n                    routes.MapSpaFallbackRoute(\r\n                        name: \"spa-fallback\",\r\n                        defaults: new\r\n                        {\r\n                            controller = \"Home\",\r\n                            action = \"Index\"\r\n                        });\r\n                });\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc();\r\n            services.AddSignalR();\r\n\r\n            services.AddAuthentication();\r\n\r\n            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\r\n\r\n            services.AddSingleton<ITimeService, TimeService>();\r\n            services.AddSingleton<IChatMessageStorage, ChatMessageStorage>();\r\n            services.AddSingleton<IChatMessageIdGenerator, ChatMessageIdGenerator>();\r\n            services.AddSingleton<INotificationService, NotificationService>();\r\n\r\n            services.AddScoped<IChatService, ChatService>();\r\n            services.AddScoped<IUserInfoProvider, UserInfoProvider>();\r\n\r\n            services.Configure<MvcOptions>(options =>\r\n            {\r\n                options.Filters.Add(new RequireHttpsAttribute());\r\n            });\r\n\r\n#if DEBUG\r\n\r\n            services.AddSwaggerGen(c =>\r\n            {\r\n                c.SwaggerDoc(\r\n                    \"v1\",\r\n                    new Info\r\n                    {\r\n                        Title = \"Chat API\",\r\n                        Version = \"v1\"\r\n                    });\r\n\r\n                var basePath = PlatformServices.Default.Application.ApplicationBasePath;\r\n                var xmlPath = Path.Combine(basePath, \"Web1.xml\");\r\n                c.IncludeXmlComments(xmlPath);\r\n            });\r\n\r\n#endif\r\n        }\r\n    }\r\n}"},{"Id":"7005125921","Type":"IssuesEvent","CreatedAt":"2017-12-19T00:08:51","Actor":"ajcvickers","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2313","RelatedDescription":"Opened issue \"Want to migrate from dotnet core 1.x to 2.0\" (#2313) at aspnet/Home","RelatedBody":"Originally filed as https://github.com/aspnet/EntityFrameworkCore/issues/10560 by @ankurjasoria\r\nMoving to aspnet/Home at request of @divega\r\n\r\nHi Team,\r\n\r\nI am migrating my project from dotnet core 1.x to 2.0  and when I am updating nuget package references so found below issue \r\n\r\nError : \r\n**NU1605\tDetected package downgrade: Microsoft.VisualStudio.Web.BrowserLink from 2.0.1 to 1.0.1. Reference the package directly from the project to select a different version. \r\n CenterManagementSystem.UI (>= 1.0.0) -> CenterManagementSystem.Platform (>= 1.0.0) -> Microsoft.AspNetCore.All (>= 2.0.3) -> Microsoft.VisualStudio.Web.BrowserLink (>= 2.0.1) \r\n CenterManagementSystem.UI (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.0.1)\tCenterManagementSystem.UI\tC:\\My Project\\HBI\\yoyo-center-management-system\\CenterManagementSystem\\DEV\\src\\CenterManagementSystem.UI\\CenterManagementSystem.UI.csproj**\r\n\r\nand I am sharing you my code screen shot regarding above issue as below \r\n\r\n![image](https://user-images.githubusercontent.com/4157756/34005829-2e35bd06-e122-11e7-8f14-7cd588c67414.png)\r\n\r\n\r\nPlease update me any solution or any other reference url regarding same."},{"Id":"7004658063","Type":"IssuesEvent","CreatedAt":"2017-12-18T21:51:51","Actor":"markrendle","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2312","RelatedDescription":"Opened issue \"EventSource? DiagnosticSource? Both?\" (#2312) at aspnet/Home","RelatedBody":"I'm seeing issues opened by @anurse across multiple repos regarding `EventSource` tracing (like https://github.com/aspnet/Security/issues/1518 for example), but no actual activity as yet; no trace of EventSource anywhere in MVC.\r\n\r\nI've been writing a bunch of code to consume `DiagnosticSource` tracing with the new `Activity` stuff lately, so I was kinda hoping those same repos would be adding `DiagnosticSource` support.\r\n\r\nIs there a long-term plan to support one over the other? They seem to do the same thing. Obviously on Windows `EventSource` writes to ETW, whereas on Linux I guess it's in-proc?\r\n\r\nAny guidance would be much appreciated."},{"Id":"7003943681","Type":"IssuesEvent","CreatedAt":"2017-12-18T19:03:33","Actor":"danroth27","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2311","RelatedDescription":"Opened issue \"Identity as a library\" (#2311) at aspnet/Home","RelatedBody":"Enabling ASP.NET Core Identity in an application today requires adding dozens of files and hundreds of lines of code. We provide this code for you in our templates, but if you want to add this code to an existing project you typically have to create a new project with the identity code and copy the code over. The perceived complexity of having so many files in the project is also pretty intimidating. \r\n\r\nThe goals of this effort are to:\r\n- Create a pre-built version of the identity code that you can add to your project as a NuGet package\r\n- Update the templates to use the prebuilt identity package by default\r\n- Add identity scaffolders so that you can easily add back all the code if you want full control\r\n- Isolate all of the identity code in a single folder so that it doesn't distract from your application logic.\r\n\r\nThe prebuilt library will include:\r\n1. Compiled razor pages and page models\r\n1. It's own layout and static resources\r\n"},{"Id":"7002891946","Type":"IssuesEvent","CreatedAt":"2017-12-18T15:31:37","Actor":"Boombasteg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2310","RelatedDescription":"Opened issue \"Can't get ASPNETCORE_ENVIRONMENT\" (#2310) at aspnet/Home","RelatedBody":"I set ASPNETCORE_ENVIRONMENT via Environment Variables or in code\r\n`Environment.SetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\", \"dev\");`\r\n\r\nBut when trying to read it:\r\n`var env = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\");`\r\nI'm getting null.\r\n\r\nHas anyone encountered a similar one?\r\nThanx."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7010391332","Type":"PullRequestEvent","CreatedAt":"2017-12-19T23:01:51","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1231","RelatedDescription":"Merged pull request \"Refactoring HubEndPointTests\" (#1231) at aspnet/SignalR","RelatedBody":"Cleaning up the HubEndPointTests file a little. Moving ~600 lines out of this file.\r\nGetting the Hubs out of this file and adding a a utils class as well. "},{"Id":"7010375180","Type":"IssuesEvent","CreatedAt":"2017-12-19T22:57:17","Actor":"mortenbirkelund","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1236","RelatedDescription":"Opened issue \"Does Chatsample work with core 2.0?\" (#1236) at aspnet/SignalR","RelatedBody":"I have tried to implement the example in order to get the presence part working in my core 2.0 project. But after implementation I get an error in PresenceHubLifetimeManager.cs on line 114\r\n\r\n`hub.Clients = new HubCallerClients(_hubContext.Clients, connection.ConnectionId);`\r\n\r\n> The type or namespace name 'HubCallerClients' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\nWill the sample only work in asp.net core 2.1 where signalr core is also released?\r\n\r\nThanks in advance for your help."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7010480142","Type":"PullRequestEvent","CreatedAt":"2017-12-19T23:29:36","Actor":"mistakenot","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7149","RelatedDescription":"Opened pull request \"HtmlHelper.DisplayTextFor uses DisplayAttribute of Enums.\" (#7149) at aspnet/Mvc","RelatedBody":"HtmlHelper.DisplayTextFor uses DisplayAttribute for Enum values.\r\n- Special case added for when value is Enum in file ModelExplorerExtensions.cs based off suggestions in original issue filing.\r\n- Tests added for enum with and without DisplayAttribute.\r\n\r\nAddresses #7033 "},{"Id":"7010397765","Type":"PullRequestEvent","CreatedAt":"2017-12-19T23:03:43","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7135","RelatedDescription":"Closed pull request \"Add support for areas to Razor Pages\" (#7135) at aspnet/Mvc","RelatedBody":"Fixes #6926"},{"Id":"7010397410","Type":"IssuesEvent","CreatedAt":"2017-12-19T23:03:38","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6926","RelatedDescription":"Closed issue \"Use Razor Pages in MVC area\" (#6926) at aspnet/Mvc","RelatedBody":"I'm trying to mix Razor Pages with MVC and by that I mean running a Razor Pages \"app\" inside an MVC area. So if I run the app below I would like `http://localhost:500` to return the standard MVC `HomeController` `Index` action. And if I add the area like this `http://localhost:5000/app` I would like the Razor Pages app to respond. Is this possible?\r\n\r\n- Areas\r\n  - App\r\n      - _Layout.cshtml\r\n      - _ViewImports.cshtml\r\n      - _ViewStart.cshtml\r\n      - Index.cshtml\r\n      - Index.cshtml.cs\r\n- Controllers\r\n- Models\r\n- Views\r\n- wwwroot\r\n- Program.cs\r\n- Startup.cs"},{"Id":"7010189148","Type":"IssuesEvent","CreatedAt":"2017-12-19T22:07:22","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7148","RelatedDescription":"Opened issue \"Use CompatSwitch feature to enable the areas feature for Razor Pages \" (#7148) at aspnet/Mvc","RelatedBody":"See further discussion here: https://github.com/aspnet/Mvc/pull/7135#discussion_r157335722\r\n\r\nEssentially have `RazorPagesOptions.EnableAreas` be driven by a compat switch (https://github.com/aspnet/Mvc/pull/7142) that is off by default."},{"Id":"7010171558","Type":"IssuesEvent","CreatedAt":"2017-12-19T22:02:57","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7147","RelatedDescription":"Opened issue \"Ensure RazorPages in an area are not route-able through root based paths when root directory and area root directory overlap\" (#7147) at aspnet/Mvc","RelatedBody":"See https://github.com/aspnet/Mvc/pull/7135#discussion_r157549019 for further discussion\r\n\r\nConsider this scenario:\r\n\r\n```\r\n/Areas/First.cshtml\r\n/Areas/MyArea/Pages/Second.cshtml\r\nwhere RootDirectory = /, AreaRootDirectory = /Areas\r\n```\r\n\r\nIn this case, we want to ensure that the two routes registered are /Areas/First and /MyArea/Second "},{"Id":"7009866418","Type":"PullRequestEvent","CreatedAt":"2017-12-19T20:49:04","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7121","RelatedDescription":"Closed pull request \"Improve logging - individual filters\" (#7121) at aspnet/Mvc","RelatedBody":""}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7009436690","Type":"PullRequestEvent","CreatedAt":"2017-12-19T19:08:35","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1536","RelatedDescription":"Opened pull request \"[WIP] Move identity into an Area in a library (using Razor Pages)\" (#1536) at aspnet/Identity","RelatedBody":"This PR is just to show my WIP and identify mistakes while we finish the razor pages in areas feature"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7009545997","Type":"PullRequestEvent","CreatedAt":"2017-12-19T19:33:40","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2228","RelatedDescription":"Merged pull request \"Remove use of Dangerous* Span APIs and use MemoryMarshal instead \" (#2228) at aspnet/KestrelHttpServer","RelatedBody":"Reopening https://github.com/aspnet/KestrelHttpServer/pull/2222 to rebase.\r\n\r\nSee https://github.com/dotnet/corefx/issues/25412#issuecomment-352176634\r\n\r\n**Depends on a package update to aspnet/Universe to go through** - https://github.com/aspnet/Universe/pull/717\r\n\r\n> /home/travis/build/aspnet/KestrelHttpServer/benchmarks/Kestrel.Performance/Kestrel.Performance.csproj : error NU1102: Unable to find package System.Security.Cryptography.Cng with version (>= 4.5.0-preview1-26016-05) [/home/travis/build/aspnet/KestrelHttpServer/KestrelHttpServer.sln]\r\n\r\n- SignalR doesn't use DangerousGetPinnableReference or DangerousTryGetArray (these APIs will be removed/changed).\r\n- Kestrel doesn't use DangerousTryGetArray\r\n- I couldn't find any other aspnet repo that relied on these two APIs.\r\n\r\ncc @pakrym, @davidfowl, @BrennanConroy, @KrzysztofCwalina, @natemcmaster, @jkotas, @joshfree"},{"Id":"7008901400","Type":"PullRequestEvent","CreatedAt":"2017-12-19T17:08:13","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2222","RelatedDescription":"Closed pull request \"Remove use of Dangerous* Span APIs and use MemoryMarshal instead\" (#2222) at aspnet/KestrelHttpServer","RelatedBody":"See https://github.com/dotnet/corefx/issues/25412#issuecomment-352176634\r\n\r\n**Depends on a package update to aspnet/Universe to go through** - https://github.com/aspnet/Universe/pull/717\r\n\r\n> /home/travis/build/aspnet/KestrelHttpServer/benchmarks/Kestrel.Performance/Kestrel.Performance.csproj : error NU1102: Unable to find package System.Security.Cryptography.Cng with version (>= 4.5.0-preview1-26016-05) [/home/travis/build/aspnet/KestrelHttpServer/KestrelHttpServer.sln]\r\n\r\n- SignalR doesn't use DangerousGetPinnableReference or DangerousTryGetArray (these APIs will be removed/changed).\r\n- Kestrel doesn't use DangerousTryGetArray\r\n- I couldn't find any other aspnet repo that relied on these two APIs.\r\n\r\ncc @pakrym, @davidfowl, @BrennanConroy, @KrzysztofCwalina, @natemcmaster, @jkotas, @joshfree"},{"Id":"7008899755","Type":"PullRequestEvent","CreatedAt":"2017-12-19T17:07:56","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2228","RelatedDescription":"Opened pull request \"Remove use of Dangerous* Span APIs and use MemoryMarshal instead \" (#2228) at aspnet/KestrelHttpServer","RelatedBody":"Reopening https://github.com/aspnet/KestrelHttpServer/pull/2222 to rebase.\r\n\r\nSee https://github.com/dotnet/corefx/issues/25412#issuecomment-352176634\r\n\r\n**Depends on a package update to aspnet/Universe to go through** - https://github.com/aspnet/Universe/pull/717\r\n\r\n> /home/travis/build/aspnet/KestrelHttpServer/benchmarks/Kestrel.Performance/Kestrel.Performance.csproj : error NU1102: Unable to find package System.Security.Cryptography.Cng with version (>= 4.5.0-preview1-26016-05) [/home/travis/build/aspnet/KestrelHttpServer/KestrelHttpServer.sln]\r\n\r\n- SignalR doesn't use DangerousGetPinnableReference or DangerousTryGetArray (these APIs will be removed/changed).\r\n- Kestrel doesn't use DangerousTryGetArray\r\n- I couldn't find any other aspnet repo that relied on these two APIs.\r\n\r\ncc @pakrym, @davidfowl, @BrennanConroy, @KrzysztofCwalina, @natemcmaster, @jkotas, @joshfree"},{"Id":"7008797012","Type":"IssuesEvent","CreatedAt":"2017-12-19T16:48:13","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2227","RelatedDescription":"Closed issue \"dotnet.exe restart\" (#2227) at aspnet/KestrelHttpServer","RelatedBody":"Hello,\r\n\r\nI've faced with strange situation - `dotnet.exe` hosted on IIS (Windows Server 2012 R2) is periodically shut down. \r\n\r\nWhile testing our application on high load we do see strange situations - periodically we do have long answer time from server (eg normal answer time is 300ms and long one is 15000 - 20000 ms).\r\n\r\nWhile investigating this we've found out that at this times dotnet.exe is restarted (one process is stopped and another is started), no errors, no logs, nothing is saying about the reason.\r\n\r\nSwitching stdout logs on does not help much, while test we do see that new files like `stdout_9648_20171219125646.txt` are created, with mostly the same content:\r\n\r\n```\r\nHosting environment: Production\r\nContent root path: C:\\inetpub\\wwwroot\r\nNow listening on: http://localhost:3214             --this line changes for each start\r\nApplication started. Press Ctrl+C to shut down. \r\nApplication is shutting down...                     --this line appears on process stopped\r\n```\r\n\r\nLooking the documentation & IIS settings I can't find why process is stopped and why it can be stopped."},{"Id":"7007726577","Type":"IssuesEvent","CreatedAt":"2017-12-19T13:27:09","Actor":"ili","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2227","RelatedDescription":"Opened issue \"dotnet.exe restart\" (#2227) at aspnet/KestrelHttpServer","RelatedBody":"Hello,\r\n\r\nI've faced with strange situation - `dotnet.exe` hosted on IIS (Windows Server 2012 R2) is periodically shut down. \r\n\r\nWhile testing our application on high load we do see strange situations - periodically we do have long answer time from server (eg normal answer time is 300ms and long one is 15000 - 20000 ms).\r\n\r\nWhile investigating this we've found out that at this times dotnet.exe is restarted (one process is stopped and another is started), no errors, no logs, nothing is saying about the reason.\r\n\r\nSwitching stdout logs does not help much, while west we do see that new files like `stdout_9648_20171219125646.txt` are created, with mostly the same content:\r\n\r\n```\r\nHosting environment: Production\r\nContent root path: C:\\inetpub\\wwwroot\r\nNow listening on: http://localhost:3214             --this line changes for each start\r\nApplication started. Press Ctrl+C to shut down. \r\nApplication is shutting down...                     --this line appears on process stopped\r\n```\r\n\r\nLooking the documentation & IIS settings I can't find why process is stopped and why it can be stopped."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7010827654","Type":"PullRequestEvent","CreatedAt":"2017-12-20T01:38:51","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1864","RelatedDescription":"Opened pull request \"Moved HtmlMarkupParser out of LegacyRazorDiagnostic\" (#1864) at aspnet/Razor","RelatedBody":"#1827 \r\n\r\nFYI @mkArtakMSFT "},{"Id":"7010577682","Type":"PullRequestEvent","CreatedAt":"2017-12-20T00:02:58","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1861","RelatedDescription":"Merged pull request \"Moved CSharpCodeParser out of LegacyRazorDiagnostic\" (#1861) at aspnet/Razor","RelatedBody":"#1827 \r\n\r\nFYI @mkArtakMSFT "},{"Id":"7010542548","Type":"PullRequestEvent","CreatedAt":"2017-12-19T23:50:39","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1863","RelatedDescription":"Merged pull request \"Include LineIndex and CharacterIndex when comparing SourceLocation\" (#1863) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/pull/1861#discussion_r157897818\r\n\r\nFYI @mkArtakMSFT "},{"Id":"7010512237","Type":"PullRequestEvent","CreatedAt":"2017-12-19T23:40:11","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1863","RelatedDescription":"Opened pull request \"Include LineIndex and CharacterIndex when comparing SourceLocation\" (#1863) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/pull/1861#discussion_r157897818\r\n\r\n"},{"Id":"7010476657","Type":"PullRequestEvent","CreatedAt":"2017-12-19T23:28:25","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1860","RelatedDescription":"Merged pull request \"Move DefaultTagHelperTargetExtension errors to use RazorDiagnosticFactory.\" (#1860) at aspnet/Razor","RelatedBody":"- Added tests validating these errors because we didn't have any before.\r\n\r\n#1827 \r\n\r\nFYI @mkArtakMSFT "}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6856182602","Type":"PullRequestEvent","CreatedAt":"2017-11-15T02:15:11","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Merged pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6856061013","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:32:45","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Opened pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6855974819","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:03:13","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Merged pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6909206856","Type":"IssuesEvent","CreatedAt":"2017-11-27T20:34:10","Actor":"pranavkm","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/282","RelatedDescription":"Opened issue \"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated\" (#282) at aspnet/Announcements","RelatedBody":"As part of some of our infrastructural changes, we're discontinuing the use of the following feeds and may remove them entirely in the future:\r\n* https://dotnet.myget.org/f/aspnetcore-ci-dev \r\n* https://dotnet.myget.org/f/aspnetcore-ci-release\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-dev\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-release\r\n\r\nIf you're currently using one of these feeds in your projects to pick up our daily builds, we recommend migrating to https://dotnet.myget.org/f/aspnetcore-dev.\r\n\r\nPlease use this discussion topic - https://github.com/aspnet/Home/issues/2292 - for feedback and questions. "},{"Id":"6854180246","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:26","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.5. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.5.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.5.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"943234846289289217","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/wEDxxFaCxu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":1,"RawContent":null},{"Id":"942039735207448576","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/OakzDOKxUB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"941295101271212032","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/aG5z9e5Rgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"941015999809249280","CreatedAt":"2017-12-13T18:44:32+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz in about 15 minutes on Mixer or Twitch for a two-hour LIVE .NET CODING session where he will answ… https://t.co/OC1nGXILjO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"938192857902354432","CreatedAt":"2017-12-05T23:46:22+00:00","UserScreenname":"aspnet","Text":"We're live for the #ASPNET Community Standup now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"938163679614214144","CreatedAt":"2017-12-05T21:50:26+00:00","UserScreenname":"aspnet","Text":"Join us for the #aspnet Community Standup today at 3:45 PM Pacific time - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":6,"RawContent":null},{"Id":"931580871378964481","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"aspnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/itxdVWOnG5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":7,"RawContent":null},{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":8,"RawContent":null},{"Id":"917877107904036865","CreatedAt":"2017-10-10T22:18:50+00:00","UserScreenname":"aspnet","Text":"Join us in a half hour (3:45 PM Pacific) for this week's #aspnet Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"915262407743647744","CreatedAt":"2017-10-03T17:08:57+00:00","UserScreenname":"aspnet","Text":"We're live at https://t.co/4Ioo9jNSN2 for the exciting #SignalR deep dive. Join us now!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"915242491774869504","CreatedAt":"2017-10-03T15:49:49+00:00","UserScreenname":"aspnet","Text":"Join us for some #SignalR Core demos at 10 AM PDT (UTC-7) on #ASPNET Community Standup w/ SignalR dev @moozzyk.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":26,"RawContent":null},{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2017-12-20T05:30:12.4130615Z","RunDurationInMilliseconds":10074}