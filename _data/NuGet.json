{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11049749222","Type":"PullRequestEvent","CreatedAt":"2019-12-10T00:48:20","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7758","RelatedDescription":"Opened pull request \"[MSA] Redirect to home page for enabling 2FA\" (#7758) at NuGet/NuGetGallery","RelatedBody":"Addressing a minor fix for redirecting to home page(for redirected pages after authentication) for encouraging 2FA."},{"Id":"11049462125","Type":"IssuesEvent","CreatedAt":"2019-12-09T23:48:51","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7757","RelatedDescription":"Opened issue \"[PackageType]Update search and catalog API docs\" (#7757) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11049458191","Type":"IssuesEvent","CreatedAt":"2019-12-09T23:48:04","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7756","RelatedDescription":"Opened issue \"[PackageType]Add functional test to search for pre-existing package typed package\" (#7756) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11049456788","Type":"IssuesEvent","CreatedAt":"2019-12-09T23:47:46","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7755","RelatedDescription":"Opened issue \"[PackageType]Add E2E test to push and then search by a DotnetTool package\" (#7755) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11049418716","Type":"IssuesEvent","CreatedAt":"2019-12-09T23:39:55","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7754","RelatedDescription":"Opened issue \"[PackageType]Add package filtering to Azure Search Service and query parameter\" (#7754) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11049397587","Type":"IssuesEvent","CreatedAt":"2019-12-09T23:35:37","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7753","RelatedDescription":"Opened issue \"[PackageType]Update Azure Search models in include [Filterable] package type\" (#7753) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11049395674","Type":"IssuesEvent","CreatedAt":"2019-12-09T23:35:15","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7752","RelatedDescription":"Opened issue \"[PackageType]Rebuild index on all environments\" (#7752) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11048370240","Type":"IssuesEvent","CreatedAt":"2019-12-09T21:00:39","Actor":"dannyvv","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7751","RelatedDescription":"Opened issue \"[Proposal] Add api endpoint to retreive the list of files that are in each .nupkg archive\" (#7751) at NuGet/NuGetGallery","RelatedBody":"# Add api endpoint to retrieve the file list of a NuGet package\r\n\r\nThis is a proposal to expose the list of files (and their file sizes) on the NuGet server api.\r\n\r\n## Motivation\r\nThere are various use cases for having the list of files in a NuGet package. This proposal lists them in detail [below](#UsecasesofthisApi). This proposal is currently made to satisfy the need to optimize the build to avoid downloading all the packages before the build and have the build engine be the NuGet client that only download packages that are used by the build and the download happens interleaved during the build.\r\n\r\nThis might benefit other clients as well since if the list of files is exposed, one can create an implementation of [NuGet.Packaging.PackageReaderBase](https://github.com/NuGet/NuGet.Client/blob/48f67796ff38e98e3dfe4ab55fce000577b74fea/src/NuGet.Core/NuGet.Packaging/PackageReaderBase.cs) that doesn't need to download the whole .nupk file. It just needs to use this proposed api and the existing exposed [.nuspec](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/api/package-base-address-resource.md#download-package-manifest-nuspec) file.\r\n\r\n## Spec\r\n\r\nThis will add a new endpoint on the [Package Content](https://docs.microsoft.com/en-us/nuget/api/package-base-address-resource) family of endpoints. \r\nThe spec already defines downloading of the [`.nupkg` file](https://docs.microsoft.com/en-us/nuget/api/package-base-address-resource#download-package-manifest-nuspec) and the [`.nuspec` file](https://docs.microsoft.com/en-us/nuget/api/package-base-address-resource#download-package-manifest-nuspec)\r\nThere also have been extensions proposed on this api for icons and licenses\r\n> Please correct me if I'm wrong on the extra ones...\r\n\r\nSo an extra entry here for a new JSON document with the following Package Content based URL:\r\n\r\n    GET {@id}/{LOWER_ID}/{LOWER_VERSION}/packageContents.json\r\n\r\nThis will return a json document which contains a property called `packageEntries`.\r\nThe `packageEntries` element is a JSON array of JSON objects, each object representing a `packageEntry`.\r\n\r\nName                    | Type                       | Required | Notes\r\n----------------------- | -------------------------- | -------- | -----\r\npackageEntries          | array of object            | yes      | Each entry is a 'packageEntry'\r\n\r\nThe `packageEntry` leaf element is a JSON object with the following properties:\r\n\r\nName                    | Type                       | Required | Notes\r\n----------------------- | -------------------------- | -------- | -----\r\nfullName                | string                     | yes      | The full relative path in the package.\r\nlength                  | integer                    | yes      | The size of the file in bytes |\r\n\r\nThe contents of `fullName` must use `/` as a path separator to match the paths for [IPackageCoreReader](https://github.com/NuGet/NuGet.Client/blob/f7e4a189c85fc6cfcc2d3f6b3d94079125adfe91/src/NuGet.Core/NuGet.Packaging/Core/IPackageCoreReader.cs)\r\n\r\nThe `fullName` must also match the final extracted layed out on disk format. NuGet uses custom path encoding in the zip files. The paths here should be unencoded i.e. the api should return: `lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.dll`, not `lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.dll` as it is in the zip file.\r\n\r\n> I chose to use the names currently exposed on nuget.org. As in this [sample](https://api.nuget.org/v3/catalog0/data/2018.10.15.01.11.37/newtonsoft.json.3.5.8.json). I have no preference for any naming scheme here.\r\n\r\n> The zip archive stores extra fields. The current nuget.org [packageEntries field](https://api.nuget.org/v3/catalog0/data/2018.10.15.01.11.37/newtonsoft.json.3.5.8.json) exposes these extra fields as well. They are not strictly necesary for the use cases below, but they might be useful. I have left them off for now to make it easier for implementors.\r\n\r\n\r\n\r\n> This option hopefully should not add too much of a burden to existing service implementation as sibling field  `dependencyGroups` is exposed here which is only available in the 'nuspec' file, which has to be extracted from the full zip file that is uploaded.\r\n\r\n## Sample request\r\n\r\n    GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/6.0.4/packageContents.json\r\n\r\n```json\r\n{\r\n  \"count\": 19,\r\n  \"packageEntries\": [\r\n    {\r\n      \"fullName\": \"_rels/.rels\",\r\n      \"length\": 500\r\n    },\r\n    {\r\n      \"fullName\": \"Newtonsoft.Json.nuspec\",\r\n      \"length\": 682\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net20/Newtonsoft.Json.dll\",\r\n      \"length\": 493056\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net20/Newtonsoft.Json.xml\",\r\n      \"length\": 516034\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net35/Newtonsoft.Json.dll\",\r\n      \"length\": 430080\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net35/Newtonsoft.Json.xml\",\r\n      \"length\": 459802\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net40/Newtonsoft.Json.dll\",\r\n      \"length\": 493056\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net40/Newtonsoft.Json.xml\",\r\n      \"length\": 478726\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net45/Newtonsoft.Json.dll\",\r\n      \"length\": 502272\r\n    },\r\n    {\r\n      \"fullName\": \"lib/net45/Newtonsoft.Json.xml\",\r\n      \"length\": 478726\r\n    },\r\n    {\r\n      \"fullName\": \"lib/netcore45/Newtonsoft.Json.dll\",\r\n      \"length\": 446976\r\n    },\r\n    {\r\n      \"fullName\": \"lib/netcore45/Newtonsoft.Json.xml\",\r\n      \"length\": 448530\r\n    },\r\n    {\r\n      \"fullName\": \"lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.dll\",\r\n      \"length\": 387072\r\n    },\r\n    {\r\n      \"fullName\": \"lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.xml\",\r\n      \"length\": 425586\r\n    },\r\n    {\r\n      \"fullName\": \"lib/portable-net45+wp80+win8+wpa81/Newtonsoft.Json.dll\",\r\n      \"length\": 444928\r\n    },\r\n    {\r\n      \"fullName\": \"lib/portable-net45+wp80+win8+wpa81/Newtonsoft.Json.xml\",\r\n      \"length\": 448549\r\n    },\r\n    {\r\n      \"fullName\": \"tools/install.ps1\",\r\n      \"length\": 3229\r\n    },\r\n    {\r\n      \"fullName\": \"package/services/metadata/core-properties/87a0a4e28d50417ea282e20f81bc6477.psmdcp\",\r\n      \"length\": 735\r\n    },\r\n    {\r\n      \"fullName\": \"[Content_Types].xml\",\r\n      \"length\": 566\r\n    },\r\n    {\r\n      \"fullName\": \".signature.p7s\",\r\n      \"length\": 9463\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n> ### Alternative way to expose the data:\r\n> Expose the `packageContents` leaf element on the [package details catalog items](https://docs.microsoft.com/en-us/> nuget/api/catalog-resource#item-types). Since this is a new introduction it would have to be an > optional element, if we ref.\r\n> > This option hopefully should not add too much of a burden to existing service implementation as\r\n> > sibling property `dependencyGroups` is exposed here which is only available in the 'nuspec' file, which > has to be extracted from the full zip file that is uploaded.\r\n\r\n\r\n## Use cases of this Api\r\n### Build engines with fine grained dependency management\r\nBuild engines with fine grained dependency management like [BuildXL](https://github.com/microsoft/buildxl) and [Bazel](bazel.io) and static graphs can benefit from having detailed file information from a NuGet package without downloading the package. \r\n\r\nFor these kind of build engines if during graph construction they can only download the metadata from the package to obtain its semantics (i.e. for NuGet this is encoded in the nuspec and the folder structure on disk inside the NuGet ) \r\n*without* fully downloading the zip file. These build engines can highly optimize the download and extraction of the consumed packages. \r\n\r\nFrequently one doesn't build the entire tree and pass a 'filter expression' to the build. By either building only certain projects and their downstream dependents and/or upstream dependencies. Filter by a particular aspect like: codegen, compile, build, test, packaging. etc. Or for particular platforms or configurations. This allows the engine to optimize and not download any packages that are not needed by the current build. \r\n\r\nSince these engines work with fine grained file dependencies they can ensure the packages are downloaded 'just in time' when the dependents actually need them. For example usually the first unittest starts somewhere half way during the build since they need to wait until some of their code dependencies are compiled, the engine can delay downloading of the packages needed to run the unittests until there are resources available or they are really needed to make build progress.\r\n\r\nThese engines have highly optimized schedulers that try to maximize the machine utilization but not overload it. They are great at mixing CPU heavy jobs with IO heavy operations to reduce overall build times. Package restore is usually pretty IO heavy, so the engine can interleave CPU heavy tasks like C++ compilation with the downloading of the packages.\r\n\r\nThese engines also tend to work distributed. I.e. the build is spread over more than one computer (workers). Currently if the restore has to happen before the build, the restore typically happens on every computer that is part of a distributed build. This can be up to 25 machines for large builds. This causes packages that are only used by one project to be downloaded on every worker machine, where they are only consumed on a single machine where that one job that needs it is run. \r\nHaving the engine control the download of the package allows the engine to optimize this and only download the packages as needed on machines and can even optimize the distribution which jobs run on which machines to optimize \r\n\r\n### Virtual file system package client\r\nVirtual File System implementations are getting traction across various platforms: \r\n* [ProjFs](https://github.com/microsoft/ProjFS-Managed-API)\r\n* [FUSE](https://github.com/libfuse/libfuse)\r\n\r\nVarious dev experiences have been built on top of these virtual file systems. These vary from complete dev environments being virtualized for source, packages intermediates and outputs. To just certain components like just the source files. For example [VfsForGit](https://github.com/Microsoft/VFSForGit). \r\n\r\nOne can envision a similar implementation for NuGet packages as well. Where the client on restore would lay out virtual entry points for the expanded packages on disk without downloading the full archive. When any of the files for a given package would be accessed by any client the virtual filesystem implementation could only then download that particular nupkg archive and extract it and place it on disk.\r\nThis would reduce the number of downloads\r\n\r\n### Reverse file lookup helpers\r\nOne can envision a search tool that tries to find files in NuGet packages. For example to answer the question: Which packages have: `System.Net.Http.dll` embedded? Hint: There are many :)\r\nToday that search operation would have to pull all .nupkg files from the server.\r\n\r\n## Workarounds\r\nThe workaround for not having this api is to partially download the zip file and extract the file list from there. This would be pretty easy to do if the zip file had the file header at the start of the file, but the [zip file format](https://en.wikipedia.org/wiki/Zip_(file_format)) has the file manifest at the end of the file. Therefore one has to use [HTTP range](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.12) queries. This is all doable like it is done in [MiniZip](https://github.com/joelverhagen/MiniZip) but one has to either redo all the authentication logic and throttling logic that is implemented in [Nuget.Packaging](https://github.com/NuGet/NuGet.Client/tree/dev/src/NuGet.Core/NuGet.Packaging) or extend Nuget.Packaging to support this.\r\nOne can also assume that there might be extra server load as one needs to download more chunks from the zip file that strictly is encoded in the file table and the server implementation might not be as efficient as downloading a single resource and the range operations likely will bypass any caching layers on the HTTP stack.\r\n\r\n## Potential Future extensions\r\n### Include file hash\r\nIf in the future the each file in the returned file list could also carry an optional content hash (which algo tbd). \r\n\r\nName                    | Type                       | Required | Notes\r\n----------------------- | -------------------------- | -------- | -----\r\nfileHash                | string                     | no       | The hash of the file, encoding using [standard base 64](https://tools.ietf.org/html/rfc4648#section-4)\r\nfileHashAlgorithm       | string                     | no       |\r\n\r\n> Potentially the fileHashAlgorithm can be a property of `packageContents` to not have to replicate it so many times.\r\n\r\nThis can help build engines with reliable cache implementations to perform cache lookups without having to download the nupkg as well. This will allow them to check if they have the results in the cache. \r\nFor example if a NuGet package contains 'system.xyz.dll' with hash 'hXYZ' and it takes file 'a.cs' with hash 'hACS'. A  build engine with a cache can check to see if the local cache (or the remote shared cache) already contains the output file 'a.dll' further reducing NuGet downloads.\r\n### Individual file download\r\nOften only a few files are needed from a package. Build engines (or NuGet clients) could decide to optimize their workflow by either downloading an individual file(s), or the whole archive.\r\n\r\nName                    | Type                       | Required | Notes\r\n----------------------- | -------------------------- | -------- | -----\r\ndownloadUrl             | string                     | no       | The url where this file can be downloaded from\r\n"},{"Id":"11048120220","Type":"PullRequestEvent","CreatedAt":"2019-12-09T20:27:36","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7750","RelatedDescription":"Opened pull request \"[Hotfix] Revert to ServerCommon 2.58.0\" (#7750) at NuGet/NuGetGallery","RelatedBody":"Reverting to 2.58.0 of ServerCommon libraries until NuGet.Jobs has pulled in the latest version (2.60.0 or later).\r\n\r\nAddress https://github.com/NuGet/NuGetGallery/issues/7747."},{"Id":"11038992515","Type":"IssuesEvent","CreatedAt":"2019-12-08T17:31:43","Actor":"yishaigalatzer","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7749","RelatedDescription":"Opened issue \"[WIP - Still editing] Stats: Community package lists should collapse package groups\" (#7749) at NuGet/NuGetGallery","RelatedBody":"### Issue\r\nThe package stats page https://www.nuget.org/stats/packages attempts to show the top 100 community packages. However many packages are distributed in groups, where if one of the popular packages at the root is installed it will bring the rest of the group with it. This creates a bias in the list towards popular packages that are broken down into individual components.\r\n\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. On this URL '...'\r\n2. Perform this operation '...'\r\n3. See error\r\n\r\n### Expected behavior\r\nA clear and concise description of what you expected to happen.\r\n\r\n### Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n### Additional context\r\nAdd any other context about the problem here."},{"Id":"11034810894","Type":"IssuesEvent","CreatedAt":"2019-12-07T08:48:53","Actor":"donnie-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7748","RelatedDescription":"Opened issue \"I Can't delete a new create package\" (#7748) at NuGet/NuGetGallery","RelatedBody":"@LuGuangguang commented on [Tue Nov 26 2019](https://github.com/NuGet/Home/issues/8859)\n\nI learn to how to create a package.When I had public a package,I want to delete this. But I can't by the URL \"https://docs.microsoft.com/zh-cn/nuget/quickstart/create-and-publish-a-package-using-visual-studio-net-framework\".This is no the delete button.\r\n \r\nthis doc\r\n![PHZE(IIAT (%RF51${(RNDR](https://user-images.githubusercontent.com/34500722/69702479-47da2a00-112a-11ea-916c-46b7e5464878.jpg)\r\n\r\nthis my project\r\n![L9%FP{ AT56MX)A80PD@3EV](https://user-images.githubusercontent.com/34500722/69702619-98ea1e00-112a-11ea-910e-246141aae206.png)\r\n\r\nThank you!\r\n\r\n\r\n\r\n\n\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11050439342","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:16:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8898","RelatedDescription":"Opened issue \"Build a free threaded IVS Package Installer/Uninstaller service\" (#8898) at NuGet/Home","RelatedBody":"Child of: https://github.com/NuGet/Home/issues/8896"},{"Id":"11050436652","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:16:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8897","RelatedDescription":"Opened issue \"Design a free threaded IVS Package Installer/Uninstaller service\" (#8897) at NuGet/Home","RelatedBody":""},{"Id":"11050430328","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:14:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8896","RelatedDescription":"Opened issue \"Free threaded implementation of IVS Package Installer/Uninstaller services\" (#8896) at NuGet/Home","RelatedBody":"Related: \r\n\r\nhttps://github.com/NuGet/Home/issues/8892\r\n\r\n- [ ] Design work\r\n- [ ] Review\r\n- [ ] Implementation. "},{"Id":"11049812222","Type":"IssuesEvent","CreatedAt":"2019-12-10T01:01:36","Actor":"buddhashrestha","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8895","RelatedDescription":"Opened issue \"How to install dependencies of a referenced project?\" (#8895) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version: 5.3.1.6268\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI have two projects (Project A and Project B) and both have NuGet.config inside the directory where the solution file exists. Project A is dependent on Project B and according to my requirement, I have to reference Project B in Project A under another folder. So I create the following structure to setup Project A:\r\n\r\n- **Solution ProjectB**\r\n      - ProjectB\r\n          - Program.cs\r\n          - ProjectB.csproj\r\n          - packages.config\r\n      - NuGet.config\r\n\r\nStandalone ProjectB builds and runs fine.\r\n\r\n- **Solution ProjectA**\r\n   - ProjectA\r\n        - Program.cs\r\n        - ProjectA.csproj\r\n        - packages.config\r\n   - NuGet.Config\r\n   - ComponentsFolder\r\n        - ProjectB\r\n             - XYZ.cs\r\n             - ProjectB.csproj\r\n             - packages.config\r\n             - NuGet.config \r\n\r\nNow, while trying to build ProjectA it fails because\r\n[ProjectA.zip](https://github.com/NuGet/Home/files/3942503/ProjectA.zip)\r\n[ProjectB.zip](https://github.com/NuGet/Home/files/3942504/ProjectB.zip)\r\n\r\n all the dependencies for ProjectA is installed, but the dependencies for Project B is not installed. I know this makes sense since the project is created for ProjectA and it will look it's packages.config. \r\n\r\nBut, I would like to know if there is any way NuGet will help me install the dependencies for ProjectB from ProjectA, without having to open ProjectB? \r\n\r\nI have attached the zip files of both the projects. Would be awesome if I could get some suggestion.\r\n\r\n"},{"Id":"11049199079","Type":"IssuesEvent","CreatedAt":"2019-12-09T22:59:55","Actor":"mattleibow","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8894","RelatedDescription":"Opened issue \"Supporting Nano Server and Windows Desktop\" (#8894) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen creating native libraries, there is no way to get NuGet to install a different set of native runtime assets when running on Nano Server vs Windows Desktop or Server Core.\r\n\r\nTypically, I would place my Win32 assets in the `runtimes/win-x64/native` directory and this works in most cases. However, Nano Server is both Win32 and not Win32. It is in the case that most binaries will work in both cases, but not in the case where I use some features not available on Nano Server. For example font subsetting using the FONTSUB.DLL.\r\n\r\nIt has been suggested in other issues that I should do some runtime detection for Nano Server and then not do something. This _could_ work, but will require a fair bit of effort - especially since the native library is a third party library.\r\n\r\nHaving a look around, I see a similar situation with Win32 and UWP assets. Technically, UWP is Windows, yet they have their own RID. In fact, UWP is the perfect example, as it is a `win10`, but has `nativeassets` of `uap10.0`: `runtimes/win10-x64/nativeassets/uap10.0/libSkiaSharp.dll`.\r\n\r\nThe case of UWP being a a TFM under `win` seems to make sense, but actually is is a bit wrong. The spec for the `nativeassets` specifies that pretty much any TFM can go there. If wee look at `/runtimes/{rid}/nativeassets/{txm}/` we can see that we could potentially add an iOS or Android native binary there. What is the point of having `/runtimes/win10-x64/nativeassets/xamarin.ios/libSkiaSharp`? That makes no actual sense. Even the concept of having uap under win10 is a bit weird. Why not have `/runtimes/uap10.0/`? Isn't that the who point of the runtimes folder? To select the correct native binaries for the runtime, based on the runtime? It looks to me if I have a native binary that works on both win10 and nano, then it should be fine to have it in `/runtimes/win10-x64/` and it will use the same in both places. But if not, then I should be splitting it up under the `nativeassets`.\r\n\r\nThe original issue for this feature was to distinguish UWP from Win10, but in actual fact, they were wanting to distinguish between a feature-set or subset of features of a platform. So the base is win10, and then we have UWP or Nano.\r\n\r\n> I opened this issue previously: ttps://github.com/NuGet/Home/issues/7375"},{"Id":"11049045046","Type":"IssuesEvent","CreatedAt":"2019-12-09T22:34:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8858","RelatedDescription":"Closed issue \"Odd dependency installation behavior\" (#8858) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used: nuget binary (Mac), Rider 2019.2 IDE (Mac), VS 2019 IDE (Win)\r\nNuGet version (x.x.x.xxx): 4.7.0.5148\r\ndotnet.exe --version (if appropriate): 3.0.100\r\nVS version (if appropriate): 2019\r\nOS version (i.e. win10 v1607 (14393.321)): MacOS Mojave 10.14.6\r\nWorked before? If so, with which NuGet version:  N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\nWe create and host NuGet packages in-house, with deep dependency trees.  I'm hoping you've seen this problem before and can provide some guidance.  I don't expect it to be a VS/Rider/etc bug, so much as we're doing something slightly wrong.\r\n\r\n**Scenario**:\r\n- Create “Package A” using the PackageReference style compilation of “contentFiles/any/any”.\r\n     - Create a sub-folder under “contentFiles/any/any” called “Source”.\r\n     - Place source code files in the “Source” folder.\r\n     - Have a dependency on “Package B”.\r\n- Create “Package B”, again using the PackageReference style, with a “Source” subfolder.\r\n     - Place source code files in its “Source” folder.\r\n- Pack and publish both.\r\n\r\n**Expectation**:\r\n- Install “Package A” (using the built-in NuGet package manager UI).\r\n     - Your project gains a “Source” folder.\r\n          - A’s source files are referenced into the new “Source” folder and compile with the project.\r\n     - “Package B” is also installed, since it’s a dependency.\r\n          - B’s source files are also referenced into the “Source” folder and compile with the project.\r\n- Package A is immediately consumable by the project because all of its code, and all of its dependency’s code, is present.\r\n\r\n**Actual**:\r\n- Install “Package A”.\r\n     - Your project gains a “Source” folder.\r\n          - A’s source files are referenced into the new “Source” folder and compile with the project.\r\n     - “Package B” is also installed, since it’s a dependency.\r\n          - B’s source files **are not referenced** into the “Source” folder.\r\n     - **Package A code cannot be compiled because the source for B is not in the project**.\r\n- Manually install “Package B”, same as you did for “A”.\r\n     - B’s source files are referenced into the new “Source” folder in the project.\r\n     - Now “Package A” can be compiled and consumed.\r\n\r\nIf sample nuspec files are needed, etc. please let me know.\r\n\r\nThanks"},{"Id":"11048698652","Type":"IssuesEvent","CreatedAt":"2019-12-09T21:44:23","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8893","RelatedDescription":"Opened issue \"Fix Install-DotnetCLI when cli/dotnet exists\" (#8893) at NuGet/Home","RelatedBody":"When merging to the latest dev branch and then running configure.ps1, the script fails if cli/dotnet already exists"},{"Id":"11048192625","Type":"IssuesEvent","CreatedAt":"2019-12-09T20:37:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8892","RelatedDescription":"Opened issue \"UI Delay - [PerfWatson] UIDelay: microsoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke|nuget.visualstudio.implementation.dll!NuGet.VisualStudio.PumpingJTF.WaitSynchronously\" (#8892) at NuGet/Home","RelatedBody":"There's a UI delay happening when the editor suggests a package to be installed. \r\n\r\nThere are 2 obvious issues here: \r\n\r\n1. We have a synchronous API which blocks the calling thread. \r\n1. We are being invoked on the UI thread, which we can't blame others for because frequently IVS sync APIs are invoked on the UI thread. \r\n\r\nThe correct solution here is a free threaded VS Package Installer service.\r\n\r\n\r\nmicrosoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke | 91.8%\r\n-- | --\r\nmicrosoft.visualstudio.languageservices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait | 91.4%\r\nmicrosoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction+<>c__DisplayClass_0.<Invoke>b__ | 91.4%\r\nmicrosoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InnerInvoke | 91.4%\r\nmicrosoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore | 91.4%\r\nmicrosoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction+<>c__DisplayClass_0.<InvokeCore>b__ | 91.4%\r\nmicrosoft.codeanalysis.editorfeatures.wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker | 91.2%\r\nmicrosoft.codeanalysis.editorfeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.Apply | 76.8%\r\nmicrosoft.codeanalysis.editorfeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations | 76.6%\r\nmicrosoft.codeanalysis.features.dll!Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`+InstallPackageAndAddImportOperation[System.__Canon].TryApply | 74.8%\r\nmicrosoft.codeanalysis.features.dll!Microsoft.CodeAnalysis.AddPackage.InstallPackageDirectlyCodeActionOperation.TryApply | 74.8%\r\nmicrosoft.visualstudio.languageservices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.TryInstallPackage | 74.8%\r\nmicrosoft.visualstudio.languageservices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.TryInstallAndAddUndoAction | 74.8%\r\nmicrosoft.visualstudio.languageservices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.TryInstallPackage | 74.8%\r\nnuget.visualstudio.implementation.dll!NuGet.VisualStudio.VsPackageInstaller.InstallLatestPackage | 67%\r\nnuget.visualstudio.implementation.dll!NuGet.VisualStudio.VsPackageInstaller.InstallPackage\r\n\r\n"},{"Id":"11048110707","Type":"IssuesEvent","CreatedAt":"2019-12-09T20:26:18","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8881","RelatedDescription":"Closed issue \"VS:  solution restore perpetually fails due to race condition\" (#8881) at NuGet/Home","RelatedBody":"Imagine `IVsSolutionRestoreService*.NominateProjectAsync(...)` is called on two threads concurrently.\r\n\r\n1.  Both threads call [`SolutionRestoreWorker.ScheduleRestoreAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L273) nearly simultaneously.\r\n2.  Both threads call [`InitializeAsync()`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L152), but only one thread will actually perform initialization.  The other thread will not wait for initialization to complete and will start a background worker thread on [`StartBackgroundJobRunnerAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L395).\r\n3.  The background thread calls into [`IsSolutionFullyLoadedAsync()`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L184) which assumes [`_vsSolution` has been initialized by the other thread](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L165).  If not, a `NullReferenceException` is thrown [here](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L189) and the background thread dies.\r\n4.  Since [a new background thread is never created](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L299) the `NullReferenceException` is perpetually rethrown [here](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L335) and restore fails until you close and reopen the solution and you are lucky enough to not hit the race condition again."},{"Id":"11047884561","Type":"IssuesEvent","CreatedAt":"2019-12-09T19:56:39","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8891","RelatedDescription":"Opened issue \"Get onboarded on xplat signing work and help as needed\" (#8891) at NuGet/Home","RelatedBody":""},{"Id":"11047868584","Type":"IssuesEvent","CreatedAt":"2019-12-09T19:54:33","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8678","RelatedDescription":"Closed issue \"Backporting P.C: Refactor into shared code\" (#8678) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): msbuild\r\n\r\nThis is a tracking issue associated with #8506 for tracking progress on refactoring all the common code between RestoreTask and RestoreCommand into shared libraries."},{"Id":"11047450954","Type":"IssuesEvent","CreatedAt":"2019-12-09T19:00:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7699","RelatedDescription":"Closed issue \"NuGet 4.9.2 fails to install packages from nuget.org with \"Canceled\" error\" (#7699) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\nNuGet version 4.9.2:\r\nOS: Windows\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nExecute package restore like that:\r\n\r\n```\r\nC:\\Teamcity\\BuildAgent\\tools\\NuGet.CommandLine.4.9.2\\tools\\NuGet.exe restore Z:\\work\\solution.sln -NoCache -Verbosity detailed -Source https://feed/nuget/ -Source -Source https://api.nuget.org/v3/index.json\r\n```\r\n\r\nRestore command fails with errors like that:\r\n\r\n```\r\nWARNING: Unable to find version '4.0.1' of package 'Microsoft.CSharp'.\r\n  https://api.nuget.org/v3/index.json: Canceled\r\n\r\nUnable to find version '4.0.1' of package 'Microsoft.CSharp'.\r\n  https://api.nuget.org/v3/index.json: Canceled\r\n  https://feed/nuget/: Package 'Microsoft.CSharp.4.0.1' is not found on source 'https://feed/nuget/'.\r\n```\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nDespite `-Verbosity detailed` was passed it does not bring any additional details about cause of `Canceled` task status. So how to investigate the cause of that?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-12-10T05:30:47.6504378Z","RunDurationInMilliseconds":2367}