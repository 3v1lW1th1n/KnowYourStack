{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7230354925","Type":"IssuesEvent","CreatedAt":"2018-02-12T04:20:40","Actor":"TheBlackCentipede","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16336","RelatedDescription":"Opened issue \"Dereferencing fixed byte array pointer into decimal crash the CLR with stack overflow error\" (#16336) at dotnet/coreclr","RelatedBody":"Decimal type is essentially a struct of 4 int as shown here: https://referencesource.microsoft.com/#mscorlib/system/decimal.cs,145\r\n\r\nI've specified byte array to allocate 16 bytes and then call Random.NextBytes on the buffer and then de-reference that byte array as Decimal, this causes the CoreCLR and Microsoft CLR to crash without exception being thrown or any console output being shown as to why this crashed.\r\n\r\n```cs\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace RandomSnippet\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(sizeof(decimal));\r\n            Console.WriteLine(Marshal.SizeOf<decimal>());\r\n            for (int I = 0; I < 1000000; I++)\r\n                TestSnippet();\r\n        }\r\n\r\n        static void TestSnippet()\r\n        {\r\n            try\r\n            {\r\n                var random = new Random();\r\n                var decArray = new byte[16];\r\n                decimal decimalVal;\r\n                unsafe\r\n                {\r\n                    fixed (byte* ptr = decArray)\r\n                    {\r\n                        random.NextBytes(decArray);\r\n                        decimalVal = *(decimal*)ptr;\r\n                        Console.WriteLine(decimalVal);\r\n                    }\r\n                }\r\n            }\r\n            catch (Win32Exception ex)\r\n            {\r\n                System.Diagnostics.Debugger.Break();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                System.Diagnostics.Debugger.Break();\r\n            }\r\n            catch\r\n            {\r\n                System.Diagnostics.Debugger.Break();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen investigating it further with CoreCLR, the error would be shown as followed:\r\n\r\n```\r\n0xc0000409\r\n-1073740791\r\nSTATUS_STACK_BUFFER_OVERRUN\r\nThe system detected an overrun of a stack-based buffer in this application. This overrun could potentially allow a malicious user to gain control of this application.\r\n```\r\n\r\nOn Mono CLR, this runs without a problem. When doing the same approach for double and float with properly sized buffer, it runs fine for all CLR. Decimal is the only one that is having this problem and it is inconsistent, because it would sometime dereference from byte array pointer just fine and when attempted the same thing, it would crash the CLR by chance.\r\n\r\nMy impression is that this is a bug with CLR implementation."},{"Id":"7230005716","Type":"PullRequestEvent","CreatedAt":"2018-02-12T01:16:55","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16335","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26212-01 (master)\" (#16335) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7229973159","Type":"PullRequestEvent","CreatedAt":"2018-02-12T00:57:10","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16302","RelatedDescription":"Merged pull request \"Fix stack trace population to get proper source/line info for tier 1 methods\" (#16302) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/16224"},{"Id":"7229973152","Type":"IssuesEvent","CreatedAt":"2018-02-12T00:57:10","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16224","RelatedDescription":"Closed issue \"Tiered jitting: StackTrace doesn't work correctly for tier1 methods\" (#16224) at dotnet/coreclr","RelatedBody":"**Repro:**\r\n\r\n1. Write this code in a .Net Core app:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Threading;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            CallMeAlot(true);\r\n            for(int i = 0; i < 1000; i++)\r\n            {\r\n                CallMeAlot(false);\r\n            }\r\n            CallMeAlot(true);\r\n            Console.ReadLine();\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        static void CallMeAlot(bool takeStackTrace)\r\n        {\r\n            Thread.Sleep(1);\r\n            if(takeStackTrace)\r\n            {\r\n                Capture();\r\n            }\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        static void Capture()\r\n        {\r\n            StackTrace trace = new StackTrace(true);\r\n            Console.WriteLine(trace);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n2)\tCompile the app in retail configuration\r\n3)\tRun it on .Net Core with tiered compilation enabled (set COMPLUS_EXPERIMENTAL_TieredCompilation=1)\r\n\r\nExpected output (what you get without tiered jitting):\r\n\r\n> Hello World!\r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 26\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 12\r\n> \r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> **_at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 26_**\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 17\r\n\r\nActual output (what you get with tiered jitting enabled):\r\n\r\n> Hello World!\r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 26\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 12\r\n> \r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> **_at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace)_**\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 17\r\n\r\n**Other Notes:**\r\n\r\nThis issue probably has the same underlying cause as #16145, but we fixed that issue with a very tailored fix that wasn't broad enough to activate in this scenario.\r\n\r\nThis issue is also related to #12110 - the work to resolve this issue is likely necessary but not sufficient to solve #12110. Tiered jitting only requires the native -> IL mapping information to work whereas profiler ReJIT has an additional IL -> IL mapping phase. #12110 requires fixing that additional IL->IL portion too."},{"Id":"7229953455","Type":"PullRequestEvent","CreatedAt":"2018-02-12T00:44:49","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16334","RelatedDescription":"Opened pull request \"StringComparer Create(culture, CompareOptions) overload\" (#16334) at dotnet/coreclr","RelatedBody":"Related to https://github.com/dotnet/corefx/issues/395\r\nTests PR - "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7230073281","Type":"IssuesEvent","CreatedAt":"2018-02-12T01:56:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8590","RelatedDescription":"Closed issue \"Naming Convention Issue\" (#8590) at dotnet/cli","RelatedBody":"## Minor Naming Fix for AntiForgery package\r\nCurrently -> AutoValidateAnti**f**orgeryTokenAttribute\r\nShouldBe -> AutoValidateAnti**F**orgeryTokenAttribute"},{"Id":"7229345334","Type":"IssuesEvent","CreatedAt":"2018-02-11T18:56:56","Actor":"abhaldar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8590","RelatedDescription":"Opened issue \"Naming Convention Issue\" (#8590) at dotnet/cli","RelatedBody":"## Minor Naming Fix for AntiForgery package\r\nCurrently -> AutoValidateAnti**f**orgeryTokenAttribute\r\nShouldBe -> AutoValidateAnti**F**orgeryTokenAttribute"},{"Id":"7227771461","Type":"PullRequestEvent","CreatedAt":"2018-02-11T00:33:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8579","RelatedDescription":"Closed pull request \"Log kernel version, product type and installation type, and libc version\" (#8579) at dotnet/cli","RelatedBody":"Add 5 telemetry datapoints:\r\n\r\n### (1) Kernel version\r\n#### Motivation\r\nIf we have an issue associated with a kernel or libc version we can assess the breadth of impact to help determine the priority of a fix, and whether the fix should go out in servicing. We may be able to use this datapoint to help prioritize features that only affect certain kernel versions.\r\n#### Alternatives\r\nWe have existing datapoints for distro name and version, but this the exact kernel version can vary. For example, we know \"ubuntu.14.04-x64\" but this encompasses a [range of kernel versions](http://people.canonical.com/~kernel/info/kernel-version-map.html).\r\n#### Source\r\nExisting API `RuntimeInformation.OSDescription`, which itself comes from `uname -srv` on Unix and `RtlGetVersion()` on Windows.\r\n#### Notes\r\nNot attempting to parse this value on the client, as the format is not consistent. It includes name, version, architecture, and kernel build date. Note that Windows subsystem for Linux (\"WSL\") can be distinguished by the string \"Microsoft\".\r\n#### Example values\r\n```\r\nAlpine.36\tLinux 4.9.60-linuxkit-aufs #1 SMP Mon Nov 6 16:00:12 UTC 2017\r\nCentos.73 \t Linux 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC 2017\r\nDebian.87 \t Linux 3.16.0-4-amd64 #1 SMP Debian 3.16.39-1+deb8u2 (2017-03-07)\r\nDebian.90 \t Linux 4.9.0-2-amd64 #1 SMP Debian 4.9.18-1 (2017-03-30)\r\nfedora.25 \t Linux 4.11.3-202.fc25.x86_64 #1 SMP Mon Jun 5 16:38:21 UTC 2017\r\nFedora.26 \t Linux 4.14.15-200.fc26.x86_64 #1 SMP Wed Jan 24 04:26:15 UTC 2018\r\nFedora.27 \t Linux 4.14.14-300.fc27.x86_64 #1 SMP Fri Jan 19 13:19:54 UTC 2018\r\nOpenSuse.423 \t Linux 4.4.104-39-default #1 SMP Thu Jan 4 08:11:03 UTC 2018 (7db1912)\r\nRedHat.69 \t Linux 2.6.32-696.20.1.el6.x86_64 #1 SMP Fri Jan 12 15:07:59 EST 2018\r\nRedHat.72 \t Linux 3.10.0-514.21.1.el7.x86_64 #1 SMP Sat Apr 22 02:41:35 EDT 2017\r\nRedHat.73 \t Linux 3.10.0-514.21.1.el7.x86_64 #1 SMP Sat Apr 22 02:41:35 EDT 2017\r\nSLES.12 \t Linux 4.4.103-6.38-default #1 SMP Mon Dec 25 20:44:33 UTC 2017 (e4b9067)\r\nsuse.422 \t Linux 4.4.49-16-default #1 SMP Sun Feb 19 17:40:35 UTC 2017 (70e9954)\r\nUbuntu.1404 \t Linux 3.19.0-65-generic #73~14.04.1-Ubuntu SMP Wed Jun 29 21:05:22 UTC 2016\r\nUbuntu.1604 \t Linux 4.13.0-1005-azure #7-Ubuntu SMP Mon Jan 8 21:37:36 UTC 2018\r\nUbuntu.1604.WSL \t Linux 4.4.0-43-Microsoft #1-Microsoft Wed Dec 31 14:42:53 PST 2014\r\nUbuntu.1610 \t Linux 4.8.0-45-generic #48-Ubuntu SMP Fri Mar 24 11:46:39 UTC 2017\r\nUbuntu.1704 \t Linux 4.10.0-19-generic #21-Ubuntu SMP Thu Apr 6 17:04:57 UTC 2017\r\nUbuntu.1710 \t Linux 4.13.0-25-generic #29-Ubuntu SMP Mon Jan 8 21:14:41 UTC 2018\r\nOSX1012 \t Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jan 11 22:59:40 PST 2018; root:xnu-3789.73.8~1/RELEASE_X86_64\r\nOSX1013 \t Darwin 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64\r\nWindows.10 \t Microsoft Windows 10.0.14393\r\nWindows.10.Core \t Microsoft Windows 10.0.14393\r\nWindows.10.Nano \t Microsoft Windows 10.0.14393\r\nWindows.7 \t Microsoft Windows 6.1.7601 S\r\nWindows.81 \t Microsoft Windows 6.3.9600\r\n```\r\n\r\n### (2) Windows Installation Type\r\n#### Motivation\r\nThis tells us the relative popularity of Server, Client, Server Core, and Nano which will help us inform product decisions (features, performance work, fixes, blogs, documentation, possibly polyfills).\r\n#### Alternatives\r\n We have an existing datapoint that gives us the OS version (for example \"win10-x64\"), but this can encompass several installation types.\r\n#### Source\r\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion@InstallationType`\r\n#### Example values\r\n```\r\nNano Server\r\nServer Core\r\nServer\r\nClient\r\n```\r\n\r\n### (3) Windows Product Type\r\n#### Motivation\r\nThis tells us the relative popularity of Windows SKU's such as Professional and Enterprise. Like Installation Type, this will help us inform investments and product decisions.\r\n#### Alternatives\r\nAs above, the existing datapoint does not tell us the SKU.\r\n#### Source\r\n`GetProductInfo()`\r\n#### Notes\r\nNot attempting to parse this on the client, as the bitmap can be extended in new Windows versions.\r\n#### Example values\r\n```\r\nEnterprise - \"4\" (0x4) \r\nProfessional - \"48\" (0x30)\r\n```\r\nSee https://msdn.microsoft.com/en-us/library/windows/desktop/ms724358(v=vs.85).aspx  for the full list.\r\n\r\n#### (4, 5) LibC release and version\r\n#### Motivation\r\nHelps decide whether we can take advantage of new libc features. Conversely helps inform deprecation decisions. Also, if there is a bug specific to certain libc versions, we can establish the level of impact.\r\n#### Alternatives\r\nExisting datapoints do not provide this information.\r\n#### Source\r\n`gnu_get_libc_version()` and `gnu_get_libc_release() `for glibc. For musl (Alpine) it seems one must execute `ldd –version | grep “version”`  so I have deferred this. We do have the Alpine kernel version. Also deferred macOS.\r\n#### Example values\r\n```\r\n2.22   stable\r\n2.23   stable\r\n```\r\n\r\n"},{"Id":"7227770140","Type":"PullRequestEvent","CreatedAt":"2018-02-11T00:32:37","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8580","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4918 into cli\" (#8580) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4918 into cli release/2.1.1xx branch"},{"Id":"7227769141","Type":"PullRequestEvent","CreatedAt":"2018-02-11T00:31:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8588","RelatedDescription":"Merged pull request \"Port Kernel Version telemetry to preview1\" (#8588) at dotnet/cli","RelatedBody":"Port https://github.com/dotnet/cli/pull/8579 to preview 1.\r\n\r\nPending shiproom approval."},{"Id":"7227763021","Type":"PullRequestEvent","CreatedAt":"2018-02-11T00:26:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8582","RelatedDescription":"Merged pull request \"Consume generic aspnetcore rpm installers\" (#8582) at dotnet/cli","RelatedBody":"This is the reaction PR required to ingest the aspnetcore generic rpm installers https://github.com/aspnet/Universe/pull/871\r\n\r\nThis is a breaking change so expect Prodcon to be potentially broken."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7227994914","Type":"PullRequestEvent","CreatedAt":"2018-02-11T03:28:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/648","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02511-01 (master)\" (#648) at dotnet/standard","RelatedBody":""},{"Id":"7227937564","Type":"IssuesEvent","CreatedAt":"2018-02-11T02:43:52","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/647","RelatedDescription":"Closed issue \"[Feature-Request] N-bit sized int and floating point types\" (#647) at dotnet/standard","RelatedBody":"I propose we should be able to have N-bit sized int and floating point types.\r\nHere is how it could work:\r\n\r\nObviously we already have the following:\r\n- int 1 / uint 1 (bool)\r\n- uint 8 (byte)\r\n- int 8 (sbyte)\r\n- uint 16, 32 and 64 (ushort, uint and ulong)\r\n- int 16, 32 and 64 (short, int and long)\r\n- float 32 (single)\r\n- float 64 (double)\r\n\r\nBut what about the following:\r\n- (u)int 2 (2 bits)\r\n- (u)int 4 (4 bits)\r\n- (u)int 128 (128 bits)\r\n- (u)int 256 (256 bits)\r\n- (u)int 2^n (2^n bits)\r\n- (float 1 makes no sense but you could still add it)\r\n- float 2 (2 bits)\r\n- float 4 (4 bits)\r\n- float 8 (8 bits)\r\n- float 16 (16 bits)\r\n- float 128 (128 bits)\r\n- float 256 (256 bits)\r\n- float 2^n (2^n bits)\r\n\r\nThe classes could be called the following:\r\nFor integers: `intj` where j is a power of 2 for a j bit integer\r\nFor unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer\r\nFor floats: `floatj` where j is a power of 2 for a j bit float\r\nAnd there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`\r\n\r\nWhy do I need this in my beloved c#?\r\n1. Because it will give you more/less precise floats to use\r\n2. It will give you more integers to use\r\n3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway\r\n\r\nWon't this ruin my IDE with millions of different type names?\r\n1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested"},{"Id":"7225871739","Type":"IssuesEvent","CreatedAt":"2018-02-10T01:47:23","Actor":"hamarb123","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/647","RelatedDescription":"Opened issue \"[Feature-Request] N-bit sized int and floating point types\" (#647) at dotnet/standard","RelatedBody":"I propose we should be able to have N-bit sized int and floating point types.\r\nHere is how it could work:\r\n\r\nObviously we already have the following:\r\n- int 1 / uint 1 (bool)\r\n- uint 8 (byte)\r\n- int 8 (sbyte)\r\n- uint 16, 32 and 64 (ushort, uint and ulong)\r\n- int 16, 32 and 64 (short, int and long)\r\n- float 32 (single)\r\n- float 64 (double)\r\n\r\nBut what about the following:\r\n- (u)int 2 (2 bits)\r\n- (u)int 4 (4 bits)\r\n- (u)int 128 (128 bits)\r\n- (u)int 256 (256 bits)\r\n- (u)int 2^n (2^n bits)\r\n- (float 1 makes no sense but you could still add it)\r\n- float 2 (2 bits)\r\n- float 4 (4 bits)\r\n- float 8 (8 bits)\r\n- float 16 (16 bits)\r\n- float 128 (128 bits)\r\n- float 256 (256 bits)\r\n- float 2^n (2^n bits)\r\n\r\nThe classes could be called the following:\r\nFor integers: `intj` where j is a power of 2 for a j bit integer\r\nFor unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer\r\nFor floats: `floatj` where j is a power of 2 for a j bit float\r\nAnd there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`\r\n\r\nWhy do I need this in my beloved c#?\r\n1. Because it will give you more/less precise floats to use\r\n2. It will give you more integers to use\r\n3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway\r\n\r\nWon't this ruin my IDE with millions of different type names?\r\n1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested"},{"Id":"7225726207","Type":"IssuesEvent","CreatedAt":"2018-02-10T00:34:37","Actor":"laksh-parab","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/646","RelatedDescription":"Opened issue \"Referencing  NET Standard 1.6 project causes web api to return json\" (#646) at dotnet/standard","RelatedBody":"This is one of the weird issue i have seen and here are the steps to reproduce\r\n\r\n1> Create new Web API project in VS 2017 with Target Framework 4.6.2\r\n2> Add Controller that returns a Stream\r\n```\r\npublic class ReportController : ApiController\r\n    {\r\n        [HttpGet]\r\n        public HttpResponseMessage Download()\r\n        {\r\n            var filePath = \"C:\\\\Report.xlsx\";\r\n            var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);\r\n            var result = new HttpResponseMessage(HttpStatusCode.OK)\r\n            {\r\n                Content = new StreamContent(fs)\r\n            };\r\n            result.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n            return result;\r\n        }\r\n    }\r\n```\r\n3> Run the application and invoke the api in IE 11 (use correct port #)\r\nhttp://localhost:40005/api/report/download\r\n\r\nThe browser should download a EXCEL file and you should be able to open EXCEL file.\r\n\r\n5> Stop visual studio\r\n\r\n5> In the same solution create a new project with target framework .NET Standard 1.6\r\n\r\n6> In the Web API Project, add project reference to newly created NET Standard library project\r\n\r\n7> Run the application and invoke api in IE 11\r\nhttp://localhost:40005/api/report/download\r\n\r\nNotice that browser will get json back instead of excel file.\r\n\r\nIf you try with google chrome then instead of json i get exception\r\n\r\n> Type 'System.Net.Http.StreamContent' cannot be serialized. Consider marking it with the DataContractAttribute attribute, and marking all of its members you want serialized with the DataMemberAttribute attribute. If the type is a collection, consider marking it with the CollectionDataContractAttribute. See the Microsoft .NET Framework documentation for other supported types.\r\n\r\nI don't know why just by referencing .NET Standard 1.6 project changes the behavior. If i remove the reference to .NET Standard 1.6 project then everything works fine.\r\n"},{"Id":"7225634063","Type":"PullRequestEvent","CreatedAt":"2018-02-09T23:57:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/645","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02509-01 (master)\" (#645) at dotnet/standard","RelatedBody":""},{"Id":"7224498474","Type":"PullRequestEvent","CreatedAt":"2018-02-09T19:05:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/645","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02509-01 (master)\" (#645) at dotnet/standard","RelatedBody":""},{"Id":"7224422064","Type":"PullRequestEvent","CreatedAt":"2018-02-09T18:49:05","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/644","RelatedDescription":"Merged pull request \"Update intellisense based on the 2-2-2018 doc build\" (#644) at dotnet/standard","RelatedBody":""},{"Id":"7224317716","Type":"PullRequestEvent","CreatedAt":"2018-02-09T18:26:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/644","RelatedDescription":"Opened pull request \"Update intellisense based on the 2-2-2018 doc build\" (#644) at dotnet/standard","RelatedBody":""},{"Id":"7222552877","Type":"IssuesEvent","CreatedAt":"2018-02-09T12:31:29","Actor":"Looooooka","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/643","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'System.ServiceModel.Security, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.'\" (#643) at dotnet/standard","RelatedBody":"Ported my library to .NET Standard\r\nReferenced it in a 4.6.2 .NET project.\r\nIf I use DnsEndpointIdentity in the library I get the exception.\r\nEven though it is supposedly compatible?\r\nTried referencing the System.IdentityModel and System.ServiceModel.Security dlls but it just doesn't work.\r\nAny idea which dll needs to be referenced in a .NET project for this to work?\r\nPerhaps something needs to be added to the app.config to make it use the 4.6.2 dlls when looking for this assembly reference?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7230261771","Type":"PullRequestEvent","CreatedAt":"2018-02-12T03:33:13","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27054","RelatedDescription":"Merged pull request \"Ensure services get removed\" (#27054) at dotnet/corefx","RelatedBody":"DeleteService can be called on a running service, it just pends the delete until reboot. So ensure we call it even when a test service cannot be stopped, so a failed test doesn't lead to an orphan service.\r\n\r\nThere's at least [one remaining case](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180211.04/workItem/System.ServiceProcess.ServiceController.Tests/analysis/xunit/System.ServiceProcess.Tests.ServiceControllerTests~2FPauseAndContinue )where a test can get jammed - although I can't repro it locally.\r\n\r\nRemove the stack tracking because it's no longer needed.\r\nAdd a description to help find the services."},{"Id":"7230242567","Type":"IssuesEvent","CreatedAt":"2018-02-12T03:23:57","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26453","RelatedDescription":"Closed issue \"Managed HttpConnection pooling for redirection\" (#26453) at dotnet/corefx","RelatedBody":"In the case of redirection for GET and PUT the connections are not being pooled. For HEAD there is a race condition that causes error if the connection is actually reused.\r\n\r\nThe intermittent failures on [AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection](https://github.com/dotnet/corefx/issues/23769) happen for HEAD requests in the following way:\r\n\r\n* In this test the HttpConnection used to serve HEAD requests are returned to the pool during the execution of SendAsync. Connections for GET and POST are not returned to the respective [HttpConnectionPool](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs#L381).\r\n* When a connection goes back to the pool it triggers a [read ahead task on the connection object](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs#L1145).\r\n* Later the pool is checked via [GetConnectionAsync](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnectionPool.cs#L66) if the read ahead task has not yet completed then the connection is re-used, see [IsUsable()](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnectionPool.cs#L508).\r\n* Reusing the connection triggers a call to [FillAsync](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs#L908) that tries to get data from the completed [read async task](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs#L941) but it returns zero and triggers an [IOException](https://github.com/dotnet/corefx/blob/67d240ed07342544cd5c09d1765952fe8c9d9036/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs#L962).\r\n\r\nReliable way to force the error described above can be found in #26421\r\n"},{"Id":"7230125651","Type":"PullRequestEvent","CreatedAt":"2018-02-12T02:25:03","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/26962","RelatedDescription":"Closed pull request \"DO NOT MERGE: test HttpClient cookie handling\" (#26962) at dotnet/corefx","RelatedBody":""},{"Id":"7230125084","Type":"PullRequestEvent","CreatedAt":"2018-02-12T02:24:43","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/27008","RelatedDescription":"Closed pull request \"DO NOT MERGE: test multiple cookie header handling\" (#27008) at dotnet/corefx","RelatedBody":""},{"Id":"7230123534","Type":"IssuesEvent","CreatedAt":"2018-02-12T02:23:52","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26985","RelatedDescription":"Closed issue \"SocketsHttpHandler: incorrect cookie behavior with redirects\" (#26985) at dotnet/corefx","RelatedBody":"When processing a redirect, the redirected request will be sent with cookies for both the initial request and the redirected request.  Should be only the latter."},{"Id":"7230123532","Type":"PullRequestEvent","CreatedAt":"2018-02-12T02:23:52","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26989","RelatedDescription":"Merged pull request \"SocketsHttpHandler: Fix some issues with cookie handling, and add cookie tests\" (#26989) at dotnet/corefx","RelatedBody":"Remove CookieHandler and integrate the cookie handling logic into HttpConnection, which fixes some issues with how cookies were handled.\r\n\r\nAdd a bunch of protocol tests for cookie handling.  Issues filed for failures in CurlHandler and WinHttpHandler.\r\n\r\nFixes #26984 \r\nFixes #26985 \r\n"},{"Id":"7230123524","Type":"IssuesEvent","CreatedAt":"2018-02-12T02:23:51","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26984","RelatedDescription":"Closed issue \"SocketsHttpHandler: container cookies are incorrectly handled if you add a Cookie header to the cookie collection\" (#26984) at dotnet/corefx","RelatedBody":"If you add a Cookie header via\r\n\r\n```csharp\r\n    requestMessage.Headers.Add(\"Cookie\", \"A=1\");\r\n```\r\n\r\nThis causes cookies from the cookie container to be appended using the \",\" separator, which is incorrect for cookies -- they use \";\" as a separator instead.\r\n\r\nWinHttpHandler appends the cookies properly."},{"Id":"7230087829","Type":"IssuesEvent","CreatedAt":"2018-02-12T02:04:41","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27018","RelatedDescription":"Closed issue \"Test failure in CI: System.Collections.Tests.LinkedList_Generic_Tests_string/AddBefore_LLNode_LLNode\" (#27018) at dotnet/corefx","RelatedBody":"https://mc.dot.net/#/user/tmat/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Frelease~2F2.1~2F/test~2Ffunctional~2Fcli~2F/76c888d757bf1e9d470ceb4b93d3d00b5be5d4ec/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.LinkedList_Generic_Tests_string~2FAddBefore_LLNode_LLNode"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7230486704","Type":"IssuesEvent","CreatedAt":"2018-02-12T05:29:25","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24774","RelatedDescription":"Opened issue \"Make OOP to use connection pool\" (#24774) at dotnet/roslyn","RelatedBody":"connection pool will make creating new connection to OOP almsot no cost at all. right now it is between 1-15ms based on how busy OOP is at the moment.\r\n\r\nthis should let feature writer to consume OOP easier than before when they need to make hundreds of connections."},{"Id":"7230337100","Type":"IssuesEvent","CreatedAt":"2018-02-12T04:10:56","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24768","RelatedDescription":"Closed issue \"Rename tuple members\" (#24768) at dotnet/roslyn","RelatedBody":"allow to rename tuple names\r\n\r\n    (int x, int y) s;\r\n\r\n - right click on `x`\r\n - select rename\r\n\r\nyou get this error \"You can not rename this element.\"\r\n\r\nOriginally I wanted to rename tuple member name from inherited member. \r\n\r\n    public override (Foo foo, Bar bar) Current => ...\r\n\r\nso renaming `foo` requires me to rename base thus rename every where else manually.\r\n\r\n---\r\n\r\nEither allow inherited tuple member to have different name, or give us option to easily rename tuple member names.\r\n"},{"Id":"7230180819","Type":"PullRequestEvent","CreatedAt":"2018-02-12T02:53:25","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24773","RelatedDescription":"Opened pull request \"Fix UseLocalFunction when converting a single-line lambda.\" (#24773) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/23872"},{"Id":"7230145242","Type":"IssuesEvent","CreatedAt":"2018-02-12T02:35:18","Actor":"PolywickStudio","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24772","RelatedDescription":"Opened issue \"Microsoft.CodeAnalysis.Common - need NetStandard 2.0 version\" (#24772) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft.CodeAnalysis.Common - 2.6.1\r\n\r\n**Steps to Reproduce**:\r\n1. Add Microsoft.CodeAnalysis.Common to dotnet core 2.0 project. \r\n2. Deploy project on Linux or Windows.\r\n3. Project fails to load in Linux, Windows fresh install. \r\n\r\n**Expected Behavior**:\r\nError due to dependency on netstandard1.3\r\n\r\n**Actual Behavior**:\r\nNeed a version that compiles or installs on dotnet core 2.0 \r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7229555842","Type":"PullRequestEvent","CreatedAt":"2018-02-11T20:54:17","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5379","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5379) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7229533580","Type":"PullRequestEvent","CreatedAt":"2018-02-11T20:41:40","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5376","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr\" (#5376) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7229147250","Type":"PullRequestEvent","CreatedAt":"2018-02-11T17:06:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5378","RelatedDescription":"Opened pull request \"Add handling of multiple CMake installations in probe-win (#9980)\" (#5378) at dotnet/corert","RelatedBody":"curl https://github.com/dotnet/coreclr/commit/6c73fd9440a68f064f4767347a4401155ee88899.patch | git am -p 4 --directory='src/Native/' --reject"},{"Id":"7229126636","Type":"PullRequestEvent","CreatedAt":"2018-02-11T16:55:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5372","RelatedDescription":"Merged pull request \"Improve CMake detection on Windows when not in PATH\" (#5372) at dotnet/corert","RelatedBody":"In CMake v10.2, the key `hklm:\\SOFTWARE\\Kitware` returns:\r\n\r\n```powershell\r\n    Hive: HKEY_LOCAL_MACHINE\\SOFTWARE\\Kitware\r\n\r\nName                           Property\r\n----                           --------\r\nCMake                          InstallDir : C:\\Program Files\\CMake\\\r\n```\r\n\r\nwith no space after `CMake` and property name `InstallDir`,\r\ninstead of `'(default)'`."},{"Id":"7228340362","Type":"PullRequestEvent","CreatedAt":"2018-02-11T08:09:14","Actor":"Blealtan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5377","RelatedDescription":"Opened pull request \" Intrinsic call to RuntimeHelpers.InitializeArray implemented.\" (#5377) at dotnet/corert","RelatedBody":"`RuntimeHelpers.InitializeArray` is now implemented as a call to LLVM intrinsic `llvm.memcpy.p0i8.p0i8.i32`, which copies from generated global constant to provided target array.\r\n\r\nCurrently the base size of the array object is hard-coded to 8, since no EEType is provided in the intrinsic call. Is there anyway to get the EEType of the object on stack? I don't think the current working around is doing any good, except it's working."},{"Id":"7228215513","Type":"PullRequestEvent","CreatedAt":"2018-02-11T06:30:53","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5376","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5376) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7228123783","Type":"PullRequestEvent","CreatedAt":"2018-02-11T05:15:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5375","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr\" (#5375) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7228061465","Type":"PullRequestEvent","CreatedAt":"2018-02-11T04:21:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5375","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5375) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7227637838","Type":"IssuesEvent","CreatedAt":"2018-02-10T22:55:44","Actor":"qmfrederik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5374","RelatedDescription":"Opened issue \"[Type] is missing structure marshalling data\" (#5374) at dotnet/corert","RelatedBody":"When compiling one of our programs using CoreRT, I get the following runtime exception:\r\n\r\n```\r\nUnhandled Exception: EETypeRva:0x010842E0: [Type] is missing structure marshalling data.\r\n  To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file.\r\n  For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at [program]!<BaseAddress>+0x21452e\r\n   at System.Runtime.InteropServices.Marshal.OffsetOf(Type, String) + 0x5e\r\n   at System.Runtime.InteropServices.Marshal.OffsetOf[T](String) + 0x35\r\n```\r\n\r\nHowever, there's a `rd.xml` file  which contains the `MarshalStructure` directive:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application  >\r\n    <Assembly Name=\"[Assembly]\">\r\n      <Type Name=\"[Type]\" MarshalStructure=\"Required All\"/>\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\nI've done some tests to make sure my `rd.xml` file is being picked up - for example, changing the Type name to a non-existing type will cause `dotnet publish` to fail, so it looks like `rd.xml` is being processed correctly.\r\n\r\nI'm referencing `rd.xml` like this in my `.csproj` file:\r\n\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-26210-01\" />\r\n    <RdXmlFile Include=\"rd.xml\" />\r\n  </ItemGroup>\r\n```\r\n\r\nI'd be happy to troubleshoot but not sure where to look next."},{"Id":"7227527739","Type":"IssuesEvent","CreatedAt":"2018-02-10T21:43:00","Actor":"qmfrederik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5373","RelatedDescription":"Opened issue \"MissingMethod: Marshal.ThrowExceptionForHR\" (#5373) at dotnet/corert","RelatedBody":"I'm exploring CoreRT and trying to compile one of our applications using CoreRT.\r\n\r\nWhen compiling using `dotnet publish -r win-x64 -c release`, I get the following warning:\r\n> EXEC : warning : Method `[System.Runtime.Extensions]System.Environment.ExpandEnvironmentVariablesCore(string)`\r\n will always throw because: [TEMPORARY EXCEPTION MESSAGE] MissingMethod: Void System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(Int32) \r\n\r\nIn certain scenarios, this translates into a runtime exception:\r\n```\r\nUnhandled Exception: System.MissingMethodException: Method not found: 'Void System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(Int32)'.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowMissingMethodException(ExceptionStringID, String) + 0x8\r\n   at System.Environment.ExpandEnvironmentVariablesCore(String) + 0x14\r\n```\r\n\r\nSo it looks like `System.Runtime.InteropServices.Marshal.ThrowExceptionForHR` is missing.\r\n\r\nI'm not sure where to look next to actually implement this method, so any guidance would be welcome."},{"Id":"7227475824","Type":"PullRequestEvent","CreatedAt":"2018-02-10T21:10:12","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5372","RelatedDescription":"Opened pull request \"Improve CMake detection on Windows when not in PATH\" (#5372) at dotnet/corert","RelatedBody":"In CMake v10.2, the key `hklm:\\SOFTWARE\\Kitware` returns:\r\n\r\n```powershell\r\n    Hive: HKEY_LOCAL_MACHINE\\SOFTWARE\\Kitware\r\n\r\nName                           Property\r\n----                           --------\r\nCMake                          InstallDir : C:\\Program Files\\CMake\\\r\n```\r\n\r\nwith no space after `CMake` and property name `InstallDir`,\r\ninstead of `'(default)'`."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7225534521","Type":"IssuesEvent","CreatedAt":"2018-02-09T23:22:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1098","RelatedDescription":"Closed issue \"Question: How to version dotnet core assemblies\" (#1098) at dotnet/sdk","RelatedBody":"@golfguy0082 commented on [Thu Apr 06 2017](https://github.com/dotnet/corefx/issues/18002)\n\nForgive me if this is not the appropriate channel for a question.  I'm trying to figure out how to version (and retrieve) assembly versions in dotnet core (both build and publish).  I've been searching for documentation on this, but I've come up empty.  Below are some things I've tried.\r\n\r\n`dotnet publish /p:Version=3.0.1` (where [Version]3.0.0[/Version] is defined in csproj)\r\n`dotnet publish --version-suffix 1` (where [VersionPrefix]3.0[/VersionPrefix] is defined in csproj)\r\n\r\nI'm retrieving the version using the following code:\r\n`typeof(ReflectionUtils).GetTypeInfo().Assembly.GetName().Version.ToString();`\r\nReflectionUtils is an arbitrary type in my assembly.  No matter what I try, the version retrieved from the above line shows 3.0.0.0.\r\n\r\nCan anyone point out what I'm doing wrong, or point me in the direction of a page that explains some of this stuff more fully?\n\n---\n\n@karelz commented on [Thu Apr 06 2017](https://github.com/dotnet/corefx/issues/18002#issuecomment-292395498)\n\nThe code you wrote inspects assembly version (defined by [AssemblyVersionAttribute](https://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute(v=vs.110).aspx)).\r\n\r\nI don't know what the `dotnet publish` command sets in csproj -- @davkean any idea where to direct the question? Does it belong into your area or CLI area?\n\n---\n\n@tarekgh commented on [Fri Apr 07 2017](https://github.com/dotnet/corefx/issues/18002#issuecomment-292578673)\n\nCC @weshaggard @ericstj \r\n\r\n@golfguy0082 net core is not different than the full framework. you can set the assembly version in your assembly by adding the attributes like \r\n\r\n```C#\r\n[assembly: AssemblyVersion(\"1.0.0.0\")]\r\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\r\n```\r\n\r\nand the way you are calling Assembly class to get the version is correct. The example in the link https://msdn.microsoft.com/en-us/library/system.reflection.assembly(v=vs.110).aspx is demonstrating that \n\n---\n\n@weshaggard commented on [Fri Apr 07 2017](https://github.com/dotnet/corefx/issues/18002#issuecomment-292580418)\n\n.NET Core tooling is a little different because we have enabled folks to set the value in msbuild properties directly. @golfguy0082 have a look at https://github.com/dotnet/sdk/issues/2 which is I think the closest set of documentation that I can find on the matter. \n\n---\n\n@tarekgh commented on [Fri Apr 07 2017](https://github.com/dotnet/corefx/issues/18002#issuecomment-292584267)\n\nI'll move this issue to the SDK repo per Wes comment\n\n"},{"Id":"7225513994","Type":"IssuesEvent","CreatedAt":"2018-02-09T23:15:11","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1106","RelatedDescription":"Closed issue \"Question: How to remove a package's assembly from a build?\" (#1106) at dotnet/sdk","RelatedBody":"Hi\r\n\r\nI have a weird situation. My project depends on two packages that contain slightly different versions of the same assembly which is causing build conflicts because of duplicate types. I'd like to remove the assembly from one of the packages from the build to solve the conflicts. How do I do that using MSBuild?\r\n\r\nI attempted to use the target below but because the assemblies have the same name they were both removed. How do I pick the one to remove by the NuGet package name?\r\n\r\n```\r\n  <Target Name=\"WorkAroundPackageAndProjectReferenceConflict\" BeforeTargets=\"ResolveLockFileReferences\">\r\n    <ItemGroup>\r\n      <ResolvedCompileFileDefinitions Remove=\"@(ResolvedCompileFileDefinitions)\" Condition=\"'%(ResolvedCompileFileDefinitions.FileName)' == 'MyAssemblyFileName'\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n"},{"Id":"7225495772","Type":"IssuesEvent","CreatedAt":"2018-02-09T23:09:18","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1896","RelatedDescription":"Closed issue \"Modifying the project file doesn't regenerate deps file\" (#1896) at dotnet/sdk","RelatedBody":"Repro:\r\n1. Create a .net core project.\r\n2. Build and run.\r\n3. Add a Reference item to a binary.\r\n4. F5.\r\n\r\nExpect:\r\nReference gets copied to output directory *and* appears in deps file.\r\n\r\nActual:\r\nReference gets copied to output directory but does not appear in deps file."},{"Id":"7225460444","Type":"PullRequestEvent","CreatedAt":"2018-02-09T22:58:14","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1941","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1941) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180208-080052\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180208-080052 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7225301515","Type":"PullRequestEvent","CreatedAt":"2018-02-09T22:14:34","Actor":"agocke","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1946","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1946) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180209-080052\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180209-080052 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7225299865","Type":"PullRequestEvent","CreatedAt":"2018-02-09T22:14:09","Actor":"agocke","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1945","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1945) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180209-080050\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180209-080050 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"961657885137698816","CreatedAt":"2018-02-08T17:48:01+00:00","UserScreenname":"dotnet","Text":"Tomorrow is NOW! @DEVintersection Take a deep dive with the Microsoft’s AI team into machine learning, predictive a… https://t.co/5AcI4VRNyG","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"961596291942961154","CreatedAt":"2018-02-08T13:43:16+00:00","UserScreenname":"dotnet","Text":"Our @csharpfritz and ASPInsider @brendoneus will be showing unit testing patterns and structure practices LIVE onli… https://t.co/kWer0gYtOp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":10,"RawContent":null},{"Id":"961382608914518016","CreatedAt":"2018-02-07T23:34:10+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz and ASPInsider Brendan Enrick for a LIVE CODING stream talking about how to write better unit t… https://t.co/dMJ5QcKEcp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"960930092372381696","CreatedAt":"2018-02-06T17:36:01+00:00","UserScreenname":"dotnet","Text":"Register now for @DEVintersection for a workshop package and go home with an awesome piece of hardware Xbox One X,… https://t.co/PqoYqNI5Ga","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":100,"FavoriteCount":80,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":243,"FavoriteCount":191,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":76,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":211,"FavoriteCount":165,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":81,"FavoriteCount":27,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-02-12T05:30:20.9787084Z","RunDurationInMilliseconds":8507}