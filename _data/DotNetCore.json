{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7935446411","Type":"PullRequestEvent","CreatedAt":"2018-07-09T05:15:34","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18830","RelatedDescription":"Opened pull request \"Undo unnecessary BinaryReader::ReadOneChar/InternalReadOneChar split\" (#18830) at dotnet/coreclr","RelatedBody":"This method had misleading comment that this split is required for performance. It was the case when\r\nInternalReadOneChar was called from other places in CoreLib. These calls do not exist anymore."},{"Id":"7934933376","Type":"IssuesEvent","CreatedAt":"2018-07-09T01:17:08","Actor":"Zhentar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18829","RelatedDescription":"Opened issue \"[JIT] Redundant Span<> bounds check not elided immediately after length check\" (#18829) at dotnet/coreclr","RelatedBody":"From my review of various issues around bounds checks, the length check here should be sufficient to elide the span's bounds check:\r\n```cs\r\nprivate readonly ReadOnlySpan<int> _colStarts;\r\npublic int? TryParseInt(int col)\r\n{\r\n\tif ((uint)col < (uint)_colStarts.Length)\r\n\t{\r\n\t\tvar parseSpan = _span.Slice(_colStarts[col]);\r\n\r\n\t\tUtf8Parser.TryParse(parseSpan, out int result, out _);\r\n\t\treturn result;\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n```\r\n(Full code available here: https://gist.github.com/Zhentar/6464a6190c0007d83c95634d1a9889ed )\r\n\r\nBut it is still present in the jitted code, with the latest nightly `(CoreCLR 4.6.26709.01, CoreFX 4.6.26606.05), 64bit RyuJIT`\r\n```asm\r\nDelimitedFileParser.StrictFileParser+SpanLineParser.TryParseInt(Int32)\r\n\tpush    rdi\r\n\tpush    rsi\r\n\tsub     rsp,58h\r\n\tmov     rsi,rcx\r\n\tlea     rdi,[rsp+28h]\r\n\tmov     ecx,0Ch\r\n\txor     eax,eax\r\n\trep     stos dword ptr [rdi]\r\n\tmov     rcx,rsi\r\n;\t\t\t\tif ((uint)col < (uint)_colStarts.Length)\r\n;\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\tcmp     dword ptr [rcx],ecx\r\n\tlea     r8,[rcx+10h]\r\n\tcmp     edx,dword ptr [r8+8]\r\n\tjae     M04_L00\r\n;\t\t\t\t\tvar parseSpan = _span.Slice(_colStarts[col]);\r\n;\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\tmov     r8,rcx\r\n\tcmp     dword ptr [r8],r8d\r\n\tadd     r8,10h\r\n\tcmp     edx,dword ptr [r8+8]\r\n\tjae     M04_L02\r\n\tmov     r8,qword ptr [r8]\r\n\tmovsxd  rdx,edx\r\n\tmov     edx,dword ptr [r8+rdx*4]\r\n\tmov     r8d,dword ptr [rcx+8]\r\n\tcmp     edx,r8d\r\n\tja      M04_L01\r\n\tmov     rcx,qword ptr [rcx]\r\n\tsub     r8d,edx\r\n\tmovsxd  rdx,edx\r\n\tadd     rcx,rdx```"},{"Id":"7934830921","Type":"PullRequestEvent","CreatedAt":"2018-07-09T00:07:53","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17306","RelatedDescription":"Closed pull request \"[Do not merge] Testing tiered compilation\" (#17306) at dotnet/coreclr","RelatedBody":"For testing purposes I am enabling tiered compilation by default"},{"Id":"7934696129","Type":"PullRequestEvent","CreatedAt":"2018-07-08T22:19:56","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18828","RelatedDescription":"Opened pull request \"Adjust JIT automated testing for tiered compilation\" (#18828) at dotnet/coreclr","RelatedBody":""},{"Id":"7934666231","Type":"PullRequestEvent","CreatedAt":"2018-07-08T21:56:42","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18809","RelatedDescription":"Merged pull request \"Correct AssemblyLoadContext comment\" (#18809) at dotnet/coreclr","RelatedBody":"- This existing comment appears to be incorrectly narrow.\r\n- My testing validates this."},{"Id":"7934568081","Type":"IssuesEvent","CreatedAt":"2018-07-08T20:46:07","Actor":"abbotware","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18827","RelatedDescription":"Opened issue \"Debugging Linux Apps - Dump Analysis Clarification\" (#18827) at dotnet/coreclr","RelatedBody":"I have hanging app on linux and was attempting to get take a memory dump... upon reading the docs for memory dump analysis I found nothing talking about mention **hung**, **deadlocks** or **memory leaks**: they are mostly geared to crash analysis.\r\n\r\nthe way i see it there are 2 types of dumps: \r\n1. Crash (created by operating system/debugger event) for crash analysis\r\n2. Live / On Demand (created by user) for memory, lock, hang analysis\r\n\r\nI think this link needs to be updated to at least mention the second category of memory dump analysis is also possible  (and any deviation in steps required)\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md\r\n\r\nExample text from above link that should be modified:\r\n\r\n`It is also possible to debug .NET Core crash dumps` (what about hung processes?)\r\n(NOTE: this is not an exhaust list of text that needs to be updated)\r\n\r\nWhat is **CreateDump**?\r\n\r\n`On Linux, there is an utility called **createdump** (see doc) that can be setup to generate core dumps when a managed app throws an unhandled exception or faults.` ?\r\n\r\nThe current wording seems to imply a 'separate utility' - but I can't find it in the (linux/arm) sdk\r\n\r\nAccording to the following links it seems that it might be a seprate util, or part of sos?\r\n\r\n(Command Line Options)?\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/botr/xplat-minidump-generation.md\r\n\r\n(SOS Plugin Command?)\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md\r\n\r\nPlease Clarify the following:\r\n\r\n1. Are dumps only able to be analyzed if they are created via lldb + sos ? \r\n2. What is 'create dump' utility and where is it?  (contradictory docs)\r\n3. Update the above linked docs since they seem have no mention that memory dumps from 'live' processes are supported.\r\n4. a quick how to guide for creating a dump of a live process would be nice if the steps vastly are different from crash dump analysis.\r\n\r\nregarding item 1 - I attempted to create memory dumps using 'gcore' and load them in lldb but this just caused lldb to crash so i posted a bug with lldb and sought guidance on coreclr glitter for more input  \r\n\r\n@karelz - also sent me the links above but I if you read my above notes: I think more clarity is needed to deal with the second class of dumps that I want to analyze on linux/arm hardware.\r\n\r\n\r\n\r\n"},{"Id":"7934311545","Type":"PullRequestEvent","CreatedAt":"2018-07-08T17:41:41","Actor":"ViktorHofer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18826","RelatedDescription":"Merged pull request \"LastIndexOf corner case fix when span is empty\" (#18826) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/pull/30896#discussion_r200843575\r\n\r\nThanks for spotting! I shouldn't have rushed fixing the initial issue."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7934327248","Type":"IssuesEvent","CreatedAt":"2018-07-08T17:53:27","Actor":"Pilchie","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/760","RelatedDescription":"Closed issue \"Unable to properly debug a netstandard project when starting a external executable\" (#760) at dotnet/standard","RelatedBody":"### Summary\r\n\r\nDebugging doesnt seem to work properly when you start a net framework exe from a netstandard project through the Debug Launch setting. Everything else seems to be working fine.\r\n\r\nWhen testing inside a game engine called duality I noticed this behavior. Latter on I found out that I can reproduce this in a separate project as well.\r\n\r\nSome background info: In duality you add functionality through plugins which currently are portable projects. We want to eventually change this to netstandard projects. Plugins themselves are not runnable but instead we run duality itself when you try to run a plugin in VS. This will load all the plugins so you can proceed to debugging your plugin.\r\n\r\nNote: the attached test project was simplified as much as possible to isolate the problem and thus does not include duality.\r\n\r\n### How to reproduce\r\n\r\n- Download and open the attached test project.\r\n- RebuildBuild the solution and start `ClassLibrary1`. This will actually start the exe generated by `NetStandardDebugTest`. Note that it will run properly.\r\n- Now set a breakpoint and run it again. Note that the break point will not work.\r\n- Now try to pause the execution. You will get a Unknown error 0x80004005\r\n\r\n### Attachments\r\n\r\n- [NetStandardDebugTest.zip](https://github.com/AdamsLair/duality/files/2048379/NetStandardDebugTest.zip)\r\n"},{"Id":"7931123364","Type":"IssuesEvent","CreatedAt":"2018-07-06T21:56:00","Actor":"natemcmaster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/794","RelatedDescription":"Opened issue \"xmldoc file in NETStandard.Library 2.0.3 is invalid xml\" (#794) at dotnet/standard","RelatedBody":"Trying to parse netstandard.library/2.0.3/build/netstandard2.0/ref/netstandard.xml with System.Xml.Linq.XDocument throws the following error:\r\n```\r\nThe 'p' start tag on line 654 position 2 does not match the end tag of 'th'. Line 654, position 86.\r\n```\r\n\r\nHere's the offending section:\r\n```\r\n    <member name=\"M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)\">\r\n      <summary>Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>\r\n      <param name=\"a\">The first object to compare.</param>\r\n      <param name=\"b\">The second object to compare.</param>\r\n      <returns><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\"><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">A signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\">a</code> and <code data-dev-comment-type=\"paramref\">b</code>, as shown in the following table.  </p>\r\n <table><thead><tr><th> Value  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\"> </th><th> Meaning  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"6\"> </th></tr></thead><tbody><tr><td> Less than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is less than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\"> </td></tr><tr><td> Zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\"> </td></tr><tr><td> Greater than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is greater than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\"> </td></tr></tbody></table></p>\r\n</returns>\r\n      <exception cref=\"T:System.ArgumentException\">Neither <paramref name=\"a\">a</paramref> nor <paramref name=\"b\">b</paramref> implements the <see cref=\"T:System.IComparable\"></see> interface.   -or-  <paramref name=\"a\">a</paramref> and <paramref name=\"b\">b</paramref> are of different types.</exception>\r\n    </member>\r\n```"},{"Id":"7930952606","Type":"PullRequestEvent","CreatedAt":"2018-07-06T21:07:36","Actor":"ionux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/793","RelatedDescription":"Opened pull request \"Minor text correction for ObsoleteAttribute message.\" (#793) at dotnet/standard","RelatedBody":""},{"Id":"7916191014","Type":"IssuesEvent","CreatedAt":"2018-07-04T04:36:15","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/792","RelatedDescription":"Closed issue \"vs2017 csproj don't have <ItemGroup> <Compile/> tag\" (#792) at dotnet/standard","RelatedBody":"This is not an issue.Just for information\r\nWhen i create a netstandard project in VS2017, the csproj file doesn't contain the list of cs files which are part of the solution/project. \r\nOld csproj(which have been created using older VS version) contain the list of files and using that for command-line wasn't a problem\r\n\r\n If i have to use csproj/sln file(created with VS2017) to compile the code from command-line how do i do it?"},{"Id":"7911966456","Type":"IssuesEvent","CreatedAt":"2018-07-03T11:33:03","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/792","RelatedDescription":"Opened issue \"vs2017 csproj don't have <ItemGroup> <Compile/> tag\" (#792) at dotnet/standard","RelatedBody":"This is not an issue.Just for information\r\nWhen i create a netstandard project in VS2017, the csproj file doesn't contain the list of cs files which are part of the solution/project. \r\nOld csproj(which have been created using older VS version) contain the list of files and using that for command-line wasn't a problem\r\n\r\n If i have to use csproj/sln file(created with VS2017) to compile the code from command-line how do i do it?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7935448039","Type":"PullRequestEvent","CreatedAt":"2018-07-09T05:16:14","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30902","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26709-00, beta-26709-00, respectively (master)\" (#30902) at dotnet/corefx","RelatedBody":""},{"Id":"7935038713","Type":"PullRequestEvent","CreatedAt":"2018-07-09T02:09:42","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30901","RelatedDescription":"Merged pull request \"Update CoreClr, CoreSetup to preview1-26709-01, preview1-26708-03, respectively (master)\" (#30901) at dotnet/corefx","RelatedBody":""},{"Id":"7934885166","Type":"PullRequestEvent","CreatedAt":"2018-07-09T00:47:05","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30901","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26709-01, preview1-26708-03, respectively (master)\" (#30901) at dotnet/corefx","RelatedBody":""},{"Id":"7934699241","Type":"PullRequestEvent","CreatedAt":"2018-07-08T22:22:11","Actor":"dv00d00","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30900","RelatedDescription":"Opened pull request \"Socket SendTo to use ReadOnlySpan<byte> for buffer\" (#30900) at dotnet/corefx","RelatedBody":"An attempt to add span overloads for SendTo method on Socket.\r\n\r\nI am a bit bothered by the fact that I copied implementation from the array based SendTo. But I believe I cannot change the behavior of existing code, not sure how to proceed with it.\r\n\r\nAnd another bit is that I am calling ToArray on the span when logging to NetEventSource. Should I add overloads for NetEventSource as well?"},{"Id":"7934683148","Type":"IssuesEvent","CreatedAt":"2018-07-08T22:09:59","Actor":"tarekgh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30887","RelatedDescription":"Closed issue \"different CaseInsensitive across operating systems \" (#30887) at dotnet/corefx","RelatedBody":"Comparing the char `º` to `o` or `O` (capital o) have different results for different OS. A repro can be found here: https://github.com/markekraus/CaseInsnsitiveOs\r\n\r\nAt the moment, it seems like it's not possible to use `º` and `o` or `O` on an hash table on Linux and MacOS, as it throws the following error (taken from PowerShell, where it was firstly detected):\r\n```\r\nDuplicate keys 'º' are not allowed in hash literals.\r\n+ CategoryInfo          : InvalidOperation: (System.Collections.Hashtable:Hashtable) [], RuntimeException\r\n+ FullyQualifiedErrorId : DuplicateKeyInHashLiteral\r\n```\r\nOn Windows, the result of this comparison is 1, whereas in Linux and MacOS the result is 0\r\n\r\nThanks @markekraus for the help"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7934325613","Type":"PullRequestEvent","CreatedAt":"2018-07-08T17:52:16","Actor":"ViktorHofer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6077","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6077) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer"},{"Id":"7934315273","Type":"PullRequestEvent","CreatedAt":"2018-07-08T17:44:32","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6077","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6077) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7934111243","Type":"PullRequestEvent","CreatedAt":"2018-07-08T15:19:04","Actor":"ViktorHofer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6076","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6076) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer"},{"Id":"7933972561","Type":"PullRequestEvent","CreatedAt":"2018-07-08T13:45:37","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6076","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6076) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7933527633","Type":"IssuesEvent","CreatedAt":"2018-07-08T07:35:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6075","RelatedDescription":"Opened issue \"Interop stubs error handling\" (#6075) at dotnet/corert","RelatedBody":"Interop stubs do not handle exceptions properly. Look for finally block TODOs in https://github.com/jkotas/corert/blob/master/src/Common/src/TypeSystem/Interop/IL/Marshaller.cs"},{"Id":"7933401445","Type":"PullRequestEvent","CreatedAt":"2018-07-08T05:30:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6074","RelatedDescription":"Opened pull request \"Fix In,Out marshaling for SafeHandles\" (#6074) at dotnet/corert","RelatedBody":"Fixes #3291 #6071"},{"Id":"7932957522","Type":"PullRequestEvent","CreatedAt":"2018-07-07T21:32:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":null,"RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7932957458","Type":"PullRequestEvent","CreatedAt":"2018-07-07T21:32:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":"Closed pull request \"Use uapaot mscorlib facade\" (#6068) at dotnet/corert","RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7932402760","Type":"PullRequestEvent","CreatedAt":"2018-07-07T14:09:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":null,"RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7932402667","Type":"PullRequestEvent","CreatedAt":"2018-07-07T14:09:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":"Closed pull request \"Use uapaot mscorlib facade\" (#6068) at dotnet/corert","RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7931794655","Type":"PullRequestEvent","CreatedAt":"2018-07-07T05:23:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":null,"RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7931794621","Type":"PullRequestEvent","CreatedAt":"2018-07-07T05:23:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":"Closed pull request \"Use uapaot mscorlib facade\" (#6068) at dotnet/corert","RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7931794031","Type":"PullRequestEvent","CreatedAt":"2018-07-07T05:23:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6070","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6070) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7931719168","Type":"IssuesEvent","CreatedAt":"2018-07-07T04:06:33","Actor":"tiandian","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6072","RelatedDescription":"Closed issue \"It is possible make writing rd.xml easier by write a log in GetType()?\" (#6072) at dotnet/corert","RelatedBody":"When I publish a asp.net core app to corert, it often runs error,  i reference many third party libraries,\r\nI don't know which code generate the error, and I can't change the code in the third party libraries,\r\nbut I know it is most possible be a reflection error,   and it is most possible Type.GetType() return null,\r\n\r\nso I want ask it is possible let Type.GetType to write to a log file when it return null when publish to corert?\r\nchange Type.GetType's code to below:\r\n\r\n```\r\n        public static Type GetType(String typeName)\r\n        {\r\n            StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;\r\n            Type t = return RuntimeType.GetType(typeName, false, false, false, ref stackMark);\r\n\r\n#if LOG\r\n            if (t == null)\r\n            {\r\n                Writelog(\"ReflectionError.txt\", string.Format(\"GetType: typeName = {0} return null.\", typeName));\r\n            }\r\n#endif\r\n\r\n            return t;\r\n        }\r\n```\r\n\r\nthen when i run `dotnet publish -r win-x64 -c release --LOG=1`, when i run the published exe, it will write a ReflectionError.txt file, I don't need know which line code in the third library generate the error, I just need add the error type in the ReflectionError.txt to rd.xml to resolve the problem.\r\n\r\nthanks!\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1013052742326280192","CreatedAt":"2018-06-30T13:32:50+00:00","UserScreenname":"dotnet","Text":"Tune in for Jeff's Saturday show, learn how to use C# and @ASPNET Core.  Always a good time https://t.co/KJoRPYHnHt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-07-09T05:30:31.9273135Z","RunDurationInMilliseconds":6643}