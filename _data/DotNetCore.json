{"Data":{"Blog":{"FeedItems":[{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null},{"Title":".NET Framework August 2019 Preview of Quality Rollup","PublishedOn":"2019-08-20T17:42:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the August 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nBCL1\nAddresses a crash that occurs...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core and systemd","PublishedOn":"2019-08-19T16:01:04+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"In preview7 a new package was added to the Microsoft.Extensions set of packages that enables integration with systemd. For the Windows focused, systemd allows similar functionality to Windows...","Href":"https://devblogs.microsoft.com/dotnet/net-core-and-systemd/","RawContent":null},{"Title":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2019-08-13T19:47:54+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are happy to announce that Microsoft .NET Framework 4.8 is now available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes quality...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-8-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 8","PublishedOn":"2019-08-13T18:31:00+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 8. Just like with Preview 7, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and are not adding new features. If these final previews...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8","PublishedOn":"2019-08-13T18:29:25+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"The Preview 8 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nNew previews of .NET Core 3.0 and ASP.NET Core 3.0 are also available...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-8-and-entity-framework-6-3-preview-8/","RawContent":null},{"Title":"Update on .NET Standard adoption","PublishedOn":"2019-08-07T18:01:39+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"It&#8217;s about two years ago that I announced .NET Standard 2.0. Since then we&#8217;ve been working hard to increase the set of .NET Standard-based libraries for .NET. This includes many of the BCL...","Href":"https://devblogs.microsoft.com/dotnet/update-on-net-standard-adoption/","RawContent":null},{"Title":"Calling all .NET desktop and mobile developers!","PublishedOn":"2019-08-07T15:00:29+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"We would love to hear about your experience with building client applications in .NET. Your feedback will greatly help us to improve the .NET tooling and ensure our roadmap focuses on your needs....","Href":"https://devblogs.microsoft.com/dotnet/calling-all-net-desktop-and-mobile-developers/","RawContent":null},{"Title":"Try out Nullable Reference Types","PublishedOn":"2019-08-06T20:29:02+00:00","CommentsCount":74,"FacebookCount":0,"Summary":"Try out Nullable Reference Types\nWith the release of .NET Core 3.0 Preview 7, C# 8.0 is considered &#34;feature complete&#34;. That means that the biggest feature of them all, Nullable Reference...","Href":"https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/","RawContent":null},{"Title":"Improving .NET Core installation in Visual Studio and on Windows","PublishedOn":"2019-08-06T02:07:24+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Visual Studio 2019 version 16.3 and .NET Core 3.0 Preview 7 improve the installation experience of .NET Core on Windows. The goal is to reduce the number of .NET Core versions that might be on a...","Href":"https://devblogs.microsoft.com/dotnet/improving-net-core-installation-in-visual-studio-and-on-windows/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."},{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10259119211","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:07:15","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26313","RelatedDescription":"Opened issue \"System.AccessViolationException: Attempted to read or write protected memory.\" (#26313) at dotnet/coreclr","RelatedBody":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/061738ef-c89d-4da3-9a70-ad8ea1c6968d/workitems/System.Reflection.MetadataLoadContext.Tests/console\r\n\r\n**Mod:**\r\nCOMPlus_JitStress=2\r\nCOMPlus_JitStressRegs=4\r\nCOMPlus_TieredCompilation=0\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\061738ef-c89d-4da3-9a70-ad8ea1c6968d\\Work\\009dec37-7ea7-403e-97d2-0ba158ec2160\\Exec>\"C:\\dotnetbuild\\work\\061738ef-c89d-4da3-9a70-ad8ea1c6968d\\Payload\\dotnet.exe\" exec --runtimeconfig System.Reflection.MetadataLoadContext.Tests.runtimeconfig.json xunit.console.dll System.Reflection.MetadataLoadContext.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\061738ef-c89d-4da3-9a70-ad8ea1c6968d\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Reflection.MetadataLoadContext.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Reflection.MetadataLoadContext.Tests (found 484 test cases)\r\n  Starting:    System.Reflection.MetadataLoadContext.Tests (parallel test collections = on, max threads = 2)\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Reflection.TypeLoading.Ecma.EcmaModule.GetGenericTypeParameter(System.Reflection.TypeLoading.TypeContext, Int32)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeTypeSequence(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeGenericTypeInstance(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean, Int32)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeSpec(System.Reflection.Metadata.TypeSpecificationHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeDefRefOrSpec(System.Reflection.Metadata.EntityHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaDefinitionType.SpecializeBaseType(System.Reflection.TypeLoading.RoType[])\r\n   at System.Reflection.TypeLoading.RoType.ComputeBaseType()\r\n   at System.Reflection.TypeLoading.RoType.GetRoBaseType()\r\n   at System.Reflection.TypeLoading.Assignability.CanCastTo(System.Type, System.Type, System.Reflection.TypeLoading.CoreTypes)\r\n   at System.Reflection.TypeLoading.Assignability.IsAssignableFrom(System.Type, System.Type, System.Reflection.TypeLoading.CoreTypes)\r\n   at System.Reflection.TypeLoading.RoType.IsAssignableFrom(System.Type)\r\n   at System.Reflection.TypeLoading.RoType.IsAssignableFrom(System.Reflection.TypeInfo)\r\n   at System.Reflection.Tests.TypeInfoIsAssignableFromTests.VerifyIsAssignableFrom(System.String, System.Reflection.TypeInfo, System.Reflection.TypeInfo, Boolean)\r\n   at System.Reflection.Tests.TypeInfoIsAssignableFromTests.TestIsAssignable3()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__9 ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestMethodAsync>d__48<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<RunAsync>b__47_0>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.Decimal> ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestAsync>d__4 ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.__Canon> ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>)\r\n   at Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__43<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync()\r\n   at Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__31<System.__Canon> ByRef)\r\n   at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1<Xunit.Sdk.IXunitTestCase>, System.Object[])\r\n   at Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestMethodsAsync>d__38<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__37<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestClassesAsync>d__28<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__27<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner+<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntry()\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler+<>c.<.cctor>b__8_0(System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(System.Threading.SendOrPostCallback, System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()\r\n   at Xunit.Sdk.XunitWorkerThread+<>c.<QueueUserWorkItem>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler+<>c.<.cctor>b__10_0(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\nexit code -1073741819\r\n```"},{"Id":"10259092508","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:00:12","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26312","RelatedDescription":"Opened issue \"Assert failure: object->HasEmptySyncBlockInfo\" (#26312) at dotnet/coreclr","RelatedBody":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/9eff63f8-1806-4564-bc99-dd40a64bef2e/workitems/System.Drawing.Common.Tests/console\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 22 [0x00000016], Thread: 38 [0x0026]): object->HasEmptySyncBlockInfo()\r\n    File: /__w/10/s/src/vm/jithelpers.cpp Line: 2690\r\n    Image: /root/helix/work/correlation/dotnet\r\n\r\n./RunTests.sh: line 161:    22 Aborted                 \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Drawing.Common.Tests.runtimeconfig.json xunit.console.dll System.Drawing.Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem\r\n exit code 134\r\n```"},{"Id":"10259068289","Type":"IssuesEvent","CreatedAt":"2019-08-22T01:53:45","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26311","RelatedDescription":"Opened issue \"System.Collections.Immutable.Tests terminated\" (#26311) at dotnet/coreclr","RelatedBody":"**Details:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/7b08c819-87fd-42e8-b0a3-fdc2e3f52809/workitems/System.Collections.Immutable.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Collections.Immutable.Tests\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\7b08c819-87fd-42e8-b0a3-fdc2e3f52809\\Work\\3f4404e0-0e73-445e-8abb-7d18cf951161\\Exec>\"C:\\dotnetbuild\\work\\7b08c819-87fd-42e8-b0a3-fdc2e3f52809\\Payload\\dotnet.exe\" exec --runtimeconfig System.Collections.Immutable.Tests.runtimeconfig.json xunit.console.dll System.Collections.Immutable.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\7b08c819-87fd-42e8-b0a3-fdc2e3f52809\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Collections.Immutable.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Collections.Immutable.Tests (found 928 of 932 test cases)\r\n  Starting:    System.Collections.Immutable.Tests (parallel test collections = on, max threads = 2)\r\nProcess terminated. Assertion failed.\r\nCheck the arguments in the caller!\r\n   at System.Collections.Generic.GenericArraySortHelper`1.BinarySearch(T[] array, Int32 index, Int32 length, T value, IComparer`1 comparer) in /_/src/System.Private.CoreLib/shared/System/Collections/Generic/ArraySortHelper.cs:line 367\r\n   at System.Collections.Generic.List`1.BinarySearch(Int32 index, Int32 count, T item, IComparer`1 comparer) in /_/src/System.Private.CoreLib/shared/System/Collections/Generic/List.cs:line 285\r\n   at System.Collections.Immutable.Tests.ImmutableListTestBase.BinarySearchPartialSortedListHelper(ImmutableArray`1 inputData, Int32 sortedIndex, Int32 sortedLength) in /_/src/System.Collections.Immutable/tests/ImmutableListTestBase.cs:line 447\r\n   at System.Collections.Immutable.Tests.ImmutableListTestBase.BinarySearchPartialSortedList() in /_/src/System.Collections.Immutable/tests/ImmutableListTestBase.cs:line 427\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 434\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) in /_/src/System.Private.CoreLib/shared/System/Reflection/MethodBase.cs:line 49\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 150\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 257\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction)\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 242\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code)\r\n   at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 241\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance)\r\n   at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestInvoker.cs:line 112\r\n   at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 206\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n   at Xunit.Sdk.TestInvoker`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 189\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(ExceptionAggregator aggregator) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 84\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 67\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)\r\n   at Xunit.Sdk.TestRunner`1.<>c__DisplayClass43_0.<RunAsync>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestRunner.cs:line 149\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n   at Xunit.Sdk.TestRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestRunner.cs:line 149\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestCaseRunner.cs:line 139\r\n   at Xunit.Sdk.TestCaseRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCaseRunner.cs:line 82\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestCaseRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestCase.RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\XunitTestCase.cs:line 162\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(IXunitTestCase testCase) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestMethodRunner.cs:line 45\r\n   at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 136\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 106\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestMethodRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(ITestMethod testMethod, IReflectionMethodInfo method, IEnumerable`1 testCases, Object[] constructorArguments) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestClassRunner.cs:line 168\r\n   at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 213\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 171\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestClassRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1 testCases) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestCollectionRunner.cs:line 158\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 130\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 101\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1 testCases, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 235\r\n   at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 184\r\n   at System.Threading.Tasks.Task`1.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Future.cs:line 506\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2372\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2329\r\n   at System.Threading.Tasks.Task.ExecuteEntry() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2240\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/TaskScheduler.cs:line 608\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 107\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.<>c__DisplayClass11_0.<WorkerThreadProc>b__0(Object _) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 96\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 132\r\n   at Xunit.Sdk.ExecutionContextHelper.Run(Object context, Action`1 action) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Utility\\ExecutionContextHelper.cs:line 111\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 89\r\n   at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _) in C:\\Dev\\xunit\\xunit\\src\\common\\XunitWorkerThread.cs:line 37\r\n   at System.Threading.Tasks.Task.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2393\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2372\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2329\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2271\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.<>c.<.cctor>b__10_0(Object s) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/ThreadPoolTaskScheduler.cs:line 37\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state) in /_/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 50\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.ThreadHelper.ThreadStart(Object obj) in /_/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 83\r\nexit code -2146232797\r\n```"},{"Id":"10259035362","Type":"PullRequestEvent","CreatedAt":"2019-08-22T01:44:45","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26310","RelatedDescription":"Opened pull request \"[WIP] Make \"async ValueTask/ValueTask<T>\" methods ammortized allocation-free\" (#26310) at dotnet/coreclr","RelatedBody":"Today `async ValueTask/ValueTask<T>` methods use builders that special-case the synchronously completing case (to just return a `default(ValueTask)` or `new ValueTask<T>(result)`) but defer to the equivalent of `async Task/Task<T>` for when the operation completes asynchronously.  This, however, doesn't take advantage of the fact that value tasks can wrap arbitrary `IValueTaskSource/IValueTaskSource<T>` implementations.\r\n\r\nI've had this sitting on the shelf for a while, but finally cleaned it up.  The first three commits here are just moving around existing code.  The last two commits are the meat of this change.  This changes `AsyncValueTaskMethodBuilder` and `AsyncValueTaskMethodBuilder<T>` to use pooled `IValueTaskSource/IValueTaskSource<T>` instances, such that calls to an `async ValueTask/ValueTask<T>` method incur 0 allocations as long as there's a cached object available.\r\n\r\nI've marked this as a draft and work-in-progress for a few reasons:\r\n1. There's a breaking change here, in that while we say/document that `ValueTask/ValueTask<T>`s are more limited in what they can be used for, nothing in the implementation actually stops a `ValueTask` that was wrapping a `Task` from being used as permissively as `Task`, e.g. if you were to await such a `ValueTask` multiple times, it would happen to work, even though we say \"never do that\".  This change means that anyone who was relying on such undocumented behaviors will now be broken.  I think this is a reasonable thing to do in a major release, but I also want feedback and a lot of runway on it.  There's the potential to make it opt-in (or opt-out) as well, but that will also non-trivially complicate the implementation.\r\n2. Policy around pooling.  This is always a difficult thing to tune.  Right now I've chosen a policy that limits the number of pooled objects per state machine type to an arbitrary multiple of the processor count, and that tries to strike a balance between contention and garbage by using a spin lock and if there's any contention while trying to get or return a pooled object, the cache is ignored.  We will need to think hard about what policy to use here.  It's also possible it could be tuned per state machine, e.g. by having an attribute that's looked up via reflection when creating the cache for a state machine, but that'll add a lot of first-access overhead to any `async ValueTask/ValueTask<T>` method.\r\n3. There are probably still some corner cases that need to be addressed. There are a few tweaks needed to the corefx tests in order to change them to stop validating some undocumented implementation details, but once I do that, this passes our corefx threading test suites.\r\n\r\ncc: @kouvel, @tarekgh, @benaadams "},{"Id":"10259034222","Type":"IssuesEvent","CreatedAt":"2019-08-22T01:44:26","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26309","RelatedDescription":"Opened issue \"Condition(s) not met: \"IsWindowsNanoServer\"\" (#26309) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/0c15185a-2331-4dcf-978c-cd7c4a4b3189/workitems/System.Diagnostics.Process.Tests/console\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\0c15185a-2331-4dcf-978c-cd7c4a4b3189\\Work\\2eeb62f3-774b-43f1-94ac-c844f873d662\\Exec>\"C:\\dotnetbuild\\work\\0c15185a-2331-4dcf-978c-cd7c4a4b3189\\Payload\\dotnet.exe\" exec --runtimeconfig System.Diagnostics.Process.Tests.runtimeconfig.json xunit.console.dll System.Diagnostics.Process.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\0c15185a-2331-4dcf-978c-cd7c4a4b3189\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 221 of 241 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 2)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.StartInfo_WebPage [SKIP]\r\n      Manual test\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\nProcess terminated. Assertion failed.\r\n!_fileHandle.IsClosed\r\n   at System.IO.FileStream.AssertCanRead() in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs:line 482\r\n   at System.IO.FileStream.ReadNative(Span`1 buffer) in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs:line 497\r\n   at System.IO.FileStream.ReadSpan(Span`1 destination) in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs:line 429\r\n   at System.IO.FileStream.Read(Byte[] array, Int32 offset, Int32 count) in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.cs:line 304\r\n   at System.IO.Stream.<>c.<BeginReadInternal>b__43_0(Object <p0>) in /_/src/System.Private.CoreLib/shared/System/IO/Stream.cs:line 303\r\n   at System.Threading.Tasks.Task`1.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Future.cs:line 512\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2372\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2333\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2271\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2256\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() in /_/src/System.Private.CoreLib/shared/System/Threading/ThreadPool.cs:line 664\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() in /_/src/System.Private.CoreLib/src/System/Threading/ThreadPool.CoreCLR.cs:line 29\r\nexit code -2146232797 \r\n```"},{"Id":"10258990037","Type":"IssuesEvent","CreatedAt":"2019-08-22T01:32:25","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26308","RelatedDescription":"Opened issue \"Test failed: System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success\" (#26308) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/9f2533c8-5903-447b-b099-3c861eb02547/workitems/System.Drawing.Common.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success\r\n\r\n**Log:**\r\n```\r\nSystem.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success(type: Bitmap) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=0, G=0, B=0]\r\n      Actual:   Color [A=255, R=0, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(195,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success(ColorAdjustType type)\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=255, G=0, B=0]\r\n      Actual:   Color [A=255, R=255, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(434,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(ColorMatrixFlag flag, ColorAdjustType type, Color grayShade, Color expecedGrayShade)\r\n    System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(flag: Default, type: Bitmap, grayShade: Color [A=255, R=100, G=100, B=100], expecedGrayShade: Color [A=255, R=100, G=0, B=100]) [FAIL]\r\n    System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(flag: SkipGrays, type: Bitmap, grayShade: Color [A=255, R=100, G=100, B=100], expecedGrayShade: Color [A=255, R=100, G=100, B=100]) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=255, G=0, B=0]\r\n      Actual:   Color [A=255, R=255, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(434,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(ColorMatrixFlag flag, ColorAdjustType type, Color grayShade, Color expecedGrayShade)\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=255, G=0, B=0]\r\n      Actual:   Color [A=255, R=255, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(434,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(ColorMatrixFlag flag, ColorAdjustType type, Color grayShade, Color expecedGrayShade)\r\n    System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(flag: AltGrays, type: Bitmap, grayShade: Color [A=255, R=100, G=100, B=100], expecedGrayShade: Color [A=255, R=100, G=200, B=255]) [FAIL]\r\n    System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues: -1) [SKIP]\r\n      backwards compatibility on 32 bit platforms may not throw\r\n    System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues: -2147483648) [SKIP]\r\n      backwards compatibility on 32 bit platforms may not throw\r\n    MonoTests.System.Drawing.GraphicsTest.Rotate [SKIP]\r\n      Precision on float numbers\r\n\r\nAssert failure(PID 22 [0x00000016], Thread: 43 [0x002b]): object->HasEmptySyncBlockInfo()\r\n    File: /__w/6/s/src/vm/jithelpers.cpp Line: 2690\r\n    Image: /root/helix/work/correlation/dotnet\r\n\r\n./RunTests.sh: line 161:    22 Aborted                 \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Drawing.Common.Tests.runtimeconfig.json xunit.console.dll System.Drawing.Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem\r\n exit code 134 \r\n```"},{"Id":"10258966397","Type":"PullRequestEvent","CreatedAt":"2019-08-22T01:25:52","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26288","RelatedDescription":"Merged pull request \"Use StyleCop to fix up more spacing issues\" (#26288) at dotnet/coreclr","RelatedBody":"This is mostly auto-fixers inserting and removing spacing to make things more consistent across corelib.  In a few cases, I manually intervened, mostly removing stale/erroneous comments as I was reviewing each change.  I also replaced all `for(;;)` with `while (true)`, as there was enough variation in the spacing in `for(;;)` to make me just want to avoid the issue altogether and standardize on the latter."},{"Id":"10258472570","Type":"IssuesEvent","CreatedAt":"2019-08-21T23:09:36","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26307","RelatedDescription":"Opened issue \"Make sure that GenTree pointer is stored only in its parent.\" (#26307) at dotnet/coreclr","RelatedBody":"Right now we can have `fgArgInfo` that has `fgArgTabEntry` that points to a `GenTree`, so every time when we replace one tree with another we have to check for this case and do an expensive linear search in the arg info array. See `ReplaceOperand` for example.\r\n\r\nWe should get rid of any second edges to `GenTree`, so every time when we replace/remove a tree we need to update only one edge."},{"Id":"10258368679","Type":"PullRequestEvent","CreatedAt":"2019-08-21T22:45:06","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26306","RelatedDescription":"Opened pull request \"Publish native test assets for consumption by performance testing\" (#26306) at dotnet/coreclr","RelatedBody":"The dotnet/performance repo doesn't have any infrastructure to build native assets for the performance testing. Since native test assets are needed to accurately benchmark our interop stack, this PR publishes the native assets (zipped) to the blob feed along with an asset manifest (currently for each platform).\r\n\r\nWith these manifests and blob feed assets, we can add microbenchmarks in the dotnet/performance repo that use the packaged native assets by having the dotnet/performance build pull down the build manifests and the assets, unzip them, and copy them to the output directory as content.\r\n\r\nIn this PR, the package contains the native assets for the following Interop scenarios:\r\n\r\n- P/Invoke native DLL load\r\n- String marshalling\r\n- General struct marshalling\r\n- LayoutClass marshalling\r\n- SafeHandle marshalling\r\n\r\ncc: @dotnet/coreclr-infra"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10259830928","Type":"PullRequestEvent","CreatedAt":"2019-08-22T05:24:02","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12316","RelatedDescription":"Merged pull request \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#12316) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190821.20\r\n- **Date Produced**: 8/22/2019 2:44 AM\r\n- **Commit**: 33c773a5c7602e599053fdbb3a12b7ecfda27e2e\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19421-20\r\n\r\n[marker]: <> (End:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10258671326","Type":"PullRequestEvent","CreatedAt":"2019-08-22T00:01:54","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12315","RelatedDescription":"Merged pull request \"Add support for Microsoft.WindowsDesktop.App\" (#12315) at dotnet/cli","RelatedBody":"Add support for Microsoft.WindowsDesktop.App\r\n\r\nAddresses: https://github.com/dotnet/cli/issues/11115 & https://github.com/dotnet/docs/issues/11943\r\n\r\nRelated: https://github.com/dotnet/core-setup/issues/6370\r\n\r\n**Testing:** \r\n`dotnet-install.ps1 -Runtime windowsdesktop -version 3.0.0-preview9-19420-02 -verbose`"},{"Id":"10258648311","Type":"PullRequestEvent","CreatedAt":"2019-08-21T23:55:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12329","RelatedDescription":"Merged pull request \"Updating nuget version and adding it to Version.Details.xml for DARC updates.\" (#12329) at dotnet/cli","RelatedBody":""},{"Id":"10258639890","Type":"PullRequestEvent","CreatedAt":"2019-08-21T23:53:15","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12330","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#12330) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 11:22 PM\r\n- **Commit**: e0f95cfa6feec402ea34a605965f356720006513\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19421.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10258555777","Type":"PullRequestEvent","CreatedAt":"2019-08-21T23:30:33","Actor":"mairaw","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12331","RelatedDescription":"Opened pull request \"fix dotnet pack help\" (#12331) at dotnet/cli","RelatedBody":"Related to https://github.com/dotnet/docs/issues/8860"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10258181969","Type":"PullRequestEvent","CreatedAt":"2019-08-21T22:06:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1458","RelatedDescription":"Merged pull request \"Ask Mode: Add support for typed-datasets\" (#1458) at dotnet/standard","RelatedBody":"## Description\r\n\r\n.NET Core 3.0 has full support for `System.Data.DataTableExtensions` which also enables the visual `DataSet` designer in Visual Studio. However, .NET Standard 2.1 only supported a subset which makes the code that is generated by the designer not compile in .NET Standard 2.1. The fix is include the missing APIs in .NET Standard 2.1.\r\n\r\nThis requires no changes in .NET Core 3.0 but will require minimal work in platforms implementing .NET Standard 2.1, most notably Mono/Xamarin. However, they already signed off on it.\r\n\r\n## Customer Impact\r\n\r\nCustomer will be able to use the DataSet designer in .NET Standard libraries, which will become handy as people port their existing .NET Framework desktop applications to .NET Core 3.0.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. All APIs are already implemented in .NET Core 3.0."},{"Id":"10257061419","Type":"PullRequestEvent","CreatedAt":"2019-08-21T19:10:24","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1458","RelatedDescription":"Opened pull request \"Add support for typed-datasets\" (#1458) at dotnet/standard","RelatedBody":"## Description\r\n\r\n.NET Core 3.0 has full support for `System.Data.DataTableExtensions` which also enables the visual `DataSet` designer in Visual Studio. However, .NET Standard 2.1 only supported a subset which makes the code that is generated by the designer not compile in .NET Standard 2.1. The fix is include the missing APIs in .NET Standard 2.1.\r\n\r\nThis requires no changes in .NET Core 3.0 but will require minimal work in platforms implementing .NET Standard 2.1, most notably Mono/Xamarin. However, they already signed off on it.\r\n\r\n## Customer Impact\r\n\r\nCustomer will be able to use the DataSet designer in .NET Standard libraries, which will become handy as people port their existing .NET Framework desktop applications to .NET Core 3.0.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. All APIs are already implemented in .NET Core 3.0."},{"Id":"10256807366","Type":"PullRequestEvent","CreatedAt":"2019-08-21T18:33:21","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1457","RelatedDescription":"Closed pull request \"Enabling yaml stages for preview 9\" (#1457) at dotnet/standard","RelatedBody":"We require this change in order to propagate the dependecies updates for preview 9 branch.\r\nrelated 3.0 change https://github.com/dotnet/standard/pull/1453\r\n\r\ncc @mmitche "},{"Id":"10256584222","Type":"PullRequestEvent","CreatedAt":"2019-08-21T18:01:37","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1457","RelatedDescription":"Opened pull request \"Enabling yaml stages for preview 9\" (#1457) at dotnet/standard","RelatedBody":"We require this change in order to propagate the dependecies updates for preview 9 branch.\r\nrelated 3.0 change https://github.com/dotnet/standard/pull/1453\r\n\r\ncc @mmitche "},{"Id":"10256418934","Type":"PullRequestEvent","CreatedAt":"2019-08-21T17:37:37","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1453","RelatedDescription":"Merged pull request \"Adding YAML stages\" (#1453) at dotnet/standard","RelatedBody":"Closes: https://github.com/dotnet/arcade/issues/3726\r\n\r\ncherrypicking #1373 #1379 "},{"Id":"10256287016","Type":"PullRequestEvent","CreatedAt":"2019-08-21T17:18:20","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1446","RelatedDescription":"Merged pull request \"Add support for typed-datasets\" (#1446) at dotnet/standard","RelatedBody":"This completes the support for typed datasets which also enables the dataset designer in VS.\r\n\r\nSee https://github.com/dotnet/corefx/pull/36528."},{"Id":"10255755112","Type":"PullRequestEvent","CreatedAt":"2019-08-21T16:03:23","Actor":"mmitche","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/corefx\" (#1444) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.11\r\n- **Date Produced**: 8/21/2019 2:09 AM\r\n- **Commit**: 37f316e1de562bc31acab2496540a865189da918\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19420.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19420.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19420.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10255753282","Type":"PullRequestEvent","CreatedAt":"2019-08-21T16:03:09","Actor":"mmitche","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1455","RelatedDescription":"Closed pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1455) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"},{"Id":"10254024262","Type":"PullRequestEvent","CreatedAt":"2019-08-21T12:42:44","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1456","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1456) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.10\r\n- **Date Produced**: 8/21/2019 12:53 AM\r\n- **Commit**: d341fd37dcb2c22e382adccdc06770cf8f160577\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19420.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10253947087","Type":"PullRequestEvent","CreatedAt":"2019-08-21T12:32:37","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1456","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1456) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.10\r\n- **Date Produced**: 8/21/2019 12:53 AM\r\n- **Commit**: d341fd37dcb2c22e382adccdc06770cf8f160577\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19420.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10253932744","Type":"PullRequestEvent","CreatedAt":"2019-08-21T12:30:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1455","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1455) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10259374712","Type":"PullRequestEvent","CreatedAt":"2019-08-22T03:15:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40494","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40494) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190821.8\r\n- **Date Produced**: 8/21/2019 9:11 PM\r\n- **Commit**: d48157b67e32259b73a9e59e47163945f9a6a647\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19421.8\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19421.8\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19421.8\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10259297136","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:54:57","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36715","RelatedDescription":"Closed issue \"ArgumentOutOfRangeException from CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer in AspNetCore solution \" (#36715) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n16.2 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone https://github.com/aspnet/AspNetCore and install dependencies\r\n2. Enable full solution analysis.\r\n3. Run `restore.cmd`\r\n4. Open `src\\MusicStore\\MusicStore.sln`\r\n5. Wait\r\n\r\n**Expected Behavior**:\r\nNo `AD0001` failure\r\n\r\n**Actual Behavior**:\r\n```\r\nSeverity    Code    Description Project File    Line    Suppression State   Detail Description\r\nError   AD0001  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Specified argument was out of the range of valid values.\r\nParameter name: localFunction'. Microsoft.AspNetCore.Mvc.RazorPages     1   Active  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:\r\n'Exception occurred with following context:\r\nCompilation: Microsoft.AspNetCore.Mvc.RazorPages\r\nISymbol: ApplyConventions (Method)\r\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\nParameter name: localFunction\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(ControlFlowGraph controlFlowGraph, IMethodSymbol localFunction, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.AddDescendantOperationsInRange(ControlFlowGraph cfg, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, PooledHashSet`1 operationsBuilder, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateSymbolWritesInBlockRange(Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.HandleCatchOrFilterOrFinallyInitialization(BasicBlock basicBlock, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateBlockAnalysisData(BasicBlock basicBlock, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.SetCurrentAnalysisData(BasicBlock basicBlock, BasicBlockAnalysisData data, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.<RunCore>g__StepThroughSingleFinally|1_2(ControlFlowRegion finally, TBlockAnalysisData& currentAnalysisData, <>c__DisplayClass1_0& )\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.<RunCore>g__StepThroughFinally|1_1(ControlFlowRegion region, Int32 destinationOrdinal, TBlockAnalysisData& currentAnalysisData, <>c__DisplayClass1_0& )\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.<RunCore>g__FollowBranch|1_0(BasicBlock current, ControlFlowBranch branch, TBlockAnalysisData currentAnalsisData, <>c__DisplayClass1_0& )\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(ControlFlowGraph controlFlowGraph, DataFlowAnalyzer`1 analyzer, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.RunAnalysis(ControlFlowGraph cfg, ISymbol owningSymbol, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean& hasBlockWithAllUsedSymbolWrites)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__55`2.<ExecuteBlockActions>b__55_1(ValueTuple`2 data)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\r\n```"},{"Id":"10259291996","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:53:34","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37846","RelatedDescription":"Closed issue \"Better Roslyn Analyzer UI integration for global rule configuration\" (#37846) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/466977/better-roslyn-analyzer-ui-integration-for-global-r.html)._\n\n---\n<p><strong>PROBLEM</strong></p><p>Using Roslyn analyzers like StyleCop is much more difficult than it should be.</p><p></p><p>Firstly, when installing a Roslyn analyzer and you make a default `.ruleset` file, opening the file in the ruleset editor does not give you the option of disabling any rules from this roslyn analyzer. </p><p>For example, I installed StyleCop.Analyzers across all projects using Directory.Build.props. Since this is a global option I would expect the rules to appear in my global ruleset file.</p><p></p><p>Secondly, when you have an issue in code and you press `Ctrl + .`, the quick actions menu gives you 2 options for suppression:</p><p>1. Suppress in code (#pragma warning disable)</p><p>2. Suppress in file (GlobalSuppressions.cs)</p><p>However it gives no options for my global ruleset file! Every blog and Stack Overflow post I've read suggests using a ruleset file as a means for sharing rules between projects, but there doesnt seem to be any UI integration with it. Why can't I select a rule from code and just disable it globally? Why do I need to manually open the ruleset file in an XML editor and hand-craft the correct runes in text?</p><p></p><p><strong>SOLUTION</strong></p><p>Firstly, the ruleset file editor should know about your installed analyzers and provide a method to disable those rules.</p><p>Secondly, on code quick fixes menu, there should be a 3rd option:</p><p>3. Suppress in global ruleset file</p><p>This would add something like this to your ruleset file</p><p> &lt;Rule Id=&quot;SA1600&quot; Action=&quot;None&quot; /&gt; &lt;!-- Elements should be documented --&gt;</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 2/25/2019, 01:28 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>"},{"Id":"10259187727","Type":"PullRequestEvent","CreatedAt":"2019-08-22T02:25:49","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38110","RelatedDescription":"Merged pull request \"Bail out from couple of IDE analyzers in presence of OperationKind.None operations\" (#38110) at dotnet/roslyn","RelatedBody":"1. https://github.com/dotnet/roslyn/commit/49806932395686a392efea1236e2edd1b066c6f2: Bail out for unused parameters analyzer. Fixes #37988\r\n2. https://github.com/dotnet/roslyn/commit/8a8629cbfd00c25456f43014d1061d9700ea0e0b: Bail out for unused private members analyzer. Fixes #33142"},{"Id":"10259187713","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:25:49","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33142","RelatedDescription":"Closed issue \"IDE0051: Private member is unused when used in an XML literal in Visual Basic\" (#33142) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 2019 Preview, Version 16.0.0 Preview 2.1\r\n\r\n**Steps to Reproduce**:\r\n```\r\n    Public Class UnusedBar\r\n        Public Sub Foo()\r\n            Dim xml = <tag><%= Me.Bar() %></tag>\r\n        End Sub\r\n\r\n        Private Function Bar() As Integer\r\n            Return 42\r\n        End Function\r\n    End Class\r\n```\r\nBar doesn't have to be a function, it can also be a property or a field.\r\n\r\n**Expected Behavior**:\r\nNo message is shown.\r\n\r\n**Actual Behavior**:\r\nMessage shown: `Private member 'UnusedBar.Bar' is unused.`"},{"Id":"10259187699","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:25:49","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37988","RelatedDescription":"Closed issue \"VB: IDE0060 false positive when using XML axis properties\" (#37988) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 16.3 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Paste the code below into a VB file.\r\n\r\n```vbnet\r\nPublic Class C\r\n    Sub M(param As XElement)\r\n        Dim a = param.<Test>\r\n        Dim b = param.@Test\r\n        Dim c = param...<Test>\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\n**Expected Behavior**: `param` is not marked as unused.\r\n\r\n**Actual Behavior**: `param` is marked as unused (IDE0060).\r\n"},{"Id":"10259138559","Type":"PullRequestEvent","CreatedAt":"2019-08-22T02:12:35","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38202","RelatedDescription":"Opened pull request \"Add release/dev16.3-vs-deps to publishing\" (#38202) at dotnet/roslyn","RelatedBody":""},{"Id":"10259118262","Type":"IssuesEvent","CreatedAt":"2019-08-22T02:06:58","Actor":"joshlang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38201","RelatedDescription":"Opened issue \"EnumeratorCancellation warnings when IAsyncEnumerator returns IAsyncEnumerator\" (#38201) at dotnet/roslyn","RelatedBody":".net core 3.0 preview 8.\r\n\r\n```\r\nasync IAsyncEnumerable<string> GetStrings([EnumeratorCancellation] CancellationToken cancellationToken = default)\r\n{\r\n    yield return await Task.FromResult(\"\");\r\n    yield return await Task.FromResult(\"\");\r\n}\r\n\r\nasync IAsyncEnumerable<string> GetStrings2([EnumeratorCancellation] CancellationToken cancellationToken = default) \r\n    => GetStrings(cancellationToken);\r\n\r\nIAsyncEnumerable<string> GetStrings3([EnumeratorCancellation] CancellationToken cancellationToken = default) \r\n    => GetStrings(cancellationToken);\r\n```\r\n\r\nGetStrings() has some customizable logic (imagine)… And GetStrings2 or GetStrings3 just want to call it with specific parameters for the consumer's convenience.\r\n\r\nGetStrings2 warns `CS1998` (async method but no awaits)\r\n\r\nGetStrings3 warns `CS8424` (the enumerator cancellation attribute has no effect because it's not async)\r\n\r\nIt seems to me that at least *one* of these should work!\r\n"},{"Id":"10259092325","Type":"PullRequestEvent","CreatedAt":"2019-08-22T02:00:10","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38199","RelatedDescription":"Merged pull request \"Skip flaky integration test\" (#38199) at dotnet/roslyn","RelatedBody":""},{"Id":"10258911931","Type":"PullRequestEvent","CreatedAt":"2019-08-22T01:10:25","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38200","RelatedDescription":"Opened pull request \"Exclude textual changes made in unchangeable document\" (#38200) at dotnet/roslyn","RelatedBody":"This is my third attempt of fixing the feedback below (see #38070 for another approach)\r\nhttps://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html \r\n\r\nThe root cause is symbol finder returns all the references for a given symbol, including those from unchangeable document (i.e. *.g.cs file from Razor). As a result, refactoring uses \"find reference\" would end up fixing those references and cause workspace to throw when the change is being applied.\r\n\r\nThis added a new helper method that simply drop all changes made in those unchangeable document. And call this helper before refactoring returns final solution.\r\n\r\nAffected refactoring:\r\n1. rename\r\n2. sync/change namespace\r\n3. change signature"},{"Id":"10258893870","Type":"PullRequestEvent","CreatedAt":"2019-08-22T01:05:15","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38184","RelatedDescription":"Merged pull request \"Change unused parameters analyzer configuration to analyze generated …\" (#38184) at dotnet/roslyn","RelatedBody":"…code\r\n\r\nThis fixes false reports for unused parameters of event handlers that are referenced/invoked from xaml generated code files. Fixes #37483"},{"Id":"10258893852","Type":"IssuesEvent","CreatedAt":"2019-08-22T01:05:14","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37483","RelatedDescription":"Closed issue \"IDE0060 Does Not Recognize All Event Handlers in VB\" (#37483) at dotnet/roslyn","RelatedBody":"When I connect an event handler in XAML or by using an AddHandler statement (meaning that the method has an appropriate signature, but has the same syntax as any other method not used as a handler), Visual Studio 2019 Community's Code Style gives me IDE0060 messages (Remove unused parameter 'e', Remove unused parameter 'sender', etc.). I recognize that methods used as event handlers have the same format &amp; syntax as other methods (and that it is, although probably not good programming practice, possible to not use them for the purpose of handling events), but I think that it would be nice if this feature of Code Style could be improved to help identify event handlers in the following ways:\n\n1. Search XAML to help identify the event handlers\n2. Assume (unless otherwise specified in a possible Code Style setting that you may end up adding) that all methods that have a signature matching the signature of an event handler\n\nWhen the Messages section of the Error List is overflowing with suggestions that would break my code, it is a feature hardly worth using.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/544162/ide0060-does-not-recognize-all-event-handlers-in-v.html\nVSTS ticketId: 854706_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/23/2019, 07:08 PM (92 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10258986269","Type":"PullRequestEvent","CreatedAt":"2019-08-22T01:31:21","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7719","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7719) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10257085292","Type":"PullRequestEvent","CreatedAt":"2019-08-21T19:14:00","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7718","RelatedDescription":"Opened pull request \"CPAOT support for inlined PInvokes\" (#7718) at dotnet/corert","RelatedBody":"This change adds previously missing implementation of two JIT\r\ninterface methods dealing with inlined PInvokes -\r\ngetAddressOfPinvokeTarget and pInvokeMarshalingRequired.\r\n\r\nFor the MethodRequiresMarshaling check I used the same technique\r\nJanK recommended before for IsManagedSequential - I added an extra\r\ninstrumentation to Crossgen and CPAOT to capture PInvoke methods\r\nand the result of the marshaling check; with this change there are\r\n0 differences in the Pri#1 CoreCLR test suite.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10255611916","Type":"PullRequestEvent","CreatedAt":"2019-08-21T15:45:36","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7712","RelatedDescription":"Merged pull request \"Tweaks to ContainsTypeLayout\" (#7712) at dotnet/corert","RelatedBody":"Fixes a bucket of CPAOT failures related to layout mismatch between the compiler and the runtime. We were incorrectly considering reference typed fields when determining whether type layout crosses version bubble.\r\n\r\nReference types are a single pointer wide and their layout doesn't matter. Switching between type being a reference type and valuetype is an IL-breaking change and as such it's okay to break R2R too.\r\n\r\nWhile I was at this, I saw a couple other bugs I fixed:\r\n* Value types were considered always within the version bubble, no matter what module defines them.\r\n* We were not looking at `NonVersionableAttribute` (needed to get e.g. `Nullable` fields right).\r\n* Type instantiation was taken into account but it's unrelated to layout.\r\n* Deleted the recursion protection. I assume this was only added because we were recursing into reference types.\r\n* Nit: `IsLiteral` and `HasRva` was redundant with the `IsStatic` check, and so was the `IsByRefLike` with `IsValueType`"},{"Id":"10255607369","Type":"PullRequestEvent","CreatedAt":"2019-08-21T15:45:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7717","RelatedDescription":"Merged pull request \"Extend token remapping\" (#7717) at dotnet/corert","RelatedBody":"I missed that `resolveToken` is not the only place where we record tokens in CPAOT. We also do it in other places.\r\n\r\nI moved the logic that does token remapping for synthetic method bodies to `HandleModuleToken` to have it in a central location and made sure that I got all the places that touch `.token` this time.\r\n\r\n`constructStringLiteral` might end up needing token remapping too at some point so for now I just put an assert in place so that we don't end up chasing wild tokens if/when that happens.\r\n\r\nUnrelated, I also fixed the Interlocked intrinsics not to be per instantiation (they don't need anything special for their `T`). "},{"Id":"10254810766","Type":"PullRequestEvent","CreatedAt":"2019-08-21T14:16:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7717","RelatedDescription":"Opened pull request \"Extend token remapping\" (#7717) at dotnet/corert","RelatedBody":"I missed that `resolveToken` is not the only place where we record tokens in CPAOT. We also do it in other places.\r\n\r\nI moved the logic that does token remapping for synthetic method bodies to `HandleModuleToken` to have it in a central location and made sure that I got all the places that touch `.token` this time.\r\n\r\n`constructStringLiteral` might end up needing token remapping too at some point so for now I just put an assert in place so that we don't end up chasing wild tokens if/when that happens.\r\n\r\nUnrelated, I also fixed the Interlocked intrinsics not to be per instantiation (they don't need anything special for their `T`). "},{"Id":"10251729885","Type":"IssuesEvent","CreatedAt":"2019-08-21T07:19:49","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7714","RelatedDescription":"Closed issue \"Can't Use System.CodeDom NuGet Pakeage\" (#7714) at dotnet/corert","RelatedBody":"The release was successful, but when I run the program, a message box \"Unknown Hard Errorr\" pops up, the program displays\r\n\"Unhandled Exception: System.PlatformNotSupportedException: Operation is not supp\r\nOrted on this platform.\r\n    At Microsoft.CSharp.CSharpCodeGenerator.FromFileBatch(CompilerParameters, Str\r\nIng[]) + 0x24\r\n    At Microsoft.CSharp.CSharpCodeGenerator.System.CodeDom.Compiler.ICodeCompiler\r\n.CompileAssemblyFromSourceBatch(CompilerParameters, String[]) + 0x1f\r\n    At CodeDomTest.Program.run(String) + 0x1af\r\n    At CodeDomTest.Program.Main(String[]) + 0x20\r\n    At CodeDomTest!<BaseAddress>+0x204e40\"\r\n(Sorry, I don't know English, so I may have some syntax errors when I use Google Translate)"},{"Id":"10250733410","Type":"PullRequestEvent","CreatedAt":"2019-08-21T03:23:52","Actor":"Lucina","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7716","RelatedDescription":"Opened pull request \"Add .vsconfig and script\" (#7716) at dotnet/corert","RelatedBody":"Added a .vsconfig file with dependencies for Visual Studio 2019 Preview (`MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22)` aka `Microsoft.VisualStudio.Component.VC.Tools.x86.x64`), minimum requirement to building with `buildscripts/build.cmd`.\r\nAdded a script at `buildscripts/install-reqs-vs2019preview.cmd` that depends on Visual Studio 2019 Preview and vs_installer.exe being installed at `%ProgramFiles(x86)%\\Microsoft Visual Studio`.\r\nCloses #7417 "},{"Id":"10250109615","Type":"IssuesEvent","CreatedAt":"2019-08-21T00:33:05","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7715","RelatedDescription":"Opened issue \"ReadyToRun tests do not run in CI jobs on Linux\" (#7715) at dotnet/corert","RelatedBody":"We do have a job that attempts to run the ReadyToRun tests on Linux and MacOS but it does not execute any test cases. The output from such a test run looks like this:\r\n\r\nGRAND TOTAL: 0          0          0           0        0.000s (2.564s)"},{"Id":"10249898123","Type":"IssuesEvent","CreatedAt":"2019-08-20T23:35:48","Actor":"F-Unction","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7714","RelatedDescription":"Opened issue \"Can't Use System.CodeDom NuGet Pakeage\" (#7714) at dotnet/corert","RelatedBody":"The release was successful, but when I run the program, a message box \"Unknown Hard Errorr\" pops up, the program displays\r\n\"Unhandled Exception: System.PlatformNotSupportedException: Operation is not supp\r\nOrted on this platform.\r\n    At Microsoft.CSharp.CSharpCodeGenerator.FromFileBatch(CompilerParameters, Str\r\nIng[]) + 0x24\r\n    At Microsoft.CSharp.CSharpCodeGenerator.System.CodeDom.Compiler.ICodeCompiler\r\n.CompileAssemblyFromSourceBatch(CompilerParameters, String[]) + 0x1f\r\n    At CodeDomTest.Program.run(String) + 0x1af\r\n    At CodeDomTest.Program.Main(String[]) + 0x20\r\n    At CodeDomTest!<BaseAddress>+0x204e40\"\r\n(Sorry, I don't know English, so I may have some syntax errors when I use Google Translate)"},{"Id":"10249003564","Type":"PullRequestEvent","CreatedAt":"2019-08-20T20:42:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7713","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7713) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10248492050","Type":"PullRequestEvent","CreatedAt":"2019-08-20T19:24:55","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7713","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7713) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10248380160","Type":"PullRequestEvent","CreatedAt":"2019-08-20T19:08:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7709","RelatedDescription":"Merged pull request \"Bind to S.P.CoreLib by default\" (#7709) at dotnet/corert","RelatedBody":"When I was doing size investigations for CPAOT/.NET 5 two weeks ago, the reflection method body scanner was crashing when IL Linker decided to trim mscorlib. I worked around by just copying mscorlib back and brushed it off as a Linker bug (that I forgot to file).\r\n\r\nNow a similar issue was reported in #7679 which prompted me to look how CoreCLR does `Type.GetType` binding when type name is not assembly-qualified. Seems like we were trying to be more compatible with desktop CLR than CoreCLR.\r\n\r\nSince CoreCLR doesn't care about types in mscorlib that don't live in S.P.CoreLib, neither needs CPAOT."},{"Id":"10246900432","Type":"PullRequestEvent","CreatedAt":"2019-08-20T15:39:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7712","RelatedDescription":"Opened pull request \"Tweaks to ContainsTypeLayout\" (#7712) at dotnet/corert","RelatedBody":"Fixes a bucket of CPAOT failures related to layout mismatch between the compiler and the runtime. We were incorrectly considering reference typed fields when determining whether type layout crosses version bubble.\r\n\r\nReference types are a single pointer wide and their layout doesn't matter. Switching between type being a reference type and valuetype is an IL-breaking change and as such it's okay to break R2R too.\r\n\r\nWhile I was at this, I saw a couple other bugs I fixed:\r\n* Value types were considered always within the version bubble, no matter what module defines them.\r\n* We were not looking at `NonVersionableAttribute` (needed to get e.g. `Nullable` fields right).\r\n* Type instantiation was taken into account but it's unrelated to layout.\r\n* Deleted the recursion protection. I assume this was only added because we were recursing into reference types.\r\n* Nit: `IsLiteral` and `HasRva` was redundant with the `IsStatic` check, and so was the `IsByRefLike` with `IsValueType`"},{"Id":"10246498735","Type":"PullRequestEvent","CreatedAt":"2019-08-20T14:53:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7711","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7711) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux"},{"Id":"10246484301","Type":"PullRequestEvent","CreatedAt":"2019-08-20T14:51:57","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7711","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7711) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10259828864","Type":"PullRequestEvent","CreatedAt":"2019-08-22T05:23:28","Actor":"mmitche","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3554","RelatedDescription":"Merged pull request \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3554) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190821.20\r\n- **Date Produced**: 8/22/2019 2:44 AM\r\n- **Commit**: 33c773a5c7602e599053fdbb3a12b7ecfda27e2e\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19421-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10259100690","Type":"PullRequestEvent","CreatedAt":"2019-08-22T02:02:13","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3560","RelatedDescription":"Merged pull request \"Support more test config options\" (#3560) at dotnet/sdk","RelatedBody":"#### Description\r\nAdd more support for specifying tests to run via test config file\r\n\r\n#### Customer Impact\r\nNo direct customer impact, this is a test infrastructure change\r\n\r\n#### Regression?\r\nNo\r\n\r\n#### Risk\r\nLow\r\n\r\nAdds more options for controlling which tests are run.\r\n\r\n- Multiple test config files can be specified (via `-testConfig` or `-testConfigFile`)\r\n- Test config files can have named test lists\r\n- One or more test lists to run can be specified via `-testList` on the command line\r\n- Tests can be specified in test config by method, class, or namespace\r\n- Tests to skip can be put in a `SkippedTests` element in the test config file\r\n\r\nThis should help apply the SDK test assets to other repos, as it will be easier to start by specifying a small set of tests to run instead of trying to skip or fix all the failing tests.  It also may help if we want to have inner / outer loop tests.\r\n\r\nA sample test config file showing the different options:\r\n\r\n```xml\r\n<Tests>\r\n\r\n  <TestList Name=\"BasicBuildTests\">\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetCoreApp.It_runs_the_app_from_the_output_folder\" />\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library\" />\r\n  </TestList>\r\n\r\n  <TestList Name=\"MoreBuildTests\">\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToSetPropertiesInDirectoryBuildProps\" />\r\n  </TestList>\r\n  \r\n  <SkippedTests>\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_resolves_assembly_conflicts\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n  </SkippedTests>\r\n\r\n  <TestList Name=\"TestList1\">\r\n    <Method Name=\"MyNamespace.MyClass.MyTestName\" />\r\n    <Class Name=\"MyNamespace.MyClass\" />\r\n  </TestList>\r\n\r\n  <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_builds_a_netstandard2_library_successfully\"\r\n            Skip=\"true\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n\r\n</Tests>\r\n```"},{"Id":"10258592375","Type":"PullRequestEvent","CreatedAt":"2019-08-21T23:40:16","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3558","RelatedDescription":"Merged pull request \"Merge 3.0.1xx to 3.1.1xx\" (#3558) at dotnet/sdk","RelatedBody":""},{"Id":"10258391152","Type":"PullRequestEvent","CreatedAt":"2019-08-21T22:50:14","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3560","RelatedDescription":"Opened pull request \"Support more test config options\" (#3560) at dotnet/sdk","RelatedBody":"Adds more options for controlling which tests are run.\r\n\r\n- Multiple test config files can be specified (via `-testConfig` or `-testConfigFile`)\r\n- Test config files can have named test lists\r\n- One or more test lists to run can be specified via `-testList` on the command line\r\n- Tests can be specified in test config by method, class, or namespace\r\n- Tests to skip can be put in a `SkippedTests` element in the test config file\r\n\r\nThis should help apply the SDK test assets to other repos, as it will be easier to start by specifying a small set of tests to run instead of trying to skip or fix all the failing tests.  It also may help if we want to have inner / outer loop tests.\r\n\r\nA sample test config file showing the different options:\r\n\r\n```xml\r\n<Tests>\r\n\r\n  <TestList Name=\"BasicBuildTests\">\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetCoreApp.It_runs_the_app_from_the_output_folder\" />\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library\" />\r\n  </TestList>\r\n\r\n  <TestList Name=\"MoreBuildTests\">\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToSetPropertiesInDirectoryBuildProps\" />\r\n  </TestList>\r\n  \r\n  <SkippedTests>\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_resolves_assembly_conflicts\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n  </SkippedTests>\r\n\r\n  <TestList Name=\"TestList1\">\r\n    <Method Name=\"MyNamespace.MyClass.MyTestName\" />\r\n    <Class Name=\"MyNamespace.MyClass\" />\r\n  </TestList>\r\n\r\n  <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_builds_a_netstandard2_library_successfully\"\r\n            Skip=\"true\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n\r\n</Tests>\r\n```"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"483731242","IsPullRequest":false,"CreatedAt":"2019-08-22T02:07:15","Actor":"VincentBu","Number":"26313","RawContent":null,"Title":"System.AccessViolationException: Attempted to read or write protected memory.","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/061738ef-c89d-4da3-9a70-ad8ea1c6968d/workitems/System.Reflection.MetadataLoadContext.Tests/console\r\n\r\n**Mod:**\r\nCOMPlus_JitStress=2\r\nCOMPlus_JitStressRegs=4\r\nCOMPlus_TieredCompilation=0\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\061738ef-c89d-4da3-9a70-ad8ea1c6968d\\Work\\009dec37-7ea7-403e-97d2-0ba158ec2160\\Exec>\"C:\\dotnetbuild\\work\\061738ef-c89d-4da3-9a70-ad8ea1c6968d\\Payload\\dotnet.exe\" exec --runtimeconfig System.Reflection.MetadataLoadContext.Tests.runtimeconfig.json xunit.console.dll System.Reflection.MetadataLoadContext.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\061738ef-c89d-4da3-9a70-ad8ea1c6968d\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Reflection.MetadataLoadContext.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Reflection.MetadataLoadContext.Tests (found 484 test cases)\r\n  Starting:    System.Reflection.MetadataLoadContext.Tests (parallel test collections = on, max threads = 2)\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Reflection.TypeLoading.Ecma.EcmaModule.GetGenericTypeParameter(System.Reflection.TypeLoading.TypeContext, Int32)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeTypeSequence(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeGenericTypeInstance(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean, Int32)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeSpec(System.Reflection.Metadata.TypeSpecificationHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeDefRefOrSpec(System.Reflection.Metadata.EntityHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaDefinitionType.SpecializeBaseType(System.Reflection.TypeLoading.RoType[])\r\n   at System.Reflection.TypeLoading.RoType.ComputeBaseType()\r\n   at System.Reflection.TypeLoading.RoType.GetRoBaseType()\r\n   at System.Reflection.TypeLoading.Assignability.CanCastTo(System.Type, System.Type, System.Reflection.TypeLoading.CoreTypes)\r\n   at System.Reflection.TypeLoading.Assignability.IsAssignableFrom(System.Type, System.Type, System.Reflection.TypeLoading.CoreTypes)\r\n   at System.Reflection.TypeLoading.RoType.IsAssignableFrom(System.Type)\r\n   at System.Reflection.TypeLoading.RoType.IsAssignableFrom(System.Reflection.TypeInfo)\r\n   at System.Reflection.Tests.TypeInfoIsAssignableFromTests.VerifyIsAssignableFrom(System.String, System.Reflection.TypeInfo, System.Reflection.TypeInfo, Boolean)\r\n   at System.Reflection.Tests.TypeInfoIsAssignableFromTests.TestIsAssignable3()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__9 ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestMethodAsync>d__48<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<RunAsync>b__47_0>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.Decimal> ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestAsync>d__4 ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.__Canon> ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>)\r\n   at Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__43<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync()\r\n   at Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__31<System.__Canon> ByRef)\r\n   at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1<Xunit.Sdk.IXunitTestCase>, System.Object[])\r\n   at Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestMethodsAsync>d__38<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__37<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestClassesAsync>d__28<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__27<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner+<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntry()\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler+<>c.<.cctor>b__8_0(System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(System.Threading.SendOrPostCallback, System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()\r\n   at Xunit.Sdk.XunitWorkerThread+<>c.<QueueUserWorkItem>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler+<>c.<.cctor>b__10_0(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\nexit code -1073741819\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26313","RelatedDescription":"Open issue \"System.AccessViolationException: Attempted to read or write protected memory.\" (#26313)"},{"Id":"483729581","IsPullRequest":false,"CreatedAt":"2019-08-22T02:00:12","Actor":"VincentBu","Number":"26312","RawContent":null,"Title":"Assert failure: object->HasEmptySyncBlockInfo","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/9eff63f8-1806-4564-bc99-dd40a64bef2e/workitems/System.Drawing.Common.Tests/console\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 22 [0x00000016], Thread: 38 [0x0026]): object->HasEmptySyncBlockInfo()\r\n    File: /__w/10/s/src/vm/jithelpers.cpp Line: 2690\r\n    Image: /root/helix/work/correlation/dotnet\r\n\r\n./RunTests.sh: line 161:    22 Aborted                 \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Drawing.Common.Tests.runtimeconfig.json xunit.console.dll System.Drawing.Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem\r\n exit code 134\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26312","RelatedDescription":"Open issue \"Assert failure: object->HasEmptySyncBlockInfo\" (#26312)"},{"Id":"483728056","IsPullRequest":false,"CreatedAt":"2019-08-22T01:53:45","Actor":"VincentBu","Number":"26311","RawContent":null,"Title":"System.Collections.Immutable.Tests terminated","State":"open","Body":"**Details:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/7b08c819-87fd-42e8-b0a3-fdc2e3f52809/workitems/System.Collections.Immutable.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Collections.Immutable.Tests\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\7b08c819-87fd-42e8-b0a3-fdc2e3f52809\\Work\\3f4404e0-0e73-445e-8abb-7d18cf951161\\Exec>\"C:\\dotnetbuild\\work\\7b08c819-87fd-42e8-b0a3-fdc2e3f52809\\Payload\\dotnet.exe\" exec --runtimeconfig System.Collections.Immutable.Tests.runtimeconfig.json xunit.console.dll System.Collections.Immutable.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\7b08c819-87fd-42e8-b0a3-fdc2e3f52809\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Collections.Immutable.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Collections.Immutable.Tests (found 928 of 932 test cases)\r\n  Starting:    System.Collections.Immutable.Tests (parallel test collections = on, max threads = 2)\r\nProcess terminated. Assertion failed.\r\nCheck the arguments in the caller!\r\n   at System.Collections.Generic.GenericArraySortHelper`1.BinarySearch(T[] array, Int32 index, Int32 length, T value, IComparer`1 comparer) in /_/src/System.Private.CoreLib/shared/System/Collections/Generic/ArraySortHelper.cs:line 367\r\n   at System.Collections.Generic.List`1.BinarySearch(Int32 index, Int32 count, T item, IComparer`1 comparer) in /_/src/System.Private.CoreLib/shared/System/Collections/Generic/List.cs:line 285\r\n   at System.Collections.Immutable.Tests.ImmutableListTestBase.BinarySearchPartialSortedListHelper(ImmutableArray`1 inputData, Int32 sortedIndex, Int32 sortedLength) in /_/src/System.Collections.Immutable/tests/ImmutableListTestBase.cs:line 447\r\n   at System.Collections.Immutable.Tests.ImmutableListTestBase.BinarySearchPartialSortedList() in /_/src/System.Collections.Immutable/tests/ImmutableListTestBase.cs:line 427\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 434\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) in /_/src/System.Private.CoreLib/shared/System/Reflection/MethodBase.cs:line 49\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 150\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 257\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction)\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 242\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code)\r\n   at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 241\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance)\r\n   at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestInvoker.cs:line 112\r\n   at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 206\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n   at Xunit.Sdk.TestInvoker`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 189\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(ExceptionAggregator aggregator) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 84\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 67\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)\r\n   at Xunit.Sdk.TestRunner`1.<>c__DisplayClass43_0.<RunAsync>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestRunner.cs:line 149\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n   at Xunit.Sdk.TestRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestRunner.cs:line 149\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestCaseRunner.cs:line 139\r\n   at Xunit.Sdk.TestCaseRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCaseRunner.cs:line 82\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestCaseRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestCase.RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\XunitTestCase.cs:line 162\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(IXunitTestCase testCase) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestMethodRunner.cs:line 45\r\n   at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 136\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 106\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestMethodRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(ITestMethod testMethod, IReflectionMethodInfo method, IEnumerable`1 testCases, Object[] constructorArguments) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestClassRunner.cs:line 168\r\n   at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 213\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 171\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestClassRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1 testCases) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestCollectionRunner.cs:line 158\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 130\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 101\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 978\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1 testCases, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 235\r\n   at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 184\r\n   at System.Threading.Tasks.Task`1.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Future.cs:line 506\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2372\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2329\r\n   at System.Threading.Tasks.Task.ExecuteEntry() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2240\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/TaskScheduler.cs:line 608\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 107\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.<>c__DisplayClass11_0.<WorkerThreadProc>b__0(Object _) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 96\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 132\r\n   at Xunit.Sdk.ExecutionContextHelper.Run(Object context, Action`1 action) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Utility\\ExecutionContextHelper.cs:line 111\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 89\r\n   at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _) in C:\\Dev\\xunit\\xunit\\src\\common\\XunitWorkerThread.cs:line 37\r\n   at System.Threading.Tasks.Task.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2393\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2372\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2329\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2271\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.<>c.<.cctor>b__10_0(Object s) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/ThreadPoolTaskScheduler.cs:line 37\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state) in /_/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 50\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n   at System.Threading.ThreadHelper.ThreadStart(Object obj) in /_/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 83\r\nexit code -2146232797\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26311","RelatedDescription":"Open issue \"System.Collections.Immutable.Tests terminated\" (#26311)"},{"Id":"483726116","IsPullRequest":true,"CreatedAt":"2019-08-22T01:44:44","Actor":"stephentoub","Number":"26310","RawContent":null,"Title":"[WIP] Make \"async ValueTask/ValueTask<T>\" methods ammortized allocation-free","State":"open","Body":"Today `async ValueTask/ValueTask<T>` methods use builders that special-case the synchronously completing case (to just return a `default(ValueTask)` or `new ValueTask<T>(result)`) but defer to the equivalent of `async Task/Task<T>` for when the operation completes asynchronously.  This, however, doesn't take advantage of the fact that value tasks can wrap arbitrary `IValueTaskSource/IValueTaskSource<T>` implementations.\r\n\r\nI've had this sitting on the shelf for a while, but finally cleaned it up.  The first three commits here are just moving around existing code.  The last two commits are the meat of this change.  This changes `AsyncValueTaskMethodBuilder` and `AsyncValueTaskMethodBuilder<T>` to use pooled `IValueTaskSource/IValueTaskSource<T>` instances, such that calls to an `async ValueTask/ValueTask<T>` method incur 0 allocations as long as there's a cached object available.\r\n\r\nI've marked this as a draft and work-in-progress for a few reasons:\r\n1. There's a breaking change here, in that while we say/document that `ValueTask/ValueTask<T>`s are more limited in what they can be used for, nothing in the implementation actually stops a `ValueTask` that was wrapping a `Task` from being used as permissively as `Task`, e.g. if you were to await such a `ValueTask` multiple times, it would happen to work, even though we say \"never do that\".  This change means that anyone who was relying on such undocumented behaviors will now be broken.  I think this is a reasonable thing to do in a major release, but I also want feedback and a lot of runway on it.  There's the potential to make it opt-in (or opt-out) as well, but that will also non-trivially complicate the implementation.\r\n2. Policy around pooling.  This is always a difficult thing to tune.  Right now I've chosen a policy that limits the number of pooled objects per state machine type to an arbitrary multiple of the processor count, and that tries to strike a balance between contention and garbage by using a spin lock and if there's any contention while trying to get or return a pooled object, the cache is ignored.  We will need to think hard about what policy to use here.  It's also possible it could be tuned per state machine, e.g. by having an attribute that's looked up via reflection when creating the cache for a state machine, but that'll add a lot of first-access overhead to any `async ValueTask/ValueTask<T>` method.\r\n3. There are probably still some corner cases that need to be addressed. There are a few tweaks needed to the corefx tests in order to change them to stop validating some undocumented implementation details, but once I do that, this passes our corefx threading test suites.\r\n\r\ncc: @kouvel, @tarekgh, @benaadams ","Url":"https://github.com/dotnet/coreclr/pull/26310","RelatedDescription":"Open PR \"[WIP] Make \"async ValueTask/ValueTask<T>\" methods ammortized allocation-free\" (#26310)"},{"Id":"483726055","IsPullRequest":false,"CreatedAt":"2019-08-22T01:44:26","Actor":"VincentBu","Number":"26309","RawContent":null,"Title":"Process terminated. Assertion failed. \"!_fileHandle.IsClosed\"","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/0c15185a-2331-4dcf-978c-cd7c4a4b3189/workitems/System.Diagnostics.Process.Tests/console\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\0c15185a-2331-4dcf-978c-cd7c4a4b3189\\Work\\2eeb62f3-774b-43f1-94ac-c844f873d662\\Exec>\"C:\\dotnetbuild\\work\\0c15185a-2331-4dcf-978c-cd7c4a4b3189\\Payload\\dotnet.exe\" exec --runtimeconfig System.Diagnostics.Process.Tests.runtimeconfig.json xunit.console.dll System.Diagnostics.Process.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\0c15185a-2331-4dcf-978c-cd7c4a4b3189\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 221 of 241 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 2)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.StartInfo_WebPage [SKIP]\r\n      Manual test\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\nProcess terminated. Assertion failed.\r\n!_fileHandle.IsClosed\r\n   at System.IO.FileStream.AssertCanRead() in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs:line 482\r\n   at System.IO.FileStream.ReadNative(Span`1 buffer) in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs:line 497\r\n   at System.IO.FileStream.ReadSpan(Span`1 destination) in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs:line 429\r\n   at System.IO.FileStream.Read(Byte[] array, Int32 offset, Int32 count) in /_/src/System.Private.CoreLib/shared/System/IO/FileStream.cs:line 304\r\n   at System.IO.Stream.<>c.<BeginReadInternal>b__43_0(Object <p0>) in /_/src/System.Private.CoreLib/shared/System/IO/Stream.cs:line 303\r\n   at System.Threading.Tasks.Task`1.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Future.cs:line 512\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2372\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2333\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2271\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2256\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() in /_/src/System.Private.CoreLib/shared/System/Threading/ThreadPool.cs:line 664\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() in /_/src/System.Private.CoreLib/src/System/Threading/ThreadPool.CoreCLR.cs:line 29\r\nexit code -2146232797 \r\n```","Url":"https://github.com/dotnet/coreclr/issues/26309","RelatedDescription":"Open issue \"Process terminated. Assertion failed. \"!_fileHandle.IsClosed\"\" (#26309)"},{"Id":"483723469","IsPullRequest":false,"CreatedAt":"2019-08-22T01:32:24","Actor":"VincentBu","Number":"26308","RawContent":null,"Title":"Test failed: System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/9f2533c8-5903-447b-b099-3c861eb02547/workitems/System.Drawing.Common.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success\r\n\r\n**Log:**\r\n```\r\nSystem.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success(type: Bitmap) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=0, G=0, B=0]\r\n      Actual:   Color [A=255, R=0, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(195,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success(ColorAdjustType type)\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=255, G=0, B=0]\r\n      Actual:   Color [A=255, R=255, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(434,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(ColorMatrixFlag flag, ColorAdjustType type, Color grayShade, Color expecedGrayShade)\r\n    System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(flag: Default, type: Bitmap, grayShade: Color [A=255, R=100, G=100, B=100], expecedGrayShade: Color [A=255, R=100, G=0, B=100]) [FAIL]\r\n    System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(flag: SkipGrays, type: Bitmap, grayShade: Color [A=255, R=100, G=100, B=100], expecedGrayShade: Color [A=255, R=100, G=100, B=100]) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=255, G=0, B=0]\r\n      Actual:   Color [A=255, R=255, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(434,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(ColorMatrixFlag flag, ColorAdjustType type, Color grayShade, Color expecedGrayShade)\r\n      Assert.Equal() Failure\r\n      Expected: Color [A=255, R=255, G=0, B=0]\r\n      Actual:   Color [A=255, R=255, G=255, B=0]\r\n      Stack Trace:\r\n        /_/src/System.Drawing.Common/tests/Imaging/ImageAttributesTests.cs(434,0): at System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(ColorMatrixFlag flag, ColorAdjustType type, Color grayShade, Color expecedGrayShade)\r\n    System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrices_ColorMatrixGrayMatrixFlagsTypes_Success(flag: AltGrays, type: Bitmap, grayShade: Color [A=255, R=100, G=100, B=100], expecedGrayShade: Color [A=255, R=100, G=200, B=255]) [FAIL]\r\n    System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues: -1) [SKIP]\r\n      backwards compatibility on 32 bit platforms may not throw\r\n    System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues: -2147483648) [SKIP]\r\n      backwards compatibility on 32 bit platforms may not throw\r\n    MonoTests.System.Drawing.GraphicsTest.Rotate [SKIP]\r\n      Precision on float numbers\r\n\r\nAssert failure(PID 22 [0x00000016], Thread: 43 [0x002b]): object->HasEmptySyncBlockInfo()\r\n    File: /__w/6/s/src/vm/jithelpers.cpp Line: 2690\r\n    Image: /root/helix/work/correlation/dotnet\r\n\r\n./RunTests.sh: line 161:    22 Aborted                 \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Drawing.Common.Tests.runtimeconfig.json xunit.console.dll System.Drawing.Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem\r\n exit code 134 \r\n```","Url":"https://github.com/dotnet/coreclr/issues/26308","RelatedDescription":"Open issue \"Test failed: System.Drawing.Imaging.Tests.ImageAttributesTests.SetColorMatrix_ColorMatrixDefaultFlagType_Success\" (#26308)"},{"Id":"483143179","IsPullRequest":true,"CreatedAt":"2019-08-22T01:25:52","Actor":"stephentoub","Number":"26288","RawContent":null,"Title":"Use StyleCop to fix up more spacing issues","State":"closed","Body":"This is mostly auto-fixers inserting and removing spacing to make things more consistent across corelib.  In a few cases, I manually intervened, mostly removing stale/erroneous comments as I was reviewing each change.  I also replaced all `for(;;)` with `while (true)`, as there was enough variation in the spacing in `for(;;)` to make me just want to avoid the issue altogether and standardize on the latter.","Url":"https://github.com/dotnet/coreclr/pull/26288","RelatedDescription":"Closed or merged PR \"Use StyleCop to fix up more spacing issues\" (#26288)"},{"Id":"483692358","IsPullRequest":false,"CreatedAt":"2019-08-21T23:09:35","Actor":"sandreenko","Number":"26307","RawContent":null,"Title":"Make sure that GenTree pointer is stored only in its parent.","State":"open","Body":"Right now we can have `fgArgInfo` that has `fgArgTabEntry` that points to a `GenTree`, so every time when we replace one tree with another we have to check for this case and do an expensive linear search in the arg info array. See `ReplaceOperand` for example.\r\n\r\nWe should get rid of any second edges to `GenTree`, so every time when we replace/remove a tree we need to update only one edge.","Url":"https://github.com/dotnet/coreclr/issues/26307","RelatedDescription":"Open issue \"Make sure that GenTree pointer is stored only in its parent.\" (#26307)"},{"Id":"483686152","IsPullRequest":true,"CreatedAt":"2019-08-21T22:45:06","Actor":"jkoritzinsky","Number":"26306","RawContent":null,"Title":"Publish native test assets for consumption by performance testing","State":"open","Body":"The dotnet/performance repo doesn't have any infrastructure to build native assets for the performance testing. Since native test assets are needed to accurately benchmark our interop stack, this PR publishes the native assets (zipped) to the blob feed along with an asset manifest (currently for each platform).\r\n\r\nWith these manifests and blob feed assets, we can add microbenchmarks in the dotnet/performance repo that use the packaged native assets by having the dotnet/performance build pull down the build manifests and the assets, unzip them, and copy them to the output directory as content.\r\n\r\nIn this PR, the package contains the native assets for the following Interop scenarios:\r\n\r\n- P/Invoke native DLL load\r\n- String marshalling\r\n- General struct marshalling\r\n- LayoutClass marshalling\r\n- SafeHandle marshalling\r\n\r\ncc: @dotnet/coreclr-infra","Url":"https://github.com/dotnet/coreclr/pull/26306","RelatedDescription":"Open PR \"Publish native test assets for consumption by performance testing\" (#26306)"},{"Id":"483648077","IsPullRequest":true,"CreatedAt":"2019-08-21T20:56:23","Actor":"elinor-fung","Number":"26305","RawContent":null,"Title":"Make bundle host link in static coreclr","State":"open","Body":"\r\n- Restore / use `Microsoft.Private.CoreFx.NETCoreApp` package for static libraries from corefx\r\n- Don't link in `System.IO.Ports.Native.a`. The static library is not published by corefx and it is not part of netcoreapp, so I don't think all apps would need it (they need to explicitly depend on a separate `System.IO.Ports` nuget package to use it)\r\n- Add an override for the system path used to load `System.Private.CoreLib` (was assumed to be the folder from which coreclr code is running, but that is not the case with the bundle)\r\n- Make loading the pal module defer to the current image if it doesn't end in the shared library suffix","Url":"https://github.com/dotnet/coreclr/pull/26305","RelatedDescription":"Open PR \"Make bundle host link in static coreclr\" (#26305)"},{"Id":"483637493","IsPullRequest":false,"CreatedAt":"2019-08-21T20:32:35","Actor":"GrabYourPitchforks","Number":"26304","RawContent":null,"Title":"GC.AllocateUninitializedArray should tighten its logic around when to return zeroed arrays","State":"open","Body":"In https://github.com/dotnet/coreclr/pull/24504, the `ArrayPool<T>`-derived types were changed to use `GC.AllocateUninitializedArray<T>(...)` under the covers as a performance optimization. The `AllocateUninitializedArray` method uses `RuntimeHelpers.IsReferenceOrContainsReferences` as an implementation detail when determining whether to return a zeroed array or an uninitialized array back to the caller.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/af9edac7acd4735eebd7a293b27b1c509989dae8/src/System.Private.CoreLib/src/System/GC.cs#L665-L668\r\n\r\nThis logic is a little too relaxed. It appears that the `AllocateUninitializedArray` method is trying to ask the question \"Is any arbitrary bit pattern valid for type _T_?\", but the `IsReferenceOrContainsReferences` method answers the separate question \"Is type _T_ 'interesting' to the GC?\"\r\n\r\nThere are several value types where `IsReferenceOrContainsReferences` returns _false_ but which cannot store arbitrary bit patterns without causing problems. Among them:\r\n\r\n* System.Boolean (most consumers expect it to contain only `0` or `1`)\r\n* System.Decimal (see https://github.com/dotnet/coreclr/issues/16336)\r\n* System.DateTime / System.DateTimeOffset\r\n* System.Runtime.InteropServices.GCHandle\r\n* System.Buffers.StandardFormat\r\n* System.Text.Rune\r\n\r\nThe behaviors of calling instance methods on these types or of consuming these types when they've been initialized with arbitrary bit patterns is undefined, and it could result in anything from nonsensical answers being generated to crashing the runtime.\r\n\r\nNormally we'd tell developers not to look at the elements of arrays returned by `GC.AllocateUninitializedArray` or `ArrayPool<T>.Rent`, but there are some situations where they might not be able to control it. For example, if I'm under the VS debugger and I step past a call to `AllocateUninitializedArray` or `Rent`, the debugger could start listing the array's elements automatically even though my own code wouldn't have done such a thing.\r\n\r\nIf we do not want to change `GC.AllocateUninitializedArray` (perhaps because we consider it an \"unsafe\" API), we should at least consider putting the stronger checks into the `ArrayPool<T>`-derived classes.","Url":"https://github.com/dotnet/coreclr/issues/26304","RelatedDescription":"Open issue \"GC.AllocateUninitializedArray should tighten its logic around when to return zeroed arrays\" (#26304)"},{"Id":"483618514","IsPullRequest":false,"CreatedAt":"2019-08-21T19:49:00","Actor":"mthalman","Number":"26303","RawContent":null,"Title":"Define master list of native dependencies","State":"open","Body":"There's a need to have a definitive list of the product's native package dependencies provided in a machine-readable format.  This is the only way to guarantee the .NET Core Docker images, snaps, and native Linux packages (e.g. debian packages) all include the correct set of dependencies.  Right now, the maintenance of the list of dependencies is done in an ad hoc manner with no explicit validation.\r\n\r\nThis leads to a risk that a required dependency is not included and instead relies on tests to uncover a scenario that breaks due to the missing dependency.  But the testing done at this level is unlikely to be extensive enough to uncover such scenarios.  For example, the Docker images are tested with a basic set of smoke tests.\r\n\r\nHaving a machine-readable format would allow for automation to validate that these downstream assets are including the correct dependencies.","Url":"https://github.com/dotnet/coreclr/issues/26303","RelatedDescription":"Open issue \"Define master list of native dependencies\" (#26303)"},{"Id":"483599877","IsPullRequest":true,"CreatedAt":"2019-08-21T19:05:05","Actor":"fadimounir","Number":"26302","RawContent":null,"Title":"Replace Ubuntu 1404 platforms with 1604","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26302","RelatedDescription":"Open PR \"Replace Ubuntu 1404 platforms with 1604\" (#26302)"},{"Id":"483552569","IsPullRequest":false,"CreatedAt":"2019-08-21T17:29:55","Actor":"EgorBo","Number":"26301","RawContent":null,"Title":"IntPtr.Equals() is slower than IntPtr==","State":"open","Body":"I was implementing IntPtr/UIntPtr intrinsics for mono and noticed that `IntPtr.Equals()` could be improved (other members are intrinsics)\r\n```csharp\r\n    static bool IntPtrEq1(IntPtr x, IntPtr y) => x == y;    \r\n    static bool IntPtrEq2(IntPtr x, IntPtr y) => x.Equals(y);\r\n    static bool LongEq(long x, long y) => x.Equals(y);\r\n```\r\ngenerates (tier1):\r\n```asm\r\n; Method FF:IntPtrEq1(long,long):bool\r\nG_M18580_IG01:\r\nG_M18580_IG02:\r\n       cmp      rcx, rdx\r\n       sete     al\r\n       movzx    rax, al\r\nG_M18580_IG03:\r\n       ret      \r\n; Total bytes of code: 10\r\n\r\n\r\n; Method FF:IntPtrEq2(long,long):bool\r\nG_M18577_IG01:\r\n       push     rdi\r\n       push     rsi\r\n       sub      rsp, 40\r\n       mov      rsi, rcx\r\n       mov      rdi, rdx\r\nG_M18577_IG02:\r\n       mov      rcx, 0xD1FFAB1E\r\n       call     CORINFO_HELP_NEWSFAST\r\n       mov      qword ptr [rax+8], rdi\r\n       mov      rax, qword ptr [rax+8]\r\n       cmp      rsi, rax\r\n       sete     al\r\n       movzx    rax, al\r\nG_M18577_IG03:\r\n       add      rsp, 40\r\n       pop      rsi\r\n       pop      rdi\r\n       ret      \r\n; Total bytes of code: 51\r\n\r\n\r\n; Method FF:LongEq(long,long):bool\r\nG_M24494_IG01:\r\nG_M24494_IG02:\r\n       cmp      rcx, rdx\r\n       sete     al\r\n       movzx    rax, al\r\nG_M24494_IG03:\r\n       ret      \r\n; Total bytes of code: 10\r\n```\r\n\r\nPerhaps, a non-boxing `bool Equals(IntPtr)` API should be added?","Url":"https://github.com/dotnet/coreclr/issues/26301","RelatedDescription":"Open issue \"IntPtr.Equals() is slower than IntPtr==\" (#26301)"},{"Id":"483550314","IsPullRequest":true,"CreatedAt":"2019-08-21T17:24:47","Actor":"BruceForstall","Number":"26300","RawContent":null,"Title":"Add makeSmOpcodeDef.pl script","State":"open","Body":"Fixes #26038","Url":"https://github.com/dotnet/coreclr/pull/26300","RelatedDescription":"Open PR \"Add makeSmOpcodeDef.pl script\" (#26300)"},{"Id":"483541735","IsPullRequest":true,"CreatedAt":"2019-08-21T17:04:56","Actor":"janvorli","Number":"26299","RawContent":null,"Title":"Unify Unix arm compiler optimization options","State":"open","Body":"Long time ago, we were using clang 3.8 for building for Unix arm. There\r\nwas a codegen bug that forced us to set optimization for release build\r\nto -O1 instead of -O3.\r\nNow the minimum clang version we use for arm is 5.0 and I've verified\r\nthat binaries compiled with -O3 pass all the Coreclr pri 1 tests and so\r\nthe issue is gone.\r\nSo this change unifies the optimization levels for all architectures.","Url":"https://github.com/dotnet/coreclr/pull/26299","RelatedDescription":"Open PR \"Unify Unix arm compiler optimization options\" (#26299)"},{"Id":"483526902","IsPullRequest":true,"CreatedAt":"2019-08-21T16:31:53","Actor":"janvorli","Number":"26298","RawContent":null,"Title":"Remove unused runtime functions and files","State":"open","Body":"This is another round of cleanup based on the list of stuff eliminated by the linker on Linux with extra options to collect garbage.","Url":"https://github.com/dotnet/coreclr/pull/26298","RelatedDescription":"Open PR \"Remove unused runtime functions and files\" (#26298)"},{"Id":"483383531","IsPullRequest":true,"CreatedAt":"2019-08-21T16:02:42","Actor":"dotnet-maestro[bot]","Number":"26289","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26289)"},{"Id":"483386349","IsPullRequest":true,"CreatedAt":"2019-08-21T15:20:56","Actor":"dotnet-maestro[bot]","Number":"26290","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9d917c39-9eee-4aa5-f8e9-08d6910be5f1)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:9d917c39-9eee-4aa5-f8e9-08d6910be5f1)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26290","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#26290)"},{"Id":"483459143","IsPullRequest":false,"CreatedAt":"2019-08-21T14:31:54","Actor":"NMSAzulX","Number":"26296","RawContent":null,"Title":"Suggestion：More Chinese documents.","State":"open","Body":"**A lot of the first-hand information is in English. Can the official translation team internationalize these documents?**\r\ne.g: https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/\r\n\r\nThere are many developers in China who like. Net Core. The common problem is that they can't understand the meaning of English documents. Suppressed by the JAVA market, we were forced to make a living. We can put up with everything, but we need more information about. Net Core, which is an important source of spiritual power. This topic is not initiated by me alone, in China,. Net ecological construction is a common topic for developers.\r\n\r\n> We have Microsoft China here, but we don't know what they're doing. \r\n> If there are political reasons, please let us know.","Url":"https://github.com/dotnet/coreclr/issues/26296","RelatedDescription":"Open issue \"Suggestion：More Chinese documents.\" (#26296)"},{"Id":"483391926","IsPullRequest":true,"CreatedAt":"2019-08-21T14:27:31","Actor":"dotnet-maestro[bot]","Number":"26292","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190820.08\r\n- **Date Produced**: 8/20/2019 11:23 PM\r\n- **Commit**: f385116c74c1513e7e241f0586675486e9b25115\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19420-08\r\n\r\n[marker]: <> (End:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26292","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/core-setup\" (#26292)"},{"Id":"483386562","IsPullRequest":true,"CreatedAt":"2019-08-21T14:16:36","Actor":"dotnet-maestro[bot]","Number":"26291","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.10\r\n- **Date Produced**: 8/21/2019 12:53 AM\r\n- **Commit**: d341fd37dcb2c22e382adccdc06770cf8f160577\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-rc1.19420.10\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-rc1.19420.10\r\n\r\n[marker]: <> (End:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26291","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#26291)"},{"Id":"483440238","IsPullRequest":true,"CreatedAt":"2019-08-21T14:01:33","Actor":"mmitche","Number":"26295","RawContent":null,"Title":"[release/3.0-preview9] Unblock p9 builds by having correct extension on manifests","State":"closed","Body":"#### Description\r\n\r\nPreview9 builds are blocked because the asset manifests are not suffixed with .xml.\r\n\t\t\r\n#### Customer Impact\r\n\r\nNo build","Url":"https://github.com/dotnet/coreclr/pull/26295","RelatedDescription":"Closed or merged PR \"[release/3.0-preview9] Unblock p9 builds by having correct extension on manifests\" (#26295)"},{"Id":"483432829","IsPullRequest":false,"CreatedAt":"2019-08-21T13:48:10","Actor":"mmitche","Number":"26294","RawContent":null,"Title":"[release/3.0-preview9] CoreCLR build failing upload to BAR","State":"open","Body":"It looks like this is a result of CoreCLR not naming its build manifests with a '.xml' extension, a result of this change \r\n\r\nBuilds have been failing for quite a while (since about the 9th) but were not noticed because they rarely pass even when completing the build portion.","Url":"https://github.com/dotnet/coreclr/issues/26294","RelatedDescription":"Open issue \"[release/3.0-preview9] CoreCLR build failing upload to BAR\" (#26294)"},{"Id":"483428807","IsPullRequest":false,"CreatedAt":"2019-08-21T13:41:33","Actor":"mmitche","Number":"26293","RawContent":null,"Title":"[release/3.0] Coreclr official build waiting until tests done to publish outputs","State":"open","Body":"The coreclr build is now waiting until the tests are built and executed before publishing to BAR.  I do not believe this was the case before, as the PublishToBAR job ran after the builds were finished, which triggered the release. In the move to stages, this behavior was accidentally dropped.\r\n\r\n@jashook @wtgodbe \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26293","RelatedDescription":"Open issue \"[release/3.0] Coreclr official build waiting until tests done to publish outputs\" (#26293)"},{"Id":"483136401","IsPullRequest":true,"CreatedAt":"2019-08-21T00:03:39","Actor":"dotnet-maestro-bot","Number":"26287","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"open","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @mmitche\n* @AaronRobinsonMSFT\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/26287","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#26287)"},{"Id":"483088182","IsPullRequest":true,"CreatedAt":"2019-08-20T23:22:23","Actor":"dotnet-maestro-bot","Number":"26285","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"closed","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @AaronRobinsonMSFT\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/26285","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#26285)"},{"Id":"483101793","IsPullRequest":false,"CreatedAt":"2019-08-20T21:54:44","Actor":"janvorli","Number":"26286","RawContent":null,"Title":"JIT/HardwareIntrinsics/X86/Sse41_Overloaded consistently asserts on my Linux box","State":"open","Body":"My box is a relatively old machine with Intel Xeon  E5530  @ 2.40GHz\r\nThe test fails with\r\n`Assert failure(PID 65156 [0x0000fe84], Thread: 65156 [0xfe84]): Assertion failed '(insCodesMI[ins] != BAD_CODE)' in 'JIT.HardwareIntrinsics.X86.SimpleUnaryOpTest__RoundCurrentDirectionScalarDouble:RunBasicScenario_UnsafeRead():this' (IL size 87)`\r\n\r\nThe `ins` is `INS_roundsd`.\r\nHere is a relevant top portion of the stack trace:\r\n```\r\n* thread #1, name = 'corerun', stop reason = signal SIGTRAP\r\n  * frame #0: 0x00007ffff0dc6209 libclrjit.so`DBG_DebugBreak at debugbreak.S:10\r\n    frame #1: 0x00007ffff0d2afe1 libclrjit.so`::DebugBreak() at debug.cpp:405\r\n    frame #2: 0x00007ffff0a5f662 libclrjit.so`::assertAbort(why=\"(insCodesMI[ins] != BAD_CODE)\", file=\"/home/janvorli/git/coreclr2/src/jit/emitxarch.cpp\", line=1345) at error.cpp:293\r\n    frame #3: 0x00007ffff0c8b8a6 libclrjit.so`insCodeMI(ins=INS_roundsd) at emitxarch.cpp:1345\r\n    frame #4: 0x00007ffff0c72c53 libclrjit.so`emitter::emitIns_R_I(this=0x00000000007f9fb8, ins=INS_roundsd, attr=EA_16BYTE, reg=REG_XMM0, val=4) at emitxarch.cpp:3765\r\n    frame #5: 0x00007ffff0c785d0 libclrjit.so`emitter::emitIns_SIMD_R_R_I(this=0x00000000007f9fb8, ins=INS_roundsd, attr=EA_16BYTE, targetReg=REG_XMM0, op1Reg=REG_XMM0, ival=4) at emitxarch.cpp:5774\r\n    frame #6: 0x00007ffff0b3f005 libclrjit.so`CodeGen::inst_RV_TT_IV(this=0x00000000007f9b48, ins=INS_roundsd, attr=EA_16BYTE, reg1=REG_XMM0, rmOp=0x00000000007fbd78, ival=4) at instr.cpp:1165\r\n    frame #7: 0x00007ffff0cba616 libclrjit.so`CodeGen::genHWIntrinsic_R_RM_I(this=0x00000000007f9b48, node=0x00000000007fbde8, ins=INS_roundsd, ival='\\x04') at hwintrinsiccodegenxarch.cpp:555\r\n    frame #8: 0x00007ffff0cb9815 libclrjit.so`CodeGen::genHWIntrinsic(this=0x00000000007f9b48, node=0x00000000007fbde8) at hwintrinsiccodegenxarch.cpp:128\r\n    frame #9: 0x00007ffff0c5f000 libclrjit.so`CodeGen::genCodeForTreeNode(this=0x00000000007f9b48, treeNode=0x00000000007fbde8) at codegenxarch.cpp:1818\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26286","RelatedDescription":"Open issue \"JIT/HardwareIntrinsics/X86/Sse41_Overloaded consistently asserts on my Linux box\" (#26286)"},{"Id":"483078808","IsPullRequest":true,"CreatedAt":"2019-08-20T20:57:05","Actor":"dotnet-maestro-bot","Number":"26284","RawContent":null,"Title":"[automated] Merge branch 'release/3.0-preview9' => 'release/3.1'","State":"open","Body":"I detected changes in the release/3.0-preview9 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0-preview9 by the following committers:\n\n* @mmitche\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0-preview9\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0-preview9\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-preview9-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-preview9-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-preview9-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-preview9-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-preview9-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/26284","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.0-preview9' => 'release/3.1'\" (#26284)"},{"Id":"483507628","IsPullRequest":false,"CreatedAt":"2019-08-08T06:13:08","Actor":"jkotas","Number":"26297","RawContent":null,"Title":"ArrayPool degradation above 70% memory utilization","State":"open","Body":"From https://gitter.im/dotnet/corefx?at=5d043a468e050f62aa1ccc18 :\r\n\r\nusing the arraypool is great in theory but since it responds to gc pressure once you start getting collections you lose most benefit from it.","Url":"https://github.com/dotnet/coreclr/issues/26297","RelatedDescription":"Open issue \"ArrayPool degradation above 70% memory utilization\" (#26297)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"483123316","IsPullRequest":true,"CreatedAt":"2019-08-22T05:24:02","Actor":"dotnet-maestro[bot]","Number":"12316","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190821.20\r\n- **Date Produced**: 8/22/2019 2:44 AM\r\n- **Commit**: 33c773a5c7602e599053fdbb3a12b7ecfda27e2e\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19421-20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19421-20\r\n\r\n[marker]: <> (End:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12316","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#12316)"},{"Id":"483122946","IsPullRequest":true,"CreatedAt":"2019-08-22T00:01:53","Actor":"johnbeisner","Number":"12315","RawContent":null,"Title":"Add support for Microsoft.WindowsDesktop.App","State":"closed","Body":"Add support for Microsoft.WindowsDesktop.App\r\n\r\nAddresses: https://github.com/dotnet/cli/issues/11115 & https://github.com/dotnet/docs/issues/11943\r\n\r\nRelated: https://github.com/dotnet/core-setup/issues/6370\r\n\r\n**Testing:** \r\n`dotnet-install.ps1 -Runtime windowsdesktop -version 3.0.0-preview9-19420-02 -verbose`","Url":"https://github.com/dotnet/cli/pull/12315","RelatedDescription":"Closed or merged PR \"Add support for Microsoft.WindowsDesktop.App\" (#12315)"},{"Id":"483680844","IsPullRequest":true,"CreatedAt":"2019-08-21T23:55:37","Actor":"livarcocc","Number":"12329","RawContent":null,"Title":"Updating nuget version and adding it to Version.Details.xml for DARC updates.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12329","RelatedDescription":"Closed or merged PR \"Updating nuget version and adding it to Version.Details.xml for DARC updates.\" (#12329)"},{"Id":"483695600","IsPullRequest":true,"CreatedAt":"2019-08-21T23:53:14","Actor":"dotnet-maestro[bot]","Number":"12330","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 11:22 PM\r\n- **Commit**: e0f95cfa6feec402ea34a605965f356720006513\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19421.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12330","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12330)"},{"Id":"483697362","IsPullRequest":true,"CreatedAt":"2019-08-21T23:30:32","Actor":"mairaw","Number":"12331","RawContent":null,"Title":"fix dotnet pack help","State":"open","Body":"Related to https://github.com/dotnet/docs/issues/8860","Url":"https://github.com/dotnet/cli/pull/12331","RelatedDescription":"Open PR \"fix dotnet pack help\" (#12331)"},{"Id":"483578222","IsPullRequest":false,"CreatedAt":"2019-08-21T18:22:28","Actor":"johnbeisner","Number":"12328","RawContent":null,"Title":"The install scripts rely on a failure to download as a normal procedure","State":"open","Body":"The install scripts rely on a failure to download as a normal procedure.\r\n\r\nThe 'primary' blob storage location is tried\r\n    if the download fails\r\nThe 'legacy' blob storage location is tried\r\n\r\nThis can be confusing to users as they see an 'error' in a successful process.\r\n\r\n\r\n**Proposal:**\r\n1. Maintain a hint path table with presedential ordering\r\n2. Perform a 'lookup' first before trying a download [retry]\r\n3. If found, then download [retry]\r\n4. if not found, error-out with all the paths attempted.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12328","RelatedDescription":"Open issue \"The install scripts rely on a failure to download as a normal procedure\" (#12328)"},{"Id":"483549747","IsPullRequest":true,"CreatedAt":"2019-08-21T17:23:35","Actor":"dotnet-maestro[bot]","Number":"12327","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190821.22\r\n- **Date Produced**: 8/22/2019 5:06 AM\r\n- **Commit**: de78ba11198343228e7e4f8fbf2117add6c67944\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19421-22\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19421-22\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19421-22\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19421-22\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19421-22\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12327","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12327)"},{"Id":"483194901","IsPullRequest":false,"CreatedAt":"2019-08-21T16:39:46","Actor":"zhangyiqiu","Number":"12319","RawContent":null,"Title":"dotnet build Not recognized overload | dotnet build 无法正确识别重载","State":"closed","Body":"- 英文翻译来自https://translate.google.cn\r\n- English translation from https://translate.google.cn\r\n\r\n### vs2019能正常识别到重载，但是dotnet cli没有识别到重载\r\n### Vs2019 can recognize overloads normally, but dotnet cli does not recognize overloads.\r\n## Steps to reproduce\r\n**\r\n如下命令在powershell执行\r\nThe following command is executed in powershell\r\n**\r\n```\r\ndotnet new console -n OvloadBuildFail\r\ncd .\\OvloadBuildFail\\\r\ndotnet add package Microsoft.EntityFrameworkCore\r\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\r\n```\r\n**\r\n将以下内容替换到Program.cs中\r\nReplace the following into program.cs\r\n**\r\n```\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace OvloadBuildFail\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var repo = new TestRepostory<Student>(new MyDBConext());\r\n            System.IO.File.Delete(\"TestDB.db\");\r\n            repo.DbContext.Database.EnsureCreated();\r\n            var all = repo.DbSet.ToList();\r\n            repo.Remove(all);\r\n            var id1 = Guid.NewGuid();\r\n            repo.Add(new Student\r\n            {\r\n                Id = id1,\r\n                Name = \"xiaoming\",\r\n                RreportCard = new RreportCard() { Id = Guid.NewGuid(), Name = \"Mathematics\", Score = 60, StudentId = id1 },\r\n\r\n            });\r\n            var id2 = Guid.NewGuid();\r\n            repo.Add(new Student\r\n            {\r\n                Id = id2,\r\n                Name = \"daming\",\r\n                RreportCard = new RreportCard() { Id = Guid.NewGuid(), Name = \"Mathematics\", Score = 90 }\r\n            });\r\n            var id3 = Guid.NewGuid();\r\n            repo.Add(new Student\r\n            {\r\n                Id = id3,\r\n                Name = \"me\",\r\n                RreportCard = new RreportCard() { Id = Guid.NewGuid(), Name = \"Mathematics\", Score = 78, StudentId = id3 },\r\n            });\r\n            repo.DbContext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;\r\n            var arr = new string[] { \"daming\", \"me\" };\r\n            var list = repo.List(x => arr.Contains(x.Name), s => s.Name);\r\n            var list2 = repo.List(x => arr.Contains(x.Name), x => x.RreportCard);\r\n            Console.Read();\r\n        }\r\n\r\n    }\r\n    public class MyDBConext : DbContext\r\n    {\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            base.OnModelCreating(modelBuilder);\r\n            modelBuilder.Entity<Student>(x =>\r\n            {\r\n                x.HasOne(t => t.RreportCard).WithOne(t => t.Student).OnDelete(DeleteBehavior.Cascade);\r\n            });\r\n        }\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            base.OnConfiguring(optionsBuilder);\r\n            optionsBuilder.UseSqlite(\"Data Source=TestDB.db\");\r\n        }\r\n        public DbSet<Student> TestEntities { get; set; }\r\n\r\n    }\r\n    public class Student\r\n    {\r\n        public Guid Id { get; set; }\r\n        public string Name { get; set; }\r\n        public RreportCard RreportCard { get; set; }\r\n    }\r\n\r\n    public class RreportCard\r\n    {\r\n        public Guid Id { get; set; }\r\n        public string Name { get; set; }\r\n        public double Score { get; set; }\r\n        public Guid StudentId { get; set; }\r\n        public Student Student { get; set; }\r\n    }\r\n\r\n    class TestRepostory<TEntity>\r\n        where TEntity : class\r\n    {\r\n        public TestRepostory(DbContext dbContext)\r\n        {\r\n            this.DbContext = dbContext;\r\n            this.DbSet = this.DbContext.Set<TEntity>();\r\n        }\r\n\r\n        public DbContext DbContext { get; }\r\n        public DbSet<TEntity> DbSet { get; }\r\n        public virtual TEntity Add(TEntity entity)\r\n        {\r\n            this.DbSet.Add(entity);\r\n            this.DbContext.SaveChanges();\r\n            return entity;\r\n        }\r\n        public virtual TEntity Remove(TEntity entity)\r\n        {\r\n            this.DbSet.Remove(entity);\r\n            this.DbContext.SaveChanges();\r\n            return entity;\r\n        }\r\n        public virtual IList<TEntity> Remove(IList<TEntity> entities)\r\n        {\r\n            this.DbSet.RemoveRange(entities);\r\n            this.DbContext.SaveChanges();\r\n            return entities;\r\n        }\r\n        private IQueryable<TEntity> _List(Expression<Func<TEntity, bool>> where, Expression<Func<TEntity, object>> sort = null)\r\n        {\r\n            IQueryable<TEntity> queryable = this.DbSet;\r\n            if (where != null) queryable = queryable.Where(where);\r\n            if (sort != null)\r\n            {\r\n                queryable = queryable.OrderBy(sort);\r\n            }\r\n            return queryable;\r\n        }\r\n        public virtual IList<TEntity> List(Expression<Func<TEntity, bool>> where, Expression<Func<TEntity, object>> sort = null)\r\n        {\r\n            var queryable = _List(where, sort);\r\n            var list = queryable.ToList();\r\n            return list;\r\n        }\r\n        public virtual IList<TEntity> List<TProperty>(Expression<Func<TEntity, bool>> where, Expression<Func<TEntity, TProperty>> include, Expression<Func<TEntity, object>> sort = null)\r\n            where TProperty : class, new()\r\n        {\r\n            var queryable = _List(where, sort);\r\n            if (include != null) queryable = queryable.Include(include);\r\n            var list = queryable.ToList();\r\n            return list;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n## Expected  behavior\r\n\r\n- 在vs2019中代码编译通过，并且正常运行，变量list、list2正常获取到值\r\n- In vs2019, the code is compiled and runs normally. Variables list and list2 are normally obtained\r\n\r\n- 在控制台执行`dotnet build`编译通过\r\n- Executing `dotnet build` successfully in the console\r\n## Actual behavior\r\n- 在vs2019中全部正常\r\n- All succeeded in vs2019\r\n\r\n- 在控制台执行`dotnet build`编译失败\r\n- Executing `dotnet build` compilation failed in console\r\n\r\n**Error output**:\r\n```\r\nProgram.cs(41,24): error CS0310: '“string”必须是具有公共的无参数构造函数的非抽象类型，才能用作泛型类型或方法“TestRepostory<Student>.List<TProperty>(Expression<Func<Student, bool>>, Expression<Func<Student, TProperty>>, Expression<Func<Student, object>>)”中的参数“TProperty” [\\OvloadBuildFail\\OvloadBuildFail\\OvloadBuildFail.csproj]\r\n\r\n生成失败。\r\n\r\nProgram.cs(41,24): error CS0310: '“string”必须是具有公共的无参数构造函数的非抽象类型，才能用作泛型类型或方法“TestRepostory<Student>.List<TProperty>(Expression<Func<Student, bool>>, Expression<Func<Student, TProperty>>, Expression<Func<Student, object>>)”中的参数“TProperty” [\\OvloadBuildFail\\OvloadBuildFail\\OvloadBuildFail.csproj]\r\n    0 个警告\r\n    1 个错误\r\n\r\n已用时间 00:00:01.87\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n Core SDK（反映任何 global.json）:\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12319","RelatedDescription":"Closed issue \"dotnet build Not recognized overload | dotnet build 无法正确识别重载\" (#12319)"},{"Id":"483476836","IsPullRequest":true,"CreatedAt":"2019-08-21T15:37:21","Actor":"dotnet-maestro[bot]","Number":"12326","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a48ee5df-d2ed-4728-b59b-08d7219835fd)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 12:53 PM\r\n- **Commit**: 7aa107d818fe87e627154c0331d6de5d47f39a45\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.1\r\n\r\n[marker]: <> (End:a48ee5df-d2ed-4728-b59b-08d7219835fd)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12326","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/arcade\" (#12326)"},{"Id":"483385981","IsPullRequest":true,"CreatedAt":"2019-08-21T15:20:47","Actor":"dotnet-maestro[bot]","Number":"12323","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12323","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12323)"},{"Id":"483448446","IsPullRequest":false,"CreatedAt":"2019-08-21T14:15:00","Actor":"am11","Number":"12325","RawContent":null,"Title":"dotnet-publish with --use-current-rid or --infer-rid option","State":"open","Body":"At present:\r\n\r\n```sh\r\ndotnet publish -c Release path/code -o path/app /p:PublishSingleFile=true\r\n```\r\n\r\nthrows error:\r\n\r\n> error NETSDK1031: It is not supported to build or publish a self-contained application without specifying a RuntimeIdentifier.  Please either specify a RuntimeIdentifier or set SelfContained to false.\r\n\r\nwhich requires a fix like:\r\n\r\n```sh\r\ndotnet publish -c Release path/code -o path/app /p:PublishSingleFile=true -r osx-x64\r\n```\r\n\r\nIt is fairly a common usecase to publish an app for platform with same RID as host.\r\n\r\nHowever, the error is good to keep it an explicit and conscious decision of user; instead of falling back to some default value.\r\n\r\nPlease add `--use-current-rid` or `--infer-rid` option for automation and documentation convenience.\r\n\r\nThis way user will still explicitly specify RID option, without supplying platform specific value.","Url":"https://github.com/dotnet/cli/issues/12325","RelatedDescription":"Open issue \"dotnet-publish with --use-current-rid or --infer-rid option\" (#12325)"},{"Id":"483379212","IsPullRequest":true,"CreatedAt":"2019-08-21T12:39:27","Actor":"dotnet-maestro[bot]","Number":"12321","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190820.1\r\n- **Date Produced**: 8/20/2019 7:38 PM\r\n- **Commit**: 13f357d8cd4bc2188c25c028c00faee550555864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19420.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12321","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12321)"},{"Id":"483391037","IsPullRequest":false,"CreatedAt":"2019-08-21T12:29:22","Actor":"kendaleiv","Number":"12324","RawContent":null,"Title":"Add `dotnet tool run` for one-time invocation without install","State":"open","Body":"Add `dotnet tool run` for one-time invocation without install, similar to `npx`. This would enable users to run a package one time without having to first install it. This can be especially useful for tools that are used on occasion but users generally always want the latest version.","Url":"https://github.com/dotnet/cli/issues/12324","RelatedDescription":"Open issue \"Add `dotnet tool run` for one-time invocation without install\" (#12324)"},{"Id":"483382738","IsPullRequest":true,"CreatedAt":"2019-08-21T12:11:46","Actor":"dotnet-maestro[bot]","Number":"12322","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190820.1\r\n- **Date Produced**: 8/20/2019 6:41 PM\r\n- **Commit**: 744e8f6807596b7b54655294085ec2ab683173b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19420.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12322","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12322)"},{"Id":"483319368","IsPullRequest":false,"CreatedAt":"2019-08-21T09:52:39","Actor":"v-yuyul","Number":"12320","RawContent":null,"Title":"Update the error info under Entity Framework Migrations section in Publish Settings.","State":"open","Body":"Copied from bug [899200](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/899200).\r\n## Steps to reproduce\r\n\r\n1. New Project > ASP.NET Core Web Application >.NET Core 3.0 ~ Web Application With Ind Auth > Create\r\n2. Right click the project > Publish > Create Profile > Select WTE Subscription > Select existing or new resource group/Plan > Create a SQL Database, select exisitng or new Database Server > OK > Create\r\n3. In Publish Summary page, click Edit > Navigate to Setting tab > Open Entity Framework Migrations\r\n\r\n## Expected  behavior\r\nThe user still needs to figure out on their own how to install the dotnet-ef global tool, but I’m hoping we’ll have sufficient documentation for the user to discover that easily. \r\n\r\neg.\r\n![图片](https://user-images.githubusercontent.com/31497677/63422035-33580880-c43c-11e9-8bfc-1a6545761130.png)\r\n\r\n\r\n## Actual behavior\r\nThe error info is confusing.\r\n![图片](https://user-images.githubusercontent.com/31497677/63421597-74035200-c43b-11e9-94dd-aa8b11d20c71.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n![图片](https://user-images.githubusercontent.com/31497677/63421478-3bfc0f00-c43b-11e9-8ebc-bb56a530a0ec.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12320","RelatedDescription":"Open issue \"Update the error info under Entity Framework Migrations section in Publish Settings.\" (#12320)"},{"Id":"483150268","IsPullRequest":false,"CreatedAt":"2019-08-21T01:10:21","Actor":"TheButlah","Number":"12318","RawContent":null,"Title":"[bug] dotnet build repeats executable extension","State":"open","Body":"## Steps to reproduce\r\n1. `mkdir dotnet-bug`\r\n2. `cd dotnet-bug`\r\n3. `dotnet new console`\r\n4. add `<AssemblyName>dotnet-bug.client</AssemblyName>` into `<PropertyGroup>`\r\n5. run `dotnet build dotnet-bug.csproj -r linux-x64`\r\n\r\n## Expected  behavior\r\nShould see an executable named `dotnet-bug.client` in `bin/Debug/netcoreapp2.2/linux-x64/`\r\n\r\n## Actual behavior\r\nInstead, the extension of the executable is duplicated: `bin/Debug/netcoreapp2.2/linux-x64/dotnet-bug.client.client`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.401\r\n Commit:    729b316c13\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.401/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.6\r\n  Commit:  7dac9b1b51\r\n\r\n.NET Core SDKs installed:\r\n  2.2.401 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n## Additional Notes:\r\nThis occurs for (at least) RIDs `linux-x64`, `osx-x64`, but does not occur for `win-x64`, as in the latter case, the executable is named `dotnet-bug.client.exe` as would be expected behavior\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12318","RelatedDescription":"Open issue \"[bug] dotnet build repeats executable extension\" (#12318)"},{"Id":"483127154","IsPullRequest":true,"CreatedAt":"2019-08-21T01:05:16","Actor":"dotnet-maestro[bot]","Number":"12317","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190820.08\r\n- **Date Produced**: 8/20/2019 11:23 PM\r\n- **Commit**: f385116c74c1513e7e241f0586675486e9b25115\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19420-08\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19420-08\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19420-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19420-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19420-08\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12317","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12317)"},{"Id":"483122663","IsPullRequest":true,"CreatedAt":"2019-08-21T00:53:03","Actor":"dotnet-maestro[bot]","Number":"12314","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190820.5\r\n- **Date Produced**: 8/20/2019 11:06 PM\r\n- **Commit**: 733218c6520edf03971f7befef4e39b6d4076a9f\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19420.5\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12314","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12314)"},{"Id":"483111485","IsPullRequest":true,"CreatedAt":"2019-08-20T22:25:31","Actor":"mmitche","Number":"12313","RawContent":null,"Title":"[release/2.1.5xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…","State":"open","Body":"…Web.Spa.ProjectTemplates.2.1\r\n\r\n- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12313","RelatedDescription":"Open PR \"[release/2.1.5xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…\" (#12313)"},{"Id":"483110998","IsPullRequest":true,"CreatedAt":"2019-08-20T22:23:48","Actor":"mmitche","Number":"12312","RawContent":null,"Title":"[release/2.1.6xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…","State":"open","Body":"…Web.Spa.ProjectTemplates.2.1\r\n\r\n- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12312","RelatedDescription":"Open PR \"[release/2.1.6xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…\" (#12312)"},{"Id":"483110592","IsPullRequest":true,"CreatedAt":"2019-08-20T22:22:29","Actor":"mmitche","Number":"12311","RawContent":null,"Title":"[release/2.1.8xx] Rectify internal/external for 2.1.8xx","State":"open","Body":"- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12311","RelatedDescription":"Open PR \"[release/2.1.8xx] Rectify internal/external for 2.1.8xx\" (#12311)"},{"Id":"483109446","IsPullRequest":true,"CreatedAt":"2019-08-20T22:18:40","Actor":"mmitche","Number":"12310","RawContent":null,"Title":"[release/2.2.1xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…","State":"open","Body":"…Web.Spa.ProjectTemplates.2.2\r\n\r\n- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12310","RelatedDescription":"Open PR \"[release/2.2.1xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…\" (#12310)"},{"Id":"483108545","IsPullRequest":true,"CreatedAt":"2019-08-20T22:15:40","Actor":"mmitche","Number":"12309","RawContent":null,"Title":"[release/2.2.2xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…","State":"open","Body":"…Web.Spa.ProjectTemplates.2.2\r\n\r\n- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12309","RelatedDescription":"Open PR \"[release/2.2.2xx] Update Microsoft.DotNet.Web.Spa.ProjectTemplates to Microsoft.DotNet.…\" (#12309)"},{"Id":"483107525","IsPullRequest":true,"CreatedAt":"2019-08-20T22:12:26","Actor":"mmitche","Number":"12308","RawContent":null,"Title":"[release/2.2.4xx] Rectify difference with internal branches","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12308","RelatedDescription":"Open PR \"[release/2.2.4xx] Rectify difference with internal branches\" (#12308)"},{"Id":"483063502","IsPullRequest":true,"CreatedAt":"2019-08-20T21:56:24","Actor":"livarcocc","Number":"12307","RawContent":null,"Title":"Updated branding on release/3.0.1xx to rc1.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12307","RelatedDescription":"Closed or merged PR \"Updated branding on release/3.0.1xx to rc1.\" (#12307)"},{"Id":"483044541","IsPullRequest":true,"CreatedAt":"2019-08-20T20:13:26","Actor":"dotnet-maestro[bot]","Number":"12306","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190820.2\r\n- **Date Produced**: 8/20/2019 7:37 PM\r\n- **Commit**: 5b2f3fb5f7f24ac3e91c5150a55cc411b2b36b76\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19420.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12306","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12306)"},{"Id":"482967425","IsPullRequest":true,"CreatedAt":"2019-08-20T19:56:17","Actor":"dotnet-maestro[bot]","Number":"12305","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190820.04\r\n- **Date Produced**: 8/20/2019 6:38 PM\r\n- **Commit**: 33656b4bd015e62836fb3ee52a914b73c40052e9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19420-04\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19420-04\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19420-04\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19420-04\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19420-04\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12305","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12305)"},{"Id":"482824117","IsPullRequest":true,"CreatedAt":"2019-08-20T18:43:50","Actor":"dotnet-maestro[bot]","Number":"12303","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12303","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12303)"},{"Id":"482953985","IsPullRequest":false,"CreatedAt":"2019-08-20T16:10:26","Actor":"xenalite","Number":"12304","RawContent":null,"Title":"[Question] How to publish solution to a custom output folder?","State":"open","Body":"I run `dotnet publish name.sln`. The solution contains project X and Y.\r\nI want the publish output to go to: `C:\\sample\\X` for project X and `C:\\sample\\Y` for project Y.\r\nI do not want to run `dotnet publish` for each project (rather than solution), because there may be more projects added in the future.","Url":"https://github.com/dotnet/cli/issues/12304","RelatedDescription":"Open issue \"[Question] How to publish solution to a custom output folder?\" (#12304)"},{"Id":"482819085","IsPullRequest":true,"CreatedAt":"2019-08-20T12:03:18","Actor":"dotnet-maestro[bot]","Number":"12302","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12302","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#12302)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"483602102","IsPullRequest":true,"CreatedAt":"2019-08-21T22:06:06","Actor":"terrajobst","Number":"1458","RawContent":null,"Title":"Ask Mode: Add support for typed-datasets","State":"closed","Body":"## Description\r\n\r\n.NET Core 3.0 has full support for `System.Data.DataTableExtensions` which also enables the visual `DataSet` designer in Visual Studio. However, .NET Standard 2.1 only supported a subset which makes the code that is generated by the designer not compile in .NET Standard 2.1. The fix is include the missing APIs in .NET Standard 2.1.\r\n\r\nThis requires no changes in .NET Core 3.0 but will require minimal work in platforms implementing .NET Standard 2.1, most notably Mono/Xamarin. However, they already signed off on it.\r\n\r\n## Customer Impact\r\n\r\nCustomer will be able to use the DataSet designer in .NET Standard libraries, which will become handy as people port their existing .NET Framework desktop applications to .NET Core 3.0.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. All APIs are already implemented in .NET Core 3.0.","Url":"https://github.com/dotnet/standard/pull/1458","RelatedDescription":"Closed or merged PR \"Ask Mode: Add support for typed-datasets\" (#1458)"},{"Id":"483567659","IsPullRequest":true,"CreatedAt":"2019-08-21T18:33:20","Actor":"Anipik","Number":"1457","RawContent":null,"Title":"Enabling yaml stages for preview 9","State":"closed","Body":"We require this change in order to propagate the dependecies updates for preview 9 branch.\r\nrelated 3.0 change https://github.com/dotnet/standard/pull/1453\r\n\r\ncc @mmitche ","Url":"https://github.com/dotnet/standard/pull/1457","RelatedDescription":"Closed or merged PR \"Enabling yaml stages for preview 9\" (#1457)"},{"Id":"483116364","IsPullRequest":true,"CreatedAt":"2019-08-21T17:37:37","Actor":"Anipik","Number":"1453","RawContent":null,"Title":"Adding YAML stages","State":"closed","Body":"Closes: https://github.com/dotnet/arcade/issues/3726\r\n\r\ncherrypicking #1373 #1379 ","Url":"https://github.com/dotnet/standard/pull/1453","RelatedDescription":"Closed or merged PR \"Adding YAML stages\" (#1453)"},{"Id":"482581923","IsPullRequest":true,"CreatedAt":"2019-08-21T17:18:19","Actor":"terrajobst","Number":"1446","RawContent":null,"Title":"Add support for typed-datasets","State":"closed","Body":"This completes the support for typed datasets which also enables the dataset designer in VS.\r\n\r\nSee https://github.com/dotnet/corefx/pull/36528.","Url":"https://github.com/dotnet/standard/pull/1446","RelatedDescription":"Closed or merged PR \"Add support for typed-datasets\" (#1446)"},{"Id":"481880992","IsPullRequest":true,"CreatedAt":"2019-08-21T16:03:22","Actor":"dotnet-maestro[bot]","Number":"1444","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.11\r\n- **Date Produced**: 8/21/2019 2:09 AM\r\n- **Commit**: 37f316e1de562bc31acab2496540a865189da918\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19420.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19420.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19420.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1444)"},{"Id":"483391706","IsPullRequest":true,"CreatedAt":"2019-08-21T16:03:08","Actor":"dotnet-maestro[bot]","Number":"1455","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1455","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1455)"},{"Id":"483392622","IsPullRequest":true,"CreatedAt":"2019-08-21T12:42:44","Actor":"dotnet-maestro[bot]","Number":"1456","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.10\r\n- **Date Produced**: 8/21/2019 12:53 AM\r\n- **Commit**: d341fd37dcb2c22e382adccdc06770cf8f160577\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19420.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1456","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1456)"},{"Id":"483378318","IsPullRequest":true,"CreatedAt":"2019-08-21T12:12:10","Actor":"dotnet-maestro[bot]","Number":"1454","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1454","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1454)"},{"Id":"483046271","IsPullRequest":false,"CreatedAt":"2019-08-20T22:30:52","Actor":"Anipik","Number":"1452","RawContent":null,"Title":"NetStandard not publishing the packages to the blob-feed","State":"closed","Body":"The dotnet standard stopped publishing packages to the dotnet core blob feed after ```2.1.0-prerelease.19414.3```\r\nAs a result the builds for repos higher in the stack is failing.\r\nThis issue is only is release\\3.0 branches.\r\neg https://github.com/dotnet/corefx/pull/40331 \r\n\r\nThis is high priority issue as these will be blocking the build process for preview 9\r\n\r\ncc @JohnTortugo @wtgodbe @mmitche @riarenas ","Url":"https://github.com/dotnet/standard/issues/1452","RelatedDescription":"Closed issue \"NetStandard not publishing the packages to the blob-feed\" (#1452)"},{"Id":"482829276","IsPullRequest":true,"CreatedAt":"2019-08-20T16:53:09","Actor":"dotnet-maestro[bot]","Number":"1450","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1450","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1450)"},{"Id":"482766376","IsPullRequest":true,"CreatedAt":"2019-08-20T14:52:34","Actor":"ahsonkhan","Number":"1447","RawContent":null,"Title":"Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml","State":"closed","Body":"This contains the doc drops for the latest .NET Standard 2.1 xml docs.\r\n\r\nThis is the version currently referenced by corefx as well for the netcoreapp 3.0 xml docs: https://github.com/dotnet/corefx/blob/cf5c1b0a7c3cf0087ae72fd0e1995a274cfefe27/eng/Versions.props#L77\r\n\r\nThis likely needs to be merged into the release/3.0 branch as well. See https://github.com/dotnet/standard/pull/1448\r\n\r\ncc @wtgodbe, @dagood, @carlossanlop, @terrajobst, @mairaw, @safern, @Anipik ","Url":"https://github.com/dotnet/standard/pull/1447","RelatedDescription":"Closed or merged PR \"Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml\" (#1447)"},{"Id":"482767576","IsPullRequest":true,"CreatedAt":"2019-08-20T14:52:28","Actor":"ahsonkhan","Number":"1448","RawContent":null,"Title":"[release/3.0] Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml","State":"closed","Body":"Port of https://github.com/dotnet/standard/pull/1447\r\n\r\nThis contains the doc drops for the latest .NET Standard 2.1 xml docs.\r\n\r\ncc @wtgodbe, @dagood, @carlossanlop, @terrajobst, @mairaw, @safern, @Anipik, @ericstj ","Url":"https://github.com/dotnet/standard/pull/1448","RelatedDescription":"Closed or merged PR \"[release/3.0] Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml\" (#1448)"},{"Id":"482830211","IsPullRequest":true,"CreatedAt":"2019-08-20T12:32:48","Actor":"dotnet-maestro[bot]","Number":"1451","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190819.5\r\n- **Date Produced**: 8/19/2019 9:33 PM\r\n- **Commit**: 961b953eb77922d3906506ee15a58068abfa3284\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19419.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19419.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19419.5\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1451","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1451)"},{"Id":"482818399","IsPullRequest":true,"CreatedAt":"2019-08-20T12:11:52","Actor":"dotnet-maestro[bot]","Number":"1449","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1449","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1449)"},{"Id":"481586618","IsPullRequest":true,"CreatedAt":"2019-08-19T17:08:10","Actor":"dotnet-maestro[bot]","Number":"1440","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1440","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1440)"},{"Id":"481881019","IsPullRequest":true,"CreatedAt":"2019-08-17T12:40:26","Actor":"dotnet-maestro[bot]","Number":"1445","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445)"},{"Id":"481878978","IsPullRequest":true,"CreatedAt":"2019-08-17T12:12:07","Actor":"dotnet-maestro[bot]","Number":"1443","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1443)"},{"Id":"481587331","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:55","Actor":"dotnet-maestro[bot]","Number":"1442","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.9\r\n- **Date Produced**: 8/15/2019 11:51 PM\r\n- **Commit**: 1ac825dfc8ba0485ef4cf524a241f5309c43a2da\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19415.9\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1442","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1442)"},{"Id":"481587224","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:38","Actor":"dotnet-maestro[bot]","Number":"1441","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.13\r\n- **Date Produced**: 8/16/2019 7:46 AM\r\n- **Commit**: 4d2b68c2cda66c861aa918fd91e9bf7d664ea05f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1441","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1441)"},{"Id":"481577910","IsPullRequest":true,"CreatedAt":"2019-08-16T12:11:52","Actor":"dotnet-maestro[bot]","Number":"1439","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1439","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1439)"},{"Id":"481133549","IsPullRequest":true,"CreatedAt":"2019-08-15T21:03:09","Actor":"dotnet-maestro[bot]","Number":"1438","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.1\r\n- **Date Produced**: 8/15/2019 11:55 AM\r\n- **Commit**: 618de6e29d0c5b8b4cab65bdb98e6893240ab77d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1438","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1438)"},{"Id":"479824042","IsPullRequest":false,"CreatedAt":"2019-08-15T20:09:33","Actor":"watfordgnf","Number":"1431","RawContent":null,"Title":"Cannot use Dns.GetHostAddresses from .NET Standard 1.6 Library","State":"closed","Body":"Working on a fix for [NATS](https://github.com/nats-io/nats.net/issues/272), I used `Dns.GetHostAddresses` from the main library. The library is being built against .NET Standard 1.6.1, and I added the `System.Net.NameResolution` NuGet package to get this API. When trying to use it I receive the following build error:\r\n```\r\n1>Conn.cs(435,53,435,69): error CS0117: 'Dns' does not contain a definition for 'GetHostAddresses'\r\n```\r\nIntelliSense only suggests `Dns.GetHostAddressesAsync`.\r\n\r\nI'm not sure why I can't use `Dns.GetHostAddresses`. Reviewing the .NET Standard 1.6 API it is clear it wasn't shipped, so I added the relevant NuGet package. The NuGet package states it supports at least .NET Standard 1.3. Looking at the code in question, I cannot find any evidence it excludes that method for .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1431","RelatedDescription":"Closed issue \"Cannot use Dns.GetHostAddresses from .NET Standard 1.6 Library\" (#1431)"},{"Id":"480673667","IsPullRequest":true,"CreatedAt":"2019-08-14T13:32:23","Actor":"dotnet-maestro[bot]","Number":"1437","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190813.13\r\n- **Date Produced**: 8/14/2019 12:47 AM\r\n- **Commit**: 3694ef6d674381439046667e3ae830b97f5912d7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19413.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19413.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19413.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1437","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1437)"},{"Id":"480673470","IsPullRequest":true,"CreatedAt":"2019-08-14T13:26:57","Actor":"dotnet-maestro[bot]","Number":"1436","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190813.14\r\n- **Date Produced**: 8/14/2019 3:39 AM\r\n- **Commit**: cd666bb681149f76b6e716057928d299c8f47272\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19413.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19413.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19413.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1436","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1436)"},{"Id":"480641072","IsPullRequest":true,"CreatedAt":"2019-08-14T12:14:49","Actor":"dotnet-maestro[bot]","Number":"1435","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.7\r\n- **Date Produced**: 8/12/2019 9:37 PM\r\n- **Commit**: 82c822ee7db08f5347e6ac44e3ed465248394a9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19412.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1435","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1435)"},{"Id":"480149972","IsPullRequest":true,"CreatedAt":"2019-08-13T13:23:44","Actor":"dotnet-maestro[bot]","Number":"1434","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190812.10\r\n- **Date Produced**: 8/13/2019 5:45 AM\r\n- **Commit**: 0feaf246b0fee4e32c3ef4206df1db0bd5621412\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19412.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19412.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19412.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1434","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1434)"},{"Id":"480149776","IsPullRequest":true,"CreatedAt":"2019-08-13T13:23:20","Actor":"dotnet-maestro[bot]","Number":"1433","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190812.11\r\n- **Date Produced**: 8/13/2019 7:58 AM\r\n- **Commit**: af36939acdf751d2465358be3f892170f73f9b48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19412.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19412.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19412.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1433","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1433)"},{"Id":"480118854","IsPullRequest":true,"CreatedAt":"2019-08-13T12:14:42","Actor":"dotnet-maestro[bot]","Number":"1432","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.1\r\n- **Date Produced**: 8/12/2019 1:01 PM\r\n- **Commit**: ec2dd5b3e7d11b88b2ca0688bb1685836cfad20a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19412.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1432","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1432)"},{"Id":"479637204","IsPullRequest":true,"CreatedAt":"2019-08-12T13:19:56","Actor":"dotnet-maestro[bot]","Number":"1430","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190811.4\r\n- **Date Produced**: 8/11/2019 7:39 PM\r\n- **Commit**: 3c699c4fbde216b765de918999eb8b7c6e161653\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19411.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19411.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19411.4\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1430","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1430)"},{"Id":"479637035","IsPullRequest":true,"CreatedAt":"2019-08-12T13:19:32","Actor":"dotnet-maestro[bot]","Number":"1429","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190811.3\r\n- **Date Produced**: 8/11/2019 5:04 PM\r\n- **Commit**: 38ad8ed2b502a2717293df098fd44267dc6eaad6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19411.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19411.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19411.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1429)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"483746967","IsPullRequest":true,"CreatedAt":"2019-08-22T03:15:35","Actor":"dotnet-maestro[bot]","Number":"40494","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190821.8\r\n- **Date Produced**: 8/21/2019 9:11 PM\r\n- **Commit**: d48157b67e32259b73a9e59e47163945f9a6a647\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19421.8\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19421.8\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19421.8\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40494","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40494)"},{"Id":"483723172","IsPullRequest":true,"CreatedAt":"2019-08-22T01:30:58","Actor":"Dotnet-GitSync-Bot","Number":"40493","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40493","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#40493)"},{"Id":"483719646","IsPullRequest":true,"CreatedAt":"2019-08-22T01:14:47","Actor":"jbhensley","Number":"40492","RawContent":null,"Title":"Fix mail message encoding for transport when delivery method is pickup","State":"open","Body":"Fix #33304. Mail messages encode lines that begin with a single period by doubling the period as per SMTP RFC. However, messages that are to be picked up from a directory instead of transported should not do this. ","Url":"https://github.com/dotnet/corefx/pull/40492","RelatedDescription":"Open PR \"Fix mail message encoding for transport when delivery method is pickup\" (#40492)"},{"Id":"483701947","IsPullRequest":false,"CreatedAt":"2019-08-21T23:50:32","Actor":"BrennanConroy","Number":"40491","RawContent":null,"Title":"[macOs 10.15] Removing X509Certificate from store can terminate process","State":"open","Body":"Repro steps:\r\n* `dotnet dev-certs https --trust`\r\n* `dotnet run` below program\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    var oid = \"1.3.6.1.4.1.311.84.1.1\";\r\n    using (var store = new X509Store(StoreName.My, StoreLocation.CurrentUser))\r\n    {\r\n        store.Open(OpenFlags.ReadWrite);\r\n        var certs = store.Certificates.OfType<X509Certificate2>();\r\n        var matchingCerts = certs.Where(c => c.Extensions.OfType<X509Extension>().Any(e => string.Equals(oid, e.Oid.Value, StringComparison.Ordinal)));\r\n\r\n        foreach (var cert in matchingCerts)\r\n        {\r\n            Console.WriteLine(cert);\r\n            store.Remove(cert); // terminates here\r\n            Console.WriteLine(\"Removed cert\");\r\n        }\r\n\r\n        store.Close();\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/40491","RelatedDescription":"Open issue \"[macOs 10.15] Removing X509Certificate from store can terminate process\" (#40491)"},{"Id":"483698718","IsPullRequest":true,"CreatedAt":"2019-08-21T23:36:24","Actor":"CodeBlanch","Number":"40490","RawContent":null,"Title":"Fixed a bug causing all subsequent properties to be skipped during json deserialization once a dictionary has been skipped.","State":"open","Body":"Given a class set up like this...\r\n```\r\n        public class ClassWithPopulatedDictionaryAndNoSetter\r\n        {\r\n            public Dictionary<string, string> MyDictionary { get; } = new Dictionary<string, string>() { { \"Key\", \"Value\" } };\r\n\r\n            public IDictionary<string, string> MyDictionaryWithSetter { get; set; }\r\n        }\r\n```\r\n...and some json like this...\r\n```\r\n{\"MyDictionary\":{\"Key1\":\"Value1\", \"Key2\":\"Value2\"},\"MyDictionaryWithSetter\":{\"Key1\":\"Value1\"}}\r\n```\r\n...the JsonSerializer.Deserialize operation will correctly skip \"MyDictionary\" because it doesn't have a public setter, but won't parse \"MyDictionaryWithSetter\" because it gets stuck in an open dictionary state.","Url":"https://github.com/dotnet/corefx/pull/40490","RelatedDescription":"Open PR \"Fixed a bug causing all subsequent properties to be skipped during json deserialization once a dictionary has been skipped.\" (#40490)"},{"Id":"483685198","IsPullRequest":false,"CreatedAt":"2019-08-21T22:41:26","Actor":"Suchiman","Number":"40489","RawContent":null,"Title":"Add a RingBuffer<T> collection type","State":"open","Body":"A `RingBuffer<T>` is an efficient collection type of **fixed size** to which elements can be added indefinitely which works by removing the oldest element once `capacity` is reached.\r\n\r\nOften this sort of behavior is emulated inefficiently by using `List<T>` from which an element is explicitly removed when it has reached a certain size before adding the new element.\r\n\r\n## Proposed API Shape\r\nThe class follows the basic design of other .NET collection types\r\n\r\n```csharp\r\nnamespace System.Collections.Generic\r\n{\r\n    public class RingBuffer<T> : IList<T>\r\n    {\r\n        public int Capacity { get; }\r\n        public int Count { get; }\r\n        public bool IsReadOnly { get; }\r\n\r\n        public RingBuffer(int capacity);\r\n        public void Add(T item);\r\n        public T this[int index] { get; set; }\r\n        public IEnumerator<T> GetEnumerator();\r\n        IEnumerator IEnumerable.GetEnumerator();\r\n        public void Clear();\r\n        public bool Contains(T item);\r\n        public void CopyTo(T[] array, int arrayIndex);\r\n        public int IndexOf(T item);\r\n        void IList<T>.Insert(int index, T item);\r\n        bool ICollection<T>.Remove(T item);\r\n        void IList<T>.RemoveAt(int index);\r\n    }\r\n}\r\n```\r\n\r\n## Naive sample implementation\r\n```csharp\r\nnamespace System.Collections.Generic\r\n{\r\n    public class RingBuffer<T> : IList<T>\r\n    {\r\n        private readonly T[] _buffer;\r\n        private uint _position;\r\n\r\n        public int Capacity => _buffer.Length;\r\n        public int Count => _position < _buffer.Length ? (int)_position : _buffer.Length;\r\n        public bool IsReadOnly => false;\r\n\r\n        public RingBuffer(int capacity)\r\n        {\r\n            _buffer = new T[capacity];\r\n        }\r\n\r\n        public void Add(T item)\r\n        {\r\n            uint previousPosition = _position++;\r\n            int nextIndex = (int)(previousPosition % _buffer.Length);\r\n            if (_position < previousPosition) // overflow\r\n            {\r\n                _position += (uint)_buffer.Length + (uint)nextIndex + 1;\r\n            }\r\n\r\n            _buffer[nextIndex] = item;\r\n        }\r\n\r\n        public T this[int index]\r\n        {\r\n            get => _buffer[(_position + index) % _buffer.Length];\r\n            set => _buffer[(_position + index) % _buffer.Length] = value;\r\n        }\r\n\r\n        public IEnumerator<T> GetEnumerator()\r\n        {\r\n            if (_position < _buffer.Length)\r\n            {\r\n                for (int i = 0; i < _position; i++)\r\n                {\r\n                    yield return _buffer[i];\r\n                }\r\n                yield break;\r\n            }\r\n\r\n            int currentZero = (int)(_position % _buffer.Length);\r\n            for (int i = currentZero; i < _buffer.Length; i++)\r\n            {\r\n                yield return _buffer[i];\r\n            }\r\n            for (int i = 0; i < currentZero; i++)\r\n            {\r\n                yield return _buffer[i];\r\n            }\r\n        }\r\n\r\n        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\r\n\r\n        public void Clear()\r\n        {\r\n            Array.Clear(_buffer, 0, _buffer.Length);\r\n            _position = 0;\r\n        }\r\n\r\n        public bool Contains(T item)\r\n        {\r\n            return IndexOf(item) != -1;\r\n        }\r\n\r\n        public void CopyTo(T[] array, int arrayIndex)\r\n        {\r\n            if (_position < _buffer.Length)\r\n            {\r\n                Array.Copy(_buffer, 0, array, 0, _position);\r\n                return;\r\n            }\r\n\r\n            int currentZero = (int)(_position % _buffer.Length);\r\n            Array.Copy(_buffer, currentZero, array, arrayIndex, _buffer.Length - currentZero);\r\n            Array.Copy(_buffer, 0, array, arrayIndex + (_buffer.Length - currentZero), currentZero);\r\n        }\r\n\r\n        public int IndexOf(T item)\r\n        {\r\n            if (_position < _buffer.Length)\r\n            {\r\n                return Array.IndexOf(_buffer, item, 0, (int)_position);\r\n            }\r\n\r\n            int virtualIndex = Array.IndexOf(_buffer, item);\r\n\r\n            if (virtualIndex == -1)\r\n            {\r\n                return virtualIndex;\r\n            }\r\n\r\n            return virtualIndex - ((int)_position % Capacity);\r\n        }\r\n\r\n        void IList<T>.Insert(int index, T item)\r\n        {\r\n            throw new NotSupportedException(\"RingBuffer does not support Insert\");\r\n        }\r\n\r\n        bool ICollection<T>.Remove(T item)\r\n        {\r\n            throw new NotSupportedException(\"RingBuffer does not support Remove\");\r\n        }\r\n\r\n        void IList<T>.RemoveAt(int index)\r\n        {\r\n            throw new NotSupportedException(\"RingBuffer does not support RemoveAt\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn my sample i've choosen to not implement `Insert`, `Remove` and `RemoveAt` for performance reasons but if higher compatibility with the `IList<T>` interface is desired, such implementation could be provided.","Url":"https://github.com/dotnet/corefx/issues/40489","RelatedDescription":"Open issue \"Add a RingBuffer<T> collection type\" (#40489)"},{"Id":"483679895","IsPullRequest":true,"CreatedAt":"2019-08-21T22:22:24","Actor":"steveharter","Number":"40488","RawContent":null,"Title":"Add additional extension data tests","State":"open","Body":"Add additional extension data tests based on https://github.com/dotnet/corefx/pull/40431\r\n\r\ncc @CodeBlanch ","Url":"https://github.com/dotnet/corefx/pull/40488","RelatedDescription":"Open PR \"Add additional extension data tests\" (#40488)"},{"Id":"483659455","IsPullRequest":true,"CreatedAt":"2019-08-21T21:22:30","Actor":"eiriktsarpalis","Number":"40487","RawContent":null,"Title":"HTTP2: fix header corruption issue","State":"open","Body":"Fixes a bug in HPackEncoder which results in header data corruption in cases where the write buffer has not been zeroed out. Adds HPack roundtrip unit tests that reproduce the error.\r\n\r\nFixes #40459.","Url":"https://github.com/dotnet/corefx/pull/40487","RelatedDescription":"Open PR \"HTTP2: fix header corruption issue\" (#40487)"},{"Id":"483637663","IsPullRequest":true,"CreatedAt":"2019-08-21T20:34:22","Actor":"mmitche","Number":"40486","RawContent":null,"Title":"[release/3.0-preview9] Disable SDL validation","State":"closed","Body":"Disable SDL validation to unblock p9","Url":"https://github.com/dotnet/corefx/pull/40486","RelatedDescription":"Closed or merged PR \"[release/3.0-preview9] Disable SDL validation\" (#40486)"},{"Id":"483610145","IsPullRequest":false,"CreatedAt":"2019-08-21T19:29:27","Actor":"ppekrol","Number":"40485","RawContent":null,"Title":"Empty ArrayPool not returning zero-inited array in .NET Core 3.0","State":"open","Body":"In .NET Core 2.2 following code could run indefinitely (simple console app):\r\n\r\n```\r\n            var pool = ArrayPool<byte>.Create();\r\n\r\n            var iteration = 0;\r\n            while (true)\r\n            {\r\n                Console.WriteLine(iteration);\r\n\r\n                var buffer = pool.Rent(32 * 1024);\r\n\r\n                for (int i = 0; i < buffer.Length; i++)\r\n                {\r\n                    if (buffer[i] != 0)\r\n                        throw new InvalidOperationException();\r\n                }\r\n\r\n                iteration++;\r\n            }\r\n``` \r\n\r\nIn .NET Core 3.0 it fails around 50-100 iteration. Is this by design? I was assuming that if I'm not returning anything, then the pool would have to init new arrays and those would have zeros?\r\n\r\nI'm using .NET Core 3.0 Preview 8 on Win10 x64\r\n```\r\ndotnet --version\r\n3.0.100-preview8-013656\r\n```","Url":"https://github.com/dotnet/corefx/issues/40485","RelatedDescription":"Open issue \"Empty ArrayPool not returning zero-inited array in .NET Core 3.0\" (#40485)"},{"Id":"483607721","IsPullRequest":false,"CreatedAt":"2019-08-21T19:23:35","Actor":"ViktorHofer","Number":"40484","RawContent":null,"Title":"Replace tfm based constants with SDK ones","State":"open","Body":"We should replace constants for different target frameworks with the auto-generated ones that come with the SDK and are available in the product.\r\n\r\n1. Remove https://github.com/dotnet/corefx/blob/master/Directory.Build.props#L342-L350\r\n2. Replace these constants in the C# soures with the SDK ones:\r\n\r\n`NETCOREAPP, NETCOREAPP1_0, NETCOREAPP1_1, NETCOREAPP2_0, NETCOREAPP2_1, NETCOREAPP2_2` ...\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries\r\n\r\n@Anipik in case you are interested in picking this one up.\r\n\r\ncc @ericstj ","Url":"https://github.com/dotnet/corefx/issues/40484","RelatedDescription":"Open issue \"Replace tfm based constants with SDK ones\" (#40484)"},{"Id":"483572444","IsPullRequest":true,"CreatedAt":"2019-08-21T18:19:15","Actor":"ViktorHofer","Number":"40483","RawContent":null,"Title":"Fix official builds because of SDL authentication","State":"closed","Body":"This is currently causing official builds to fail. Talked with the engineering team who pointed out that the escaping is wrong.","Url":"https://github.com/dotnet/corefx/pull/40483","RelatedDescription":"Closed or merged PR \"Fix official builds because of SDL authentication\" (#40483)"},{"Id":"483570356","IsPullRequest":false,"CreatedAt":"2019-08-21T18:04:21","Actor":"am11","Number":"40482","RawContent":null,"Title":"non-UTF8 encoded JSON docs to throw NotSupportedException","State":"open","Body":"I am in the process of adding `System.Text.Json` parser to JSONTestSuite: https://github.com/am11/JSONTestSuite/tree/feature/dotnet-system-text-json/parsers/test_dotnet_system_text_json.\r\n\r\nCurrently, the following four tests are failing:\r\n\r\n1. [i_string_UTF-16LE_with_BOM.json](https://github.com/nst/JSONTestSuite/tree/e3d9a17/test_parsing/i_string_UTF-16LE_with_BOM.json)\r\n    * > System.Text.Json.JsonReaderException: '0xFF' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.\r\n2. [i_string_utf16BE_no_BOM.json](https://github.com/nst/JSONTestSuite/tree/e3d9a17/test_parsing/i_string_utf16BE_no_BOM.json)\r\n    * > System.Text.Json.JsonReaderException: '0x00' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.\r\n3. [i_string_utf16LE_no_BOM.json](https://github.com/nst/JSONTestSuite/tree/e3d9a17/test_parsing/i_string_utf16LE_no_BOM.json)\r\n    * > System.Text.Json.JsonReaderException: '0x00' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 1.\r\n4. [i_structure_500_nested_arrays.json](https://github.com/nst/JSONTestSuite/tree/e3d9a17/test_parsing/i_structure_500_nested_arrays.json)\r\n    * > System.Text.Json.JsonReaderException: The maximum configured depth of 64 has been exceeded. Cannot read next JSON array. LineNumber: 0 | BytePositionInLine: 64.\r\n    * AFAICT, this limit is not adjustable by API consumer.\r\n\r\nShould `NotSupportedException` be thrown in case of 1, 2 and 3 with message indicating that non-UTF8 encodings are unsupported?\r\n\r\nI found two places, where similar white-listing / checking for encoding is employed:\r\n\r\n1. https://github.com/dotnet/corefx/blob/f4344b0d3b45fc7c8f41e5c909ddcb2752bea0fa/src/System.Private.DataContractSerialization/src/System/Xml/EncodingStreamWrapper.cs#L22\r\n2. https://github.com/dotnet/corefx/blob/f4344b0d3b45fc7c8f41e5c909ddcb2752bea0fa/src/System.Private.DataContractSerialization/src/System/Runtime/Serialization/Json/JsonEncodingStreamWrapper.cs#L57-L63","Url":"https://github.com/dotnet/corefx/issues/40482","RelatedDescription":"Open issue \"non-UTF8 encoded JSON docs to throw NotSupportedException\" (#40482)"},{"Id":"483553661","IsPullRequest":false,"CreatedAt":"2019-08-21T17:32:16","Actor":"NatKite","Number":"40481","RawContent":null,"Title":"control.DataBindings.Remove\\Clear does not unsubscribe from the INotifyPropertyChanged.PropertyChanged event in the WinForms app.","State":"open","Body":"Hello!\r\n\r\nI think that this is the compatibility bug. (.NetCore 3.0 preview8)\r\nBuild and run the code below at the ,Net Framework and at the .Net Core platforms and we will see a difference.\r\n\r\n```csharp\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.Windows.Forms;\r\n\r\nnamespace TestApp {\r\n    class Program {\r\n        public class MainObject : INotifyPropertyChanged {\r\n            private string text;\r\n            public string Text {\r\n                get { return text; }\r\n                set {\r\n                    if(text != value) {\r\n                        text = value;\r\n                        if(PropertyChanged != null) {\r\n                            PropertyChanged(this, new PropertyChangedEventArgs(nameof(Text)));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            public event PropertyChangedEventHandler PropertyChanged;\r\n\r\n            public bool IsPropertyChangedAssigned { get { return PropertyChanged != null; } }\r\n\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n            MainObject mainObject = new MainObject();\r\n            mainObject.Text = \"Test text\";\r\n            Form form = new Form();\r\n            TextBox textBox = new TextBox();\r\n            Binding binding = new Binding(\"Text\", mainObject, \"Text\");\r\n            textBox.DataBindings.Add(binding);\r\n            textBox.Parent = form;\r\n            form.Show();\r\n            Console.WriteLine(\"MainObject.IsPropertyChangedAssigned: {0}\", mainObject.IsPropertyChangedAssigned);\r\n            textBox.DataBindings.Clear();\r\n            binding = null;\r\n            Console.WriteLine(\"MainObject.IsPropertyChangedAssigned: {0}\", mainObject.IsPropertyChangedAssigned);\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFor .Net Framework the result is:\r\nMainObject.IsPropertyChangedAssigned: True\r\nMainObject.IsPropertyChangedAssigned: False\r\nFor .Net Core the result is:\r\nMainObject.IsPropertyChangedAssigned: True\r\nMainObject.IsPropertyChangedAssigned: True\r\n\r\nThe PropertyChanged event subscription remains after binding remove.\r\n\r\nThanks,\r\nNat.\r\n","Url":"https://github.com/dotnet/corefx/issues/40481","RelatedDescription":"Open issue \"control.DataBindings.Remove\\Clear does not unsubscribe from the INotifyPropertyChanged.PropertyChanged event in the WinForms app.\" (#40481)"},{"Id":"483482486","IsPullRequest":true,"CreatedAt":"2019-08-21T16:12:45","Actor":"dotnet-maestro[bot]","Number":"40478","RawContent":null,"Title":"[release/3.0-preview9] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fb9107a0-b3ab-40eb-a0f8-08d721cca946)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190821.2\r\n- **Date Produced**: 8/21/2019 3:11 PM\r\n- **Commit**: 5700445383ee0449072cf9df1c00b3b4a9aeddf5\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview9.19421.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview9.19421.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview9.19421.2\r\n\r\n[marker]: <> (End:fb9107a0-b3ab-40eb-a0f8-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40478","RelatedDescription":"Closed or merged PR \"[release/3.0-preview9] Update dependencies from dotnet/coreclr\" (#40478)"},{"Id":"483491398","IsPullRequest":false,"CreatedAt":"2019-08-21T15:26:38","Actor":"layomia","Number":"40479","RawContent":null,"Title":"Deserialization support for more implementing types in JsonSerializer","State":"open","Body":"https://github.com/dotnet/corefx/pull/39001 added support for types derived from [BCL collections that are natively supported by the serializer](https://github.com/dotnet/corefx/issues/36643), with the exception of read-only types, and types that do not implement any of:\r\n\r\n- `IList`\r\n- `ICollection<T>`\r\n- `Stack<T>`\r\n- `Queue<T>`\r\n- `IDictionary`\r\n- `IDictionary<string, TValue>`\r\n\r\nSome examples are `public class StackWrapper : Stack { }` and [StringValues](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.primitives.stringvalues?view=aspnetcore-3.0). The serializer throws a `NotSupportedException` when a deserialization attempt is made for these types.\r\n\r\nMore investigation/design needs to be done, but these types can be supported by using reflection to probe for the right constructors to populate them if we determine to support them in the future.","Url":"https://github.com/dotnet/corefx/issues/40479","RelatedDescription":"Open issue \"Deserialization support for more implementing types in JsonSerializer\" (#40479)"},{"Id":"483455224","IsPullRequest":true,"CreatedAt":"2019-08-21T15:19:50","Actor":"dotnet-maestro[bot]","Number":"40477","RawContent":null,"Title":"[release/3.0-preview9] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c839d5bb-51cd-4649-a0f7-08d721cca946)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 12:53 PM\r\n- **Commit**: 7aa107d818fe87e627154c0331d6de5d47f39a45\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19421.1\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19421.1\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19421.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19421.1\r\n\r\n[marker]: <> (End:c839d5bb-51cd-4649-a0f7-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40477","RelatedDescription":"Closed or merged PR \"[release/3.0-preview9] Update dependencies from dotnet/arcade\" (#40477)"},{"Id":"483236998","IsPullRequest":false,"CreatedAt":"2019-08-21T07:04:56","Actor":"rmja","Number":"40476","RawContent":null,"Title":"Regression in System.Data.SqlClient >= 4.7.0-preview7 on Docker","State":"open","Body":"The newest versions of `System.Data.SqlClient` throws when connecting to SQL Azure when running inside a Docker linux container.\r\n\r\n* `4.7.0-preview6.19303.8` does not throw\r\n* `4.7.0-preview7.19362.9` and `4.7.0-preview8.19405.3` throws when run in Docker\r\n\r\nI have tried both the debian and alpine images and both seems to produce the exception. The code works fine on Windows.\r\nI have also not seen any issues when connecting to a \"real\" SQL Server, but I have not investigated this thoroughly.\r\n\r\n![image](https://user-images.githubusercontent.com/2112306/63409421-6e811a00-c3f1-11e9-8a3e-4aa7f4d91f28.png)\r\n\r\nThe reproducing code is the following:\r\n\r\n```\r\nusing System.Data.SqlClient;\r\n\r\nnamespace Repro145\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            using (var connection = new SqlConnection(ConnectionString))\r\n            {\r\n                connection.Open();\r\n\r\n                var command = new SqlCommand(\"SELECT * FROM Catalog.Device\", connection);\r\n\r\n                // System.Data.SqlClient 4.7.0-preview7.19362.9 and later throws when run in Docker\r\n                // System.Data.SqlClient 4.7.0-preview6.19303.8 does not throw\r\n                var reader = command.ExecuteReader();\r\n\r\n                while (reader.Read()) ;\r\n\r\n                connection.Close();\r\n            }\r\n        }\r\n\r\n        private const string ConnectionString = \"Server=tcp:xxx.database.windows.net,1433;Initial Catalog=xxx;Persist Security Info=False;User ID=xxx;Password=xxx;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\";\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n<details>\r\n<summary>.csproj file</summary>\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Azure.Containers.Tools.Targets\" Version=\"1.9.2\" />\r\n    \r\n    <!-- Does not throw -->\r\n    <!--<PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview6.19303.8\" />-->\r\n    \r\n    <!-- Throws -->\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview7.19362.9\" />\r\n    \r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Dockerfile</summary>\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/core/runtime:3.0.0-preview8-buster-slim AS base\r\nWORKDIR /app\r\n\r\nFROM mcr.microsoft.com/dotnet/core/sdk:3.0.0-preview8-buster AS build\r\nWORKDIR /src\r\nCOPY [\"Repro145/Repro145.csproj\", \"Repro145/\"]\r\nRUN dotnet restore \"Repro145/Repro145.csproj\"\r\nCOPY . .\r\nWORKDIR \"/src/Repro145\"\r\nRUN dotnet build \"Repro145.csproj\" -c Release -o /app/build\r\n\r\nFROM build AS publish\r\nRUN dotnet publish \"Repro145.csproj\" -c Release -o /app/publish\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app/publish .\r\nENTRYPOINT [\"dotnet\", \"Repro145.dll\"]\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<details>\r\n<summary>Full stacktrace</summary>\r\n\r\n```\r\nSystem.Data.SqlClient.SqlException\r\n  HResult=0x80131904\r\n  Message=A transport-level error has occurred when receiving results from the server. (provider: TCP Provider, error: 35 - An internal exception was caught)\r\n  Source=Core .Net SqlClient Data Provider\r\n  StackTrace:\r\n   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n   at System.Data.SqlClient.TdsParserStateObject.ThrowExceptionAndWarning(Boolean callerHasConnectionLock, Boolean asyncClose)\r\n   at System.Data.SqlClient.TdsParserStateObject.ReadSniError(TdsParserStateObject stateObj, UInt32 error)\r\n   at System.Data.SqlClient.TdsParserStateObject.ReadSniSyncOverAsync()\r\n   at System.Data.SqlClient.TdsParserStateObject.TryReadNetworkPacket()\r\n   at System.Data.SqlClient.TdsParserStateObject.TryPrepareBuffer()\r\n   at System.Data.SqlClient.TdsParserStateObject.TryReadByte(Byte& value)\r\n   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()\r\n   at System.Data.SqlClient.SqlDataReader.get_MetaData()\r\n   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite, String method)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)\r\n   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at System.Data.SqlClient.SqlCommand.ExecuteReader()\r\n   at Repro145.Program.Main() in C:\\Source\\repro145\\Repro145\\Program.cs:line 17\r\n\r\nInner Exception 1:\r\nIOException: The decryption operation failed, see inner exception.\r\n\r\nInner Exception 2:\r\nSslException: Decrypt failed with OpenSSL error - SSL_ERROR_SSL.\r\n\r\nInner Exception 3:\r\nOpenSslCryptographicException: error:1408F10B:SSL routines:ssl3_get_record:wrong version number\r\n```\r\n\r\n</details>\r\n\r\nThis issue is related to https://github.com/dotnet/SqlClient/issues/145 for the Microsoft.Data.SqlClient equivalent.","Url":"https://github.com/dotnet/corefx/issues/40476","RelatedDescription":"Open issue \"Regression in System.Data.SqlClient >= 4.7.0-preview7 on Docker\" (#40476)"},{"Id":"483185317","IsPullRequest":false,"CreatedAt":"2019-08-21T03:53:13","Actor":"ahsonkhan","Number":"40475","RawContent":null,"Title":"System.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds failing in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=316633 from https://github.com/dotnet/corefx/pull/40446 on netcoreapp-Linux-Debug-x64-Ubuntu.1804.Amd64.Open\r\n\r\nSystem.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds\r\n```text\r\nSystem.Net.Sockets.SocketException : Address already in use\r\n\r\nStack trace\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName) in /_/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 5202\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress) in /_/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 762\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP) in /_/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 703\r\n   at System.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds() in /_/src/System.Net.Sockets/tests/FunctionalTests/SocketOptionNameTest.cs:line 445\r\n```\r\n\r\ncc @davidsh, @wfurt ","Url":"https://github.com/dotnet/corefx/issues/40475","RelatedDescription":"Open issue \"System.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds failing in CI\" (#40475)"},{"Id":"483184881","IsPullRequest":false,"CreatedAt":"2019-08-21T03:51:11","Actor":"ahsonkhan","Number":"40474","RawContent":null,"Title":"System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_PendingReceive_SendsReset failing in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=316633 from https://github.com/dotnet/corefx/pull/40446 on netcoreapp-Linux-Debug-x64-(Alpine.39.Amd64.Open)\r\n\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_PendingReceive_SendsReset(doRead: False)\r\n```text\r\nSystem.IO.IOException : Unable to read data from the transport connection: Broken pipe.\\n---- System.Net.Sockets.SocketException : Broken pipe\r\n\r\nStack trace\r\n   at System.Net.Security.SslStream.<WriteSingleChunk>g__CompleteAsync|212_1[TWriteAdapter](ValueTask writeTask, Byte[] bufferToReturn) in /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 1236\r\n   at System.Net.Security.SslStream.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer) in /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 1486\r\n   at System.Net.Test.Common.Http2LoopbackConnection.WriteFrameAsync(Frame frame) in /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs:line 88\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.<>c__DisplayClass62_0.<<Http2_PendingReceive_SendsReset>b__1>d.MoveNext() in /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs:line 1784\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 83\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 111\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 71\r\n   at System.Net.Test.Common.Http2LoopbackServer.CreateClientAndServerAsync(Func`2 clientFunc, Func`2 serverFunc, Int32 timeout) in /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs:line 186\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.Http2_PendingReceive_SendsReset(Boolean doRead) in /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs:line 1736\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n```\r\n\r\ncc @davidsh, @wfurt ","Url":"https://github.com/dotnet/corefx/issues/40474","RelatedDescription":"Open issue \"System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_PendingReceive_SendsReset failing in CI\" (#40474)"},{"Id":"483151693","IsPullRequest":false,"CreatedAt":"2019-08-21T01:17:01","Actor":"whuanle","Number":"40473","RawContent":null,"Title":"Cannot run under ARM Linux","State":"open","Body":"System environment:\r\n\r\n```\r\nLinux 3.10.53-HULK2 #1 SMP PREEMPT Wed Jul 12 19:47:39 CST 2017 armv7l GNU/Linux\r\n\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n\r\n```\r\n\r\nI have a console app，use of .NET Core 2.x or 3.0\r\n\r\n![image](https://user-images.githubusercontent.com/2189761/63394737-a12c1200-c3f3-11e9-9236-eba60d776133.png)\r\n\r\n```\r\nubuntu@ubuntu:~$ file ConsoleApp3 \r\nConsoleApp3: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.32, BuildID[sha1]=af5075900c7b6efa51a7db214b11cb7566bd5ef1, stripped\r\n\r\n```\r\nbut...\r\n\r\n```\r\nroot@aaa:/tmp/publish# ./libsos.so \r\nIllegal instruction\r\nroot@aaa:/tmp/publish# ./ConsoleApp3\r\nbash: ./ConsoleApp3: No such file or directory\r\n\r\n```\r\nUnable to install SDK and Runtime... \r\nThis is an industrial development board,I can't run my .NET Core program here.Even independent publish releases....\r\nNo matter which version I use，.NET Core 2.x or 3.0.\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40473","RelatedDescription":"Open issue \"Cannot run under ARM Linux\" (#40473)"},{"Id":"483130239","IsPullRequest":false,"CreatedAt":"2019-08-20T23:36:45","Actor":"hiteshmadan","Number":"40471","RawContent":null,"Title":"Missing an API to validate webhook urls?","State":"open","Body":"For components that need to make http requests against user-provided URLs, there needs to be an easy way to validate whether future HTTP requests to this URL will make it through or not.\r\n\r\nFor instance: any product that allows users to register webhooks needs to validate that the user-provided URL can be connected to at runtime.\r\n\r\nConnectHelper.ConnectAsync does some of it except that it doesn't handle proxying/tunnelling/ssl establishment/remote certificate validation.\r\n\r\nIf there's any way to do this today by stringing together multiple public APIs, please let me know that too.","Url":"https://github.com/dotnet/corefx/issues/40471","RelatedDescription":"Open issue \"Missing an API to validate webhook urls?\" (#40471)"},{"Id":"483125243","IsPullRequest":true,"CreatedAt":"2019-08-20T23:16:24","Actor":"jkoritzinsky","Number":"40470","RawContent":null,"Title":"Add AssemblyAttributesGoHere* and SuppressMergeCheckAttribute to S.R.CS.VC with typeforwards from mscorlib","State":"open","Body":"Add `AssemblyAttributesGoHere*` and `SuppressMergeCheckAttribute` to System.Runtime.CompilerServices.VisualC as internal types with typeforwards from mscorlib. The metadata manager in the runtime expects these types to live in `mscorlib` and doesn't work if it lives somewhere else (for `SuppressMergeCheckAttribute`), or it leaves the typerefs in the assembly, which leaves them dangling (for `AssemblyAttributesGoHere*`).\r\n\r\nThis PR is awaiting internal validation from @vatsan-madhavan and @tgani-msft.","Url":"https://github.com/dotnet/corefx/pull/40470","RelatedDescription":"Open PR \"Add AssemblyAttributesGoHere* and SuppressMergeCheckAttribute to S.R.CS.VC with typeforwards from mscorlib\" (#40470)"},{"Id":"483066887","IsPullRequest":true,"CreatedAt":"2019-08-20T22:39:20","Actor":"mmitche","Number":"40464","RawContent":null,"Title":"[release/3.0] Update 3.0 branding and enable CI","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40464","RelatedDescription":"Closed or merged PR \"[release/3.0] Update 3.0 branding and enable CI\" (#40464)"},{"Id":"483111732","IsPullRequest":true,"CreatedAt":"2019-08-20T22:26:19","Actor":"kasiabulat","Number":"40469","RawContent":null,"Title":"JsonArray and transformations API implementation","State":"open","Body":"I implemented `JsonArray` and transformations API for `JsonNode`. In order to do this, I needed to adjust other types as well. I also made some minor fixes and included some feedback from discussions. I still new to add much more tests and documentation to some of the methods, but I wanted to create this PR today to discuss new issues that came up during tomorrow meeting. I can split it in to couple of PRs later on, if the number of changes it too big there.\r\n\r\nNew open questions (I added them to the open questions section in specification as well):\r\n* Where do we want to enable user to set handling properties manner? Do we want to support it as `JsonElement` does not? (and currently `JsonNode.Parse` implementation uses `JsonDocument.Parse`)\r\n* Do we want to support transforming `JsonObject` into JSON string? Should `ToString` behave this way or do we want an additional method - e.g. `GetJsonString` (it might be confusing as we have a type `JsonString`) or `GetJsonRepresenation`?\r\n* `AsJsonElement` function on `JsonNode` currently does not work for `null` node. Do we want to support null case somehow?\r\n* Do we want separate `JsonElement` implementations for `JsonNode` and `JsonDocument` or can the implementation be mixed as it is now (with a lot of ifs in each method)?\r\n* Do we want separate `JsonElement.ArrayEnumerator` and `JsonElement.ObjectEnumerator` implementations for `JsonNode` and `JsonDocument`? Do we want separate methods in `JsonElement` returning strongly typed different implementations?\r\n* Is it OK that `JsonElement.GetRawText` does not return the raw text for `JsonNode` parent?\r\n* Should we support `JsonElement.WriteTo` for `JsonNode` parent?\r\n* Private property `JsonElement.TokenType` is currently throwing an `InvalidCast` exception for `JsonNode` parent in debugger. Is it OK?\r\n* Do we want both `Clone` and `DeepCopy` methods for `JsonNode`? \r\n* Are we OK with needing to cast `JsonArray` to `JsonNode` in order to add it to `JsonObject`? (there's an ambiguous call between `JsonArray` and `IEnumerable<JsonNode>` right now)\r\n* Do we want `IsImmutable` property for `JsonElement`?\r\n* Is `DateTime` for `JsonString` handled correctly?\r\n\r\naddresses: #39922\r\ncc: @joperezr @bartonjs @ericstj @ahsonkhan @terrajobst @JamesNK @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40469","RelatedDescription":"Open PR \"JsonArray and transformations API implementation\" (#40469)"},{"Id":"483098011","IsPullRequest":true,"CreatedAt":"2019-08-20T21:44:06","Actor":"bartonjs","Number":"40468","RawContent":null,"Title":"Clean up JsonElementWriteTests","State":"open","Body":"* Make JsonElementWriteTests and JsonDocumentWriteTests share drivers\r\n* Fix the casing of all escaped values in these tests (reducing the need for normalization)\r\n* Hard-code the correct answer for a test that used NewtonSoft.Json to dynamically compute the same answer every run\r\n* Make two async tests declare async, and await the async part.\r\n\r\nAs a followup the JsonElementWriteTests / JsonDocumentWriteTests / JsonReadonlyDomWriteTests classes can be split to multiple files, but in this PR it keeps the edits reduced to only the semantic changes (inheritance).","Url":"https://github.com/dotnet/corefx/pull/40468","RelatedDescription":"Open PR \"Clean up JsonElementWriteTests\" (#40468)"},{"Id":"483091479","IsPullRequest":true,"CreatedAt":"2019-08-20T21:27:41","Actor":"madmir","Number":"40467","RawContent":null,"Title":"Re-enable xunit warning 2017","State":"open","Body":"Use specialized assertions for checking for elements in collections.\r\n\r\nContributes to #39697\r\ncc: @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40467","RelatedDescription":"Open PR \"Re-enable xunit warning 2017\" (#40467)"},{"Id":"483087700","IsPullRequest":true,"CreatedAt":"2019-08-20T21:17:52","Actor":"wfurt","Number":"40466","RawContent":null,"Title":"set _requestQueueBoundHandle to null after disposing","State":"open","Body":"With this, Start()/Stop()/Start() sequence should work as expected. \r\n\r\nAdded two tests for restart. \r\n\r\nfixes #39552\r\n","Url":"https://github.com/dotnet/corefx/pull/40466","RelatedDescription":"Open PR \"set _requestQueueBoundHandle to null after disposing\" (#40466)"},{"Id":"483085205","IsPullRequest":true,"CreatedAt":"2019-08-20T21:16:46","Actor":"mmitche","Number":"40465","RawContent":null,"Title":"Merge missed release/3.0-preview9 fix","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40465","RelatedDescription":"Closed or merged PR \"Merge missed release/3.0-preview9 fix\" (#40465)"},{"Id":"483543914","IsPullRequest":false,"CreatedAt":"2019-08-15T18:06:02","Actor":"abelykh0","Number":"40480","RawContent":null,"Title":"Segmentation fault when using odbcConnection.GetSchema","State":"open","Body":"The example below crashes with Segmentation fault on Linux. This is not a regression, it is also crashing with .NET Core 2.2\r\n\r\n```csharp\r\nusing System;\r\nusing System.Data;\r\nusing System.Data.Odbc;\r\nnamespace ConsoleApp32\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string connectionString = \"Driver={MySQL};Server=dbtest;Database=sakila;UID=root;PWD=****;\";\r\n            using (OdbcConnection connection = new OdbcConnection(connectionString))\r\n            {\r\n                connection.Open();\r\n                int rows = 0;\r\n                using (DataTable schemaTable = connection.GetSchema(\r\n                        \"Tables\",\r\n                    new string[] { null, null, \"BAD\" }))\r\n                {\r\n                    rows = schemaTable.Rows.Count;\r\n                }\r\n                Console.WriteLine(\"rows={0}\", rows);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf you use either valid table name (like `\"film\"`), or `null` instead of `\"BAD\"`, it works correctly.\r\n\r\nEnvironment:\r\n\r\n```\r\n$dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     rhel\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         rhel.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview8-013656/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013656 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/corefx/issues/40480","RelatedDescription":"Open issue \"Segmentation fault when using odbcConnection.GetSchema\" (#40480)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"483732377","IsPullRequest":true,"CreatedAt":"2019-08-22T02:12:34","Actor":"agocke","Number":"38202","RawContent":null,"Title":"Add release/dev16.3-vs-deps to publishing","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38202","RelatedDescription":"Open PR \"Add release/dev16.3-vs-deps to publishing\" (#38202)"},{"Id":"483731187","IsPullRequest":false,"CreatedAt":"2019-08-22T02:06:58","Actor":"joshlang","Number":"38201","RawContent":null,"Title":"CS7038 Failed to emit module (IAsyncEnumerable returns IAsyncEnumerable)","State":"open","Body":"EDIT:  This was my original bug.  Then I noticed when I compiled it, it actually dies with `error CS7038: Failed to emit module` ... so I changed the title (seems more important)\r\n\r\n.net core 3.0 preview 8.\r\n\r\n```\r\nasync IAsyncEnumerable<string> GetStrings([EnumeratorCancellation] CancellationToken cancellationToken = default)\r\n{\r\n    yield return await Task.FromResult(\"\");\r\n    yield return await Task.FromResult(\"\");\r\n}\r\n\r\nasync IAsyncEnumerable<string> GetStrings2([EnumeratorCancellation] CancellationToken cancellationToken = default) \r\n    => GetStrings(cancellationToken);\r\n\r\nIAsyncEnumerable<string> GetStrings3([EnumeratorCancellation] CancellationToken cancellationToken = default) \r\n    => GetStrings(cancellationToken);\r\n```\r\n\r\nGetStrings() has some customizable logic (imagine)… And GetStrings2 or GetStrings3 just want to call it with specific parameters for the consumer's convenience.\r\n\r\nGetStrings2 warns `CS1998` (async method but no awaits)\r\n\r\nGetStrings3 warns `CS8424` (the enumerator cancellation attribute has no effect because it's not async)\r\n\r\nIt seems to me that at least *one* of these should work!\r\n","Url":"https://github.com/dotnet/roslyn/issues/38201","RelatedDescription":"Open issue \"CS7038 Failed to emit module (IAsyncEnumerable returns IAsyncEnumerable)\" (#38201)"},{"Id":"483705486","IsPullRequest":true,"CreatedAt":"2019-08-22T02:00:10","Actor":"mavasani","Number":"38199","RawContent":null,"Title":"Skip flaky integration test","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38199","RelatedDescription":"Closed or merged PR \"Skip flaky integration test\" (#38199)"},{"Id":"483718730","IsPullRequest":true,"CreatedAt":"2019-08-22T01:10:24","Actor":"genlu","Number":"38200","RawContent":null,"Title":"Exclude textual changes made in unchangeable document","State":"open","Body":"This is my third attempt of fixing the feedback below (see #38070 for another approach)\r\nhttps://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html \r\n\r\nThe root cause is symbol finder returns all the references for a given symbol, including those from unchangeable document (i.e. *.g.cs file from Razor). As a result, refactoring uses \"find reference\" would end up fixing those references and cause workspace to throw when the change is being applied.\r\n\r\nThis added a new helper method that simply drop all changes made in those unchangeable document. And call this helper before refactoring returns final solution.\r\n\r\nAffected refactoring:\r\n1. rename\r\n2. sync/change namespace\r\n3. change signature","Url":"https://github.com/dotnet/roslyn/pull/38200","RelatedDescription":"Open PR \"Exclude textual changes made in unchangeable document\" (#38200)"},{"Id":"483654382","IsPullRequest":true,"CreatedAt":"2019-08-22T01:05:14","Actor":"mavasani","Number":"38184","RawContent":null,"Title":"Change unused parameters analyzer configuration to analyze generated …","State":"closed","Body":"…code\r\n\r\nThis fixes false reports for unused parameters of event handlers that are referenced/invoked from xaml generated code files. Fixes #37483","Url":"https://github.com/dotnet/roslyn/pull/38184","RelatedDescription":"Closed or merged PR \"Change unused parameters analyzer configuration to analyze generated …\" (#38184)"},{"Id":"483704554","IsPullRequest":false,"CreatedAt":"2019-08-22T00:02:13","Actor":"mavasani","Number":"38198","RawContent":null,"Title":"Flaky integration test CSharpCodeActions.ConfigureCodeStyleOptionValueAndSeverity","State":"open","Body":"This integration was recently added, and it seems it fails intermittently on quite a few integration test runs.\r\n\r\n```\r\nSystem.Exception : The following expected item(s) not found in sequence:\\r\\nConfigure IDE0059 code style\\r\\nunused__local__variable\\r\\ndiscard__variable\\r\\nConfigure IDE0059 severity\\r\\nNone\\r\\nSilent\\r\\nSuggestion\\r\\nWarning\\r\\nError\\r\\nSuppress IDE0059\\r\\nin Source\\r\\nin Suppression File\\r\\nin Source (attribute)\\r\\n\\r\\nActual items:\\r\\nUse discard '__'\\r\\nPreview changes\\r\\nDocument\\r\\nProject\\r\\nSolution\\r\\nUse explicit type instead of 'var'\\r\\nPreview changes\\r\\nDocument\\r\\nProject\\r\\nSolution\\r\\nConfigure or Suppress issues\\r\\nConfigure IDE0059 code style\\r\\nunused__local__variable\\r\\nPreview changes\\r\\ndiscard__variable\\r\\nPreview changes\\r\\nConfigure IDE0059 severity\\r\\nNone\\r\\nPreview changes\\r\\nSilent\\r\\nPreview changes\\r\\nSuggestion\\r\\nPreview changes\\r\\nWarning\\r\\nPreview changes\\r\\nError\\r\\nPreview changes\\r\\nSuppress IDE0059\\r\\nin Source\\r\\nPreview changes\\r\\nDocument\\r\\nProject\\r\\nSolution\\r\\nin Suppression File\\r\\nPreview changes\\r\\nDocument\\r\\nProject\\r\\nSolution\\r\\nin Source (attribute)\\r\\nPreview changes\\r\\nDocument\\r\\nProject\\r\\nSolution\\r\\nConfigure IDE0008 code style\\r\\ncsharp__style__var__elsewhere\\r\\ntrue\\r\\nPreview changes\\r\\nfalse\\r\\nPreview changes\\r\\ncsharp__style__var__for__built__in__types\\r\\ntrue\\r\\nPreview changes\\r\\nfalse\\r\\nPreview changes\\r\\ncsharp__style__var__when__type__is__apparent\\r\\ntrue\\r\\nPreview changes\\r\\nfalse\\r\\nPreview changes\\r\\nConfigure IDE0008 severity\\r\\nNone\\r\\nPreview changes\\r\\nSilent\\r\\nPreview changes\\r\\nSuggestion\\r\\nPreview changes\\r\\nWarning\\r\\nPreview changes\\r\\nError\\r\\nPreview changes\\r\\n\r\n```\r\n\r\nThe test will be disabled and this issue tracks fixing and re-enabling it.","Url":"https://github.com/dotnet/roslyn/issues/38198","RelatedDescription":"Open issue \"Flaky integration test CSharpCodeActions.ConfigureCodeStyleOptionValueAndSeverity\" (#38198)"},{"Id":"483704482","IsPullRequest":true,"CreatedAt":"2019-08-22T00:01:57","Actor":"dotnet-bot","Number":"38197","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38197","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38197)"},{"Id":"483701084","IsPullRequest":true,"CreatedAt":"2019-08-21T23:46:37","Actor":"gafter","Number":"38196","RawContent":null,"Title":"Add tests to demonstrate that absence of a reported bug","State":"open","Body":"Closes #36443","Url":"https://github.com/dotnet/roslyn/pull/38196","RelatedDescription":"Open PR \"Add tests to demonstrate that absence of a reported bug\" (#38196)"},{"Id":"483700747","IsPullRequest":false,"CreatedAt":"2019-08-21T23:45:13","Actor":"mavasani","Number":"38195","RawContent":null,"Title":"Field symbol from symbol tree and operation tree fail Equals check in presence of nullable enable","State":"open","Body":"Originally reported https://github.com/dotnet/roslyn-analyzers/issues/2776, which seems to be a breaking change in analyzer behavior in presence of #nullable enable. I have created an isolated IOperation unit test:\r\n\r\n```csharp\r\n        [CompilerTrait(CompilerFeature.IOperation, CompilerFeature.NullableReferenceTypes)]\r\n        [Fact]\r\n        public void NullableFieldReference()\r\n        {\r\n            var compWithoutNullable = CreateCompilation(@\"\r\nclass C<T>\r\n{\r\n    private C<T> _field;\r\n    public static void M(C<T> p)\r\n    {\r\n        _ = p._field;\r\n    }\r\n}\");\r\n            var compWithNullable = CreateCompilation(@\"\r\n#nullable enable\r\nclass C<T>\r\n{\r\n    private C<T>? _field;\r\n    public static void M(C<T> p)\r\n    {\r\n        _ = p._field;\r\n    }\r\n}\", options: WithNonNullTypesTrue());\r\n\r\n\r\n            testCore(compWithoutNullable); // Passes\r\n            testCore(compWithNullable); // Fails\r\n\r\n            static void testCore(CSharpCompilation comp)\r\n            {\r\n                var syntaxTree = comp.SyntaxTrees[0];\r\n                var model = comp.GetSemanticModel(syntaxTree);\r\n                var root = syntaxTree.GetRoot();\r\n                var classDecl = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Single();\r\n                var classSym = (INamedTypeSymbol)model.GetDeclaredSymbol(classDecl);\r\n                var fieldSym = classSym.GetMembers(\"_field\").Single();\r\n\r\n                var methodDecl = root.DescendantNodes().OfType<MethodDeclarationSyntax>().Single();\r\n                var methodBlockOperation = model.GetOperation(methodDecl);\r\n                var fieldReferenceOperation = methodBlockOperation.Descendants().OfType<IFieldReferenceOperation>().Single();\r\n                Assert.True(fieldSym.Equals(fieldReferenceOperation.Field));\r\n            }\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38195","RelatedDescription":"Open issue \"Field symbol from symbol tree and operation tree fail Equals check in presence of nullable enable\" (#38195)"},{"Id":"483700598","IsPullRequest":true,"CreatedAt":"2019-08-21T23:44:33","Actor":"sharwell","Number":"38194","RawContent":null,"Title":"Add ETW events for recovering syntax trees","State":"open","Body":"Closes #37477\r\n\r\nThe steps for manually recording traces have already been updated to enable the provider.\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/63475983-fdaf2180-c433-11e9-9b55-b603c778c9fb.png)\r\n","Url":"https://github.com/dotnet/roslyn/pull/38194","RelatedDescription":"Open PR \"Add ETW events for recovering syntax trees\" (#38194)"},{"Id":"483697393","IsPullRequest":false,"CreatedAt":"2019-08-21T23:40:59","Actor":"RikkiGibson","Number":"38193","RawContent":null,"Title":"Members marked [MaybeNull] should not get uninitialized field warnings","State":"closed","Body":"Found when triaging #37987\r\n\r\nIt looks like in #37507 we added some tests which verify the uninitialized field warnings on members marked `[MaybeNull]`. Today the behavior is that a generic type field with a `[MaybeNull]` attribute can still get WRN_UninitializedNonNullableField warnings.\r\n\r\nA generic field marked `[MaybeNull]` will never be a non-nullable reference type, though, so it seems like we should not give uninitialized field warnings in such cases.\r\n\r\n```cs\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass C<T>\r\n{\r\n    [MaybeNull]\r\n    public T field; // currently gives WRN_UninitializedNonNullableField\r\n}\r\n```\r\n\r\nHere's a test showing the current behavior:\r\nhttps://github.com/dotnet/roslyn/blob/2802137e22c19153028c5565f6350cbdee9c0060/src/Compilers/CSharp/Test/Semantic/Semantics/UninitializedNonNullableFieldTests.cs#L819\r\n","Url":"https://github.com/dotnet/roslyn/issues/38193","RelatedDescription":"Closed issue \"Members marked [MaybeNull] should not get uninitialized field warnings\" (#38193)"},{"Id":"483669224","IsPullRequest":true,"CreatedAt":"2019-08-21T23:34:51","Actor":"JoeRobich","Number":"38185","RawContent":null,"Title":"Remove the 7.3 languageversion from the BindSymbolInOtherFile test","State":"closed","Body":"Ran locally both specifying languageversion=\"8\" and not specifying a languageversion and the test passed.\r\n\r\nResolves #37097","Url":"https://github.com/dotnet/roslyn/pull/38185","RelatedDescription":"Closed or merged PR \"Remove the 7.3 languageversion from the BindSymbolInOtherFile test\" (#38185)"},{"Id":"483686634","IsPullRequest":true,"CreatedAt":"2019-08-21T23:25:44","Actor":"RikkiGibson","Number":"38189","RawContent":null,"Title":"Skip uninitialized field warning for generic constrained to nullable reference type","State":"closed","Body":"Closes #37987\r\n\r\nI wasn't able to find an API that did quite what I want, so I ended up adding it to TypeWithAnnotations. I would like to know if there's a better or already existing way to answer the question it is answering.","Url":"https://github.com/dotnet/roslyn/pull/38189","RelatedDescription":"Closed or merged PR \"Skip uninitialized field warning for generic constrained to nullable reference type\" (#38189)"},{"Id":"483693498","IsPullRequest":false,"CreatedAt":"2019-08-21T23:14:12","Actor":"mavasani","Number":"38192","RawContent":null,"Title":"XAML code behind file (.g.i.cs) not auto-updated when editing the xaml file in IDE","State":"open","Body":"**Version Used**: latest 16.3 dogfood build\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# WPF application (.netcore or .netframework)\r\n2. Add a new `TextBlock` control from Toolbox\r\n3. Add a new `IsVisibleChanged` event handler to the text block:\r\n![image](https://user-images.githubusercontent.com/10605811/63474139-d6088b00-c42c-11e9-8edb-0f727a6079af.png)\r\n4. This should auto-generate `TextBlock_IsVisibleChanged` handler in xaml.cs file and hook it up to the control\r\n5. Open the .xaml.cs file nested under the xaml file and invoke Find All References on `TextBlock_IsVisibleChanged`\r\n\r\n**Expected Behavior**:\r\n`TextBlock_IsVisibleChanged` reference in code behind file (MainWindow.g.i.cs) is found and the method is not flagged as unused private member (IDE0051)\r\n\r\n**Actual Behavior**:\r\nFind All References shows no references and the unused members analyzers also flags the added event handler as unused\r\n![image](https://user-images.githubusercontent.com/10605811/63474226-35669b00-c42d-11e9-82f2-5e080012d673.png)\r\n\r\n6. Build the project and invoke Find All References on `TextBlock_IsVisibleChanged`. This time you see the Expected Behavior and the reference to the method in code behind file is found and the IDE0051 is also not generated.\r\n![image](https://user-images.githubusercontent.com/10605811/63474588-8aef7780-c42e-11e9-85d1-f2e0bf32806c.png)\r\n\r\n7. If you again edit the xaml file and add a new handler or manually change the name of any existing handler, the incorrect behavior in step 5 again repros until you build the project again to regenerate the up-to-date code behind xaml file.","Url":"https://github.com/dotnet/roslyn/issues/38192","RelatedDescription":"Open issue \"XAML code behind file (.g.i.cs) not auto-updated when editing the xaml file in IDE\" (#38192)"},{"Id":"483692278","IsPullRequest":false,"CreatedAt":"2019-08-21T23:09:16","Actor":"jnm2","Number":"38191","RawContent":null,"Title":"[NotNullWhen(true)] doesn't match [MaybeNullWhen(false)]—bug? Which one is right?","State":"open","Body":"**Version Used**: VS 16.3 Preview 2\r\n\r\nI don't know which is right, `[NotNullWhen(true)]` or `[MaybeNullWhen(false)]`. Either way I have to use the `!` operator to silence a warning.\r\n\r\nAnd isn't it a bug that they aren't considered equivalent?\r\n\r\nSee standalone repro below.\r\n\r\n## Setup \r\n\r\nGiven this NRT adaptation of real-world code:\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\npublic sealed class CombiningAggregator<T>\r\n{\r\n    public delegate bool TryCombineCalculator(\r\n        T first,\r\n        T second,\r\n        [MaybeNullWhen(false)] out T combined);\r\n\r\n    private readonly TryCombineCalculator calculator;\r\n\r\n    // I have separate questions about this, but they can be ignored for the purpose of this\r\n    // issue.\r\n    [AllowNull, MaybeNull] // Still requires the initializer which then shows as redundant\r\n    private T lastValue = default;\r\n\r\n    private bool hasLastValue;\r\n\r\n    public CombiningAggregator(TryCombineCalculator calculator)\r\n    {\r\n        this.calculator = calculator ?? throw new ArgumentNullException(nameof(calculator));\r\n    }\r\n\r\n    public IReadOnlyList<T> Process(IReadOnlyList<T> values)\r\n    {\r\n        if (values == null) throw new ArgumentNullException(nameof(values));\r\n\r\n        var r = new List<T>();\r\n\r\n        using (var en = values.GetEnumerator())\r\n        {\r\n            if (!hasLastValue)\r\n            {\r\n                if (!en.MoveNext()) return r;\r\n                lastValue = en.Current;\r\n                hasLastValue = true;\r\n            }\r\n\r\n            while (en.MoveNext())\r\n            {\r\n                var next = en.Current;\r\n                if (calculator.Invoke(lastValue, next, out var combined))\r\n                {\r\n                    lastValue = combined;\r\n                }\r\n                else\r\n                {\r\n                    r.Add(lastValue);\r\n                    lastValue = next;\r\n                }\r\n            }\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    public IReadOnlyList<T> Flush()\r\n    {\r\n        if (!hasLastValue) return Array.Empty<T>();\r\n        var r = new[] { lastValue };\r\n        lastValue = default!; // And this\r\n        hasLastValue = false;\r\n        return r;\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Attempt 1: `[NotNullWhen(true)]`\r\n\r\nHow should TryCombineStrings be annotated? It seemed `[NotNullWhen(true)] out string? combined` was the right thing to do because that's what I would do if it was a standalone method.\r\n\r\nBut Roslyn says that it doesn't match `[MaybeNullWhen(false)] out string combined` even though it seems like they should be exactly equivalent:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Linq;\r\n\r\n// Demonstration code, using string instead of domain class\r\npublic static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        // ⚠ CS8622 Nullability of reference types in type of parameter 'combined' of 'bool\r\n        // Program.TryCombineStrings(string first, string second, out string? combined)'\r\n        // doesn't match the target delegate 'CombiningAggregator<string>.TryCombineCalculator'\r\n        //                                               ↓\r\n        var aggregator = new CombiningAggregator<string>(TryCombineStrings);\r\n\r\n        // Prints: AABB\r\n        Console.WriteLine(string.Join(\", \", aggregator.Process(new[] { \"AA\", \"BB\", \"cc\" })));\r\n\r\n        // Prints: cc, DD\r\n        Console.WriteLine(string.Join(\", \", aggregator.Process(new[] { \"DD\", \"ee\", \"ff\" })));\r\n\r\n        // Prints: eeff\r\n        Console.WriteLine(string.Join(\", \", aggregator.Flush()));\r\n    }\r\n\r\n    private static bool TryCombineStrings(\r\n        string first,\r\n        string second,\r\n        [NotNullWhen(true)] out string? combined)\r\n    {\r\n        if (first.All(char.IsUpper) == second.All(char.IsUpper))\r\n        {\r\n            combined = first + second;\r\n            return true;\r\n        }\r\n\r\n        combined = null;\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n## Attempt 2: `[MaybeNullWhen(false)]`\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Linq;\r\n\r\n// Demonstration code, using string instead of domain class\r\npublic static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var aggregator = new CombiningAggregator<string>(TryCombineStrings);\r\n\r\n        // Prints: AABB\r\n        Console.WriteLine(string.Join(\", \", aggregator.Process(new[] { \"AA\", \"BB\", \"cc\" })));\r\n\r\n        // Prints: cc, DD\r\n        Console.WriteLine(string.Join(\", \", aggregator.Process(new[] { \"DD\", \"ee\", \"ff\" })));\r\n\r\n        // Prints: eeff\r\n        Console.WriteLine(string.Join(\", \", aggregator.Flush()));\r\n    }\r\n\r\n    private static bool TryCombineStrings(\r\n        string first,\r\n        string second,\r\n        [MaybeNullWhen(false)] out string combined)\r\n    {\r\n        if (first.All(char.IsUpper) == second.All(char.IsUpper))\r\n        {\r\n            combined = first + second;\r\n            return true;\r\n        }\r\n\r\n        // ⚠ CS8625 Cannot convert null literal to non-nullable reference type.\r\n        //         ↓\r\n        combined = null;\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n## Attempt 3: Generic instantiation with `string?` instead of `string`\r\n\r\nThis is all over the wrong thing to do. Null values should never be sent into `TryCombineStrings` and they should never come out of `CombiningAggregator`.\r\n\r\nIn this demonstration, null strings are happening to not cause any warnings because the `.All` extension method and `string.Join` accept nulls. In the real-world project, there are a bunch of warnings because nothing was supposed to be nullable.\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Linq;\r\n\r\n// Demonstration code, using string instead of domain class\r\npublic static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var aggregator = new CombiningAggregator<string?>(TryCombineStrings);\r\n\r\n        // ⚠ Process and Flush return IReadOnlyList<string?> – SHOULD NOT BE NULLABLE\r\n\r\n        // Prints: AABB\r\n        Console.WriteLine(string.Join(\", \", aggregator.Process(new[] { \"AA\", \"BB\", \"cc\" })));\r\n\r\n        // Prints: cc, DD\r\n        Console.WriteLine(string.Join(\", \", aggregator.Process(new[] { \"DD\", \"ee\", \"ff\" })));\r\n\r\n        // Prints: eeff\r\n        Console.WriteLine(string.Join(\", \", aggregator.Flush()));\r\n    }\r\n\r\n    private static bool TryCombineStrings(\r\n        string? first, // ⚠ SHOULD NOT BE NULLABLE\r\n        string? second, // ⚠ SHOULD NOT BE NULLABLE\r\n        [NotNullWhen(true)] out string? combined)\r\n    {\r\n        if (first.All(char.IsUpper) == second.All(char.IsUpper))\r\n        {\r\n            combined = first + second;\r\n            return true;\r\n        }\r\n\r\n        combined = null;\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nShouldn't attempt 1 just work? If not, why not? You'd never write attempt 2 if you were only calling the method directly, right?\r\n\r\nIs the original, pre-C# 8 code flawed to begin with, and that's why I'm running into this problem?","Url":"https://github.com/dotnet/roslyn/issues/38191","RelatedDescription":"Open issue \"[NotNullWhen(true)] doesn't match [MaybeNullWhen(false)]—bug? Which one is right?\" (#38191)"},{"Id":"483690967","IsPullRequest":false,"CreatedAt":"2019-08-21T23:03:44","Actor":"petrroll","Number":"38190","RawContent":null,"Title":"Nullable analysis doesn't propagate explicit null-check correctly","State":"open","Body":"Nullable analysis doesn't propagate that explicit null check of `a?.b != null` implies `a != null`. It works correctly if explicit null check is replaced with pattern matching.\r\n\r\n**Version Used**: \r\nCurrent release/16.4-preview-1, master a08336, latest Int Preview\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class A\r\n{\r\n    public A a;\r\n}\r\npublic class B : A { }\r\n\r\n#nullable enable\r\npublic class Program\r\n{\r\n    public void foo(A a)\r\n    {\r\n        if (a is B b)\r\n        {\r\n            var bb = b?.a as B;\r\n            if (bb != null)\r\n            {\r\n                _ = b.a.ToString();     // potentially nullable-dereference warning (wrong)\r\n            }\r\n        }\r\n    }\r\n\r\n    public void foo2(A a)\r\n    {\r\n        if (a is B b)\r\n        {\r\n            if (b?.a is B bb)\r\n            {\r\n                _ = b.a.ToString();     // no warning (correct)\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOr see [warnings here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABAzAAmwCZ8BBAWACgBvK/ewg0/CAbioF8q9CSAhfCDL5q+LpSoBiAHYBXADbyIweXHxxpy1dwLFCARgDsVWpQaNCAFnwAzAPZ2AFMwgBKOg1PnzANwgJ8YCD8AF4WADoIAH5Ilih8PnYzb3oASxt8RyDgfABCMLlFd2SUrxTvAH1QiIhwgBU7AGUYBFTpAHNHV1ZvAHpe/AAHO3hpGFSIRQBPfEKlFTgAWhREOBtV6QBjNQB3f2k29sydhDsO4vKxD3pxa4tsa3s7ImcWC88783TM2ujY1PiAmy71Kn3KVTCv3qTRahy6PXM/VmdnwewQBw6mU2dgQCDgmxgIO84nM4g4QA===)\r\n\r\n**Expected Behavior**:\r\n- No warnings in both cases.\r\n\r\n**Actual Behavior**:\r\n- Warning in first case.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38190","RelatedDescription":"Open issue \"Nullable analysis doesn't propagate explicit null-check correctly\" (#38190)"},{"Id":"483589201","IsPullRequest":true,"CreatedAt":"2019-08-21T22:50:08","Actor":"dotnet-bot","Number":"38179","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38179","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38179)"},{"Id":"483684775","IsPullRequest":true,"CreatedAt":"2019-08-21T22:39:46","Actor":"petrroll","Number":"38188","RawContent":null,"Title":"[Based on unmerged] Nullable annotations refactoring helpers & bits and pieces elsewhere","State":"open","Body":"Based on #38166","Url":"https://github.com/dotnet/roslyn/pull/38188","RelatedDescription":"Open PR \"[Based on unmerged] Nullable annotations refactoring helpers & bits and pieces elsewhere\" (#38188)"},{"Id":"483682667","IsPullRequest":true,"CreatedAt":"2019-08-21T22:32:01","Actor":"gafter","Number":"38187","RawContent":null,"Title":"Add infromation to bound nodes for converted tuples and switches to determine if they were target-typed.","State":"open","Body":"Fixes #37193\r\nThese changes are internal only, so no behavioral (test) changes are expected.\r\n","Url":"https://github.com/dotnet/roslyn/pull/38187","RelatedDescription":"Open PR \"Add infromation to bound nodes for converted tuples and switches to determine if they were target-typed.\" (#38187)"},{"Id":"483672546","IsPullRequest":true,"CreatedAt":"2019-08-21T21:59:08","Actor":"jcouv","Number":"38186","RawContent":null,"Title":"Split state for boolean constants","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38124 (`Debug.Assert(false)`)","Url":"https://github.com/dotnet/roslyn/pull/38186","RelatedDescription":"Open PR \"Split state for boolean constants\" (#38186)"},{"Id":"483650979","IsPullRequest":false,"CreatedAt":"2019-08-21T21:03:08","Actor":"scalablecory","Number":"38183","RawContent":null,"Title":"BadImageFormatException when calling Type.GetGenericTypeDefinition","State":"open","Body":"_From @IngvarKofoed on Wednesday, August 21, 2019 10:43:59 AM_\r\n\r\n# General\r\n\r\nVisual Studio 2019, 16.3.0 Preview 2.0\r\ndotnet sdk: 3.0.100-preview8-013656\r\nWindows 10 Enterprise x64, 1803\r\n\r\nIf I run the code below with debugger from Visual Studio, I get this exception:\r\n```\r\nSystem.BadImageFormatException: 'An attempt was made to load a program with an incorrect format. (0x8007000B)'\r\n```\r\n\r\nHere is the code\r\n```\r\nusing System;\r\n\r\nnamespace StrangeError\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            GetResult<Boxed<int>>();\r\n        }\r\n\r\n        private static void GetResult<T>()\r\n            where T : class\r\n        {\r\n            if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Boxed<>))\r\n            {\r\n                throw new NotImplementedException(\"The exceptions happens before this line\");\r\n            }\r\n\r\n            throw new NotImplementedException(\"With the current code, this line is never reached\");\r\n        }\r\n    }\r\n\r\n    public class Boxed<T>\r\n        where T : struct // Works if this constraint is removed\r\n    {\r\n        public Boxed(T value)\r\n        {\r\n            Value = value;\r\n        }\r\n\r\n        public T Value { get; }\r\n\r\n        public bool Equals(Boxed<T>? other) =>\r\n            false; // Implementation is not important, but this method has to be here\r\n\r\n        public override bool Equals(object? obj) =>\r\n            // false; Works if this is returned\r\n            // true; Works if this is returned\r\n            Equals(obj as Boxed<T>);\r\n\r\n        public override int GetHashCode() =>\r\n            Value.GetHashCode();\r\n    }\r\n}\r\n```\r\n\r\nIt seems to be something with the `Equals` method, because it has to make a call to the specific `Equals` method. Also removing the generic type constraint on `Boxed` also make the code work again.\r\n\r\nAnd here is the project config. \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>8.0</LangVersion>\r\n    <Nullable>enable</Nullable>\r\n    <NullableContextOptions>enable</NullableContextOptions>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nThe code do not throw the `BadImageFormatException` if I remove the `Nullable` and `NullableContextOptions` elements.\r\n\r\nJust let me know if you need any other informations :)\r\n\r\nEDIT:\r\nImplementing the `Equals` method this way make the code run as expected.\r\n```\r\npublic override bool Equals(object? obj)\r\n{\r\n    if (obj is Boxed<T> boxed)\r\n    {\r\n        return Equals(boxed.Value, Value);\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n_Copied from original issue: dotnet/core#3225_","Url":"https://github.com/dotnet/roslyn/issues/38183","RelatedDescription":"Open issue \"BadImageFormatException when calling Type.GetGenericTypeDefinition\" (#38183)"},{"Id":"483614500","IsPullRequest":true,"CreatedAt":"2019-08-21T19:39:46","Actor":"gafter","Number":"38182","RawContent":null,"Title":"Fix problems caused by hidden sequence point when a switch expression is a closure scope","State":"open","Body":"Trial approach to fixing problems caused by hidden sequence point when a switch expression is a closure scope.  I've added a failing test to demonstrate that this approach is not quite correct.\r\n\r\n* Compiler shouldn't emit hidden sequence points on display class creation instruction in expression context\r\nFixes #37237\r\n\r\n* Compiler emits incorrect EnC closure data to PDB for nested switch expressions\r\nFixes #37232\r\n\r\n* Expression bodied method whose expression is a switch expression is missing debug info\r\nFixes #37261\r\n","Url":"https://github.com/dotnet/roslyn/pull/38182","RelatedDescription":"Open PR \"Fix problems caused by hidden sequence point when a switch expression is a closure scope\" (#38182)"},{"Id":"483611822","IsPullRequest":false,"CreatedAt":"2019-08-21T19:33:21","Actor":"ivanbasov","Number":"38181","RawContent":null,"Title":"provide signature help for local functions inside static method","State":"open","Body":"The following scenario is not working:\r\n\r\n```\r\n   public async Task TestLocalFunctionInStaticMethod() \r\n         { \r\n             var markup = @\" \r\n class C \r\n { \r\n     static void M() \r\n     { \r\n         void Local() { } \r\n  \r\n         Local($$); \r\n     } \r\n }\"; \r\n  \r\n             var expectedOrderedItems = new List<SignatureHelpTestItem> { new SignatureHelpTestItem(\"void Local()\") }; \r\n  \r\n             await TestAsync(markup, expectedOrderedItems); \r\n         } \r\n```\r\n\r\nHere is the discussion: https://github.com/dotnet/roslyn/issues/38074#issuecomment-522800766\r\n\r\nIt seems that the issue is in the semantic model. We need to use \r\nhttps://github.com/dotnet/roslyn/blob/5551fad9651b91dcc64a965cfd93e1da4f386273/src/Features/CSharp/Portable/SignatureHelp/InvocationExpressionSignatureHelpProvider_MethodGroup.cs#L56-L60\r\n\r\n`RequiresInstanceReceiver` instead of `!IsStatic` but it is unavailable. See https://github.com/dotnet/roslyn/pull/38117#issuecomment-523613605\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38181","RelatedDescription":"Open issue \"provide signature help for local functions inside static method\" (#38181)"},{"Id":"483607559","IsPullRequest":false,"CreatedAt":"2019-08-21T19:23:11","Actor":"sharwell","Number":"38180","RawContent":null,"Title":"Remove non-fatal watson for analyzer errors","State":"open","Body":"Analyzer errors (and analyzer driver errors) should be reported as AD0001 (or similar), and not produce a non-fatal watson. The NFW reporting process can hang the IDE process leaving the user unable to recover from an analyzer failure, even to the point of determining that the failure location was within an analyzer.","Url":"https://github.com/dotnet/roslyn/issues/38180","RelatedDescription":"Open issue \"Remove non-fatal watson for analyzer errors\" (#38180)"},{"Id":"483586937","IsPullRequest":false,"CreatedAt":"2019-08-21T18:37:49","Actor":"AlgorithmsAreCool","Number":"38178","RawContent":null,"Title":"\"Add null check\" adds unreachable null check","State":"open","Body":"**Version Used**: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\npublic static class MonadicNullable\r\n{\r\n    public static U? Apply<T, U>(this T? nullable, Func<T, U> applicator)\r\n        where T : struct\r\n        where U : struct\r\n    {\r\n        if (nullable is null)\r\n            return null;\r\n        else\r\n            return applicator(nullable.Value);\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\n```csharp\r\npublic static U? Apply<T, U>(this T? nullable, Func<T, U> applicator)\r\n    where T : struct\r\n    where U : struct\r\n{\r\n    if (applicator is null)\r\n        throw new ArgumentNullException(nameof(applicator));\r\n\r\n    if (nullable is null)\r\n        return null;\r\n    else\r\n        return applicator(nullable.Value);    \r\n}\r\n```\r\n**Actual Behavior**:\r\n```csharp\r\npublic static U? Apply<T, U>(this T? nullable, Func<T, U> applicator)\r\n    where T : struct\r\n    where U : struct\r\n{\r\n    if (nullable is null)\r\n        return null;\r\n    else\r\n        return applicator(nullable.Value);\r\n    if (applicator is null) //CS1062 : Unreachable code detected\r\n        throw new ArgumentNullException(nameof(applicator));\r\n}\r\n```\r\nThe added null check has 2 issues\r\n1. It is placed on a dead branch of code \r\n2. It is paced after the argument has already been dereferenced.\r\n\r\nSee also #38093 ","Url":"https://github.com/dotnet/roslyn/issues/38178","RelatedDescription":"Open issue \"\"Add null check\" adds unreachable null check\" (#38178)"},{"Id":"483584304","IsPullRequest":true,"CreatedAt":"2019-08-21T18:33:31","Actor":"svick","Number":"38177","RawContent":null,"Title":"Prevent static local functions from capturing local functions","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38129.\r\n\r\nAlso fixes a typo in a comment that I found when looking for tests that check for CS8421.","Url":"https://github.com/dotnet/roslyn/pull/38177","RelatedDescription":"Open PR \"Prevent static local functions from capturing local functions\" (#38177)"},{"Id":"483579033","IsPullRequest":true,"CreatedAt":"2019-08-21T18:24:07","Actor":"AlekseyTs","Number":"38176","RawContent":null,"Title":"VB: Add tests for consuming operators defined within interfaces.","State":"open","Body":"Closes #35998. Closes #35999.","Url":"https://github.com/dotnet/roslyn/pull/38176","RelatedDescription":"Open PR \"VB: Add tests for consuming operators defined within interfaces.\" (#38176)"},{"Id":"483557353","IsPullRequest":true,"CreatedAt":"2019-08-21T17:41:04","Actor":"genlu","Number":"38175","RawContent":null,"Title":"Revert \"Revert \"Adding Null Checks For All Parameters\"\"","State":"open","Body":"This reverts the PR https://github.com/dotnet/roslyn/pull/38049, therefore adds back the new \"Adding Null Checks For All Parameters\" for 16.4.\r\n\r\n@dotnet/roslyn-ide ","Url":"https://github.com/dotnet/roslyn/pull/38175","RelatedDescription":"Open PR \"Revert \"Revert \"Adding Null Checks For All Parameters\"\"\" (#38175)"},{"Id":"483521432","IsPullRequest":true,"CreatedAt":"2019-08-21T16:20:46","Actor":"jaredpar","Number":"38174","RawContent":null,"Title":"Enable source link validation","State":"open","Body":"This fixes our official build so that we can participate in source link validation. Here is an official build validating the changes.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2961341&view=results","Url":"https://github.com/dotnet/roslyn/pull/38174","RelatedDescription":"Open PR \"Enable source link validation\" (#38174)"},{"Id":"483391607","IsPullRequest":false,"CreatedAt":"2019-08-21T12:30:26","Actor":"TessenR","Number":"38173","RawContent":null,"Title":"Roslyn doens't verify inferred nullability of variables passed in delegate constructors","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nbranch: release/dev16.4-preview1\r\n\r\ncommit aef5f7afb9208964afe7d0a2b4536b735649b347 (HEAD -> release/dev16.4-preview1, origin/release/dev16.4-preview1)\r\nMerge: 7c5e8fdf0b c4895b82cd\r\nAuthor: Petr Hou<C5><A1>ka <t-pehouk@microsoft.com>\r\nDate:   Tue Aug 20 23:33:36 2019 -0700\r\n\r\n    Merge pull request #37884 from petrroll/move-refa-to-helpers6\r\n\r\n    Move some ComputeRefactoringsAsync to common helpers 6/n\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  static void Main()\r\n  {\r\n      M1(\"\");\r\n  }\r\n  static void M1(string? s)\r\n  {\r\n    if (s == null) return;\r\n\r\n    hell:\r\n    var d1 = GetD(s);\r\n    var d2 = new D<string>(d1);\r\n    d2().ToString();\r\n    s = null;\r\n    goto hell;\r\n  }\r\n\r\n  static D<T> GetD<T>(T t) => () => t;\r\n}\r\n\r\ndelegate T D<T>();\r\n```\r\n\r\n**Expected Behavior**:\r\n` CS8621: Nullability of reference types in return type of 'string? D<string?>.Invoke()' doesn't match the target delegate 'D<string>'.` for `new D<string>(d1)`\r\n\r\n**Actual Behavior**:\r\nNo warnings are reported. The program crashes at runtime with a `NullReferenceException`","Url":"https://github.com/dotnet/roslyn/issues/38173","RelatedDescription":"Open issue \"Roslyn doens't verify inferred nullability of variables passed in delegate constructors\" (#38173)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"483723262","IsPullRequest":true,"CreatedAt":"2019-08-22T01:31:20","Actor":"Dotnet-GitSync-Bot","Number":"7719","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7719","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7719)"},{"Id":"483603606","IsPullRequest":true,"CreatedAt":"2019-08-21T19:14:00","Actor":"trylek","Number":"7718","RawContent":null,"Title":"CPAOT support for inlined PInvokes","State":"open","Body":"This change adds previously missing implementation of two JIT\r\ninterface methods dealing with inlined PInvokes -\r\ngetAddressOfPinvokeTarget and pInvokeMarshalingRequired.\r\n\r\nFor the MethodRequiresMarshaling check I used the same technique\r\nJanK recommended before for IsManagedSequential - I added an extra\r\ninstrumentation to Crossgen and CPAOT to capture PInvoke methods\r\nand the result of the marshaling check; with this change there are\r\n0 differences in the Pri#1 CoreCLR test suite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7718","RelatedDescription":"Open PR \"CPAOT support for inlined PInvokes\" (#7718)"},{"Id":"482938018","IsPullRequest":true,"CreatedAt":"2019-08-21T15:45:35","Actor":"MichalStrehovsky","Number":"7712","RawContent":null,"Title":"Tweaks to ContainsTypeLayout","State":"closed","Body":"Fixes a bucket of CPAOT failures related to layout mismatch between the compiler and the runtime. We were incorrectly considering reference typed fields when determining whether type layout crosses version bubble.\r\n\r\nReference types are a single pointer wide and their layout doesn't matter. Switching between type being a reference type and valuetype is an IL-breaking change and as such it's okay to break R2R too.\r\n\r\nWhile I was at this, I saw a couple other bugs I fixed:\r\n* Value types were considered always within the version bubble, no matter what module defines them.\r\n* We were not looking at `NonVersionableAttribute` (needed to get e.g. `Nullable` fields right).\r\n* Type instantiation was taken into account but it's unrelated to layout.\r\n* Deleted the recursion protection. I assume this was only added because we were recursing into reference types.\r\n* Nit: `IsLiteral` and `HasRva` was redundant with the `IsStatic` check, and so was the `IsByRefLike` with `IsValueType`","Url":"https://github.com/dotnet/corert/pull/7712","RelatedDescription":"Closed or merged PR \"Tweaks to ContainsTypeLayout\" (#7712)"},{"Id":"483449139","IsPullRequest":true,"CreatedAt":"2019-08-21T15:45:03","Actor":"MichalStrehovsky","Number":"7717","RawContent":null,"Title":"Extend token remapping","State":"closed","Body":"I missed that `resolveToken` is not the only place where we record tokens in CPAOT. We also do it in other places.\r\n\r\nI moved the logic that does token remapping for synthetic method bodies to `HandleModuleToken` to have it in a central location and made sure that I got all the places that touch `.token` this time.\r\n\r\n`constructStringLiteral` might end up needing token remapping too at some point so for now I just put an assert in place so that we don't end up chasing wild tokens if/when that happens.\r\n\r\nUnrelated, I also fixed the Interlocked intrinsics not to be per instantiation (they don't need anything special for their `T`). ","Url":"https://github.com/dotnet/corert/pull/7717","RelatedDescription":"Closed or merged PR \"Extend token remapping\" (#7717)"},{"Id":"483130000","IsPullRequest":false,"CreatedAt":"2019-08-21T07:19:48","Actor":"F-Unction","Number":"7714","RawContent":null,"Title":"Can't Use System.CodeDom NuGet Pakeage","State":"closed","Body":"The release was successful, but when I run the program, a message box \"Unknown Hard Errorr\" pops up, the program displays\r\n\"Unhandled Exception: System.PlatformNotSupportedException: Operation is not supp\r\nOrted on this platform.\r\n    At Microsoft.CSharp.CSharpCodeGenerator.FromFileBatch(CompilerParameters, Str\r\nIng[]) + 0x24\r\n    At Microsoft.CSharp.CSharpCodeGenerator.System.CodeDom.Compiler.ICodeCompiler\r\n.CompileAssemblyFromSourceBatch(CompilerParameters, String[]) + 0x1f\r\n    At CodeDomTest.Program.run(String) + 0x1af\r\n    At CodeDomTest.Program.Main(String[]) + 0x20\r\n    At CodeDomTest!<BaseAddress>+0x204e40\"\r\n(Sorry, I don't know English, so I may have some syntax errors when I use Google Translate)","Url":"https://github.com/dotnet/corert/issues/7714","RelatedDescription":"Closed issue \"Can't Use System.CodeDom NuGet Pakeage\" (#7714)"},{"Id":"483178981","IsPullRequest":true,"CreatedAt":"2019-08-21T03:23:51","Actor":"Lucina","Number":"7716","RawContent":null,"Title":"Add .vsconfig and script","State":"open","Body":"Added a .vsconfig file with dependencies for Visual Studio 2019 Preview (Windows 10 SDK, MSBuild with its dependencies, and `MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22)` aka `Microsoft.VisualStudio.Component.VC.Tools.x86.x64`), minimum requirement for building with `buildscripts/build.cmd`.\r\nAdded a script at `buildscripts/install-reqs-vs2019preview.cmd` that depends on Visual Studio 2019 Preview and vs_installer.exe being installed at `%ProgramFiles(x86)%\\Microsoft Visual Studio`.\r\nCloses #7417 ","Url":"https://github.com/dotnet/corert/pull/7716","RelatedDescription":"Open PR \"Add .vsconfig and script\" (#7716)"},{"Id":"483142963","IsPullRequest":false,"CreatedAt":"2019-08-21T00:33:04","Actor":"sergiy-k","Number":"7715","RawContent":null,"Title":"ReadyToRun tests do not run in CI jobs on Linux","State":"open","Body":"We do have a job that attempts to run the ReadyToRun tests on Linux and MacOS but it does not execute any test cases. The output from such a test run looks like this:\r\n\r\nGRAND TOTAL: 0          0          0           0        0.000s (2.564s)","Url":"https://github.com/dotnet/corert/issues/7715","RelatedDescription":"Open issue \"ReadyToRun tests do not run in CI jobs on Linux\" (#7715)"},{"Id":"483039261","IsPullRequest":true,"CreatedAt":"2019-08-20T20:42:43","Actor":"Dotnet-GitSync-Bot","Number":"7713","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7713","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7713)"},{"Id":"482724353","IsPullRequest":true,"CreatedAt":"2019-08-20T19:08:08","Actor":"MichalStrehovsky","Number":"7709","RawContent":null,"Title":"Bind to S.P.CoreLib by default","State":"closed","Body":"When I was doing size investigations for CPAOT/.NET 5 two weeks ago, the reflection method body scanner was crashing when IL Linker decided to trim mscorlib. I worked around by just copying mscorlib back and brushed it off as a Linker bug (that I forgot to file).\r\n\r\nNow a similar issue was reported in #7679 which prompted me to look how CoreCLR does `Type.GetType` binding when type name is not assembly-qualified. Seems like we were trying to be more compatible with desktop CLR than CoreCLR.\r\n\r\nSince CoreCLR doesn't care about types in mscorlib that don't live in S.P.CoreLib, neither needs CPAOT.","Url":"https://github.com/dotnet/corert/pull/7709","RelatedDescription":"Closed or merged PR \"Bind to S.P.CoreLib by default\" (#7709)"},{"Id":"482910472","IsPullRequest":true,"CreatedAt":"2019-08-20T14:53:29","Actor":"Dotnet-GitSync-Bot","Number":"7711","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7711","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7711)"},{"Id":"482495794","IsPullRequest":true,"CreatedAt":"2019-08-20T10:41:03","Actor":"trylek","Number":"7707","RawContent":null,"Title":"Two small improvements in SuperIlc","State":"closed","Body":"1) Add support for another CPAOT vs. Crossgen instrumentation dealing\r\nwith the check MethodRequiresMarshaling used for inlining PInvokes.\r\n\r\n2) Include output file name extension in compiler log and response\r\nfile path - there are several Pri#1 tests that include an exe and\r\ndll pair with the same name. These had previously clashing response\r\nand log file names, causing weird race conditions in parallel build.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7707","RelatedDescription":"Closed or merged PR \"Two small improvements in SuperIlc\" (#7707)"},{"Id":"482737221","IsPullRequest":true,"CreatedAt":"2019-08-20T09:07:19","Actor":"MichalStrehovsky","Number":"7710","RawContent":null,"Title":"Validate types referenced from IL","State":"open","Body":"Fixes one of the CPAOT failure buckets for some of the negative generics tests (`Loader\\classloader\\generics\\Instantiation\\Negative\\param02`).\r\n\r\nWe should not be able to generate code for a generic type that is instantiated with a wrong arity or CoreCLR will hit internal errors.","Url":"https://github.com/dotnet/corert/pull/7710","RelatedDescription":"Open PR \"Validate types referenced from IL\" (#7710)"},{"Id":"482594333","IsPullRequest":true,"CreatedAt":"2019-08-20T02:19:33","Actor":"Dotnet-GitSync-Bot","Number":"7708","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @madmir","Url":"https://github.com/dotnet/corert/pull/7708","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7708)"},{"Id":"481593799","IsPullRequest":true,"CreatedAt":"2019-08-19T15:30:16","Actor":"MichalStrehovsky","Number":"7700","RawContent":null,"Title":"Implement getILIntrinsicImplementation and friends","State":"closed","Body":"This ports a couple handcrafted IL intrinsics from CoreCLR (some of which are required for correctness and some only for perf). See code around getILIntrinsicImplementation in CoreCLR's JitInterface.\r\n\r\nThis is needed to be able to compile an actually working 3.0 R2R CoreLib.\r\n\r\nI've used CoreRT's `ILProvider` instead of handcrafting buffers with IL bytes like crossgen does. It's more comfortable on the generation side and it also lets us share the provider for `Unsafe` intrinsics with what we already wrote for full AOT. But we need to fix up tokens in the generated IL in JitInterface...\r\n\r\nThe `FindGenericMethodArgTypeSpec` also exists in crossgen (under the same name).  It's part of the token rewriting business. It's kind of gross, but it works.","Url":"https://github.com/dotnet/corert/pull/7700","RelatedDescription":"Closed or merged PR \"Implement getILIntrinsicImplementation and friends\" (#7700)"},{"Id":"482089932","IsPullRequest":false,"CreatedAt":"2019-08-19T06:40:24","Actor":"maikebing","Number":"7706","RawContent":null,"Title":"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?","State":"closed","Body":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n","Url":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Closed issue \"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?\" (#7706)"},{"Id":"481966265","IsPullRequest":true,"CreatedAt":"2019-08-18T17:14:39","Actor":"jkotas","Number":"7704","RawContent":null,"Title":"Account for .NET Core 3.0 Preview 8 SDK changes","State":"closed","Body":"Fixes #7703","Url":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Closed or merged PR \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704)"},{"Id":"481901315","IsPullRequest":false,"CreatedAt":"2019-08-18T17:14:39","Actor":"SomeAnon42","Number":"7703","RawContent":null,"Title":"dotnet publish is broken by a preview 8 SDK change","State":"closed","Body":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)","Url":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Closed issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703)"},{"Id":"481966894","IsPullRequest":true,"CreatedAt":"2019-08-18T09:51:55","Actor":"Dotnet-GitSync-Bot","Number":"7705","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7705)"},{"Id":"481877106","IsPullRequest":true,"CreatedAt":"2019-08-18T08:04:03","Actor":"Dotnet-GitSync-Bot","Number":"7702","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7702)"},{"Id":"481699348","IsPullRequest":true,"CreatedAt":"2019-08-16T19:09:38","Actor":"Dotnet-GitSync-Bot","Number":"7701","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7701","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7701)"},{"Id":"480667183","IsPullRequest":true,"CreatedAt":"2019-08-15T18:29:56","Actor":"MichalStrehovsky","Number":"7693","RawContent":null,"Title":"Match PE headers with Crossgen","State":"closed","Body":"Some of these look important. Others I only did for completeness and I don't think they matter much.","Url":"https://github.com/dotnet/corert/pull/7693","RelatedDescription":"Closed or merged PR \"Match PE headers with Crossgen\" (#7693)"},{"Id":"481147068","IsPullRequest":true,"CreatedAt":"2019-08-15T16:03:55","Actor":"MichalStrehovsky","Number":"7697","RawContent":null,"Title":"Remove rdata section","State":"closed","Body":"To align with crossgen and save up to 4 kB in file size (less section padding).","Url":"https://github.com/dotnet/corert/pull/7697","RelatedDescription":"Closed or merged PR \"Remove rdata section\" (#7697)"},{"Id":"481213555","IsPullRequest":false,"CreatedAt":"2019-08-15T15:44:53","Actor":"developervariety","Number":"7699","RawContent":null,"Title":"Linux: No input file","State":"open","Body":"![ubuntu_iMCjVX1XZj](https://user-images.githubusercontent.com/47051828/63106951-f5e20f80-bf51-11e9-97aa-0f1d2e677b21.png)\r\n\r\nI compiled with WSL yesterday on Ubuntu 18.04, and when it finished compiling I installed the package. I got nothing really from it, just aborted a second later.","Url":"https://github.com/dotnet/corert/issues/7699","RelatedDescription":"Open issue \"Linux: No input file\" (#7699)"},{"Id":"481128438","IsPullRequest":true,"CreatedAt":"2019-08-15T14:20:30","Actor":"Dotnet-GitSync-Bot","Number":"7696","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7696","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7696)"},{"Id":"481157926","IsPullRequest":false,"CreatedAt":"2019-08-15T13:45:01","Actor":"gtbuchanan","Number":"7698","RawContent":null,"Title":"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition","State":"open","Body":"I have a UWP app (`Ewn.Mobile.UWP`) I have been unsuccessfully trying to build in release mode with .NET Native for weeks now. Many of my issues seem to be stemming from a lack of a 64-bit version of ILC. However, I've gotten to a point where I at least don't get an `OutOfMemoryException`. As mentioned in #5905 and https://github.com/dotnet/reactive/issues/899, I've implemented the following compiler flags in my csproj:\r\n\r\n```xml\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n```\r\n\r\nHowever, I receive the following error during compilation related to one of our internal NuGet packages:\r\n\r\n### ilclog.csv\r\n```csv\r\n\"Message\",Low,\"D:\\a\\1\\s\\src\\Ewn.Extensions\\CollectionExtensions.cs(0) : fatal error N1205: 'static System.__UniversalCanon Ewn.Extensions.CollectionExtensions.AddTo<System.__UniversalCanon, System.__UniversalCanon>(System.__UniversalCanon, System.Collections.Generic.ICollection`1<System.__UniversalCanon>)' : Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\"\r\n\"Error\",,0,0,\"ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools64\\nutc_driver.exe @\"\"C:\\Users\\taylor\\Desktop\\ewn-main\\src\\Ewn.Mobile.UWP\\obj\\x86\\Dev\\ilc\\intermediate\\MDIL\\Ewn.Mobile.UWP.rsp\"\"' returned exit code 1\"\r\n\"Message\",Low,\"Done executing task \"\"GenerateMDILGlobalAnalysis\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building target \"\"GenerateMDILGlobalAnalysis\"\" in file \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building project \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Compilation failed\"\r\n```\r\n\r\n### Ewn.Extensions.CollectionExtensions.AddTo\r\n```csharp\r\npublic static T1 AddTo<T1, T2>([NotNull]this T1 @this, ICollection<T2> collection)\r\n    where T1 : T2\r\n{\r\n    collection.Add(@this);\r\n    return @this;\r\n}\r\n```\r\n\r\nI honestly have no idea what could be causing this since the method is pretty basic. Do you think this is a bug or is there something I'm missing?","Url":"https://github.com/dotnet/corert/issues/7698","RelatedDescription":"Open issue \"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\" (#7698)"},{"Id":"480667050","IsPullRequest":true,"CreatedAt":"2019-08-15T05:19:28","Actor":"MichalStrehovsky","Number":"7692","RawContent":null,"Title":"Generate more efficient sigs for READYTORUN_FIXUP_MethodEntry","State":"closed","Body":"The specialized `DefToken`/`RefToken` sigs save a byte.","Url":"https://github.com/dotnet/corert/pull/7692","RelatedDescription":"Closed or merged PR \"Generate more efficient sigs for READYTORUN_FIXUP_MethodEntry\" (#7692)"},{"Id":"480666827","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:53","Actor":"MichalStrehovsky","Number":"7690","RawContent":null,"Title":"Use CORINFO_VIRTUALCALL_STUB for virtual methods","State":"closed","Body":"Crossgen does the same thing.\r\n\r\nAlso deleting `ReadyToRunHelperId.VirtualEntry` because the constant was used in one spot, and we didn't handle it anywhere else (leading to compilation failures because the rest of the code couldn't handle it).","Url":"https://github.com/dotnet/corert/pull/7690","RelatedDescription":"Closed or merged PR \"Use CORINFO_VIRTUALCALL_STUB for virtual methods\" (#7690)"},{"Id":"480666928","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:40","Actor":"MichalStrehovsky","Number":"7691","RawContent":null,"Title":"Generate ReJit NOPs","State":"closed","Body":"Crossgen sets this flag and so I assume should we.","Url":"https://github.com/dotnet/corert/pull/7691","RelatedDescription":"Closed or merged PR \"Generate ReJit NOPs\" (#7691)"},{"Id":"480667354","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:28","Actor":"MichalStrehovsky","Number":"7694","RawContent":null,"Title":"Generate resource directory entry","State":"closed","Body":"R2RPEBuilder goes through lengths to restore .rsrc section, but drops the directory entry, making resources not actually work E2E.","Url":"https://github.com/dotnet/corert/pull/7694","RelatedDescription":"Closed or merged PR \"Generate resource directory entry\" (#7694)"},{"Id":"480784878","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:16","Actor":"Dotnet-GitSync-Bot","Number":"7695","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7695","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7695)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"483123322","IsPullRequest":true,"CreatedAt":"2019-08-22T05:23:28","Actor":"dotnet-maestro[bot]","Number":"3554","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190821.20\r\n- **Date Produced**: 8/22/2019 2:44 AM\r\n- **Commit**: 33c773a5c7602e599053fdbb3a12b7ecfda27e2e\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19421-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3554","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3554)"},{"Id":"483687538","IsPullRequest":true,"CreatedAt":"2019-08-22T02:02:13","Actor":"dsplaisted","Number":"3560","RawContent":null,"Title":"Support more test config options","State":"closed","Body":"#### Description\r\nAdd more support for specifying tests to run via test config file\r\n\r\n#### Customer Impact\r\nNo direct customer impact, this is a test infrastructure change\r\n\r\n#### Regression?\r\nNo\r\n\r\n#### Risk\r\nLow\r\n\r\nAdds more options for controlling which tests are run.\r\n\r\n- Multiple test config files can be specified (via `-testConfig` or `-testConfigFile`)\r\n- Test config files can have named test lists\r\n- One or more test lists to run can be specified via `-testList` on the command line\r\n- Tests can be specified in test config by method, class, or namespace\r\n- Tests to skip can be put in a `SkippedTests` element in the test config file\r\n\r\nThis should help apply the SDK test assets to other repos, as it will be easier to start by specifying a small set of tests to run instead of trying to skip or fix all the failing tests.  It also may help if we want to have inner / outer loop tests.\r\n\r\nA sample test config file showing the different options:\r\n\r\n```xml\r\n<Tests>\r\n\r\n  <TestList Name=\"BasicBuildTests\">\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetCoreApp.It_runs_the_app_from_the_output_folder\" />\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library\" />\r\n  </TestList>\r\n\r\n  <TestList Name=\"MoreBuildTests\">\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToSetPropertiesInDirectoryBuildProps\" />\r\n  </TestList>\r\n  \r\n  <SkippedTests>\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_resolves_assembly_conflicts\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n  </SkippedTests>\r\n\r\n  <TestList Name=\"TestList1\">\r\n    <Method Name=\"MyNamespace.MyClass.MyTestName\" />\r\n    <Class Name=\"MyNamespace.MyClass\" />\r\n  </TestList>\r\n\r\n  <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_builds_a_netstandard2_library_successfully\"\r\n            Skip=\"true\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n\r\n</Tests>\r\n```","Url":"https://github.com/dotnet/sdk/pull/3560","RelatedDescription":"Closed or merged PR \"Support more test config options\" (#3560)"},{"Id":"483627407","IsPullRequest":true,"CreatedAt":"2019-08-21T23:40:15","Actor":"nguerrera","Number":"3558","RawContent":null,"Title":"Merge 3.0.1xx to 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3558","RelatedDescription":"Closed or merged PR \"Merge 3.0.1xx to 3.1.1xx\" (#3558)"},{"Id":"483670137","IsPullRequest":true,"CreatedAt":"2019-08-21T21:51:48","Actor":"livarcocc","Number":"3559","RawContent":null,"Title":"Updating nuget version and adding it to Version.Details.xml for DARC updates.","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3559","RelatedDescription":"Open PR \"Updating nuget version and adding it to Version.Details.xml for DARC updates.\" (#3559)"},{"Id":"483477457","IsPullRequest":true,"CreatedAt":"2019-08-21T16:59:23","Actor":"dotnet-maestro[bot]","Number":"3557","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b934a83-c671-49a8-a874-08d7219800a1)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 12:53 PM\r\n- **Commit**: 7aa107d818fe87e627154c0331d6de5d47f39a45\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19421.1\r\n\r\n[marker]: <> (End:2b934a83-c671-49a8-a874-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3557","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/arcade\" (#3557)"},{"Id":"483378528","IsPullRequest":true,"CreatedAt":"2019-08-21T14:03:53","Actor":"dotnet-maestro[bot]","Number":"3555","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3555","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3555)"},{"Id":"483394306","IsPullRequest":true,"CreatedAt":"2019-08-21T12:35:55","Actor":"dotnet-maestro[bot]","Number":"3556","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190820.08\r\n- **Date Produced**: 8/20/2019 11:23 PM\r\n- **Commit**: f385116c74c1513e7e241f0586675486e9b25115\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19420-08\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3556","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3556)"},{"Id":"483019108","IsPullRequest":true,"CreatedAt":"2019-08-20T18:38:20","Actor":"livarcocc","Number":"3552","RawContent":null,"Title":"Update the branding on release/3.0.1xx to rc1.","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3552","RelatedDescription":"Open PR \"Update the branding on release/3.0.1xx to rc1.\" (#3552)"},{"Id":"481332983","IsPullRequest":true,"CreatedAt":"2019-08-20T18:34:56","Actor":"vitek-karas","Number":"3542","RawContent":null,"Title":"Allow specifying RollForward with Major/LatestMajor on all apps","State":"closed","Body":"#### Description\r\ndotnet/cli#12257 - SDK doesn't allow usage of `RollForward` property in `2.*` apps. This complicates creation of tools which are supposed to run across major versions. Typically applies to .NET global tools.\r\n\r\nCurrently SDK explicitly blocks usage of `RollForward` msbuild property in projects targeting .NET Core `2.*`. Such a limitation makes sense for restrictive settings of this property (like `Disable` or `LatestPatch`) as usage of those could lead to unexpected behavioral changes when .NET 3.0 is installed on the machine. But there's no good reason to block the more relaxing values `Major` and `LatestMajor`. The fix is to change the explicit block to allow `Major` and `LatestMajor` settings even in `2.*` projects, while keep on failing for the more restrictive values (everything else).\r\nThe `RollForward` property has no effect on machines with `2.*` only runtimes. It works for all apps (regardless of version) once .NET Core 3.0 is installed on the machine.\r\n\r\n#### Customer Impact\r\n.NET Core Tools are a feature enabled as part of .NET Core 2.1. They are similar to libraries in that they are delivered by NuGet but differ in that they are bound to a specific runtime version. If a compatible runtime version is not found, the tools fail to run, with an appropriate error message. \r\n \r\nWe initially gave guidance to multi-target tools to enable running 2.x tools on 3.0 only machine. After some discussion, we decided that this guidance wasn’t acceptable as the singular answer and funded the runtime binding feature (AKA Roll Forward). The goal was to enable 2.x apps to participate in major version roll-forward but not any of the other policies that are 3.x only. The SDK currently prevents this.\r\n \r\nWe need to enable the major version roll-forward scenario for 2.x apps and tools by making the error state more surgical. Otherwise, we’ll need to go back to the initial multi-targeting guidance or tell tools writers to use a `.runtimeconfig.template`. The template idea would work, but is a very unfortunate workaround for what was intended to be a mainline scenario.\r\n\r\n#### Regression?\r\nNo - the roll forward feature is new in 3.0.\r\n\t\t\r\n#### Risk\r\nVery small - the `RollForward` msbuild property is new in 3.0 SDK, so its usage is almost certainly intentional. Affected scenarios were failing early (during build), after the fix they are going to work.","Url":"https://github.com/dotnet/sdk/pull/3542","RelatedDescription":"Closed or merged PR \"Allow specifying RollForward with Major/LatestMajor on all apps\" (#3542)"},{"Id":"482818597","IsPullRequest":true,"CreatedAt":"2019-08-20T13:33:07","Actor":"dotnet-maestro[bot]","Number":"3550","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3550","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3550)"},{"Id":"482825643","IsPullRequest":false,"CreatedAt":"2019-08-20T11:48:19","Actor":"largwid","Number":"3551","RawContent":null,"Title":"$(IntermediateOutputPath) and $(TargetName) evaluates blank while setting up a PropertyGroup in CSproj SDK-format","State":"open","Body":"**Visual Studio Version**: v15.9.15\r\n\r\n**Summary**:\r\nTrying to migrate csproj's to the New SKD project-format, in a complex .NET solution with multiple target files called during the build. The targets calling $(IntermediateOutputPath) and $(TargetName) works, but after migration the macro returns empty\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In Csproj file add a PropertyGroup with the following:\r\n\r\n```\r\n <PropertyGroup>\r\n    <ProjectIntermediateOutput>$(IntermediateOutputPath)</ProjectIntermediateOutput>\r\n </PropertyGroup>\r\n\r\n<Target Name=\"MyProp\" AfterTarget=\"CoreCompile\">\r\n   <Message Text=\"Project intermediate path : $(ProjectIntermediateOutput)\" />\r\n<Target\r\n\r\n```\r\nThe run msbuild on project(solution). \r\n \r\n\r\nIn the build output I expected to see a line:\r\n`\r\nProject intermediate path : obj\\debug\\net472\r\n`\r\nbut gets:\r\n`\r\nProject intermediate path :\r\n`\r\n\r\nIf I create new projects via the \"New Project\" wizard I get the same behavior in both Old-style projects and .NET SDK projects.\r\n\r\nLooking forward to your inputs.\r\n","Url":"https://github.com/dotnet/sdk/issues/3551","RelatedDescription":"Open issue \"$(IntermediateOutputPath) and $(TargetName) evaluates blank while setting up a PropertyGroup in CSproj SDK-format\" (#3551)"},{"Id":"483046802","IsPullRequest":false,"CreatedAt":"2019-08-20T00:50:06","Actor":"Varorbc","Number":"3553","RawContent":null,"Title":"build and generate package fail","State":"open","Body":"**Version Used**: 3.0.100-preview8-013656\r\n\r\n###  Question 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Directory.Build.props\r\n\r\n```csharp\r\n    <Project>\r\n      <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n```\r\n\r\n2. ClassLibrary1.csproj\r\n\r\n```csharp\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net452</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n3. dotnet build ClassLibrary1.csproj\r\n\r\n**Expected Behavior**: build successful\r\n\r\n**Actual Behavior**:`C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(234,5): error NETSDK1005: 资产文件“C:\\Users\\PC\\Desktop\\ClassLibrary1\\ClassLibrary1\\obj\\project.assets.json”没有“.NETFramework,Version=v4.7.2”的目标。确保已运行还原，且“net472”已包含在项目的 TargetFrameworks 中。 [C:\\Users\\PC\\Desktop\\ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj]`\r\n\r\nPS: build by Visual Studio 16.2.2 is successful\r\n\r\n###  Question 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Directory.Build.props\r\n\r\n```csharp\r\n    <Project>\r\n      <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n```\r\n\r\n2. ClassLibrary1.csproj\r\n\r\n```csharp\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net452;net472</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n3. dotnet build ClassLibrary1.csproj\r\n\r\n**Expected Behavior**: generate package successful\r\n\r\n**Actual Behavior**:build successful but no generate package\r\n\r\nPS: build and generate package  by Visual Studio 16.2.2 is successful\r\n","Url":"https://github.com/dotnet/sdk/issues/3553","RelatedDescription":"Open issue \"build and generate package fail\" (#3553)"},{"Id":"481412493","IsPullRequest":true,"CreatedAt":"2019-08-19T23:27:10","Actor":"dsplaisted","Number":"3543","RawContent":null,"Title":"Fix regression in selecting default RuntimeIdentifier","State":"closed","Body":"#### Description\r\nFixed change in behavior (regression) that was introduced when we started including the RuntimeIdentifier graph in the SDK and passing it to NuGet.\r\n\r\n#### Customer Impact\r\nThe change in behavior had to do with the automatic selection of the PlatformTarget.  In specific cases, the PlatformTarget would be set to x86, where it would have previously been set to AnyCPU.  This is because previously you had to have a (transitive) dependency on the Microsoft.NETCore.Platforms package to get the RuntimeIdentifier graph, and without it, you wouldn't get assets that didn't exactly match the default RuntimeIdentifier (win7-x86).  Since no native assets were found, the PlatformTarget defaulted to AnyCPU, even though if the RuntimeGraph had been available there would have been native assets.\r\n\r\nRoslyn ran into this, their apps switched to x86 unintentionally.  We are not sure how many other customers would be impacted, as the combination of factors necessary to see the behavior change is somewhat of an edge case.\r\n\r\n#### Regression?\r\nYes, regressed with #3406\r\n\r\n#### Risk\r\nLow\r\n\r\nFixes #3495\r\n\r\nI thought of a \"clever\" way to fix this regression.  We revert to the AnyCPU PlatformTarget if:\r\n- There are no native assets\r\n- There are native assets, but the Microsoft.NETCore.Platforms package (which was previously necessary to get the RID graph) is not transitively referenced, and there are no native assets for the exact RID win7-x86.\r\n\r\nThis should match the PlatformTarget which SDKs prior to the 3.0 SDK would have used.","Url":"https://github.com/dotnet/sdk/pull/3543","RelatedDescription":"Closed or merged PR \"Fix regression in selecting default RuntimeIdentifier\" (#3543)"},{"Id":"482540867","IsPullRequest":false,"CreatedAt":"2019-08-19T21:38:27","Actor":"rainersigwald","Number":"3549","RawContent":null,"Title":"End-to-end tests for resx scenarios","State":"open","Body":"There are a variety of resource scenarios that would be well-suited to having small end-to-end tests that build a resource-using project and run it to validate that the resource is handled correctly in the build and available at runtime.\r\n\r\nRelated MSBuild PRs that should be mined for test data: microsoft/msbuild#4607, microsoft/msbuild#4638, microsoft/msbuild#4588, microsoft/msbuild#4637.","Url":"https://github.com/dotnet/sdk/issues/3549","RelatedDescription":"Open issue \"End-to-end tests for resx scenarios\" (#3549)"},{"Id":"480317966","IsPullRequest":true,"CreatedAt":"2019-08-19T20:19:04","Actor":"BenVillalobos","Number":"3533","RawContent":null,"Title":"Opting into dependentupon convention","State":"closed","Body":"### Description\r\n\r\nIn SDK projects and new project system, we have eliminated the need for DependentUpon to make the appropriate file nesting in the IDE tree. However, there is a place where the build actually uses DependentUpon to:\r\n\r\n1. Locate a source file, and _parse (!)_ it to get first class name and namespace\r\n2. Generate .resources accordingly.\r\n\r\nBut people and features in VS rely on this and it has been a consistent source of feedback in moving to .NET Core 3.0. This opts into new behavior to use a convention instead of requiring explicit metadata.\r\n\r\nOriginal issue: https://github.com/microsoft/msbuild/issues/4488\r\n\r\n This change is dependent upon: https://github.com/microsoft/msbuild/pull/4597\r\n\r\n### Customer Impact\r\n\r\nIn a fairly common situation for projects that use resources, avoids the need to specify `DependentUpon` metadata for each resource.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\nAdded `DependentUponTest`. Currently it gets skipped, but this test was verified working on a local machine using a version of MSBuild that had the corresponding fix.\r\n","Url":"https://github.com/dotnet/sdk/pull/3533","RelatedDescription":"Closed or merged PR \"Opting into dependentupon convention\" (#3533)"},{"Id":"482502721","IsPullRequest":false,"CreatedAt":"2019-08-19T20:09:47","Actor":"nguerrera","Number":"3548","RawContent":null,"Title":"Linker cannot remove user non-framework, non-package references from deps file","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3548","RelatedDescription":"Open issue \"Linker cannot remove user non-framework, non-package references from deps file\" (#3548)"},{"Id":"482502349","IsPullRequest":false,"CreatedAt":"2019-08-19T20:08:56","Actor":"nguerrera","Number":"3547","RawContent":null,"Title":"non-embedded comreference does not show up in deps file, throws FileNotFoundException at runtime","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3547","RelatedDescription":"Open issue \"non-embedded comreference does not show up in deps file, throws FileNotFoundException at runtime\" (#3547)"},{"Id":"481879019","IsPullRequest":true,"CreatedAt":"2019-08-17T14:28:45","Actor":"dotnet-maestro[bot]","Number":"3546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3546)"},{"Id":"481657710","IsPullRequest":false,"CreatedAt":"2019-08-16T22:08:55","Actor":"mhsimkin","Number":"3545","RawContent":null,"Title":"NETDSK1005 Error when building solution with two projects","State":"closed","Body":"I'm receiving the infamous:\r\n\r\n>  NETSDK1005: Assets file '...\\obj\\project.assets.json' doesn't have a target for '.NETStandard,Version=v2.0'. Ensure that restore has run and that you have included 'netstandard2.0' in the TargetFrameworks for your project. \r\n\r\nwhen I try to build a solution that contains two projects.  One project is targeting .Net 472 and the other .Net Standard 2.  Both projects use the same physical folder since they are building the same code. \r\n\r\n`Aside: As much as I would like to multi-target in one file, I needed two nupkgs because of the order of precedence of when matching which to my target.`\r\n\r\nI get the same issue whether I use MSBuild, or dotnet from the command line or Visual Studio 2019.  Deleting the projects.assets.json file doesn't resolve the issue.\r\n\r\nI was able to work around the build issue by doing either of the following:\r\n\r\n1. having MSBuild restore and build each project individually.\r\n2. giving each project it's own project folder and then adding all the code as a link in one project. (not feasible- 200+ files/folders involved).\r\n\r\nI have attached a msbuild.log with diagnostics, Solution and Project Files.\r\n\r\n[renapi.zip](https://github.com/dotnet/sdk/files/3510159/renapi.zip)\r\n\r\n[msbuild-build.log](https://github.com/dotnet/sdk/files/3510153/msbuild-build.log)\r\n.\r\n\r\nI would like to get this resolved so that I don't need to use a 4 step process on the build server.\r\n\r\n**Build Environment:**\r\nWindows 10 Pro Build 1809\r\nVisual Studio 2019 Enterprise 16.2.2\r\n.NET Framework 4.7.2 and 4.8 \r\n\r\n**Also Installed, but not used for this build**\r\nVisual Studio 2019 Enterprise Preview 16.3.0 Preview 2\r\n.NET Core 2.2.401 and 3.0.100-preview8-013656\r\n\r\nThanks\r\n\r\n-marc","Url":"https://github.com/dotnet/sdk/issues/3545","RelatedDescription":"Closed issue \"NETDSK1005 Error when building solution with two projects\" (#3545)"},{"Id":"481578086","IsPullRequest":true,"CreatedAt":"2019-08-16T14:48:51","Actor":"dotnet-maestro[bot]","Number":"3544","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3544","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3544)"},{"Id":"481218665","IsPullRequest":false,"CreatedAt":"2019-08-15T15:56:22","Actor":"vitek-karas","Number":"3541","RawContent":null,"Title":"Write framework references for self-contained apps","State":"open","Body":"### Problem\r\nThis is continuation of issue originally described in dotnet/core-setup#7610 and the SDK counterpart to dotnet/core-setup#7732.\r\nWhen the native host loads a .NET Core component into already running .NET Core app, it tries to validate that the component's framework references can be satisfied by the app. In order to do this it needs to know which frameworks the app is using. For framework dependent apps this is trivial as the host knows which frameworks it resolved for the app. For self-contained apps though, there's no information about frameworks.\r\n\r\nCurrently framework dependent console app has `.runtimeconfig.json` like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\":\r\n    [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"3.0.0\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nA self-contained app on the other hand has `.runtimeconfig.json` like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {}\r\n}\r\n```\r\n\r\n### Proposal\r\nWrite the same information even for self-contained apps. The caveat is that framework references should not be written the exact same way otherwise host will think it's a framework dependent application (self-contained apps are recognized through the fact that they have no framework references).\r\n\r\n#### Write the `tfm` property\r\nThis would make self-contained apps behave consistently with framework dependent apps. The TFM is not used widely by the host, but it does come into play in specific cases around additional probe paths and `DOTNET_SHARED_STORE` functionality.\r\n\r\n*Compatibility note: It's not really a breaking change if we start writing the `tfm` property. It does change the behavior of the app slightly, but in order for it to take effect the app has to be rebuilt, so there's an explicit action by the developer.* \r\n\r\n#### Write a new `includedFrameworks` property\r\nFramework references in self-contained apps would be written to a new property `includedFrameworks` which would use the same syntax. It's an array of objects, where each object represents a framework reference. The framework reference must specify its `name` and `version`. Other properties like `rollForward` which are allowed on normal framework references will not be allowed here.\r\n\r\n*Compatibility note: Combined with the changes in the host to consume this property, it will change behavior of apps when trying to load dynamic components. But the change requires a rebuild of the app in question, so it's not a breaking change.*\r\n\r\nThe final `.runtimeconfig.json` would look like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"includedFrameworks\":\r\n    [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"3.0.0\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nNaming is always an interesting question, so `includedFrameworks` is just one option. It could be called `embeddedFrameworks`, `containedFrameworks`, ... other suggestions are very welcome. The name should be somewhat clear about the fact that the framework is part of the app.\r\n\r\n### Impact\r\nThe proposed change makes the `.runtimeconfig.json` bigger for self-contained apps, but the change is tiny (100s of bytes).\r\n\r\nPerformance wise there is some cost to write it in the SDK, but that it very small compared to the rest of the work SDK does. The host has to parse the new information as well, so there's some cost to that, but it doesn't have to process it (just remember) during startup, so the perf impact on startup should be very small.","Url":"https://github.com/dotnet/sdk/issues/3541","RelatedDescription":"Open issue \"Write framework references for self-contained apps\" (#3541)"},{"Id":"480939380","IsPullRequest":true,"CreatedAt":"2019-08-15T00:05:41","Actor":"dotnet-bot","Number":"3540","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3540","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3540)"},{"Id":"480932346","IsPullRequest":true,"CreatedAt":"2019-08-14T23:32:31","Actor":"nguerrera","Number":"3539","RawContent":null,"Title":"Pass well-defined set of managed assemblies to linker and crossgen","State":"open","Body":"### Description\r\n\r\nBoth the linker and crossgen features currently scan the entire set of published files, looking for managed assemblies. This was meant to be temporary and the design was to pass them the set of managed assemblies designated in .deps.json. This was not trivial due to ordering issues so we have been living with the temporary design. This change implements the planned design of passing the true set of managed assemblies.\r\n\r\nThe temporary design is inefficient, there's a first chance exception for every non-dll in the publish set, and can be incorrect in the edge case where there are dlls that are not part of the applications runtime dependencies included as content.\r\n\r\nWhile working on this, bugs related to identifying the correct set of assemblies in the .deps file were fixed. It is difficult to split up the bug fixes as they were done on the foundation of the better design.\r\n\r\nIn total, 4 bugs are fixed.\r\n\r\n1. Fix #3109 -  tracked the correct design that is implemented here\r\n2. Fix #3547 - COMReference with PIA do not show up in .deps file, and therefore do not load. EmbedInteropTypes must be used.\r\n3. Fix #2660 - Project references that are not copy local are incorrectly recorded in .deps file\r\n4. Fix #3548 - linker cannot remove project references or direct file references from deps file\r\n\r\nRelates to a fifth bug, https://github.com/aspnet/AspNetCore/issues/12064 (failure to account for views assembly in linker and crossgen), but a fix for that has been made that does not depend on this one. It includes a future proofing so that it can work with both the existing design and the design implemented here.\r\n\r\n### Customer impact\r\n\r\nThis is primarily about having the planned correct design in place for the long term so that we do not have to support the temporary design indefinitely. It would be rare for an application to publish incorrectly with the temporary design.\r\n\r\nThe second bug has a simple workaround of using No-PIA, but the failure is not obvious.\r\n\r\nThe third bug has been worked around by the runtime. It now tolerates missing assemblies in .deps by default. That was also intended to be temporary so the longer we leave the SDK producing the incorrect .deps file, the longer the runtime will have to support this by default.\r\n\r\nThe fourth bug is benign for now as the linker only removes framework assemblies in this release, but this is expected to change in future releases, and it demonstrates the problem of having the poorer design in place as the foundation for these features evolving.\r\n\r\n### Regression\r\n\r\nNo\r\n\r\n\r\n### Risk\r\n\r\nMedium. The code delta is not too large, but the change is in a tricky part of the code and it took 3 tries to come up with the right approach. More regression testing is still needed, which may take until tomorrow to finish authoring.\r\n","Url":"https://github.com/dotnet/sdk/pull/3539","RelatedDescription":"Open PR \"Pass well-defined set of managed assemblies to linker and crossgen\" (#3539)"},{"Id":"480469377","IsPullRequest":true,"CreatedAt":"2019-08-14T20:29:05","Actor":"livarcocc","Number":"3536","RawContent":null,"Title":"Yaml stages","State":"closed","Body":"#### Description\r\n\r\nThis is a planned change to onboard to yaml stages.\r\n\r\n#### Customer Impact\r\n\r\nInfra-structure change.\r\n\r\n#### Regression?\r\n\r\nNo.\r\n\r\n#### Risk\r\n\r\nLow\r\n\r\n___\r\n\r\ncc @riarenas \r\n\r\nThe first two files are the important ones. The rest is an arcade update.\r\n\r\nExample stages build: https://dnceng.visualstudio.com/internal/_build/results?buildId=308530&view=results","Url":"https://github.com/dotnet/sdk/pull/3536","RelatedDescription":"Closed or merged PR \"Yaml stages\" (#3536)"},{"Id":"480813850","IsPullRequest":true,"CreatedAt":"2019-08-14T18:05:25","Actor":"wli3","Number":"3538","RawContent":null,"Title":"[DRAFT] Revived classic project experiment for C++/CLI ","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3538","RelatedDescription":"Open PR \"[DRAFT] Revived classic project experiment for C++/CLI \" (#3538)"},{"Id":"480641244","IsPullRequest":true,"CreatedAt":"2019-08-14T14:01:21","Actor":"dotnet-maestro[bot]","Number":"3537","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.7\r\n- **Date Produced**: 8/12/2019 9:37 PM\r\n- **Commit**: 82c822ee7db08f5347e6ac44e3ed465248394a9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19412.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3537)"},{"Id":"480422482","IsPullRequest":true,"CreatedAt":"2019-08-14T02:00:23","Actor":"dotnet-bot","Number":"3535","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3535","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3535)"},{"Id":"480318091","IsPullRequest":true,"CreatedAt":"2019-08-13T21:37:32","Actor":"wli3","Number":"3534","RawContent":null,"Title":"WIP -- test ci -- do we have c++cli work load in CI mahcines?","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3534","RelatedDescription":"Closed or merged PR \"WIP -- test ci -- do we have c++cli work load in CI mahcines?\" (#3534)"},{"Id":"480302574","IsPullRequest":true,"CreatedAt":"2019-08-13T18:28:59","Actor":"livarcocc","Number":"3532","RawContent":null,"Title":"Merge release/3.0.100 preview8 into release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3532","RelatedDescription":"Open PR \"Merge release/3.0.100 preview8 into release/3.0.1xx\" (#3532)"},{"Id":"480119380","IsPullRequest":true,"CreatedAt":"2019-08-13T14:31:44","Actor":"dotnet-bot","Number":"3531","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3531","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3531)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164249816983068673","CreatedAt":"2019-08-21T18:56:01+00:00","UserScreenname":"dotnet","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft wil… https://t.co/sf9vOIaakw","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":76,"FavoriteCount":42,"RawContent":null},{"Id":"1163857322763935745","CreatedAt":"2019-08-20T16:56:23+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":6,"RawContent":null},{"Id":"1162097146985795584","CreatedAt":"2019-08-15T20:22:05+00:00","UserScreenname":"dotnet","Text":"You know .NET is open source, right? https://t.co/JLsyVeSFfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"1162046045024423936","CreatedAt":"2019-08-15T16:59:01+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1161728795260252160","CreatedAt":"2019-08-14T19:58:23+00:00","UserScreenname":"dotnet","Text":"Request for comment: Consolidating .NET GitHub repos https://t.co/funhIQtZbK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":122,"FavoriteCount":58,"RawContent":null},{"Id":"1161724718740721664","CreatedAt":"2019-08-14T19:42:11+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog https://t.co/VmcacDaK7I","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":43,"RawContent":null},{"Id":"1161408520308158464","CreatedAt":"2019-08-13T22:45:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":1,"RawContent":null},{"Id":"1161356948542935040","CreatedAt":"2019-08-13T19:20:48+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8 https://t.co/6OjVnfl9Vz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":77,"FavoriteCount":51,"RawContent":null},{"Id":"1161344983238004736","CreatedAt":"2019-08-13T18:33:15+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 8 https://t.co/tG9qMt5Bfl","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":153,"FavoriteCount":96,"RawContent":null},{"Id":"1161344631990149120","CreatedAt":"2019-08-13T18:31:51+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 8 https://t.co/s1RCmPhKm2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":481,"FavoriteCount":267,"RawContent":null},{"Id":"1161344365396017152","CreatedAt":"2019-08-13T18:30:48+00:00","UserScreenname":"dotnet","Text":"Want to help us improve ML .NET? Take this survey to let us know a bit about how you use, or plan to use, machine l… https://t.co/yYhlCeanKZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2019-08-22T05:30:38.3903361Z","RunDurationInMilliseconds":16571}