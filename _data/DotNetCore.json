{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:15:51+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are making the fourth preview of Entity Framework Core 3.0 available on NuGet, alongside .NET Core 3.0 Preview 4 and ASP.NET Core 3.0 Preview 4. We encourage you to install this preview to...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-4/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 4","PublishedOn":"2019-04-18T22:13:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 4. It includes a chart control for Windows Forms, HTTP/2 support, GC updates to use less memory, support for CPU limits with Docker,\nThe post Announcing...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-4/","RawContent":null},{"Title":"Announcing the .NET Framework 4.8","PublishedOn":"2019-04-18T20:12:27+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are thrilled to announce the release of the .NET Framework 4.8 today. It’s included in the Windows 10 May 2019 Update. .NET Framework 4.8 is also available on Windows 7+ and Windows Server 2008...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/","RawContent":null},{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set,\nThe post...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9473764496","Type":"PullRequestEvent","CreatedAt":"2019-04-19T03:47:16","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24113","RelatedDescription":"Opened pull request \"[WIP] Implement APIs for some threading metrics (CoreCLR)\" (#24113) at dotnet/coreclr","RelatedBody":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- Attempt at replacement for https://github.com/dotnet/coreclr/pull/22754 due to CI issues"},{"Id":"9473622347","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:57:18","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24075","RelatedDescription":"Merged pull request \"Move R2R-specific code to be outside FEATURE_PREJIT\" (#24075) at dotnet/coreclr","RelatedBody":"This refactoring is preparation for disabling fragile NGen support in the runtime. It keeps fragile-NGen specific code under FEATURE_PREJIT and moves the code required to support R2R to be outside FEATURE_PREJIT.\r\n\r\nThe eventual goal is to compile the runtime without FEATURE_PREJIT defined to avoid fragile-NGen specific overhead."},{"Id":"9473489619","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:13:24","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23083","RelatedDescription":"Closed issue \"Config file validation\" (#23083) at dotnet/coreclr","RelatedBody":"In general, input validation is weak, the earlier we can block bad input, the more reliable the system is.\r\n\r\n- [ ] Handle if a key is specified is not in the set of expected set \r\n- [ ] Handle if the specified provider value is invalid (according to the provider grammar)\r\n- [ ] Handle if the specified output path does not exist.\r\n- [ ] Handle if the specified circularMB is not a positive number (showing me something, not just silently default) [should really have a range check to avoid DoS]\r\n- [ ] Handle if the specified processID is not a positive number\r\n- [x] Handle if the specified multiFileSec is not a positive number [should really have a range check to avoid DoS]\r\n\r\nProvider grammar:\r\n- [ ] Empty provider name\r\n- [ ] Empty keyword\r\n- [ ] Level not a number (showing me something, not just silently default)\r\n- [ ] Level not in range\r\n- [ ] Empty filter data key\r\n- [ ] Empty filter data value (allowed?)\r\n- [ ] Duplicated filter data key\r\n\r\nNice to have:\r\n- [ ] Consider canonicalizing the casing for the keys\r\n- [ ] Consider providing a mechanism for writing comments\r\n- [ ] Consider supporting hexadecimal numbers\r\n\r\nAll of the above should be tested that it doesn't break anything - data validation implemented or not."},{"Id":"9473483689","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:11:20","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24112","RelatedDescription":"Opened issue \"Remove support for the EventPipe config file\" (#24112) at dotnet/coreclr","RelatedBody":"The config file was an undocumented interim measure because we didn't have an IPC channel. Now that we do have IPC we should eliminate the associated code that polls, parses, and applies the config file data."},{"Id":"9473415213","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:48:18","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24111","RelatedDescription":"Opened issue \"[arm64] Invalid argument or value in corefx test\" (#24111) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs1_tst/32/\r\n\r\n**Log:**\r\n```\r\nRunning: C:\\j\\workspace\\arm64_cross_c---62601eff\\_\\fx\\artifacts\\bin\\tests\\CoreFx.Private.TestUtilities.Tests\\netcoreapp-Windows_NT-Release-arm64\\RunTests.cmd C:\\j\\workspace\\arm64_cross_c---62601eff\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm64\r\nInvalid argument or value: C:\\j\\workspace\\arm64_cross_c---62601eff\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm64\r\nUsage: RunTests.cmd {-r|--runtime-path} <runtime-path> [{-d|--dotnet-root} <dotnet-root>] [{-g|--global-tools-dir} <global-tools-dir>] [{--rsp-file} <rsp-file>]\r\n\r\nParameters:\r\n--runtime-path           (Mandatory) Testhost containing the test runtime used during test execution (short: -r)\"\r\n--dotnet-root            SDK directory for hosting shims and tools (short: -d)\r\n--global-tools-dir       Global tools directory (short: -g)\r\n--rsp-file               RSP file to pass in additional arguments\r\n--help                   Print help and exit (short: -h)\r\nCOREFX TEST FAILED\r\n```"},{"Id":"9473382401","Type":"PullRequestEvent","CreatedAt":"2019-04-19T01:37:38","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24094","RelatedDescription":"Merged pull request \"Nullable: couple of missing #nullable enable\" (#24094) at dotnet/coreclr","RelatedBody":""},{"Id":"9473379736","Type":"PullRequestEvent","CreatedAt":"2019-04-19T01:36:45","Actor":"safern","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24110","RelatedDescription":"Opened pull request \"NullableFeature into master\" (#24110) at dotnet/coreclr","RelatedBody":""},{"Id":"9473378181","Type":"PullRequestEvent","CreatedAt":"2019-04-19T01:36:11","Actor":"safern","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24054","RelatedDescription":"Merged pull request \"Nullable: System.Collections.Concurrent\" (#24054) at dotnet/coreclr","RelatedBody":""},{"Id":"9473361391","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:30:15","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24109","RelatedDescription":"Opened issue \" [arm64] Assertion failed: 'comp->featureSIMD'\" (#24109) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_jitnosimd_tst/166/\r\n\r\n**Failed tests:**\r\nJIT/Regression/JitBlue/DevDiv_714266/DevDiv_714266/DevDiv_714266.sh\r\n\r\n**Log:**\r\n```\r\nJIT/Regression/JitBlue/DevDiv_714266/DevDiv_714266/DevDiv_714266.sh [FAIL]\r\n        \r\n        Assert failure(PID 830 [0x0000033e], Thread: 830 [0x033e]): Assertion failed 'comp->featureSIMD' in 'DevDiv_714266:MethodWithManyLiveVectors()' (IL size 200)\r\n```"},{"Id":"9473324713","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:17:32","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24108","RelatedDescription":"Opened issue \"[arm64] Test failed: System.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException\" (#24108) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstress1_tst/170/\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.NullReferenceException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress1/_/fx/src/System.Diagnostics.StackTrace/tests/StackTraceTests.cs(324,0): at System.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException()\r\n```"},{"Id":"9473313456","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:13:42","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24107","RelatedDescription":"Opened issue \"[arm64] Test failed: JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\" (#24107) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_cross_debug_ubuntu16.04_tst/171/\r\n\r\n**Failed tests:**\r\nJIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\n\r\n**Log:**\r\n```\r\nJIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh [FAIL]\r\n        \r\n        Assert failure(PID 40927 [0x00009fdf], Thread: 40927 [0x9fdf]): Assertion failed '!\"SIMD intrinsic with unsupported base type.\"' in 'HVATests`1[Byte][System.Byte]:testReturn_HVA128_05():this' (IL size 120)\r\n        \r\n            File: /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04/src/jit/codegenarm64.cpp Line: 3878\r\n            Image: /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun\r\n        \r\n        /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh: line 252: 40927 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        \r\n        Return code:      1\r\n        Raw output file:      /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/Reports/JIT.Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun VectorMgdMgd_ro.exe ''\r\n        Expected: 100\r\n        Actual: 134\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root\r\n        > /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04/bin/tests/Linux.arm64.Debug/TestWrappers/JIT.Directed/JIT.Directed.XUnitWrapper.cs(51285,0): at JIT_Directed._VectorABI_VectorMgdMgd_ro_VectorMgdMgd_ro_._VectorABI_VectorMgdMgd_ro_VectorMgdMgd_ro_sh()\r\n        Output:\r\n          \r\n          Assert failure(PID 40927 [0x00009fdf], Thread: 40927 [0x9fdf]): Assertion failed '!\"SIMD intrinsic with unsupported base type.\"' in 'HVATests`1[Byte][System.Byte]:testReturn_HVA128_05():this' (IL size 120)\r\n          \r\n              File: /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04/src/jit/codegenarm64.cpp Line: 3878\r\n              Image: /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun\r\n          \r\n          /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh: line 252: 40927 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n          \r\n          Return code:      1\r\n          Raw output file:      /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/Reports/JIT.Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n          /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun VectorMgdMgd_ro.exe ''\r\n          Expected: 100\r\n          Actual: 134\r\n          END EXECUTION - FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root\r\n          > /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9473711819","Type":"PullRequestEvent","CreatedAt":"2019-04-19T03:27:47","Actor":"heng-liu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11197","RelatedDescription":"Opened pull request \"Insert NuGet Build 5.1.0-rtm.5965 into master\" (#11197) at dotnet/cli","RelatedBody":"Insert NuGet Build 5.1.0-rtm.5965 into master"},{"Id":"9473650320","Type":"PullRequestEvent","CreatedAt":"2019-04-19T03:06:28","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11196","RelatedDescription":"Opened pull request \"Insert NuGet Build 5.1.0-preview2.5965 into cli\" (#11196) at dotnet/cli","RelatedBody":"Insert NuGet Build 5.1.0-preview2.5965 into cli release/2.1.7xx branch"},{"Id":"9473650091","Type":"PullRequestEvent","CreatedAt":"2019-04-19T03:06:24","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11195","RelatedDescription":"Opened pull request \"Insert NuGet Build 5.1.0-preview2.5965 into cli\" (#11195) at dotnet/cli","RelatedBody":"Insert NuGet Build 5.1.0-preview2.5965 into cli release/2.2.3xx branch"},{"Id":"9473590398","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:46:42","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11192","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#11192) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9473589287","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:46:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11178","RelatedDescription":"Merged pull request \"Merge release/2.2.2xx to release/3.0.1xx\" (#11178) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9473588241","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:45:57","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11177","RelatedDescription":"Merged pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#11177) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9473575432","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:41:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11194","RelatedDescription":"Opened issue \"DotnetCommand created in test should run on stage2\" (#11194) at dotnet/cli","RelatedBody":"not stage0. Or it should caught SDK + local tools bug much earlier during insertion.\r\n\r\nThis was the case before arcade "},{"Id":"9473563721","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:37:50","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11193","RelatedDescription":"Opened pull request \"Update stage 0 and adjust to s.t.json api\" (#11193) at dotnet/cli","RelatedBody":""},{"Id":"9473100109","Type":"PullRequestEvent","CreatedAt":"2019-04-19T00:01:07","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11192","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#11192) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9473356784","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:28:32","Actor":"bartonjs","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Closed issue \"SUGGESTION: Please Make AsnReader And AnsWriter Public\" (#1147) at dotnet/standard","RelatedBody":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  "},{"Id":"9472665296","Type":"PullRequestEvent","CreatedAt":"2019-04-18T22:03:08","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed pull request \"Remove finalizers\" (#1159) at dotnet/standard","RelatedBody":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?"},{"Id":"9472447013","Type":"PullRequestEvent","CreatedAt":"2019-04-18T21:18:57","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Opened pull request \"Remove finalizers\" (#1159) at dotnet/standard","RelatedBody":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?"},{"Id":"9472367078","Type":"PullRequestEvent","CreatedAt":"2019-04-18T21:04:03","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Opened pull request \"Add Overrides\" (#1158) at dotnet/standard","RelatedBody":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff."},{"Id":"9468824518","Type":"PullRequestEvent","CreatedAt":"2019-04-18T12:03:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1157) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n"},{"Id":"9468390679","Type":"IssuesEvent","CreatedAt":"2019-04-18T10:46:00","Actor":"IKende","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Opened issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156) at dotnet/standard","RelatedBody":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```"},{"Id":"9467520379","Type":"IssuesEvent","CreatedAt":"2019-04-18T08:32:08","Actor":"FrankyBoy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1155","RelatedDescription":"Opened issue \"Replace System.IO.File / System.IO/Directory with interfaces\" (#1155) at dotnet/standard","RelatedBody":"Sorry if this already exists but I couldn't find anything. The only thing remotely similar is [IFileProvider](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.fileproviders.ifileprovider?view=aspnetcore-2.2) which does not offer write support in any way and read support only through streams.\r\n\r\nI think it would be really helpful to have replacements for the static methods in [System.IO.File](https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=netcore-2.2) and System.IO.Directory (and potentially others) with an interface that can be injected via DI. Right now I find that on each project that somehow touches files I have some IFileHandler or similar which allows for basic file handling (read/write) without making my code untestable by unit tests. I think this would make much more sense to be included in the standard itself.\r\n\r\nAlso, including such an interface would allow libraries that may need file access to not do so directly. I.e. library can just depend on `IFileHandler` and the library user can implement their own functionality on top of that (maybe they actually want their \"files\" to go to a centralized DB instead of the filesystem?). "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9474036155","Type":"IssuesEvent","CreatedAt":"2019-04-19T05:29:23","Actor":"Tratcher","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/8221","RelatedDescription":"Closed issue \"Implement server-side of NegotiateStream on Unix\" (#8221) at dotnet/corefx","RelatedBody":"We currently only support the client side.\n"},{"Id":"9474031418","Type":"PullRequestEvent","CreatedAt":"2019-04-19T05:27:42","Actor":"Tratcher","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36827","RelatedDescription":"Merged pull request \"Implement server-side of NegotiateStream on Unix\" (#36827) at dotnet/corefx","RelatedBody":"#8221 @davidsh I'm starting this draft PR to show you the scope of the changes needed for this feature. I'll follow up with you offline.\r\n\r\nThe current code works end-to-end using a Windows client to authenticate via Kerberos to a Linux server that has been linked to the Windows domain. Ignore the tests, they were there there for manual verification and debugging. We'll need to discuss what's possible to automate with the given infrastructure.\r\n\r\nWe also need to work out what variants need to be supported and tested, and which should be blocked with explicit checks and error messages? E.g. NTLM, non-default credentials, Mac, etc.. cc: @blowdart \r\n\r\nI'm not including here an new public APIs for AspNetCore, nor have I tested the HTTP scenario, but that should follow easily from this foundational work."},{"Id":"9473841914","Type":"PullRequestEvent","CreatedAt":"2019-04-19T04:15:39","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36990","RelatedDescription":"Merged pull request \"add test for connection  timeouts\" (#36990) at dotnet/corefx","RelatedBody":"This mimics existing SmallConnectionTimeout_SubsequentRequestUsesDifferentConnection() test.\r\n\r\nThis is test only change.\r\ncloses #35266\r\n"},{"Id":"9473841902","Type":"IssuesEvent","CreatedAt":"2019-04-19T04:15:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35266","RelatedDescription":"Closed issue \"HTTP2: add missing tests for connection limits and header processing\" (#35266) at dotnet/corefx","RelatedBody":"This is mostly reminder to add tests for #31294, #34377 and #35164.\r\n\r\nThere are different ways how to do that but it may be most practical to convert existing test when new generic loopback is ready. #34345\r\nFor example SendAsync_UserAgent_CorrectlyWritten test exist but it will not run with HTTP2.\r\nWe should find or add tests with invalid characters and long values. "},{"Id":"9473838193","Type":"PullRequestEvent","CreatedAt":"2019-04-19T04:14:12","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36994","RelatedDescription":"Merged pull request \"Performance improvements in EmailAddressAttribute\" (#36994) at dotnet/corefx","RelatedBody":"Edit: My apologies, I made a mistake in the perf evaluation but that is corrected and does not change the proposed changes. Snapshots and text below have been adapted accordingly.\r\n\r\nI get a perf improvement by using `IndexOf` which ranges from a factor of 1 for an email address having 20 char to nearly 3 for 60 char.\r\nFor a 20 char email\r\n![Email20Char](https://user-images.githubusercontent.com/19961806/56381482-443a0880-6215-11e9-82e8-f68886588652.PNG)\r\n\r\nFor a 60 char email\r\n![Email60Char](https://user-images.githubusercontent.com/19961806/56381489-49975300-6215-11e9-8840-1869fbe48570.PNG)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9473891205","Type":"PullRequestEvent","CreatedAt":"2019-04-19T04:34:35","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34785","RelatedDescription":"Merged pull request \"use new CPS API to report designer attribute\" (#34785) at dotnet/roslyn","RelatedBody":"fix https://github.com/dotnet/roslyn/issues/33854\r\n\r\n....\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/55761034-d6226400-5a12-11e9-9a1d-ca7155761ccd.png)\r\n\r\nvs\r\n\r\n.net framework \r\n![image](https://user-images.githubusercontent.com/1333179/55761075-f3efc900-5a12-11e9-9e9e-6a7607d19fe9.png)\r\n\r\n...\r\n\r\n.net core put this in csproj\r\n![image](https://user-images.githubusercontent.com/1333179/55761089-01a54e80-5a13-11e9-9170-1204f3b51e73.png)\r\n\r\nwhereas .net framework put this in csproj\r\n![image](https://user-images.githubusercontent.com/1333179/55761124-1f72b380-5a13-11e9-9f3b-014551c2028e.png)\r\n\r\nit looks like\r\nlegacy \"IVSMDDesignerService.RegisterDesignViewAttribute\" will ignore designerAttribute \"Form\" for designer.cs file but new API \"IProjectItemDesignerTypeUpdateService.SetProjectItemDesignerTypeAsync\" accept it and change csproj file.\r\n\r\nit looks like a bug on the IProjectItemDesignerTypeUpdateService side. "},{"Id":"9473609976","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:53:16","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34963","RelatedDescription":"Merged pull request \"Create mapping from NotificationOption to EditorConfig severity string.\" (#34963) at dotnet/roslyn","RelatedBody":"This PR is being created to simplify #30760\r\n\r\n`notificationOption.ToString().ToLowerInvariant();` would return a localized string instead of the correct severity string."},{"Id":"9473606719","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:52:10","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34964","RelatedDescription":"Merged pull request \"Allow the simplification of using directives where the global alias is specified\" (#34964) at dotnet/roslyn","RelatedBody":"This PR is being created to simplify https://github.com/dotnet/roslyn/pull/30760\r\n\r\nUsingDirectives that are expanded using `Simplifier.Expand` are given the `global::` alias which is not removed when calling `Simplifier.ReduceAsync`."},{"Id":"9473603852","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:51:13","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34440","RelatedDescription":"Merged pull request \"Export additional code styles in .editorconfig generation\" (#34440) at dotnet/roslyn","RelatedBody":"~~Builds on #33946~~\r\nPossibly supersedes #34122 \r\n\r\n* Export using directives styles when generating .editorconfig (Fixes #33766)\r\n* Export naming styles when generating .editorconfig (Fixes #30086)"},{"Id":"9473603841","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:51:13","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30086","RelatedDescription":"Closed issue \"Add support for generating current naming rules/options in the editorconfig generator\" (#30086) at dotnet/roslyn","RelatedBody":"See the discussion here: https://github.com/dotnet/roslyn/pull/30043#discussion_r219246165. Current editorconfig file generation only handles formatting and code style options, but we should extend it to generate entries for naming rules as well."},{"Id":"9473603824","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:51:13","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33766","RelatedDescription":"Closed issue \"Settings for using directives not exported to .editorconfig\" (#33766) at dotnet/roslyn","RelatedBody":"**Version Used**: VS2019 dogfood\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open Tools -> Options\r\n2. Configure settings on Text Editor -> C# -> Advanced for how to style using directives\r\n    * Place 'System' directives first when sorting usings\r\n    * Separate using directive groups\r\n3. Switch to Code Style options and export .editorconfig settings\r\n\r\n**Expected Behavior**:\r\nThese options for using directives should be exported (dotnet_sort_system_directives_first and dotnet_separate_import_directive_groups respectively)\r\n\r\n**Actual Behavior**:\r\nThey are not exported to the .editorconfig file"},{"Id":"9473572441","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:40:49","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34987","RelatedDescription":"Closed issue \"FailFast in HostWorkspaceServicesExtensions.CreateContentTypeMap: An item with the same key has already been added\" (#34987) at dotnet/roslyn","RelatedBody":"Observed in integration tests.\r\n\r\n```\r\nEvent Time (UTC): 4/13/2019 1:38:38 AM\r\nEvent ID: 1025\r\nData: Application: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.CreateContentTypeMap(HostWorkspaceServices hostWorkspaceServices)\r\n   at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey key, CreateValueCallback createValueCallback)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetDefaultContentTypeName(HostWorkspaceServices workspaceServices, String language)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.LanguageMatches(String language, IContentType contentType, HostWorkspaceServices workspaceServices)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetLanguageServices(HostWorkspaceServices workspaceServices, IContentType contentType)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags(NormalizedSnapshotSpanCollection spans)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.Tagger.GetTags(NormalizedSnapshotSpanCollection spans)\r\n   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.<GetTagsForBuffer>d__46.MoveNext()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(System.Object, System.Exception)\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.HandleException(System.Object, System.Exception)\r\n   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1+<GetTagsForBuffer>d__46[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierAggregator.InternalGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan, System.Collections.Generic.IEnumerable`1<Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>>)\r\n   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierAggregator.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)\r\n   at Microsoft.VisualStudio.Text.Formatting.Implementation.NormalizedSpanGenerator.CreateClassifiedRuns(Microsoft.VisualStudio.Text.SnapshotSpan, Microsoft.VisualStudio.Text.Classification.IAccurateClassifier, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Formatting.Implementation.NormalizedSpanGenerator.Create(Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection, Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.Classification.IAccurateClassifier, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Formatting.Implementation.FormattedLineSource.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.FormatSnapshotLine(Microsoft.VisualStudio.Text.ITextSnapshotLine, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView+LayoutLineCache.DoAnchorFormat(Microsoft.VisualStudio.Text.SnapshotPoint, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.DoAnchorLayout(LayoutDescription, Microsoft.VisualStudio.Text.SnapshotPoint, Double, Double, Microsoft.VisualStudio.Text.Editor.ViewRelativePosition, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.PerformLayout(Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.SnapshotPoint, Double, Microsoft.VisualStudio.Text.Editor.ViewRelativePosition, Double, Double, Boolean, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.Initialize()\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextEditorFactoryService.InitializeTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView)\r\n   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Init_InitializeWpfTextView()\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.<InitializeDifferenceViewer>b__40_0(Microsoft.VisualStudio.Text.Differencing.IDifferenceTextViewModel, Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet, Microsoft.VisualStudio.Text.Editor.IEditorOptions, System.Windows.FrameworkElement ByRef, Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost ByRef)\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.EnsureRightHost()\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.GetHostForViewMode(Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode)\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.UpdateVisual()\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.Initialize(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer, Microsoft.VisualStudio.Text.Differencing.CreateTextViewHostCallback, Microsoft.VisualStudio.Text.Editor.IEditorOptions)\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.InitializeDifferenceViewer()\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.<CreateView>b__33_0()\r\n   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Init_OnActivation()\r\n   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.PreOuterQueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[])\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)\r\n   at Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackSelectionExPrivate.Register()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ConnectSelectionContext()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Activate()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.viewManager_ActiveViewChanged(System.Object, Microsoft.VisualStudio.PlatformUI.Shell.ActiveViewChangedEventArgs)\r\n   at System.EventHandler`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Object, System.__Canon)\r\n   at Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.EventHandler`1<System.__Canon>, System.Object, System.__Canon)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.SetActiveView(Microsoft.VisualStudio.PlatformUI.Shell.View, Microsoft.VisualStudio.PlatformUI.Shell.ActivationType)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.ActivateViewFromTabControl(System.Windows.Controls.TabControl, Microsoft.VisualStudio.PlatformUI.Shell.ActivationType)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.OnTabControlSelectionChanged(System.Object, System.Windows.Controls.SelectionChangedEventArgs)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager+<>c.<.cctor>b__24_27(System.Object, System.Windows.Controls.SelectionChangedEventArgs)\r\n   at System.Windows.Controls.SelectionChangedEventArgs.InvokeEventHandler(System.Delegate, System.Object)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate, System.Object)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)\r\n   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)\r\n   at System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\r\n   at System.Windows.Controls.TabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)\r\n   at Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)\r\n   at System.Windows.Controls.Primitives.Selector.InvokeSelectionChanged(System.Collections.Generic.List`1<ItemInfo>, System.Collections.Generic.List`1<ItemInfo>)\r\n   at System.Windows.Controls.Primitives.Selector+SelectionChanger.End()\r\n   at System.Windows.Controls.Primitives.Selector+SelectionChanger.SelectJustThisItem(ItemInfo, Boolean)\r\n   at System.Windows.Controls.Primitives.Selector.OnSelectedItemChanged(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)\r\n   at System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty, Boolean)\r\n   at System.Windows.Data.BindingExpressionBase.Invalidate(Boolean)\r\n   at System.Windows.Data.BindingExpression.TransferValue(System.Object, Boolean)\r\n   at System.Windows.Data.BindingExpression.ScheduleTransfer(Boolean)\r\n   at MS.Internal.Data.ClrBindingWorker.NewValueAvailable(Boolean, Boolean, Boolean)\r\n   at MS.Internal.Data.PropertyPathWorker.UpdateSourceValueState(Int32, System.ComponentModel.ICollectionView, System.Object, Boolean)\r\n   at MS.Internal.Data.PropertyPathWorker.OnDependencyPropertyChanged(System.Windows.DependencyObject, System.Windows.DependencyProperty, Boolean)\r\n   at MS.Internal.Data.ClrBindingWorker.OnSourceInvalidation(System.Windows.DependencyObject, System.Windows.DependencyProperty, Boolean)\r\n   at System.Windows.Data.BindingExpression.HandlePropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.Data.BindingExpressionBase.OnPropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.Data.BindingExpression.OnPropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependentList.InvalidateDependents(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty, System.Object, System.Windows.PropertyMetadata, Boolean, Boolean, System.Windows.OperationType, Boolean)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.UpdateParentSelectedElement()\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.View.OnIsSelectedChanged()\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.OnIsSelectedChanged(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty, System.Object, System.Windows.PropertyMetadata, Boolean, Boolean, System.Windows.OperationType, Boolean)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.set_IsSelected(Boolean)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ShowInternal(ShowFlags)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.<Show>b__506_0()\r\n   at Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func`1<Int32>, Boolean, Boolean)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Show()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.Window.set_Visible(Boolean)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.WindowBase+<>c__DisplayClass69_0.<set_Visible>b__0()\r\n   at Microsoft.VisualStudio.Shell.ThreadHelper.Invoke[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`1<Boolean>)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.WindowBase.set_Visible(Boolean)\r\n   at Microsoft.VisualStudio.TemplateWizard.Wizard.OpenNotedItems(System.String, System.Collections.Generic.List`1<WizardExtension>, EnvDTE.Project)\r\n   at Microsoft.VisualStudio.TemplateWizard.Wizard.Execute(System.Object, Int32, System.Object[] ByRef, System.Object[] ByRef, EnvDTE.wizardResult ByRef)\r\n```"},{"Id":"9473570238","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:40:04","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34945","RelatedDescription":"Merged pull request \"FSharp Shim - First Phase\" (#34945) at dotnet/roslyn","RelatedBody":"This needs to be inserted in conjunction with this PR: https://github.com/Microsoft/visualfsharp/pull/6498"},{"Id":"9473360970","Type":"PullRequestEvent","CreatedAt":"2019-04-19T01:30:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35129","RelatedDescription":"Merged pull request \"Merge dev16.1-preview2 to dev16.1-preview2-vs-deps\" (#35129) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.1-preview2 into dev16.1-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps\ngit reset --hard upstream/dev16.1-preview2-vs-deps\ngit merge upstream/dev16.1-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9473247486","Type":"PullRequestEvent","CreatedAt":"2019-04-19T00:51:05","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35132","RelatedDescription":"Opened pull request \"renamed MS.VS.CodeAnalysis.CodeLens to MS.VS.LanguageServices.CodeLens\" (#35132) at dotnet/roslyn","RelatedBody":"fix https://github.com/dotnet/roslyn/issues/35111"},{"Id":"9473195572","Type":"IssuesEvent","CreatedAt":"2019-04-19T00:32:50","Actor":"safern","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35131","RelatedDescription":"Opened issue \"Deconstruct KeyValuePair failing with nullable warning\" (#35131) at dotnet/roslyn","RelatedBody":"We have the following `KeyValuePair` struct:\r\n\r\n```cs\r\n    public readonly struct KeyValuePair<TKey, TValue>\r\n    {\r\n        private readonly TKey key; // Do not rename (binary serialization)\r\n        private readonly TValue value; // Do not rename (binary serialization)\r\n\r\n        public KeyValuePair(TKey key, TValue value)\r\n        {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n\r\n        public TKey Key\r\n        {\r\n            get { return key; }\r\n        }\r\n\r\n        public TValue Value\r\n        {\r\n            get { return value; }\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return KeyValuePair.PairToString(Key, Value);\r\n        }\r\n\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public void Deconstruct(out TKey key, out TValue value)\r\n        {\r\n            key = Key;\r\n            value = Value;\r\n        }\r\n    }\r\n```\r\n\r\nThen we create a `Dictionary<string, ResourceManager>` which in its `Enumerator` returns a `KeyValuePair<string, ResourceManager>`. We should be able to use this as follows:\r\n\r\n```cs\r\n            Dictionary<string, ResourceSet> localResourceSets = _resourceSets;\r\n\r\n            // If any calls to Close throw, at least leave ourselves in a\r\n            // consistent state.\r\n            _resourceSets = new Dictionary<string, ResourceSet>();\r\n            _lastUsedResourceCache = new CultureNameResourceSetPair();\r\n\r\n            lock (localResourceSets)\r\n            {\r\n                foreach ((_, ResourceSet resourceSet) in localResourceSets)\r\n                {\r\n                    resourceSet.Close();\r\n                }\r\n            }\r\n```\r\n\r\nWe get a warning in the foreach loop: `shared\\System\\Resources\\ResourceManager.cs(307,26): error CS8619: Nullability of reference types in value of type 'KeyValuePair<string, ResourceSet>' doesn't match target type 'ResourceSet'.`\r\n\r\nCorrect me if this regression was not caused by this change, but we're getting this warning as we updated the compiler version to: \r\n`3.100.19.21705 (79b8271f)`\r\n\r\nThis is currently blocking: https://github.com/dotnet/coreclr/pull/24060\r\n\r\nMaybe this was broken by: https://github.com/dotnet/roslyn/pull/34768\r\n\r\ncc: @dotnet/nullablefc @chsienki @cston "},{"Id":"9473149134","Type":"IssuesEvent","CreatedAt":"2019-04-19T00:17:01","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33470","RelatedDescription":"Closed issue \"Intellisense completion fails for 'else' after 'else if'\" (#33470) at dotnet/roslyn","RelatedBody":"```csharp\r\nif (condition)\r\n  DoSomething();\r\n// At this point, Intellisense correctly suggests 'else' as a completion\r\nelse if (condition2)\r\n  DoSomethingElse();\r\n// At this point, Intellisense no longer recognizes 'else' as a valid keyword and suggests some ridiculous completions instead\r\nelse\r\n  ...\r\n```\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/431613/intellisense-completion-fails-for-else-after-else.html\r\nVSTS ticketId: 774044_\r\n_These are the original issue comments:_\r\n\r\nCytheria Ji [MSFT] on 1/21/2019, 04:52 PM (27 days ago): <p>Thank you for your feedback! For us to investigate this further, could you please provide your project language? </p><p>We look forward to hearing from you!</p>\r\n\r\nPaul Buddington on 1/22/2019, 07:35 AM (26 days ago): <p>C#, build settings for C# 7.3</p><p>I saw this issue with a clean load of Visual Studio Community edition that I installed on a loaner laptop.  I am unable to reproduce the same behavior on my existing Visual Studio Professional 2017 (v15.9.5) installation on my regular laptop, but I have already done a lot to tweak the Intellisense settings on that machine to compensate for all the times Visual Studio thinks it's smarter than I am (e.g. built-in snippets that can't be modified).</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9474037204","Type":"PullRequestEvent","CreatedAt":"2019-04-19T05:29:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7328","RelatedDescription":"Opened pull request \"Fix objwriter for OSX\" (#7328) at dotnet/corert","RelatedBody":""},{"Id":"9473680288","Type":"IssuesEvent","CreatedAt":"2019-04-19T03:16:44","Actor":"drearyrainDeng","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7327","RelatedDescription":"Opened issue \"Question：how cli judge whether to compile native or managed code?\" (#7327) at dotnet/corert","RelatedBody":"To example \"Hello World\".we just call command like that \"dotnet publish -r win-x64 -c release\"\r\nso dotnet  how to judge compile native or managed code?"},{"Id":"9473236851","Type":"PullRequestEvent","CreatedAt":"2019-04-19T00:47:18","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7326","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7326) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9473116180","Type":"PullRequestEvent","CreatedAt":"2019-04-19T00:06:13","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7324","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr [Donot Merge]\" (#7324) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @bbartels"},{"Id":"9472236701","Type":"PullRequestEvent","CreatedAt":"2019-04-18T20:40:43","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7325","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#7325) at dotnet/corert","RelatedBody":""},{"Id":"9472235849","Type":"PullRequestEvent","CreatedAt":"2019-04-18T20:40:34","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7325","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#7325) at dotnet/corert","RelatedBody":""},{"Id":"9471327389","Type":"PullRequestEvent","CreatedAt":"2019-04-18T18:05:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7324","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7324) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9469723778","Type":"PullRequestEvent","CreatedAt":"2019-04-18T14:12:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7322","RelatedDescription":"Merged pull request \"Fix Windows issues with the new object writer\" (#7322) at dotnet/corert","RelatedBody":"See individual commits."},{"Id":"9469700244","Type":"PullRequestEvent","CreatedAt":"2019-04-18T14:09:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7323","RelatedDescription":"Merged pull request \"Make __modules section writeable on linux to prevent TEXTREL section\" (#7323) at dotnet/corert","RelatedBody":"fixes #7321"},{"Id":"9469700224","Type":"IssuesEvent","CreatedAt":"2019-04-18T14:09:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7321","RelatedDescription":"Closed issue \"Linux shared library contains TEXTREL section\" (#7321) at dotnet/corert","RelatedBody":"This section makes shared library non-shareable between processes.\r\nAlso it prevents packing with UPX.\r\n\r\nThe problem is caused by `__modules` section, which is marked ReadOnly and accessed with relocation type `IMAGE_REL_BASED_DIR64`\r\n\r\nI will try to investigate further. It is possible that another libobjwriter modification will be required.\r\n\r\nrelated to #4988"},{"Id":"9468784808","Type":"PullRequestEvent","CreatedAt":"2019-04-18T11:56:58","Actor":"hc4","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7323","RelatedDescription":"Opened pull request \"Make __modules section writeable on linux to prevent TEXTREL section\" (#7323) at dotnet/corert","RelatedBody":"fixes #7321"},{"Id":"9467780127","Type":"PullRequestEvent","CreatedAt":"2019-04-18T09:11:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7322","RelatedDescription":"Opened pull request \"Fix Windows issues with the new object writer\" (#7322) at dotnet/corert","RelatedBody":"See individual commits."},{"Id":"9466970970","Type":"IssuesEvent","CreatedAt":"2019-04-18T06:55:19","Actor":"hc4","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7321","RelatedDescription":"Opened issue \"Linux shared library contains TEXTREL section\" (#7321) at dotnet/corert","RelatedBody":"This section makes shared library non-shareable between processes.\r\nAlso it prevents packing with UPX.\r\n\r\nThe problem is caused by `__modules` section, which is marked ReadOnly and accessed with relocation type `IMAGE_REL_BASED_DIR64`\r\n\r\nI will try to investigate further. It is possible that another libobjwriter modification will be required.\r\n\r\nrelated to #7249"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9473580853","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:43:34","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3139","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9473580793","Type":"PullRequestEvent","CreatedAt":"2019-04-19T02:43:33","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3139","RelatedDescription":"Closed pull request \"Merge release/2.2.2xx to release/3.0.1xx\" (#3139) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9473435821","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:55:09","Actor":"ajaybhargavb","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3146","RelatedDescription":"Opened issue \"Internal error: new deps file generation logic did not produce the same result as the old logic\" (#3146) at dotnet/sdk","RelatedBody":"I've included both the old and new deps files here.\r\n\r\n[Microsoft.AspNetCore.Razor.Test.MvcShim.deps.zip](https://github.com/dotnet/sdk/files/3096744/Microsoft.AspNetCore.Razor.Test.MvcShim.deps.zip)\r\n\r\n\r\nOriginal error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error : Internal error: new deps file generation logic did not produce the same result as the old logic. [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Please file an issue for this at https://github.com/dotnet/sdk and include the following two files:  [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Deps file from old logic: C:\\Github\\aspnet\\AspNetCore-Tooling\\artifacts\\bin\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Debug\\netcoreapp3.0\\Microsoft.AspNetCore.Razor.Test.MvcShim.deps.json [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Deps file from new logic: C:\\Github\\aspnet\\AspNetCore-Tooling\\artifacts\\bin\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Debug\\netcoreapp3.0\\Microsoft.AspNetCore.Razor.Test.MvcShim.deps.new.json [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     You can work around this by setting the DepsFileGenerationMode MSBuild property to 'old' [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\n```"},{"Id":"9473192947","Type":"IssuesEvent","CreatedAt":"2019-04-19T00:31:59","Actor":"sbomer","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3145","RelatedDescription":"Opened issue \"TestAsTools job fails with latest SDK\" (#3145) at dotnet/sdk","RelatedBody":"See the failures in https://github.com/dotnet/sdk/pull/3133:\r\n```\r\nF:\\workspace\\_work\\1\\s\\src\\Tests\\Directory.Build.targets(56,5): error MSB3073: The command \"dotnet tool install --local testSdkRestore --version 3.0.100-ci --add-source F:\\workspace\\_work\\1\\s\\artifacts\\packages\\Debug\\NonShipping\\\" exited with code 1. [F:\\workspace\\_work\\1\\s\\src\\Tests\\Microsoft.NET.Restore.Tests\\Microsoft.NET.Restore.Tests.csproj]\r\n```"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"435039206","IsPullRequest":true,"CreatedAt":"2019-04-19T03:47:15","Actor":"kouvel","Number":"24113","RawContent":null,"Title":"[WIP] Implement APIs for some threading metrics (CoreCLR)","State":"open","Body":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- Attempt at replacement for https://github.com/dotnet/coreclr/pull/22754 due to CI issues","Url":"https://github.com/dotnet/coreclr/pull/24113","RelatedDescription":"Open PR \"[WIP] Implement APIs for some threading metrics (CoreCLR)\" (#24113)"},{"Id":"435023915","IsPullRequest":false,"CreatedAt":"2019-04-19T02:11:19","Actor":"noahfalk","Number":"24112","RawContent":null,"Title":"Remove support for the EventPipe config file","State":"open","Body":"The config file was an undocumented interim measure because we didn't have an IPC channel. Now that we do have IPC we should eliminate the associated code that polls, parses, and applies the config file data.","Url":"https://github.com/dotnet/coreclr/issues/24112","RelatedDescription":"Open issue \"Remove support for the EventPipe config file\" (#24112)"},{"Id":"435020131","IsPullRequest":false,"CreatedAt":"2019-04-19T01:48:17","Actor":"VincentBu","Number":"24111","RawContent":null,"Title":"[arm64] Invalid argument or value in corefx test","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs1_tst/32/\r\n\r\n**Log:**\r\n```\r\nRunning: C:\\j\\workspace\\arm64_cross_c---62601eff\\_\\fx\\artifacts\\bin\\tests\\CoreFx.Private.TestUtilities.Tests\\netcoreapp-Windows_NT-Release-arm64\\RunTests.cmd C:\\j\\workspace\\arm64_cross_c---62601eff\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm64\r\nInvalid argument or value: C:\\j\\workspace\\arm64_cross_c---62601eff\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm64\r\nUsage: RunTests.cmd {-r|--runtime-path} <runtime-path> [{-d|--dotnet-root} <dotnet-root>] [{-g|--global-tools-dir} <global-tools-dir>] [{--rsp-file} <rsp-file>]\r\n\r\nParameters:\r\n--runtime-path           (Mandatory) Testhost containing the test runtime used during test execution (short: -r)\"\r\n--dotnet-root            SDK directory for hosting shims and tools (short: -d)\r\n--global-tools-dir       Global tools directory (short: -g)\r\n--rsp-file               RSP file to pass in additional arguments\r\n--help                   Print help and exit (short: -h)\r\nCOREFX TEST FAILED\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24111","RelatedDescription":"Open issue \"[arm64] Invalid argument or value in corefx test\" (#24111)"},{"Id":"434893067","IsPullRequest":true,"CreatedAt":"2019-04-19T01:37:38","Actor":"krwq","Number":"24094","RawContent":null,"Title":"Nullable: couple of missing #nullable enable","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24094","RelatedDescription":"Closed or merged PR \"Nullable: couple of missing #nullable enable\" (#24094)"},{"Id":"435018383","IsPullRequest":true,"CreatedAt":"2019-04-19T01:36:44","Actor":"safern","Number":"24110","RawContent":null,"Title":"NullableFeature into master","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24110","RelatedDescription":"Open PR \"NullableFeature into master\" (#24110)"},{"Id":"435017453","IsPullRequest":false,"CreatedAt":"2019-04-19T01:30:15","Actor":"VincentBu","Number":"24109","RawContent":null,"Title":" [arm64] Assertion failed: 'comp->featureSIMD'","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_jitnosimd_tst/166/\r\n\r\n**Failed tests:**\r\nJIT/Regression/JitBlue/DevDiv_714266/DevDiv_714266/DevDiv_714266.sh\r\n\r\n**Log:**\r\n```\r\nJIT/Regression/JitBlue/DevDiv_714266/DevDiv_714266/DevDiv_714266.sh [FAIL]\r\n        \r\n        Assert failure(PID 830 [0x0000033e], Thread: 830 [0x033e]): Assertion failed 'comp->featureSIMD' in 'DevDiv_714266:MethodWithManyLiveVectors()' (IL size 200)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24109","RelatedDescription":"Open issue \" [arm64] Assertion failed: 'comp->featureSIMD'\" (#24109)"},{"Id":"435015462","IsPullRequest":false,"CreatedAt":"2019-04-19T01:17:32","Actor":"VincentBu","Number":"24108","RawContent":null,"Title":"[arm64] Test failed: System.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstress1_tst/170/\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.NullReferenceException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress1/_/fx/src/System.Diagnostics.StackTrace/tests/StackTraceTests.cs(324,0): at System.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24108","RelatedDescription":"Open issue \"[arm64] Test failed: System.Diagnostics.Tests.StackTraceTests.ToString_NullFrame_ThrowsNullReferenceException\" (#24108)"},{"Id":"435014815","IsPullRequest":false,"CreatedAt":"2019-04-19T01:13:40","Actor":"VincentBu","Number":"24107","RawContent":null,"Title":"[arm64] Test failed: JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_cross_debug_ubuntu16.04_tst/171/\r\n\r\n**Failed tests:**\r\nJIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\n\r\n**Log:**\r\n```\r\nJIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh [FAIL]\r\n        \r\n        Assert failure(PID 40927 [0x00009fdf], Thread: 40927 [0x9fdf]): Assertion failed '!\"SIMD intrinsic with unsupported base type.\"' in 'HVATests`1[Byte][System.Byte]:testReturn_HVA128_05():this' (IL size 120)\r\n        \r\n            File: /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04/src/jit/codegenarm64.cpp Line: 3878\r\n            Image: /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun\r\n        \r\n        /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh: line 252: 40927 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        \r\n        Return code:      1\r\n        Raw output file:      /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/Reports/JIT.Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun VectorMgdMgd_ro.exe ''\r\n        Expected: 100\r\n        Actual: 134\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root\r\n        > /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04/bin/tests/Linux.arm64.Debug/TestWrappers/JIT.Directed/JIT.Directed.XUnitWrapper.cs(51285,0): at JIT_Directed._VectorABI_VectorMgdMgd_ro_VectorMgdMgd_ro_._VectorABI_VectorMgdMgd_ro_VectorMgdMgd_ro_sh()\r\n        Output:\r\n          \r\n          Assert failure(PID 40927 [0x00009fdf], Thread: 40927 [0x9fdf]): Assertion failed '!\"SIMD intrinsic with unsupported base type.\"' in 'HVATests`1[Byte][System.Byte]:testReturn_HVA128_05():this' (IL size 120)\r\n          \r\n              File: /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04/src/jit/codegenarm64.cpp Line: 3878\r\n              Image: /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun\r\n          \r\n          /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh: line 252: 40927 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n          \r\n          Return code:      1\r\n          Raw output file:      /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/Reports/JIT.Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n          /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root/corerun VectorMgdMgd_ro.exe ''\r\n          Expected: 100\r\n          Actual: 134\r\n          END EXECUTION - FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/Tests/Core_Root\r\n          > /home/robox/j/workspace/dotnet_coreclr/master/arm64_cross_debug_ubuntu16.04_tst/bin/tests/Linux.arm64.Debug/JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24107","RelatedDescription":"Open issue \"[arm64] Test failed: JIT/Directed/VectorABI/VectorMgdMgd_ro/VectorMgdMgd_ro.sh\" (#24107)"},{"Id":"435013574","IsPullRequest":false,"CreatedAt":"2019-04-19T01:05:50","Actor":"VincentBu","Number":"24106","RawContent":null,"Title":"[x86] Test failed: JIT\\CheckProjects\\CheckProjects\\CheckProjects.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_jitstressregs4/818/\r\n\r\n**Failed tests:**\r\nJIT\\CheckProjects\\CheckProjects\\CheckProjects.cmd\r\n\r\n**Log:**\r\n```\r\nJIT\\CheckProjects\\CheckProjects\\CheckProjects.cmd [FAIL]\r\n        \r\n        Return code:      1\r\n        Raw output file:      D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\JIT.CheckProjects\\CheckProjects\\CheckProjects.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" CheckProjects.exe \r\n        Scanning projects under D:\\j\\workspace\\x86_checked_w---b7304e59\\tests\\src\\JIT\r\n        D:\\j\\workspace\\x86_checked_w---b7304e59\\tests\\src\\JIT\\Directed\\rvastatics\\RVAOrderingTest.ilproj DebugType-n/a-SuffixNone\r\n        D:\\j\\workspace\\x86_checked_w---b7304e59\\tests\\src\\JIT\\Directed\\rvastatics\\RVAOrderingTest.ilproj Optimize-n/a\r\n        7030 projects, 1 needed fixes, 0 were fixed\r\n        Expected: 100\r\n        Actual: -1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n        > D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\JIT\\CheckProjects\\CheckProjects\\CheckProjects.cmd\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\JIT.CheckProjects\\JIT.CheckProjects.XUnitWrapper.cs(129,0): at JIT_CheckProjects._CheckProjects_CheckProjects_._CheckProjects_CheckProjects_cmd()\r\n        Output:\r\n          \r\n          Return code:      1\r\n          Raw output file:      D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\JIT.CheckProjects\\CheckProjects\\CheckProjects.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n           \"D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" CheckProjects.exe \r\n          Scanning projects under D:\\j\\workspace\\x86_checked_w---b7304e59\\tests\\src\\JIT\r\n          D:\\j\\workspace\\x86_checked_w---b7304e59\\tests\\src\\JIT\\Directed\\rvastatics\\RVAOrderingTest.ilproj DebugType-n/a-SuffixNone\r\n          D:\\j\\workspace\\x86_checked_w---b7304e59\\tests\\src\\JIT\\Directed\\rvastatics\\RVAOrderingTest.ilproj Optimize-n/a\r\n          7030 projects, 1 needed fixes, 0 were fixed\r\n          Expected: 100\r\n          Actual: -1\r\n          END EXECUTION - FAILED\r\n          FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n          > D:\\j\\workspace\\x86_checked_w---b7304e59\\bin\\tests\\Windows_NT.x86.Checked\\JIT\\CheckProjects\\CheckProjects\\CheckProjects.cmd\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24106","RelatedDescription":"Open issue \"[x86] Test failed: JIT\\CheckProjects\\CheckProjects\\CheckProjects.cmd\" (#24106)"},{"Id":"434964966","IsPullRequest":true,"CreatedAt":"2019-04-19T00:44:57","Actor":"tannergooding","Number":"24102","RawContent":null,"Title":"Adding Sse2.StoreScalar(long*, V128) which will replace Sse2.StoreLow(long*, V128)","State":"closed","Body":"This is the CoreCLR side of https://github.com/dotnet/corefx/issues/36746.\r\n\r\nOnce this is merged and flows into CoreFX, the reference assembly can be updated. Then, that will flow back into CoreCLR at which point we can remove the old API and fixup the tests. Doing it this way (as we have in the past) minimizes the risk of CoreFX/CoreCLR getting out of sync and being in a \"torn\" state.","Url":"https://github.com/dotnet/coreclr/pull/24102","RelatedDescription":"Closed or merged PR \"Adding Sse2.StoreScalar(long*, V128) which will replace Sse2.StoreLow(long*, V128)\" (#24102)"},{"Id":"434966306","IsPullRequest":true,"CreatedAt":"2019-04-19T00:33:23","Actor":"omajid","Number":"24103","RawContent":null,"Title":"Don't return value types as const","State":"closed","Body":"These types are value types; they are returned by copying. Marking the\r\nreturn type as const has no effect: since the value is copied, the\r\ncaller can modify it anyway.\r\n\r\nThis resolves all the -Wignored-qualifiers warnings produced by clang 7\r\n(when those warnings are explicitly enabled).","Url":"https://github.com/dotnet/coreclr/pull/24103","RelatedDescription":"Closed or merged PR \"Don't return value types as const\" (#24103)"},{"Id":"434987905","IsPullRequest":true,"CreatedAt":"2019-04-18T23:29:39","Actor":"BruceForstall","Number":"24105","RawContent":null,"Title":"Reduce the number of Linux arm32 periodic jobs triggered","State":"closed","Body":"Only the corefx jobs are left. The rest should be done in AzDO,\r\nand scheduling both AzDO and Jenkins is causing too much work\r\nfor the few machines we have.","Url":"https://github.com/dotnet/coreclr/pull/24105","RelatedDescription":"Closed or merged PR \"Reduce the number of Linux arm32 periodic jobs triggered\" (#24105)"},{"Id":"434974260","IsPullRequest":false,"CreatedAt":"2019-04-18T21:52:55","Actor":"noahfalk","Number":"24104","RawContent":null,"Title":"Can I register a callback to be called before or after GC?","State":"open","Body":"@ygc369 [Commented on another thread](https://github.com/dotnet/coreclr/pull/22866#issuecomment-484040178), but it is a new issue so moving it here:\r\n\r\n>  @Maoni0\r\nCan I register a callback to be called before or after GC? Just in my program, not in profile.\r\n\r\nAnd the answer: You might be interested in [this technique](https://blogs.msdn.microsoft.com/maoni/2019/04/08/a-portable-way-to-get-gc-events-in-process-and-no-admin-privilege-with-10-lines-of-code-and-ability-to-dynamically-enable-disable-events/).\r\n","Url":"https://github.com/dotnet/coreclr/issues/24104","RelatedDescription":"Open issue \"Can I register a callback to be called before or after GC?\" (#24104)"},{"Id":"434957991","IsPullRequest":true,"CreatedAt":"2019-04-18T21:01:52","Actor":"sywhang","Number":"24101","RawContent":null,"Title":"Eventpipe Crst ordering fix","State":"open","Body":"Addresses https://github.com/dotnet/coreclr/issues/23412","Url":"https://github.com/dotnet/coreclr/pull/24101","RelatedDescription":"Open PR \"Eventpipe Crst ordering fix\" (#24101)"},{"Id":"434946970","IsPullRequest":true,"CreatedAt":"2019-04-18T20:30:06","Actor":"filipnavara","Number":"24100","RawContent":null,"Title":"[System.Globalization.Native] Fix small issues in CloneCollatorWithOptions","State":"open","Body":"The collator object returned by `CloneCollatorWithOptions` is cached so this is not a performance critical path. However, some mistakes were made in PR #22378 that made it perform a little less efficiently than it used to.\r\n\r\n/cc @janvorli @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/24100","RelatedDescription":"Open PR \"[System.Globalization.Native] Fix small issues in CloneCollatorWithOptions\" (#24100)"},{"Id":"434742936","IsPullRequest":true,"CreatedAt":"2019-04-18T20:23:44","Actor":"filipnavara","Number":"24085","RawContent":null,"Title":"[System.Globalization.Native] Fix regressions from #22378 and #22390","State":"closed","Body":"Address few regressions from #22378. Avoid using `calloc` in order to remove overhead from unnecessary zeroing of memory.\r\n\r\nFix reallocation in `AddItem` (pal_collation.c) to prevent accidental overflow and to use correct element size. Previously it allocated more memory due to incorrectly multiplying by `sizeof(UChar*)` instead of `sizeof(UChar)`.\r\n\r\nFix performance regression from #22390 (tracked in https://github.com/aspnet/AspNetCore/issues/9404). `tsearch` performance on glibc is vastly inferior to `tfind` so prefer to use the later. On macOS the performance of either approach was nearly identical.","Url":"https://github.com/dotnet/coreclr/pull/24085","RelatedDescription":"Closed or merged PR \"[System.Globalization.Native] Fix regressions from #22378 and #22390\" (#24085)"},{"Id":"434943287","IsPullRequest":true,"CreatedAt":"2019-04-18T20:19:53","Actor":"filipnavara","Number":"24099","RawContent":null,"Title":"[System.Globalization.Native] Fix performance regression on glibc on Linux","State":"open","Body":"Fixes aspnet/AspNetCore#9404, caused by #22390.\r\n\r\nRunning the [tsearch vs. tfind test code](https://gist.github.com/filipnavara/31791b216078706e0b465f7a103ff01f) on Ubuntu in Azure resulted in 18% performance improvement in favour of running `tfind` first and only using `tsearch` as fallback. On macOS the performance is nearly identical.\r\n\r\n/cc @janvorli @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/24099","RelatedDescription":"Open PR \"[System.Globalization.Native] Fix performance regression on glibc on Linux\" (#24099)"},{"Id":"434939466","IsPullRequest":true,"CreatedAt":"2019-04-18T20:09:38","Actor":"mjsabby","Number":"24098","RawContent":null,"Title":"Large Pages on Linux & macOS","State":"open","Body":"Part of #18371.\r\n\r\nThis change adds Large Pages support for Linux (embedded GC, standalone was done in a previous change) and macOS (both embedded GC and standalone).","Url":"https://github.com/dotnet/coreclr/pull/24098","RelatedDescription":"Open PR \"Large Pages on Linux & macOS\" (#24098)"},{"Id":"434939006","IsPullRequest":false,"CreatedAt":"2019-04-18T20:08:22","Actor":"Korporal","Number":"24097","RawContent":null,"Title":"Question - string pool","State":"open","Body":"This may not be the correct place for my question, if so just let me know.\r\n\r\nI'm interested in programmatically opening an assembly DLL file and then getting at every string constant that is present.\r\n\r\nIs there a way to get at this data? I'd expect to see an array or sequence of string values, I do not care where these were declared/defined, seeing all strings as a simple sequence/arrays is all I need.\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/coreclr/issues/24097","RelatedDescription":"Open issue \"Question - string pool\" (#24097)"},{"Id":"434933385","IsPullRequest":true,"CreatedAt":"2019-04-18T19:52:44","Actor":"VSadov","Number":"24096","RawContent":null,"Title":"System.GC.AllocateUninitializedArray","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24096","RelatedDescription":"Open PR \"System.GC.AllocateUninitializedArray\" (#24096)"},{"Id":"434899401","IsPullRequest":true,"CreatedAt":"2019-04-18T18:25:33","Actor":"omajid","Number":"24095","RawContent":null,"Title":"Null-terminate buffers that strncpy writes to","State":"open","Body":"It is possible that the string being copied is so large that `strncpy` fills up the destination array and does not write any null characters to it. That will lead to buffer overflows. Work around that by always writing a null character at the end of the destination array.","Url":"https://github.com/dotnet/coreclr/pull/24095","RelatedDescription":"Open PR \"Null-terminate buffers that strncpy writes to\" (#24095)"},{"Id":"434888141","IsPullRequest":false,"CreatedAt":"2019-04-18T17:55:52","Actor":"brianrob","Number":"24093","RawContent":null,"Title":"All IBC Scenarios Are Treated as Duplicates","State":"open","Body":"Per @briansull, it appears that all IBC scenarios on Linux are treated as duplicates because the command line is only returning the exe name and not the full command line.\r\n\r\nThis results in only a single process across all of the scenarios being used to optimize the target assembly.\r\n\r\nLinux:\r\n```\r\n    <Scenario ordinal=\"1\" scenario=\"A\" mask=\"0x0001\" priority=\"0\" numRuns=\"5\" name=\"/__w/1/s/artifacts/output/FXx64LINmas/IBC/cli/x64/dotnet\">\r\n      <Run runTime=\"1/1/1601 1:00:00\" cmdLine=\"/__w/1/s/artifacts/output/FXx64LINmas/IBC/cli/x64/dotnet\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"b1e0f044-1b92-4e7f-b5fe-90220dba9938\" />\r\n      <Run runTime=\"1/1/1601 1:00:00\" cmdLine=\"/__w/1/s/artifacts/output/FXx64LINmas/IBC/cli/x64/dotnet\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"b1e0f044-1b92-4e7f-b5fe-90220dba9938\" />\r\n     <Run runTime=\"1/1/1601 1:00:00\" cmdLine=\"/__w/1/s/artifacts/output/FXx64LINmas/IBC/cli/x64/dotnet\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"b1e0f044-1b92-4e7f-b5fe-90220dba9938\" />\r\n      <Run runTime=\"1/1/1601 1:00:00\" cmdLine=\"/__w/1/s/artifacts/output/FXx64LINmas/IBC/cli/x64/dotnet\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"b1e0f044-1b92-4e7f-b5fe-90220dba9938\" />\r\n      <Run runTime=\"1/1/1601 1:00:00\" cmdLine=\"/__w/1/s/artifacts/output/FXx64LINmas/IBC/cli/x64/dotnet\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"b1e0f044-1b92-4e7f-b5fe-90220dba9938\" />\r\n    </Scenario>\r\n```\r\nWindows:\r\n```\r\n    <Scenario ordinal=\"1\" scenario=\"A\" mask=\"0x0008\" priority=\"0\" numRuns=\"1\" name=\"dotnet.exe\">\r\n      <Run runTime=\"3/13/2019 19:48:05\" cmdLine=\"&quot;dotnet.exe&quot; exec F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\MSBuild.dll -maxcpucount -verbosity:m -nologo -target:Restore F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\DotNet_HelloWorld\\DotNet_HelloWorld.csproj -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\dotnet.dll\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"c2b7bd8d-4c01-4d7a-bf5e-bc3538175ef0\" />\r\n    </Scenario>\r\n    <Scenario ordinal=\"2\" scenario=\"B\" mask=\"0x0004\" priority=\"0\" numRuns=\"1\" name=\"dotnet.exe\">\r\n      <Run runTime=\"3/13/2019 19:48:24\" cmdLine=\"&quot;dotnet.exe&quot; exec F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\MSBuild.dll -maxcpucount -verbosity:m -nologo -target:Restore -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\dotnet.dll\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"c2b7bd8d-4c01-4d7a-bf5e-bc3538175ef0\" />\r\n    </Scenario>\r\n    <Scenario ordinal=\"3\" scenario=\"C\" mask=\"0x0002\" priority=\"0\" numRuns=\"1\" name=\"F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\dotnet.exe\">\r\n      <Run runTime=\"3/13/2019 19:48:42\" cmdLine=\"&quot;F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\dotnet.exe&quot;  exec &quot;F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\Roslyn\\bincore\\csc.dll&quot; /noconfig @&quot;C:\\Users\\vsagent\\AppData\\Local\\Temp\\tmp91b053281ab444bc847231338352eda8.rsp&quot;\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"c2b7bd8d-4c01-4d7a-bf5e-bc3538175ef0\" />\r\n    </Scenario>\r\n    <Scenario ordinal=\"4\" scenario=\"D\" mask=\"0x0001\" priority=\"0\" numRuns=\"1\" name=\"dotnet.exe\">\r\n     <Run runTime=\"3/13/2019 19:48:30\" cmdLine=\"&quot;dotnet.exe&quot; exec F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\MSBuild.dll -maxcpucount -verbosity:m -restore -consoleloggerparameters:Summary -target:Build -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,F:\\vsagent\\51\\s\\artifacts\\output\\FXx64WINmas\\IBC\\cli\\x64\\sdk\\3.0.100-preview4-010738\\dotnet.dll\" systemInfo=\"&lt;machine,OS&gt;\" mvid=\"c2b7bd8d-4c01-4d7a-bf5e-bc3538175ef0\" />\r\n    </Scenario>\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24093","RelatedDescription":"Open issue \"All IBC Scenarios Are Treated as Duplicates\" (#24093)"},{"Id":"434883151","IsPullRequest":false,"CreatedAt":"2019-04-18T17:43:22","Actor":"mikem8361","Number":"24092","RawContent":null,"Title":"Remove SOS and lldb plugin from the coreclr repo","State":"open","Body":"SOS and the lldb plugin now live in the [diagnostics](https://github.com/dotnet/diagnostics.git) repo.  We are almost ready to remove them from the coreclr repo probably in the Preview 6 time frame.\r\n\r\nWe are still waiting for the new SOS to shipping with the next public release of the Windows debugger (windbg) and there are still some OS/architecture holes in the diagnostics repo's build (and test) matrix (i.e. arm, arm64, FreeBSD, etc.).","Url":"https://github.com/dotnet/coreclr/issues/24092","RelatedDescription":"Open issue \"Remove SOS and lldb plugin from the coreclr repo\" (#24092)"},{"Id":"434876039","IsPullRequest":true,"CreatedAt":"2019-04-18T17:24:55","Actor":"wtgodbe","Number":"24090","RawContent":null,"Title":"Mark packages stable for 1.0.18","State":"closed","Body":"CC @safern ","Url":"https://github.com/dotnet/coreclr/pull/24090","RelatedDescription":"Closed or merged PR \"Mark packages stable for 1.0.18\" (#24090)"},{"Id":"434876101","IsPullRequest":true,"CreatedAt":"2019-04-18T17:24:50","Actor":"wtgodbe","Number":"24091","RawContent":null,"Title":"Mark packages stable for 1.1.13","State":"closed","Body":"CC @safern ","Url":"https://github.com/dotnet/coreclr/pull/24091","RelatedDescription":"Closed or merged PR \"Mark packages stable for 1.1.13\" (#24091)"},{"Id":"434861658","IsPullRequest":false,"CreatedAt":"2019-04-18T16:45:29","Actor":"4creators","Number":"24089","RawContent":null,"Title":"Test failure: PInvoke Interop\\PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.cmd [FAIL]","State":"open","Body":"Building and running tests on commit 837ac49c1ac46729df88ddb4a5d73ade6cc55cfc on Windows 10 Ent 1809 en-US with custom system wide date time format settings results in PInvoke DateTimeTest failure:\r\n\r\n```\r\n        Interop\\PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.cmd [FAIL]\r\n\r\n        Return code:      1\r\n        Raw output file:      E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\Interop.PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" DateTimeTest.exe\r\n        Test Failure: TestLibrary.AssertTestException: Assert.IsTrue: Marshal_In_stdcall : Returned false\r\n           at TestLibrary.Assert.HandleFail(String assertionName, String message) in E:\\src\\ms\\dotnet\\coreclr\\tests\\src\\Common\\CoreCLRTestLibrary\\Assertion.cs:line 725\r\n           at DatetimeTest.Main(String[] args) in E:\\src\\ms\\dotnet\\coreclr\\tests\\src\\Interop\\PInvoke\\DateTime\\DateTimeTest.cs:line 111\r\n        FAILURE! InDATE expected '07/04/2008' but received: 2008-07-04\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n        > E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.cmd\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\Interop.PInvoke\\Interop.PInvoke.XUnitWrapper.cs(5349,0): at Interop_PInvoke._DateTime_DateTimeTest_DateTimeTest_._DateTime_DateTimeTest_DateTimeTest_cmd()\r\n        Output:\r\n\r\n          Return code:      1\r\n          Raw output file:      E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\Interop.PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n           \"E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" DateTimeTest.exe\r\n          Test Failure: TestLibrary.AssertTestException: Assert.IsTrue: Marshal_In_stdcall : Returned false\r\n             at TestLibrary.Assert.HandleFail(String assertionName, String message) in E:\\src\\ms\\dotnet\\coreclr\\tests\\src\\Common\\CoreCLRTestLibrary\\Assertion.cs:line 725\r\n             at DatetimeTest.Main(String[] args) in E:\\src\\ms\\dotnet\\coreclr\\tests\\src\\Interop\\PInvoke\\DateTime\\DateTimeTest.cs:line 111\r\n          FAILURE! InDATE expected '07/04/2008' but received: 2008-07-04\r\n          Expected: 100\r\n          Actual: 101\r\n          END EXECUTION - FAILED\r\n          FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n          > E:\\src\\ms\\dotnet\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.cmd\r\n```\r\n\r\nCustom date time format set on system: \r\n\r\n![Regional date time format settings](https://user-images.githubusercontent.com/801959/56377060-c4f30780-6209-11e9-8236-77d9ab4ff327.png)\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\ndotnet --info\r\nTools are already initialized.\r\nRunning: dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   E:\\src\\ms\\dotnet\\coreclr\\.dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [E:\\src\\ms\\dotnet\\coreclr\\.dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [E:\\src\\ms\\dotnet\\coreclr\\.dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [E:\\src\\ms\\dotnet\\coreclr\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [E:\\src\\ms\\dotnet\\coreclr\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24089","RelatedDescription":"Open issue \"Test failure: PInvoke Interop\\PInvoke\\DateTime\\DateTimeTest\\DateTimeTest.cmd [FAIL]\" (#24089)"},{"Id":"434857229","IsPullRequest":true,"CreatedAt":"2019-04-18T16:33:14","Actor":"omajid","Number":"24088","RawContent":null,"Title":"Add a destructor for MethodCallSummarizer","State":"open","Body":"The destructor cleans up resources allocated by MethodCallSummarizer during its normal lifetime.","Url":"https://github.com/dotnet/coreclr/pull/24088","RelatedDescription":"Open PR \"Add a destructor for MethodCallSummarizer\" (#24088)"},{"Id":"434846110","IsPullRequest":false,"CreatedAt":"2019-04-18T16:04:54","Actor":"EgorBo","Number":"24087","RawContent":null,"Title":"Inconsistency in RuntimeMethodHandle.InvokeMethod","State":"open","Body":"As far as I understand all exceptions happened in methods/properties called via reflection should be wrapped with `TargetInvocationException` unless `BindingFlags.DoNotWrapExceptions` is specified.\r\n\r\n```csharp\r\nusing System;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        // 1) throws NullReferenceException:\r\n        typeof(Program).GetMethod(\"NullRef1\").Invoke(new Program(), null);\r\n\r\n        // 2) throws TargetInvocationException:\r\n        typeof(Program).GetMethod(\"NullRef2\").Invoke(new Program(), null);\r\n    }\r\n\r\n    public unsafe ref object NullRef1()\r\n    {\r\n        return ref Unsafe.AsRef<object>((void*) null);\r\n    }\r\n\r\n    public unsafe object NullRef2()\r\n    {\r\n        return Unsafe.AsRef<object>((void*) null);\r\n    }\r\n}\r\n```\r\n\r\nFor two similar cases here InvokeMethod throws different exceptions - is it by design?\r\nI suspect it happens here: https://github.com/dotnet/coreclr/blob/master/src/vm/reflectioninvocation.cpp#L1353 ","Url":"https://github.com/dotnet/coreclr/issues/24087","RelatedDescription":"Open issue \"Inconsistency in RuntimeMethodHandle.InvokeMethod\" (#24087)"},{"Id":"434676732","IsPullRequest":false,"CreatedAt":"2019-04-18T15:52:24","Actor":"ashishnegi","Number":"24084","RawContent":null,"Title":"GetDirectoryName : different behavior in windows or linux","State":"closed","Body":"Steps:\r\n1. dotnet new console -o dirpath\r\n2. change Program.cs to \r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace dirpath\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(System.IO.Path.GetDirectoryName(\"//a/b/c/bin/d/d.e/NS/b.c.f.g.dll\"));\r\n            Console.WriteLine(System.IO.Path.GetDirectoryName(@\"\\\\a\\b\\c\\bin\\d\\d.e\\NS\\b.c.f.g.dll\"));\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nOutput on windows:\r\n```cmd\r\nXX>y\\dotnet-sdk-2.2.202-win-x64\\dotnet.exe run\r\n\\\\a\\b\\c\\bin\\d\\d.e\\NS\r\n\\\\a\\b\\c\\bin\\d\\d.e\\NS\r\nHello World!\r\nXX>\r\n```\r\n\r\nOutput on Linux:\r\n```bash\r\ntestadm@asdi1-1:~/dirpath$ dotnet run\r\n/a/b/c/bin/d/d.e/NS\r\n\r\nHello World!\r\n```\r\n\r\nProblem: \r\n`Console.WriteLine(System.IO.Path.GetDirectoryName(@\"\\\\a\\b\\c\\bin\\d\\d.e\\NS\\b.c.f.g.dll\"));` gives no output on Linux.\r\n\r\nExpected:\r\nBehavior on windows and Linux is same.\r\n\r\nReal world use case:\r\nTo get the path of executing assembly, `assemnly.codebase` is [recommended](https://stackoverflow.com/questions/52797/how-do-i-get-the-path-of-the-assembly-the-code-is-in).\r\nIn below code on `Linux`, variable `path` is in `\\\\a\\b\\c\\a.dll` format.\r\n```cs\r\n            var path = new System.Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath;\r\n            var dirPath = Path.GetDirectoryName(path); // empty on Linux and right on windows.\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24084","RelatedDescription":"Closed issue \"GetDirectoryName : different behavior in windows or linux\" (#24084)"},{"Id":"434763306","IsPullRequest":false,"CreatedAt":"2019-04-18T13:12:11","Actor":"IgorXq","Number":"24086","RawContent":null,"Title":"error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.","State":"open","Body":"Cannot get rid of  weird error\r\n\r\n>  error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.\r\n\r\nwhen I build the project with CLI  **dotnet build**  \r\n\r\nHad to uninstall all related .Net stuff (all SDKs, .Net runtimes and VS2017 )  then reinstalled VS2019 Community from scratch. The issue is still the same - I am able to build and run the application with VS but can **not** build  or run any of existing proejcts from CLI. \r\nIt still fails with mentioned error.\r\n\r\nIt is not obvious what version of SDK it complains for, I try to install consecutively all SDKs from Microsoft \"downloads\" page but nothing helps.\r\n\r\nCurrently \r\n**dotnet --list-sdks**\r\n\r\nproduces the output:\r\n\r\n> 2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.105 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.106 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\nI have checked several related issues here but all of them have been closed and none of them proposes  relevant solution.","Url":"https://github.com/dotnet/coreclr/issues/24086","RelatedDescription":"Open issue \"error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.\" (#24086)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"435036410","IsPullRequest":true,"CreatedAt":"2019-04-19T03:27:46","Actor":"heng-liu","Number":"11197","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into CLI master ","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.5965 into master","Url":"https://github.com/dotnet/cli/pull/11197","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into CLI master \" (#11197)"},{"Id":"435033064","IsPullRequest":true,"CreatedAt":"2019-04-19T03:06:28","Actor":"nugetlurker","Number":"11196","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11196","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into cli\" (#11196)"},{"Id":"435033051","IsPullRequest":true,"CreatedAt":"2019-04-19T03:06:24","Actor":"nugetlurker","Number":"11195","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11195","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into cli\" (#11195)"},{"Id":"435003468","IsPullRequest":true,"CreatedAt":"2019-04-19T02:46:41","Actor":"dotnet-bot","Number":"11192","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11192","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11192)"},{"Id":"434010689","IsPullRequest":true,"CreatedAt":"2019-04-19T02:46:18","Actor":"dotnet-bot","Number":"11178","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11178","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11178)"},{"Id":"434010674","IsPullRequest":true,"CreatedAt":"2019-04-19T02:45:56","Actor":"dotnet-bot","Number":"11177","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11177","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11177)"},{"Id":"435029130","IsPullRequest":false,"CreatedAt":"2019-04-19T02:41:47","Actor":"wli3","Number":"11194","RawContent":null,"Title":"DotnetCommand created in test should run on stage2","State":"open","Body":"not stage0. Or it should caught SDK + dotnet tools bug much earlier during insertion to CLI\r\n\r\nThis was the case before arcade ","Url":"https://github.com/dotnet/cli/issues/11194","RelatedDescription":"Open issue \"DotnetCommand created in test should run on stage2\" (#11194)"},{"Id":"435028507","IsPullRequest":true,"CreatedAt":"2019-04-19T02:37:50","Actor":"wli3","Number":"11193","RawContent":null,"Title":"Update stage 0 and adjust to s.t.json api","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11193","RelatedDescription":"Open PR \"Update stage 0 and adjust to s.t.json api\" (#11193)"},{"Id":"434258478","IsPullRequest":true,"CreatedAt":"2019-04-18T21:13:18","Actor":"dotnet-maestro[bot]","Number":"11184","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11184","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#11184)"},{"Id":"434010646","IsPullRequest":true,"CreatedAt":"2019-04-18T21:10:32","Actor":"dotnet-bot","Number":"11176","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11176","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11176)"},{"Id":"434010630","IsPullRequest":true,"CreatedAt":"2019-04-18T21:10:07","Actor":"dotnet-bot","Number":"11175","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11175","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11175)"},{"Id":"434010613","IsPullRequest":true,"CreatedAt":"2019-04-18T18:16:50","Actor":"dotnet-bot","Number":"11174","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11174","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11174)"},{"Id":"434739767","IsPullRequest":true,"CreatedAt":"2019-04-18T12:45:45","Actor":"dotnet-maestro[bot]","Number":"11191","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 1:05 PM\r\n- **Commit**: b415d1449b526338fba996d87c92a9de7f5286b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19217.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11191","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11191)"},{"Id":"434635336","IsPullRequest":false,"CreatedAt":"2019-04-18T07:48:45","Actor":"YunWeiaa","Number":"11190","RawContent":null,"Title":"Install global tool failed with error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'any'.","State":"open","Body":"## Steps to reproduce\r\nRequire: machine also install netcoreapp2.1 runtime since \"dotnetsay\" is targeting 2.1. This should not be required when netcoreapp3.0 is released and dotnetsay is updated\r\n1. Create empty directory\r\n2. not yet implemented Run dotnet new tool-manifest\r\n\ta. In the meantime copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n\"version\": 1,\r\n\"isRoot\": true,\r\n\"tools\": {}\r\n}\r\n3. cd to the directory with manifest file\r\n4. run dotnet tool install dotnetsay\r\n## Expected  behavior\r\nRun dotnet tool install dotnetsay succeeded.\r\n\r\n## Actual behavior\r\nRun failed with error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'any'.\r\n![image](https://user-images.githubusercontent.com/33921754/56344804-e72c5b80-61f0-11e9-9813-28f48c941a6d.png)\r\n\r\n\r\n\r\n## Environment data\r\nD16.0/28803.202(16.0.2) + CLI/SDK: 3.0.100-preview5-011354\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011354\r\n Commit:    3796a49205\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011354\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27617-04\r\n  Commit:  f28abecf15\r\n\r\n.NET Core SDKs installed:\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011354 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19217-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27617-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27617-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11190","RelatedDescription":"Open issue \"Install global tool failed with error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'any'.\" (#11190)"},{"Id":"434554135","IsPullRequest":true,"CreatedAt":"2019-04-18T03:24:04","Actor":"peterhuene","Number":"11188","RawContent":null,"Title":"Insert latest 2.1.6xx SDK.","State":"closed","Body":"Bump SDK version to `2.1.600-preview-64018-02`.\r\n","Url":"https://github.com/dotnet/cli/pull/11188","RelatedDescription":"Closed or merged PR \"Insert latest 2.1.6xx SDK.\" (#11188)"},{"Id":"434554490","IsPullRequest":true,"CreatedAt":"2019-04-18T02:34:15","Actor":"peterhuene","Number":"11189","RawContent":null,"Title":"Insert latest 2.2.2xx SDK.","State":"closed","Body":"Bump SDK version to `2.2.200-preview-64018-01`.","Url":"https://github.com/dotnet/cli/pull/11189","RelatedDescription":"Closed or merged PR \"Insert latest 2.2.2xx SDK.\" (#11189)"},{"Id":"434483914","IsPullRequest":true,"CreatedAt":"2019-04-17T23:05:41","Actor":"nguerrera","Number":"11187","RawContent":null,"Title":"Revert \"Update FSharp compiler to 10.4.3\" (2.1.7xx)","State":"closed","Body":"Reverts dotnet/cli#11181\r\n\r\nThe F# change was not approved to go into VS so must be reverted from CLI","Url":"https://github.com/dotnet/cli/pull/11187","RelatedDescription":"Closed or merged PR \"Revert \"Update FSharp compiler to 10.4.3\" (2.1.7xx)\" (#11187)"},{"Id":"434483431","IsPullRequest":true,"CreatedAt":"2019-04-17T22:34:15","Actor":"nguerrera","Number":"11186","RawContent":null,"Title":"Revert \"Update FSharp Compiler to 10.4.3\" (2.2.3xx)","State":"closed","Body":"Reverts dotnet/cli#11182\r\n\r\nThe F# change was not approved into VS, so removing it from CLI","Url":"https://github.com/dotnet/cli/pull/11186","RelatedDescription":"Closed or merged PR \"Revert \"Update FSharp Compiler to 10.4.3\" (2.2.3xx)\" (#11186)"},{"Id":"434035136","IsPullRequest":true,"CreatedAt":"2019-04-17T20:32:21","Actor":"wli3","Number":"11179","RawContent":null,"Title":"dotnet tool uninstall should find the first manifest file contain package id","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/11139  , a lot of file touched. But most of them are locs\r\n\r\nInstead of the first manifest file regardless. So, the behavior is aligned with tool update.\r\nExtract method ToolManifestFinderExtensions from tool update. And use them in both places.\r\n\r\nI changed the following to make it generic. Since the user just type the command, I don't think uninstall or update in the error message is significant.\r\n\r\n\"If you intended **to uninstall** on a global tool, use the `--global` option for the command.\" to \"If you intended **to perform an action** on a global tool, use the `--global` option for the command.\"","Url":"https://github.com/dotnet/cli/pull/11179","RelatedDescription":"Closed or merged PR \"dotnet tool uninstall should find the first manifest file contain package id\" (#11179)"},{"Id":"434438122","IsPullRequest":false,"CreatedAt":"2019-04-17T19:02:03","Actor":"wli3","Number":"11185","RawContent":null,"Title":"User facing string review","State":"open","Body":"https://github.com/dotnet/cli/pull/11179\r\nhttps://github.com/dotnet/cli/pull/11143\r\n\r\nHas not been review by PM","Url":"https://github.com/dotnet/cli/issues/11185","RelatedDescription":"Open issue \"User facing string review\" (#11185)"},{"Id":"434122933","IsPullRequest":true,"CreatedAt":"2019-04-17T16:11:17","Actor":"KevinRansom","Number":"11181","RawContent":null,"Title":"Update FSharp compiler to 10.4.3","State":"closed","Body":"Update FSharp compiler to 10.4.3","Url":"https://github.com/dotnet/cli/pull/11181","RelatedDescription":"Closed or merged PR \"Update FSharp compiler to 10.4.3\" (#11181)"},{"Id":"434136217","IsPullRequest":true,"CreatedAt":"2019-04-17T16:10:55","Actor":"KevinRansom","Number":"11182","RawContent":null,"Title":"Update FSharp Compiler to 10.4.3","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11182","RelatedDescription":"Closed or merged PR \"Update FSharp Compiler to 10.4.3\" (#11182)"},{"Id":"434250588","IsPullRequest":true,"CreatedAt":"2019-04-17T12:52:14","Actor":"dotnet-maestro[bot]","Number":"11183","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/16/2019 1:04 PM\r\n- **Commit**: 2426d6e864763c91faa0081fae898f71477f969f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11183","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11183)"},{"Id":"433774586","IsPullRequest":false,"CreatedAt":"2019-04-17T11:11:17","Actor":"PDostalek","Number":"11168","RawContent":null,"Title":"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"","State":"closed","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\n\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question to Core team.\r\n\r\nCould you help please? Thanks!**\r\n\r\nSource:\r\nRoll forward on no candidate framework (0=off, 1=roll minor, 2=roll major & minor).\r\n\r\nFile Name:\r\ndotnet\\commands\\dotnet-help\\xlf\\LocalizableStrings.xlf\r\n\r\nResource ID:\r\n0; \"RollForwardOnNoCandidateFxDefinition\"\r\n\r\nQuery:\r\nPlease define the meaning of \"no candidate framework\".","Url":"https://github.com/dotnet/cli/issues/11168","RelatedDescription":"Closed issue \"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"\" (#11168)"},{"Id":"434068186","IsPullRequest":true,"CreatedAt":"2019-04-17T03:40:47","Actor":"dotnet-maestro[bot]","Number":"11180","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11180","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11180)"},{"Id":"433960607","IsPullRequest":true,"CreatedAt":"2019-04-16T22:26:36","Actor":"nguerrera","Number":"11173","RawContent":null,"Title":"dotnet/sdk 2.1.700-preview-64015-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11173","RelatedDescription":"Closed or merged PR \"dotnet/sdk 2.1.700-preview-64015-02\" (#11173)"},{"Id":"433943551","IsPullRequest":true,"CreatedAt":"2019-04-16T21:44:37","Actor":"peterhuene","Number":"11172","RawContent":null,"Title":"Update branding to 2.2.204.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11172","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.204.\" (#11172)"},{"Id":"433943349","IsPullRequest":true,"CreatedAt":"2019-04-16T21:15:30","Actor":"peterhuene","Number":"11171","RawContent":null,"Title":"Update branding to 2.2.107.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11171","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.107.\" (#11171)"},{"Id":"433943140","IsPullRequest":true,"CreatedAt":"2019-04-16T21:12:02","Actor":"peterhuene","Number":"11170","RawContent":null,"Title":"Update branding to 2.1.604.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11170","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.604.\" (#11170)"},{"Id":"433942911","IsPullRequest":true,"CreatedAt":"2019-04-16T20:59:50","Actor":"peterhuene","Number":"11169","RawContent":null,"Title":"Update branding to 2.1.507.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11169","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.507.\" (#11169)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-19T01:28:32","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"SUGGESTION: Please Make AsnReader And AnsWriter Public","State":"closed","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Closed issue \"SUGGESTION: Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-18T21:04:03","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"open","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Open PR \"Add Overrides\" (#1158)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-18T12:03:42","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-18T10:46:00","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"open","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Open issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434651584","IsPullRequest":false,"CreatedAt":"2019-04-18T08:32:08","Actor":"FrankyBoy","Number":"1155","RawContent":null,"Title":"Replace System.IO.File / System.IO.Directory with interfaces","State":"open","Body":"Sorry if this already exists but I couldn't find anything. The only thing remotely similar is [IFileProvider](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.fileproviders.ifileprovider?view=aspnetcore-2.2) which does not offer write support in any way and read support only through streams.\r\n\r\nI think it would be really helpful to have replacements for the static methods in [System.IO.File](https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=netcore-2.2) and System.IO.Directory (and potentially others) with an interface that can be injected via DI. Right now I find that on each project that somehow touches files I have some IFileHandler or similar which allows for basic file handling (read/write) without making my code untestable by unit tests. I think this would make much more sense to be included in the standard itself.\r\n\r\nAlso, including such an interface would allow libraries that may need file access to not do so directly. I.e. library can just depend on `IFileHandler` and the library user can implement their own functionality on top of that (maybe they actually want their \"files\" to go to a centralized DB instead of the filesystem?). ","Url":"https://github.com/dotnet/standard/issues/1155","RelatedDescription":"Open issue \"Replace System.IO.File / System.IO.Directory with interfaces\" (#1155)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-18T00:56:08","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"open","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Open PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-18T00:54:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"open","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Open PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-18T00:27:39","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"open","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Open PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-13T07:42:03","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"open","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Open issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"},{"Id":"432357589","IsPullRequest":false,"CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Number":"1138","RawContent":null,"Title":"Xml validate [ type is not declared ]","State":"open","Body":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```","Url":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Open issue \"Xml validate [ type is not declared ]\" (#1138)"},{"Id":"431985706","IsPullRequest":true,"CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Number":"1137","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1137)"},{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"},{"Id":"430411848","IsPullRequest":true,"CreatedAt":"2019-04-08T12:13:43","Actor":"dotnet-maestro[bot]","Number":"1130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19207.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1130)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"434625964","IsPullRequest":true,"CreatedAt":"2019-04-19T04:15:38","Actor":"wfurt","Number":"36990","RawContent":null,"Title":"add test for connection  timeouts","State":"closed","Body":"This mimics existing SmallConnectionTimeout_SubsequentRequestUsesDifferentConnection() test.\r\n\r\nThis is test only change.\r\ncloses #35266\r\n","Url":"https://github.com/dotnet/corefx/pull/36990","RelatedDescription":"Closed or merged PR \"add test for connection  timeouts\" (#36990)"},{"Id":"434743016","IsPullRequest":true,"CreatedAt":"2019-04-19T04:14:11","Actor":"Ponant","Number":"36994","RawContent":null,"Title":"Performance improvements in EmailAddressAttribute","State":"closed","Body":"Edit: My apologies, I made a mistake in the perf evaluation but that is corrected and does not change the proposed changes. Snapshots and text below have been adapted accordingly.\r\n\r\nI get a perf improvement by using `IndexOf` which ranges from a factor of 1 for an email address having 20 char to nearly 3 for 60 char.\r\nFor a 20 char email\r\n![Email20Char](https://user-images.githubusercontent.com/19961806/56381482-443a0880-6215-11e9-82e8-f68886588652.PNG)\r\n\r\nFor a 60 char email\r\n![Email60Char](https://user-images.githubusercontent.com/19961806/56381489-49975300-6215-11e9-8840-1869fbe48570.PNG)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36994","RelatedDescription":"Closed or merged PR \"Performance improvements in EmailAddressAttribute\" (#36994)"},{"Id":"435029753","IsPullRequest":false,"CreatedAt":"2019-04-19T02:45:33","Actor":"dotnet-mc-bot","Number":"37015","RawContent":null,"Title":"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)` has failed.\n\nFailure Message:\n```\nSystem.Net.Http.HttpRequestException : Error while copying content to a stream.\\r\n---- System.IO.IOException : The server returned an invalid or unrecognized response.\n```\n\nStack Trace:\n```\n   at System.Net.Http.HttpContent.LoadIntoBufferAsyncCore(Task serializeToStreamTask, MemoryStream tempBuffer) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpContent.cs:line 435\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs:line 487\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest.SendAsync_RequestVersion20_ResponseVersion20(Uri server) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.cs:line 2541\n--- End of stack trace from previous location where exception was thrown ---\n----- Inner Stack Trace -----\n   at System.Net.Http.Http2Connection.Http2Stream.TryReadFromBuffer(Span`1 buffer) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Stream.cs:line 383\n   at System.Net.Http.Http2Connection.Http2Stream.ReadDataAsync(Memory`1 buffer, CancellationToken cancellationToken) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Stream.cs:line 442\n   at System.IO.Stream.CopyToAsyncInternal(Stream destination, Int32 bufferSize, CancellationToken cancellationToken) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\IO\\Stream.cs:line 150\n   at System.Net.Http.HttpConnectionResponseContent.SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionResponseContent.cs:line 47\n   at System.Net.Http.HttpContent.LoadIntoBufferAsyncCore(Task serializeToStreamTask, MemoryStream tempBuffer) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpContent.cs:line 428\n```\n\nBuild : 3.0 - 20190418.8 (Core Tests)\nFailing configurations:\n- Windows.10.Nano.Amd64-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\n- Windows.10.Amd64.Core-x64\n  - Release\n- Windows.10.Arm64-arm64\n  - Release\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n- Windows.10.Amd64.Core-x86\n  - Release\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190418.8/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2~2FSendAsync_RequestVersion20_ResponseVersion20(server:%20https:~2F~2Fwww.microsoft.com~2F)","Url":"https://github.com/dotnet/corefx/issues/37015","RelatedDescription":"Open issue \"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)\" (#37015)"},{"Id":"434612024","IsPullRequest":true,"CreatedAt":"2019-04-19T02:27:40","Actor":"sywhang","Number":"36989","RawContent":null,"Title":"Expose new variants of EventCounter APIs","State":"closed","Body":"Exposing the new EventCounter variant APIs in reference assembly. \r\n\r\nAPI review: https://github.com/dotnet/corefx/issues/36129\r\n","Url":"https://github.com/dotnet/corefx/pull/36989","RelatedDescription":"Closed or merged PR \"Expose new variants of EventCounter APIs\" (#36989)"},{"Id":"435003955","IsPullRequest":true,"CreatedAt":"2019-04-19T00:03:42","Actor":"Dotnet-GitSync-Bot","Number":"37014","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @buyaa-n @bbartels","Url":"https://github.com/dotnet/corefx/pull/37014","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#37014)"},{"Id":"434964860","IsPullRequest":true,"CreatedAt":"2019-04-18T23:21:49","Actor":"joperezr","Number":"37009","RawContent":null,"Title":"Fix Json Source package not includding ArrayBufferWriter","State":"closed","Body":"Fixes #37006\r\n\r\ncc: @ahsonkhan @BrennanConroy @ericstj ","Url":"https://github.com/dotnet/corefx/pull/37009","RelatedDescription":"Closed or merged PR \"Fix Json Source package not includding ArrayBufferWriter\" (#37009)"},{"Id":"434904641","IsPullRequest":false,"CreatedAt":"2019-04-18T23:21:48","Actor":"BrennanConroy","Number":"37006","RawContent":null,"Title":"Microsoft.Bcl.Json.Sources is no longer netstandard2.0 compatible","State":"closed","Body":"The recent `Utf8JsonWriter` API changes added `ArrayBufferWriter` to System.Memory and reference that in the sources package. Unfortunately this makes the sources package no longer usable in netstandard2.0 libraries as they are stuck referencing System.Memory 4.5.2 and don't have `ArrayBufferWriter`.\r\n\r\nThis is blocking upstream dependency consumption.","Url":"https://github.com/dotnet/corefx/issues/37006","RelatedDescription":"Closed issue \"Microsoft.Bcl.Json.Sources is no longer netstandard2.0 compatible\" (#37006)"},{"Id":"434989901","IsPullRequest":true,"CreatedAt":"2019-04-18T22:55:20","Actor":"zsd4yr","Number":"37013","RawContent":null,"Title":"Update windows instructions to encourage VS 2019 preview explicitly ","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/37013","RelatedDescription":"Open PR \"Update windows instructions to encourage VS 2019 preview explicitly \" (#37013)"},{"Id":"434879755","IsPullRequest":true,"CreatedAt":"2019-04-18T22:47:29","Actor":"Dotnet-GitSync-Bot","Number":"37003","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @buyaa-n @bbartels","Url":"https://github.com/dotnet/corefx/pull/37003","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37003)"},{"Id":"434977676","IsPullRequest":false,"CreatedAt":"2019-04-18T22:05:09","Actor":"jcouv","Number":"37012","RawContent":null,"Title":"Proposal: DefaultCancellationAttribute","State":"open","Body":"## Rationale\r\n\r\nIn order to facilitate the language feature at https://github.com/dotnet/csharplang/issues/43 (async streams), which has been approved by the LDM and mostly implemented for C# 8.0, we should add the attribute `DefaultCancellationAttribute` to the framework.  \r\n\r\nThis attribute allows authors of async-enumerable methods to mark the parameter which should receive the cancellation token value from `IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken)`.\r\n\r\nWith this attribute, cancellation tokens can be passed in either way:\r\n\r\n```C#\r\nvar enumerable = Method(token);\r\nawait foreach (var item in enumerable) ...\r\n```\r\n\r\n```C#\r\nawait foreach (var item in givenEnumerable.WithCancellation(token)) ...\r\n```\r\n\r\n## Proposal\r\n\r\n```cs\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\r\n    public sealed class DefaultCancellationAttribute : Attribute\r\n    {\r\n        public DefaultCancellationAttribute();\r\n    }\r\n}\r\n```\r\n\r\nSee also https://github.com/dotnet/roslyn/pull/35121 (PR adding support for this attribute in the compiler)\r\nFYI @stephentoub @terrajobst @jaredpar ","Url":"https://github.com/dotnet/corefx/issues/37012","RelatedDescription":"Open issue \"Proposal: DefaultCancellationAttribute\" (#37012)"},{"Id":"434975553","IsPullRequest":true,"CreatedAt":"2019-04-18T21:57:20","Actor":"tarekgh","Number":"37011","RawContent":null,"Title":"Fix IDN Tests to support Unicode 11","State":"open","Body":"Windows 19H1  upgraded the IDN data to Unicode 11. The change here is to to use the new Unicode 11 IDN test data  in our tests.\r\n\r\nFixes #36758","Url":"https://github.com/dotnet/corefx/pull/37011","RelatedDescription":"Open PR \"Fix IDN Tests to support Unicode 11\" (#37011)"},{"Id":"434972922","IsPullRequest":true,"CreatedAt":"2019-04-18T21:48:27","Actor":"cston","Number":"37010","RawContent":null,"Title":"More porting of vbruntime","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/37010","RelatedDescription":"Open PR \"More porting of vbruntime\" (#37010)"},{"Id":"434945005","IsPullRequest":false,"CreatedAt":"2019-04-18T20:24:38","Actor":"wfurt","Number":"37008","RawContent":null,"Title":"Http2: Http tests hitting assert in Commit() sometimes","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37007~2Fmerge/test~2Ffunctional~2Fcli~2F~2Fouterloop~2F/20190418.2/workItem/System.Net.Http.Functional.Tests/wilogs\r\n\r\n```c#\r\n        public void Commit(int byteCount)\r\n        {\r\n            Debug.Assert(byteCount <= AvailableLength);\r\n            _availableStart += byteCount;\r\n        }\r\n```\r\n\r\n```\r\nAssertion Failed\r\n\r\n   at System.Net.Http.ArrayBuffer.Commit(Int32 byteCount) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ArrayBuffer.cs:line 78\r\n   at System.Net.Http.Http2Connection.EnsureIncomingBytesAsync(Int32 minReadBytes) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 154\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 1026\r\n   at System.Net.Http.Http2Connection.EnsureIncomingBytesAsync(Int32 minReadBytes)\r\n   at System.Net.Http.Http2Connection.ReadFrameAsync() in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 189\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 1026\r\n   at System.Net.Http.Http2Connection.ReadFrameAsync()\r\n   at System.Net.Http.Http2Connection.ProcessIncomingFrames() in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 211\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 161\r\n   at System.Net.Http.Http2Connection.ReadFrameAsync() in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 192\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 272\r\n   at System.Net.Http.Http2Connection.EnsureIncomingBytesAsync(Int32 minReadBytes) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 155\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 161\r\n   at System.Net.Http.Http2Connection.ReadAtLeastAsync(Stream stream, Memory`1 buffer, Int32 minReadBytes) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 1496\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 161\r\n   at System.Net.Security.SslStream.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.Implementation.cs:line 1439\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 161\r\n   at System.Net.Security.SslStream.<FillBufferAsync>g__InternalFillBufferAsync|215_0[TReadAdapter](TReadAdapter adap, ValueTask`1 task, Int32 min, Int32 initial) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.Implementation.cs:line 1497\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(Action`1 continuation, Object state, Boolean forceAsync, Boolean requiresExecutionContextFlow) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Tasks.cs:line 1048\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs _) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Tasks.cs:line 869\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32 bytesTransferred, SocketFlags flags) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 781\r\n   at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__177_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1254\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\Overlapped.cs:line 65\r\n----- end 20:08:31,65 ----- exit code -2146232797 ----------------------------------------------------------\r\n2019-04-18 20:08:32,045: ERROR: xunit-reporter(69): main: Unable to report xunit results: no test results xml file found.\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37008","RelatedDescription":"Open issue \"Http2: Http tests hitting assert in Commit() sometimes\" (#37008)"},{"Id":"434861719","IsPullRequest":true,"CreatedAt":"2019-04-18T19:46:21","Actor":"buyaa-n","Number":"37002","RawContent":null,"Title":"Hashcode calculation update","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37002","RelatedDescription":"Closed or merged PR \"Hashcode calculation update\" (#37002)"},{"Id":"434916736","IsPullRequest":true,"CreatedAt":"2019-04-18T19:09:40","Actor":"wfurt","Number":"37007","RawContent":null,"Title":"write Host header first if we need to add it","State":"open","Body":"Issue reported in #36135 is technically server bug as order of headers is irrelevant. However as @davidsh pointed out, rfc suggests to write \"control data\" headers first. If we follow that recommendation the reported site loads correctly and we behave as other HTTP implementations. \r\n\r\nfixes #36135 \r\n\r\nNote that I decided to create new new test file. \r\nWith overloads for Http2 and Platform it is getting harder to find place for tests covering only specific scenario. My plan is to slowly cleanup HttpClientHandlerTest to avoid running unnecessary tests.\r\n\r\n \r\n ","Url":"https://github.com/dotnet/corefx/pull/37007","RelatedDescription":"Open PR \"write Host header first if we need to add it\" (#37007)"},{"Id":"434901704","IsPullRequest":true,"CreatedAt":"2019-04-18T18:31:29","Actor":"joperezr","Number":"37005","RawContent":null,"Title":"Adding a few serialization attributes back to the reference assemblies","State":"open","Body":"Fixes #35561 \r\n\r\ncc: @Lxiamail @mconnew  PTAL","Url":"https://github.com/dotnet/corefx/pull/37005","RelatedDescription":"Open PR \"Adding a few serialization attributes back to the reference assemblies\" (#37005)"},{"Id":"434894803","IsPullRequest":true,"CreatedAt":"2019-04-18T18:13:27","Actor":"vcsjones","Number":"37004","RawContent":null,"Title":"Support RSAES-OAEP encryption with EnvelopedCms.","State":"open","Body":"Fixes #34366 \r\n\r\n/cc @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/37004","RelatedDescription":"Open PR \"Support RSAES-OAEP encryption with EnvelopedCms.\" (#37004)"},{"Id":"434735220","IsPullRequest":true,"CreatedAt":"2019-04-18T17:54:19","Actor":"dotnet-maestro[bot]","Number":"36993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19218.1\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19218.1\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.SourceRewriter** -> 1.0.0-beta.19218.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#36993)"},{"Id":"434694660","IsPullRequest":false,"CreatedAt":"2019-04-18T17:36:21","Actor":"IanKemp","Number":"36991","RawContent":null,"Title":"How to get the version of this source that's shipped with FW 4.7.2?","State":"closed","Body":"I'm using `System.Net.Http.HttpClient` in a .NET Framework 4.7.2 project and have encountered an issue that I need to troubleshoot by stepping through the source of `HttpClient`. Visual Studio is able to download the PDB for `System.Net.Http.dll` from the Microsoft symbol servers but can't find matching source files, which means stepping doesn't work..\r\n\r\nThe obvious solution - cloning this `corefx` repo and pointing VS to that when it asks me to locate source files - doesn't work because the 4.7.2 PDB from the symbol server doesn't match the current version of the code in `corefx`.\r\n\r\nI have managed to get around this somewhat by using JetBrains dotPeek as a symbol server, to generate a PDB and thus source files from the 4.7.2 version of `System.Net.Http.dll` that's in my GAC, but this is not particularly optimal. Obviously the ideal and simplest solution is to have the requisite source files available for download from the symbol servers - but since this is apparently too logical for Microsoft, an acceptable fallback would be to be able to clone a version of this repo that has the 4.7.2 sources.\r\n\r\nDoes said version (tag) exist and if so, what is it?","Url":"https://github.com/dotnet/corefx/issues/36991","RelatedDescription":"Closed issue \"How to get the version of this source that's shipped with FW 4.7.2?\" (#36991)"},{"Id":"434607414","IsPullRequest":true,"CreatedAt":"2019-04-18T17:32:56","Actor":"davidfowl","Number":"36988","RawContent":null,"Title":"Handle concurrent dispose and WriteAsync calls","State":"closed","Body":"- lock the entire Write operation\r\n- Added a test that Completes both reader and writer in the middle of writing a large buffer\r\n\r\ncc @benaadams \r\n\r\nFound in ASP.NET Core test","Url":"https://github.com/dotnet/corefx/pull/36988","RelatedDescription":"Closed or merged PR \"Handle concurrent dispose and WriteAsync calls\" (#36988)"},{"Id":"434859237","IsPullRequest":true,"CreatedAt":"2019-04-18T16:38:45","Actor":"ViktorHofer","Number":"37001","RawContent":null,"Title":"Manual darc update from build '20190418.2'","State":"open","Body":"Consume changes from CoreFxTesting to allow the new rsp option: `/p:TestRspFile=...`.","Url":"https://github.com/dotnet/corefx/pull/37001","RelatedDescription":"Open PR \"Manual darc update from build '20190418.2'\" (#37001)"},{"Id":"434749296","IsPullRequest":true,"CreatedAt":"2019-04-18T16:16:27","Actor":"dotnet-maestro[bot]","Number":"36996","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190417.12\r\n- **Date Produced**: 4/18/2019 9:13 AM\r\n- **Commit**: 1f9b84a0804e868c7e0f37a3c10fbaf7c735ae14\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19217.12\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36996","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#36996)"},{"Id":"434745768","IsPullRequest":true,"CreatedAt":"2019-04-18T16:12:36","Actor":"dotnet-maestro[bot]","Number":"36995","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190418.02\r\n- **Date Produced**: 4/18/2019 10:37 AM\r\n- **Commit**: 25abcf43fe1da7a8bdad3d5053ebc01dc80ea450\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27618-02\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview5-27618-02\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview5-27618-02\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#36995)"},{"Id":"434829497","IsPullRequest":false,"CreatedAt":"2019-04-18T15:28:03","Actor":"reZach","Number":"37000","RawContent":null,"Title":"Improper BaseAddress causes unexpected result","State":"open","Body":"It is not immediately clear if your `BaseAddress` does not end in a forward slash **/** that any requests you make with the HttpClient will not succeed.\r\n\r\nThis is valid\r\n```\r\nusing (var handler = new HttpClientHandler())\r\nusing (var client = new HttpClient(handler))\r\n{\r\n    client.BaseAddress = new Uri(\"http://something.com/api/\");\r\n    var response = await client.GetAsync(\"resource/7\");\r\n}\r\n```\r\n\r\nThis is invalid\r\n```\r\nusing (var handler = new HttpClientHandler())\r\nusing (var client = new HttpClient(handler))\r\n{\r\n    client.BaseAddress = new Uri(\"http://something.com/api\");\r\n    var response = await client.GetAsync(\"resource/7\");\r\n}\r\n```\r\n\r\nAny requests made by the invalid HttpClient will look like it's simply calling **http://something.com**, with the \"api\" path omitted.\r\n\r\nCan we throw an error or warning if an HttpClient is configured this way? Perhaps [here](https://github.com/dotnet/corefx/blob/a6f76f4f620cbe74821c6445af3f13e048361658/src/System.Net.Http/src/System/Net/Http/HttpClient.cs#L684)? _Many_ have fallen to this error... https://stackoverflow.com/a/23438417/1837080","Url":"https://github.com/dotnet/corefx/issues/37000","RelatedDescription":"Open issue \"Improper BaseAddress causes unexpected result\" (#37000)"},{"Id":"434818690","IsPullRequest":false,"CreatedAt":"2019-04-18T15:06:16","Actor":"davidfowl","Number":"36999","RawContent":null,"Title":"Make the default Activity format the W3C format","State":"open","Body":"We have a new standard and we should be using it by default in .NET Core 3.0 applications. Today the default IdFormat is Hierarchical instead of W3C. Was that intentional?\r\n\r\ncc @lmolkova @SergeyKanzhelev @noahfalk ","Url":"https://github.com/dotnet/corefx/issues/36999","RelatedDescription":"Open issue \"Make the default Activity format the W3C format\" (#36999)"},{"Id":"434759175","IsPullRequest":true,"CreatedAt":"2019-04-18T14:03:34","Actor":"dotnet-maestro[bot]","Number":"36998","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190417.73\r\n- **Date Produced**: 4/18/2019 12:52 AM\r\n- **Commit**: 0c1f6b9e3282f04d48b756afc8dbe60334ffd9b1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview5-27617-73\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview5-27617-73\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview5-27617-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36998","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#36998)"},{"Id":"434753642","IsPullRequest":true,"CreatedAt":"2019-04-18T13:40:38","Actor":"dotnet-maestro[bot]","Number":"36997","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190417.2\r\n- **Date Produced**: 4/18/2019 1:51 AM\r\n- **Commit**: 25538d60f7f4c2c79cf098f2b808907d87b516a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19217.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36997","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/standard\" (#36997)"},{"Id":"434728275","IsPullRequest":false,"CreatedAt":"2019-04-18T11:44:43","Actor":"IanKemp","Number":"36992","RawContent":null,"Title":"System.Net.Http.Headers.DateHeaderParser in FW 4.7.2 doesn't support numerous date/time formats (UTC specifically)","State":"open","Body":"In the [current version](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Headers/DateHeaderParser.cs), `DateHeaderParser` [delegates to `System.Net.HttpDateParser`](https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Net/HttpDateParser.cs) which supports the following date/time formats:\r\n\r\n```csharp\r\n        private static readonly string[] s_dateFormats = new string[] {\r\n            // \"r\", // RFC 1123, required output format but too strict for input\r\n            \"ddd, d MMM yyyy H:m:s 'GMT'\", // RFC 1123 (r, except it allows both 1 and 01 for date and time)\r\n            \"ddd, d MMM yyyy H:m:s 'UTC'\", // RFC 1123, UTC\r\n            \"ddd, d MMM yyyy H:m:s\", // RFC 1123, no zone - assume GMT\r\n            \"d MMM yyyy H:m:s 'GMT'\", // RFC 1123, no day-of-week\r\n            \"d MMM yyyy H:m:s 'UTC'\", // RFC 1123, UTC, no day-of-week\r\n            \"d MMM yyyy H:m:s\", // RFC 1123, no day-of-week, no zone\r\n            \"ddd, d MMM yy H:m:s 'GMT'\", // RFC 1123, short year\r\n            \"ddd, d MMM yy H:m:s 'UTC'\", // RFC 1123, UTC, short year\r\n            \"ddd, d MMM yy H:m:s\", // RFC 1123, short year, no zone\r\n            \"d MMM yy H:m:s 'GMT'\", // RFC 1123, no day-of-week, short year\r\n            \"d MMM yy H:m:s 'UTC'\", // RFC 1123, UTC, no day-of-week, short year\r\n            \"d MMM yy H:m:s\", // RFC 1123, no day-of-week, short year, no zone\r\n\r\n            \"dddd, d'-'MMM'-'yy H:m:s 'GMT'\", // RFC 850\r\n            \"dddd, d'-'MMM'-'yy H:m:s 'UTC'\", // RFC 850, UTC\r\n            \"dddd, d'-'MMM'-'yy H:m:s zzz\", // RFC 850, offset\r\n            \"dddd, d'-'MMM'-'yy H:m:s\", // RFC 850 no zone\r\n            \"ddd MMM d H:m:s yyyy\", // ANSI C's asctime() format\r\n\r\n            \"ddd, d MMM yyyy H:m:s zzz\", // RFC 5322\r\n            \"ddd, d MMM yyyy H:m:s\", // RFC 5322 no zone\r\n            \"d MMM yyyy H:m:s zzz\", // RFC 5322 no day-of-week\r\n            \"d MMM yyyy H:m:s\", // RFC 5322 no day-of-week, no zone\r\n        };\r\n```\r\n\r\nIn Framework 4.7.2 and NuGet 4.3.4, `DateHeaderParser` delegates to `System.Net.Http.HttpRuleParser` which supports these date/time formats (disassembled from `System.Net.Http.dll` since the 4.7.2 sources aren't available from symbol servers):\r\n\r\n```csharp\r\n    private static readonly string[] dateFormats = new string[15]\r\n    {\r\n      \"ddd, d MMM yyyy H:m:s 'GMT'\",\r\n      \"ddd, d MMM yyyy H:m:s\",\r\n      \"d MMM yyyy H:m:s 'GMT'\",\r\n      \"d MMM yyyy H:m:s\",\r\n      \"ddd, d MMM yy H:m:s 'GMT'\",\r\n      \"ddd, d MMM yy H:m:s\",\r\n      \"d MMM yy H:m:s 'GMT'\",\r\n      \"d MMM yy H:m:s\",\r\n      \"dddd, d'-'MMM'-'yy H:m:s 'GMT'\",\r\n      \"dddd, d'-'MMM'-'yy H:m:s\",\r\n      \"ddd MMM d H:m:s yyyy\",\r\n      \"ddd, d MMM yyyy H:m:s zzz\",\r\n      \"ddd, d MMM yyyy H:m:s\",\r\n      \"d MMM yyyy H:m:s zzz\",\r\n      \"d MMM yyyy H:m:s\"\r\n    };\r\n```\r\n\r\nAs a result, `DateHeaderParser` in 4.7.2 supports fewer date/time formats - in particular UTC formats are missing. What's (impressively) sad is that ye olde `System.Net.WebClient` **does** handle these formats correctly!\r\n\r\nIs this a known issue, does Microsoft care if so, and will there be a fix in Framework 4.8?","Url":"https://github.com/dotnet/corefx/issues/36992","RelatedDescription":"Open issue \"System.Net.Http.Headers.DateHeaderParser in FW 4.7.2 doesn't support numerous date/time formats (UTC specifically)\" (#36992)"},{"Id":"434585949","IsPullRequest":false,"CreatedAt":"2019-04-18T04:34:04","Actor":"ahsonkhan","Number":"36987","RawContent":null,"Title":"Refactor Utf8JsonWriter code to remove code duplication","State":"open","Body":"The Utf8JsonWriter DCR here: https://github.com/dotnet/corefx/pull/36961 introduced some code duplication which can be re-factored into helper methods to avoid duplication (for example writing property names, or using write literal helper for formatted numbers as well, etc.).","Url":"https://github.com/dotnet/corefx/issues/36987","RelatedDescription":"Open issue \"Refactor Utf8JsonWriter code to remove code duplication\" (#36987)"},{"Id":"434578291","IsPullRequest":false,"CreatedAt":"2019-04-18T04:20:08","Actor":"ahsonkhan","Number":"36986","RawContent":null,"Title":"Float formatting writing in scientific notation on Windows x86 rather than standard format ('G')","State":"closed","Body":"Writing floats is failing **only on** `Windows.10.Amd64.ClientRS5.Open-x86-Release`, i.e. **Windows and x86**, where its writing the float in scientific notation rather than following the 'G':\r\n\r\nFor example check the following where I get an isolated repro: https://github.com/dotnet/corefx/pull/36985/commits/cef2e42b9c11cf3c28853540016c9f426c836b0b from https://github.com/dotnet/corefx/pull/36985\r\n\r\nThis came up in Utf8JsonWriter use case where the test is failing [WriteNumberValueSingle](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36961~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.66/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FWriteNumberValueSingle(formatted:%20False,%20skipValidation:%20False)):\r\n```text\r\nAssert.Equal() Failure\r\n            ↓ (pos 2)\r\nExpected: [12345678,12345678,12345678,12345678,123456···\r\nActual:   [1.234568E+07,1.234568E+07,1.234568E+07,1.2···\r\n            ↑ (pos 2)\r\n```\r\n\r\nSame issue with `12345680`\r\n\r\nTried the following:\r\n```C#\r\n        [Fact]\r\n        public void TestWritingFloat1()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345678, output, out int bytesWritten));\r\n            \r\n            string expectedStr = \"12345678\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        [Fact]\r\n        public void TestWritingFloat2()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345680, output, out int bytesWritten));\r\n\r\n            string expectedStr = \"12345680\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        private bool WriteNumberValueMinimized(float value, byte[] output, out int bytesWritten)\r\n        {\r\n            return Utf8Formatter.TryFormat(value, output, out bytesWritten);\r\n        }\r\n```\r\n\r\n**Expected something like the following (since all bytes should match):** And we do get this behavior on other OSes and on Windows-x64.\r\n```text\r\nMessage :\r\n8, 8, 8, \r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in /Users/vsts/agent/2.149.2/work/1/s/src/System.Text.Json/tests/Utf8JsonWriterTests.cs:line 3013\r\n```\r\n\r\n[TestWritingFloat1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat1)\r\n\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 2978\r\n```\r\n\r\n[TestWritingFloat2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3006\r\n```\r\n\r\n[TestWritingFloatIBW1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW1)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3051\r\n```\r\n\r\n[TestWritingFloatIBW2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,6, 54,7, 56,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3098\r\n```\r\n\r\ncc @tannergooding, @jkotas, @GrabYourPitchforks ","Url":"https://github.com/dotnet/corefx/issues/36986","RelatedDescription":"Closed issue \"Float formatting writing in scientific notation on Windows x86 rather than standard format ('G')\" (#36986)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"435003325","IsPullRequest":true,"CreatedAt":"2019-04-19T01:30:06","Actor":"dotnet-bot","Number":"35129","RawContent":null,"Title":"Merge dev16.1-preview2 to dev16.1-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview2 into dev16.1-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps\ngit reset --hard upstream/dev16.1-preview2-vs-deps\ngit merge upstream/dev16.1-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35129","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview2 to dev16.1-preview2-vs-deps\" (#35129)"},{"Id":"435011389","IsPullRequest":true,"CreatedAt":"2019-04-19T00:51:04","Actor":"heejaechang","Number":"35132","RawContent":null,"Title":"renamed MS.VS.CodeAnalysis.CodeLens to MS.VS.LanguageServices.CodeLens","State":"open","Body":"fix https://github.com/dotnet/roslyn/issues/35111","Url":"https://github.com/dotnet/roslyn/pull/35132","RelatedDescription":"Open PR \"renamed MS.VS.CodeAnalysis.CodeLens to MS.VS.LanguageServices.CodeLens\" (#35132)"},{"Id":"435008723","IsPullRequest":false,"CreatedAt":"2019-04-19T00:32:49","Actor":"safern","Number":"35131","RawContent":null,"Title":"Deconstruct KeyValuePair failing with nullable warning","State":"open","Body":"We have the following `KeyValuePair` struct:\r\n\r\n```cs\r\n    public readonly struct KeyValuePair<TKey, TValue>\r\n    {\r\n        private readonly TKey key; // Do not rename (binary serialization)\r\n        private readonly TValue value; // Do not rename (binary serialization)\r\n\r\n        public KeyValuePair(TKey key, TValue value)\r\n        {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n\r\n        public TKey Key\r\n        {\r\n            get { return key; }\r\n        }\r\n\r\n        public TValue Value\r\n        {\r\n            get { return value; }\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return KeyValuePair.PairToString(Key, Value);\r\n        }\r\n\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public void Deconstruct(out TKey key, out TValue value)\r\n        {\r\n            key = Key;\r\n            value = Value;\r\n        }\r\n    }\r\n```\r\n\r\nThen we create a `Dictionary<string, ResourceManager>` which in its `Enumerator` returns a `KeyValuePair<string, ResourceManager>`. We should be able to use this as follows:\r\n\r\n```cs\r\n            Dictionary<string, ResourceSet> localResourceSets = _resourceSets;\r\n\r\n            // If any calls to Close throw, at least leave ourselves in a\r\n            // consistent state.\r\n            _resourceSets = new Dictionary<string, ResourceSet>();\r\n            _lastUsedResourceCache = new CultureNameResourceSetPair();\r\n\r\n            lock (localResourceSets)\r\n            {\r\n                foreach ((_, ResourceSet resourceSet) in localResourceSets)\r\n                {\r\n                    resourceSet.Close();\r\n                }\r\n            }\r\n```\r\n\r\nWe get a warning in the foreach loop: `shared\\System\\Resources\\ResourceManager.cs(307,26): error CS8619: Nullability of reference types in value of type 'KeyValuePair<string, ResourceSet>' doesn't match target type 'ResourceSet'.`\r\n\r\nCorrect me if this regression was not caused by this change, but we're getting this warning as we updated the compiler version to: \r\n`3.100.19.21705 (79b8271f)`\r\n\r\nThis is currently blocking: https://github.com/dotnet/coreclr/pull/24060\r\n\r\nMaybe this was broken by: https://github.com/dotnet/roslyn/pull/34768\r\n\r\ncc: @dotnet/nullablefc @chsienki @cston ","Url":"https://github.com/dotnet/roslyn/issues/35131","RelatedDescription":"Open issue \"Deconstruct KeyValuePair failing with nullable warning\" (#35131)"},{"Id":"435003276","IsPullRequest":true,"CreatedAt":"2019-04-19T00:09:32","Actor":"dotnet-bot","Number":"35127","RawContent":null,"Title":"Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps\ngit reset --hard upstream/dev16.1-preview2-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35127","RelatedDescription":"Closed or merged PR \"Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps\" (#35127)"},{"Id":"435003337","IsPullRequest":true,"CreatedAt":"2019-04-19T00:00:36","Actor":"dotnet-bot","Number":"35130","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35130","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#35130)"},{"Id":"435003289","IsPullRequest":true,"CreatedAt":"2019-04-19T00:00:22","Actor":"dotnet-bot","Number":"35128","RawContent":null,"Title":"Merge dev16.1-preview2-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35128","RelatedDescription":"Open PR \"Merge dev16.1-preview2-vs-deps to master-vs-deps\" (#35128)"},{"Id":"434997218","IsPullRequest":false,"CreatedAt":"2019-04-18T23:29:45","Actor":"chborl","Number":"35126","RawContent":null,"Title":"Don't complete statement when typing semicolon in char literal that is in delimiter","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  In the editor, insert the following code and type a semicolon where the $$ is\r\n`void Main(string[]args)\r\n    {\r\n        Method('$$')\r\n    }`\r\n \r\n**Expected Behavior**:\r\n`Method(';$$')`\r\n\r\n**Actual Behavior**:\r\n`Method('');$$`\r\n","Url":"https://github.com/dotnet/roslyn/issues/35126","RelatedDescription":"Open issue \"Don't complete statement when typing semicolon in char literal that is in delimiter\" (#35126)"},{"Id":"434995346","IsPullRequest":true,"CreatedAt":"2019-04-18T23:20:23","Actor":"333fred","Number":"35125","RawContent":null,"Title":"Addressed PR feedback.","State":"open","Body":"Follow up on PR feedback from @cston and @gafter. If there are any more comments on the content of the docs, please leave them on https://github.com/dotnet/roslyn/issues/35046 to follow up on later.","Url":"https://github.com/dotnet/roslyn/pull/35125","RelatedDescription":"Open PR \"Addressed PR feedback.\" (#35125)"},{"Id":"434990122","IsPullRequest":false,"CreatedAt":"2019-04-18T22:56:23","Actor":"genlu","Number":"35124","RawContent":null,"Title":"Generic type name from Import completion should be language specific","State":"open","Body":"Right now, generic types are always displayed in C# even when completion is invoked in VB code.\r\ni.e. `Foo<>` instead of `Foo(Of ...)`","Url":"https://github.com/dotnet/roslyn/issues/35124","RelatedDescription":"Open issue \"Generic type name from Import completion should be language specific\" (#35124)"},{"Id":"434989319","IsPullRequest":false,"CreatedAt":"2019-04-18T22:52:44","Actor":"sharwell","Number":"35123","RawContent":null,"Title":"FailFast attempting to show light bulb in integration tests","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=160903\r\n\r\n```\r\nEvent Time (UTC): 4/18/2019 9:43:58 PM\r\nEvent ID: 1025\r\nData: Application: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.ArgumentException: The supplied SnapshotPoint is on an incorrect snapshot.\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(System.Object, System.Exception)\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.HandleException(System.Object, System.Exception)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.ValidateBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)\r\n   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITrackingPoint, Microsoft.VisualStudio.Text.ITrackingSpan, System.Collections.Generic.Dictionary`2<Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.IEnumerable`1<Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource>>, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Boolean, Boolean)\r\n   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITrackingPoint, Microsoft.VisualStudio.Text.ITrackingSpan, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Boolean, Boolean)\r\n   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet)\r\n   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbController.CreateOrResetSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet)\r\n   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbController+<RefreshSessionAsync>d__26.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation+<>c.<.cctor>b__8_0(System.Object)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)\r\n   at Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents.OnReplace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])\r\n   at Microsoft.VisualStudio.Editor.Implementation.TextDocData+<>c__DisplayClass180_1.<RaiseReplaceEvent>b__0()\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(System.Object, System.Action)\r\n   at Microsoft.VisualStudio.Editor.Implementation.TextDocData.RaiseReplaceEvent(ReplaceEventHandler, Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])\r\n   at Microsoft.VisualStudio.Editor.Implementation.TextDocData.OnTextBufferChangedHighPriority(System.Object, Microsoft.VisualStudio.Text.TextContentChangedEventArgs)\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Object, System.EventHandler`1<System.__Canon>, System.__Canon)\r\n   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(Microsoft.VisualStudio.Text.TextContentChangedEventArgs, Boolean)\r\n   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer+TextContentChangedEventRaiser.RaiseEvent(Microsoft.VisualStudio.Text.Implementation.BaseBuffer, Boolean)\r\n   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents()\r\n   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit()\r\n   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer+TextBufferEdit.Apply()\r\n   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.Replace(Microsoft.VisualStudio.Text.Span, System.String)\r\n   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc+<>c__DisplayClass16_0.<ReplaceText>b__0(Microsoft.VisualStudio.Text.Editor.IWpfTextView)\r\n   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc+<>c__DisplayClass13_0.<GetExecuteOnActionViewCallback>b__0(System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent+<>c__DisplayClass6_0.<InvokeOnUIThread>b__0()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35123","RelatedDescription":"Open issue \"FailFast attempting to show light bulb in integration tests\" (#35123)"},{"Id":"434986985","IsPullRequest":true,"CreatedAt":"2019-04-18T22:42:36","Actor":"333fred","Number":"35122","RawContent":null,"Title":"Correctly report null reference possibility when GetEnumerator returns a potentially nullable Enumerator type.","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/29972.\r\nFixes https://github.com/dotnet/roslyn/issues/34667 (was previously fixed in https://github.com/dotnet/roslyn/pull/34926, this just adds a test).","Url":"https://github.com/dotnet/roslyn/pull/35122","RelatedDescription":"Open PR \"Correctly report null reference possibility when GetEnumerator returns a potentially nullable Enumerator type.\" (#35122)"},{"Id":"434974044","IsPullRequest":true,"CreatedAt":"2019-04-18T21:52:13","Actor":"jcouv","Number":"35121","RawContent":null,"Title":"Async-enumerator methods honor the DefaultCancellation attribute","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/34407\r\n\r\nRelates to https://github.com/dotnet/corefx/issues/37012 (corefx API proposal for `DefaultCancellationAttribute` type)\r\nRelates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)","Url":"https://github.com/dotnet/roslyn/pull/35121","RelatedDescription":"Open PR \"Async-enumerator methods honor the DefaultCancellation attribute\" (#35121)"},{"Id":"434968928","IsPullRequest":true,"CreatedAt":"2019-04-18T21:35:00","Actor":"genlu","Number":"35120","RawContent":null,"Title":"Fix sorting of import completion items","State":"open","Body":"Make sure type with shorter name shows first, e,g, `SomeType` before `SomeTypeWithLongerName`. Current implementation would show \"SomeTypeWithLongerName\" first.\r\n\r\n\r\nThanks @Dreamescaper for dogfooding and reporting the issue :)\r\n\r\n@dotnet/roslyn-ide @CyrusNajmabadi \r\n","Url":"https://github.com/dotnet/roslyn/pull/35120","RelatedDescription":"Open PR \"Fix sorting of import completion items\" (#35120)"},{"Id":"434966585","IsPullRequest":false,"CreatedAt":"2019-04-18T21:27:29","Actor":"pranavkm","Number":"35119","RawContent":null,"Title":"Compiler does not preserve EmbeddedResource.LogicalName with back-slashes on xplat","State":"open","Body":"`EmbeddedResource` item in MSBuild has a `LogicalName` property that allows specifying what the name of a resource would be once embedded in to the compiled assembly. Consider the following:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <EmbeddedResource Include=\"Hello1.txt\" LogicalName=\"Dir1/Hello1.txt\" />\r\n    <EmbeddedResource Include=\"Hello2.txt\" LogicalName=\"Dir1\\Hello2.txt\" />\r\n</ItemGroup>\r\n```\r\n\r\nOn Windows, compiling a project with these resources preserves the LogicalName. Here's what ILSpy says when I inspect the assembly:\r\n\r\n![image](https://user-images.githubusercontent.com/174281/56391817-9f9fd280-61e4-11e9-9489-1038c8c68e28.png)\r\n\r\nWhen the same project is built on xplat (I tried this on Ubuntu 18.04), here's what I get:\r\n\r\n![image](https://user-images.githubusercontent.com/174281/56391888-dd046000-61e4-11e9-9ff4-1e81f33e73fb.png)\r\n\r\nThe logical name passed to the Csc task looks correct:\r\n![image](https://user-images.githubusercontent.com/174281/56392029-2c4a9080-61e5-11e9-9a87-e220d51a0fcf.png), however the generated command line changes the value:\r\n\r\n```\r\n/home/prkrishn/.dotnet/dotnet exec \"/home/prkrishn/.dotnet/sdk/3.0.100-preview5-011366/Roslyn/bincore/csc.dll\" \r\n....\r\n/out:obj/Debug/netcoreapp3.0/consoleapp.dll \r\n/resource:Hello1.txt,Dir1/Hello1.txt \r\n/resource:Hello2.txt,Dir1/Hello2.txt\r\n```\r\n\r\nHere's an app that reproduces the issue: https://github.com/pranavkm/logicalname\r\n\r\nEnvironment info:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011366\r\n Commit:    e279c78bad\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/prkrishn/.dotnet/sdk/3.0.100-preview5-011366/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27618-07\r\n  Commit:  97d9338178\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011366 [/home/prkrishn/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19218-03 [/home/prkrishn/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27618-07 [/home/prkrishn/.dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35119","RelatedDescription":"Open issue \"Compiler does not preserve EmbeddedResource.LogicalName with back-slashes on xplat\" (#35119)"},{"Id":"434964126","IsPullRequest":false,"CreatedAt":"2019-04-18T21:20:13","Actor":"vsfeedback","Number":"35118","RawContent":null,"Title":"LINQ converter Query Syntax to/from Method Syntax","State":"open","Body":"<p>Hello!</p><p>As new feature to convert &quot;foreach&quot; to LINQ it's amazin, a fast converter from a LINQ syntax to another can be very usefull for fast refactor.</p><p>Thanks</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/533556/linq-converter-query-syntax-tofrom-method-syntax.html\nVSTS ticketId: 847753_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 4/16/2019, 03:08 AM (2 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/35118","RelatedDescription":"Open issue \"LINQ converter Query Syntax to/from Method Syntax\" (#35118)"},{"Id":"434957778","IsPullRequest":false,"CreatedAt":"2019-04-18T21:01:13","Actor":"tannergooding","Number":"35117","RawContent":null,"Title":"Compiler currently gives `error CS0034` when calling a nullable aware generic API from a non-nullable aware generic API","State":"open","Body":"The following code currently fails to compile with `error CS0034: Operator '|' is ambiguous on operands of type 'Vector<T>' and 'Vector<T>'`.\r\n\r\n```csharp\r\npublic struct Vector<T> where T : struct\r\n{\r\n    public static Vector<T> operator |(Vector<T> left, Vector<T> right) => throw null;\r\n\r\n    internal static Vector<T> ConditionalSelect(Vector<T> left, Vector<T> right)\r\n    {\r\n        return left | Vector.AndNot(left, right); // error CS0034: Operator '|' is ambiguous on operands of type 'Vector<T>' and 'Vector<T>'\r\n    }\r\n}\r\n\r\n#nullable enable\r\n\r\npublic static partial class Vector\r\n{\r\n    public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right) where T : struct { throw null; }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35117","RelatedDescription":"Open issue \"Compiler currently gives `error CS0034` when calling a nullable aware generic API from a non-nullable aware generic API\" (#35117)"},{"Id":"434955042","IsPullRequest":true,"CreatedAt":"2019-04-18T20:53:06","Actor":"AlekseyTs","Number":"35116","RawContent":null,"Title":"`Equals` for generic methods should compare nullable annotations for type type arguments.","State":"open","Body":"Fixes #35083.","Url":"https://github.com/dotnet/roslyn/pull/35116","RelatedDescription":"Open PR \"`Equals` for generic methods should compare nullable annotations for type type arguments.\" (#35116)"},{"Id":"434950498","IsPullRequest":false,"CreatedAt":"2019-04-18T20:39:54","Actor":"CreateAndInject","Number":"35115","RawContent":null,"Title":"Can't view overloads by down arrow in watch window.","State":"open","Body":"**Version Used**: VS2017&VS2019\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Type `int.Parse(` in watch window\r\n2. Press down arrow\r\n\r\n**Expected Behavior**: View different overloads\r\n\r\n**Actual Behavior**: Cursor runs to next line.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35115","RelatedDescription":"Open issue \"Can't view overloads by down arrow in watch window.\" (#35115)"},{"Id":"434924034","IsPullRequest":true,"CreatedAt":"2019-04-18T20:36:52","Actor":"jasonmalinowski","Number":"35112","RawContent":null,"Title":"Add missing binary back-compat method","State":"closed","Body":"This was missed when we were adding another parameter to the one with optional arguments.","Url":"https://github.com/dotnet/roslyn/pull/35112","RelatedDescription":"Closed or merged PR \"Add missing binary back-compat method\" (#35112)"},{"Id":"434937200","IsPullRequest":false,"CreatedAt":"2019-04-18T20:03:15","Actor":"tannergooding","Number":"35114","RawContent":null,"Title":"Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties of readonly structs.","State":"open","Body":"The compiler is currently emitting `IsReadOnlyAttribute` on getter only auto properties of a readonly struct.\r\n\r\nWhile this is harmless, it unnecessarily increases metadata size and could likely be stripped given that it isn't emitted for other members (such as methods) and the readonly-ness can be detected from the attribute on the struct.\r\n\r\nAlso see: https://sharplab.io/#v2:C4LglgNgPgAgDAAhgRgNwFgBQMDMCBOApgIYAmA9gHYQCeCAzsPgK4DGwCAwggN5YICkeGABYEAWQAUASl79BAX3kDlQhGEocAGrwQBzQsFQIlmBUA==","Url":"https://github.com/dotnet/roslyn/issues/35114","RelatedDescription":"Open issue \"Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties of readonly structs.\" (#35114)"},{"Id":"434935474","IsPullRequest":false,"CreatedAt":"2019-04-18T19:58:21","Actor":"tannergooding","Number":"35113","RawContent":null,"Title":"Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties when not targeting 8.0","State":"open","Body":"The compiler is currently emitting `IsReadOnlyAttribute` on getter only auto properties even when the langversion is not 8.0.\r\n\r\nThis lead to failures in the GenAPI tool which generates a reference source file based on a given implementation assembly: https://github.com/dotnet/arcade/issues/2555\r\n\r\nThis should be reviewed and determined whether it is desirable (in which case tools should be updated) or if it is undesirable (in which case the compiler should be updated).","Url":"https://github.com/dotnet/roslyn/issues/35113","RelatedDescription":"Open issue \"Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties when not targeting 8.0\" (#35113)"},{"Id":"434913415","IsPullRequest":false,"CreatedAt":"2019-04-18T19:01:22","Actor":"heejaechang","Number":"35111","RawContent":null,"Title":"rename Microsoft.VisualStudio.CodeAnalysis.CodeLens to Microsoft.VisualStudio.LanguageServices.CodeLens ","State":"open","Body":"our pattern is not mixing VisualStudio and CodeAnalysis","Url":"https://github.com/dotnet/roslyn/issues/35111","RelatedDescription":"Open issue \"rename Microsoft.VisualStudio.CodeAnalysis.CodeLens to Microsoft.VisualStudio.LanguageServices.CodeLens \" (#35111)"},{"Id":"434882915","IsPullRequest":true,"CreatedAt":"2019-04-18T17:42:44","Actor":"tmat","Number":"35110","RawContent":null,"Title":"Use Arcade CoreXT package support","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35110","RelatedDescription":"Open PR \"Use Arcade CoreXT package support\" (#35110)"},{"Id":"434817450","IsPullRequest":true,"CreatedAt":"2019-04-18T17:20:13","Actor":"JoeRobich","Number":"35106","RawContent":null,"Title":"Revert \"move code lens to use new code lens API (#31573)\"","State":"closed","Body":"This reverts the changes from https://github.com/dotnet/roslyn/pull/31573.\r\n\r\nThe change is blocking our ability to get a build for 16.1 preview2 because it introduces a new assembly. \r\n\r\n@jinujoseph @heejaechang @RikkiGibson ","Url":"https://github.com/dotnet/roslyn/pull/35106","RelatedDescription":"Closed or merged PR \"Revert \"move code lens to use new code lens API (#31573)\"\" (#35106)"},{"Id":"434867712","IsPullRequest":false,"CreatedAt":"2019-04-18T17:01:21","Actor":"CreateAndInject","Number":"35109","RawContent":null,"Title":"Can't find the solution in the recent documents.","State":"open","Body":"**Version Used**: 16.0.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Lock VS2019 to the taskbar.\r\n2. Open VS2019, create a solution named `MyTest`, then close VS2019.\r\n3. Right click VS2019 icon in the taskbar, there's no `MyTest.sln`\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35109","RelatedDescription":"Open issue \"Can't find the solution in the recent documents.\" (#35109)"},{"Id":"434862162","IsPullRequest":false,"CreatedAt":"2019-04-18T16:46:51","Actor":"CreateAndInject","Number":"35108","RawContent":null,"Title":"Step Into and Step Over can't break with closure。","State":"open","Body":"**Version Used**: VS2017&VS2019 can't break, VS2010&VS2015 can.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"test\");\r\n            int a = DateTime.Now.Second;\r\n            \"\".Any(c => c > a);\r\n            Console.ReadKey();\r\n        }\r\n```\r\n2. F10 / F11\r\n\r\n**Expected Behavior**: VS break in the first `{`\r\n\r\n**Actual Behavior**: VS can't break, and show \"test\" in the console.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35108","RelatedDescription":"Open issue \"Step Into and Step Over can't break with closure。\" (#35108)"},{"Id":"434830145","IsPullRequest":true,"CreatedAt":"2019-04-18T16:44:26","Actor":"JoeRobich","Number":"35107","RawContent":null,"Title":"Fully NGen CodeLens assembly until optimization training is complete","State":"closed","Body":"As an alternative to https://github.com/dotnet/roslyn/pull/35106.\r\n\r\nTry to fully NGen the CodeLens assembly in order to get a build fro 16.1 preview2.","Url":"https://github.com/dotnet/roslyn/pull/35107","RelatedDescription":"Closed or merged PR \"Fully NGen CodeLens assembly until optimization training is complete\" (#35107)"},{"Id":"434566580","IsPullRequest":true,"CreatedAt":"2019-04-18T11:35:53","Actor":"sharwell","Number":"35103","RawContent":null,"Title":"Revoke IVTs to dotnet/roslyn-analyzers","State":"closed","Body":"Closes #35102","Url":"https://github.com/dotnet/roslyn/pull/35103","RelatedDescription":"Closed or merged PR \"Revoke IVTs to dotnet/roslyn-analyzers\" (#35103)"},{"Id":"434722522","IsPullRequest":false,"CreatedAt":"2019-04-18T11:28:46","Actor":"firdacz","Number":"35105","RawContent":null,"Title":"C# Wrong label indentation (after if without braces)","State":"open","Body":"**Version Used**: 16.0.1\r\nMSVS Community 2019\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n\t\tstatic void Test()\r\n\t\t{\r\n\t\t\tTest();\r\n\r\n\t\tlabel1:\r\n\t\t\tTest();\r\n\t\t\tif (true)\r\n\t\t\t\tTest();\r\n\r\n\t\t\tlabel2:\r\n\t\t\tTest();\r\n\r\n\t\tlabel3:\r\n\t\t\tif (true)\r\n\t\t\t{\r\n\t\t\t\tTest();\r\n\t\t\t}\r\n\r\n\t\tlabel4:\r\n\t\t\tTest();\r\n\t\t}\r\n```\r\n^ED (reformat)\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\n\t\tlabel2:\r\n\t\t\tTest();\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\n\t\t\tlabel2:\r\n\t\t\tTest();\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35105","RelatedDescription":"Open issue \"C# Wrong label indentation (after if without braces)\" (#35105)"},{"Id":"434650325","IsPullRequest":false,"CreatedAt":"2019-04-18T08:29:01","Actor":"xmarshal","Number":"35104","RawContent":null,"Title":"Cross assembly analysis support","State":"open","Body":"its important for null check helpers for example \r\nhttps://github.com/dotnet/roslyn-analyzers/issues/2215","Url":"https://github.com/dotnet/roslyn/issues/35104","RelatedDescription":"Open issue \"Cross assembly analysis support\" (#35104)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"435054675","IsPullRequest":true,"CreatedAt":"2019-04-19T05:29:45","Actor":"jkotas","Number":"7328","RawContent":null,"Title":"Fix objwriter for OSX","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7328","RelatedDescription":"Open PR \"Fix objwriter for OSX\" (#7328)"},{"Id":"435034664","IsPullRequest":false,"CreatedAt":"2019-04-19T03:16:43","Actor":"drearyrainDeng","Number":"7327","RawContent":null,"Title":"Question：how cli judge whether to compile native or managed code?","State":"open","Body":"To example \"Hello World\".we just call command like that \"dotnet publish -r win-x64 -c release\"\r\nso dotnet  how to judge compile native or managed code?","Url":"https://github.com/dotnet/corert/issues/7327","RelatedDescription":"Open issue \"Question：how cli judge whether to compile native or managed code?\" (#7327)"},{"Id":"435010848","IsPullRequest":true,"CreatedAt":"2019-04-19T00:47:17","Actor":"Dotnet-GitSync-Bot","Number":"7326","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @buyaa-n @bbartels","Url":"https://github.com/dotnet/corert/pull/7326","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7326)"},{"Id":"434891687","IsPullRequest":true,"CreatedAt":"2019-04-19T00:06:12","Actor":"Dotnet-GitSync-Bot","Number":"7324","RawContent":null,"Title":"Mirror changes from dotnet/coreclr [Donot Merge]","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @bbartels","Url":"https://github.com/dotnet/corert/pull/7324","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr [Donot Merge]\" (#7324)"},{"Id":"434950698","IsPullRequest":true,"CreatedAt":"2019-04-18T20:40:43","Actor":"MichalStrehovsky","Number":"7325","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7325","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7325)"},{"Id":"434667998","IsPullRequest":true,"CreatedAt":"2019-04-18T14:12:28","Actor":"MichalStrehovsky","Number":"7322","RawContent":null,"Title":"Fix Windows issues with the new object writer","State":"closed","Body":"See individual commits.","Url":"https://github.com/dotnet/corert/pull/7322","RelatedDescription":"Closed or merged PR \"Fix Windows issues with the new object writer\" (#7322)"},{"Id":"434732785","IsPullRequest":true,"CreatedAt":"2019-04-18T14:09:33","Actor":"hc4","Number":"7323","RawContent":null,"Title":"Make __modules section writeable on linux to prevent TEXTREL section","State":"closed","Body":"fixes #7321","Url":"https://github.com/dotnet/corert/pull/7323","RelatedDescription":"Closed or merged PR \"Make __modules section writeable on linux to prevent TEXTREL section\" (#7323)"},{"Id":"434617611","IsPullRequest":false,"CreatedAt":"2019-04-18T14:09:33","Actor":"hc4","Number":"7321","RawContent":null,"Title":"Linux shared library contains TEXTREL section","State":"closed","Body":"This section makes shared library non-shareable between processes.\r\nAlso it prevents packing with UPX.\r\n\r\nThe problem is caused by `__modules` section, which is marked ReadOnly and accessed with relocation type `IMAGE_REL_BASED_DIR64`\r\n\r\nI will try to investigate further. It is possible that another libobjwriter modification will be required.\r\n\r\nrelated to #4988","Url":"https://github.com/dotnet/corert/issues/7321","RelatedDescription":"Closed issue \"Linux shared library contains TEXTREL section\" (#7321)"},{"Id":"434505045","IsPullRequest":true,"CreatedAt":"2019-04-17T22:01:09","Actor":"jkotas","Number":"7320","RawContent":null,"Title":"Update objwriter version","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7320","RelatedDescription":"Open PR \"Update objwriter version\" (#7320)"},{"Id":"434453402","IsPullRequest":true,"CreatedAt":"2019-04-17T19:42:09","Actor":"MichalStrehovsky","Number":"7319","RawContent":null,"Title":"Increase official build Linux job timeout","State":"closed","Body":"We need more time when building the object writer package. 120 is probably overboard (we timed out while copying artifacts around), but it matches the Windows job timeout.","Url":"https://github.com/dotnet/corert/pull/7319","RelatedDescription":"Closed or merged PR \"Increase official build Linux job timeout\" (#7319)"},{"Id":"434396249","IsPullRequest":true,"CreatedAt":"2019-04-17T18:29:23","Actor":"Dotnet-GitSync-Bot","Number":"7318","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @tarekgh","Url":"https://github.com/dotnet/corert/pull/7318","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7318)"},{"Id":"434362500","IsPullRequest":false,"CreatedAt":"2019-04-17T16:01:32","Actor":"NextTurn","Number":"7317","RawContent":null,"Title":"Unable to load DLL 'clrcompression.dll'","State":"closed","Body":"## Stack trace\r\n\r\n```\r\nUnhandled Exception: System.IO.Compression.ZLibException: The underlying compression routine could not be loaded correctly. ---> System.DllNotFoundException: Unable to load DLL 'clrcompression.dll': The specified module could not be found.\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0xef\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x4f\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvoke(InteropHelpers.MethodFixupCell*) + 0x3e\r\n   at Interop.zlib.InflateInit2_(ZLibNative.ZStream&, Int32) + 0x41\r\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32) + 0x40\r\n   at System.IO.Compression.ZLibNative.CreateZLibStreamForInflate(ZLibNative.ZLibStreamHandle&, Int32) + 0x4e\r\n   at System.IO.Compression.Inflater.InflateInit(Int32) + 0x45\r\n```\r\n\r\n## Command\r\n\r\n```\r\ndotnet publish -r win-x64\r\n```\r\n\r\n## Environment\r\n\r\n.NET Core 3.0 or 2.2\r\nWindows 10 1809 x64\r\n\r\nRuns fine with CoreCLR.","Url":"https://github.com/dotnet/corert/issues/7317","RelatedDescription":"Closed issue \"Unable to load DLL 'clrcompression.dll'\" (#7317)"},{"Id":"434280838","IsPullRequest":true,"CreatedAt":"2019-04-17T13:22:42","Actor":"tannergooding","Number":"7316","RawContent":null,"Title":"Updating the roslyn toolset to 3.1.0-beta3-19213-02","State":"open","Body":"CC. @jkotas \r\n\r\nThis brings in the latest nullability changes and the new `readonly members` feature, which will be needed for changes like https://github.com/dotnet/coreclr/pull/23827\r\n\r\nThe compiler version matches that in arcade and buildtools right now.","Url":"https://github.com/dotnet/corert/pull/7316","RelatedDescription":"Open PR \"Updating the roslyn toolset to 3.1.0-beta3-19213-02\" (#7316)"},{"Id":"433999560","IsPullRequest":true,"CreatedAt":"2019-04-16T22:34:23","Actor":"jkotas","Number":"7315","RawContent":null,"Title":"ObjWriter build fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7315","RelatedDescription":"Closed or merged PR \"ObjWriter build fixes\" (#7315)"},{"Id":"433323004","IsPullRequest":true,"CreatedAt":"2019-04-16T21:11:30","Actor":"trylek","Number":"7306","RawContent":null,"Title":"Smaller SuperIlc fixes for bugs I hit in local testing","State":"closed","Body":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Closed or merged PR \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306)"},{"Id":"433505434","IsPullRequest":true,"CreatedAt":"2019-04-16T17:40:15","Actor":"trylek","Number":"7308","RawContent":null,"Title":"Fixes for some of the remaining Pri#1 CPAOT compilation buckets","State":"closed","Body":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Closed or merged PR \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308)"},{"Id":"433850919","IsPullRequest":true,"CreatedAt":"2019-04-16T17:05:26","Actor":"jkotas","Number":"7314","RawContent":null,"Title":"Use CentOS docker image for official builds","State":"closed","Body":"The same one is used for CoreCLR official builds","Url":"https://github.com/dotnet/corert/pull/7314","RelatedDescription":"Closed or merged PR \"Use CentOS docker image for official builds\" (#7314)"},{"Id":"433794769","IsPullRequest":true,"CreatedAt":"2019-04-16T15:28:46","Actor":"Dotnet-GitSync-Bot","Number":"7313","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7313","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7313)"},{"Id":"433034057","IsPullRequest":true,"CreatedAt":"2019-04-16T14:05:34","Actor":"filipnavara","Number":"7299","RawContent":null,"Title":"Move EventSource to shared CoreLib partition","State":"closed","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/23925.","Url":"https://github.com/dotnet/corert/pull/7299","RelatedDescription":"Closed or merged PR \"Move EventSource to shared CoreLib partition\" (#7299)"},{"Id":"433552374","IsPullRequest":true,"CreatedAt":"2019-04-16T08:06:54","Actor":"Dotnet-GitSync-Bot","Number":"7310","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7310)"},{"Id":"433571783","IsPullRequest":true,"CreatedAt":"2019-04-16T07:09:59","Actor":"jkotas","Number":"7312","RawContent":null,"Title":"Add AdditionalBuildArgs option for the official build pipeline","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7312","RelatedDescription":"Closed or merged PR \"Add AdditionalBuildArgs option for the official build pipeline\" (#7312)"},{"Id":"433568931","IsPullRequest":true,"CreatedAt":"2019-04-16T07:08:27","Actor":"jkotas","Number":"7311","RawContent":null,"Title":"Add musl targets in packages","State":"closed","Body":"Contribute to #4552","Url":"https://github.com/dotnet/corert/pull/7311","RelatedDescription":"Closed or merged PR \"Add musl targets in packages\" (#7311)"},{"Id":"433521193","IsPullRequest":true,"CreatedAt":"2019-04-16T02:12:54","Actor":"Dotnet-GitSync-Bot","Number":"7309","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7309)"},{"Id":"433456685","IsPullRequest":false,"CreatedAt":"2019-04-15T20:08:37","Actor":"josephmoresena","Number":"7307","RawContent":null,"Title":"Compile Gui.cs example win-x64","State":"open","Body":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n","Url":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Open issue \"Compile Gui.cs example win-x64\" (#7307)"},{"Id":"433044565","IsPullRequest":false,"CreatedAt":"2019-04-15T12:48:38","Actor":"UNDEFINED-BEHAVIOR","Number":"7300","RawContent":null,"Title":"What is the correct system codepage for build.cmd script","State":"closed","Body":"![image](https://user-images.githubusercontent.com/8407331/56100592-a4028c00-5f55-11e9-9abd-3af4f5a5856e.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7300","RelatedDescription":"Closed issue \"What is the correct system codepage for build.cmd script\" (#7300)"},{"Id":"433259360","IsPullRequest":true,"CreatedAt":"2019-04-15T12:39:46","Actor":"MichalStrehovsky","Number":"7305","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7305)"},{"Id":"433156142","IsPullRequest":true,"CreatedAt":"2019-04-15T11:44:52","Actor":"MichalStrehovsky","Number":"7303","RawContent":null,"Title":"Remove problematic characters in eventtrace.cpp","State":"closed","Body":"The C++ compiler finds the typographic apostrophe disturbing.\r\n\r\n`warning C4828: The file contains a character starting at offset 0x103e5 that is illegal in the current source character set (codepage 65001).`","Url":"https://github.com/dotnet/corert/pull/7303","RelatedDescription":"Closed or merged PR \"Remove problematic characters in eventtrace.cpp\" (#7303)"},{"Id":"433157869","IsPullRequest":true,"CreatedAt":"2019-04-15T08:32:26","Actor":"MichalStrehovsky","Number":"7304","RawContent":null,"Title":"Add normalized equivalent of YieldProcessor","State":"open","Body":"Ports dotnet/coreclr#13670 to CoreRT.\r\n\r\nMarked as draft because I don't have good perf numbers yet (and this is not an area that I'm comfortable making changes in).","Url":"https://github.com/dotnet/corert/pull/7304","RelatedDescription":"Open PR \"Add normalized equivalent of YieldProcessor\" (#7304)"},{"Id":"433075833","IsPullRequest":true,"CreatedAt":"2019-04-15T04:09:51","Actor":"Dotnet-GitSync-Bot","Number":"7302","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7302","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7302)"},{"Id":"433060403","IsPullRequest":true,"CreatedAt":"2019-04-15T02:33:52","Actor":"Dotnet-GitSync-Bot","Number":"7301","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @razfriman","Url":"https://github.com/dotnet/corert/pull/7301","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7301)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"435021289","IsPullRequest":false,"CreatedAt":"2019-04-19T01:55:09","Actor":"ajaybhargavb","Number":"3146","RawContent":null,"Title":"Internal error: new deps file generation logic did not produce the same result as the old logic","State":"open","Body":"I've included both the old and new deps files here.\r\n\r\n[Microsoft.AspNetCore.Razor.Test.MvcShim.deps.zip](https://github.com/dotnet/sdk/files/3096744/Microsoft.AspNetCore.Razor.Test.MvcShim.deps.zip)\r\n\r\n\r\nOriginal error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error : Internal error: new deps file generation logic did not produce the same result as the old logic. [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Please file an issue for this at https://github.com/dotnet/sdk and include the following two files:  [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Deps file from old logic: C:\\Github\\aspnet\\AspNetCore-Tooling\\artifacts\\bin\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Debug\\netcoreapp3.0\\Microsoft.AspNetCore.Razor.Test.MvcShim.deps.json [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Deps file from new logic: C:\\Github\\aspnet\\AspNetCore-Tooling\\artifacts\\bin\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Debug\\netcoreapp3.0\\Microsoft.AspNetCore.Razor.Test.MvcShim.deps.new.json [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     You can work around this by setting the DepsFileGenerationMode MSBuild property to 'old' [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\n```\r\n\r\n```\r\ndotnet --info:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011216\r\n Commit:    19c844a865\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27613-07\r\n  Commit:  5c329c85ae\r\n```","Url":"https://github.com/dotnet/sdk/issues/3146","RelatedDescription":"Open issue \"Internal error: new deps file generation logic did not produce the same result as the old logic\" (#3146)"},{"Id":"435008587","IsPullRequest":false,"CreatedAt":"2019-04-19T00:31:59","Actor":"sbomer","Number":"3145","RawContent":null,"Title":"TestAsTools job fails with latest SDK","State":"open","Body":"See the failures in https://github.com/dotnet/sdk/pull/3133:\r\n```\r\nF:\\workspace\\_work\\1\\s\\src\\Tests\\Directory.Build.targets(56,5): error MSB3073: The command \"dotnet tool install --local testSdkRestore --version 3.0.100-ci --add-source F:\\workspace\\_work\\1\\s\\artifacts\\packages\\Debug\\NonShipping\\\" exited with code 1. [F:\\workspace\\_work\\1\\s\\src\\Tests\\Microsoft.NET.Restore.Tests\\Microsoft.NET.Restore.Tests.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3145","RelatedDescription":"Open issue \"TestAsTools job fails with latest SDK\" (#3145)"},{"Id":"434990963","IsPullRequest":true,"CreatedAt":"2019-04-18T23:00:24","Actor":"heng-liu","Number":"3144","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into SDK master","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into master branch.","Url":"https://github.com/dotnet/sdk/pull/3144","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into SDK master\" (#3144)"},{"Id":"434977794","IsPullRequest":true,"CreatedAt":"2019-04-18T22:05:38","Actor":"nugetlurker","Number":"3143","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3143","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into sdk\" (#3143)"},{"Id":"434977774","IsPullRequest":true,"CreatedAt":"2019-04-18T22:05:34","Actor":"nugetlurker","Number":"3142","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3142","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into sdk\" (#3142)"},{"Id":"434558015","IsPullRequest":true,"CreatedAt":"2019-04-18T21:29:21","Actor":"dsplaisted","Number":"3137","RawContent":null,"Title":"Update NuGet","State":"closed","Body":"Insert NuGet 5.1.0-rtm.5921\r\n\r\nSyncs with the version inserted to dotnet/toolset here: https://github.com/dotnet/toolset/pull/593","Url":"https://github.com/dotnet/sdk/pull/3137","RelatedDescription":"Closed or merged PR \"Update NuGet\" (#3137)"},{"Id":"434734518","IsPullRequest":true,"CreatedAt":"2019-04-18T21:21:18","Actor":"dotnet-bot","Number":"3138","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3138","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#3138)"},{"Id":"434735459","IsPullRequest":true,"CreatedAt":"2019-04-18T21:20:58","Actor":"dotnet-maestro[bot]","Number":"3140","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3140","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3140)"},{"Id":"434948895","IsPullRequest":true,"CreatedAt":"2019-04-18T20:35:08","Actor":"MSLukeWest","Number":"3141","RawContent":null,"Title":"Adding deps.json file to PublishItemsOutputGroup","State":"open","Body":"The PublishItemsOutputGroup needs to also contain the app's deps.json file or there will be a runtime failure","Url":"https://github.com/dotnet/sdk/pull/3141","RelatedDescription":"Open PR \"Adding deps.json file to PublishItemsOutputGroup\" (#3141)"},{"Id":"434531654","IsPullRequest":true,"CreatedAt":"2019-04-18T19:36:49","Actor":"fadimounir","Number":"3134","RawContent":null,"Title":"Rename properties and simplify R2R targets","State":"closed","Body":"Rename properties as agreed (PublishReadyToRun, PublishReadyToRunEmitSymbols, PublishReadyToRunExclude)\r\n\r\nSimplify R2R creation logic: No need to split ResolvedFilesToPublish into PublishAlways and PreserveNewest lists.","Url":"https://github.com/dotnet/sdk/pull/3134","RelatedDescription":"Closed or merged PR \"Rename properties and simplify R2R targets\" (#3134)"},{"Id":"434557343","IsPullRequest":true,"CreatedAt":"2019-04-18T16:40:11","Actor":"dsplaisted","Number":"3136","RawContent":null,"Title":"Allow disabling apphost","State":"closed","Body":"Don't try to find apphost packs if UseAppHost is not true.\r\n\r\nThere was a regression in global tool installation caught by the GivenDotnetInstallTool.ItRunsWithTheSpecifiedVerbosity test in the cli repo.  This is a targeted change to enable fixing that (the dummy restore.proj will need to set UseAppHost to false too), in order to unblock https://github.com/dotnet/cli/pull/11166.\r\n\r\nThis is related to #3135, but this PR is a more surgical fix than the broader questions in that bug.","Url":"https://github.com/dotnet/sdk/pull/3136","RelatedDescription":"Closed or merged PR \"Allow disabling apphost\" (#3136)"},{"Id":"434734538","IsPullRequest":true,"CreatedAt":"2019-04-18T12:01:27","Actor":"dotnet-bot","Number":"3139","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3139","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3139)"},{"Id":"432300971","IsPullRequest":true,"CreatedAt":"2019-04-18T01:23:51","Actor":"nugetlurker","Number":"3117","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3117","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3117)"},{"Id":"434534365","IsPullRequest":false,"CreatedAt":"2019-04-18T00:00:31","Actor":"dsplaisted","Number":"3135","RawContent":null,"Title":"AppHost selection doesn't work well with DisableImplicitFrameworkReferences or RuntimeFrameworkVersion","State":"open","Body":"There are a couple of issues with app host selection:\r\n\r\n- Some projects use `DisableImplicitFrameworkReferences` to disable any package references, downloads, etc. that aren't explicitly specified.  In some cases this is used for a \"restore-only\" project that simply downloads a package.  It would be expected that the `DisableImplicitFrameworkReferences` property would stop an AppHost pack from being downloaded, but currently it doesn't.  This can lead to problems with package downgrades, or where an app host can't be found for the specified RID.\r\n- `RuntimeFrameworkVersion` can be specified as metadata on a `FrameworkReference`.  However, there's no way to do the same thing for the AppHost pack (besides specifying the `RuntimeFrameworkVersion` property which applies to all shared frameworks.  This makes it difficult to consume a specific build of .NET Core.","Url":"https://github.com/dotnet/sdk/issues/3135","RelatedDescription":"Open issue \"AppHost selection doesn't work well with DisableImplicitFrameworkReferences or RuntimeFrameworkVersion\" (#3135)"},{"Id":"434529197","IsPullRequest":true,"CreatedAt":"2019-04-17T23:35:34","Actor":"sbomer","Number":"3133","RawContent":null,"Title":"Update sdk","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3133","RelatedDescription":"Open PR \"Update sdk\" (#3133)"},{"Id":"432729778","IsPullRequest":true,"CreatedAt":"2019-04-17T22:28:03","Actor":"fadimounir","Number":"3123","RawContent":null,"Title":"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios","State":"closed","Body":"Unsupported scenarios are:\r\n1) When a RID is not provided\r\n2) When publishing framework dependent apps (TEMP, until #3109 and #3110 are fixed)","Url":"https://github.com/dotnet/sdk/pull/3123","RelatedDescription":"Closed or merged PR \"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios\" (#3123)"},{"Id":"432722156","IsPullRequest":true,"CreatedAt":"2019-04-17T19:56:05","Actor":"fadimounir","Number":"3121","RawContent":null,"Title":"Couple of fixes and tweaks to the R2R creation logic","State":"closed","Body":"Changing crossgen commands to use response files.\r\nChanging /Platform_Assemblies_Paths to a set of /r arguments\r\nUsing resolved files list as assembly references to crossgen (temp hack until issue 3110 is fixed)","Url":"https://github.com/dotnet/sdk/pull/3121","RelatedDescription":"Closed or merged PR \"Couple of fixes and tweaks to the R2R creation logic\" (#3121)"},{"Id":"433742612","IsPullRequest":true,"CreatedAt":"2019-04-17T13:55:07","Actor":"dotnet-maestro[bot]","Number":"3130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19215.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3130)"},{"Id":"434176500","IsPullRequest":true,"CreatedAt":"2019-04-17T09:16:03","Actor":"swaroop-sridhar","Number":"3132","RawContent":null,"Title":"Publish to Single-File","State":"open","Body":"This change implements support for publishing apps to a [single file](https://github.com/dotnet/designs/blob/master/accepted/single-file/design.md).\r\n\r\n* ``dotnet publish /p:PublishSingleFile=true`` causes the contents of the \"original\" publish directory to a single file in the actual publish directory\r\n* Files marked with the meta-data ``<ExcludeFromSingleFile>false<ExcludeFromSingleFile>`` are left in the publish directory unbundled. This includes PDB files by default\r\n* PDB files can be bundled into the single file by setting ``/p:IncludeSymbolsInSingleFile=true``\r\n\r\nPublishing to a single file requires publishing wrt a RID using an apphost, because the generated file is the platform-specific AppHost executable with embedded dependencies.","Url":"https://github.com/dotnet/sdk/pull/3132","RelatedDescription":"Open PR \"Publish to Single-File\" (#3132)"},{"Id":"432723599","IsPullRequest":false,"CreatedAt":"2019-04-17T07:24:41","Actor":"JunTaoLuo","Number":"3122","RawContent":null,"Title":"Unable to resolve AppHost for the current runtime if it's not included in the SDK","State":"closed","Body":"I'm seeing broken behaviour when the app host is not bundled in the targeting pack of the SDK.\r\n\r\nI discovered this as part of our dependency update in https://github.com/aspnet/AspNetCore-Tooling/pull/409. When we first ingested the changes, we saw errors such like:\r\n```\r\n(AspNetCore-Tooling) C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents> dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreApp30PackageVersion=3.0.0-preview5-27608-16 /p:_RazorBuildServerPipeName=\"bc0e5740-2362-4e4c-8244-64c38154f0d7\" /t:Build /p:Configuration=Debug /p:_RazorForceBuildServer=true\r\nMicrosoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Microsoft.Common.CurrentVersion.targets(4552,5): error MSB3030: Could not copy the file \"C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\obj\\Debug\\netcoreapp3.0\\MvcWithComponents.exe\" because it was not found. [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\n```\r\nI have a binlog for the failing scenario:\r\n[msbuild.zip](https://github.com/dotnet/sdk/files/3074987/msbuild.zip)\r\n\r\nIt seems like the issue is that the app host package could not be found in \"\\.dotnet\\x64\\packs\\runtime.win-x64.Microsoft.NETCore.DotNetAppHost\" since the version of the runtime we reference is ahead of the the version that's included in the SDK. In this case, sdk\\3.0.100-preview4-011136 doesn't contain the targeting pack for runtime\\3.0.0-preview5-27608-16. However, using a newer runtime than what's included in the SDK is a core scenario that we depend on so how should this work?\r\n\r\nCan someone on the SDK team please advise on the expectation here and look through the binlog to see why the mechanism breaks in our scenario?\r\n\r\ncc @nguerrera @dsplaisted \r\n\r\ncc @dougbu @natemcmaster\r\n","Url":"https://github.com/dotnet/sdk/issues/3122","RelatedDescription":"Closed issue \"Unable to resolve AppHost for the current runtime if it's not included in the SDK\" (#3122)"},{"Id":"433940775","IsPullRequest":false,"CreatedAt":"2019-04-16T19:10:12","Actor":"KirillOsenkov","Number":"3131","RawContent":null,"Title":"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input","State":"open","Body":"See https://github.com/Microsoft/msbuild/issues/4313\r\n\r\nhttps://github.com/dotnet/sdk/blob/8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateSupportedRuntime.targets#L44\r\n\r\nWe should find another way to invalidate. I'm seeing RAR cache written to every time even during rebuilds where nothing has changed. This in turn triggers rebuild of WriteAppConfig, even though the app config is the same.","Url":"https://github.com/dotnet/sdk/issues/3131","RelatedDescription":"Open issue \"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input\" (#3131)"},{"Id":"433471159","IsPullRequest":false,"CreatedAt":"2019-04-15T20:47:03","Actor":"ericstj","Number":"3129","RawContent":null,"Title":"SDK doesn't honor TargetingPackVersion on FrameworkReference","State":"open","Body":"SDK permits specifying TargetingPackVersion metdata on FrameworkReference:\r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L99-L103\r\n\r\nBut then it constructs the path to the targeting pack based on KnownFrameworkReference: \r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L112-L122\r\n\r\nAlso, is this really the way we should be specifying which framework to build against?  I had expected `RuntimeFrameworkVersion` to work, but it looks like that only controls the runtime and not ref-pack.\r\n\r\n/cc @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3129","RelatedDescription":"Open issue \"SDK doesn't honor TargetingPackVersion on FrameworkReference\" (#3129)"},{"Id":"433460479","IsPullRequest":false,"CreatedAt":"2019-04-15T20:18:34","Actor":"vidarw","Number":"3128","RawContent":null,"Title":"No package for Ubuntu 19.04 (Disco Dingo)","State":"open","Body":"Ubuntu is officially releasing version 19.04 (Disco Dingo) within a week.\r\nThere is currently no `dotnet-sdk-2.2` available for the newset version of Ubuntu in the Microsoft repository.\r\n\r\nSolution would be to add a disco compatible release package or as a temporary fix provide a standalone .deb package to install with `dpkg`.","Url":"https://github.com/dotnet/sdk/issues/3128","RelatedDescription":"Open issue \"No package for Ubuntu 19.04 (Disco Dingo)\" (#3128)"},{"Id":"433244399","IsPullRequest":true,"CreatedAt":"2019-04-15T19:21:53","Actor":"dotnet-maestro[bot]","Number":"3127","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3127","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3127)"},{"Id":"432532625","IsPullRequest":true,"CreatedAt":"2019-04-14T13:54:35","Actor":"dotnet-maestro[bot]","Number":"3118","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19211.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19212.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3118","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3118)"},{"Id":"432691504","IsPullRequest":true,"CreatedAt":"2019-04-12T23:15:36","Actor":"dsplaisted","Number":"3120","RawContent":null,"Title":"Allow test tools to roll forward across major versions of .NET Core","State":"closed","Body":"Currently the dotnet tools which run our tests target .NET Core 2.1.  This updates them to allow roll-forward across major .NET Core versions, so that they can run on a 3.0 runtime if 2.x isn't installed.","Url":"https://github.com/dotnet/sdk/pull/3120","RelatedDescription":"Closed or merged PR \"Allow test tools to roll forward across major versions of .NET Core\" (#3120)"},{"Id":"432733384","IsPullRequest":true,"CreatedAt":"2019-04-12T20:30:59","Actor":"sbomer","Number":"3125","RawContent":null,"Title":"Add ILLink targets and tests","State":"open","Body":"This adds linker targets, mostly adapted from https://github.com/mono/linker/blob/9766e2b2406a3d44cbf05e49ab2bd19b535e3e5a/src/ILLink.Tasks/ILLink.Tasks.targets, to run the linker after `ComputeFilesToPublish`.\r\n\r\nA few things still need to change (but I wanted to get what I have so far out for review):\r\n- Change property names to agreed-upon strings\r\n- Update deps file generation in response to https://github.com/dotnet/sdk/pull/3086. I think this needs https://github.com/dotnet/sdk/pull/3113 or another update PR to be merged.\r\n- Update the linker:\r\n  - to include `UsingTask` for other tasks in the assembly (namely, `ComputeManagedAssemblies`)\r\n  - for `ReferencePath` support\r\n  - with a net472 build of the task dll\r\n\r\nWhen I run these tests locally with a recent version of the linker, the checks pass up to the deps file asserts.\r\n\r\n@nguerrera, @fadimounir, @swaroop-sridhar PTAL","Url":"https://github.com/dotnet/sdk/pull/3125","RelatedDescription":"Open PR \"Add ILLink targets and tests\" (#3125)"},{"Id":"432733028","IsPullRequest":false,"CreatedAt":"2019-04-12T20:29:52","Actor":"KathleenDollard","Number":"3124","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/sdk/issues/3124","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#3124)"},{"Id":"432641949","IsPullRequest":true,"CreatedAt":"2019-04-12T16:12:36","Actor":"chcosta","Number":"3119","RawContent":null,"Title":"/* Work in progress */ Test arcade changes","State":"open","Body":"Do not merge!\r\n\r\nPlaying around with some template changes to enable test run title for publishing test results.","Url":"https://github.com/dotnet/sdk/pull/3119","RelatedDescription":"Open PR \"/* Work in progress */ Test arcade changes\" (#3119)"},{"Id":"433231210","IsPullRequest":false,"CreatedAt":"2019-04-12T15:12:26","Actor":"cartermp","Number":"3126","RawContent":null,"Title":"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms","State":"open","Body":"Even if we have cool tooling that adds the appropriate stuff to a project file based on various actions in the IDE, there will still be users who manually edit their WinForms/WPF project files.\r\n\r\nWe should emit a warning under the following conditions:\r\n\r\n* `Microsoft.NET.Sdk.WindowsDesktop` is specified but there is no `UseWPF` or `UseWinForms`\r\n* `UseWPF` or `UseWinForms` is specified but the SDK attribute is not `Microsoft.NET.Sdk.WindowsDesktop`\r\n\r\nIn the first case, it would be great if the warning could say something to the effect of:\r\n\r\n\"Microsoft.NET.Sdk.WindowsDesktop is specified, but no corresponding UseWPF or UseWinForms property was found.\"\r\n\r\nIn the latter case, using WPF as an example, something to the effect of:\r\n\r\n\"UseWPF was specified but the SDK attribute is not Microsoft.NET.Sdk.WindowsDesktop\"\r\n\r\nNot sure if this is an SDK concern or not, but I figured I'd log it somewhere.","Url":"https://github.com/dotnet/sdk/issues/3126","RelatedDescription":"Open issue \"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms\" (#3126)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"# New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"# New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1119087634003841025","CreatedAt":"2019-04-19T03:57:38+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is now available. https://t.co/emspxTsaEX","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":85,"FavoriteCount":51,"RawContent":null},{"Id":"1119030394605588480","CreatedAt":"2019-04-19T00:10:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 4 https://t.co/7QaZC5qmx6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":111,"FavoriteCount":69,"RawContent":null},{"Id":"1118906461180973059","CreatedAt":"2019-04-18T15:57:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1118551190927622144","CreatedAt":"2019-04-17T16:26:00+00:00","UserScreenname":"dotnet","Text":"If you're enjoying the DevOps for https://t.co/iOiV9qNspl Developers series on @ch9 check out this FREE ebook from… https://t.co/IlN3xK8cpo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":21,"RawContent":null},{"Id":"1118529550902865924","CreatedAt":"2019-04-17T15:00:00+00:00","UserScreenname":"dotnet","Text":"In part 3 of DevOps For https://t.co/iOiV9r53NV Developers @AbelSquidHead\n&amp; @jeremylikness show us how to create a… https://t.co/s7eQpdTakW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1118196772604530688","CreatedAt":"2019-04-16T16:57:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":20,"FavoriteCount":5,"RawContent":null},{"Id":"1116672310809903105","CreatedAt":"2019-04-12T12:00:00+00:00","UserScreenname":"dotnet","Text":"The #OnDotNet show joined forces with @azureadvocates to bring you DevOps for https://t.co/iOiV9r53NV Developers!… https://t.co/eP7EZV54nW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1116372533907902465","CreatedAt":"2019-04-11T16:08:47+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/XI2YUBZA88","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null},{"Id":"1115373724868333570","CreatedAt":"2019-04-08T21:59:53+00:00","UserScreenname":"dotnet","Text":"On this week's @aspnet Community Standup, Glenn Condron (@condrong) takes Workers Everywhere!\n\nJoin us on Tuesday A… https://t.co/wo80u0zkOk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":13,"RawContent":null}]}},"RunOn":"2019-04-19T05:30:28.7037314Z","RunDurationInMilliseconds":8934}