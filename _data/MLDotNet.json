{"Data":{"GitHub":{"Issues":[{"Id":"605927008","IsPullRequest":true,"CreatedAt":"2020-04-25T03:53:50","Actor":"mstfbl","Number":"5057","RawContent":null,"Title":"Fixed X64Fact tests","State":"closed","Body":"Fixed X64Fact tests with x86 specific baselines added\r\n\r\nCurrently obtaining baselines from x86 builds from CI","Url":"https://github.com/dotnet/machinelearning/pull/5057","RelatedDescription":"Closed or merged PR \"Fixed X64Fact tests\" (#5057)"},{"Id":"606526503","IsPullRequest":false,"CreatedAt":"2020-04-24T19:14:55","Actor":"MatiKingloom","Number":"5062","RawContent":null,"Title":"Can i use ML.NET do train a face recognition model","State":"open","Body":"Hi\r\n\r\nIm new to ML, so this might seem like a stupid question, but, id like to use C# to train a face recognition model.\r\n\r\nThe face detection part would be done by Dlib which will extract the face encodings  (double[128])\r\n\r\nSo the question would be can i use ML.NET to train a model that gets face vectors for input\r\nInput would be:\r\nLabel: string \r\nFeature: double array\r\n\r\nAnd trains a model that when an image comes in and i extract the face encodings from it, it could predict which person it is. (I have about 2000 person with 2-3 images per person (2-3 encodings))\r\n\r\nIs it possible and what algorithms are suitable for this task ?\r\n\r\nThanks for a answer\r\nMati","Url":"https://github.com/dotnet/machinelearning/issues/5062","RelatedDescription":"Open issue \"Can i use ML.NET do train a face recognition model\" (#5062)"},{"Id":"605921473","IsPullRequest":true,"CreatedAt":"2020-04-24T16:43:27","Actor":"antoniovs1029","Number":"5056","RawContent":null,"Title":"Let ImageLoadingTransformer dispose the last image it loads","State":"closed","Body":"Fixes #4126.\r\n\r\nBy investigating issue #4126 I found out that `ImageResizingTransformer `disposed the last input Bitmap object it resized (i.e. _only_ the last image object in the input dataset). When working with in-memory images (i.e. NOT loaded with `ImageLoaderTransformer`) this is inadequate, since the `ImageResizingTransformer `will dispose the last image in the dataset, and the user won't be able to use that image again. Particullarly, issue #4126 happened when running Cross Validation with a pipeline that included applying `ImageResizingTransformer `to in memory images: when scoring the first model during cross validation, the last image of the input dataset got disposed, and when trying to score the second model, the image wasn't there, and a exception was thrown.\r\n\r\nThe only reason I found as to why `ImageResizingTransformer` had this behavior, is because `ImageLoadingTransformer` actually disposes all the images it loads except for the last one ([link](https://github.com/dotnet/machinelearning/blob/919bc8b886a6bc20c5022e8dad00f84bc1248236/src/Microsoft.ML.ImageAnalytics/ImageLoader.cs#L226-L230)). So assuming this is the only reason for `ImageResizingTransformer's `disposer, I simply moved the disposal mechanism of the last image to `ImageLoadingTransformer`.\r\n\r\nI added two tests that used to throw exceptions without the changes on this PR. And I also manually tested with the debugger's profiler that the last image got correctly disposed when using `ImageLoadingTransformer`.","Url":"https://github.com/dotnet/machinelearning/pull/5056","RelatedDescription":"Closed or merged PR \"Let ImageLoadingTransformer dispose the last image it loads\" (#5056)"},{"Id":"606114582","IsPullRequest":false,"CreatedAt":"2020-04-24T07:49:57","Actor":"nathanlamplough-MeVitae","Number":"5061","RawContent":null,"Title":"Converting Naive Bayes Scores to Probabilities","State":"open","Body":"Hello,\r\nWhat are the scores produced from the NaiveBayes classifier, are they log probabilities? As I seem to get very large minus values. Whereas I did something similar in sci-kit learns NaiveBayes and the log probabilities were much lower negative values. How do you suggest converting these scores to probabilities? Should I call an exponential function on them if they are in fact log probabilities?\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5061","RelatedDescription":"Open issue \"Converting Naive Bayes Scores to Probabilities\" (#5061)"},{"Id":"606108479","IsPullRequest":true,"CreatedAt":"2020-04-24T07:38:25","Actor":"mstfbl","Number":"5060","RawContent":null,"Title":"Added logging for when specific configuration baseline is used","State":"open","Body":"Certain unit tests require configuration specific baselines, for when they differ from \"normal\" baselines. A unit test may also use more than one configuration, such as `linux-x64` and `netcoreapp31`. \r\n\r\nThis PR adds logging for each unit test that utilizes a configuration specific baseline. This PR also corrects a small typo.","Url":"https://github.com/dotnet/machinelearning/pull/5060","RelatedDescription":"Open PR \"Added logging for when specific configuration baseline is used\" (#5060)"},{"Id":"606057417","IsPullRequest":true,"CreatedAt":"2020-04-24T05:44:28","Actor":"frank-dong-ms","Number":"5059","RawContent":null,"Title":"simplify baseline files","State":"open","Body":"many baseline file in SingleDebug and SingleRelease folder are identical, move them to Common folder to avoid duplication\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5059","RelatedDescription":"Open PR \"simplify baseline files\" (#5059)"},{"Id":"603573648","IsPullRequest":false,"CreatedAt":"2020-04-24T03:09:06","Actor":"najeeb-kazmi","Number":"5042","RawContent":null,"Title":"Return average metrics in AutoML CrossValSummaryRunner","State":"closed","Body":"Related to #4663 \r\nSee also https://github.com/dotnet/machinelearning/pull/5031#discussion_r409233020\r\n\r\n`CrossValSummaryRunner` in AutoML gets invoked when the dataset size is less than 15k rows. It runs 10-fold cross validation and computes the average optimization metric across the folds. It then reports all the metrics from the fold that has the optimization metric closest to this average.\r\nhttps://github.com/dotnet/machinelearning/blob/214926fcf5753ad62acf32c0759bdaf8fcd13b73/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L76-L78\r\n\r\nA better way to do this would be to calculate the average of all the metrics, instantiate a new metrics class with these averages, and return that in the run details. This could reuse the code for calculating the average of non_NaN metrics from #5031. The following two things will need to be figured out and need more discussion:\r\n\r\n1. `PerClassLogLoss`: For multiclass classification, the ordering of the class labels may be different across the 10 folds. So, the `PerClassLogLoss` metric from each fold will have different indices for the class labels. In this situation, a standardized ordering would need to be figured out and the averages calculated for each class accordingly.\r\n\r\n2. `ConfusionMatrix`: For multiclass classification, the same problem as above needs solving. In addition, for both binary and multiclass classification, what confusion matrix is returned needs discussion. The distribution of class labels will be different across the folds, so what exactly is the \"average\" of a confusion matrix? Do we return a confusion matrix at all? Do we just return the confusion matrix from the fold with optimization metric closest to the average (current behavior)? If we are going this route, the confusion matrix property in the metrics classes will need to be made internally settable, as there is no constructor that takes the confusion matrix as an argument.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5042","RelatedDescription":"Closed issue \"Return average metrics in AutoML CrossValSummaryRunner\" (#5042)"},{"Id":"604909183","IsPullRequest":false,"CreatedAt":"2020-04-24T00:34:58","Actor":"CBrauer","Number":"5050","RawContent":null,"Title":"AutoML silently fails on the training phase of a binary classification problem.","State":"closed","Body":"Hey guys,\r\n\r\n### Problem\r\nI am submitting a test project that demonstrates a bug.\r\nAutoML silently fails on the training phase of a binary classification problem.\r\n\r\n### Reproducible Code\r\nMy reproducible code can by downloaded from: https://github.com/CBrauer/Test_ML.NET\r\n\r\n### My environment is:\r\n  Microsoft Visual Studio Professional 2019 Preview\r\n  Version 16.6.0 Preview 2.1\r\n  VisualStudio.16.Preview/16.6.0-pre.2.1+30001.183\r\n  Microsoft .NET Framework\r\n  Version 4.8.03752\r\nI am running on Windows 10 Enterprise, version 1909 (OS Build 18.363.815).\r\nMy project uses the latest preview2 code.\r\n\r\n### Running the test program\r\nWhen you run the program you will see output like:\r\n\r\nRunning AutoML binary classification experiment using: FastTree,F1Score\r\n     Trainer                               Accuracy    AUC       AUPRC   F1-score  Duration\r\n   1 FastTreeBinary                         0.8610    0.7071    0.3537    0.1346    1.5480\r\n  11 FastTreeBinary                         0.8544    0.7357    0.3300    0.2445    2.8725\r\n  16 FastTreeBinary                         0.8722    0.7520    0.4299    0.3119   10.6857\r\n  33 FastTreeBinary                         0.8730    0.7357    0.4213    0.3188    3.0864\r\n  40 FastTreeBinary                         0.8730    0.7421    0.4410    0.3407   10.6638\r\n  50 FastTreeBinary                         0.8714    0.7496    0.4230    0.3584    9.2112\r\n  73 FastTreeBinary                         0.8695    0.7426    0.4184    0.3717   10.4270\r\n 118 FastTreeBinary                         0.8714    0.7307    0.4090    0.3822   10.6095\r\n 244\r\n\r\nEach experiment should last only one-hour.  I ran the program over-night, and it never finished. \r\n\r\nCharles\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5050","RelatedDescription":"Closed issue \"AutoML silently fails on the training phase of a binary classification problem.\" (#5050)"},{"Id":"605941817","IsPullRequest":true,"CreatedAt":"2020-04-23T23:42:26","Actor":"frank-dong-ms","Number":"5058","RawContent":null,"Title":"try put nuget packages to shared folder instead of local to save disk…","State":"open","Body":"… space\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5058","RelatedDescription":"Open PR \"try put nuget packages to shared folder instead of local to save disk…\" (#5058)"},{"Id":"605892251","IsPullRequest":false,"CreatedAt":"2020-04-23T21:39:34","Actor":"justinormont","Number":"5055","RawContent":null,"Title":"Investigate thresholding binary log-loss","State":"open","Body":"Multi-class log-loss has an `epsilon` value which thresholds the input probability between `epsilon` and `1.0`. This causes multi-class log-loss to never be `Infinity`.\r\n\r\nThe binary log-loss does not have an `epsilon` threshold, which causes the returned log-loss to be `Infinity` when the prediction is perfectly confident (p=0.0 or p=1.0) and incorrect about the true label.\r\n\r\nLog-loss for binary classification:\r\nhttps://github.com/dotnet/machinelearning/blob/062be280a9d6de23838d4db5ad93fea9d7d0c1f6/src/Microsoft.ML.Data/Evaluators/BinaryClassifierEvaluator.cs#L663-L677\r\n\r\nLog-loss for multi-class:\r\nhttps://github.com/dotnet/machinelearning/blob/062be280a9d6de23838d4db5ad93fea9d7d0c1f6/src/Microsoft.ML.Data/Evaluators/MulticlassClassificationEvaluator.cs#L450-L458\r\n\r\nAs part of thinking through the right behavior, we should investigate the behavior of other ML packages like scikit-learn/TensorFlow/PyTorch.","Url":"https://github.com/dotnet/machinelearning/issues/5055","RelatedDescription":"Open issue \"Investigate thresholding binary log-loss\" (#5055)"},{"Id":"601079846","IsPullRequest":false,"CreatedAt":"2020-04-23T21:32:54","Actor":"Zeraphil","Number":"5033","RawContent":null,"Title":"Unexpected behavior using multiple pipelines for training vs one","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n-**What did I do?**\r\n- Instead of one training pipeline, I split the pipeline to fit and transform the data into a featurized IDataView, and used that to train a classifier\r\n-**What happened?**\r\nClassifier accuracy was 50% of accuracy when the training pipeline is a complete chain.\r\n-**What did I expect**\r\nI expect that the accuracy of the model trained on either with the TransformerChain pipeline or trainingData transformed by the same TransformerChain be similar in accuracy\r\n\r\n### Source code / logs\r\n\r\nThis is what I mean by splitting the pipeline.\r\n\r\n`var dataProcessPipeline =\r\n                                      mlContext.Transforms.Text.FeaturizeText(\"WordFeatures\", \"Transcript\")\r\n                                      .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"));`\r\n\r\n`IDataView transformedTrainingData = dataProcessPipeline.Fit(trainingDataView).Transform(trainingDataView);`\r\n\r\n`var trainer = mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName:\"Label\", featureColumnName: \"Features\")\r\n.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));`\r\n\r\n`ITransformer model = trainer.Fit(transformedTrainingData );`\r\n\r\nI understand this to be conceptually similar to\r\n\r\n`\r\n            var dataProcessPipeline =\r\n                                      mlContext.Transforms.Text.FeaturizeText(\"WordFeatures\", \"Transcript\")\r\n                                      .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"));`\r\n\r\n           var trainer = mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName: \"Label\", featureColumnName: \"Features\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);`\r\n\r\n`ITransformer model =trainingPipeline .Fit(trainingDataView);`\r\n\r\n\r\nThe first gives me ~50% accuracy on the test set, the second ~98.9%. Is my understanding incorrect? Is there a missing step on doing things this way? My goal is to create a single Transformer for featurizing data that can then be used in more than one model, without having to build multiple models that featurize the data in the exact same way. \r\n\r\nHopefully the example makes sense. I can clarify if not.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5033","RelatedDescription":"Closed issue \"Unexpected behavior using multiple pipelines for training vs one\" (#5033)"},{"Id":"605646052","IsPullRequest":false,"CreatedAt":"2020-04-23T18:18:55","Actor":"behroozbc","Number":"5054","RawContent":null,"Title":"Can speech recognition be done in ML.NET?","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:Windows\r\n- **.NET Version (eg., dotnet --info)**: 3.1.201\r\n\r\n### Issue\r\nhi \r\ni want to Speech recognition in ml .net i see issue list in #2732 is same but i want know now i can do it or not ??","Url":"https://github.com/dotnet/machinelearning/issues/5054","RelatedDescription":"Closed issue \"Can speech recognition be done in ML.NET?\" (#5054)"},{"Id":"601525122","IsPullRequest":true,"CreatedAt":"2020-04-23T17:03:02","Actor":"gvashishtha","Number":"5038","RawContent":null,"Title":"clarifying parameters on time series","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSome context:\r\n\r\nAlso note that, here we are talking about three different parameters:\r\n1.\tseriesLength is the length of the whole timeseries.\r\n2.\ttrainSize is the number of points from the beginning of the series that are used for training.\r\n3.\twindowSize is the size of rolling window during the training of SSA.\r\n\r\nThe first parameter is dictated by the series and even though it’s not used in SSA, it’s not meaningful for the user to “set” it arbitrarily. The third parameter is *recommended* to be at least twice as the biggest seasonality in the data that the user care about. The second parameter must be more twice the third parameter. \r\n\r\nSo to summarize we should have:\r\n1.\t2*Seasonality length < windowSize\r\n2.\t2*windowSize < trainSize\r\n3.\ttrainSize < seriesLength\r\n\r\nThe first constraint is recommended while the other two are required.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5038","RelatedDescription":"Closed or merged PR \"clarifying parameters on time series\" (#5038)"},{"Id":"604444030","IsPullRequest":true,"CreatedAt":"2020-04-23T17:00:37","Actor":"frank-dong-ms","Number":"5047","RawContent":null,"Title":"NetCore3.1 generates different test result issue","State":"closed","Body":"Address issues that NetCore 3.1 generates different test result:\r\nhttps://github.com/dotnet/machinelearning/issues/1096\r\nhttps://github.com/dotnet/machinelearning/issues/3856\r\n\r\nThe difference comes from CPUMath using different instruction set:\r\n1. dotnet framework and dotnet core 2.1 uses CpuMathUtils.netstandard that uses SSE instruction set through CPUMath native library;\r\n2. Since dotnet core 2.2, dotnet core has direct support for AVX and SSE hardware Intrinsics so dotnet core 3.1 use AVX or SSE instruction set directly. Dotnet core 3.1 uses CpuMathUtils.netcoreapp that uses AVX, SSE or direct floating point calculation depending on hardward avaibility. \r\n\r\nAVX and SSE generates slightly different result due to nature of floating point math.\r\nUse below issue to track: #5044\r\n\r\nSo in short term we are separating test baseline for netcore 3.1 until we add AVX support at CPUMath native library.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5047","RelatedDescription":"Closed or merged PR \"NetCore3.1 generates different test result issue\" (#5047)"},{"Id":"605620858","IsPullRequest":false,"CreatedAt":"2020-04-23T15:12:12","Actor":"mengaims","Number":"5053","RawContent":null,"Title":"Support entire timeseries anomaly detection for SrCnn model","State":"open","Body":"### New estimator for SrCnn Algorithm to support entire anomaly detection\r\nBy creating a SrCnnAnomalyEstimator, user could do anomaly detection using SrCnn algorithm, this estimator is implemented in streaming way, for each arrived point, it will use a window of cached previous points to do calculation. But if the entire timeseries is alreay known, it would be more time efficient to do anomaly detection in entire way instead of streaming way. SrCnnEntireAnomalyEstimator is implemented to provide this entire timeseries anomaly detection.\r\n\r\nBesides, by old SrCnnAnomalyEstimator, user could only get whether the point is an anomaly or not, but has no way to set sensitivity value for the anomaly. Sometimes an anomaly do happens, but with a low sensitivity setting, it may not be a valid alert. The SrCnnEntireAnomalyEstimator will allow user to set sensitivity, and output margin for the point according to the sensitivity, so that when you get an anomaly point, you could judge if it's a valid alert by comparing the value with upper boundary and lower boundary.\r\n\r\nThe new SrCnnEntireAnomalyEstimator provides 3 modes, and output varies depending on selected mode:\r\n\r\n* **AnomalyOnly.** Only do anomaly detection. Output 3-element Double vector of (IsAnomaly, RawScore, Mag)\r\n* **AnomalyAndExpectedValue.** Besides anomaly detection, calculate expected value for each point. Output 4-element Double vector of (IsAnomaly, RawScore, Mag, ExpectedValue)\r\n* **AnomalyAndMargin.** Besides anomaly detection and expected value calculation, also estimate boundaries under given sensitivity. Output a 7-element Double vector of (IsAnomaly, AnomalyScore, Mag, ExpectedValue, BoundaryUnit, UpperBoundary, LowerBoundary).\r\n\r\n### Benchmark report\r\n#### 1. Dataset\r\nWe evaluate on the Yahoo timeseries dataset, which has 367 timeseries and 572966 points in total.\r\n#### 2. Evaluation method and score\r\n\r\nWe calculate the Precision, Recall, and F1 score using the method of： [https://github.com/iopsai/iops/tree/master/evaluation](https://github.com/iopsai/iops/tree/master/evaluation).\r\n\r\nThe anomaly detection part is the same for 3 modes, so the scores are the same among each mode.\r\nPrecision | Recall | F1 | #TruePositive | #Positives | #Anomalies | Fine tuned   parameters\r\n-- | -- | -- | -- | -- | -- | --\r\n0.816 | 0.669 | 0.735 | 2619 | 3208 | 3915 | Threshold=0.35, BatchSize=512\r\n\r\n#### 3. Latency:\r\nAnd we ran the three modes on a machine with Intel(R) Xeon(R) CPU E5-2660 v3 @ 2.60GHz, 16GB memory, x64 operating system.\r\n\r\nWe divided the input series into different sizes of buckets to get the estimation of latency under different point counts and different modes, the unit is ms.\r\n\r\n#Point Count | AnomalyOnly(ms) | AnomalyAndExpectedValue(ms) | AnomalyAndMargin(ms)\r\n-- | -- | -- | --\r\n128 | 0.1276 | 0.1337 | 0.8583\r\n256 | 1.0798 | 1.0863 | 1.1234\r\n512 | 1.1746 | 1.2167 | 2.1904\r\n1024 | 2.2675 | 2.3639 | 4.9734\r\n2048 | 5.2353 | 5.6926 | 12.1360\r\n4096 | 11.3913 | 12.0261 | 25.9043\r\n8129 | 20.0000 | 24.5533 | 54.9933\r\n\r\nRelated PR: #4998 ","Url":"https://github.com/dotnet/machinelearning/issues/5053","RelatedDescription":"Open issue \"Support entire timeseries anomaly detection for SrCnn model\" (#5053)"},{"Id":"604583362","IsPullRequest":true,"CreatedAt":"2020-04-23T03:39:26","Actor":"guolinke","Number":"5048","RawContent":null,"Title":"[LightGBM] fix bug for empty categorical values","State":"closed","Body":"ping @najeeb-kazmi  and refer to #3659\r\n\r\nFixes #3659","Url":"https://github.com/dotnet/machinelearning/pull/5048","RelatedDescription":"Closed or merged PR \"[LightGBM] fix bug for empty categorical values\" (#5048)"},{"Id":"604620503","IsPullRequest":false,"CreatedAt":"2020-04-22T19:18:05","Actor":"deviousasti","Number":"5049","RawContent":null,"Title":"Slots out of range","State":"closed","Body":"In the example, won't `item.Key` go up to the bit length specified.\r\nIf there's no matching slot, this will throw.\r\n\r\n```\r\n            foreach (var featureRow in NgramFeaturesColumn)\r\n            {\r\n                foreach (var item in featureRow.Items())\r\n                    Console.Write($\"{slots[item.Key]}  \"); // out of range possible\r\n                Console.WriteLine();\r\n            }\r\n```\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: da8a2391-a844-b431-0b36-992fcba2aeb4\r\n* Version Independent ID: 19a18209-4127-4079-0e38-311b7de733bd\r\n* Content: [TextCatalog.ProduceHashedNgrams Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.producehashedngrams?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/5049","RelatedDescription":"Closed issue \"Slots out of range\" (#5049)"},{"Id":"604377278","IsPullRequest":true,"CreatedAt":"2020-04-22T03:34:40","Actor":"mstfbl","Number":"5046","RawContent":null,"Title":"Removed references to NeuralTreeEvaluator.dll and cleaned up dependent functions","State":"closed","Body":"Fixes Issue #1443 \r\n\r\n`NeuralTreeEvaluator.dll` does not exist in the ML.NET repository. As such, it makes sense to clean up functions dependent on this .dll, which was carried from TLC.","Url":"https://github.com/dotnet/machinelearning/pull/5046","RelatedDescription":"Closed or merged PR \"Removed references to NeuralTreeEvaluator.dll and cleaned up dependent functions\" (#5046)"},{"Id":"604301759","IsPullRequest":true,"CreatedAt":"2020-04-22T02:59:35","Actor":"frank-dong-ms","Number":"5043","RawContent":null,"Title":"move CI windows build to netcore public pool","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5043","RelatedDescription":"Closed or merged PR \"move CI windows build to netcore public pool\" (#5043)"},{"Id":"604355680","IsPullRequest":true,"CreatedAt":"2020-04-22T02:42:01","Actor":"harishsk","Number":"5045","RawContent":null,"Title":"Added ability to compare configuration specific baselines","State":"closed","Body":"This PR enables BinaryClassifierSymSgdTest for x86 runs by adding a separate x86 specific baseline. In the process it also adds the ability enable other tests to have configuration specific baselines.\r\n\r\nSome background on why configuration specific baseline is needed here:\r\nThe SymbolicSgd trainers call into native code in SymSgdNative.dll which in turn call into MklImports.dll to compute dot products. The cblas_sdot call in MKL returns different results for identical input on x86 and x64 based on computation history. MklImports.dll is built from the Intel MKL SDK. Trying to fix the MKL across x86 and x64 is is a much bigger work item than we have time for. \r\nIt is more important for us to enable these tests. So I am attempting this fix by providing different baselines for x86 and x64.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5045","RelatedDescription":"Closed or merged PR \"Added ability to compare configuration specific baselines\" (#5045)"},{"Id":"604343678","IsPullRequest":false,"CreatedAt":"2020-04-21T23:18:24","Actor":"frank-dong-ms","Number":"5044","RawContent":null,"Title":"support AVX instruction set at CPUMath native","State":"open","Body":"In CPUMath native we only support SSE.\r\nIn dotnet framework and dotnet core 2.1 we are using CPUMath native directly which means we only have SSE.\r\nIn dotnet core 2.2 or later version, dotnet core supports hardware Intrinsics so have support for both AVX and SSE.\r\n\r\nSupport AVX in CPUMath native will have performance benefit as well as generates identical result from different dotnet framework version using.","Url":"https://github.com/dotnet/machinelearning/issues/5044","RelatedDescription":"Open issue \"support AVX instruction set at CPUMath native\" (#5044)"},{"Id":"603570970","IsPullRequest":true,"CreatedAt":"2020-04-21T06:24:26","Actor":"mstfbl","Number":"5041","RawContent":null,"Title":"Converted potentially large variables to type long","State":"closed","Body":"Fixes #3228\r\n\r\nAs explained in Issue #3228, very large datasets more than 2.14 billion rows of data can cause overflow when, say, the sum of these labels are obtained, **and** if these are stored as ints. This PR converts arrays and matrices for storing labels and features in their respective histograms from type `int` to type `long`. In addition, this PR updates the version of NaiveBayesMulticlassTrainer's Loader to preserve backwards compatibility. ","Url":"https://github.com/dotnet/machinelearning/pull/5041","RelatedDescription":"Closed or merged PR \"Converted potentially large variables to type long\" (#5041)"},{"Id":"602360224","IsPullRequest":true,"CreatedAt":"2020-04-19T02:51:01","Actor":"frank-dong-ms","Number":"5040","RawContent":null,"Title":"Fix official build","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5040","RelatedDescription":"Closed or merged PR \"Fix official build\" (#5040)"},{"Id":"601593889","IsPullRequest":true,"CreatedAt":"2020-04-16T23:36:26","Actor":"michaelgsharp","Number":"5039","RawContent":null,"Title":"Lag lead operator","State":"closed","Body":"LagLeadOperator copies values from prior (lag) rows or future (lead) rows.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5039","RelatedDescription":"Closed or merged PR \"Lag lead operator\" (#5039)"},{"Id":"601417598","IsPullRequest":true,"CreatedAt":"2020-04-16T23:28:02","Actor":"michaelgsharp","Number":"5037","RawContent":null,"Title":"Forecasting pivot featurizer","State":"closed","Body":"ForecastingPivotFeaturizer takes in columns that are 2D vectors, and \"pivots\" them into single value columns while dropping null values. It currently supports output from LagLeadOperator and RollingWindowFeaturizer.","Url":"https://github.com/dotnet/machinelearning/pull/5037","RelatedDescription":"Closed or merged PR \"Forecasting pivot featurizer\" (#5037)"},{"Id":"601281150","IsPullRequest":true,"CreatedAt":"2020-04-16T23:16:13","Actor":"michaelgsharp","Number":"5035","RawContent":null,"Title":"Rolling Window","State":"closed","Body":"RollingWindow does rolling window calculations per grain (kinda like a composite unique key by combining multiple columns). It currently provides min/mean/max.","Url":"https://github.com/dotnet/machinelearning/pull/5035","RelatedDescription":"Closed or merged PR \"Rolling Window\" (#5035)"},{"Id":"601245173","IsPullRequest":true,"CreatedAt":"2020-04-16T23:05:36","Actor":"michaelgsharp","Number":"5034","RawContent":null,"Title":"Short grain dropper","State":"closed","Body":"ShortGrainDropper makes sure that each grain combination (kinda like a composite unique key by combining multiple columns) has the specified minimum number of rows. If it does not, then the all the rows corresponding to that grain are dropped.","Url":"https://github.com/dotnet/machinelearning/pull/5034","RelatedDescription":"Closed or merged PR \"Short grain dropper\" (#5034)"},{"Id":"601399919","IsPullRequest":true,"CreatedAt":"2020-04-16T19:52:49","Actor":"LittleLittleCloud","Number":"5036","RawContent":null,"Title":"Update package dependency in CodeGenerator","State":"open","Body":"This PR \r\n- make CodeGenerator depends on a release AutoML package instead of project, to avoid the latest change in model load/unload mechanism, which will break ModelBuilder. ","Url":"https://github.com/dotnet/machinelearning/pull/5036","RelatedDescription":"Open PR \"Update package dependency in CodeGenerator\" (#5036)"},{"Id":"604976647","IsPullRequest":false,"CreatedAt":"2020-03-16T05:30:59","Actor":"luislhg","Number":"5052","RawContent":null,"Title":"ImageClassificationTrainer can't load model","State":"open","Body":"### System information\r\n\r\n- Windows 10 Pro\r\n- .NET 4.8 and .NET Core 3.1: \r\n- Memory 12GB\r\n- Processor Intel Core i7 CPU 950 @ 3.07GHz\r\n\r\n### Issue\r\n\r\n- Tried to train an image classification using the Model Builder.\r\n\r\nSteps: Create a project.\r\nAdd a Machine Learning through solution explorer, then in the ML.NET Model Builder:\r\n\r\n1. Scenario -> Image Classification\r\n2. Data -> A folder with around 8.000 images (.png) separated in 8 folders/categories.\r\n3. Train -> Start Training\r\n\r\nIt will result in a popup (image attached) saying \"Model Builder Error\".\r\n![Model Builder Error](https://user-images.githubusercontent.com/16278387/76725716-d1d7ee00-672d-11ea-8589-7ed8b803321e.png)\r\n\r\nOutput/log from Machine Learning output:\r\n|     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003974.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0004556.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003859.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003999.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003329.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003310.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003954.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0004090.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0003738.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0004048.\r\n[Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=ValueToKeyMapping{ col=Label:Label} xf=RawByteImageLoading{ col=ImageSource_featurized:ImageSource imageFolder=} xf=ColumnCopying{ col=Features:ImageSource_featurized} tr=ImageClassification{} xf=KeyToValueMapping{ col=PredictedLabel:PredictedLabel} cache=- . Exception: System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Não é possível carregar a DLL 'tensorflow': Uma rotina de inicialização da biblioteca de vínculo dinâmico (DLL) falhou. (Exceção de HRESULT: 0x8007045A)\r\n   em Tensorflow.c_api.TF_NewGraph()\r\n   em Tensorflow.Graph..ctor()\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadMetaGraph(String path)\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   em Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   em Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   em Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\nTensorflow exception triggered while loading model.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5052","RelatedDescription":"Open issue \"ImageClassificationTrainer can't load model\" (#5052)"},{"Id":"604976498","IsPullRequest":false,"CreatedAt":"2019-05-15T04:18:27","Actor":"sergey-tihon","Number":"5051","RawContent":null,"Title":"[AutoML] Auto detection of extra header rows mixed into the dataset","State":"open","Body":"I have dataset in text file with 20 columns, 1st column is the class name (string), other columns are features (floats)\r\n\r\nHere are first lines of this file\r\n```\r\nClass\tA1\tA2\tA3\tA4\tA5\tA6\tA7\tA8\tA9\tA10\tA11\tA12\tA13\tA14\tA15\tA16\tA17\tA18\tA19\r\nCS\t61.00000\t0.16855\t0.00000\t1.77778\t3.00000\t0.25375\t0.07984\t0.00169\t0.02250\t0.01535\t0.07984\t0.01027\t0.27415\t6.00000\t4.00000\t0.37649\t3552.00000\t0\t26.00000\r\nCS\t316.00000\t0.14823\t15.00000\t1.77778\t10.00000\t0.02352\t0.00440\t0.20407\t0.00357\t0.00914\t0.03585\t0.14171\t0.01674\t21.00000\t4.00000\t0.14961\t4235.00000\t0\t17.00000\r\nCS\t176.00000\t0.00000\t20.00000\t1.77778\t3.00000\t0.01850\t0.19659\t0.00469\t0.03895\t0.00000\t0.19659\t0.59670\t0.19659\t10.00000\t5.00000\t0.23767\t3850.00000\t0\t24.00000\r\nCS\t133.00000\t0.00000\t4.00000\t1.33333\t3.00000\t0.00049\t0.01214\t0.22827\t0.18777\t0.18778\t0.12627\t0.00915\t0.18777\t11.00000\t7.00000\t0.32619\t1880.00000\t0\t16.00000\r\nCS\t140.00000\t0.00000\t14.00000\t1.33333\t1.00000\t0.01787\t0.02860\t0.48472\t0.02860\t0.59853\t0.02860\t1.06538\t0.02860\t9.00000\t7.00000\t0.02860\t1876.00000\t0\t142.00000\r\n```\r\nand the full file [data.txt](https://github.com/dotnet/machinelearning/files/3180842/data.txt)\r\n\r\nLet's execute AutoML\r\n\r\n> mlnet auto-train --task `multiclass-classification` --dataset \"data.txt\" --has-header --label-column-name `Class` --max-exploration-time 10\r\n\r\nas a  results AutoML will generate `ModelInput.cs` file that starts like this\r\n```csharp\r\n public class ModelInput\r\n    {\r\n        [ColumnName(\"Class\"), LoadColumn(0)]\r\n        public string Class { get; set; }\r\n        [ColumnName(\"A1\"), LoadColumn(1)]\r\n        public string A1 { get; set; }\r\n        [ColumnName(\"A2\"), LoadColumn(2)]\r\n        public string A2 { get; set; }\r\n        [ColumnName(\"A3\"), LoadColumn(3)]\r\n        public string A3 { get; set; }\r\n```\r\n\r\nall columns are recognized as `string` instead of `float` 😢\r\n\r\nas a result data pipeline also incorrect (`OneHotEncoding` was applied to numeric columns)\r\n```csharp\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Class\", \"Class\")\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[]\r\n                {\r\n                    new InputOutputColumnPair(\"A3\", \"A3\"), new InputOutputColumnPair(\"A4\", \"A4\"),\r\n                    new InputOutputColumnPair(\"A5\", \"A5\"), new InputOutputColumnPair(\"A14\", \"A14\"),\r\n                    new InputOutputColumnPair(\"A15\", \"A15\"), new InputOutputColumnPair(\"A18\", \"A18\")\r\n                }))\r\n                .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[]\r\n                {\r\n                    new InputOutputColumnPair(\"A1\", \"A1\"), new InputOutputColumnPair(\"A2\", \"A2\"),\r\n                    new InputOutputColumnPair(\"A6\", \"A6\"), new InputOutputColumnPair(\"A17\", \"A17\"),\r\n                    new InputOutputColumnPair(\"A19\", \"A19\")\r\n                }))\r\n                .Append(mlContext.Transforms.Concatenate(\"Features\",\r\n                    new[] {\"A3\", \"A4\", \"A5\", \"A14\", \"A15\", \"A18\", \"A1\", \"A2\", \"A6\", \"A17\", \"A19\"}))\r\n                .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"))\r\n                .AppendCacheCheckpoint(mlContext);\r\n```\r\n\r\nWhy in this case all columns recognized as strings?\r\nWhy in some columns `OneHotHashEncoding` was used instead of `OneHotEncoding`?","Url":"https://github.com/dotnet/machinelearning/issues/5051","RelatedDescription":"Open issue \"[AutoML] Auto detection of extra header rows mixed into the dataset\" (#5051)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-25T05:30:36.8551894Z","RunDurationInMilliseconds":686}