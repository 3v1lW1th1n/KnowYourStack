{"Data":{"GitHubIssues":{"Issues":[{"Id":"320568795","IsPullRequest":false,"CreatedAt":"2018-05-07T04:48:35","Actor":"Psvensso","Number":"777","RawContent":null,"Title":"Eventhandlers not binding as expected: The call is ambiguous between BindMethods.GetEventHandlerValue...","State":"closed","Body":"Trying to update the blazor-realworld-example-app on a local fork but having problems updating to the new onclick=\"@x\" binder syntax.\r\n\r\nExample: \r\n`<a class=\"nav-link\" onclick=\"@clicktest\"> Click test</a>`\r\n\r\n`void clicktest(UIMouseEventArgs e) {\r\n        Console.WriteLine(\"Click testing \");\r\n    }`\r\n\r\n \r\nResult: \r\nThe call is ambiguous between the following methods or properties: 'BindMethods.GetEventHandlerValue<T>(Action<T>)' and 'BindMethods.GetEventHandlerValue<T>(Func<T, Task>)'\tBlazorRealworld\r\n(Same result with or without the UIMouseEventArgs n the handler)\r\n\r\nNote: \r\nA lambda works fine\r\n`<a class=\"nav-link\" onclick=\"@((e)=>clicktest(e))\">\r\n                        Click test\r\n                    </a>`\r\n\r\n\r\nRefs:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RunCommand>dotnet</RunCommand>\r\n    <RunArguments>blazor serve</RunArguments>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    \r\n    <PackageReference Include=\"CommonMark.NET\" Version=\"0.15.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.3.0\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.3.0\" />\r\n    <PackageReference Include=\"Microsoft.NET.Sdk.Razor\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"All\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.AspNetCore.Blazor.Cli\" Version=\"0.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCore SDK: 2.1.300-preview2-008533\r\nTest repo: https://github.com/Psvensso/blazor-realworld-example-app/tree/onclick-snapshot","Url":"https://github.com/aspnet/Blazor/issues/777","RelatedDescription":"Closed issue \"Eventhandlers not binding as expected: The call is ambiguous between BindMethods.GetEventHandlerValue...\" (#777)"},{"Id":"320617599","IsPullRequest":false,"CreatedAt":"2018-05-06T18:47:12","Actor":"thesobercoder","Number":"780","RawContent":null,"Title":"[Feature Request] Provide a way to restrict the usage of tags inside a parent component","State":"open","Body":"As point-of-view from a library authoring it is necessary as an author to limit the usage of tag that can be authored inside a parent component.\r\n\r\nA trivial example would be \r\n\r\n```\r\n<MyAwesomeDropdown>\r\n    <Item Value=\"1\" Text=\"A\" />\r\n    <Item Value=\"2\" Text=\"B\" />\r\n    <SomeOtherNotValidTag /> <!-- Should be Invalid -->\r\n    <div>Hello World</div> <!-- Should be Invalid -->\r\n</MyAwesomeDropdown>\r\n```\r\n\r\nSince we are in the awesome sugary strongly typed C# land, the type system gives the author confidence on shipping the library with hard set rules and also lets the consumer adopt the library easily without fiddling around at run-time to find out what went wrong.","Url":"https://github.com/aspnet/Blazor/issues/780","RelatedDescription":"Open issue \"[Feature Request] Provide a way to restrict the usage of tags inside a parent component\" (#780)"},{"Id":"320613769","IsPullRequest":false,"CreatedAt":"2018-05-06T18:02:18","Actor":"csnewman","Number":"779","RawContent":null,"Title":"Invalid HTML markup causes lockup","State":"open","Body":"Invalid html markup in the form of an unterminated tag causes the CPU to hit 100% and for the page to become completely unresponsive until chrome asks you if you wish to kill the page.\r\n\r\n```\r\n@page \"/example\"\r\n\r\n<h5 class=\"card-title\">(some text)</h5>\r\n<p class=\"card-text\">\r\n    (Some text as well)\r\n<p class=\"card-text\">\r\n   (Some other text)\r\n</p>\r\n```\r\n\r\nAs seen, the first p tag is not terminated. \r\n","Url":"https://github.com/aspnet/Blazor/issues/779","RelatedDescription":"Open issue \"Invalid HTML markup causes lockup\" (#779)"},{"Id":"320605496","IsPullRequest":false,"CreatedAt":"2018-05-06T16:11:08","Actor":"hungdluit","Number":"778","RawContent":null,"Title":"Render custom Element","State":"open","Body":"```\r\nprotected override void BuildRenderTree(RenderTreeBuilder builder)\r\n{\r\n          base.BuildRenderTree(builder);\r\n\r\n            builder.OpenElement(0, \"div\");\r\n            BuildContentRenderTree(builder);\r\n            builder.CloseElement();\r\n }\r\n\r\n protected virtual void BuildContentRenderTree(RenderTreeBuilder builder)\r\n {\r\n            if (ChildContent != null)\r\n            {\r\n                ChildContent(builder);\r\n            }\r\n   }\r\n```\r\n\r\n```\r\n@page \"/usercontrolsample\"\r\n\r\n<UserControl>\r\n    <a>This is a User Control</a>\r\n</UserControl>\r\n```\r\nResult:\r\n\r\n![image](https://user-images.githubusercontent.com/5623089/39675253-a89e1ebe-5182-11e8-8499-bcaff2db793e.png)\r\n\r\nI'm following same samples on the internet. But it does not work in my case.\r\nI think 'div' should be rendered instead of 'usercontrol'","Url":"https://github.com/aspnet/Blazor/issues/778","RelatedDescription":"Open issue \"Render custom Element\" (#778)"},{"Id":"320560951","IsPullRequest":false,"CreatedAt":"2018-05-06T04:06:39","Actor":"galvesribeiro","Number":"776","RawContent":null,"Title":"Failure on touch event handling","State":"open","Body":"While implementing #771, handling the touch events, I have the following issues:\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/39669660-2416704c-50c9-11e8-9ed9-04f71445deea.png)\r\n\r\nAs you may see in the picture, I'm getting the `touchstart` event on the `EventForDotNet.ts` properly (hence the log in the first part of the image) but it crashes right after that with a `[Intervention]` warning right before that exception...\r\n\r\nIf I follow the link at the warning (https://www.chromestatus.com/features/5093566007214080) It looks like for listeners of the touch event attached to the document, the `preventDefault` called before dispatch the events in Blazor are being ignore and everything else explodes.\r\n\r\nCan someone point me what is going on internally? I was unable to track the reason on Blazor's code...\r\n\r\nThanks!\r\n","Url":"https://github.com/aspnet/Blazor/issues/776","RelatedDescription":"Open issue \"Failure on touch event handling\" (#776)"},{"Id":"320560101","IsPullRequest":false,"CreatedAt":"2018-05-06T03:45:03","Actor":"danroth27","Number":"775","RawContent":null,"Title":"Blazor dev tools browser extension","State":"open","Body":"Other frameworks like [Vue](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd) and [Redux](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd) have some pretty nice dev tools browser extensions. \r\n\r\nWe should consider having a Blazor dev tools browser extension. Potential scenarios:\r\n- Inspect components\r\n- Update components with live reloading\r\n","Url":"https://github.com/aspnet/Blazor/issues/775","RelatedDescription":"Open issue \"Blazor dev tools browser extension\" (#775)"},{"Id":"320556305","IsPullRequest":false,"CreatedAt":"2018-05-06T02:09:37","Actor":"attilah","Number":"774","RawContent":null,"Title":"camelCase all the things","State":"open","Body":"It is a question not an issue.\r\n\r\nNow as @SteveSandersonMS 's camel case PR merged, wouldn't it be nice to update all the TS data structures (I'm thinking about events for example) to move from pascal case to camel case property names?\r\n\r\nSince @galvesribeiro is [working on](https://github.com/aspnet/Blazor/pull/771) filling up the events with payload it would be good to have a decision on it.","Url":"https://github.com/aspnet/Blazor/issues/774","RelatedDescription":"Open issue \"camelCase all the things\" (#774)"},{"Id":"320549560","IsPullRequest":false,"CreatedAt":"2018-05-05T23:35:18","Actor":"Suchiman","Number":"773","RawContent":null,"Title":"Html in Attribute values cause build errors in current CI builds","State":"open","Body":"```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt Title=\"<div>Test!</div>\" />\r\n```\r\nwill cause\r\n```\r\nOne or more errors occurred. (Unexpected node type Microsoft.AspNetCore.Blazor.Razor.HtmlElementIntermediateNode)\r\nat System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.GenerateCode(RazorProjectEngine engine, SourceItem[] inputs)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCore(RazorConfiguration configuration, String projectDirectory, String tagHelperManifest, List`1 sources, List`1 outputs, List`1 relativePaths)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCoreAsync()\r\nat Microsoft.AspNetCore.Razor.Tools.CommandBase.<ExecuteAsync>d__10.MoveNext()\r\npackages\\microsoft.aspnetcore.blazor.build\\0.4.0-preview1-10282\\targets\\RazorCompilation.targets(281,5): error : rzc generate exited with code 1. [WebApplication7\\WebApplication7\\WebApplication7.csproj]\r\n```","Url":"https://github.com/aspnet/Blazor/issues/773","RelatedDescription":"Open issue \"Html in Attribute values cause build errors in current CI builds\" (#773)"},{"Id":"320528509","IsPullRequest":false,"CreatedAt":"2018-05-05T17:51:37","Actor":"Suchiman","Number":"772","RawContent":null,"Title":"ArgumentOutOfRangeException in current CI VSIX builds","State":"open","Body":"Start with\r\n```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt\r\n```\r\nnow autocomplete Title and you'll end up with ( | = cursor )\r\n```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt Title=\"|\"\r\n```\r\nat this point, VS will freeze and restart, caused by this exception\r\n```\r\nSystem.ArgumentOutOfRangeException\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection.get_Item(Int32)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorDesignTimeNodeWriter.WriteComponentAttribute(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext, Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode.WriteNode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitExtension(Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode.AcceptExtensionNode[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderNode(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorDesignTimeNodeWriter.WriteComponent(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext, Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode.WriteNode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitExtension(Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode.AcceptExtensionNode[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitMethodDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitClassDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitNamespaceDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDocument(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter.WriteDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument, Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorRazorCSharpLoweringPhase.ExecuteCore(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine.ProcessCore(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDesignTime(Microsoft.AspNetCore.Razor.Language.RazorProjectItem)\r\n   at Microsoft.VisualStudio.Editor.Razor.BackgroundParser+BackgroundThread.WorkerLoop()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/aspnet/Blazor/issues/772","RelatedDescription":"Open issue \"ArgumentOutOfRangeException in current CI VSIX builds\" (#772)"},{"Id":"320527558","IsPullRequest":true,"CreatedAt":"2018-05-05T17:37:35","Actor":"galvesribeiro","Number":"771","RawContent":null,"Title":"Event payload","State":"open","Body":"Enhanced DOM events with proper payload.\r\n\r\nEvery commit comes with a particular (or set of related) event(s). \r\n\r\nI'll rebase/reset once the review is over.\r\n\r\nBlockers:\r\n\r\n- Touch events are blocked by #776 ","Url":"https://github.com/aspnet/Blazor/pull/771","RelatedDescription":"Open PR \"Event payload\" (#771)"},{"Id":"320195638","IsPullRequest":true,"CreatedAt":"2018-05-05T16:55:09","Actor":"SteveSandersonMS","Number":"751","RawContent":null,"Title":"In Blazor cshtml, auto-reference Microsoft.AspNetCore.Blazor and .Components","State":"closed","Body":"Fixes #749.\r\n\r\nI know that arguably we don't *have* to do this (C# developers already add `using` for things they need), but for a Blazor cshtml file there's basically no scenario where you'd ever not want to import `Microsoft.AspNetCore.Blazor` and `Microsoft.AspNetCore.Blazor.Components`. So this PR adds those namespaces to the ones implicitly referenced both at design time and build time. Can't think of any reason we shouldn't do this.\r\n\r\nIt looks like a big PR because so many baseline files are affected, but really it's quite a small change. For easier review, you might want to consider each of the commits separately.\r\n\r\nI'm not proposing to auto-add other namespaces like `.Routing`, `.Layouts`, `.Browser.Interop`, etc., because there are plenty of cases where you might not want them, and their type names might clash with some other library you're using.","Url":"https://github.com/aspnet/Blazor/pull/751","RelatedDescription":"Closed or merged PR \"In Blazor cshtml, auto-reference Microsoft.AspNetCore.Blazor and .Components\" (#751)"},{"Id":"320509048","IsPullRequest":true,"CreatedAt":"2018-05-05T16:41:08","Actor":"Suchiman","Number":"770","RawContent":null,"Title":"Recognize synchronously-completed tasks in BlazorComponent","State":"closed","Body":"Don't schedule StateHasChanged if async lifecycle events complete synchronously, fixes #760","Url":"https://github.com/aspnet/Blazor/pull/770","RelatedDescription":"Closed or merged PR \"Recognize synchronously-completed tasks in BlazorComponent\" (#770)"},{"Id":"320315473","IsPullRequest":false,"CreatedAt":"2018-05-05T16:41:08","Actor":"SteveSandersonMS","Number":"760","RawContent":null,"Title":"BlazorComponent async methods should all recognize synchronously-completed tasks","State":"closed","Body":"Currently most of the async lifecycle methods chain `StateHasChanged` onto any non-null returned task. They should check whether the returned task completed synchronously already, and if so, not chain on a duplicate `StateHasChanged`.","Url":"https://github.com/aspnet/Blazor/issues/760","RelatedDescription":"Closed issue \"BlazorComponent async methods should all recognize synchronously-completed tasks\" (#760)"},{"Id":"320505037","IsPullRequest":false,"CreatedAt":"2018-05-05T16:33:55","Actor":"boukenka","Number":"769","RawContent":null,"Title":"Some questions about milestones","State":"closed","Body":"First of all, thank you for that great project. It is opening so many new possibilities.\r\nHere are my questions:\r\n\r\n1. Why not remove the 2 remaining requests (SignalR and Events) and assign then to the milestone 0.4? I guess they will take some time.\r\n2. Do you plan to have more than 2 points for the milestone 0.4?\r\nI am just curious what will contain the next milestones.\r\nAlso I can see the number of issues/questions rapidly increasing in the last days.\r\nI guess it becoming more difficult to process/analyze all of them.","Url":"https://github.com/aspnet/Blazor/issues/769","RelatedDescription":"Closed issue \"Some questions about milestones\" (#769)"},{"Id":"320487389","IsPullRequest":false,"CreatedAt":"2018-05-05T16:10:08","Actor":"DierkDroth","Number":"767","RawContent":null,"Title":"We needed to talk performance","State":"closed","Body":"Hi,\r\n\r\nWe're investing significant effort in migrating our fat client .NET app to the web. Obviously we're very excited about wasm and Blazor and already made our business logic .NET Standard 2.0 compliant. In the last few days our prototype showed the first signs of life. However, we immediately hit a road block/show stopper ...\r\n\r\nSorry for being frank, but **performance is a desaster**\r\n\r\nDetails:\r\n- we found (using StopWatch) that our business logic is executed >= **100x slower** on wasm/Blazor than on desktop/.NET framework\r\n- we initially were in a disbelieve, but confirmed those findings by some simple/crude performance benchmarks\r\n\r\nAs per [FAQ ](https://github.com/aspnet/Blazor/wiki/FAQ) I understand that the app is not compiled but MSIL code is 'interpreted' by the .NET runtime (which is compiled to wasm)  as wasm binary. The compile option only is rendered as 'may be'.\r\n\r\nQuestions:\r\n1) are our performance findings accurate or are we missing something?\r\n2) if our findings are accurate: what is the path for Blazor to overcome that performance show stopper?\r\n\r\nThanks in advance","Url":"https://github.com/aspnet/Blazor/issues/767","RelatedDescription":"Closed issue \"We needed to talk performance\" (#767)"},{"Id":"320458024","IsPullRequest":false,"CreatedAt":"2018-05-05T16:02:14","Actor":"Andrzej-W","Number":"766","RawContent":null,"Title":"Add scoped lifetime to DI - inject the same service instance to child components","State":"closed","Body":"Let's assume I have a Customer component - this is the parent component. I also have CustomerList and CustomerDetails components - these are child components and they are displayed inside Customer component. All three components have to share some data and some business logic including Web API calls. I want to encapsulate this in CustomerService. Currently the only reasonable choice is to register CustomerService as Singleton and then inject it into all three Customer* components.\r\n\r\nIt's OK but below is another scenario where Singleton is not enough.\r\n\r\nI have CustomerComparer component and I want to display two different customers side by side. To do this I want to use two Customer components. Of course they cannot work with the same instance of CustomerService. The only solution I see here is to register CustomerService as Scoped (which is currently equivalent to Singleton). Scoped should work as follows:\r\n- service injected into the first component in hierarchy should work as Transient,\r\n- all child components should get the same service instance as parent component.\r\n\r\nWith the above functionality I will be able to display two Customer components at the same time.\r\n\r\nLook at #464 also.","Url":"https://github.com/aspnet/Blazor/issues/766","RelatedDescription":"Closed issue \"Add scoped lifetime to DI - inject the same service instance to child components\" (#766)"},{"Id":"320378541","IsPullRequest":false,"CreatedAt":"2018-05-05T16:00:42","Actor":"chanan","Number":"764","RawContent":null,"Title":"Loops, Lambdas, and Variables","State":"closed","Body":"This might be a known Razor issue, and since I haven't used Razor in ages I was caught off guard.\r\n\r\nThis does not work:\r\n```\r\n@for (int i = 0; i < items.Count; i++)\r\n{\r\n  <CarouselItem IsActive=\"@(SecondIndex == i)\" src=\"@item[i].Source\" alt=\"@items[i].Alt\">\r\n    <h5>@items[0].Header</h5>\r\n  </CarouselItem>\r\n}\r\n```\r\n\r\nYou get an exception with the h5 line (the previous lines are fine):\r\n\r\n```\r\nUncaught Error: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) <0x1f27f48 + 0x00018> in <140509c0d46c421ca83585ed625d5577>:0 \r\n  at Sample.Pages.Carousels+<>c__DisplayClass0_0.<BuildRenderTree>b__10 (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder3) <0x1f3d190 + 0x00090> in <14d8d1e2ea4743fa889b8a5ddf494a58>:0 \r\n\r\n```\r\n\r\nThe work around is to add a capture variable in the loop like so:\r\n```\r\n@for (int i = 0; i < items.Count; i++)\r\n{\r\n  Item item = items[i];\r\n  <CarouselItem IsActive=\"@(SecondIndex == i)\" src=\"@item.Source\" alt=\"@item.Alt\">\r\n    <h5>@item.Header</h5>\r\n  </CarouselItem>\r\n}\r\n```\r\n\r\nLike I said not sure if this is fixable since it might be in Razor like that, but at the very least a better error message and adding this to the docs would be helpful.","Url":"https://github.com/aspnet/Blazor/issues/764","RelatedDescription":"Closed issue \"Loops, Lambdas, and Variables\" (#764)"},{"Id":"320499475","IsPullRequest":false,"CreatedAt":"2018-05-05T10:47:15","Actor":"stavroskasidis","Number":"768","RawContent":null,"Title":"Component rendering logic requiring javascript interop with ElementRef","State":"open","Body":"I am stuck with the following problem in a component library I am developing. I want to expose an \"`Func<ElementRef,bool> EnabledHandler`\" parameter in my component, because the consumer of the component is expected to decide whether the component should be enabled or not based on some Javascript logic that includes the element reference. \r\n\r\nBecause I am dependent on the `ElementRef` I tried to insert the logic in the `OnAfterRender` event, however it is too late in the component's lifecycle to change the rendered html.\r\n\r\nLet me elaborate, consider the following example:\r\n\r\n### Index.cshtml\r\n\r\n```\r\n<div>\r\n    <DynamicButton EnabledHandler=\"@DynamicEnabled\" />\r\n</div>\r\n<span>\r\n    <DynamicButton EnabledHandler=\"@DynamicEnabled\" />\r\n</span>\r\n\r\n@functions{\r\n    bool DynamicEnabled(ElementRef element)\r\n    {\r\n        //Do some javascript stuff with the element and decide if the component should be enabled\r\n        return RegisteredFunction.Invoke<bool>(\"buttonEnabledLogic\", element); ;\r\n    }\r\n}\r\n```\r\n\r\n### Javascript\r\n```html\r\n<script>\r\n\tBlazor.registerFunction('buttonEnabledLogic', function (elem) {\r\n\t\t//some example js logic that requires the element\r\n\t\treturn elem.parentNode.nodeName == \"DIV\";\r\n\t});\r\n</script>\r\n```\r\n\r\n### DynamicButton.cshtml\r\n\r\n```xml\r\n<button ref=\"@ButtonRef\" disabled=\"@(!Enabled)\">I am dynamically enabled</button>\r\n@functions{\r\n\r\n    ElementRef ButtonRef;\r\n    bool Enabled { get; set; } = true;\r\n    [Parameter]\r\n    Func<ElementRef, bool> EnabledHandler { get; set; }\r\n\r\n    protected override void OnAfterRender()\r\n    {\r\n        //The EnabledHandler requires ButtonRef to be populated, so \r\n        //it must be OnAfterRender\r\n\r\n        var oldEnabledValue = Enabled;\r\n        if (EnabledHandler != null)\r\n        {\r\n            Enabled = EnabledHandler(ButtonRef);\r\n        }\r\n\r\n        if (oldEnabledValue != Enabled)\r\n        {\r\n            //This does not work\r\n            StateHasChanged();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAny suggestions/workarounds ? \r\nThanks in advance","Url":"https://github.com/aspnet/Blazor/issues/768","RelatedDescription":"Open issue \"Component rendering logic requiring javascript interop with ElementRef\" (#768)"},{"Id":"320422428","IsPullRequest":true,"CreatedAt":"2018-05-04T23:29:01","Actor":"attilah","Number":"765","RawContent":null,"Title":"Add support for pointer events, change oncontextmenu event type","State":"closed","Body":"- Add support for pointer events\r\n- Change oncontextmenu event from pointerevent to mouseevent (based on MDN docs)\r\n\r\nFixes: https://github.com/aspnet/Blazor/issues/763","Url":"https://github.com/aspnet/Blazor/pull/765","RelatedDescription":"Closed or merged PR \"Add support for pointer events, change oncontextmenu event type\" (#765)"},{"Id":"320350287","IsPullRequest":false,"CreatedAt":"2018-05-04T23:29:01","Actor":"attilah","Number":"763","RawContent":null,"Title":"pointer events as not handled and oncontextmenu event type is wrong","State":"closed","Body":"I found out that [pointer](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent) events are not handled by Blazor 0.3.0.\r\n\r\nWhen I was about to add them, I saw that Blazor already have a ```UIPointerEventArgs``` class and it is associated with the [onContextMenu](https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor/Components/EventHandlers.cs#L44) handler, which is by the specs does not make sense, since it is a [mouse](https://developer.mozilla.org/en-US/docs/Web/Events/contextmenu) event.\r\n\r\nIf I see it correctly the only changes needed to support pointer events are:\r\n\r\nEventhandlers.cs:\r\n\r\n```c#\r\n    // Pointer events\r\n    [EventHandler(\"gotpointercapture\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"lostpointercapture\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointercancel\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerdown\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerenter\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerleave\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointermove\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerout\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerover\", typeof(UIPointerEventArgs))]\r\n    [EventHandler(\"pointerup\", typeof(UIPointerEventArgs))]\r\n```\r\n\r\nEventForDotNet.ts:\r\n\r\n```js\r\ncase 'gotpointercapture':\r\ncase 'lostpointercapture':\r\ncase 'pointercancel':\r\ncase 'pointerdown':\r\ncase 'pointerenter':\r\ncase 'pointerleave':\r\ncase 'pointermove':\r\ncase 'pointerout':\r\ncase 'pointerover':\r\ncase 'pointerup':\r\n  return new EventForDotNet<UIPointerEventArgs>('pointer', { Type: event.type });\r\n```\r\n\r\nAll the other places because of the ```oncontextmenu``` handler already having the pieces for pointer events.\r\n\r\nWould you like to have a PR or you will copy these to the appropriate places?\r\n","Url":"https://github.com/aspnet/Blazor/issues/763","RelatedDescription":"Closed issue \"pointer events as not handled and oncontextmenu event type is wrong\" (#763)"},{"Id":"320348974","IsPullRequest":true,"CreatedAt":"2018-05-04T17:42:29","Actor":"eakoning","Number":"762","RawContent":null,"Title":"typo","State":"closed","Body":"Just a small typo... ;-)","Url":"https://github.com/aspnet/Blazor/pull/762","RelatedDescription":"Closed or merged PR \"typo\" (#762)"},{"Id":"320317062","IsPullRequest":false,"CreatedAt":"2018-05-04T15:26:53","Actor":"dlr1","Number":"761","RawContent":null,"Title":"question: Bound parameter value","State":"closed","Body":"I have a component(\"mycomp\"). I am just writing the value of parameter and expect the values to be in sync. what am I missing?\r\n```\r\n<div class=\"row\" style=\"height:100px;width:300px;\">\r\n    bound charttype value:@ChartType\r\n    <br />\r\n    ChartTypeInMethod: @ChartTypeInMethod\r\n</div>\r\n\r\n\r\n@functions{\r\n    [Parameter]\r\n    string ChartType { get; set; }\r\n\r\n    string ChartTypeInMethod { get; set; }\r\n    public void MyMethod()\r\n    {\r\n        ChartTypeInMethod = ChartType;\r\n    }\r\n}\r\n```\r\nI am using the above component in another page like below\r\n```\r\n<div class=\"row\">\r\n    <mycomp ChartType=\"@ChartType\" ref=\"comp1\"></mycomp>   \r\n    <div>\r\n        <input type=\"radio\" name=\"charttype\" checked=\"@(ChartType==\"bar\")\" value=\"bar\" onchange=\"@((e)=>charttypeChanged(e))\"/>bar\r\n        <input type=\"radio\" name=\"charttype\" checked=\"@(ChartType==\"line\")\" value=\"line\" onchange=\"@((e)=>charttypeChanged(e))\" />line\r\n    </div>\r\n</div>\r\n\r\n@functions{        \r\n    string ChartType { get; set; }\r\n    mycomp comp1;\r\n    \r\n    void charttypeChanged(UIChangeEventArgs e)\r\n    {\r\n        ChartType = e.Value.ToString();        \r\n        comp1.MyMethod();\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/761","RelatedDescription":"Closed issue \"question: Bound parameter value\" (#761)"},{"Id":"320297785","IsPullRequest":false,"CreatedAt":"2018-05-04T15:20:42","Actor":"DNF-SaS","Number":"759","RawContent":null,"Title":"Component-Rendering not optimal?","State":"closed","Body":"For testing purposes, I have modified the default blazor project template's FetchData.cshtml so that every WeatherForecast-Row is represented by a component.\r\n\r\n```\r\n@foreach ( var forecast in forecasts.Take(1) )\r\n{\r\n  <ForecastRow WeatherForecast=\"@forecast\" />\r\n}\r\n```\r\n\r\nForecastRow.cshtml is only\r\n```\r\n@inherits ComponentBase @*Only for Debug-Output to Console*@\r\n\r\n<tr>\r\n    <td>@this.WeatherForecast.Date.ToShortDateString()</td>\r\n    <td>@this.WeatherForecast.TemperatureC</td>\r\n    <td>@this.WeatherForecast.TemperatureF</td>\r\n    <td>@this.WeatherForecast.Summary</td>\r\n</tr>\r\n\r\n@functions\r\n{\r\n    [Parameter] private WeatherForecast WeatherForecast { get; set; }\r\n}\r\n```\r\nWhen displaying only the first row, the following LifeCycle-Events are fired:\r\n\r\n```\r\nBASE(FetchData) | - | SetParameters\r\nBASE(FetchData) | - | OnInit\r\nBASE(FetchData) | - | OnParametersSet\r\nBASE(FetchData) | - | OnParametersSetAsync\r\nBASE(FetchData) | - | OnAfterRender\r\nBASE(FetchData) | - | OnAfterRenderAsync\r\nBASE(NavMenu) | - | ShouldRender\r\nBASE(NavMenu) | - | OnAfterRender\r\nBASE(NavMenu) | - | OnAfterRenderAsync\r\nBASE(FetchData) | - | ShouldRender\r\nBASE(ForecastRow) | - | SetParameters\r\nBASE(ForecastRow) | - | OnInit\r\nBASE(ForecastRow) | - | OnInitAsync\r\nBASE(ForecastRow) | - | OnParametersSet\r\nBASE(ForecastRow) | - | OnParametersSetAsync\r\nBASE(FetchData) | - | OnAfterRender\r\nBASE(FetchData) | - | OnAfterRenderAsync\r\nBASE(ForecastRow) | - | OnAfterRender\r\nBASE(ForecastRow) | - | OnAfterRenderAsync\r\nBASE(ForecastRow) | - | ShouldRender\r\nBASE(ForecastRow) | - | OnAfterRender\r\nBASE(ForecastRow) | - | OnAfterRenderAsync\r\nBASE(ForecastRow) | - | ShouldRender\r\nBASE(ForecastRow) | - | OnAfterRender\r\nBASE(ForecastRow) | - | OnAfterRenderAsync\r\nBASE(FetchData) | - | ShouldRender\r\nBASE(ForecastRow) | - | SetParameters\r\nBASE(ForecastRow) | - | OnParametersSet\r\nBASE(ForecastRow) | - | OnParametersSetAsync\r\nBASE(ForecastRow) | - | ShouldRender\r\nBASE(FetchData) | - | OnAfterRender\r\nBASE(FetchData) | - | OnAfterRenderAsync\r\nBASE(ForecastRow) | - | OnAfterRender\r\nBASE(ForecastRow) | - | OnAfterRenderAsync\r\nBASE(ForecastRow) | - | ShouldRender\r\nBASE(ForecastRow) | - | OnAfterRender\r\n```\r\nIt's only one Forecast-Row! ( see .Take(1) )\r\nAm I doing anything wrong here?","Url":"https://github.com/aspnet/Blazor/issues/759","RelatedDescription":"Closed issue \"Component-Rendering not optimal?\" (#759)"},{"Id":"320297710","IsPullRequest":false,"CreatedAt":"2018-05-04T14:48:59","Actor":"MihaMarkic","Number":"758","RawContent":null,"Title":"Pass ElementRef to callback from js to blazor?","State":"closed","Body":"Would it work if I pass element to Blazor.platform.callMethod that accepts ElementRef?\r\nIOW from javascript to blazor (.net) method.\r\nI'm trying to figure out from what DOM a callback originated.\r\nSo far I've been using unique Id attributes.","Url":"https://github.com/aspnet/Blazor/issues/758","RelatedDescription":"Closed issue \"Pass ElementRef to callback from js to blazor?\" (#758)"},{"Id":"320284638","IsPullRequest":false,"CreatedAt":"2018-05-04T14:11:23","Actor":"Mun1z","Number":"757","RawContent":null,"Title":"Pattern Model View ViewModel MVVM","State":"closed","Body":"Do not you find it interesting to implement the pattern MVVM for each page? even in the angular JS they use, in the. net world we are already well accustomed to the pattern, I think it would be very interesting.","Url":"https://github.com/aspnet/Blazor/issues/757","RelatedDescription":"Closed issue \"Pattern Model View ViewModel MVVM\" (#757)"},{"Id":"320272638","IsPullRequest":false,"CreatedAt":"2018-05-04T13:20:59","Actor":"chanan","Number":"756","RawContent":null,"Title":"Provide a way to create private Components using Razor syntax","State":"open","Body":"As a Component library creator, I would like to create some components that are used internally only. Currently, you can do that by creating a private class and using the builder to create a component, however it would be great if there were a way to do the same thing using Razor syntax.","Url":"https://github.com/aspnet/Blazor/issues/756","RelatedDescription":"Open issue \"Provide a way to create private Components using Razor syntax\" (#756)"},{"Id":"320266335","IsPullRequest":false,"CreatedAt":"2018-05-04T13:17:08","Actor":"arc95","Number":"755","RawContent":null,"Title":"Securing app DLL against hackers","State":"closed","Body":"Hi all. I was just posting to the gitter and someone mentioned that DLL's can be reverse-engineered. How big a threat is this? What measures can we take to protect against this kind of threat?\r\n\r\nWhat security features does Blazor have? Thank you.","Url":"https://github.com/aspnet/Blazor/issues/755","RelatedDescription":"Closed issue \"Securing app DLL against hackers\" (#755)"},{"Id":"320212473","IsPullRequest":false,"CreatedAt":"2018-05-04T09:57:04","Actor":"RemiBou","Number":"754","RawContent":null,"Title":"Protecting against CSRF ?","State":"closed","Body":"Currently every api call on a controller action with an attribute ValidateAntiForgeryTokenAttribute (https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validateantiforgerytokenattribute?view=aspnetcore-2.0) will give a 400.\r\n\r\nHow can we implement the sending / creation of the token on client side so our serverside is protected against CSRF ?","Url":"https://github.com/aspnet/Blazor/issues/754","RelatedDescription":"Closed issue \"Protecting against CSRF ?\" (#754)"},{"Id":"320207199","IsPullRequest":false,"CreatedAt":"2018-05-04T09:31:19","Actor":"talkingdotnet","Number":"753","RawContent":null,"Title":"Any fix for Error BL9986: Component attributes do not support complex content (mixed C# and markup). ","State":"closed","Body":"I am trying to upgrade one of my blazor app built on 0.1 ([CRUD App using Blazor](http://www.talkingdotnet.com/create-a-crud-app-using-blazor-and-asp-net-core/)) to 0.3 but I am getting  the \"**Error BL9986: Component attributes do not support complex content (mixed C# and markup).** \" I understand the error but not able to find the solution. This used to work previously.\r\n\r\n` <input id=\"txt_@todo.ID\" style=\"display:none;\">`\r\n\r\nBut now it gives me **mixed c# and markup** error.  How would such use cases needs to be handled. Another practical use case is of applying CSS class to the element like,\r\n\r\n `<button class=\"btn btn-success @(SelectedID == todo.ID ? \"ShowControl\" : \"HideControl\")\"> Update </button>`\r\n\r\nThis also gives me the same error but interestingly it works for the HTML span element. The following code works,\r\n`<span id=\"spn_@todo.ID\">@todo.Item</span>`\r\n\r\nAny ideas how to fix this error and why Blazor is not allowing this.\r\n","Url":"https://github.com/aspnet/Blazor/issues/753","RelatedDescription":"Closed issue \"Any fix for Error BL9986: Component attributes do not support complex content (mixed C# and markup). \" (#753)"},{"Id":"320200343","IsPullRequest":false,"CreatedAt":"2018-05-04T09:11:42","Actor":"vibeeshan025","Number":"752","RawContent":null,"Title":"Storing javascript objects in C#","State":"closed","Body":"When pass a javascript object to C# / WASM context. and storing it to an object makes it null referenced.\r\nBelow i am trying to create a C# wrapper for drawing canvas\r\n\r\n`         ElementRef drawingCanvas;`\r\n`          ....`\r\n`        var ctx = Get2DContext(drawingCanvas);`\r\n`        ctx.FillRect(10, 10, 50, 50);` //this C# code throuws null, see the attached exception log\r\n`        `\r\n`        public CanvasRenderingContext2D Get2DContext(object canvasElement)`\r\n`        {`\r\n`            return new CanvasRenderingContext2D() { currentObject = RegisteredFunction.Invoke<object>(\"Get2DContextExt\", canvasElement) };`\r\n`        }`\r\n`        `\r\n`        public void FillRect(double x, double y, double w, double h)`\r\n`        {`\r\n`            RegisteredFunction.InvokeUnmarshalled<object>(\"CanvasRenderingContext2D_fillRect\", currentObject, x, y, w, h);`\r\n`        }`\r\n\r\n`        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder`\r\n`        {`\r\n`            builder.OpenElement(0, \"script\");`\r\n`            builder.AddContent(0, $\"Blazor.registerFunction( 'Get2DContextExt', (obj) => {{ var ctx = obj.getContext('2d'); console.log(ctx); return ctx; }});\");`\r\n`            builder.CloseElement();`\r\n`             `\r\n`           builder.OpenElement(1, \"script\");`\r\n`          builder.AddContent(0, \"Blazor.registerFunction('CanvasRenderingContext2D_fillRect', (obj , x, y, w, h) => { obj.fillRect(x, y, w, h); });\");`\r\n`            builder.CloseElement();`\r\n`          `\r\n`        }`\r\n\r\n**Exception**\r\n\r\n`          Uncaught Error: Microsoft.AspNetCore.Blazor.Browser.Interop.JavaScriptException: obj.fillRect is not a function\r\nTypeError: obj.fillRect is not a function\r\n    at Blazor.registerFunction (<anonymous>:1:90)\r\n    at Array.ASM_CONSTS (mono.js:1)\r\n    at _emscripten_asm_const_iiii (mono.js:1)\r\n    at :54789/wasm-function[5272]:21\r\n    at :54789/wasm-function[3543]:34\r\n    at :54789/wasm-function[3548]:364\r\n    at :54789/wasm-function[3550]:224\r\n    at :54789/wasm-function[3766]:189\r\n    at :54789/wasm-function[1505]:15583\r\n    at :54789/wasm-function[867]:13\r\n  at Microsoft.AspNetCore.Blazor.Browser.Interop.RegisteredFunction.InvokeUnmarshalled[TRes] (:54789/System.String identifier, System.Object[] args) <0x1c2ca38 + 0x00034> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n  at CanvasTest.Common.CanvasRenderingContext2D.FillRect (:54789/System.Double x, System.Double y, System.Double w, System.Double h) <0x1c2c908 + 0x0006e> in <cceb8b67340346708bc55417fefdb664>:0 \r\n  at :54789/CanvasNew.Common.AdvCanvas.IncrementCount () <0x1c1aa50 + 0x0004e> in <cceb8b67340346708bc55417fefdb664>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker.Invoke (:54789/Microsoft.AspNetCore.Blazor.UIEventArgs e) <0x1c1a798 + 0x00076> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent (:54789/Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker binding, Microsoft.AspNetCore.Blazor.UIEventArgs args) <0x1c1a268 + 0x0001a> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.DispatchEvent (:54789/Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker binding, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1c1a008 + 0x0003c> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (:54789/System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1c19a40 + 0x00054> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (:54789/System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1c198d8 + 0x00020> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (:54789/System.String eventDescriptorJson, System.String eventArgsJson) <0x1bd69d8 + 0x0005a> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n    at Blazor.registerFunction (<anonymous>:1:90)\r\n    at Array.ASM_CONSTS (mono.js:1)\r\n    at _emscripten_asm_const_iiii (mono.js:1)\r\n    at :54789/wasm-function[5272]:21\r\n    at :54789/wasm-function[3543]:34\r\n    at :54789/wasm-function[3548]:364\r\n    at :54789/wasm-function[3550]:224\r\n    at :54789/wasm-function[3766]:189\r\n    at :54789/wasm-function[1505]:15583\r\n    at :54789/wasm-function[867]:13\r\n  at Microsoft.AspNetCore.Blazor.Browser.Interop.RegisteredFunction.InvokeUnmarshalled[TRes] (:54789/System.String identifier, System.Object[] args) <0x1c2ca38 + 0x00034> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n  at CanvasTest.Common.CanvasRenderingContext2D.FillRect (:54789/System.Double x, System.Double y, System.Double w, System.Double h) <0x1c2c908 + 0x0006e> in <cceb8b67340346708bc55417fefdb664>:0 \r\n  at :54789/CanvasNew.Common.AdvCanvas.IncrementCount () <0x1c1aa50 + 0x0004e> in <cceb8b67340346708bc55417fefdb664>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker.Invoke (:54789/Microsoft.AspNetCore.Blazor.UIEventArgs e) <0x1c1a798 + 0x00076> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent (:54789/Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker binding, Microsoft.AspNetCore.Blazor.UIEventArgs args) <0x1c1a268 + 0x0001a> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.DispatchEvent (:54789/Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker binding, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1c1a008 + 0x0003c> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (:54789/System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1c19a40 + 0x00054> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (:54789/System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1c198d8 + 0x00020> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (:54789/System.String eventDescriptorJson, System.String eventArgsJson) <0x1bd69d8 + 0x0005a> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n    at Object.callMethod (MonoPlatform.ts:70)\r\n    at raiseEvent (BrowserRenderer.ts:327)\r\n    at EventDelegator.onEvent (BrowserRenderer.ts:19)\r\n    at EventDelegator.onGlobalEvent (EventDelegator.ts:83)`","Url":"https://github.com/aspnet/Blazor/issues/752","RelatedDescription":"Closed issue \"Storing javascript objects in C#\" (#752)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-07T05:30:02.8324614Z","RunDurationInMilliseconds":1257}