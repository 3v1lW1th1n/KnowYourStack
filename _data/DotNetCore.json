{"Data":{"Blog":{"FeedItems":[{"Title":"Hardware Intrinsics in .NET Core","PublishedOn":"2019-09-03T22:35:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Several years ago, we decided that it was time to support SIMD code in .NET. We introduced the System.Numerics namespace with Vector2, Vector3, Vector4, Vector&#60;T&#62;, and related types. These...","Href":"https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/","RawContent":null},{"Title":"Announcing ML.NET 1.4 Preview and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-09-03T18:00:35+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.4 Preview and updates to Model Builder and CLI.\nML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-preview-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Join us for .NET Conf 2019, Sept 23-25","PublishedOn":"2019-09-03T17:51:17+00:00","CommentsCount":2,"FacebookCount":0,"Summary":".NET Conf is back again this year and will be live streaming to a device near you September 23-25 on www.dotnetconf.net! .NET Conf is a FREE, 3 day virtual developer event co-organized by the .NET...","Href":"https://devblogs.microsoft.com/dotnet/join-us-for-net-conf-2019-sept-23-25/","RawContent":null},{"Title":"How the .NET Team uses Azure Pipelines to produce Docker Images","PublishedOn":"2019-08-28T16:30:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Producing Docker images for .NET might not seem like that big of a deal.  Once you’ve got a Dockerfile defined, just run &#8220;docker build&#8220; and &#8220;docker push&#8220; and you’re done,...","Href":"https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/","RawContent":null},{"Title":"Visual Studio Tips and Tricks: Increasing your Productivity for .NET","PublishedOn":"2019-08-22T17:20:27+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"The .NET team is constantly thinking of new ways to make developers more productive. We&#8217;ve been working hard over the past year to take the feedback you&#8217;ve sent us and turn it into tools...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-tips-and-tricks-increasing-your-productivity-for-net/","RawContent":null},{"Title":"Messaging Practices","PublishedOn":"2019-08-22T16:00:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post is a collection of content from David Boike from the Particular.net blog calling out some common problems and solutions for building message based distributed systems. They are relevant to...","Href":"https://devblogs.microsoft.com/dotnet/messaging-practices/","RawContent":null},{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null},{"Title":".NET Framework August 2019 Preview of Quality Rollup","PublishedOn":"2019-08-20T17:42:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the August 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nBCL1\nAddresses a crash that occurs...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core and systemd","PublishedOn":"2019-08-19T16:01:04+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"In preview7 a new package was added to the Microsoft.Extensions set of packages that enables integration with systemd. For the Windows focused, systemd allows similar functionality to Windows...","Href":"https://devblogs.microsoft.com/dotnet/net-core-and-systemd/","RawContent":null},{"Title":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2019-08-13T19:47:54+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"We are happy to announce that Microsoft .NET Framework 4.8 is now available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes quality...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-8-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10341823497","Type":"PullRequestEvent","CreatedAt":"2019-09-04T03:54:21","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26502","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#26502) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10341776768","Type":"PullRequestEvent","CreatedAt":"2019-09-04T03:41:49","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26501","RelatedDescription":"Opened pull request \"Remove stale SuppressMessage attributes\" (#26501) at dotnet/coreclr","RelatedBody":""},{"Id":"10341726174","Type":"PullRequestEvent","CreatedAt":"2019-09-04T03:28:59","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26500","RelatedDescription":"Opened pull request \"Use expression-bodied members in more places\" (#26500) at dotnet/coreclr","RelatedBody":"Apply IDE0027, IDE0023, and IDE0024 auto-fixes.  Then as I was reviewing each change, tweaked other inconsistencies I saw in the process."},{"Id":"10341504358","Type":"PullRequestEvent","CreatedAt":"2019-09-04T02:31:09","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26499","RelatedDescription":"Opened pull request \"Update StyleCop.Analyzers to same verison used by corefx\" (#26499) at dotnet/coreclr","RelatedBody":""},{"Id":"10341269987","Type":"PullRequestEvent","CreatedAt":"2019-09-04T01:29:30","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26495","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#26495) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10341252214","Type":"PullRequestEvent","CreatedAt":"2019-09-04T01:24:38","Actor":"swaroop-sridhar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26494","RelatedDescription":"Merged pull request \"[single-exe] Update HostModel version used by Bundle tool\" (#26494) at dotnet/coreclr","RelatedBody":"Update the HostModel to pick up this change:\r\nhttps://github.com/dotnet/core-setup/commit/6c40a810faacb904c623a5d2575b424298f0e37b"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10340840425","Type":"PullRequestEvent","CreatedAt":"2019-09-03T23:30:44","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12479","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12479) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190903.06\r\n- **Date Produced**: 9/3/2019 10:00 PM\r\n- **Commit**: b9dd6c969c15a2734aecbd3e2aa83afed02040e4\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19453-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"},{"Id":"10340699396","Type":"PullRequestEvent","CreatedAt":"2019-09-03T22:55:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12479","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12479) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190903.06\r\n- **Date Produced**: 9/3/2019 10:00 PM\r\n- **Commit**: b9dd6c969c15a2734aecbd3e2aa83afed02040e4\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19453-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"},{"Id":"10340604159","Type":"IssuesEvent","CreatedAt":"2019-09-03T22:32:45","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12478","RelatedDescription":"Closed issue \"VS 2019 16.2.2   and .Net core .2.2.6 SDK 2.2.401\" (#12478) at dotnet/cli","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/697682/vs-2019-1622-and-net-core-226-sdk-22401.html)._\n\n---\nHi ,\nI have updated VS 2019 to 16.2.2.  Installed .net core 2.2.6 (sdk 2.2.401)\nI can't upgdate my asp.net core  project to use .net core 2.2.6. \n\nC:\\&gt;dotnet --list-sdks\n2.2.401 [C:\\Program Files\\dotnet\\sdk]\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/19/2019, 03:54 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 8/19/2019, 10:28 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10340571200","Type":"IssuesEvent","CreatedAt":"2019-09-03T22:25:22","Actor":"vsfeedback","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12478","RelatedDescription":"Opened issue \"VS 2019 16.2.2   and .Net core .2.2.6 SDK 2.2.401\" (#12478) at dotnet/cli","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/697682/vs-2019-1622-and-net-core-226-sdk-22401.html)._\n\n---\nHi ,\nI have updated VS 2019 to 16.2.2.  Installed .net core 2.2.6 (sdk 2.2.401)\nI can't upgdate my asp.net core  project to use .net core 2.2.6. \n\nC:\\&gt;dotnet --list-sdks\n2.2.401 [C:\\Program Files\\dotnet\\sdk]\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/19/2019, 03:54 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 8/19/2019, 10:28 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10340255634","Type":"PullRequestEvent","CreatedAt":"2019-09-03T21:25:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12477","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12477) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190903.1\r\n- **Date Produced**: 9/3/2019 8:30 PM\r\n- **Commit**: 59e63b28d24a769652b754f341d38c9de7c3d0d1\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19453.1\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10339873729","Type":"IssuesEvent","CreatedAt":"2019-09-03T20:25:59","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1497","RelatedDescription":"Opened issue \"Expose ReadOnlySequence<T>.GetFirstSpan()\" (#1497) at dotnet/standard","RelatedBody":"_Originally posted by @davidfowl in https://github.com/dotnet/corefx/issues/33029#issuecomment-526800999_"},{"Id":"10336201806","Type":"PullRequestEvent","CreatedAt":"2019-09-03T12:27:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1496","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1496) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/3/2019 5:38 AM\r\n- **Commit**: b2412774416fc177cf5daa025bb4644a0a91c2df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10336125358","Type":"PullRequestEvent","CreatedAt":"2019-09-03T12:17:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1496","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1496) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/3/2019 5:38 AM\r\n- **Commit**: b2412774416fc177cf5daa025bb4644a0a91c2df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10329537716","Type":"PullRequestEvent","CreatedAt":"2019-09-02T12:28:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1495) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10329472720","Type":"PullRequestEvent","CreatedAt":"2019-09-02T12:18:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1495) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10324804788","Type":"PullRequestEvent","CreatedAt":"2019-09-01T12:27:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1494) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10342159131","Type":"IssuesEvent","CreatedAt":"2019-09-04T05:25:21","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40755","RelatedDescription":"Reopened issue \"The JSON value of length n is too large and not supported.\" (#40755) at dotnet/corefx","RelatedBody":"When returning a single JSON string of about 3,5 MB from a controller's action (return type `byte[]`), the mentioned `System.ArgumentException` exception is thrown in my asp.net Core 3.0 (Preview 8) Api project.\r\nLooking through the docs, there seems to be no option to adjust any limit regarding this issue.\r\n```c#\r\n[HttpPost]\r\npublic async Task<ActionResult<byte[]>> GetFile()\r\n{\r\n    var largeArray = new byte[3.5 * 1024 * 1024];\r\n    return largeArray;\r\n}\r\n```\r\nException:\r\n```\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=The JSON value of length 3770846 is too large and not supported.\r\n  Source=System.Text.Json\r\n  StackTrace:\r\n   at System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(Int32 tokenLength)\r\n```\r\nCall stack:\r\n```\r\nSystem.Text.Json.dll!System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(int tokenLength)\r\nSystem.Text.Json.dll!System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan<byte> bytes)\r\nSystem.Text.Json.dll!System.Text.Json.Serialization.Converters.JsonConverterByteArray.Write(System.Text.Json.Utf8JsonWriter writer, byte[] value, System.Text.Json.JsonSerializerOptions options)\r\nSystem.Text.Json.dll!System.Text.Json.JsonPropertyInfoNotNullable<object, byte[], byte[], byte[]>.OnWrite(ref System.Text.Json.WriteStackFrame current, System.Text.Json.Utf8JsonWriter writer)\r\nSystem.Text.Json.dll!System.Text.Json.JsonPropertyInfo.Write(ref System.Text.Json.WriteStack state, System.Text.Json.Utf8JsonWriter writer)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.Write(System.Text.Json.Utf8JsonWriter writer, int originalWriterDepth, int flushThreshold, System.Text.Json.JsonSerializerOptions options, ref System.Text.Json.WriteStack state)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.WriteAsyncCore(System.IO.Stream utf8Json, object value, System.Type type, System.Text.Json.JsonSerializerOptions options, System.Threading.CancellationToken cancellationToken)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream utf8Json, object value, System.Type type, System.Text.Json.JsonSerializerOptions options, System.Threading.CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context, System.Text.Encoding selectedEncoding)\r\nMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context)\r\n```\r\nThere seems to be a fixed max length constant `JsonConstants.MaxBase46ValueTokenSize` (btw, typo in the constant's name) set to 125 KB, that `JsonWriterHelper.ValidateBytes()` checks against.\r\n\r\nOf course I can change the response type to `plain\\text` and return it as such. Is that the intention of the hard coded 125 KB limit, or what's the reason for that?"},{"Id":"10342155654","Type":"PullRequestEvent","CreatedAt":"2019-09-04T05:24:29","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40792","RelatedDescription":"Merged pull request \"Fix the max token size threshold to correctly compute to 125MB for Base64 bytes.\" (#40792) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/40755 in master\r\n\r\nAlso:\r\nRename constant to fix transpose error: Base46 -> Base64\r\n\r\ncc @lauxjpn, @steveharter, @scalablecory "},{"Id":"10342155644","Type":"IssuesEvent","CreatedAt":"2019-09-04T05:24:29","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40755","RelatedDescription":"Closed issue \"The JSON value of length n is too large and not supported.\" (#40755) at dotnet/corefx","RelatedBody":"When returning a single JSON string of about 3,5 MB from a controller's action (return type `byte[]`), the mentioned `System.ArgumentException` exception is thrown in my asp.net Core 3.0 (Preview 8) Api project.\r\nLooking through the docs, there seems to be no option to adjust any limit regarding this issue.\r\n```c#\r\n[HttpPost]\r\npublic async Task<ActionResult<byte[]>> GetFile()\r\n{\r\n    var largeArray = new byte[3.5 * 1024 * 1024];\r\n    return largeArray;\r\n}\r\n```\r\nException:\r\n```\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=The JSON value of length 3770846 is too large and not supported.\r\n  Source=System.Text.Json\r\n  StackTrace:\r\n   at System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(Int32 tokenLength)\r\n```\r\nCall stack:\r\n```\r\nSystem.Text.Json.dll!System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(int tokenLength)\r\nSystem.Text.Json.dll!System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan<byte> bytes)\r\nSystem.Text.Json.dll!System.Text.Json.Serialization.Converters.JsonConverterByteArray.Write(System.Text.Json.Utf8JsonWriter writer, byte[] value, System.Text.Json.JsonSerializerOptions options)\r\nSystem.Text.Json.dll!System.Text.Json.JsonPropertyInfoNotNullable<object, byte[], byte[], byte[]>.OnWrite(ref System.Text.Json.WriteStackFrame current, System.Text.Json.Utf8JsonWriter writer)\r\nSystem.Text.Json.dll!System.Text.Json.JsonPropertyInfo.Write(ref System.Text.Json.WriteStack state, System.Text.Json.Utf8JsonWriter writer)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.Write(System.Text.Json.Utf8JsonWriter writer, int originalWriterDepth, int flushThreshold, System.Text.Json.JsonSerializerOptions options, ref System.Text.Json.WriteStack state)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.WriteAsyncCore(System.IO.Stream utf8Json, object value, System.Type type, System.Text.Json.JsonSerializerOptions options, System.Threading.CancellationToken cancellationToken)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream utf8Json, object value, System.Type type, System.Text.Json.JsonSerializerOptions options, System.Threading.CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context, System.Text.Encoding selectedEncoding)\r\nMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context)\r\n```\r\nThere seems to be a fixed max length constant `JsonConstants.MaxBase46ValueTokenSize` (btw, typo in the constant's name) set to 125 KB, that `JsonWriterHelper.ValidateBytes()` checks against.\r\n\r\nOf course I can change the response type to `plain\\text` and return it as such. Is that the intention of the hard coded 125 KB limit, or what's the reason for that?"},{"Id":"10341923431","Type":"IssuesEvent","CreatedAt":"2019-09-04T04:22:00","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40795","RelatedDescription":"Opened issue \"Consider removing hard-coded limits for token sizes while writing JSON using Utf8JsonWriter\" (#40795) at dotnet/corefx","RelatedBody":"See https://github.com/dotnet/corefx/pull/40792#discussion_r320546088 for more context.\r\n\r\nCurrently, we have certain constants that we use to detect the token size against before starting to write the token.\r\nhttps://github.com/dotnet/corefx/blob/70b4d01e18236c925c2d44d49fff7cbb4919dc43/src/System.Text.Json/src/System/Text/Json/JsonConstants.cs#L64-L67\r\n\r\nThese may not be necessary if we used checked arithmetic for figuring out the maximum size of the buffer needed for the output.\r\n\r\ncc @stephentoub \r\n"},{"Id":"10341861032","Type":"PullRequestEvent","CreatedAt":"2019-09-04T04:04:26","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40775","RelatedDescription":"Merged pull request \"Disable XML crypto test failing on Windows 10\" (#40775) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/40759\r\ncc: @bartonjs "},{"Id":"10341822745","Type":"IssuesEvent","CreatedAt":"2019-09-04T03:54:09","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40745","RelatedDescription":"Closed issue \"System.Text.json issue with comments\" (#40745) at dotnet/corefx","RelatedBody":".Net core 3 preview8\r\n\r\nIt's impossible to add \r\n// Comments in json files \r\n\r\nDeserialization throw an exception\r\n\r\nNewtonsoft Json worked perfectly in ths case.\r\n"},{"Id":"10341814142","Type":"PullRequestEvent","CreatedAt":"2019-09-04T03:51:51","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40794","RelatedDescription":"Merged pull request \"Fix several recently added StyleCop tuple rules\" (#40794) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10341383814","Type":"PullRequestEvent","CreatedAt":"2019-09-04T02:00:00","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38313","RelatedDescription":"Merged pull request \"Use inferred nullability of discards\" (#38313) at dotnet/roslyn","RelatedBody":"This addresses simple discards (ie. discards in assignments). Fixes https://github.com/dotnet/roslyn/issues/35036\r\n\r\nDiscards in `out` variables work (`Discard_OutDiscard`).\r\nThere's an issue tracking deconstruction more generally, so discards in deconstructions aren't handled. Same for patterns."},{"Id":"10341383800","Type":"IssuesEvent","CreatedAt":"2019-09-04T02:00:00","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35036","RelatedDescription":"Closed issue \"IDiscardSymbol.NullableAnnotation needs to be implemented\" (#35036) at dotnet/roslyn","RelatedBody":"Currently this is unimplemented."},{"Id":"10341177259","Type":"IssuesEvent","CreatedAt":"2019-09-04T01:03:51","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38477","RelatedDescription":"Opened issue \"Liveshare FAR requires UI thread\" (#38477) at dotnet/roslyn","RelatedBody":"Currently, liveshare FAR requires the UI thread as it calls into the [AbstractFindUsagesService](http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/FindUsages/AbstractFindUsagesService.cs,bc260059e380e9ca).  This requires the UI thread to get third party definitions (which in this case means XAML).  We need to remove UI thread dependencies (and editor dependencies) from the liveshare implementation in order to create a proper LSP version of FAR.\r\n\r\nKnown UI dependencies in FAR\r\n1.  [XAML navigation](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Workspace/VisualStudioSymbolNavigationService.cs,266)\r\n    a.  Service provider\r\n    b.  IVsHierarchy\r\n    c.  IVsSymbolicNavigationNotify\r\n2.  [Invisible editor](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/FindReferences/VisualStudioDefinitionsAndReferencesFactory.cs,66) (find source line)\r\n\r\nFor 1), we need to work with the XAML team to define a way to provide navigation in the nexus world as many of the concepts being used there may go away.\r\n\r\nFor 2), it should be a relatively straightforward replacement."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10341824207","Type":"PullRequestEvent","CreatedAt":"2019-09-04T03:54:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#7771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10341447741","Type":"PullRequestEvent","CreatedAt":"2019-09-04T02:16:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#7770) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10341260600","Type":"PullRequestEvent","CreatedAt":"2019-09-04T01:26:56","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#7770) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10341231133","Type":"PullRequestEvent","CreatedAt":"2019-09-04T01:18:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7769) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub"},{"Id":"10340302744","Type":"PullRequestEvent","CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Merged pull request \"Minor triage improvement in SuperIlc\" (#7768) at dotnet/corert","RelatedBody":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10340168398","Type":"PullRequestEvent","CreatedAt":"2019-09-03T21:11:11","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7769) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10341049763","Type":"IssuesEvent","CreatedAt":"2019-09-04T00:28:06","Actor":"AArnott","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3592","RelatedDescription":"Opened issue \"NETSDK1100 blocks building on Linux\" (#3592) at dotnet/sdk","RelatedBody":"I have a test project which multi-targets between net472;netcoreapp2.1;netcoreapp3.0.\r\nOnly when targeting net472 or netcoreapp3.0 does it reference or use any WPF/WinForms types. Nevertheless, I have to set the SDK attribute to `Microsoft.NET.Sdk.WindowsDesktop` for this to work with netcoreapp3.0 at all, AFAIK.\r\n\r\nThis blocks the test project from building the `netcoreapp2.1` target on linux, which blocks me testing my library on Linux.\r\n\r\nHow should I proceed?"},{"Id":"10340430025","Type":"PullRequestEvent","CreatedAt":"2019-09-03T21:56:44","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3591","RelatedDescription":"Opened pull request \"Experimental cpp 3 fix restore by skipping package dependency resolution.targets\" (#3591) at dotnet/sdk","RelatedBody":""},{"Id":"10339272779","Type":"PullRequestEvent","CreatedAt":"2019-09-03T18:55:57","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3583","RelatedDescription":"Merged pull request \"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828\" (#3583) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"488925641","IsPullRequest":true,"CreatedAt":"2019-09-04T03:54:20","Actor":"Dotnet-GitSync-Bot","Number":"26502","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/26502","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#26502)"},{"Id":"488922863","IsPullRequest":true,"CreatedAt":"2019-09-04T03:41:46","Actor":"stephentoub","Number":"26501","RawContent":null,"Title":"Remove stale SuppressMessage attributes","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26501","RelatedDescription":"Open PR \"Remove stale SuppressMessage attributes\" (#26501)"},{"Id":"488919790","IsPullRequest":true,"CreatedAt":"2019-09-04T03:28:58","Actor":"stephentoub","Number":"26500","RawContent":null,"Title":"Use expression-bodied members in more places","State":"open","Body":"Apply IDE0027, IDE0023, and IDE0024 auto-fixes.  Then as I was reviewing each change, tweaked other inconsistencies I saw in the process.","Url":"https://github.com/dotnet/coreclr/pull/26500","RelatedDescription":"Open PR \"Use expression-bodied members in more places\" (#26500)"},{"Id":"488907408","IsPullRequest":true,"CreatedAt":"2019-09-04T02:31:09","Actor":"stephentoub","Number":"26499","RawContent":null,"Title":"Update StyleCop.Analyzers to same version used by corefx","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26499","RelatedDescription":"Open PR \"Update StyleCop.Analyzers to same version used by corefx\" (#26499)"},{"Id":"488848058","IsPullRequest":true,"CreatedAt":"2019-09-04T01:29:30","Actor":"Dotnet-GitSync-Bot","Number":"26495","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/26495","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#26495)"},{"Id":"488843822","IsPullRequest":true,"CreatedAt":"2019-09-04T01:24:38","Actor":"swaroop-sridhar","Number":"26494","RawContent":null,"Title":"[single-exe] Update HostModel version used by Bundle tool","State":"closed","Body":"Update the HostModel to pick up this change:\r\nhttps://github.com/dotnet/core-setup/commit/6c40a810faacb904c623a5d2575b424298f0e37b","Url":"https://github.com/dotnet/coreclr/pull/26494","RelatedDescription":"Closed or merged PR \"[single-exe] Update HostModel version used by Bundle tool\" (#26494)"},{"Id":"488879097","IsPullRequest":false,"CreatedAt":"2019-09-04T00:14:53","Actor":"fayilt","Number":"26498","RawContent":null,"Title":"Deadlock - managed\\unmanaged code","State":"open","Body":"(apologies if this is not the right place for this)\r\nWhen investigating a potential deadlock I came across a windbg error:\r\n\r\n```\r\n0:000> !VerifyHeap\r\nFailed to request SyncBlk at index 1806.\r\n```\r\n\r\nWhen running !SyncBlk I get this:\r\n```\r\n0:000> !SyncBlk\r\nIndex         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner\r\nSyncBlock 1806 is invalid, continuing...\r\nSyncBlock 1812 is invalid, continuing...\r\n-----------------------------\r\nTotal           5722\r\nCCW             432\r\nRCW             146\r\nComClassFactory 0\r\nFree            4928\r\n\r\n```\r\n\r\nAnd locks doesn't return anything (but I know there are definitely locks:\r\n\r\n```\r\n0:000> !locks\r\n\r\nScanned 3810 critical sections\r\n```\r\n\r\nCan anyone tell me if this is a sign of a corrupted heap?\r\n\r\nThanks","Url":"https://github.com/dotnet/coreclr/issues/26498","RelatedDescription":"Open issue \"Deadlock - managed\\unmanaged code\" (#26498)"},{"Id":"488866108","IsPullRequest":false,"CreatedAt":"2019-09-03T23:17:46","Actor":"mgodse","Number":"26497","RawContent":null,"Title":"[2.2, 3.0] Leak when using EventListener","State":"open","Body":"We are noticing a leak when using an EventListener where the runtime seems to be leaking EventWrittenEventArgs on each event invocation. Attached a simple repro which seems to show the leaks on both 2.2 and 3.0. !dumpheap shows that the following objects are not cleaned up even when gcroot doesnt show any roots: \r\n\r\n00007ff7d39479b8      407        26048 System.Action\r\n00007ff7d3949150      408        26112 System.Threading.Tasks.Task\r\n00007ff7d39a13f8        6        40392 System.Diagnostics.Tracing.EventSource+EventMetadata[]\r\n00007ff7d3846610      873        54656 System.Object[]\r\n00007ff7d3901d88      641        73734 System.String\r\n00007ff7d39d4838      812       110432 System.Diagnostics.Tracing.EventWrittenEventArgs\r\n\r\nPlease let me know if you need any further info\r\n[ThreadEventsListener.zip](https://github.com/dotnet/coreclr/files/3572015/ThreadEventsListener.zip)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26497","RelatedDescription":"Open issue \"[2.2, 3.0] Leak when using EventListener\" (#26497)"},{"Id":"488849139","IsPullRequest":true,"CreatedAt":"2019-09-03T22:13:58","Actor":"jkoritzinsky","Number":"26496","RawContent":null,"Title":"Manually marshal parameters for EventPipeInternal.Enable.","State":"open","Body":"In #26340, I realized that for various technical reasons we don't have an easy way to embed the struct marshal IL stubs into R2R images. So, as part of that PR, we are going to disable generating struct stubs in System.Private.CoreLib (the only place we would have embed them in the first place).\r\n\r\nI discovered that EventPipeInternal::Enable has to marshal an array of non-blittable structs, so to keep it inlining (and reduce the number of stubs in System.Private.CoreLib), this PR manually marshals the parameters for EventPipeInternal.Enable.\r\n\r\ncc: @davidwrighton ","Url":"https://github.com/dotnet/coreclr/pull/26496","RelatedDescription":"Open PR \"Manually marshal parameters for EventPipeInternal.Enable.\" (#26496)"},{"Id":"488833119","IsPullRequest":true,"CreatedAt":"2019-09-03T21:27:34","Actor":"jkoritzinsky","Number":"26492","RawContent":null,"Title":"Cache Sytem.RuntimeMethodInfoStub instances created in the VM in the MethodDesc's owning LoaderAllocator.","State":"open","Body":"Instead of allocating a new `System.RuntimeMethodInfoStub` every time `MethodDesc::GetStubMethodInfo` is called, lazily create the stub and cache it in the MethodDesc's LoaderAllocator.\r\n\r\nThis change was extracted out of #26340.\r\n","Url":"https://github.com/dotnet/coreclr/pull/26492","RelatedDescription":"Open PR \"Cache Sytem.RuntimeMethodInfoStub instances created in the VM in the MethodDesc's owning LoaderAllocator.\" (#26492)"},{"Id":"488685459","IsPullRequest":true,"CreatedAt":"2019-09-03T21:07:31","Actor":"stephentoub","Number":"26487","RawContent":null,"Title":"Avoid some unnecessary initialization in DateTimeParse","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26487","RelatedDescription":"Closed or merged PR \"Avoid some unnecessary initialization in DateTimeParse\" (#26487)"},{"Id":"488689386","IsPullRequest":true,"CreatedAt":"2019-09-03T21:01:53","Actor":"stephentoub","Number":"26488","RawContent":null,"Title":"Remove unnecessary parens from `return (true);` and `return (false);`","State":"closed","Body":"Just a search and replace across corelib.","Url":"https://github.com/dotnet/coreclr/pull/26488","RelatedDescription":"Closed or merged PR \"Remove unnecessary parens from `return (true);` and `return (false);`\" (#26488)"},{"Id":"488819376","IsPullRequest":false,"CreatedAt":"2019-09-03T20:57:13","Actor":"echesakovMSFT","Number":"26491","RawContent":null,"Title":"[Linux/arm] JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_{r,d} fail with COMPlus_JitELTHookEnabled=1","State":"open","Body":"It's the same issue as the one I saw on Linux/arm64 (https://github.com/dotnet/coreclr/pull/26460#issuecomment-526785970)\r\n\r\n```\r\n      JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.shssert failure(PID 2215 [0x000008a7], Thread: 2215 [0x08a7]): Assertion failed '!\"Incompatible types for gtNewTempAssign\"' in 'a:byrefsubi4(byref,int):int' (IL sizeile: /opt/code/src/jit/gentree.cpp Line: 14568                                                                                                                                                                                                                                                                                                           Image: /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerunmnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.sh: line 252:  2215 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Return code:      1                                                                                                                                                                                                                                                                                                                                       Raw output file:      /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/JIT/Directed/Reports/JIT.Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.output.txt                                                                                                                                                                   Raw outputmnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun byrefsubbyref1_il_r.dllbyref                                                                                                                                                                                                                                                                                                     [000000] -----+-------             +--*  LCL_VAR   byref  V00 arg0                                                                                                                                                                                                                                                                                        [000001] -----+-------             \\--*  LCL_VAR   int    V01 arg1                                                                                                                                                                                                                                                                         Expected: 100                                                                                                                                                                                                                                                                                                                                             Actualest Harness Exitcode is : 1                                                                                                                                                                                                                                                                                                                              To run the test:                                                                                                                                                                                                                                                                                                                                          > set CORE_ROOT=/mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/Tests/Core_Root                                                                                                                                                                                                                                                                        > /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.sh                                                                                                                                                                                                                    Expected: True                                                                                                                                                                                                                                                                                                                                            Actual:   False                                                                                                                                                                                                                                                                                                                                           Stack Trace:                                                                                                                                                                                                                                                                                                                                                /opt/code/bin/tests/Linux.arm.Checked/TestWrappers/JIT.Directed/JIT.Directed.XUnitWrapper.cs(10810,0): at JIT_Directed._coverage_importer_Desktop_byrefsubbyref1_il_r_byrefsubbyref1_il_r_._coverage_importer_Desktop_byrefsubbyref1_il_r_byrefsubbyref1_il_r_sh()                                                                                      Output:                                                                                                                                                                                                                                                                                                                                           \r\n          Assert failure(PID 2215 [0x000008a7], Thread: 2215 [0x08a7]): Assertion failed '!\"Incompatible types for gtNewTempAssign\"' in 'a:byrefsubi4(byref,int):int' (IL size 10)\r\n\r\n              File: /opt/code/src/jit/gentree.cpp Line: 14568\r\n              Image: /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun\r\n\r\n          /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.sh: line 252:  2215 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\n          Return code:      1\r\n          Raw output file:      /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/JIT/Directed/Reports/JIT.Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n          /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun byrefsubbyref1_il_r.dll ''\r\n          -4\r\n                         [000002] -----+-------             *  SUB       byref\r\n                         [000000] -----+-------             +--*  LCL_VAR   byref  V00 arg0\r\n                         [000001] -----+-------             \\--*  LCL_VAR   int    V01 arg1\r\n          Expected: 100\r\n          Actual: 134\r\n          END EXECUTION - FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=/mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/Tests/Core_Root\r\n          > /mnt/echesakov/coreclr/bin/tests/Linux.arm.Checked/JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_r/byrefsubbyref1_il_r.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26491","RelatedDescription":"Open issue \"[Linux/arm] JIT/Directed/coverage/importer/Desktop/byrefsubbyref1_il_{r,d} fail with COMPlus_JitELTHookEnabled=1\" (#26491)"},{"Id":"488813231","IsPullRequest":true,"CreatedAt":"2019-09-03T20:43:04","Actor":"swaroop-sridhar","Number":"26490","RawContent":null,"Title":"[single-exe] Loader: Fix an assertion failure when running from corbundle","State":"open","Body":"In LOADAddModule(), libraryNameOrPath is null when running from exe.\r\nFix the asserion to accomodate it.\r\nChecked runs of corebundle fail without this fix.","Url":"https://github.com/dotnet/coreclr/pull/26490","RelatedDescription":"Open PR \"[single-exe] Loader: Fix an assertion failure when running from corbundle\" (#26490)"},{"Id":"488802325","IsPullRequest":true,"CreatedAt":"2019-09-03T20:17:41","Actor":"VSadov","Number":"26489","RawContent":null,"Title":"[WIP] GC long running tests","State":"open","Body":"- new pipeline introduced \"gc-longrunning\".  Usage: `/azp run gc-longrunning`\r\n- the pipeline includes gc long running tests and gc reliability framework\r\n- gc long running tests are identified by `<IsLongRunningGCTest>true</IsLongRunningGCTest>` in the proj file.   \r\n- Reliability framework has `IsLongRunningGCTest` as well. Also it has a unit test mode that is enabled by `-unittest` cmd switch\r\n- unit test mode primarily changes the config file selection ( we look for `*_gc_ci.config` ). Another effect of `-unittest` is FailFast on most of failures.\r\n\r\n\r\n== NOTE:\r\n- 32bit platforms are not enabled yet. Some tests cause OOMs and that may be by design. We want to run a subset on 32bit eventually, but need to figure how to filter out tests incompatible with 32bit.\r\n- The timeout for reliability framework in CI configuration is 1 hour. We can easily extend that later.  For now we want to run the pipeline more frequently, for shorter duration - to evaluate how reliable the pipeline is. \r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26489","RelatedDescription":"Open PR \"[WIP] GC long running tests\" (#26489)"},{"Id":"488566192","IsPullRequest":true,"CreatedAt":"2019-09-03T12:08:46","Actor":"dotnet-maestro[bot]","Number":"26486","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190903.1\r\n- **Date Produced**: 9/3/2019 10:21 AM\r\n- **Commit**: f9447b382bae01ebd6a06334b965cd3989247beb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19453.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26486","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#26486)"},{"Id":"488565991","IsPullRequest":true,"CreatedAt":"2019-09-03T12:08:19","Actor":"dotnet-maestro[bot]","Number":"26485","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/3/2019 5:38 AM\r\n- **Commit**: b2412774416fc177cf5daa025bb4644a0a91c2df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26485","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#26485)"},{"Id":"488435042","IsPullRequest":true,"CreatedAt":"2019-09-03T07:21:59","Actor":"adamsitnik","Number":"26484","RawContent":null,"Title":"make sure that StartsWith checks only the beginning of the string","State":"open","Body":"So far we were using `usearch_first` which was searching the entire string if the string was not starting with a given prefix. By switching to `usearch_preceding(1)` we check if index == 0 matches by asking for the first match before index 1.\r\n\r\nBenchmark:\r\n\r\n```cs\r\npublic class Perf_StartsWith\r\n{\r\n    [Params(512, 200_000)]\r\n    public int Length;\r\n\r\n    [Params(true, false)]\r\n    public bool Cached;\r\n\r\n    private string left;\r\n    private string Left => Cached ? left : string.Concat(new string('a', Length), \"-\");\r\n\r\n    [GlobalSetup]\r\n    public void Setup() => left = string.Concat(new string('a', Length), \"-\");\r\n\r\n    [Benchmark]\r\n    public bool StartsWith() => Left.StartsWith(\"i\", StringComparison.CurrentCulture);\r\n}\r\n```\r\n\r\nResults:\r\n\r\n```ini\r\nBenchmarkDotNet=v0.11.5.1159-nightly, OS=ubuntu 18.04\r\nIntel Xeon CPU E5-2673 v4 2.30GHz, 1 CPU, 4 logical and 2 physical cores\r\n.NET Core SDK=2.2.301\r\n  [Host]     : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), X64 RyuJIT\r\n  Job-RWHUVW : .NET Core ? (CoreCLR 5.0.19.45301, CoreFX 5.0.19.45102), X64 RyuJIT\r\n  Job-QBRXWX : .NET Core ? (CoreCLR 5.0.19.45201, CoreFX 5.0.19.43103), X64 RyuJIT\r\n```\r\n\r\n|     Method |          Toolchain | Length | Cached |         Mean | Ratio |\r\n|----------- |------------------- |------- |------- |-------------:|------:|\r\n| StartsWith | /Core_Root/corerun |    512 |  False |     8.696 us |  0.29 |\r\n| StartsWith |    /before/corerun |    512 |  False |    30.485 us |  1.00 |\r\n|            |                    |        |        |              |       |\r\n| StartsWith | /Core_Root/corerun |    512 |   True |     6.771 us |  0.23 |\r\n| StartsWith |    /before/corerun |    512 |   True |    29.944 us |  1.00 |\r\n|            |                    |        |        |              |       |\r\n| StartsWith | /Core_Root/corerun | 200000 |  False |   523.546 us |  0.06 |\r\n| StartsWith |    /before/corerun | 200000 |  False | 9,264.775 us |  1.00 |\r\n|            |                    |        |        |              |       |\r\n| StartsWith | /Core_Root/corerun | 200000 |   True |    45.512 us | 0.005 |\r\n| StartsWith |    /before/corerun | 200000 |   True | 8,850.251 us | 1.000 |\r\n\r\nThis is my first attempt to solve https://github.com/dotnet/corefx/issues/40674, most probably more improvements coming soon (I am still not happy about the execution time).\r\n","Url":"https://github.com/dotnet/coreclr/pull/26484","RelatedDescription":"Open PR \"make sure that StartsWith checks only the beginning of the string\" (#26484)"},{"Id":"488315968","IsPullRequest":true,"CreatedAt":"2019-09-03T06:20:09","Actor":"adamsitnik","Number":"26481","RawContent":null,"Title":"implement StartsWith and EndsWith as calls to CompareString for sliced string","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26481","RelatedDescription":"Closed or merged PR \"implement StartsWith and EndsWith as calls to CompareString for sliced string\" (#26481)"},{"Id":"488375645","IsPullRequest":false,"CreatedAt":"2019-09-03T03:33:34","Actor":"SilentCC","Number":"26483","RawContent":null,"Title":"ThreadsPool doesn't have enough theads to handle High concurrency scene","State":"open","Body":"My application is based on aps.net core preview 8. \r\n\r\nWhen it starts up,I get a lot of exceptions like these:\r\n```\r\n2019-09-02 21:56:20.483 [Error] Request Execution Time: 6932 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 6, Available work threads: 32761, Available completion Port threads: 1000\r\n/web520/p/6474754.html\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n\r\n2019-09-02 21:56:21.000 [Error] Request Execution Time: 6113 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 4, Available work threads: 32763, Available completion Port threads: 1000\r\n/hangblog/p/10754342.html\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n\r\n```\r\n\r\n```\r\n2019-09-02 22:49:18.953 [Error] Request Execution Time: 6313 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 851, Completed work item count: 6886\r\n/momozjm/ajax/GetViewCount.aspx\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n2019-09-02 22:49:18.994 [Error] Request Execution Time: 6399 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 848, Completed work item count: 6922\r\n/zhujiabin/ajax/sidecolumn.aspx\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n2019-09-02 22:49:19.000 [Error] Request Execution Time: 6385 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 676, Completed work item count: 7134\r\n/cate/2/200\r\n```\r\nThe qps is more than one thousand.\r\n\r\nSo many request were delayed when application started up.But this situation only happened at the beginning.\r\n\r\nWhen it became normal and worked fine later, I printed the threads info :\r\n\r\n```\r\n`ThreadPool.ThreadCount: 19, Pending work item count: 0, Completed work item count: 35022782`\r\n``` \r\n\r\n19 threads can satisfy my demand.But how can I make threadPool have 19 threads at initialization time.\r\n\r\nIt seems that threadPool can‘t create more threads immediately.It needs more time to spin up threads.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26483","RelatedDescription":"Open issue \"ThreadsPool doesn't have enough theads to handle High concurrency scene\" (#26483)"},{"Id":"488350521","IsPullRequest":false,"CreatedAt":"2019-09-03T01:17:51","Actor":"VincentBu","Number":"26482","RawContent":null,"Title":"Assert failure: (FARPROC) (TADDR)m_pvHJRetAddr != NULL","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/22ba8412-2536-436f-b0ab-bedc557e25b9/workitems/Microsoft.VisualBasic.Core.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_JitStressRegs=2\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 13483 [0x000034ab], Thread: 13483 [0x34ab]): (FARPROC) (TADDR)m_pvHJRetAddr != NULL\r\n    File: /__w/1/s/src/vm/threadsuspend.cpp Line: 5431\r\n    Image: /home/helixbot/work/22ba8412-2536-436f-b0ab-bedc557e25b9/Payload/dotnet\r\n\r\n./RunTests.sh: line 161: 13483 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Microsoft.VisualBasic.Core.Tests.runtimeconfig.json xunit.console.dll Microsoft.VisualBasic.Core.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n~/work/22ba8412-2536-436f-b0ab-bedc557e25b9/Work/bc5544cd-1c1b-4b6b-a073-cf7e7f55dc0d/Exec\r\nexit code 134\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26482","RelatedDescription":"Open issue \"Assert failure: (FARPROC) (TADDR)m_pvHJRetAddr != NULL\" (#26482)"},{"Id":"488315124","IsPullRequest":true,"CreatedAt":"2019-09-02T20:52:00","Actor":"trylek","Number":"26480","RawContent":null,"Title":"WIP: only check out the GIT repo once and reuse for the entire pipeline","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26480","RelatedDescription":"Open PR \"WIP: only check out the GIT repo once and reuse for the entire pipeline\" (#26480)"},{"Id":"487919976","IsPullRequest":false,"CreatedAt":"2019-09-02T19:51:52","Actor":"AwsomeCode","Number":"26474","RawContent":null,"Title":"[UWP] Error ILT0005, App.UWP.rsp\"' returned exit code 1","State":"closed","Body":"While Building Store App x86 I am getting below error.\r\n\r\nILT0005: 'C:\\Users\\XUser\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\XGit\\MyAppV2\\MyApp\\MyApp.UWP\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\MyApp.UWP.rsp\"' returned exit code 1\r\n\r\nI have tried Debug **without** .net Native tool chain (Working)\r\nI have tried Debug **With** .net Native tool chain (Working)\r\n**I have tried Release With .net Native tool chain (Is Not Wokring)**\r\n\r\nI have tried deleting all the local nuget cache\r\nI have tried deleting Bin and Obj folder.\r\n\r\nVisual Studio 16.2.3\r\nWindows 10 1903\r\nUWP Project TargetPlatformVersion 10.0.18362.0\r\nUWP Project TargetPlatformMinVersion 10.0.16299.0\r\nMicrosoft.NETCore.UniversalWindowsPlatfor 6.2.8 Tired (6.2.9) as well\r\n\r\nPreviously everything was working fine.\r\n","Url":"https://github.com/dotnet/coreclr/issues/26474","RelatedDescription":"Closed issue \"[UWP] Error ILT0005, App.UWP.rsp\"' returned exit code 1\" (#26474)"},{"Id":"488157916","IsPullRequest":true,"CreatedAt":"2019-09-02T19:06:44","Actor":"dotnet-maestro[bot]","Number":"26477","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26477","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26477)"},{"Id":"488158099","IsPullRequest":true,"CreatedAt":"2019-09-02T19:06:35","Actor":"dotnet-maestro[bot]","Number":"26478","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.1\r\n- **Date Produced**: 9/2/2019 8:56 AM\r\n- **Commit**: fb49d11c77525a6af8e5bc7067a17d9eee6948dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26478","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26478)"},{"Id":"488242501","IsPullRequest":false,"CreatedAt":"2019-09-02T15:30:32","Actor":"vitek-karas","Number":"26479","RawContent":null,"Title":"StringComparer.InvariantCulture.GetHashCode throws in Windows 7 compat mode","State":"open","Body":"#### Repro\r\n`dotnet new console`\r\nUse this code in `Main`\r\n```C#\r\n            string value = @\"Some\";\r\n            IEqualityComparer<string> comparer = StringComparer.InvariantCulture;\r\n            Console.WriteLine($\"{comparer.GetHashCode(value)}\");\r\n```\r\nBuild with .NET Core 3.0.\r\nGo to the output folder and set compatibility mode for the `.exe` to `Windows 7`.\r\nRun the exe.\r\n\r\n#### Output\r\n```\r\nUnhandled exception. System.ArgumentException: External component has thrown an exception.\r\n   at System.Globalization.CompareInfo.GetHashCodeOfStringCore(ReadOnlySpan`1 source, CompareOptions options)\r\n   at System.Globalization.CompareInfo.GetHashCodeOfString(String source, CompareOptions options)\r\n   at System.CultureAwareComparer.GetHashCode(String obj)\r\n   at ConsoleApp3.Program.Main(String[] args)\r\n```\r\n\r\nThis seems to happen for any string other than empty string. The program works fine when executed without the compatibility mode set.\r\n\r\nI haven't tried to run this on actual Windows 7 machine.","Url":"https://github.com/dotnet/coreclr/issues/26479","RelatedDescription":"Open issue \"StringComparer.InvariantCulture.GetHashCode throws in Windows 7 compat mode\" (#26479)"},{"Id":"487970927","IsPullRequest":false,"CreatedAt":"2019-09-02T02:56:52","Actor":"VincentBu","Number":"26476","RawContent":null,"Title":"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/3bd056f0-43d1-4be1-8104-48ca2252faea/workitems/System.Collections.Immutable.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Collections.Immutable.Tests\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 5824 [0x000016c0], Thread: 4660 [0x1234]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n\r\nCORECLR! GetCLRRuntimeHost + 0xA4186D (0x00007fff`b773173d)\r\nCORECLR! GetCLRRuntimeHost + 0x8D8A70 (0x00007fff`b75c8940)\r\nCORECLR! GetCLRRuntimeHost + 0x8D721A (0x00007fff`b75c70ea)\r\nNTDLL! RtlCaptureContext + 0x3C3 (0x00007fff`e6289bd3)\r\nCORECLR! GetCLRRuntimeHost + 0x3340EE (0x00007fff`b7023fbe)\r\nCORECLR! GetCLRRuntimeHost + 0x333E9A (0x00007fff`b7023d6a)\r\nCORECLR! GetCLRRuntimeHost + 0x75D71F (0x00007fff`b744d5ef)\r\nCORECLR! GetCLRRuntimeHost + 0x75D95D (0x00007fff`b744d82d)\r\nCORECLR! GetCLRRuntimeHost + 0x75CB72 (0x00007fff`b744ca42)\r\nCORECLR! GetCLRRuntimeHost + 0x3A9523 (0x00007fff`b70993f3)\r\n    File: f:\\workspace\\_work\\1\\s\\src\\vm\\object.cpp Line: 674\r\n    Image: C:\\dotnetbuild\\work\\3bd056f0-43d1-4be1-8104-48ca2252faea\\Payload\\dotnet.exe\r\n\r\nexit code -1073740286\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26476","RelatedDescription":"Open issue \"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\" (#26476)"},{"Id":"487921301","IsPullRequest":true,"CreatedAt":"2019-09-01T19:16:50","Actor":"trylek","Number":"26475","RawContent":null,"Title":"WIP: build managed artifacts for all *nix tests on one platform","State":"open","Body":"As my previous attempt at this PR shows CI errors I have a hard\r\ntime to troubleshoot, I'm reconstructing the PR incrementally\r\nin a new branch and using CI validation to identify the bug.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26475","RelatedDescription":"Open PR \"WIP: build managed artifacts for all *nix tests on one platform\" (#26475)"},{"Id":"487918243","IsPullRequest":true,"CreatedAt":"2019-09-01T18:43:09","Actor":"AustinWise","Number":"26473","RawContent":null,"Title":"Fix printf when failing to load coredistools.","State":"open","Body":"In #26235 a call to `LogError` (a `printf`-like macro) was changed so that the arguments no longer match the format specifiers. This adds back a parameter.","Url":"https://github.com/dotnet/coreclr/pull/26473","RelatedDescription":"Open PR \"Fix printf when failing to load coredistools.\" (#26473)"},{"Id":"488837292","IsPullRequest":false,"CreatedAt":"2019-08-31T00:43:13","Actor":"BrainSlugs83","Number":"26493","RawContent":null,"Title":"Windows 7 x86 support is a lie","State":"open","Body":"# General\r\n\r\nWith .NET Core 3.0-preview8 -- I compiled a standalone exe for Windows 7 (x86) RID using the following command:\r\n`dotnet publish -c Release -r win7-x86 -o .\\bin\\Redist\\windows /p:PublishSingleFile=true /p:PublishTrimmed=true /p:DebugType=None`\r\n\r\nThis produces a single .exe file output that runs fine on Windows 10 (x64).\r\n\r\nBut when I copy this .exe file to a Windows 7 Home Basic (x86) machine, I get the following error message when trying to run it:\r\n```\r\nThe program can't start because api-ms-win-crt-runtime-l1-1-0.dll is missing from your computer. Try reinstalling the program to fix this problem. \r\n```\r\nAccording to this issue: https://github.com/dotnet/core-setup/issues/3220 it looks like this external dependency is possibly the \"Windows Universal C Runtime\", which can be found at this location: https://support.microsoft.com/en-us/help/2999226/update-for-universal-c-runtime-in-windows\r\n\r\nThere does appear to be a download link for Windows 7 (x86), but when you try to install it on said operating system, you get the following message: `The update is not applicable to your computer.` -- This leads me to believe that it is impossible to run my app on Windows 7 (x86).\r\n\r\n# Expected Behavior:\r\n - My app runs on Windows 7 (x86) without having to install anything that does not ship with\r\n   the OS. (Many Corporate and Enterprise environments do not have the ability to install\r\n   random service packs on their machines without significant IT involvement and overhead.)\r\n    - Also, I'd like to avoid dependency issues, e.g. if a user has the wrong version installed, etc.\r\n\r\n - If I do have to install some random service pack, tell me about it and where to download it\r\n   instead of a random missing dll notice, as that's a disaster waiting to happen.  (A non-technical\r\n   user might just google the error message and follow some youtube video's instructions to\r\n   download random .dll files from untrusted sites and dump them into the app's folder!)\r\n\r\n# Other thoughts\r\n - This isn't that tall of an ask.  We wrote GUI software for Windows 7 with MinGW 20 years ago,\r\n    and it never required any c runtime dlls; everything was statically linkable. (And never more\r\n    than 2 MB) -- This is literally just a console app -- if there is some external dependency, just \r\n    link it into the executable already! 😑\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26493","RelatedDescription":"Open issue \"Windows 7 x86 support is a lie\" (#26493)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"488860556","IsPullRequest":true,"CreatedAt":"2019-09-03T23:30:43","Actor":"dotnet-maestro[bot]","Number":"12479","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190903.06\r\n- **Date Produced**: 9/3/2019 10:00 PM\r\n- **Commit**: b9dd6c969c15a2734aecbd3e2aa83afed02040e4\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19453-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19453-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12479","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12479)"},{"Id":"488852575","IsPullRequest":false,"CreatedAt":"2019-09-03T22:32:45","Actor":"vsfeedback","Number":"12478","RawContent":null,"Title":"VS 2019 16.2.2   and .Net core .2.2.6 SDK 2.2.401","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/697682/vs-2019-1622-and-net-core-226-sdk-22401.html)._\n\n---\nHi ,\nI have updated VS 2019 to 16.2.2.  Installed .net core 2.2.6 (sdk 2.2.401)\nI can't upgdate my asp.net core  project to use .net core 2.2.6. \n\nC:\\&gt;dotnet --list-sdks\n2.2.401 [C:\\Program Files\\dotnet\\sdk]\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/19/2019, 03:54 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 8/19/2019, 10:28 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/cli/issues/12478","RelatedDescription":"Closed issue \"VS 2019 16.2.2   and .Net core .2.2.6 SDK 2.2.401\" (#12478)"},{"Id":"488814269","IsPullRequest":true,"CreatedAt":"2019-09-03T21:25:46","Actor":"dotnet-maestro[bot]","Number":"12477","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190903.1\r\n- **Date Produced**: 9/3/2019 8:30 PM\r\n- **Commit**: 59e63b28d24a769652b754f341d38c9de7c3d0d1\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19453.1\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12477","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12477)"},{"Id":"487808049","IsPullRequest":false,"CreatedAt":"2019-09-03T18:02:30","Actor":"arcooke","Number":"12454","RawContent":null,"Title":"dotnet run fails silently on linux","State":"closed","Body":"_I'm running an unsupported distro_ (Solus) using dotnet and vs code snaps, so there is no expectation of official support.  However, I don't think `dotnet run` should be failing silently under any circumstance, supported or not.  I am happy to to try to resolve my own issue, but I'm not getting any output from dotnet that I can use to debug.  `--verbosity` option makes no difference\r\n\r\nI could use a hand here.  Screen recording:\r\n\r\n![dotnet](https://user-images.githubusercontent.com/6278400/64068754-27b9ce00-cc02-11e9-8127-8ed3cdc401b0.gif)\r\n\r\n\r\n## Steps to reproduce\r\n`dotnet run` with any options and any verbosity level\r\n\r\n## Expected  behavior\r\nProject runs, or outputs error information\r\n\r\n## Actual behavior\r\n`dotnet run` fails silently\r\n\r\n## Environment data\r\n`.bashrc`\r\n\r\n```\r\nexport MSBuildSDKsPath=/snap/dotnet-sdk/current/sdk/$(/snap/dotnet-sdk/current/dotnet --version)/Sdks\r\nexport DOTNET_ROOT=$(dirname $(realpath $(which dotnet)))\r\nexport PATH=\"$PATH:/home/adam/.dotnet/tools\"\r\n```\r\n\r\n```\r\n$ snap list\r\nName        Version                  Rev   Tracking  Publisher    Notes\r\ncode        f06011ac                 13    stable    vscode✓      classic\r\ncore        16-2.40                  7396  stable    canonical✓   core\r\ncore18      20190723                 1074  stable    canonical✓   base\r\ndotnet-sdk  3.0.100-preview8-013656  45    beta      dotnetcore✓  classic\r\n```\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     solus\r\n OS Version:  4.0\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /snap/dotnet-sdk/45/sdk/3.0.100-preview8-013656/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013656 [/snap/dotnet-sdk/45/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [/snap/dotnet-sdk/45/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [/snap/dotnet-sdk/45/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12454","RelatedDescription":"Closed issue \"dotnet run fails silently on linux\" (#12454)"},{"Id":"488705769","IsPullRequest":true,"CreatedAt":"2019-09-03T17:04:09","Actor":"dotnet-maestro[bot]","Number":"12475","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190903.1\r\n- **Date Produced**: 9/3/2019 4:28 PM\r\n- **Commit**: 0abe61f391b30219ce5983b9a2964c1d85665449\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19453.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12475","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12475)"},{"Id":"487901946","IsPullRequest":false,"CreatedAt":"2019-09-03T13:49:10","Actor":"hez2010","Number":"12459","RawContent":null,"Title":"Resx files weren't compiled with Release configuration","State":"closed","Body":"**Version Used**: .NET Core 3.0 preview 8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. dotnet new console\r\n2. add a resx file Resource1.resx using Visual Studio\r\n3. add some strings, files or whatever you like in the resx file\r\n4. use the resource you added in code\r\n\r\n**Expected Behavior**:\r\nProgram will run as expected\r\n\r\n**Actual Behavior**:\r\nProgram will run as expected with Debug configuration `dotnet run`, but not with Release configuration `dotnet run -c Release`, all resources becomes null.\r\n\r\nAlso, the first time running `dotnet build -c Release` will throw:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Microsoft.Common.CurrentVersion.targets(3056,5): error : MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references. [......\\ResourceFiles\\ResourceFiles.csproj]\r\n```\r\nso you need to build twice.\r\n\r\n**Repro**:\r\n[ResourceFiles.zip](https://github.com/dotnet/roslyn/files/3562194/ResourceFiles.zip)\r\n","Url":"https://github.com/dotnet/cli/issues/12459","RelatedDescription":"Closed issue \"Resx files weren't compiled with Release configuration\" (#12459)"},{"Id":"488413639","IsPullRequest":true,"CreatedAt":"2019-09-03T06:57:36","Actor":"dotnet-maestro[bot]","Number":"12474","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190902.3\r\n- **Date Produced**: 9/3/2019 6:21 AM\r\n- **Commit**: 0bed2250962a5a3d096fc93b5128be6fd798b8e3\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19452.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12474","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12474)"},{"Id":"488395681","IsPullRequest":true,"CreatedAt":"2019-09-03T05:15:21","Actor":"dotnet-maestro[bot]","Number":"12473","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.8\r\n- **Date Produced**: 9/3/2019 4:10 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12473","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12473)"},{"Id":"488361437","IsPullRequest":true,"CreatedAt":"2019-09-03T02:50:39","Actor":"dotnet-maestro[bot]","Number":"12472","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.7\r\n- **Date Produced**: 9/3/2019 1:14 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12472","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12472)"},{"Id":"488332929","IsPullRequest":true,"CreatedAt":"2019-09-02T23:30:41","Actor":"dotnet-maestro[bot]","Number":"12471","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/2/2019 9:54 PM\r\n- **Commit**: 4b175eb55dafc7aef1f978c2398bdd20c9e33ae6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12471","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12471)"},{"Id":"488740609","IsPullRequest":false,"CreatedAt":"2019-09-02T21:46:57","Actor":"danielValdezR","Number":"12476","RawContent":null,"Title":"Getting NULL when using ResourceManager.GetString() with strings using placeholders","State":"open","Body":"I have a embedded Resource.resx file and a Resource.Designer.cs autogenerated containing many string resources, some of them have placeholders (i.e. \"Hello, '{0}'\") and these are the ones that are returning **null** when calling from code, i.e. Resource.KeyName. This Resource.resx file exist in a library project with TargetFrameworks net452, netstandard2.0 and netstandard2.1. I'm dealing with this issue when I run my Test Project (net452, netcoreapp3.0, netcoreapp2.2) and make use of that Resource.\r\n\r\nThis issue is only happening when the tests are ran using **net452** (I have tried with net472 also and behaves the same) with resources containing placeholders and compiling/running tests from **CLI** (dotnet test), when using VS it's working fine. I had to add the following to my .csproj of the library because it was failing at compiling: \r\n\r\n`<GenerateResourceUsePreserializedResources>**true**</GenerateResourceUsePreserializedResources>`\r\n\r\n```\r\n<PackageReference Include=\"System.Resources.Extensions\">\r\n      <Version>4.6.0-preview8.19405.3</Version>\r\n</PackageReference>\r\n```\r\n\r\n**SDK used: 3.0.100-preview8-013656**\r\n","Url":"https://github.com/dotnet/cli/issues/12476","RelatedDescription":"Open issue \"Getting NULL when using ResourceManager.GetString() with strings using placeholders\" (#12476)"},{"Id":"488107519","IsPullRequest":true,"CreatedAt":"2019-09-02T20:41:40","Actor":"dotnet-maestro[bot]","Number":"12469","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.5\r\n- **Date Produced**: 9/2/2019 7:12 PM\r\n- **Commit**: 26dcd7e6def527c1ba1479fcb46918ab6725371b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12469","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12469)"},{"Id":"488261834","IsPullRequest":false,"CreatedAt":"2019-09-02T16:28:37","Actor":"dasMulli","Number":"12470","RawContent":null,"Title":"CLI experience for managing framework references","State":"open","Body":"Similar to managing references to NuGet packages and other projects (P2P references), the CLI should provide a mechanism to manage reference to frameworks.\r\n\r\nLooking at a few 3.0 apps being built, I have seen horrible workarounds to make library projects trying to make use of types in the ASP.NET Core shared frameworks for creating separate projects for things like controllers for certain APIs, reusable middleware, action filters and so on. One involves creating a web app with an empty Main function..\r\n\r\nWhile users will need to learn about referencing frameworks using `FrameworkReference`, I think a CLI command should also be an option to manage these references because.\r\n\r\nA bonus is that the CLI can know which frameworks are available for which TFM.\r\n\r\nThis may also apply to libraries using types of WinForms or WPF (even though XAML might not work, one may want to use the framework reference to write useful shareable types), but at least there are project templates for wpflib, winformslib.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12470","RelatedDescription":"Open issue \"CLI experience for managing framework references\" (#12470)"},{"Id":"488104692","IsPullRequest":false,"CreatedAt":"2019-09-02T09:54:04","Actor":"tmds","Number":"12468","RawContent":null,"Title":"dotnet new is slow with 3.0 sdk","State":"open","Body":"`dotnet new` takes much longer with 3.0 sdk. From less than half a second with 2.2, to more than 3 seconds with 3.0:\r\n\r\n```\r\n$ dotnet --version\r\n2.2.108\r\n$ time dotnet new console --no-restore\r\nThe template \"Console Application\" was created successfully.\r\n\r\nreal\t0m0.416s\r\nuser\t0m0.395s\r\nsys\t0m0.039s\r\n```\r\n\r\n```\r\n$ dotnet --version\r\n3.0.100-preview8-013656\r\n$ time dotnet new console --no-restore\r\nThe template \"Console Application\" was created successfully.\r\n\r\nreal\t0m3.369s\r\nuser\t0m0.847s\r\nsys\t0m0.070s\r\n```\r\n\r\nThe message `The template \"Console Application\" was created successfully.` appears as fast, but then the program still idle for some time.","Url":"https://github.com/dotnet/cli/issues/12468","RelatedDescription":"Open issue \"dotnet new is slow with 3.0 sdk\" (#12468)"},{"Id":"488058265","IsPullRequest":false,"CreatedAt":"2019-09-02T08:12:11","Actor":"robertmclaws","Number":"12467","RawContent":null,"Title":"dotnet restore wildcard exclusions","State":"open","Body":"When I call `dotnet pack`, I can have wildcard exclusions for the path. For example:\r\n`**/*.csproj;!**/MyFramework.Templates.*.csproj;**/MyFramework.Templates.Package.csproj;`\r\n\r\nThe same is not true when I call `dotnet restore`. If I want projects with a certain set of criteria to be left out, I have to manually specify each project. That can get kinda bonkers on large projects.\r\n\r\nIf you folks could please rectify the situation, that would be great. Thanks!","Url":"https://github.com/dotnet/cli/issues/12467","RelatedDescription":"Open issue \"dotnet restore wildcard exclusions\" (#12467)"},{"Id":"488036048","IsPullRequest":true,"CreatedAt":"2019-09-02T07:50:42","Actor":"dotnet-maestro[bot]","Number":"12466","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.7\r\n- **Date Produced**: 9/2/2019 6:12 AM\r\n- **Commit**: 1b429e8f37ec1314165331481079af9632981c0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12466","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12466)"},{"Id":"487999500","IsPullRequest":true,"CreatedAt":"2019-09-02T05:50:41","Actor":"dotnet-maestro[bot]","Number":"12465","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.6\r\n- **Date Produced**: 9/2/2019 4:13 AM\r\n- **Commit**: ae1362ff29650bc471e65a38330e79bcb0c67416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12465","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12465)"},{"Id":"487941166","IsPullRequest":true,"CreatedAt":"2019-09-01T23:45:47","Actor":"dotnet-maestro[bot]","Number":"12464","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.5\r\n- **Date Produced**: 9/1/2019 10:08 PM\r\n- **Commit**: ae1362ff29650bc471e65a38330e79bcb0c67416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12464","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12464)"},{"Id":"487929647","IsPullRequest":true,"CreatedAt":"2019-09-01T21:25:40","Actor":"dotnet-maestro[bot]","Number":"12463","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.4\r\n- **Date Produced**: 9/1/2019 7:57 PM\r\n- **Commit**: dd6b0fefee06929fd7e643c68502d39cda449151\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12463","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12463)"},{"Id":"487920124","IsPullRequest":true,"CreatedAt":"2019-09-01T19:40:41","Actor":"dotnet-maestro[bot]","Number":"12462","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.3\r\n- **Date Produced**: 9/1/2019 6:11 PM\r\n- **Commit**: 935899164fe464349001a9a67ad0175aa2bf780a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12462","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12462)"},{"Id":"487909499","IsPullRequest":true,"CreatedAt":"2019-09-01T17:45:42","Actor":"dotnet-maestro[bot]","Number":"12461","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 4:19 PM\r\n- **Commit**: 7f46800bde35842a5e1d945857c14a172bd78122\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12461","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12461)"},{"Id":"487904871","IsPullRequest":true,"CreatedAt":"2019-09-01T16:54:53","Actor":"dotnet-maestro[bot]","Number":"12460","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190901.1\r\n- **Date Produced**: 9/1/2019 4:24 PM\r\n- **Commit**: fe1c4c6fc43807e30351c6a3a2e2cea9bafc2f43\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19451.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12460","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12460)"},{"Id":"487901366","IsPullRequest":true,"CreatedAt":"2019-09-01T16:30:43","Actor":"dotnet-maestro[bot]","Number":"12458","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.1\r\n- **Date Produced**: 9/1/2019 3:00 PM\r\n- **Commit**: 7f46800bde35842a5e1d945857c14a172bd78122\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12458","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12458)"},{"Id":"487894208","IsPullRequest":false,"CreatedAt":"2019-09-01T14:59:52","Actor":"svick","Number":"12457","RawContent":null,"Title":"Tab completion for \"dotnet new\"","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Enable tab completion for `dotnet` in PowerShell.\r\n2. Type e.g. `dotnet new cl<Tab><Tab>`.\r\n\r\n## Expected  behavior\r\n\r\nTab completion works for `dotnet new` templates.\r\n\r\n## Actual behavior\r\n\r\nTab completion doesn't work. This can also be seen using `dotnet complete`:\r\n\r\n```powershell\r\n> dotnet complete \"dotnet new c\"\r\n--force\r\n--nuget-source\r\n--update-check\r\n> dotnet complete \"dotnet new cl\"\r\n>\r\n```\r\n\r\nNotice that options to `dotnet new` are listed, but template names are not.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-013867\r\n Commit:    c74c7ef65e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-013867\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha1.19425.8\r\n  Commit:  70a3592bd4\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12457","RelatedDescription":"Closed issue \"Tab completion for \"dotnet new\"\" (#12457)"},{"Id":"487849288","IsPullRequest":true,"CreatedAt":"2019-09-01T07:20:39","Actor":"dotnet-maestro[bot]","Number":"12456","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.9\r\n- **Date Produced**: 9/1/2019 5:56 AM\r\n- **Commit**: cabc10d2675e4b61f349b7b7887f549ad15bd060\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12456","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12456)"},{"Id":"487841929","IsPullRequest":true,"CreatedAt":"2019-09-01T05:50:43","Actor":"dotnet-maestro[bot]","Number":"12455","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.8\r\n- **Date Produced**: 9/1/2019 4:09 AM\r\n- **Commit**: f737f2532a8e123dac4100a048d039488d416497\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12455","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12455)"},{"Id":"487791931","IsPullRequest":true,"CreatedAt":"2019-08-31T20:42:14","Actor":"dotnet-maestro[bot]","Number":"12453","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.6\r\n- **Date Produced**: 8/31/2019 7:17 PM\r\n- **Commit**: 69dde4d4c7f962cc1f52499fc1bae38e342472ce\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12453","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12453)"},{"Id":"487759578","IsPullRequest":true,"CreatedAt":"2019-08-31T16:23:11","Actor":"dotnet-maestro[bot]","Number":"12450","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 2:50 PM\r\n- **Commit**: ed0af91340a962833bb0ce9888c56b542215c432\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12450","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12450)"},{"Id":"487763637","IsPullRequest":true,"CreatedAt":"2019-08-31T12:09:06","Actor":"dotnet-maestro[bot]","Number":"12452","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190830.1\r\n- **Date Produced**: 8/30/2019 12:37 PM\r\n- **Commit**: ee08152479419650891699679f4c9bf6a61d9fba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19430.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12452","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12452)"},{"Id":"487763155","IsPullRequest":true,"CreatedAt":"2019-08-31T12:02:57","Actor":"dotnet-maestro[bot]","Number":"12451","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12451","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#12451)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"488805881","IsPullRequest":false,"CreatedAt":"2019-09-03T20:25:59","Actor":"terrajobst","Number":"1497","RawContent":null,"Title":"Expose ReadOnlySequence<T>.GetFirstSpan()","State":"open","Body":"_Originally posted by @davidfowl in https://github.com/dotnet/corefx/issues/33029#issuecomment-526800999_","Url":"https://github.com/dotnet/standard/issues/1497","RelatedDescription":"Open issue \"Expose ReadOnlySequence<T>.GetFirstSpan()\" (#1497)"},{"Id":"488570303","IsPullRequest":true,"CreatedAt":"2019-09-03T12:27:46","Actor":"dotnet-maestro[bot]","Number":"1496","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/3/2019 5:38 AM\r\n- **Commit**: b2412774416fc177cf5daa025bb4644a0a91c2df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1496","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1496)"},{"Id":"488161716","IsPullRequest":true,"CreatedAt":"2019-09-02T12:28:26","Actor":"dotnet-maestro[bot]","Number":"1495","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1495)"},{"Id":"487879063","IsPullRequest":true,"CreatedAt":"2019-09-01T12:27:14","Actor":"dotnet-maestro[bot]","Number":"1494","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1494)"},{"Id":"487768943","IsPullRequest":false,"CreatedAt":"2019-08-31T13:10:35","Actor":"chris579","Number":"1493","RawContent":null,"Title":"Make SequenceReader available","State":"open","Body":"Reading from a `ReadOnlySequence<T>` requires to keep track of position and consumed data. In core you can use the type [SequenceReader](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.sequencereader-1?view=netcore-3.0) that does that for you. In standard you don't have it which leads to three possibilities:\r\n- Write your own implementation which does similar things like `SequenceReader`\r\n- Copy the implementation of `SequenceReader`\r\n- Converting the `ReadOnlySequence<t>` to `T[]` which defeats the purpose\r\n\r\nAll options are not convenient. Making `SequenceReader` available in standard would allow libraries to use the performance benefits of `SequenceReader` without the need to rely on third party implementations or crushing performance because of allocations.","Url":"https://github.com/dotnet/standard/issues/1493","RelatedDescription":"Open issue \"Make SequenceReader available\" (#1493)"},{"Id":"487765426","IsPullRequest":true,"CreatedAt":"2019-08-31T12:39:19","Actor":"dotnet-maestro[bot]","Number":"1492","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.1\r\n- **Date Produced**: 8/31/2019 8:30 AM\r\n- **Commit**: 2c974d484209ab46815ec9abd35936ca66f2444e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1492)"},{"Id":"487763042","IsPullRequest":true,"CreatedAt":"2019-08-31T12:11:55","Actor":"dotnet-maestro[bot]","Number":"1491","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1491","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1491)"},{"Id":"487637930","IsPullRequest":true,"CreatedAt":"2019-08-30T23:35:03","Actor":"jonpryor","Number":"1490","RawContent":null,"Title":".NET Standard 2.1 needs Xamarin.Android 10.0","State":"closed","Body":"Xamarin.Android 9.5.0 was a preview release for Visual Studio 16.3\r\nPreview 1.  It has since become Xamarin.Android 10.0.0, as of\r\nVisual Studio 16.3 Preview 2.","Url":"https://github.com/dotnet/standard/pull/1490","RelatedDescription":"Closed or merged PR \".NET Standard 2.1 needs Xamarin.Android 10.0\" (#1490)"},{"Id":"487534078","IsPullRequest":false,"CreatedAt":"2019-08-30T15:44:35","Actor":"masterwok","Number":"1489","RawContent":null,"Title":"Make BigInteger Big Endian friendly like CoreFX ","State":"closed","Body":"It would be nice to expose the same big endian friendly interface for BigInteger that CoreFX does as outlined in this issue: https://github.com/dotnet/corefx/issues/24575\r\n\r\nIs this a possibility? Thank you.","Url":"https://github.com/dotnet/standard/issues/1489","RelatedDescription":"Closed issue \"Make BigInteger Big Endian friendly like CoreFX \" (#1489)"},{"Id":"487458245","IsPullRequest":true,"CreatedAt":"2019-08-30T12:40:45","Actor":"dotnet-maestro[bot]","Number":"1488","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190829.10\r\n- **Date Produced**: 8/30/2019 3:58 AM\r\n- **Commit**: ae0d0cb852a6186ca5ef8130b0bf862314485017\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19429.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1488","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1488)"},{"Id":"487457614","IsPullRequest":true,"CreatedAt":"2019-08-30T12:29:14","Actor":"dotnet-maestro[bot]","Number":"1487","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1487","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1487)"},{"Id":"487446462","IsPullRequest":true,"CreatedAt":"2019-08-30T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190829.16\r\n- **Date Produced**: 8/30/2019 1:19 AM\r\n- **Commit**: e5aaea7fcfc46449b035d5b220032bfb933e98a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19429.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1486)"},{"Id":"486948512","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:50","Actor":"ViktorHofer","Number":"1485","RawContent":null,"Title":"[release/3.0] fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1485","RelatedDescription":"Closed or merged PR \"[release/3.0] fix syntax for the publishUsingPipelines variable\" (#1485)"},{"Id":"486946828","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:40","Actor":"ViktorHofer","Number":"1484","RawContent":null,"Title":"fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1484","RelatedDescription":"Closed or merged PR \"fix syntax for the publishUsingPipelines variable\" (#1484)"},{"Id":"486928653","IsPullRequest":true,"CreatedAt":"2019-08-29T17:38:22","Actor":"dotnet-maestro[bot]","Number":"1482","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:24 PM\r\n- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19428.9\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1482","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1482)"},{"Id":"486929373","IsPullRequest":true,"CreatedAt":"2019-08-29T12:41:39","Actor":"dotnet-maestro[bot]","Number":"1483","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/29/2019 12:53 AM\r\n- **Commit**: 546fdc4198bdfd89504c8895c1bd608b4e92d80d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19428.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19428.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19428.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1483","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1483)"},{"Id":"486915660","IsPullRequest":true,"CreatedAt":"2019-08-29T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1481","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:24 PM\r\n- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19428.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1481","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1481)"},{"Id":"485567962","IsPullRequest":false,"CreatedAt":"2019-08-28T22:47:20","Actor":"zhouguoqing","Number":"1475","RawContent":null,"Title":".Net framework 4.6.1 Bug feedback","State":"closed","Body":"Recently, Our winform process crashed some times.\r\nWe used .Net framework 4.5.1 , runtime CLR info:\r\n0:068> lmvm clr\r\nstart             end                 module name\r\n00007fff`c0b90000 00007fff`c1576000   clr        (private pdb symbols)  c:\\temp\\mylocalsymbols\\clr.pdb\\E18D6461EB4F49A6B418E9AF91007A212\\clr.pdb\r\n    Loaded symbol image file: clr.dll\r\n    Image path: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\n    Image name: clr.dll\r\n    Timestamp:        Fri Jun 10 09:16:55 2016 (575A1507)\r\n    CheckSum:         009E00C2\r\n    ImageSize:        009E6000\r\n    File version:     4.6.1586.0\r\n    Product version:  4.0.30319.0\r\n    File flags:       8 (Mask 3F) Private\r\n    File OS:          4 Unknown Win32\r\n    File type:        2.0 Dll\r\n    File date:        00000000.00000000\r\n    Translations:     0409.04b0\r\n    CompanyName:      Microsoft Corporation\r\n    ProductName:      Microsoft® .NET Framework\r\n    InternalName:     clr.dll\r\n    OriginalFilename: clr.dll\r\n    ProductVersion:   4.6.1586.0\r\n    FileVersion:      4.6.1586.0 built by: NETFXREL2\r\n    PrivateBuild:     DDBLD201B\r\n    FileDescription:  Microsoft .NET Runtime Common Language Runtime - WorkStation\r\n    LegalCopyright:   © Microsoft Corporation.  All rights reserved.\r\n    Comments:         Flavor=Retail\r\n\r\n We used windbg anaylze crash dump file:\r\nFAULTING_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nEXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)\r\nExceptionAddress: 00007fffc0c717d4 (clr!SVR::gc_heap::background_mark_simple1+0x0000000000000871)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 0000000000000000\r\n   Parameter[1]: 0000000000000000\r\nAttempt to read from address 0000000000000000\r\n\r\nDEFAULT_BUCKET_ID:  NULL_POINTER_READ\r\n\r\nPROCESS_NAME:  TeldHost.exe\r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_PARAMETER1:  0000000000000000\r\n\r\nEXCEPTION_PARAMETER2:  0000000000000000\r\n\r\nREAD_ADDRESS:  0000000000000000 \r\n\r\nFOLLOWUP_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nFAULTING_THREAD:  0000000000002730\r\n\r\nPRIMARY_PROBLEM_CLASS:  NULL_POINTER_READ\r\n\r\nBUGCHECK_STR:  APPLICATION_FAULT_NULL_POINTER_READ\r\n\r\nLAST_CONTROL_TRANSFER:  from 00007fffc0c709da to 00007fffc0c717d4\r\n\r\nSTACK_TEXT:  \r\n000000e9`7527f3f0 00007fff`c0c709da : 00000000`00000040 000002e5`19ab92d0 00000000`00000002 000002e8`1ec8fea8 : clr!SVR::gc_heap::background_mark_simple1+0x871\r\n000000e9`7527f460 00007fff`c0c713fb : 000002e9`1b511960 00000000`00000000 00000000`00000000 00007fff`c0c713fb : clr!SVR::gc_heap::background_mark_simple+0x91\r\n000000e9`7527f490 00007fff`c0d1b058 : 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 00007fff`c0c71310 : clr!SVR::gc_heap::background_promote+0x102\r\n000000e9`7527f4e0 00007fff`c0d1afa7 : 000000e9`7527fa40 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 : clr!PinObject+0x38\r\n000000e9`7527f520 00007fff`c0d29584 : 000000e9`7527f908 000002e5`19b00000 00000000`00000004 00000000`00000001 : clr!ScanConsecutiveHandlesWithoutUserData+0x6b\r\n000000e9`7527f550 00007fff`c0d2997c : 000000e9`7527f78c 00007fff`c0d29540 000000e9`7527f7d4 000000e9`7527f948 : clr!BlockScanBlocksWithoutUserData+0x44\r\n000000e9`7527f580 00007fff`c0d29bbd : 00000000`00000000 00007fff`c0d29930 000000e9`7527f750 000000e9`7527f780 : clr!ProcessScanQNode+0x46\r\n000000e9`7527f5b0 00007fff`c0d29b2d : 000000e9`7527f8f8 000002e5`19b00000 000000e9`7527f908 000000e9`7527f750 : clr!ProcessScanQueue+0x4e\r\n000000e9`7527f5e0 00007fff`c0d29abe : 000000e9`7527f750 000000e9`7527f8f8 00000000`00000026 00000000`00000028 : clr!xxxTableScanQueuedBlocksAsync+0x5d\r\n000000e9`7527f610 00007fff`c0d167e7 : 00007fff`c0d29a60 00000000`00000002 000002e5`19b00000 000000e9`7527f938 : clr!xxxAsyncSegmentIterator+0x2d\r\n000000e9`7527f640 00007fff`c0d29a36 : 000002e5`19a149d0 00007fff`c0d299a0 000002e5`19a149d0 00000000`00000006 : clr!TableScanHandles+0x97\r\n000000e9`7527f710 00007fff`c0d1699c : 00007fff`00000000 00007fff`c0b95073 000002e9`69d12d60 00007fff`c0d29540 : clr!xxxTableScanHandlesAsync+0x9b\r\n000000e9`7527f8b0 00007fff`c0d19136 : 00007fff`c14d0d30 00000000`00000000 00000000`0000000a 00007fff`c0c71310 : clr!HndScanHandlesForGC+0x118\r\n000000e9`7527f950 00007fff`c0d16d05 : 000000e9`7527fa40 000000e9`7527fa70 00000007`00000003 000002e9`69d12d60 : clr!Ref_TracePinningRoots+0xfe\r\n000000e9`7527f9d0 00007fff`c0c7120e : 00000000`00000000 00007fff`c14db270 00007fff`c14db270 00000000`00000001 : clr!GCScan::GcScanHandles+0x45\r\n000000e9`7527fa10 00007fff`c0c70511 : 00000000`00000002 00000000`00000002 000002e5`19a8bcb0 00007fff`c0d157e1 : clr!SVR::gc_heap::background_mark_phase+0x3aa\r\n000000e9`7527faa0 00007fff`c0c70384 : 000002e9`69d12d60 000002e9`69d12d60 00000000`00000000 00000000`00000004 : clr!SVR::gc_heap::gc1+0xffffffff`fff381e1\r\n000000e9`7527faf0 00007fff`c0ba02cf : 000002e9`69d12d60 000002e5`19a8bcb0 000000e9`7527fee0 00000000`00000000 : clr!SVR::gc_heap::bgc_thread_function+0x132\r\n000000e9`7527fb40 00007fff`ce088364 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : clr!Thread::intermediateThreadProc+0x86\r\n000000e9`7527ff00 00007fff`cff770d1 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14\r\n000000e9`7527ff30 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21\r\n\r\n\r\nSYMBOL_STACK_INDEX:  0\r\n\r\nSYMBOL_NAME:  clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nFOLLOWUP_NAME:  MachineOwner\r\n\r\nMODULE_NAME: clr\r\n\r\nIMAGE_NAME:  clr.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  575a1507\r\n\r\nSTACK_COMMAND:  ~68s; .ecxr ; kb\r\n\r\nFAILURE_BUCKET_ID:  NULL_POINTER_READ_c0000005_clr.dll!SVR::gc_heap::background_mark_simple1\r\n\r\nBUCKET_ID:  X64_APPLICATION_FAULT_NULL_POINTER_READ_clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nWATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/TeldHost_exe/1_0_0_0/5ccea4e6/clr_dll/4_6_1586_0/575a1507/c0000005/000e17d4.htm?Retriage=1\r\n\r\nFollowup: MachineOwner\r\n---------\r\n \r\nPlease help.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1475","RelatedDescription":"Closed issue \".Net framework 4.6.1 Bug feedback\" (#1475)"},{"Id":"486351442","IsPullRequest":true,"CreatedAt":"2019-08-28T16:04:44","Actor":"dotnet-maestro[bot]","Number":"1479","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1479","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1479)"},{"Id":"486352176","IsPullRequest":true,"CreatedAt":"2019-08-28T12:40:05","Actor":"dotnet-maestro[bot]","Number":"1480","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1480)"},{"Id":"486337976","IsPullRequest":true,"CreatedAt":"2019-08-28T12:11:51","Actor":"dotnet-maestro[bot]","Number":"1478","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1478","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1478)"},{"Id":"485209871","IsPullRequest":true,"CreatedAt":"2019-08-27T17:30:06","Actor":"dotnet-maestro[bot]","Number":"1472","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1472","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1472)"},{"Id":"485780512","IsPullRequest":true,"CreatedAt":"2019-08-27T12:40:28","Actor":"dotnet-maestro[bot]","Number":"1477","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190826.13\r\n- **Date Produced**: 8/27/2019 7:30 AM\r\n- **Commit**: 7055b496a30dfe0f66a2f555cad31502473d144b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19426.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19426.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19426.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1477","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1477)"},{"Id":"485766905","IsPullRequest":true,"CreatedAt":"2019-08-27T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1476","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1476","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1476)"},{"Id":"485338895","IsPullRequest":false,"CreatedAt":"2019-08-26T17:04:14","Actor":"roji","Number":"1474","RawContent":null,"Title":"Add new socket TCP keepalive options","State":"open","Body":"https://github.com/dotnet/corefx/issues/25040 added the three portable TCP keepalive options to .NET Core 3.0, but they are missing from .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1474","RelatedDescription":"Open issue \"Add new socket TCP keepalive options\" (#1474)"},{"Id":"485210438","IsPullRequest":true,"CreatedAt":"2019-08-26T12:37:57","Actor":"dotnet-maestro[bot]","Number":"1473","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190825.4\r\n- **Date Produced**: 8/26/2019 4:41 AM\r\n- **Commit**: ba50ba15d0747d5be1e8bd38ea03a5ba892314bd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19425.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19425.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19425.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1473","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1473)"},{"Id":"485199879","IsPullRequest":true,"CreatedAt":"2019-08-26T12:11:53","Actor":"dotnet-maestro[bot]","Number":"1471","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190825.1\r\n- **Date Produced**: 8/25/2019 12:48 PM\r\n- **Commit**: 2de3acc671fc624191672a45564f9ef130af5cd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19425.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1471","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1471)"},{"Id":"484925474","IsPullRequest":true,"CreatedAt":"2019-08-25T12:37:53","Actor":"dotnet-maestro[bot]","Number":"1470","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190824.4\r\n- **Date Produced**: 8/24/2019 5:51 PM\r\n- **Commit**: e92b6d57af9b7299f2a6fca2a599f09dce4f672a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19424.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19424.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19424.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1470","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1470)"},{"Id":"484923190","IsPullRequest":true,"CreatedAt":"2019-08-25T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1469","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1469","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1469)"},{"Id":"484812226","IsPullRequest":true,"CreatedAt":"2019-08-24T12:37:35","Actor":"dotnet-maestro[bot]","Number":"1468","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1468","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1468)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"488888413","IsPullRequest":true,"CreatedAt":"2019-09-04T05:24:29","Actor":"ahsonkhan","Number":"40792","RawContent":null,"Title":"Fix the max token size threshold to correctly compute to 125MB for Base64 bytes.","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/40755 in master\r\n\r\nAlso:\r\nRename constant to fix transpose error: Base46 -> Base64\r\n\r\ncc @lauxjpn, @steveharter, @scalablecory ","Url":"https://github.com/dotnet/corefx/pull/40792","RelatedDescription":"Closed or merged PR \"Fix the max token size threshold to correctly compute to 125MB for Base64 bytes.\" (#40792)"},{"Id":"488931933","IsPullRequest":false,"CreatedAt":"2019-09-04T04:21:59","Actor":"ahsonkhan","Number":"40795","RawContent":null,"Title":"Consider removing hard-coded limits for token sizes while writing JSON using Utf8JsonWriter","State":"open","Body":"See https://github.com/dotnet/corefx/pull/40792#discussion_r320546088 for more context.\r\n\r\nCurrently, we have certain constants that we use to detect the token size against before starting to write the token.\r\nhttps://github.com/dotnet/corefx/blob/70b4d01e18236c925c2d44d49fff7cbb4919dc43/src/System.Text.Json/src/System/Text/Json/JsonConstants.cs#L64-L67\r\n\r\nThese may not be necessary if we used checked arithmetic for figuring out the maximum size of the buffer needed for the output.\r\n\r\ncc @stephentoub \r\n","Url":"https://github.com/dotnet/corefx/issues/40795","RelatedDescription":"Open issue \"Consider removing hard-coded limits for token sizes while writing JSON using Utf8JsonWriter\" (#40795)"},{"Id":"488778894","IsPullRequest":true,"CreatedAt":"2019-09-04T04:04:25","Actor":"stephentoub","Number":"40775","RawContent":null,"Title":"Disable XML crypto test failing on Windows 10","State":"closed","Body":"https://github.com/dotnet/corefx/issues/40759\r\ncc: @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/40775","RelatedDescription":"Closed or merged PR \"Disable XML crypto test failing on Windows 10\" (#40775)"},{"Id":"488905868","IsPullRequest":true,"CreatedAt":"2019-09-04T03:51:51","Actor":"stephentoub","Number":"40794","RawContent":null,"Title":"Fix several recently added StyleCop tuple rules","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40794","RelatedDescription":"Closed or merged PR \"Fix several recently added StyleCop tuple rules\" (#40794)"},{"Id":"488798412","IsPullRequest":true,"CreatedAt":"2019-09-04T03:26:05","Actor":"lmolkova","Number":"40777","RawContent":null,"Title":"HttpHandlerDiagnosticListener did not send DiagnosticSource Stop event on netfx in W3C mode","State":"closed","Body":"HttpHandlerDiagnosticListener monkey-patches WebRequest to enable tracing with DiagnosticSource.\r\n\r\nHttpHandlerDiagnosticListener uses presence of tracing headers to determine if a request was initially instrumented (`Activity.Current` which is `AsyncLocal` does not survive in WebRequest callbacks). Based on header presence, when response tarts, it notifies a listener with 'Stop' callback.\r\n\r\nIn https://github.com/dotnet/corefx/pull/35882 it started to support [W3C trace-context](https://www.w3.org/TR/trace-context/) and now `Stop` event is not sent if a new W3C `traceparent` is present, but old `Request-Id` is not.\r\n\r\nThis issue only reproduces when tracing is on and W3C mode for Activity is on. By default tracing is off and no events are sent. When tracing is on, default Activity format is the old one, that works with Request-Id header, so problem does not repro.\r\n\r\nTracing tools that enable W3C, can workaround it with adding Request-Id header themselves.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40777","RelatedDescription":"Closed or merged PR \"HttpHandlerDiagnosticListener did not send DiagnosticSource Stop event on netfx in W3C mode\" (#40777)"},{"Id":"488850557","IsPullRequest":true,"CreatedAt":"2019-09-04T02:11:44","Actor":"wfurt","Number":"40785","RawContent":null,"Title":"surface _abortException for Http2_DataSentBeforeServerPreface_ProtocolError","State":"closed","Body":"There is race condition with Http2_DataSentBeforeServerPreface_ProtocolError as it does not wait for HTTP request to be completed. I could make that test fail all the time by adding Task.Delay() to SendHeadersAsync(). When we set _abortException before sending request we would hit the \r\n```\r\nat System.Net.Http.Http2Connection.AcquireWriteLockAsync(CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 825\r\nat System.Net.Http.Http2Connection.StartWriteAsync(Int32 writeBytes, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 700\r\nat System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken, Boolean mustFlush) in \r\n``` \r\nand we would not surface protocol error. \r\nI also tried to wait getting request headers in the test it self and that fixes the test as well. But I feel it would be better to surface protocol error to make it easier to debug cases when server returns garbage. \r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40785","RelatedDescription":"Closed or merged PR \"surface _abortException for Http2_DataSentBeforeServerPreface_ProtocolError\" (#40785)"},{"Id":"488868870","IsPullRequest":true,"CreatedAt":"2019-09-04T02:05:18","Actor":"CoffeeFlux","Number":"40788","RawContent":null,"Title":"Add case-sensitive type lookup test to ActivatorTests","State":"closed","Body":"In the process of fixing this test suite for Mono, I realized that case-insensitive lookups in the exported types table would fail but that we lacked a corresponding test case to trigger that. I didn't bother with all the various permutations like above since I think this should be sufficient, but can add more if you think they would be valuable.\r\n\r\nThis will fail on Mono master as of the PR, but the test is already ignored so that should not be an issue. Additionally, a PR fixing it should go in shortly.","Url":"https://github.com/dotnet/corefx/pull/40788","RelatedDescription":"Closed or merged PR \"Add case-sensitive type lookup test to ActivatorTests\" (#40788)"},{"Id":"488879519","IsPullRequest":true,"CreatedAt":"2019-09-04T02:03:53","Actor":"tgspn","Number":"40791","RawContent":null,"Title":"Add the JsonContent class to System.Net.Http","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40791","RelatedDescription":"Closed or merged PR \"Add the JsonContent class to System.Net.Http\" (#40791)"},{"Id":"488891512","IsPullRequest":true,"CreatedAt":"2019-09-04T01:16:17","Actor":"ahsonkhan","Number":"40793","RawContent":null,"Title":"Add round-trip test to JsonSerializer with overflow that needs to be escaped.","State":"open","Body":"cc @steveharter, @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/40793","RelatedDescription":"Open PR \"Add round-trip test to JsonSerializer with overflow that needs to be escaped.\" (#40793)"},{"Id":"488876285","IsPullRequest":true,"CreatedAt":"2019-09-04T00:02:18","Actor":"ahsonkhan","Number":"40790","RawContent":null,"Title":"Add test to verify that JsonEncodedText and Utf8JsonWriter use upper-case hex digits when escaping.","State":"open","Body":"This behavior should be consistent for all platforms (.NET Core 3.0, older .NET Core, and netfx).\r\n\r\nAdding a test case from https://github.com/dotnet/corefx/issues/40702\r\n","Url":"https://github.com/dotnet/corefx/pull/40790","RelatedDescription":"Open PR \"Add test to verify that JsonEncodedText and Utf8JsonWriter use upper-case hex digits when escaping.\" (#40790)"},{"Id":"488875819","IsPullRequest":true,"CreatedAt":"2019-09-04T00:00:22","Actor":"bartonjs","Number":"40789","RawContent":null,"Title":"[release/3.0] Fix JsonElement.WriteTo handling of escaped property names","State":"open","Body":"This removes the duplicate switch statement from writing properties,\r\nas the usage of the new WritePropertyName API on the writer simplifies the logic here.\r\n\r\nFixes #40779 in release/3.0.\r\nHand-port of #40784 to release/3.0 because of test structural changes.","Url":"https://github.com/dotnet/corefx/pull/40789","RelatedDescription":"Open PR \"[release/3.0] Fix JsonElement.WriteTo handling of escaped property names\" (#40789)"},{"Id":"488845500","IsPullRequest":true,"CreatedAt":"2019-09-03T22:59:25","Actor":"bartonjs","Number":"40784","RawContent":null,"Title":"Fix JsonElement.WriteTo handling of escaped property names","State":"closed","Body":"This removes the duplicate switch statement from writing properties,\r\nas the usage of the new WritePropertyName API on the writer simplifies the logic here.\r\n\r\nAddresses #40779 in master.","Url":"https://github.com/dotnet/corefx/pull/40784","RelatedDescription":"Closed or merged PR \"Fix JsonElement.WriteTo handling of escaped property names\" (#40784)"},{"Id":"488857553","IsPullRequest":true,"CreatedAt":"2019-09-03T22:43:57","Actor":"steveharter","Number":"40787","RawContent":null,"Title":"Use options.Encoder when serializing dictionary and property names","State":"open","Body":"Addresses https://github.com/dotnet/corefx/issues/40704 for master.\r\n\r\nThese locations were not escaped using the custom encoder specified on `options.Encoder`:\r\n- Dictionary key name\r\n- Property name\r\n- `JsonException.Path` (which is a property\\dictionary path to an error)\r\n\r\nHowever all values (property, dictionary, etc) correctly used the custom escaper.\r\n\r\nThis may be ported to 3.0 pending feedback\\priority.\r\n","Url":"https://github.com/dotnet/corefx/pull/40787","RelatedDescription":"Open PR \"Use options.Encoder when serializing dictionary and property names\" (#40787)"},{"Id":"488855726","IsPullRequest":true,"CreatedAt":"2019-09-03T22:36:45","Actor":"omajid","Number":"40786","RawContent":null,"Title":"Add Runtime IDs for Fedora 32","State":"open","Body":"Fedora 32 is currently in development:\r\n\r\n    $ docker run -it fedora:32 cat /etc/os-release\r\n    ...\r\n    NAME=Fedora\r\n    VERSION=\"32 (Container Image)\"\r\n    ID=fedora\r\n    VERSION_ID=32\r\n    VERSION_CODENAME=\"\"\r\n    PLATFORM_ID=\"platform:f32\"\r\n    PRETTY_NAME=\"Fedora 32 (Container Image)\"\r\n    ANSI_COLOR=\"0;34\"\r\n    LOGO=fedora-logo-icon\r\n    CPE_NAME=\"cpe:/o:fedoraproject:fedora:32\"\r\n    HOME_URL=\"https://fedoraproject.org/\"\r\n    DOCUMENTATION_URL=\"https://docs.fedoraproject.org/en-US/fedora/rawhide/system-administrators-guide/\"\r\n    SUPPORT_URL=\"https://fedoraproject.org/wiki/Communicating_and_getting_help\"\r\n    BUG_REPORT_URL=\"https://bugzilla.redhat.com/\"\r\n    REDHAT_BUGZILLA_PRODUCT=\"Fedora\"\r\n    REDHAT_BUGZILLA_PRODUCT_VERSION=rawhide\r\n    REDHAT_SUPPORT_PRODUCT=\"Fedora\"\r\n    REDHAT_SUPPORT_PRODUCT_VERSION=rawhide\r\n    PRIVACY_POLICY_URL=\"https://fedoraproject.org/wiki/Legal:PrivacyPolicy\"\r\n    VARIANT=\"Container Image\"\r\n    VARIANT_ID=container","Url":"https://github.com/dotnet/corefx/pull/40786","RelatedDescription":"Open PR \"Add Runtime IDs for Fedora 32\" (#40786)"},{"Id":"488840749","IsPullRequest":true,"CreatedAt":"2019-09-03T22:23:37","Actor":"scalablecory","Number":"40783","RawContent":null,"Title":"Revert \"set _requestQueueBoundHandle to null after disposing\"","State":"closed","Body":"Reverts dotnet/corefx#40466\r\n\r\nThis fix is not handling outstanding I/Os correctly and causing a number of test failures. Needs a deeper look to determine what the actual fix should be.","Url":"https://github.com/dotnet/corefx/pull/40783","RelatedDescription":"Closed or merged PR \"Revert \"set _requestQueueBoundHandle to null after disposing\"\" (#40783)"},{"Id":"488826889","IsPullRequest":true,"CreatedAt":"2019-09-03T22:07:48","Actor":"Dotnet-GitSync-Bot","Number":"40781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40781)"},{"Id":"488820599","IsPullRequest":true,"CreatedAt":"2019-09-03T22:07:34","Actor":"stephentoub","Number":"40778","RawContent":null,"Title":"Update analyzer versions","State":"closed","Body":"In particular to pick up StyleCop fixes related to C# 8 and nullability.\r\n\r\ncc: @safern","Url":"https://github.com/dotnet/corefx/pull/40778","RelatedDescription":"Closed or merged PR \"Update analyzer versions\" (#40778)"},{"Id":"488829170","IsPullRequest":true,"CreatedAt":"2019-09-03T21:19:42","Actor":"john-h-k","Number":"40782","RawContent":null,"Title":"Optimise 'Math.CopySign' and 'MathF.CopySign'","State":"closed","Body":"Optimise 'Math.CopySign' and 'MathF.CopySign'. Both of these methods can be improved from their current implementation. The new implementation uses SSE intrinsics which are faster, as well as having a faster intrinsic-free branch.\r\n\r\nThe SSE pathway doesn't spill to the stack, unlike the others, and is branch free. The fallback is also branch free but does spill to the stack (the current implementation spills and contains a branch). These are faster in every scenario, except for the non-SSE fallback being marginally (10%) slower on x64 in the Same scenario - however, windows (and x64) requires SSE2 so it is unlikely this code is ever going to be run on x86. I haven't profiled on ARM as I don't have access to an ARM system.\r\n\r\nScenarios:\r\nSame - every sign is the same (e.g `x == 1f, y == 2f`)\r\nDifferent - every sign is different (e.g `x == 1f, y == -2f`)\r\nAlternating - alternates between same and different\r\nRandom - randomly same or different\r\n\r\nSingle precision (`MathF):\r\n\r\n|         Method |    Scenario |      Mean |     Error |    StdDev |\r\n|--------------- |------------ |----------:|----------:|----------:|\r\n|       Standard |      Random | 181.14 us | 1.0300 us | 0.8601 us |\r\n|           John |      Random |  47.49 us | 0.1613 us | 0.1347 us |\r\n| John_Intrinsic |      Random |  39.79 us | 0.4956 us | 0.4636 us |\r\n|       Standard |        Same |  43.59 us | 0.2158 us | 0.2019 us |\r\n|           John |        Same |  49.11 us | 0.6777 us | 0.6339 us |\r\n| John_Intrinsic |        Same |  39.74 us | 0.2084 us | 0.1949 us |\r\n|       Standard |   Different |  56.04 us | 0.6402 us | 0.5988 us |\r\n|           John |   Different |  49.58 us | 0.9119 us | 0.8529 us |\r\n| John_Intrinsic |   Different |  39.80 us | 0.2419 us | 0.1889 us |\r\n|       Standard | Alternating |  48.89 us | 0.1422 us | 0.1330 us |\r\n|           John | Alternating |  47.48 us | 0.0766 us | 0.0717 us |\r\n| John_Intrinsic | Alternating |  39.05 us | 0.0289 us | 0.0226 us |\r\n\r\nDouble precision (`Math`):\r\n\r\n|         Method |    Scenario |      Mean |     Error |    StdDev |\r\n|--------------- |------------ |----------:|----------:|----------:|\r\n|       Standard |      Random | 176.77 us | 0.3537 us | 0.2954 us |\r\n|           John |      Random |  53.74 us | 0.1543 us | 0.1443 us |\r\n| John_Intrinsic |      Random |  41.22 us | 0.1321 us | 0.1236 us |\r\n|       Standard |        Same |  48.64 us | 0.1322 us | 0.1237 us |\r\n|           John |        Same |  53.85 us | 0.1499 us | 0.1402 us |\r\n| John_Intrinsic |        Same |  41.44 us | 0.2931 us | 0.2742 us |\r\n|       Standard |   Different |  59.91 us | 0.0642 us | 0.0569 us |\r\n|           John |   Different |  53.72 us | 0.1779 us | 0.1664 us |\r\n| John_Intrinsic |   Different |  41.09 us | 0.0346 us | 0.0289 us |\r\n|       Standard | Alternating |  54.06 us | 0.1293 us | 0.1210 us |\r\n|           John | Alternating |  53.84 us | 0.1772 us | 0.1658 us |\r\n| John_Intrinsic | Alternating |  41.11 us | 0.0681 us | 0.0604 us |","Url":"https://github.com/dotnet/corefx/pull/40782","RelatedDescription":"Closed or merged PR \"Optimise 'Math.CopySign' and 'MathF.CopySign'\" (#40782)"},{"Id":"488825550","IsPullRequest":true,"CreatedAt":"2019-09-03T21:07:22","Actor":"joperezr","Number":"40780","RawContent":null,"Title":"Update Stable Version info on package index","State":"open","Body":"cc: @ericstj \r\n\r\nIn order to produce this diff, I only ran `dotnet msbuild src\\System.Text.Json\\pkg\\System.Text.Json.pkgproj /t:UpdateRepoPackageIndex /p:UpdateStablePackageInfo=true`. It doesn't have to be System.Text.Json.pkgproj obviously, but you just need to run it on a project that imports the right targets, which would be any *.pkgproj on the repo. Internally, this target is simply updating all of the stable versions based on packages in nuget.org with all versions that are listed.","Url":"https://github.com/dotnet/corefx/pull/40780","RelatedDescription":"Open PR \"Update Stable Version info on package index\" (#40780)"},{"Id":"488825325","IsPullRequest":false,"CreatedAt":"2019-09-03T21:06:46","Actor":"bartonjs","Number":"40779","RawContent":null,"Title":"JsonElement does not de-escape property names before writing them","State":"open","Body":"```C#\r\n        [Fact]\r\n        public static void CheckEscapedProperty()\r\n        {\r\n            var buffer = new ArrayBufferWriter<byte>(1024);\r\n\r\n            using (JsonDocument doc = JsonDocument.Parse(@\"{ \"\"hello\\u003c\"\": 1, \"\"potato\"\": 2 }\"))\r\n            {\r\n                JsonElement target = doc.RootElement;\r\n\r\n                var options = new JsonWriterOptions\r\n                {\r\n                    Indented = false,\r\n                };\r\n\r\n                using (var writer = new Utf8JsonWriter(buffer, options))\r\n                {\r\n                    target.WriteTo(writer);\r\n                    writer.Flush();\r\n                }\r\n\r\n                JsonTestHelper.AssertContents(\"{\\\"hello\\\\u003c\\\":1}\", buffer);\r\n            }\r\n        }\r\n```\r\n\r\nIt currently writes the property name as \"hello\\\\003c\", then doing it again becomes \"hello\\\\\\\\003c\", et cetera.   It missed de-escaping the property name before writing it.\r\n\r\n(or \"P\\u0069zza\" => \"P\\\\u0069zza\" instead of \"Pizza\")","Url":"https://github.com/dotnet/corefx/issues/40779","RelatedDescription":"Open issue \"JsonElement does not de-escape property names before writing them\" (#40779)"},{"Id":"488774808","IsPullRequest":true,"CreatedAt":"2019-09-03T20:53:02","Actor":"kbilsted","Number":"40774","RawContent":null,"Title":"Reduce the signal to noise ratio of the code","State":"closed","Body":"We make the code terser and easier to navigate by removing lines of code that do not provide any value.\r\n\r\nwe\r\n* Reformat small `<summary>` to take up 1 line of code rather than 3\r\n* Remove empty `<summary>`, `<param>`, `<returns>`, ...\r\n* Reformat properties to take up less lines\r\n\r\nThe reformatting follows existing formatting conventions of the code base.","Url":"https://github.com/dotnet/corefx/pull/40774","RelatedDescription":"Closed or merged PR \"Reduce the signal to noise ratio of the code\" (#40774)"},{"Id":"488760516","IsPullRequest":true,"CreatedAt":"2019-09-03T20:07:11","Actor":"brianrob","Number":"40772","RawContent":null,"Title":"Add the DebuggableAttribute to System.Runtime.CompilerServices.Unsafe.","State":"closed","Body":"System.Runtime.CompilerServices.Unsafe.dll is produced from IL rather than C#, and so it does not by default have a DebuggableAttribute.  As such, it is possible to end up in a place where JIT optimizations that are expected to be applied, such as inlining, are not due to the fact that the JIT uses the DebuggableAttribute as part of the calculation at inlining time.  I believe that none of the methods in this assembly are currently affected, as they are all marked as aggressivelyinline, but going forward, any method that is not marked in such a way would likely not be inlined.\r\n\r\nThis change adds the appropriate DebuggableAttribute to Debug and Release versions of System.Runtime.CompilerServices.Unsafe.dll.  This is the only assembly in the shared framework that does not have a DebuggableAttribute already.  A search of CoreFx turned this assembly up as the only one that is IL-based.\r\n\r\nNOTE: This PR is the result of a WPF performance investigation that identified the lack of a DebuggableAttribute as the reason that the JIT didn't inline things that it previously had.  Ultimately, we found that the -DEBUG flag wasn't being passed to ilasm.  Fixing this addressed the regression, and thus the desire to identify any other assemblies that might fall into this trap.","Url":"https://github.com/dotnet/corefx/pull/40772","RelatedDescription":"Closed or merged PR \"Add the DebuggableAttribute to System.Runtime.CompilerServices.Unsafe.\" (#40772)"},{"Id":"488797104","IsPullRequest":false,"CreatedAt":"2019-09-03T20:05:27","Actor":"safern","Number":"40776","RawContent":null,"Title":"DirectoryCatalog throws on a case sensitive Windows environment","State":"open","Body":"In VisualStudio community it was reported that `DirectoryCatalog` throws when windows is configured to be case sensitive.\r\n\r\nThe reason for that is because `DirectoryCatalog` constructor gets the full path that is passed down and then does `ToUpperInvariant()`, so if the OS is configured to be case sensitive, it will throw because it will not find the path all upper case. I don't think we should upper case the path as that should be handled by the OS.\r\n\r\nhttps://github.com/dotnet/corefx/blob/5b2c6b7d286265d3bdaddb8445c1bbf3d9141461/src/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/DirectoryCatalog.cs#L746\r\n\r\ncc: @tarekgh ","Url":"https://github.com/dotnet/corefx/issues/40776","RelatedDescription":"Open issue \"DirectoryCatalog throws on a case sensitive Windows environment\" (#40776)"},{"Id":"488640789","IsPullRequest":true,"CreatedAt":"2019-09-03T19:12:24","Actor":"tmds","Number":"40769","RawContent":null,"Title":"Fix regression in TCPClient behavior when Disposed/Client set to null","State":"closed","Body":"Regressed by #37462\r\nFixes https://github.com/dotnet/corefx/issues/40765\r\n\r\nCC @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/40769","RelatedDescription":"Closed or merged PR \"Fix regression in TCPClient behavior when Disposed/Client set to null\" (#40769)"},{"Id":"488770213","IsPullRequest":false,"CreatedAt":"2019-09-03T19:00:53","Actor":"stephentoub","Number":"40773","RawContent":null,"Title":"RemoteExecutor.Invoke incurs large overheads with checked coreclr","State":"open","Body":"Every call to RemoteExecutor.Invoke appears to be adding more than a second of overhead when using a checked coreclr build. For example, a Regex test using RemoteExecutor.Invoke that takes ~0.1 seconds on a release coreclr takes ~1.4s on a checked coreclr.  This adds a non-trivial amount of execution time to some coreclr CI legs, and I believe contributes to some of the timeouts we see in coreclr CI.\r\n\r\nIn corefx tests, we have ~500 call sites to RemoteExecutor.Invoke.  But some of those are theories.  Watching a `build -test` execution locally for inner loop execution, RemoteExecutor.Invoke is used 2137 times (that's how many dotnet.exe processes are created with RemoteExecutor.dll on the command line, according to Process Monitor).  If each adds 1s of overhead, that's **~36 minutes** of overhead in each coreclr checked CI leg.\r\n\r\nThis appears to be less about RemoteExecutor.Invoke itself and more about all of the validation that happens in a checked build as part of starting the runtime, so I'm not sure what we can do about it, other than using RemoteExecutor.Invoke more sparingly (and maybe finding ways to trim back on the cost of the checked validation performed).\r\n\r\ncc: @ViktorHofer, @jkotas","Url":"https://github.com/dotnet/corefx/issues/40773","RelatedDescription":"Open issue \"RemoteExecutor.Invoke incurs large overheads with checked coreclr\" (#40773)"},{"Id":"488726036","IsPullRequest":false,"CreatedAt":"2019-09-03T17:16:13","Actor":"GSPP","Number":"40771","RawContent":null,"Title":"Resetting a Utf8JsonReader at a certain point causes discrepancy in BytePositionInLine","State":"open","Body":"Execute the following program:\r\n\r\n\ttry\r\n\t{\r\n\t\tvar jsonBytes = Encoding.UTF8.GetBytes(\"{/\");\r\n\t\tvar readOnlySequence = Util.CreateReadOnlySequence(Util.SplitMemory(jsonBytes, 1));\r\n\t\tvar reader = new Utf8JsonReader(readOnlySequence, new JsonReaderOptions() { CommentHandling = JsonCommentHandling.Skip });\r\n\t\treader.Read();\r\n\t\treader = new Utf8JsonReader(readOnlySequence.Slice(1), true, reader.CurrentState); //reset reader, comment this out\r\n\t\treader.Read();\r\n\t}\r\n\tcatch (Exception ex)\r\n\t{\r\n\t\tConsole.WriteLine(ex);\r\n\t}\r\n\r\nNext, comment out the marked line. The error message changes from\r\n\r\n> System.Text.Json.JsonReaderException: '/' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 1.\r\n\r\nto\r\n\r\n> System.Text.Json.JsonReaderException: Unexpected end of data while reading a comment. LineNumber: 0 | BytePositionInLine: 2.\r\n\r\nNote, that multi-segment mode is used and `JsonCommentHandling.Skip` is set.\r\n\r\nThis code requires the following utility class:\r\n\r\n    static class Util\r\n    {\r\n        public static IEnumerable<Memory<byte>> SplitMemory(Memory<byte> memory, int chunkSize)\r\n        {\r\n            for (int startIndex = 0; startIndex < memory.Length; startIndex += chunkSize)\r\n                yield return memory.Slice(startIndex, Math.Min(chunkSize, memory.Length - startIndex));\r\n        }\r\n\r\n        public static ReadOnlySequence<T> CreateReadOnlySequence<T>(IEnumerable<Memory<T>> buffers) => SimpleReadOnlySequenceSegment<T>.Create(buffers);\r\n\r\n        class SimpleReadOnlySequenceSegment<T> : ReadOnlySequenceSegment<T>\r\n        {\r\n            internal static ReadOnlySequence<T> Create(IEnumerable<Memory<T>> buffers)\r\n            {\r\n                SimpleReadOnlySequenceSegment<T> segment = null;\r\n                SimpleReadOnlySequenceSegment<T> first = null;\r\n                foreach (Memory<T> buffer in buffers)\r\n                {\r\n                    var newSegment = new SimpleReadOnlySequenceSegment<T>()\r\n                    {\r\n                        Memory = buffer,\r\n                    };\r\n\r\n                    if (segment != null)\r\n                    {\r\n                        segment.Next = newSegment;\r\n                        newSegment.RunningIndex = segment.RunningIndex + segment.Memory.Length;\r\n                    }\r\n                    else\r\n                    {\r\n                        first = newSegment;\r\n                    }\r\n\r\n                    segment = newSegment;\r\n                }\r\n\r\n                if (first == null)\r\n                {\r\n                    first = segment = new SimpleReadOnlySequenceSegment<T>();\r\n                }\r\n\r\n                return new ReadOnlySequence<T>(first, 0, segment, segment.Memory.Length);\r\n            }\r\n        }\r\n    }\r\n\r\nThis discrepancy can cause behavior changes depending on how big chunks of data read from the network are. Recreating a reader from a state is required in streaming scenarios with async IO. I quote my reasoning for fixing this from my previous issue:\r\n\r\n> I found a few cases where the values for BytesConsumed, BytePositionInLine or the error message deviate between modes. Depending on the segmentation chunking, the error message and position numbers can be different for the same JSON. This could be an issue for debuggability and diagnosing production errors. It seems desirable that the segment mode should not affect parsing outcome.\r\n\r\nAlso, is `BytePositionInLine` used to make parsing decisions? It seems that `CheckLiteralMultiSegment` uses it. In that case, this might actually be a functional parsing bug.","Url":"https://github.com/dotnet/corefx/issues/40771","RelatedDescription":"Open issue \"Resetting a Utf8JsonReader at a certain point causes discrepancy in BytePositionInLine\" (#40771)"},{"Id":"488720536","IsPullRequest":false,"CreatedAt":"2019-09-03T17:06:09","Actor":"suedama1756","Number":"40770","RawContent":null,"Title":"SignalR sends incomplete JSON in socket frames when using new System.Text.Json Serializer","State":"closed","Body":"3.0.100-preview8-013656\r\n\r\nSignalR JS Client: 3.0.0-preview6.19307.2\r\n\r\nWe have an issue where SignalR is sending incomplete JSON in a socket frame to the browser which results in an error in the signalr client.\r\n\r\n```js\r\n if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n   }\r\n```\r\n\r\nThe issue does not occur when using the NewtonSoft JSON serializer. It looks like the JSON buffer is not being flushed correctly","Url":"https://github.com/dotnet/corefx/issues/40770","RelatedDescription":"Closed issue \"SignalR sends incomplete JSON in socket frames when using new System.Text.Json Serializer\" (#40770)"},{"Id":"488634047","IsPullRequest":true,"CreatedAt":"2019-09-03T15:21:36","Actor":"stephentoub","Number":"40768","RawContent":null,"Title":"Disable a couple S.S.Cryptogrpahy.Algorithms tests deterministically failing locally","State":"closed","Body":"https://github.com/dotnet/corefx/issues/40434\r\ncc: @bartonjs","Url":"https://github.com/dotnet/corefx/pull/40768","RelatedDescription":"Closed or merged PR \"Disable a couple S.S.Cryptogrpahy.Algorithms tests deterministically failing locally\" (#40768)"},{"Id":"488615168","IsPullRequest":true,"CreatedAt":"2019-09-03T14:35:32","Actor":"stephentoub","Number":"40766","RawContent":null,"Title":"Disable several TcpClient outerloop tests","State":"closed","Body":"cc: @tmds, @ViktorHofer \r\nhttps://github.com/dotnet/corefx/issues/40765","Url":"https://github.com/dotnet/corefx/pull/40766","RelatedDescription":"Closed or merged PR \"Disable several TcpClient outerloop tests\" (#40766)"},{"Id":"488629852","IsPullRequest":true,"CreatedAt":"2019-09-03T14:10:15","Actor":"stephentoub","Number":"40767","RawContent":null,"Title":"Move wildcard bind in Socket.ConnectAsync to be Windows-only","State":"open","Body":"It's necessary to use ConnectEx; it's not necessary on Unix.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40737","Url":"https://github.com/dotnet/corefx/pull/40767","RelatedDescription":"Open PR \"Move wildcard bind in Socket.ConnectAsync to be Windows-only\" (#40767)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"488889073","IsPullRequest":false,"CreatedAt":"2019-09-04T01:03:51","Actor":"dibarbet","Number":"38477","RawContent":null,"Title":"Liveshare FAR requires UI thread","State":"open","Body":"Currently, liveshare FAR requires the UI thread as it calls into the [AbstractFindUsagesService](http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/FindUsages/AbstractFindUsagesService.cs,bc260059e380e9ca).  This requires the UI thread to get third party definitions (which in this case means XAML).  We need to remove UI thread dependencies (and editor dependencies) from the liveshare implementation in order to create a proper LSP version of FAR.\r\n\r\nKnown UI dependencies in FAR\r\n1.  [XAML navigation](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Workspace/VisualStudioSymbolNavigationService.cs,266)\r\n    a.  Service provider\r\n    b.  IVsHierarchy\r\n    c.  IVsSymbolicNavigationNotify\r\n2.  [Invisible editor](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/FindReferences/VisualStudioDefinitionsAndReferencesFactory.cs,66) (find source line)\r\n\r\nFor 1), we need to work with the XAML team to define a way to provide navigation in the nexus world as many of the concepts being used there may go away.\r\n\r\nGenerally, the approach being considered is to move to the lower level data API SymbolFinder, but we still need to figure out how to handle 1).","Url":"https://github.com/dotnet/roslyn/issues/38477","RelatedDescription":"Open issue \"Liveshare FAR requires UI thread\" (#38477)"},{"Id":"488883161","IsPullRequest":true,"CreatedAt":"2019-09-04T00:34:47","Actor":"petrroll","Number":"38476","RawContent":null,"Title":"Don't offer Introduce local for expression statement if expr. stm is assignment.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38476","RelatedDescription":"Open PR \"Don't offer Introduce local for expression statement if expr. stm is assignment.\" (#38476)"},{"Id":"488876233","IsPullRequest":true,"CreatedAt":"2019-09-04T00:02:07","Actor":"dotnet-bot","Number":"38475","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38475","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38475)"},{"Id":"488876200","IsPullRequest":true,"CreatedAt":"2019-09-04T00:01:59","Actor":"dotnet-bot","Number":"38474","RawContent":null,"Title":"Merge release/dev16.3 to release/dev16.3-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-release/dev16.3-vs-deps\ngit reset --hard upstream/release/dev16.3-vs-deps\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38474","RelatedDescription":"Open PR \"Merge release/dev16.3 to release/dev16.3-vs-deps\" (#38474)"},{"Id":"488875891","IsPullRequest":true,"CreatedAt":"2019-09-04T00:00:41","Actor":"dotnet-bot","Number":"38473","RawContent":null,"Title":"Merge release/dev16.3 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38473","RelatedDescription":"Open PR \"Merge release/dev16.3 to master\" (#38473)"},{"Id":"488869735","IsPullRequest":true,"CreatedAt":"2019-09-03T23:32:42","Actor":"tmat","Number":"38472","RawContent":null,"Title":"Update VS SDK to 16.3.2099","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38472","RelatedDescription":"Open PR \"Update VS SDK to 16.3.2099\" (#38472)"},{"Id":"488869486","IsPullRequest":false,"CreatedAt":"2019-09-03T23:31:38","Actor":"tmat","Number":"38471","RawContent":null,"Title":"Address potential issues reported by VS SDK analyzer (warning VSSDK006)","State":"open","Body":"Remove suppression of the warning from Settings.props.\r\n\r\nThe analyzer also throws, so will need to be fixed before we can enable it:\r\n```\r\nCSC : error AD0001: Analyzer 'Microsoft.VisualStudio.SDK.Analyzers.VSSDK006CheckServicesExistAnalyzer' threw an exception of type 'System.ArgumentException' with message 'Syntax node is not within syntax tree'. [\\src\\VisualStudio\\Core\\Def\\Microsoft\r\n.VisualStudio.LanguageServices.csproj]\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38471","RelatedDescription":"Open issue \"Address potential issues reported by VS SDK analyzer (warning VSSDK006)\" (#38471)"},{"Id":"488866053","IsPullRequest":true,"CreatedAt":"2019-09-03T23:17:33","Actor":"jaredpar","Number":"38470","RawContent":null,"Title":"Collapse redundant types in the server part 2","State":"open","Body":"Follow up to #308411\r\n\r\nThis is probably best reviewed commit by commit. \r\n\r\nNote: I've intentionally avoided re-naming files because I want to keep the history diff as easy as possible. Once this is merged I will have one final PR which does all of the proper file renaming to match the new class names.","Url":"https://github.com/dotnet/roslyn/pull/38470","RelatedDescription":"Open PR \"Collapse redundant types in the server part 2\" (#38470)"},{"Id":"488862120","IsPullRequest":false,"CreatedAt":"2019-09-03T23:01:37","Actor":"AlekseyTs","Number":"38469","RawContent":null,"Title":"Nested type is not found in a base interface when it is referenced in a type-or-namespace-only position.","State":"open","Body":"```\r\ninterface I100\r\n{\r\n    public class C100\r\n    {\r\n        public static void Test() { }\r\n    }\r\n}\r\n\r\ninterface I101 : I100\r\n{\r\n    private C100 Test1() => null; // error CS0246: The type or namespace name 'C100' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\n    static void Test2()\r\n    {\r\n        C100.Test();\r\n    }\r\n}\r\n```\r\n\r\nObserved:\r\n```\r\nprivate C100 Test1() => null; // error CS0246: The type or namespace name 'C100' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nNo error (the type is found in base interface) for: \r\n```\r\n        C100.Test();\r\n```\r\n\r\nExpected: No errors, the type should be found.\r\n\r\nThis is not a regression in C# 8. This code wasn't changed in the compiler for a long time. Note the ```(options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) == 0``` condition.\r\n```\r\n        // Lookup member in interface, and any base interfaces.\r\n        private static void LookupMembersInInterfaceOnly(\r\n            LookupResult current,\r\n            NamedTypeSymbol type,\r\n            string name,\r\n            int arity,\r\n            ConsList<TypeSymbol> basesBeingResolved,\r\n            LookupOptions options,\r\n            Binder originalBinder,\r\n            TypeSymbol accessThroughType,\r\n            bool diagnose,\r\n            ref HashSet<DiagnosticInfo> useSiteDiagnostics)\r\n        {\r\n            Debug.Assert((object)type != null);\r\n            Debug.Assert(type.IsInterface);\r\n\r\n            LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\r\n            if ((options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) == 0 && !originalBinder.InCrefButNotParameterOrReturnType)\r\n            {\r\n                LookupMembersInInterfacesWithoutInheritance(current, type.AllInterfacesWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics), name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics);\r\n            }\r\n        }\r\n```\r\n\r\nI think the check violates language specification, however, removing it might introduce a breaking change for existing code because types nested into interfaces were always supported by runtime, and could be produced by other languages like VB, etc. Removing the condition could resolve the identifier to a different type. For example, if there was a type named C100 in the global namespace for the example above, the C100 identifier in ```private C100 Test1() => null;``` would bind to that type. If we change lookup behavior to follow the spec, it would silently find I100.C100 type instead.\r\n```\r\n ","Url":"https://github.com/dotnet/roslyn/issues/38469","RelatedDescription":"Open issue \"Nested type is not found in a base interface when it is referenced in a type-or-namespace-only position.\" (#38469)"},{"Id":"488853931","IsPullRequest":false,"CreatedAt":"2019-09-03T22:29:49","Actor":"vsfeedback","Number":"38468","RawContent":null,"Title":"VS 16.2.3 - IDE0044 CodeFix Removes Whitespace","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/721116/vs-1623-ide0044-codefix-removes-whitespace.html)._\n\n---\nThe codefix for IDE0044 'Make field readonly' removes whitespace.\n\nPre-codefix:\n```\nnamespace IDE0044_CodeFix_Removes_Whitespace\n{\n    public class C\n    {\n        int x;\n\nint y;\n\npublic C(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```\n\nPost-codefix:\n```\nnamespace IDE0044_CodeFix_Removes_Whitespace\n{\n    public class C\n    {\n        readonly int x;\n        readonly int y;\n\npublic C(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```\n\nShouldn't it respect my whitespace and change the code to this?\n```\nnamespace IDE0044_CodeFix_Removes_Whitespace\n{\n    public class C\n    {\n        readonly int x;\n        \nreadonly int y;\n\npublic C(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38468","RelatedDescription":"Open issue \"VS 16.2.3 - IDE0044 CodeFix Removes Whitespace\" (#38468)"},{"Id":"488852615","IsPullRequest":false,"CreatedAt":"2019-09-03T22:25:30","Actor":"AlekseyTs","Number":"38467","RawContent":null,"Title":"Confusing error message when the target member cannot be located for an explicit interface implementation","State":"open","Body":"```\r\ninterface I100 { }\r\n\r\nclass C100 : I100\r\n{\r\n    object I100.M4() => null;\r\n}\r\n```\r\n\r\nObserved:\r\n```\r\n error CS0539: 'C100.M4()' in explicit interface declaration is not found among members of the interface that can be implemented\r\n```\r\n\r\nBut C100 doesn't have member named M4.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38467","RelatedDescription":"Open issue \"Confusing error message when the target member cannot be located for an explicit interface implementation\" (#38467)"},{"Id":"488818310","IsPullRequest":false,"CreatedAt":"2019-09-03T22:10:03","Actor":"gafter","Number":"38464","RawContent":null,"Title":"Flaky test `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`","State":"closed","Body":"Failed in https://dev.azure.com/dnceng/public/_build/results?buildId=335629&view=ms.vss-test-web.build-test-results-tab&runId=9892310&resultId=100349&paneView=debug\r\n\r\n```\r\nAssert.Equal() Failure\\r\\nExpected: WhereSelectEnumerableIterator<TextSpan, Span> [[143..146), [208..211)]\\r\\nActual: List<Span> [[143..146), [208..211), [208..211)]\r\n\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_19_VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 723\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38464","RelatedDescription":"Closed issue \"Flaky test `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`\" (#38464)"},{"Id":"488816431","IsPullRequest":false,"CreatedAt":"2019-09-03T22:09:48","Actor":"gafter","Number":"38463","RawContent":null,"Title":"Flaky test `CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping`","State":"closed","Body":"Failed at https://dev.azure.com/dnceng/public/_build/results?buildId=335585&view=ms.vss-test-web.build-test-results-tab&runId=9891168&resultId=100396&paneView=debug\r\n\r\n``` none\r\nAssert.Equal() Failure\\r\\nExpected: WhereSelectEnumerableIterator<TextSpan, Span> [[46..49), [75..78)]\\r\\nActual: List<Span> [[46..49), [75..78), [75..78)]\r\n\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_22_CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 935\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38463","RelatedDescription":"Closed issue \"Flaky test `CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping`\" (#38463)"},{"Id":"488846071","IsPullRequest":true,"CreatedAt":"2019-09-03T22:04:05","Actor":"Cosifne","Number":"38466","RawContent":null,"Title":"(WIP) Remove the workspace IVT of SourceBasedTestDiscovery","State":"open","Body":"I plan to add all the workspace-level wrapper types for SourceBasedTestDiscovery.\r\nCurrently it contains just the part of SolutionCrawler.\r\n\r\n@sharwell \r\nCould you check if everything here is correct? \r\nI'll add more wrapper then.","Url":"https://github.com/dotnet/roslyn/pull/38466","RelatedDescription":"Open PR \"(WIP) Remove the workspace IVT of SourceBasedTestDiscovery\" (#38466)"},{"Id":"488825501","IsPullRequest":false,"CreatedAt":"2019-09-03T21:07:13","Actor":"heejaechang","Number":"38465","RawContent":null,"Title":"find all references and navigate to not using caches","State":"open","Body":"our code used to work without persistent service and persistent service was an optional component. if persistent service doesn't exist or doesn't work for whatever reason, we used to cache find all reference or go-to index in memory.\r\n\r\nthis seems changed now and at the same situation, it looks like we don't cache at all and re-calculate everything from scratch every single time.\r\n\r\nit might be okay for one-off FAR or go to time to time but when doing that many times, it shows big performance degradation.\r\n\r\nthe most common case for this is when one opens multiple VS for same solution (same sln file). then 1 VS will use cache and the other VS won't use any cache making second one very slow on these operations.\r\n\r\nanother case is one doing FAR or go to (SymbolFinder) on MSBuildWorkspace or AdhocWorkspace or any custom Workspace. these workspace will never use persistent service by default. so always get worst performance.\r\n\r\nalso, it is not possible for them to enable persistent service since it requires location service (to know where to save the persistent file) and that service is internal and can't provided by users.\r\n\r\nit would be nice to put back the in memory cache so that people can get in memory cache by default at least.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38465","RelatedDescription":"Open issue \"find all references and navigate to not using caches\" (#38465)"},{"Id":"488809529","IsPullRequest":true,"CreatedAt":"2019-09-03T20:34:16","Actor":"agocke","Number":"38462","RawContent":null,"Title":"Cache diagnostic ID strings in the AnalyzerConfigSet","State":"open","Body":"I'm not sure if this is exactly where we want to do the caching, so I've\r\ntaken the opportunity to make all the non-core AnalyzerConfig APIs internal.\r\nThere are no existing consumers depending on them, so this is not a breaking\r\nchange.\r\n\r\nFixes #38426","Url":"https://github.com/dotnet/roslyn/pull/38462","RelatedDescription":"Open PR \"Cache diagnostic ID strings in the AnalyzerConfigSet\" (#38462)"},{"Id":"488807687","IsPullRequest":true,"CreatedAt":"2019-09-03T20:29:59","Actor":"333fred","Number":"38461","RawContent":null,"Title":"Remove SourceBuild.sln, and use ExcludeFromSourceBuild property in project files instead.","State":"open","Body":"@tmat @jaredpar for review. @dseefeld @crummel, what changes will this need on the source-build side to consume Roslyn.sln instead of SourceBuild.sln?","Url":"https://github.com/dotnet/roslyn/pull/38461","RelatedDescription":"Open PR \"Remove SourceBuild.sln, and use ExcludeFromSourceBuild property in project files instead.\" (#38461)"},{"Id":"488792565","IsPullRequest":true,"CreatedAt":"2019-09-03T19:55:10","Actor":"jcouv","Number":"38460","RawContent":null,"Title":"Fix type inference issue with nullability","State":"open","Body":"Nullability should only introduce warnings, but in a type inference scenario where two candidates differ only in nullability we were producing an error.\r\n\r\nThis PR introduces a breaking change which I'll confirm with compat council. Previously, we would only warn for implementing the same interface twice with different nullabilities, but it is more consistent with other checks to produce an error. Indirect duplicate implementations still just produce a warning.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/38168\r\n\r\nWhile working on this, I noticed that tuple name checks are there for interface implementations , but missing for type constraints (`... : I<(int a, int b)>, I<(int c, int d)>).","Url":"https://github.com/dotnet/roslyn/pull/38460","RelatedDescription":"Open PR \"Fix type inference issue with nullability\" (#38460)"},{"Id":"488781312","IsPullRequest":false,"CreatedAt":"2019-09-03T19:27:51","Actor":"mikadumont","Number":"38459","RawContent":null,"Title":"Better Peek Definition","State":"open","Body":"Customer request copying here:\r\n\r\n**Version Used**: \r\nVisual Studio 2019\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a more narrow focus.\r\n2.  Don't want to have to scroll up and down to get the documentation. \r\n3. Would like to have summary, params, returns (if any), remarks, exceptions (if any). When looking for help on a given method no need to display how the method is implemented (can use Go To Definition for this) and should therefore show the actual documentation. \r\n\r\n**Expected Behavior**:\r\n![ReSharperCtrlShiftF1](https://user-images.githubusercontent.com/46729679/64201895-a30ac200-ce44-11e9-96ee-94f808678101.png)\r\n\r\n**Actual Behavior**:\r\n![peekwindow](https://user-images.githubusercontent.com/46729679/64202519-3395d200-ce46-11e9-9f35-7c08f7303fd5.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38459","RelatedDescription":"Open issue \"Better Peek Definition\" (#38459)"},{"Id":"488732198","IsPullRequest":false,"CreatedAt":"2019-09-03T19:04:10","Actor":"aalmada","Number":"38450","RawContent":null,"Title":"foreach boxes the enumerator when source is a constrained generic","State":"closed","Body":"**Version Used**: \r\n.NET Core 3.0.0-preview7-27912-14\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following benchmark compares the performance of three different implementations of a `Count()` operation using a `foreach` loop. They only differ on the type of the parameter: `List<T>`, `IEnumerable<T>` or `TEnumerator where TEnumerator : IEnumerable<T>`.\r\n\r\n\r\n```\r\nusing BenchmarkDotNet.Attributes;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConstraintBenchmarks\r\n{\r\n    [MemoryDiagnoser]\r\n    [MarkdownExporterAttribute.GitHub]\r\n    public class CountBenchmarks\r\n    {\r\n        List<int> list;\r\n\r\n        [Params(10_000)]\r\n        public int Count { get; set; }\r\n\r\n        [GlobalSetup]\r\n        public void GlobalSetup()\r\n        {\r\n            list = new List<int>(System.Linq.Enumerable.Range(0, Count));\r\n        }\r\n\r\n        [Benchmark(Baseline = true)]\r\n        public int Count_List() => MyCountList(list);\r\n\r\n        [Benchmark]\r\n        public int Count_Enumerable() => MyCountEnumerable(list);\r\n\r\n        [Benchmark]\r\n        public int Count_Constraint() => MyCountConstraint<List<int>, int>(list);\r\n\r\n        static int MyCountList<T>(List<T> source)\r\n        {\r\n            var count = 0;\r\n            checked\r\n            {\r\n                foreach (var _ in source)\r\n                    count++;\r\n                return count;\r\n            }\r\n        }\r\n\r\n        static int MyCountEnumerable<T>(IEnumerable<T> source)\r\n        {\r\n            var count = 0;\r\n            checked\r\n            {\r\n                foreach (var _ in source)\r\n                    count++;\r\n                return count;\r\n            }\r\n        }\r\n\r\n        static int MyCountConstraint<TEnumerable, T>(TEnumerable source)\r\n            where TEnumerable : IEnumerable<T>\r\n        {\r\n            var count = 0;\r\n            checked\r\n            {\r\n                foreach (var _ in source)\r\n                    count++;\r\n                return count;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n`List<T>` is implemented so that its `GetEnumerator()` method returns a value type.\r\n\r\nWhen the `Count()` parameter is of type `List<T>`, the generated code for `foreach` avoids boxing the enumerator by explicitly using the type `List<T>.Enumerator` for the enumerator.\r\n\r\nWhen the `Count()` parameter is of type `IEnumerable<T>`, the generated code for `foreach` causes the boxing of the enumerator because it uses the type `IEnumerator<T>`.\r\n\r\nWhen the `Count()` parameter is a constrained generic, I was expecting that the enumerator would not be boxed. The compiler should use the passed type and not the constraint the it has to respect.\r\n\r\n**Actual Behavior**:\r\n\r\nThe benchmark shows that the enumerator is boxed, causing it to perform poorly:\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i5 CPU M 520 2.40GHz, 1 CPU, 4 logical and 2 physical cores\r\n.NET Core SDK=3.0.100-preview7-012821\r\n  [Host]     : .NET Core 3.0.0-preview7-27912-14 (CoreCLR 4.700.19.32702, CoreFX 4.700.19.36209), 64bit RyuJIT\r\n  DefaultJob : .NET Core 3.0.0-preview7-27912-14 (CoreCLR 4.700.19.32702, CoreFX 4.700.19.36209), 64bit RyuJIT\r\n\r\n\r\n```\r\n|           Method | Count |      Mean |     Error |    StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|----------------- |------ |----------:|----------:|----------:|------:|--------:|------:|------:|------:|----------:|\r\n|       Count_List | 10000 |  40.58 us | 0.6163 us | 0.4812 us |  1.00 |    0.00 |     - |     - |     - |         - |\r\n| Count_Enumerable | 10000 | 109.32 us | 1.8738 us | 1.5647 us |  2.69 |    0.05 |     - |     - |     - |      40 B |\r\n| Count_Constraint | 10000 | 109.82 us | 1.1239 us | 1.0513 us |  2.71 |    0.04 |     - |     - |     - |      40 B |\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38450","RelatedDescription":"Closed issue \"foreach boxes the enumerator when source is a constrained generic\" (#38450)"},{"Id":"488757630","IsPullRequest":false,"CreatedAt":"2019-09-03T18:31:39","Actor":"RikkiGibson","Number":"38458","RawContent":null,"Title":"Why is 'T?' disallowed when constrained to 'class?'","State":"open","Body":"This is a question I had when looking at #37987\r\n\r\nThe 'class?' generic constraint makes it so a reference type argument is required, and the type argument may be nullable. i.e. both 'string' and 'string?' are allowed to be passed. The analysis treats values of such types essentially by saying \"null could come out, but null should not go in.\"\r\n\r\n```cs\r\npublic void M<T>(T t) where T : class?\r\n{\r\n    string s = t.ToString(); // warning CS8602: Dereference of a possibly null reference.\r\n    t = null; // warning CS8654: A null literal introduces a null value when 'T' is a non-nullable reference type.\r\n}\r\n```\r\n\r\nIt seems like using the type T? is distinct from T here, because it means \"null could come out, and null can go in\". Declaring a variable of this type results in the diagnostic \"error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.\".\r\n\r\nThe [specification in csharplang](https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/nullable-reference-types-specification.md#nullability-of-types) says:\r\n\r\n> For a type parameter `T`, `T?` is only allowed if `T` is known to be a value type or known to be a reference type.\r\n\r\nThis does not say \"non-nullable reference type\". Just \"reference type\".","Url":"https://github.com/dotnet/roslyn/issues/38458","RelatedDescription":"Open issue \"Why is 'T?' disallowed when constrained to 'class?'\" (#38458)"},{"Id":"488754004","IsPullRequest":true,"CreatedAt":"2019-09-03T18:23:06","Actor":"tmeschter","Number":"38457","RawContent":null,"Title":"Disable failing tests","State":"open","Body":"Related to #38454.\r\n\r\nThese tests fail in the CI runs for #38417 which adds translations for various resources. The problem is the test compares localized text with the original English text; this worked fine until now because the localized text wasn't yet translated, and so just happened to be the same as the English.\r\n\r\nThe point of this change is to unblock #38417.","Url":"https://github.com/dotnet/roslyn/pull/38457","RelatedDescription":"Open PR \"Disable failing tests\" (#38457)"},{"Id":"488753594","IsPullRequest":true,"CreatedAt":"2019-09-03T18:22:13","Actor":"gafter","Number":"38456","RawContent":null,"Title":"Add a test for awaitable pattern with ref struct result","State":"open","Body":"Closes #37712","Url":"https://github.com/dotnet/roslyn/pull/38456","RelatedDescription":"Open PR \"Add a test for awaitable pattern with ref struct result\" (#38456)"},{"Id":"488751532","IsPullRequest":false,"CreatedAt":"2019-09-03T18:17:18","Actor":"heejaechang","Number":"38455","RawContent":null,"Title":"completion leaking cancellation exception","State":"open","Body":"```\r\n<entry>\r\n<record>5061</record>\r\n<time>2019/06/05 19:03:33.638</time>\r\n<type>Error</type>\r\n<source>Editor or Editor Extension</source>\r\n<description>System.OperationCanceledException: The operation was canceled.\r\n at System.Threading.CancellationToken.ThrowOperationCanceledException()\r\n at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)\r\n at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CommitManager.Commit(Document document, CompletionService completionService, ITextView view, ITextBuffer subjectBuffer, CompletionItem roslynItem, TextSpan completionListSpan, Nullable`1 commitCharacter, ITextSnapshot triggerSnapshot, CompletionRules rules, String filterText, CancellationToken cancellationToken)\r\n at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CommitManager.TryCommit(IAsyncCompletionSession session, ITextBuffer subjectBuffer, CompletionItem item, Char typeChar, CancellationToken cancellationToken)\r\n at Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Implementation.AsyncCompletionSession.<>c__DisplayClass67_1.<CommitItem>b__0()\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint[T](Object errorSource, Func`1 call, T valueOnThrow)\r\n --- End of stack trace from previous location where exception was thrown ---\r\n at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)</description>\r\n</entry>\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38455","RelatedDescription":"Open issue \"completion leaking cancellation exception\" (#38455)"},{"Id":"488747485","IsPullRequest":false,"CreatedAt":"2019-09-03T18:07:39","Actor":"tmeschter","Number":"38454","RawContent":null,"Title":"Suppressed diagnostic unit tests fail on Spanish runs","State":"open","Body":"The following unit tests (both C# and VB variants) fail on Spanish CI runs:\r\n\r\n- TestSuppression_CompilerWarningAsError\r\n- TestSuppression_CompilerParserWarningAsError\r\n- TestSuppression_AnalyzerWarning\r\n- TestSuppression_CompilerWarning\r\n- TestSuppression_CompilerSemanticWarning\r\n- TestSuppression_CompilerSyntaxWarning\r\n\r\nThe tests force the compiler output to English, but then they look up the expected text through `CodeAnalysisResources` which means they will get the Spanish version.\r\n\r\nThese tests will be disabled to unblock loc check-ins in release/dev16.3-vs-deps.","Url":"https://github.com/dotnet/roslyn/issues/38454","RelatedDescription":"Open issue \"Suppressed diagnostic unit tests fail on Spanish runs\" (#38454)"},{"Id":"488744625","IsPullRequest":false,"CreatedAt":"2019-09-03T18:00:32","Actor":"YairHalberstadt","Number":"38453","RawContent":null,"Title":"Suggest import statement based on common usage","State":"open","Body":"**Version Used**:  VS 16.3 preview\r\n\r\n**Steps to Reproduce**:\r\n\r\nI have a project which references many nuget packages. As a result there are at least 4 ILogger interfaces defined.\r\n\r\nI have a constructor that takes MyLogging.ILogger.\r\n\r\n```csharp\r\npublic class C\r\n{\r\n    public C(ILogger logger){}\r\n}\r\n```\r\n\r\nMyLogging isn't imported, and so I get a code fix to add using statements. However the suggestions only show the top 3 results, which don't include MyLogging.ILogger.\r\n\r\nGiven how many classes have a constructor accepting ILogger, this is quite annoying.\r\n\r\nWould it be possible to sort the using statements to add based on how frequently they're used in the project?\r\n","Url":"https://github.com/dotnet/roslyn/issues/38453","RelatedDescription":"Open issue \"Suggest import statement based on common usage\" (#38453)"},{"Id":"488736632","IsPullRequest":true,"CreatedAt":"2019-09-03T17:41:08","Actor":"AlekseyTs","Number":"38451","RawContent":null,"Title":"Adjust inconsistent accessibility checks to properly handle protected types declared within interfaces.","State":"open","Body":"Fixes #38398.","Url":"https://github.com/dotnet/roslyn/pull/38451","RelatedDescription":"Open PR \"Adjust inconsistent accessibility checks to properly handle protected types declared within interfaces.\" (#38451)"},{"Id":"488625862","IsPullRequest":false,"CreatedAt":"2019-09-03T14:03:10","Actor":"lgolding","Number":"38449","RawContent":null,"Title":"SARIF: optionally include metadata for all rules","State":"open","Body":"Provide an option to include metadata for all rules in SARIF v2.1.0 logs. Enable it with the command line option qualifier `/errorlog:myfile.sarif,version=2,allrules`.\r\n\r\nDo not provide this support for SARIF v1 files.\r\n\r\nOpen question: Should the option apply to compiler diagnostics? To analyzer rules? To both? To either or both at user option (for example, `...alldiagnostics,allanalyzerrules`)?","Url":"https://github.com/dotnet/roslyn/issues/38449","RelatedDescription":"Open issue \"SARIF: optionally include metadata for all rules\" (#38449)"},{"Id":"488623095","IsPullRequest":false,"CreatedAt":"2019-09-03T13:58:21","Actor":"lgolding","Number":"38448","RawContent":null,"Title":"SARIF: Optionally include snippets","State":"open","Body":"Provide an option to include region snippets in SARIF v2.1.0 logs. (The SARIF v1 format does not support snippets.) Enable it with `/errorlog:myfile.sarif,version=2,snippets`.\r\n\r\nShould we also support a \"context region\"? If so, how wide? Proposal:\r\n- Yes, provide the option.\r\n- Enable with command line option qualifier `/errorlog:myfile.sarif,version=2,contextregion`\r\n- Default width: 5 lines (2 lines before and after the error line).\r\n- Modify with `/errorlog:myfile.sarif,version=2,snippets,contextregion,contextwidth=<n>`.\r\n- `contextregion` is only valid if `snippets` is set.\r\n- `contextwidth` implies `contextregion` (and so again is only valid if `snippets` is set).","Url":"https://github.com/dotnet/roslyn/issues/38448","RelatedDescription":"Open issue \"SARIF: Optionally include snippets\" (#38448)"},{"Id":"488593579","IsPullRequest":false,"CreatedAt":"2019-09-03T13:03:52","Actor":"dropsonic","Number":"38447","RawContent":null,"Title":"Visual Studio crashes with FileNotFoundException in CompletionProvider if a NuGet package is used inside","State":"open","Body":"**Version Used**: \r\n2.9.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create two projects (e.g. using \"code fix\" VS template): .NET Standard for custom CompletionProvider and .NET Framework for VSIX\r\n2. Install 3rd party NuGet package to .NET Standard project and use it in the custom CompletionProvider (I tested on Microsoft.SqlServer.SqlManagementObjects).\r\n3. Build the solution and run the VSIX. \r\n\r\n**Expected Behavior**:\r\nAll assemblies from the NuGet package are loaded correctly\r\n\r\n**Actual Behavior**:\r\nVisual Studio crashes with FileNotFound exception.\r\nVSIX doesn't include assemblies from NuGet package at all.\r\nIf you try to install the same package to the VSIX project, it is installed with .NET Framework as a target, so Visual Studio is still not able to find the proper assembly.\r\n\r\n**Supporting Information**:\r\nA full example is available here:\r\nhttps://github.com/dropsonic/DapperIntelliSense\r\nTo reproduce it, open DapperIntelliSense.sln and run it in debug mode.\r\nIn the experimental VS instance, open Samples/DapperTest.sln, restore NuGet packages, put the cursor to the end of `connection.Query<User>` and type `(\"` to activate custom IntelliSense provider.","Url":"https://github.com/dotnet/roslyn/issues/38447","RelatedDescription":"Open issue \"Visual Studio crashes with FileNotFoundException in CompletionProvider if a NuGet package is used inside\" (#38447)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"488925681","IsPullRequest":true,"CreatedAt":"2019-09-04T03:54:30","Actor":"Dotnet-GitSync-Bot","Number":"7771","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#7771)"},{"Id":"488893657","IsPullRequest":true,"CreatedAt":"2019-09-04T02:16:33","Actor":"Dotnet-GitSync-Bot","Number":"7770","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7770)"},{"Id":"488826953","IsPullRequest":true,"CreatedAt":"2019-09-04T01:18:56","Actor":"Dotnet-GitSync-Bot","Number":"7769","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7769)"},{"Id":"488782037","IsPullRequest":true,"CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Number":"7768","RawContent":null,"Title":"Minor triage improvement in SuperIlc","State":"closed","Body":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Closed or merged PR \"Minor triage improvement in SuperIlc\" (#7768)"},{"Id":"488681079","IsPullRequest":true,"CreatedAt":"2019-09-03T20:23:38","Actor":"MichalStrehovsky","Number":"7765","RawContent":null,"Title":"Delete unused file","State":"closed","Body":"Noticed when auditing the CPAOT copy scripts.","Url":"https://github.com/dotnet/corert/pull/7765","RelatedDescription":"Closed or merged PR \"Delete unused file\" (#7765)"},{"Id":"488732123","IsPullRequest":true,"CreatedAt":"2019-09-03T19:16:49","Actor":"trylek","Number":"7766","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7766","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7766)"},{"Id":"488748576","IsPullRequest":true,"CreatedAt":"2019-09-03T18:10:21","Actor":"janvorli","Number":"7767","RawContent":null,"Title":"Implement SystemV AMD64 ABI struct classification","State":"open","Body":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times.","Url":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Open PR \"Implement SystemV AMD64 ABI struct classification\" (#7767)"},{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"},{"Id":"487641478","IsPullRequest":true,"CreatedAt":"2019-09-02T20:20:50","Actor":"trylek","Number":"7755","RawContent":null,"Title":"Preparatory change to fix JIT tokenScope during devirtualization","State":"closed","Body":"Based on Andy's advice I investigated fixing tokenScope in JIT\r\nto work correctly even in the presence of devirtualization by\r\nbasically calling getMethodModule for the resolved virtual method\r\nto update the token scope. To make that work end to end, I had\r\nto actually implement the [previously unused] helper in CoreRT.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Based on Michal's offline advice I have locally verified that\r\nthe Generics CoreRT test works in release mode with the updated\r\nJIT.\r\n","Url":"https://github.com/dotnet/corert/pull/7755","RelatedDescription":"Closed or merged PR \"Preparatory change to fix JIT tokenScope during devirtualization\" (#7755)"},{"Id":"487654553","IsPullRequest":false,"CreatedAt":"2019-09-02T15:10:29","Actor":"OshoNot","Number":"7756","RawContent":null,"Title":"System.ArgumentNullException while running basic Suave web server","State":"closed","Body":"Hi guys,\r\n\r\nI've been trying to come up with a basic web server using Suave + CoreRT. Check this [repo](https://github.com/OshoNot/suave-corert) for source code and error analysis. When I start the generated executable, it yields the following exception:\r\n\r\n```bash\r\nUnhandled Exception: System.ArgumentNullException: Value cannot be null. Parameter name: path1\r\n   at System.IO.Path.Combine(String, String) + 0x53\r\n   at Suave.Web.startWebServerAsync(SuaveConfig, FSharpFunc\\`2) + 0x46\r\n   at Suave.Web.startWebServer(SuaveConfig, FSharpFunc\\`2) + 0x17\r\n   at Program.main(String[]) + 0x28\r\n   at Simple-Web!<BaseAddress>+0x7d639d\r\nAborted\r\n```","Url":"https://github.com/dotnet/corert/issues/7756","RelatedDescription":"Closed issue \"System.ArgumentNullException while running basic Suave web server\" (#7756)"},{"Id":"488211989","IsPullRequest":true,"CreatedAt":"2019-09-02T15:07:10","Actor":"yowl","Number":"7763","RawContent":null,"Title":"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended","State":"closed","Body":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario.","Url":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Closed or merged PR \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763)"},{"Id":"487908157","IsPullRequest":true,"CreatedAt":"2019-09-02T07:56:48","Actor":"MichalStrehovsky","Number":"7762","RawContent":null,"Title":"Remove MetadataManager.SupportsReflection","State":"closed","Body":"The property was added when we started compiling ProjectN mrt100_app.dll. It was problematic because it didn't actually mean reflection - it meant \"is this something non-essential that we can skip\". We actually need what it was doing at a finer graunlarity. This commit starts with that.\r\n\r\nWith this, generic virtual methods work in the reflection disabled mode.\r\n\r\nA couple notes:\r\n* Some of the SupportsReflection calls were redundant (they were in a code path that is already related to reflection). Those disappeared without replacement.\r\n* CodeBaseDependencyAlgorithm references moved to the metadata manager. Hopefully we can get better control of generated templates in the future. (Not all types/generic methods need templates.)\r\n* DictionaryLayoutNode references were redundant with the references from code/EETypes. Removed without replacement.\r\n* Method template table emission needs to check whether the template was marked. This mirrors what we do for type templates. Eventually, we should make this for loop to go over all generated method templates instead of all methods (just keep track of the templates themselves).\r\n* GVMs were implicitly relying on getting templates because we make templates for everything. Added explicit template generation.","Url":"https://github.com/dotnet/corert/pull/7762","RelatedDescription":"Closed or merged PR \"Remove MetadataManager.SupportsReflection\" (#7762)"},{"Id":"487859012","IsPullRequest":false,"CreatedAt":"2019-09-01T09:35:37","Actor":"xoofx","Number":"7761","RawContent":null,"Title":"The type or namespace name 'System' could not be found","State":"closed","Body":"Hey,\r\n\r\nI'm trying to open `ILCompiler.sln` but I'm unable to compile any projects there, I tried both with Visual Studio 2017 and 2019\r\n\r\n![image](https://user-images.githubusercontent.com/715038/64073842-c9ddc280-cca3-11e9-807a-e74edbc1b17b.png)\r\n\r\nI tried to reclone entirely corert, `init-tools.cmd` but it still doesn't work.\r\n\r\nFrom the screenshot above I tried to compile repro.csproj and the command line from msbuild is like this:\r\n\r\n```\r\nC:\\code\\dotnet\\corert\\packages\\microsoft.net.compilers.toolset\\3.3.0-beta2-19367-02\\tasks\\net472\\csc.exe /noconfig /unsafe+ /nowarn:169,414,1701,1702,2008 /nostdlib+ /warn:4 /define:X86;BIT32;PLATFORM_WINDOWS;CORERT;DEBUG;TRACE;DEBUGRESOURCES /errorendlocation /preferreduilang:en-US /debug+ /debug:portable /optimize- /out:C:\\code\\dotnet\\corert\\bin/obj/Windows_NT.x86.Debug/repro\\repro.exe /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:exe /warnaserror+ /utf8output /checksumalgorithm:SHA256 /langversion:preview /analyzerconfig:C:\\code\\dotnet\\corert\\.editorconfig Program.cs\r\n```\r\n\r\nSo it is passing `/nostdlib+` but I don't see any netstandard library passed to it for example, so not sure how this can work.\r\n\r\nAny clues?\r\n","Url":"https://github.com/dotnet/corert/issues/7761","RelatedDescription":"Closed issue \"The type or namespace name 'System' could not be found\" (#7761)"},{"Id":"487763609","IsPullRequest":true,"CreatedAt":"2019-08-31T18:14:47","Actor":"MichalStrehovsky","Number":"7759","RawContent":null,"Title":"Consider method referenced with LDTOKEN called","State":"closed","Body":"When usage based metadata manager is enabled, we'll consider methods referenced with LDTOKEN as called. They pretty much have to be to make LINQ expressions work.","Url":"https://github.com/dotnet/corert/pull/7759","RelatedDescription":"Closed or merged PR \"Consider method referenced with LDTOKEN called\" (#7759)"},{"Id":"487765387","IsPullRequest":true,"CreatedAt":"2019-08-31T18:13:54","Actor":"MichalStrehovsky","Number":"7760","RawContent":null,"Title":"Do not root module metadata for modules not generating metadata","State":"closed","Body":"Fixes the multimodule compiler crash in DynamicGenerics.","Url":"https://github.com/dotnet/corert/pull/7760","RelatedDescription":"Closed or merged PR \"Do not root module metadata for modules not generating metadata\" (#7760)"},{"Id":"487718255","IsPullRequest":true,"CreatedAt":"2019-08-31T01:54:52","Actor":"davidwrighton","Number":"7758","RawContent":null,"Title":"[WIP] Ibc work","State":"open","Body":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)","Url":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Open PR \"[WIP] Ibc work\" (#7758)"},{"Id":"487702491","IsPullRequest":true,"CreatedAt":"2019-08-31T00:52:18","Actor":"Dotnet-GitSync-Bot","Number":"7757","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7757","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7757)"},{"Id":"487178311","IsPullRequest":true,"CreatedAt":"2019-08-30T20:03:57","Actor":"trylek","Number":"7752","RawContent":null,"Title":"Fix subtle bug in token context module resolution","State":"closed","Body":"I found out that my recent relaxation of DevirtualizationManager\r\nto allow devirtualization across modules within the large version\r\nbubble uncovered a pre-existing bug in token module context\r\nresolution causing about 10% execution failure rate in Pri#1 tests\r\nin release large-bubble mode.\r\n\r\nMy original implementation (that Michal later expanded to also\r\ncover generated IL thunks) used \"pResolvedToken.tokenScope\" to\r\ndetermine the token context. This is however incorrect in the\r\npresence of devirtualization - in such case, JIT only updates\r\nthe tokenContext in pResolvedToken to refer to the devirtualized\r\nmethod, not tokenScope (which continues pointing at the original\r\nmethod in which we devirtualized a method call). Due to this the\r\nreference module and token value went out of sync, causing a\r\nwrong function to be called.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7752","RelatedDescription":"Closed or merged PR \"Fix subtle bug in token context module resolution\" (#7752)"},{"Id":"487608901","IsPullRequest":true,"CreatedAt":"2019-08-30T19:41:35","Actor":"davidwrighton","Number":"7754","RawContent":null,"Title":"Fix calls to non-virtual Object methods on generic type parameters","State":"closed","Body":"- Calls to non-virtual Object methods are translated by the jit into\r\ndirect calls that should not be resolved via a constrained resolver\r\n- Add testcase covering behavior","Url":"https://github.com/dotnet/corert/pull/7754","RelatedDescription":"Closed or merged PR \"Fix calls to non-virtual Object methods on generic type parameters\" (#7754)"},{"Id":"487533247","IsPullRequest":true,"CreatedAt":"2019-08-30T18:56:00","Actor":"MichalStrehovsky","Number":"7753","RawContent":null,"Title":"Separate out ReadyToRun specific type system","State":"closed","Body":"This was pretty clean thanks to the existing dot-file structure.","Url":"https://github.com/dotnet/corert/pull/7753","RelatedDescription":"Closed or merged PR \"Separate out ReadyToRun specific type system\" (#7753)"},{"Id":"487108586","IsPullRequest":true,"CreatedAt":"2019-08-29T21:48:18","Actor":"trylek","Number":"7751","RawContent":null,"Title":"Fix path separator on Linux","State":"closed","Body":"As Jan Vorlicek found out in his local testing, SuperIlc always\r\nused semicolon as path separator when emitting the list of reference\r\npaths for Crossgen. This is incorrect on Linux - colon should be\r\nuse as the path separator instead.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7751","RelatedDescription":"Closed or merged PR \"Fix path separator on Linux\" (#7751)"},{"Id":"486646291","IsPullRequest":true,"CreatedAt":"2019-08-29T20:56:35","Actor":"nattress","Number":"7750","RawContent":null,"Title":"Remove SectionStartNode mechanism","State":"closed","Body":"Symbols for the beginning of each PE section were added as part of https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76#diff-2559cd80eabcbd275c059bd09c5cc961. This is no longer needed as RVA field references now just use standard relocations to `CopiedFieldRvaNode` objects and don't need any special case logic.","Url":"https://github.com/dotnet/corert/pull/7750","RelatedDescription":"Closed or merged PR \"Remove SectionStartNode mechanism\" (#7750)"},{"Id":"486553038","IsPullRequest":true,"CreatedAt":"2019-08-29T00:24:49","Actor":"Dotnet-GitSync-Bot","Number":"7746","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7746","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7746)"},{"Id":"486639383","IsPullRequest":false,"CreatedAt":"2019-08-28T22:28:17","Actor":"cshung","Number":"7749","RawContent":null,"Title":"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.","State":"open","Body":"@trylek pointed out offline that #7748 might be incomplete. In particular, a method marked as MethodImpl.AggressiveInlining might not initially be rooted, but it could be added to the graph as the dependency of another method (e.g. it is being called), so we still end up compiling them.","Url":"https://github.com/dotnet/corert/issues/7749","RelatedDescription":"Open issue \"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.\" (#7749)"},{"Id":"486589868","IsPullRequest":true,"CreatedAt":"2019-08-28T21:46:24","Actor":"cshung","Number":"7748","RawContent":null,"Title":"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization","State":"closed","Body":"Crossgen is currently skipping these methods [here](https://github.com/dotnet/coreclr/blob/f07c13cadc378649f10d024bb8a40a3878fa661f/src/zap/zapinfo.cpp#L448), perhaps we should do the same.\r\n","Url":"https://github.com/dotnet/corert/pull/7748","RelatedDescription":"Closed or merged PR \"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization\" (#7748)"},{"Id":"486564549","IsPullRequest":true,"CreatedAt":"2019-08-28T20:56:23","Actor":"MichalStrehovsky","Number":"7747","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"We'll have to take another update once dotnet/coreclr#26395 merges, but I suspect some more people are going to hit this JitInterface change.","Url":"https://github.com/dotnet/corert/pull/7747","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7747)"},{"Id":"486532435","IsPullRequest":true,"CreatedAt":"2019-08-28T19:41:56","Actor":"trylek","Number":"7745","RawContent":null,"Title":"Minor reliability improvements in SuperILC","State":"closed","Body":"In the Pri1 test file, some of the hung tests ignore KillProcess.\r\nSome time ago I proposed leveraging Mark Russinovich's pskill tool\r\nwhich is known to have better success rate in killing weirdly hung\r\nprocesses thanks to leveraging intimage kernel knowledge by\r\nexplicitly closing various handles and such; Michal and JanK were\r\nhowever not too enthusiastic about making test build depend on\r\nsuch a technically 'external' tool. For now I have at least hotfixed\r\nthe code to drop the Process in question and move on.\r\n\r\nOn top of that, it turns out that my implementation of process\r\nexit signaling using an AutoResetEvent was subject to a race\r\ncondition - as the MSDN page for AutoResetEvent explicitly states,\r\nwhen two threads set such an event close to each other, the master\r\nthread only gets signaled once. I fixed this by calling WaitOne\r\nwith an explicit timeout so that we don't hang the parallel runner\r\nloop due to a lost signal.\r\n\r\nI have also improved ParallelRunner to show the number of failures\r\nas part of the progress message during each build step. The aim is\r\nto improve turnaround when running large test suites - one of\r\nSuperIlc downsides is that the various analytic and statistic\r\nsummaries only get produced at the very end of its execution. The\r\nnumber of failures in the progress message can be used for early\r\nmonitoring as to whether everything proceeds as expected and we're\r\nnot wasting two hours waiting on a completely broken test run.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7745","RelatedDescription":"Closed or merged PR \"Minor reliability improvements in SuperILC\" (#7745)"},{"Id":"486066464","IsPullRequest":true,"CreatedAt":"2019-08-28T14:18:10","Actor":"trylek","Number":"7742","RawContent":null,"Title":"Fix method token resolution for unboxing thunks","State":"closed","Body":"This change fixes the largest compilation failure bucket caused by\r\nJIT passing 0 as the \"pResolvedToken.token\" to the JIT interface.\r\nThe problem was caused by the fact that, when in release mode we\r\ndevirtualized a method on a value type, we emitted an unboxing thunk\r\nas part of the process. When JIT later called\r\ngetMethodDefFromMethod to get the token for the method, we returned\r\n0 because the method was not properly handling unboxing thunks.\r\n\r\nWhile I was there, I also fixed an imprecision in\r\nDevirtualizationManager I noticed while reviewing Michal's\r\npreparatory change for porting CPAOT code to the CoreCLR repo: in\r\nlarge version bubble mode, we should generally query \"VersionsWith\"\r\nrather than \"Contains\", otherwise we lose perf benefits of\r\ncross-module devirtualization within the large version bubble.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7742","RelatedDescription":"Closed or merged PR \"Fix method token resolution for unboxing thunks\" (#7742)"},{"Id":"486141459","IsPullRequest":true,"CreatedAt":"2019-08-28T12:22:34","Actor":"Dotnet-GitSync-Bot","Number":"7743","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @eerhardt","Url":"https://github.com/dotnet/corert/pull/7743","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7743)"},{"Id":"486317542","IsPullRequest":true,"CreatedAt":"2019-08-28T12:21:42","Actor":"janvorli","Number":"7744","RawContent":null,"Title":"Fix RhpCallFilterFunclet stack alignment on ARM","State":"closed","Body":"The number of registers pushed to the stack in the RhpCallFilterFunclet prolog on ARM made the stack misaligned (it needs to be aligned on 8 bytes), so the filter funclet and its transitive callees all had misaligned stack. While in many cases this doesn't cause issues, there are cases where it can cause runtime failures or crashes. For example, when the exception filter call chain invokes a varargs function with certain combination of parameter sizes when some of the arguments are supposed to be 8 byte aligned.\r\n\r\nThis change fixes the problem by pushing one more register as a padding in the RhpCallFilterFunclet (and popping it in the epilog).","Url":"https://github.com/dotnet/corert/pull/7744","RelatedDescription":"Closed or merged PR \"Fix RhpCallFilterFunclet stack alignment on ARM\" (#7744)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"488881838","IsPullRequest":false,"CreatedAt":"2019-09-04T00:28:05","Actor":"AArnott","Number":"3592","RawContent":null,"Title":"NETSDK1100 blocks building on Linux","State":"open","Body":"I have a test project which multi-targets between net472;netcoreapp2.1;netcoreapp3.0.\r\nOnly when targeting net472 or netcoreapp3.0 does it reference or use any WPF/WinForms types. Nevertheless, I have to set the SDK attribute to `Microsoft.NET.Sdk.WindowsDesktop` for this to work with netcoreapp3.0 at all, AFAIK.\r\n\r\nThis blocks the test project from building the `netcoreapp2.1` target on linux, which blocks me testing my library on Linux.\r\n\r\nHow should I proceed?","Url":"https://github.com/dotnet/sdk/issues/3592","RelatedDescription":"Open issue \"NETSDK1100 blocks building on Linux\" (#3592)"},{"Id":"488843649","IsPullRequest":true,"CreatedAt":"2019-09-03T21:56:44","Actor":"wli3","Number":"3591","RawContent":null,"Title":"Experimental cpp 3 fix restore by skipping package dependency resolution.targets","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3591","RelatedDescription":"Open PR \"Experimental cpp 3 fix restore by skipping package dependency resolution.targets\" (#3591)"},{"Id":"486353347","IsPullRequest":true,"CreatedAt":"2019-09-03T18:55:57","Actor":"v-zbsail","Number":"3583","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3583","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828\" (#3583)"},{"Id":"488505457","IsPullRequest":true,"CreatedAt":"2019-09-03T09:52:42","Actor":"dotnet-maestro[bot]","Number":"3590","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3590","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3590)"},{"Id":"487548540","IsPullRequest":true,"CreatedAt":"2019-09-01T17:55:41","Actor":"johnbeisner","Number":"3589","RawContent":null,"Title":"Remove duplicate FolderPublish capability for SDK projects","State":"closed","Body":"Addresses: https://github.com/dotnet/sdk/issues/2769\r\n\r\nThe 'FolderPublish' capability is now being delivered to Visual Studio via. 'Microsoft.Managed.DesignTime.targets' [ https://github.com/dotnet/project-system/pull/4400 ] and is not required on the SDK command-line; removing 'FolderPublish' from 'Microsoft.NET.Sdk.targets'\r\n\r\nManually tested with Visual Studio 16.3 Preview 2","Url":"https://github.com/dotnet/sdk/pull/3589","RelatedDescription":"Closed or merged PR \"Remove duplicate FolderPublish capability for SDK projects\" (#3589)"},{"Id":"487516926","IsPullRequest":false,"CreatedAt":"2019-08-30T17:22:23","Actor":"Const-me","Number":"3588","RawContent":null,"Title":"MSBuild doesn’t define variables for .NET core?","State":"closed","Body":"Using VS2017 15.9.5, building a class library for .NET core 2.2. Here’s the relevant XML from my .csproj file:\r\n\r\n\t<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t\t<!-- Skipped -->\r\n\t\t</PropertyGroup>\r\n\t\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n\t\t\t<DocumentationFile>$(OutputPath)doc.xml</DocumentationFile>\r\n\t\t</PropertyGroup>\r\n\t\t<ItemGroup>\r\n\t\t\t<Reference Include=\"System\">\r\n\t\t\t\t<HintPath>System</HintPath>\r\n\t\t\t</Reference>\r\n\t\t</ItemGroup>\r\n\t</Project>\r\n\r\nThe setting is used, but the doc.xml is produced in the root of the project instead of $(OutputPath).\r\n\r\nSame XML expression for `<DocumentationFile>` works OK for desktop .NET, i.e. the problem is specific to .NET Core projects.\r\n\r\nTried `$(OutDir)` and `$(qwer123)` got same result. Why $(OutputPath) is not defined? Maybe it has different name?","Url":"https://github.com/dotnet/sdk/issues/3588","RelatedDescription":"Closed issue \"MSBuild doesn’t define variables for .NET core?\" (#3588)"},{"Id":"484269561","IsPullRequest":true,"CreatedAt":"2019-08-29T22:31:21","Actor":"dotnet-bot","Number":"3565","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3565","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3565)"},{"Id":"486766608","IsPullRequest":false,"CreatedAt":"2019-08-29T17:05:04","Actor":"AkosLukacs","Number":"3586","RawContent":null,"Title":"FSharp - Compiler crashes if an anonymous record passed as obj argument","State":"closed","Body":"The FSharp compiler's issue was reported FSharp repo: https://github.com/dotnet/fsharp/issues/6434, and is fixed, and does work with 3.0.100-preview8-013656.\r\nBut doesn't work with SDK 2.2.401, I guess the compiler fix isn't in 2.2.401. Do you plan on releasing new version for 2.2?\r\n\r\nRepro: \r\n> dotnet new console -lang F#\r\n\r\n```fsharp\r\n// Program.fs, stolen from Vasily\r\nlet foo (_: obj) = ()\r\n\r\nlet bar() = foo {| F = 1 |}\r\n\r\n[<EntryPoint>]\r\nlet main argv =\r\n    bar()\r\n    0\r\n```\r\n\r\n> dotnet run\r\n\r\n# 2.2.401\r\nFails `error FS0192 : internal error : the anonymous record <>f__AnonymousType951611317`1' has not been generated in the pre-phase of generating this module`\r\n - Failed before I installed v3 preview\r\n - Did work after installing v3 preview\r\n - Failed to compile again after creating global.json and setting sdk version to 2.2.401\r\n\r\n# 3.0.100-preview8-013656\r\nWorks as expected\r\n","Url":"https://github.com/dotnet/sdk/issues/3586","RelatedDescription":"Closed issue \"FSharp - Compiler crashes if an anonymous record passed as obj argument\" (#3586)"},{"Id":"486811709","IsPullRequest":false,"CreatedAt":"2019-08-29T08:24:33","Actor":"PDostalek","Number":"3587","RawContent":null,"Title":"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nNETSDK1111: Failed to delete output apphost: {0}\r\n\r\nFile Name:\r\nTasks\\Common\\Resources\\xlf\\Strings.xlf\r\n\r\n==========================================\r\nQuery:\r\nWould you please confirm if \"apphost\" can be translated? \r\nWhat does the placeholder {0} in this string imply?","Url":"https://github.com/dotnet/sdk/issues/3587","RelatedDescription":"Open issue \"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"\" (#3587)"},{"Id":"486639844","IsPullRequest":false,"CreatedAt":"2019-08-28T22:29:49","Actor":"olgaark","Number":"3585","RawContent":null,"Title":"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects","State":"open","Body":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Open issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585)"},{"Id":"486583658","IsPullRequest":true,"CreatedAt":"2019-08-28T20:07:53","Actor":"dsplaisted","Number":"3584","RawContent":null,"Title":"Fix symbols for tasks","State":"open","Body":"Create PDBs for tasks and put them in the directory where Arcade will upload them\r\n\r\nFixes #3581","Url":"https://github.com/dotnet/sdk/pull/3584","RelatedDescription":"Open PR \"Fix symbols for tasks\" (#3584)"},{"Id":"486095529","IsPullRequest":false,"CreatedAt":"2019-08-28T00:12:21","Actor":"dsplaisted","Number":"3582","RawContent":null,"Title":"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run","State":"open","Body":"# Repro\r\n\r\nBuild and run the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n# Expected\r\n\r\nProject runs successfully\r\n\r\n# Actual\r\n\r\nProject fails to run with error messages such as the following:\r\n\r\n- > A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0-preview9.19416.11'.\r\n- > The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview9-19409-16' was not found.\r\n\r\nThe output folder also includes the following files, which come from the Microsoft.NETCore.App 2.0.0 package closure:\r\n\r\n- apphost.exe\r\n- hostfxr.dll\r\n- hostpolicy.dll\r\n- System.Private.CoreLib.dll\r\n\r\n# Details\r\n\r\nNuGet/Home#7344 would fix this.  Alternatively, we could try to use conflict resolution to exclude these extra assets.  That would probably require updating the platform manifest in the targeting pack.","Url":"https://github.com/dotnet/sdk/issues/3582","RelatedDescription":"Open issue \"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run\" (#3582)"},{"Id":"485985392","IsPullRequest":false,"CreatedAt":"2019-08-27T19:14:13","Actor":"livarcocc","Number":"3581","RawContent":null,"Title":"symbols packages being generated empty","State":"open","Body":"We have turned off symbols package generation for now on this repo.\r\n\r\nThey were generating empty nupkgs and conflicting with the actual nupkgs when the sign tool was repackaging signing assemblies.\r\n\r\nThe fact that symbols are empty here are causing symbol checks to fail on VS insertions.","Url":"https://github.com/dotnet/sdk/issues/3581","RelatedDescription":"Open issue \"symbols packages being generated empty\" (#3581)"},{"Id":"485513070","IsPullRequest":true,"CreatedAt":"2019-08-27T00:17:39","Actor":"JohnTortugo","Number":"3580","RawContent":null,"Title":"Disable symbol creation for now","State":"closed","Body":"The symbol packages getting created were causing conflicts in SignToolTask. Disabling the symbol creation until the proper adjustments are made to prevent inadvertently signing symbol packages.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3580","RelatedDescription":"Closed or merged PR \"Disable symbol creation for now\" (#3580)"},{"Id":"485478158","IsPullRequest":true,"CreatedAt":"2019-08-26T23:35:07","Actor":"JohnTortugo","Number":"3579","RawContent":null,"Title":"Use SignTool with more logging","State":"closed","Body":"This new SignTool will show more information about what's repacking\r\n\r\nRelates to: https://github.com/dotnet/core-eng/issues/7569","Url":"https://github.com/dotnet/sdk/pull/3579","RelatedDescription":"Closed or merged PR \"Use SignTool with more logging\" (#3579)"},{"Id":"485304558","IsPullRequest":true,"CreatedAt":"2019-08-26T15:47:11","Actor":"mmitche","Number":"3578","RawContent":null,"Title":"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …","State":"closed","Body":"…(#3569)","Url":"https://github.com/dotnet/sdk/pull/3578","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …\" (#3578)"},{"Id":"484653224","IsPullRequest":true,"CreatedAt":"2019-08-26T15:42:10","Actor":"riarenas","Number":"3569","RawContent":null,"Title":"Pass PublishUsingPipelines parameter to publish-build-assets template","State":"closed","Body":"**Description**\r\n\r\nhttps://github.com/dotnet/core-eng/issues/7561\r\nWithout the property, the build gets its channel assigned as soon as it publishes to BAR, and may trigger dependency updates before the packages are available in the feeds.\r\n\r\nInternal test build of the change: https://dev.azure.com/dnceng/internal/_build/results?buildId=322295&view=results\r\n\r\n\r\n**Customer Impact**\r\nInfra-structure change.\r\n\r\n**Regression?**\r\nNo.\r\n\r\n**Risk**\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3569","RelatedDescription":"Closed or merged PR \"Pass PublishUsingPipelines parameter to publish-build-assets template\" (#3569)"},{"Id":"485211681","IsPullRequest":true,"CreatedAt":"2019-08-26T12:30:48","Actor":"dotnet-maestro[bot]","Number":"3577","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.09\r\n- **Date Produced**: 8/30/2019 11:34 PM\r\n- **Commit**: 44e933b12f176895fae723d1f03c8424070880fc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19430-09\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3577","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3577)"},{"Id":"484749883","IsPullRequest":true,"CreatedAt":"2019-08-24T01:01:14","Actor":"dotnet-maestro[bot]","Number":"3576","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.09\r\n- **Date Produced**: 8/23/2019 8:02 PM\r\n- **Commit**: 2be172345a420387413bab7ce9053a52624c4461\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19423-09\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3576","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3576)"},{"Id":"484701489","IsPullRequest":true,"CreatedAt":"2019-08-23T23:20:56","Actor":"wli3","Number":"3572","RawContent":null,"Title":"Correct branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3572","RelatedDescription":"Closed or merged PR \"Correct branding\" (#3572)"},{"Id":"484742881","IsPullRequest":true,"CreatedAt":"2019-08-23T23:03:41","Actor":"livarcocc","Number":"3575","RawContent":null,"Title":"Skip tests in official builds. We have no reason to run them again si…","State":"open","Body":"…nce they already ran on CI. This should speed up builds out of the sdk repo.","Url":"https://github.com/dotnet/sdk/pull/3575","RelatedDescription":"Open PR \"Skip tests in official builds. We have no reason to run them again si…\" (#3575)"},{"Id":"484739215","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:47","Actor":"dsplaisted","Number":"3574","RawContent":null,"Title":"Update a test to skip running for target frameworks not supported by current OS","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3574","RelatedDescription":"Open PR \"Update a test to skip running for target frameworks not supported by current OS\" (#3574)"},{"Id":"484673467","IsPullRequest":true,"CreatedAt":"2019-08-23T22:14:39","Actor":"JohnTortugo","Number":"3570","RawContent":null,"Title":"Don't validate signature for resources files","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/7569\r\n\r\nIndependent of the outcome of the current signing issues I believe these files aren't required to be signed.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3570","RelatedDescription":"Closed or merged PR \"Don't validate signature for resources files\" (#3570)"},{"Id":"484721294","IsPullRequest":true,"CreatedAt":"2019-08-23T22:01:01","Actor":"dsplaisted","Number":"3573","RawContent":null,"Title":"Always gather logs","State":"closed","Body":"Even if build succeeded, so we can debug things like signing failures.","Url":"https://github.com/dotnet/sdk/pull/3573","RelatedDescription":"Closed or merged PR \"Always gather logs\" (#3573)"},{"Id":"484693602","IsPullRequest":true,"CreatedAt":"2019-08-23T21:54:37","Actor":"dotnet-maestro[bot]","Number":"3571","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c23412-2e21-4d69-a886-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.0.6192\r\n- **Date Produced**: 8/23/2019 7:15 PM\r\n- **Commit**: bb60d6720d24890b8f3e071e70d27ea0f2bef57e\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.0-rtm.6192\r\n\r\n[marker]: <> (End:67c23412-2e21-4d69-a886-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3571","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client\" (#3571)"},{"Id":"484345588","IsPullRequest":false,"CreatedAt":"2019-08-23T17:03:32","Actor":"Sodoshi","Number":"3568","RawContent":null,"Title":"Using aspnetcore3.0 in WindowsDesktop SDK","State":"closed","Body":"Because of the changes to the HostBuilder in aspnetcore3 I want to update my embedded Kestrel, but if I switch to the WindowsDesktop SDK its not available, only aspnetcore 2.2. Is there any way to reference aspnetcore 3? (I'm using Kestrel as a TCP server in my Windows forms app)","Url":"https://github.com/dotnet/sdk/issues/3568","RelatedDescription":"Closed issue \"Using aspnetcore3.0 in WindowsDesktop SDK\" (#3568)"},{"Id":"484269593","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:18","Actor":"dotnet-bot","Number":"3567","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3567","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3567)"},{"Id":"484269575","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:11","Actor":"dotnet-bot","Number":"3566","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3566","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3566)"},{"Id":"484269532","IsPullRequest":true,"CreatedAt":"2019-08-23T00:05:56","Actor":"dotnet-bot","Number":"3564","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3564","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#3564)"},{"Id":"484159126","IsPullRequest":false,"CreatedAt":"2019-08-22T19:00:07","Actor":"kapilepatel","Number":"3563","RawContent":null,"Title":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13","State":"open","Body":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\r\n\r\nSolved the issue by uninstalling all .NET Core versions and fresh install of .NET Core SDK Version 2.2.107\r\nFind all versions here\r\nhttps://dotnet.microsoft.com/download/dotnet-core/2.2","Url":"https://github.com/dotnet/sdk/issues/3563","RelatedDescription":"Open issue \".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\" (#3563)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1169016977245032449","CreatedAt":"2019-09-03T22:39:01+00:00","UserScreenname":"dotnet","Text":"Do you care about performance or low-level stuff like SIMD and popcnt? Then this post is for you. https://t.co/rIpKfNwSeu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":20,"RawContent":null},{"Id":"1168996825828855810","CreatedAt":"2019-09-03T21:18:56+00:00","UserScreenname":"dotnet","Text":".@BethMassi get's us revved up and raring to go in the latest .NET Blog post that gives us a #dotNETConf conference… https://t.co/78ndo1xgQJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":15,"FavoriteCount":8,"RawContent":null},{"Id":"1168980895031812096","CreatedAt":"2019-09-03T20:15:38+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is coming to a town near you...\n\nWe're not only streaming live, but we're partnering with organizers ar… https://t.co/iON1XQF7Oo","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":317,"FavoriteCount":65,"RawContent":null},{"Id":"1167169777414168576","CreatedAt":"2019-08-29T20:18:54+00:00","UserScreenname":"dotnet","Text":".NET Conference 2019\nDiscover The World Of .NET\nSeptember 23-25\nhttps://t.co/FkW2WpZcMn https://t.co/6bQPcWJFdj","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":424,"FavoriteCount":140,"RawContent":null},{"Id":"1166751382612787201","CreatedAt":"2019-08-28T16:36:21+00:00","UserScreenname":"dotnet","Text":"How the .NET Team uses @AzureDevOps Pipelines to produce @docker Images https://t.co/SXvj2qewdE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":126,"FavoriteCount":58,"RawContent":null},{"Id":"1166709015444959233","CreatedAt":"2019-08-28T13:48:00+00:00","UserScreenname":"dotnet","Text":"With the release of .NET Core 3 on the way, we've been putting together tons of great content to get you ready.\n\nCh… https://t.co/SkVCaSDA1b","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":325,"FavoriteCount":147,"RawContent":null},{"Id":"1166481079546478592","CreatedAt":"2019-08-27T22:42:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":0,"RawContent":null},{"Id":"1164890935089668099","CreatedAt":"2019-08-23T13:23:36+00:00","UserScreenname":"dotnet","Text":"#OnDotnet @briacht joins @runfaster2000 to talk about training models with ML .NET, AutoML, the ML .NET CLI, and mo… https://t.co/DMmb5OFxUx","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2019-09-04T05:30:37.4566742Z","RunDurationInMilliseconds":14766}