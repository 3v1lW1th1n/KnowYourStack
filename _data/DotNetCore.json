{"Data":{"Blog":{"FeedItems":[{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"With .NET Core 3.0 Preview 6 out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null},{"Title":"Try the new System.Text.Json APIs","PublishedOn":"2019-06-13T17:39:05+00:00","CommentsCount":43,"FacebookCount":0,"Summary":"For .NET Core 3.0, we&#8217;re shipping a brand new namespace called System.Text.Json with support for a reader/writer, a document object model (DOM), and a serializer. In this blog post, I&#8217;m...","Href":"https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"},{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9989095762","Type":"IssuesEvent","CreatedAt":"2019-07-11T04:42:16","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25635","RelatedDescription":"Closed issue \"Performance regression on String.Equals\" (#25635) at dotnet/coreclr","RelatedBody":"While .NET Core is faster if the string matches, it's much slower than .NET Framework if not. It doesn't matter if Equals or == is used. See below:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview7-012593\r\n  [Host] : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n  Clr    : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3815.0\r\n  Core   : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n```\r\n\r\n\r\n|  Method |  Job | Runtime |      Mean |     Error |    StdDev |    Median | Rank | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------- |----- |-------- |----------:|----------:|----------:|----------:|-----:|------:|------:|------:|----------:|\r\n|   Match |  Clr |     Clr | 1.5775 ns | 0.0641 ns | 0.0629 ns | 1.5568 ns |    2 |     - |     - |     - |         - |\r\n| NoMatch |  Clr |     Clr | **3.6239 ns** | 0.1036 ns | 0.1108 ns | 3.6961 ns |    3 |     - |     - |     - |         - |\r\n|   Match | Core |    Core | 0.7763 ns | 0.0489 ns | 0.0502 ns | 0.7364 ns |    1 |     - |     - |     - |         - |\r\n| NoMatch | Core |    Core | **5.4398 ns** | 0.0852 ns | 0.0755 ns | 5.4599 ns |    4 |     - |     - |     - |         - |\r\n\r\nBenchmark:\r\n```\r\n[ClrJob]\r\n[CoreJob]\r\n[MemoryDiagnoser]\r\n[RPlotExporter, RankColumn]\r\npublic class StringTest\r\n{\r\n    string One = \"sguiosdgsuodg\";\r\n    string Two = \"sguiosdgsuodg\";\r\n    string Three = \"ugitfgnhfihnf\";\r\n\r\n    [Benchmark]\r\n    public bool Match()\r\n    {\r\n        return One.Equals(Two);\r\n    }\r\n    [Benchmark]\r\n    public bool NoMatch()\r\n    {\r\n        return One.Equals(Three);\r\n    }\r\n\r\n}\r\n```"},{"Id":"9988860846","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:33:59","Actor":"VSadov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25622","RelatedDescription":"Merged pull request \"refresh GC reliability tests\" (#25622) at dotnet/coreclr","RelatedBody":"Mostly just making the test runnable manually on nonwindows platforms.\r\n\r\nRunning via automation will come later."},{"Id":"9988786674","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:15:10","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25640","RelatedDescription":"Opened pull request \"Remove stale nullable !s and pragmas\" (#25640) at dotnet/coreclr","RelatedBody":"Also update TODO-NULLABLE comments to be more specific where appropriate.\r\n\r\ncc: @dotnet/nullablefc "},{"Id":"9988342467","Type":"PullRequestEvent","CreatedAt":"2019-07-11T01:20:11","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25639","RelatedDescription":"Closed pull request \"String.Equals check first char for inequality\" (#25639) at dotnet/coreclr","RelatedBody":"prior to moving into vectorized check\r\n\r\nResolves https://github.com/dotnet/coreclr/issues/25635\r\n\r\n/cc @jkotas @stephentoub "},{"Id":"9987854604","Type":"PullRequestEvent","CreatedAt":"2019-07-10T23:12:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25633","RelatedDescription":"Merged pull request \"Add AggressiveInlining to Single.GetHashCode\" (#25633) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/25632\r\ncc: @billwert"},{"Id":"9987854592","Type":"IssuesEvent","CreatedAt":"2019-07-10T23:12:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25632","RelatedDescription":"Closed issue \"Single.GetHashCode should be marked AgressiveInlining\" (#25632) at dotnet/coreclr","RelatedBody":"A change (dotnet/coreclr#18645) affected the inlining decision for `Single.GetHashCode`. `Double.GetHashCode` is marked `AgressiveInlining`, and so should `Single`.\r\n\r\nThis surfaces as a perf regression in one of our tests for `Vector2` and `Vector3`.\r\n\r\n|               Method |     Toolchain |     Mean |\r\n|--------------------- |-------------- |---------:|\r\n| GetHashCodeBenchmark | netcoreapp2.2 | 2.336 ns |\r\n| GetHashCodeBenchmark | netcoreapp3.0 | 4.509 ns |"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9989185060","Type":"PullRequestEvent","CreatedAt":"2019-07-11T05:08:01","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11829","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11829) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.11\r\n- **Date Produced**: 7/11/2019 4:22 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9989030737","Type":"PullRequestEvent","CreatedAt":"2019-07-11T04:22:41","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11829","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11829) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.11\r\n- **Date Produced**: 7/11/2019 4:22 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9989020817","Type":"PullRequestEvent","CreatedAt":"2019-07-11T04:19:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11828","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11828) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 3:48 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n"},{"Id":"9988523194","Type":"PullRequestEvent","CreatedAt":"2019-07-11T02:08:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11828","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11828) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.09\r\n- **Date Produced**: 7/11/2019 2:07 AM\r\n- **Commit**: 8a169a4c4eabd25ff8d009613d9f83f8b4d13248\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-09\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9988131368","Type":"PullRequestEvent","CreatedAt":"2019-07-11T00:22:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11815","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11815) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.07\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: f072f68e17667211c07ffe3247ac529cd720d77f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9988778124","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:12:52","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1327","RelatedDescription":"Closed pull request \"Add feeds from Versions.props to NuGet.config\" (#1327) at dotnet/standard","RelatedBody":"We need all restore sources to be located in NuGet.config since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)"},{"Id":"9988777582","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:12:43","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1328","RelatedDescription":"Merged pull request \" Remove myget dotnet-core feed from restore sources in Versions.props\" (#1328) at dotnet/standard","RelatedBody":"It isn't needed as we can restore everything from dotnetfeed.\r\n\r\nCC @ericstj @riarenas "},{"Id":"9988673929","Type":"IssuesEvent","CreatedAt":"2019-07-11T02:46:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1330","RelatedDescription":"Opened issue \"Clarify .NET Standard 2.1 platform support\" (#1330) at dotnet/standard","RelatedBody":"The current .NET Standard 2.1 platform support is listed as follows:\r\n\r\n\r\n|<div align=\"left\">.NET Standard</div>|             2.1 |\r\n|:-------------------------------------|------------------:|\r\n|.NET Core                             | **3.0**           |\r\n|.NET Framework                        | *N/A<sup>2</sup>* |\r\n|Mono                                  | **6.2**           |\r\n|Xamarin.iOS                           | **12.12**         |\r\n|Xamarin.Mac                           | **5.12**          |\r\n|Xamarin.Android                       | **9.3**           |\r\n|Unity                                 | *TBD*             |\r\n|Universal Windows Platform            | *TBD*             |\r\n\r\n@akoeplinger Are these the correct versions for Mono/Xamarin?\r\n\r\n@joshpeterson Do you already know the version of Unity that will support .NET Standard 2.1?\r\n\r\n/cc @dotnet/nsboard "},{"Id":"9987926832","Type":"PullRequestEvent","CreatedAt":"2019-07-10T23:30:07","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1329","RelatedDescription":"Opened pull request \"Add RefEmit nullability annotations to baseline\" (#1329) at dotnet/standard","RelatedBody":"CC @terrajobst @safern \r\n\r\nThese pop up when building locally, due to the added annotations in the ref: https://github.com/dotnet/corefx/commit/d688b187115d70ecd6df79a9cb9a04e46b1b00e1#diff-b17852d6d680ddb1418099b32839155c"},{"Id":"9987907019","Type":"PullRequestEvent","CreatedAt":"2019-07-10T23:25:14","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1328","RelatedDescription":"Opened pull request \" Remove myget dotnet-core feed from restore sources in Versions.props\" (#1328) at dotnet/standard","RelatedBody":"It isn't needed as we can restore everything from dotnetfeed.\r\n\r\nCC @ericstj @riarenas "},{"Id":"9987251370","Type":"PullRequestEvent","CreatedAt":"2019-07-10T21:13:28","Actor":"riarenas","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1327","RelatedDescription":"Opened pull request \"Add feeds from Versions.props to NuGet.config\" (#1327) at dotnet/standard","RelatedBody":"We need all restore sources to be located in NuGet.config since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)"},{"Id":"9987189814","Type":"PullRequestEvent","CreatedAt":"2019-07-10T21:03:22","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1326","RelatedDescription":"Opened pull request \"Expose AesCcm and AesGcm\" (#1326) at dotnet/standard","RelatedBody":"Fixes #1295.\r\n\r\n/cc @alecgn"},{"Id":"9987133962","Type":"PullRequestEvent","CreatedAt":"2019-07-10T20:54:59","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1308","RelatedDescription":"Merged pull request \"Expose new event counters\" (#1308) at dotnet/standard","RelatedBody":"As requested offline:\r\n\r\n> While the EventCounter API is a part of .NET Standard 2.1 (and was present in .NET Standard 2.0), the new variants of the EventCounter class (PollingCounter, IncrementingEventCounter, and IncrementingPollingCounter) that were introduced in https://github.com/dotnet/corefx/issues/36129 are all not a part of .NET Standard 2.1.\r\n\r\nThis PR closes that gap.\r\n\r\n/cc @JamesNK @tommcdon @noahfalk @sywhang @shirhatti @JunTaoLuo"},{"Id":"9987132059","Type":"PullRequestEvent","CreatedAt":"2019-07-10T20:54:41","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1323","RelatedDescription":"Merged pull request \"Fix \"compat shim\" link in FAQ\" (#1323) at dotnet/standard","RelatedBody":""},{"Id":"9983723889","Type":"PullRequestEvent","CreatedAt":"2019-07-10T13:04:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1325","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1325) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 11:55 AM\r\n- **Commit**: dcf1c8f51bcdbd79e08cc672e327d50612690a25\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9988938924","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:55:23","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39375","RelatedDescription":"Merged pull request \"Disable GCNotificationTests test\" (#39375) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/39374"},{"Id":"9988932742","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:53:42","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39376","RelatedDescription":"Opened pull request \"Remove stale nullable !s and pragmas\" (#39376) at dotnet/corefx","RelatedBody":"Also update TODO-NULLABLE comments to be more specific where appropriate.\r\n\r\ncc: @dotnet/nullablefc "},{"Id":"9988851424","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:31:32","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39352","RelatedDescription":"Merged pull request \"Exclude built-in HttpContent types from duplex with SocketsHttpHandler's HTTP/2\" (#39352) at dotnet/corefx","RelatedBody":"For 3.0:\r\n- Adds an internal virtual AllowDuplex to HttpContent that defaults to true\r\n- Override that on all of our HttpContent-derived types to return false\r\n- SocketsHttpHandler's HTTP/2 implementation checks that, and if it returns false, awaits the sending of the request body as part of SendAsync.\r\n\r\nPost-3.0, we'll revisit, likely with public surface area.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/38559 (\"fixes\" it for 3.0)\r\ncc: @geoffkizer, @dotnet/ncl "},{"Id":"9988843216","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:29:31","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39311","RelatedDescription":"Merged pull request \"Add timer firing test for very long timers\" (#39311) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/25604"},{"Id":"9988815439","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:22:26","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39375","RelatedDescription":"Opened pull request \"Disable GCNotificationTests test\" (#39375) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/39374"},{"Id":"9988808099","Type":"IssuesEvent","CreatedAt":"2019-07-11T03:20:32","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39374","RelatedDescription":"Opened issue \"GCNotificationTests outerloop tests consistently failing on all platforms\" (#39374) at dotnet/corefx","RelatedBody":"\r\n![image](https://user-images.githubusercontent.com/2642209/61019724-2f2eca80-a369-11e9-9da3-6c3b429567ca.png)\r\n\r\ne.g.\r\n```\r\nUnhandled Exception of Type Microsoft.DotNet.RemoteExecutor.RemoteExecutionException\r\nMessage :\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\nStack Trace :\r\n\r\nChild exception:\r\n  Xunit.Sdk.TrueException: (False, -1) Error - WaitForFullGCApproach result not Cancelled\r\nExpected: True\r\nActual:   False\r\n   at System.Tests.GCExtendedTests.TestWait(Boolean approach, Int32 timeout) in /_/src/System.Runtime/tests/System/GCTests.cs:line 781\r\n   at System.Tests.GCExtendedTests.<>c.<GCNotificationTests>b__4_0(String approachString, String timeoutString) in /_/src/System.Runtime/tests/System/GCTests.cs:line 506\r\n\r\nChild process:\r\n  System.Runtime.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.Tests.GCExtendedTests+<>c Int32 <GCNotificationTests>b__4_0(System.String, System.String)\r\n\r\nChild arguments:\r\n  False, -1\r\n```\r\nhttps://github.com/dotnet/corefx/blob/b8a7f34e1b64e5c594f591aa8683f34506eb9736/src/System.Runtime/tests/System/GCTests.cs#L500\r\n\r\ncc: @Maoni0, @andy-ms "},{"Id":"9988691980","Type":"IssuesEvent","CreatedAt":"2019-07-11T02:50:57","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/39366","RelatedDescription":"Closed issue \"How to detect linux distribution name/version when in WSL?\" (#39366) at dotnet/corefx","RelatedBody":"Over at https://github.com/aspnet/HttpRepl, there's [some code](https://github.com/aspnet/HttpRepl/blob/13bd26c3c91407dc835a463bea496fc160d42fb9/src/Microsoft.Repl/Input/InputManager.cs#L122) that does detection of linux distro in order to decide if some STTY settings need to be changed. \r\n\r\nThis works fine on normal installs of Ubuntu, but in Ubuntu 18.04 on WSL2, the call to `RuntimeInformation.OSDescription` returns the following:\r\n\r\n> \"Linux 4.19.43-microsoft-standard #1 SMP Mon May 20 19:35:22 UTC 2019\"\r\n\r\nIs there a way to get the distribution name/version from .NET Core in this scenario? Or should we resort to something like piping the output of `lsb_release -a`?"},{"Id":"9988554170","Type":"PullRequestEvent","CreatedAt":"2019-07-11T02:16:04","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39001","RelatedDescription":"Merged pull request \"Add support for types derived from supported BCL collections\" (#39001) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/38767.\r\nFixes https://github.com/dotnet/corefx/issues/38521.\r\n\r\nSupported in this PR: user-defined types that implement [natively supported collections](https://github.com/dotnet/corefx/issues/36643) that have \"add\" methods e.g. `IList<T>`, `Queue<T>`, `IDictionary`, `IList` e tc.\r\n\r\nNot supported in this PR: user-defined types that implement natively supported collections that don't have \"add\" methods e.g. `IEnumerable<T>`, `ICollection`, `IReadOnyList<T>` and immutable collections."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9988914256","Type":"PullRequestEvent","CreatedAt":"2019-07-11T03:48:34","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37140","RelatedDescription":"Opened pull request \"[WIP] Less SymbolKey allocations.\" (#37140) at dotnet/roslyn","RelatedBody":""},{"Id":"9988713480","Type":"PullRequestEvent","CreatedAt":"2019-07-11T02:56:20","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37139","RelatedDescription":"Opened pull request \"Add error for multiple null suppressions\" (#37139) at dotnet/roslyn","RelatedBody":"Fixes #37111"},{"Id":"9988703193","Type":"IssuesEvent","CreatedAt":"2019-07-11T02:53:48","Actor":"stephentoub","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37138","RelatedDescription":"Opened issue \"Unexpected uninitialized warning on [AllowNull] field\" (#37138) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n3.3.0-beta1-19354-02+c82dbc6503182784647003a4fce50ef56d680037\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\n\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n}\r\n\r\nclass C<T>\r\n{\r\n    [AllowNull] public T Value;\r\n\r\n    public C() { }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warning.\r\n\r\n**Actual Behavior**:\r\nProduces a warning \"Non-nullable field 'Value' is uninitialized.  But adding `= default` on `Value` suppresses that warning.  These are semantically equivalent, so it's odd that there's a warning without the `= default`."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9986465932","Type":"PullRequestEvent","CreatedAt":"2019-07-10T19:10:17","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7604","RelatedDescription":"Merged pull request \"Add CPAOT - Crossgen executable size comparison to SuperIlc\" (#7604) at dotnet/corert","RelatedBody":"During investigation of the remaining bug buckets I noticed a test\r\napp that was about 3 times longer when compiled with CPAOT than\r\nwith Crossgen (on top of the fact that it was malfunctioning).\r\nI am working on a separate change to fix the size regression;\r\nin this change I'm adding monitoring of executable size comparisons\r\nto SuperIlc to help me monitor size comparisons on a regular basis.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9981166512","Type":"PullRequestEvent","CreatedAt":"2019-07-10T06:41:35","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7590","RelatedDescription":"Merged pull request \"Miscellaneous CPAOT fixes for several Pri# bug buckets\" (#7590) at dotnet/corert","RelatedBody":"1) We were missing support for structs with explicit layout. I have\r\nadded the appropriate logic.\r\n\r\n2) Nullable is not blittable (however it is managed sequential if\r\nits instantiation type is managed sequential).\r\n\r\n3) Structs with explicit layout aren't managed sequential.\r\n\r\n4) We were putting the cctor trigger helper into the wrong import\r\ntable - DispatchImports emits GC ref map and cctor trigger doesn't\r\nneed one because it's not a method call helper. This was crashing\r\nR2RDump when trying to disassemble some R2R executables.\r\n\r\n5) I have added two unit tests to the R2R unit test suite by\r\nadapting two CoreCLR tests that were crashing in interesting ways\r\nwhen manipulating explicit layouts and nullables.\r\n\r\n6) Instantiated type signature encoding was incorrect in large\r\nversion bubble case. As JanV described earlier, the context for\r\nencoding of the instantiation type parameters is the outer context,\r\nnot the generic type context.\r\n\r\n7) Always emit all import tables even when they are empty, otherwise\r\nthe fixup encoding gets out of sync as it refers to import table\r\nindices.\r\n\r\n8) When SuperIlc calls R2RDump in the large version bubble mode, it\r\nneeds to pass CORE_ROOT as the \"reference path\" parameter so that\r\nR2RDump can resolve framework assembly references.\r\n\r\n9) Field encoding was doing an unnecessarily strong check - replaced\r\nContainsType with VersionsWithType.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9979639897","Type":"PullRequestEvent","CreatedAt":"2019-07-09T23:45:37","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7606","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7606) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9979629386","Type":"PullRequestEvent","CreatedAt":"2019-07-09T23:42:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7602","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7602) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @andy-ms"},{"Id":"9979016235","Type":"IssuesEvent","CreatedAt":"2019-07-09T21:26:26","Actor":"OshoNot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7605","RelatedDescription":"Opened issue \"Build failing when Adding Npgsql\" (#7605) at dotnet/corert","RelatedBody":"Hello,\r\n\r\nI keep getting the same problem when running the HelloWorld Sample with Npgsql.\r\n\r\nRunning `dotnet publish -r linux-x64 -c Release -v d`\r\n\r\nI get this error during the \"Exec\" task of the publish command: \r\n`Task \"Exec\"\r\n         \"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\r\n         Killed\r\n   1:7>/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/build/Microsoft.NETCore.Native.targets(248,5): error MSB3073: The command \"\"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\" exited with code 137. [/DbPrototype/DbPrototype.fsproj]\r\n       Done executing task \"Exec\" -- FAILED.\r\n   1:7>Done building target \"IlcCompile\" in project \"DbPrototype.fsproj\" -- FAILED.\r\n   1:7>Done Building Project \"/DbPrototype/DbPrototype.fsproj\" (Publish target(s)) -- FAILED.`\r\n\r\n\r\nOS: Ubuntu 18.04 (All pre requisites installed based on [Helloworld sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld))\r\n"},{"Id":"9978077096","Type":"PullRequestEvent","CreatedAt":"2019-07-09T18:55:39","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7599","RelatedDescription":"Merged pull request \"ArgIterator hardening to gracefully handle indeterminate return types\" (#7599) at dotnet/corert","RelatedBody":"When analyzing the remaining CPAOT error buckets, I noticed several\r\ntests that were still crashing CPAOT due to indeterminate types\r\nin the ArgIterator. I found out that I had previously only fixed\r\nthe argument types but I overlooked the need to fix the return value\r\nin a similar manner. I have also applied a tiny cleanup that Michal\r\nsuggested earlier - using InstanceFieldSize instead of GetElementSize.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I double-checked the other few callers of TypeHandle.GetSize\r\nand I believe this is the last remaining place that is not protected\r\nby an upfront indeterminate type check and graceful bail-out."},{"Id":"9977870658","Type":"PullRequestEvent","CreatedAt":"2019-07-09T18:23:51","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7604","RelatedDescription":"Opened pull request \"Add CPAOT - Crossgen executable size comparison to SuperIlc\" (#7604) at dotnet/corert","RelatedBody":"During investigation of the remaining bug buckets I noticed a test\r\napp that was about 3 times longer when compiled with CPAOT than\r\nwith Crossgen (on top of the fact that it was malfunctioning).\r\nI am working on a separate change to fix the size regression;\r\nin this change I'm adding monitoring of executable size comparisons\r\nto SuperIlc to help me monitor size comparisons on a regular basis.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9988642824","Type":"PullRequestEvent","CreatedAt":"2019-07-11T02:38:49","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Merged pull request \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108) at dotnet/sdk","RelatedBody":"Fixes #3027"},{"Id":"9988642812","Type":"IssuesEvent","CreatedAt":"2019-07-11T02:38:49","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3027","RelatedDescription":"Closed issue \"Duplicate \"_PackageReferenceToAdd\" item name breaks builds in VS\" (#3027) at dotnet/sdk","RelatedBody":"Looks like this was introduced here:\r\nhttps://github.com/dotnet/sdk/commit/63d7cdec5041a9a97b002b1e81d3d1f835cad871\r\n\r\n`_PackageReferenceToAdd` is used twice.\r\nIt's used in: https://github.com/dotnet/sdk/blob/afae0615d5cbb16c058c5ce1fd65215d07df24d9/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.TargetingPackResolution.targets#L124\r\n\r\nand:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f217153b0a1624a012041a4de375faf76ddfdc07/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L278\r\n\r\nThis is breaking the https://github.com/dotnet/project-system build in VS for me (we have duplicate nuget references)"},{"Id":"9988497281","Type":"IssuesEvent","CreatedAt":"2019-07-11T02:01:43","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3387","RelatedDescription":"Reopened issue \"VB.NET \"My\" not working as expected?\" (#3387) at dotnet/sdk","RelatedBody":"@cston and @KathleenDollard,\r\n\r\nHere is an isolated example running on the most recent bits as far as I can tell (at least with regards to the Microsoft.VisualBasic side of things).\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n    Console.WriteLine(My.Computer.Name)\r\n    Console.WriteLine((New Microsoft.VisualBasic.Devices.ServerComputer).Name)\r\n    Console.WriteLine(System.Environment.MachineName)\r\n  End Sub\r\nEnd Module\r\n\r\nThe first line doesn’t work in .NET Core 3.0; however, the second and third lines do.  Playing with the same code in the full .NET Framework, all three lines work and when you jump to the reference for My.Computer.Name, it goes to Microsoft.VisualBasic.Devices.ServerComputer.Name.  I then jumped back over to the .NET Core source tree and that property simply returns System.Environment.MachineName.  One thing I find interesting about this is it’s not a 1:1 map… how does My.Computer.Name map to a property inside of an instantiated instance of Microsoft.VisualBasic.Devices.ServerComputer?  Some “magic” black-box stuff there?\r\n\r\nSo am I just missing something as far as how to \"light up\" the My side of things when working with a .NET Core 3.0 console project?  Or is there some additional work that still has to be done beyond the work that has taken place within the Microsoft.VisualBasic namespace?\r\n\r\n(BTW, @cston great work thus far!)\r\n\r\nThanks.\r\n\r\nCory Smith"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"466499747","IsPullRequest":false,"CreatedAt":"2019-07-11T04:42:15","Actor":"Symbai","Number":"25635","RawContent":null,"Title":"Performance regression on String.Equals","State":"closed","Body":"While .NET Core is faster if the string matches, it's much slower than .NET Framework if not. It doesn't matter if Equals or == is used. See below:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview7-012593\r\n  [Host] : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n  Clr    : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3815.0\r\n  Core   : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n```\r\n\r\n\r\n|  Method |  Job | Runtime |      Mean |     Error |    StdDev |    Median | Rank | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------- |----- |-------- |----------:|----------:|----------:|----------:|-----:|------:|------:|------:|----------:|\r\n|   Match |  Clr |     Clr | 1.5775 ns | 0.0641 ns | 0.0629 ns | 1.5568 ns |    2 |     - |     - |     - |         - |\r\n| NoMatch |  Clr |     Clr | **3.6239 ns** | 0.1036 ns | 0.1108 ns | 3.6961 ns |    3 |     - |     - |     - |         - |\r\n|   Match | Core |    Core | 0.7763 ns | 0.0489 ns | 0.0502 ns | 0.7364 ns |    1 |     - |     - |     - |         - |\r\n| NoMatch | Core |    Core | **5.4398 ns** | 0.0852 ns | 0.0755 ns | 5.4599 ns |    4 |     - |     - |     - |         - |\r\n\r\nBenchmark:\r\n```\r\n[ClrJob]\r\n[CoreJob]\r\n[MemoryDiagnoser]\r\n[RPlotExporter, RankColumn]\r\npublic class StringTest\r\n{\r\n    string One = \"sguiosdgsuodg\";\r\n    string Two = \"sguiosdgsuodg\";\r\n    string Three = \"ugitfgnhfihnf\";\r\n\r\n    [Benchmark]\r\n    public bool Match()\r\n    {\r\n        return One.Equals(Two);\r\n    }\r\n    [Benchmark]\r\n    public bool NoMatch()\r\n    {\r\n        return One.Equals(Three);\r\n    }\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25635","RelatedDescription":"Closed issue \"Performance regression on String.Equals\" (#25635)"},{"Id":"466032106","IsPullRequest":true,"CreatedAt":"2019-07-11T03:33:58","Actor":"VSadov","Number":"25622","RawContent":null,"Title":"refresh GC reliability tests","State":"closed","Body":"Mostly just making the test runnable manually on nonwindows platforms.\r\n\r\nRunning via automation will come later.","Url":"https://github.com/dotnet/coreclr/pull/25622","RelatedDescription":"Closed or merged PR \"refresh GC reliability tests\" (#25622)"},{"Id":"466636950","IsPullRequest":true,"CreatedAt":"2019-07-11T03:15:09","Actor":"stephentoub","Number":"25640","RawContent":null,"Title":"Remove stale nullable !s and pragmas","State":"open","Body":"Also update TODO-NULLABLE comments to be more specific where appropriate.\r\n\r\ncc: @dotnet/nullablefc ","Url":"https://github.com/dotnet/coreclr/pull/25640","RelatedDescription":"Open PR \"Remove stale nullable !s and pragmas\" (#25640)"},{"Id":"466560058","IsPullRequest":true,"CreatedAt":"2019-07-11T01:20:10","Actor":"benaadams","Number":"25639","RawContent":null,"Title":"String.Equals check first char for inequality","State":"closed","Body":"prior to moving into vectorized check\r\n\r\nResolves https://github.com/dotnet/coreclr/issues/25635\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/25639","RelatedDescription":"Closed or merged PR \"String.Equals check first char for inequality\" (#25639)"},{"Id":"466466803","IsPullRequest":true,"CreatedAt":"2019-07-10T23:12:39","Actor":"stephentoub","Number":"25633","RawContent":null,"Title":"Add AggressiveInlining to Single.GetHashCode","State":"closed","Body":"Fixes https://github.com/dotnet/coreclr/issues/25632\r\ncc: @billwert","Url":"https://github.com/dotnet/coreclr/pull/25633","RelatedDescription":"Closed or merged PR \"Add AggressiveInlining to Single.GetHashCode\" (#25633)"},{"Id":"466459029","IsPullRequest":false,"CreatedAt":"2019-07-10T23:12:39","Actor":"billwert","Number":"25632","RawContent":null,"Title":"Single.GetHashCode should be marked AgressiveInlining","State":"closed","Body":"A change (dotnet/coreclr#18645) affected the inlining decision for `Single.GetHashCode`. `Double.GetHashCode` is marked `AgressiveInlining`, and so should `Single`.\r\n\r\nThis surfaces as a perf regression in one of our tests for `Vector2` and `Vector3`.\r\n\r\n|               Method |     Toolchain |     Mean |\r\n|--------------------- |-------------- |---------:|\r\n| GetHashCodeBenchmark | netcoreapp2.2 | 2.336 ns |\r\n| GetHashCodeBenchmark | netcoreapp3.0 | 4.509 ns |","Url":"https://github.com/dotnet/coreclr/issues/25632","RelatedDescription":"Closed issue \"Single.GetHashCode should be marked AgressiveInlining\" (#25632)"},{"Id":"466528947","IsPullRequest":true,"CreatedAt":"2019-07-10T21:24:28","Actor":"cshung","Number":"25638","RawContent":null,"Title":"[WIP] PerfMap should output file offset instead of RVAs","State":"open","Body":"Fixes #24966\r\n\r\nThere is a mismatch between `perf`, `crossgen` and `PerfView` causing this bug.\r\n\r\n- I believe when `perf script` output a number of a stack frame, it outputs the file offset (*)\r\n- `crossgen` outputs three tuple, `rva`, `size`, `name` of all methods. [Here](https://github.com/dotnet/coreclr/blob/ef2f9f41555c453451a5003f1be4bb9888ab078d/src/vm/perfmap.cpp#L391) is the code that computes the rva.\r\n- PerfView takes the number generated by `perf script` and do a binary search in the `crossgen` output.\r\n\r\nEssentially, PerfView is taking file offsets and comparing it against rva. That is why the lookup fails. Once I change `crossgen` to output file offset as is done in this PR, the lookup is successful.\r\n\r\nThe above is sufficient to understand the change, below is just a record on what I did to 'believe' perf output file offsets.\r\n\r\n(*) Here is my experiment to 'prove' that perf outputs file offset. The prove is in quotes because it is really just a prove by observation.\r\n\r\nThe key problem is that `perf` is output random numbers, in order to diagnose what is going on, I need a way to make `perf` output something known, so I hacked CoreLib and added a method in it that does an infinite loop, and call it in my test, that way I know most of the number outputted in `perf` should correlate to my method.\r\n\r\nI figured a tool `perf report -D` that can dump the raw `perf.data` outputted by the perf tool. There I found a raw IP. Cross-checking with the `perf.data.txt`. I subtracted them to figure out the base address assumed by `perf script` tool that generates the `perf.data.txt`. The base address is page aligned, making me believe it is a true base address.\r\n\r\nThe true base address was a mystery. If I look at the true IP and use the `memory region` command in `lldb`, it is slightly before the page that actually contains the executable code. The executable page base address together with its difference between the executable page is found in the same `perf report` output as an unnamed field on an event related to `mmap`, making me believe `perf` knew that offset and accounts for it.\r\n\r\nTurning on the LOADER tracing in PAL using `export PAL_DBG_CHANNELS=\"+LOADER.all\"`, I  discovered why. We used the `mmap` system call to map a file with an offset [here](https://github.com/dotnet/coreclr/blob/ef2f9f41555c453451a5003f1be4bb9888ab078d/src/pal/src/map/map.cpp#L2164). I believe the `perf` tool noted that and computes the file offset based on that information.\r\n\r\nTo prove it is indeed a file offset, I read the Linux binary as a byte array on a Windows machine, and I successfully disassembled the code at that address, it is indeed the instructions that correspond to my infinite loop method. That concludes my 'prove' that perf indeed output file offsets.","Url":"https://github.com/dotnet/coreclr/pull/25638","RelatedDescription":"Open PR \"[WIP] PerfMap should output file offset instead of RVAs\" (#25638)"},{"Id":"466514623","IsPullRequest":true,"CreatedAt":"2019-07-10T20:52:37","Actor":"sdmaclea","Number":"25637","RawContent":null,"Title":"Add a few #if... FEATURE_EMULATE_SINGLESTEP","State":"open","Body":"When the feature flag was added a few places were missed","Url":"https://github.com/dotnet/coreclr/pull/25637","RelatedDescription":"Open PR \"Add a few #if... FEATURE_EMULATE_SINGLESTEP\" (#25637)"},{"Id":"466510864","IsPullRequest":true,"CreatedAt":"2019-07-10T20:44:18","Actor":"sdmaclea","Number":"25636","RawContent":null,"Title":"Arm64 debug issues","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25636","RelatedDescription":"Open PR \"Arm64 debug issues\" (#25636)"},{"Id":"466481312","IsPullRequest":false,"CreatedAt":"2019-07-10T19:34:55","Actor":"stephentoub","Number":"25634","RawContent":null,"Title":"Missing TplEventSource events prohibiting correlation of work","State":"open","Body":"I've not fully explored history to see when this happened, but we're no longer outputting all of the events generally used to correlate work being scheduled with work executing, in particular around awaits, e.g. AwaitTaskContinuationScheduled.  The situation was made a bit worse by a recent change to how some await continuations were scheduled, which meant that workarounds which sometimes worked now work less often.\r\n\r\nPost 3.0, we should revisit our async tracing story all-up (cc: @noahfalk), but for 3.0 at least we should make sure we have enough events in place to stitch together basic async stacks.","Url":"https://github.com/dotnet/coreclr/issues/25634","RelatedDescription":"Open issue \"Missing TplEventSource events prohibiting correlation of work\" (#25634)"},{"Id":"466446568","IsPullRequest":true,"CreatedAt":"2019-07-10T18:08:09","Actor":"EgorBo","Number":"25631","RawContent":null,"Title":"Remove a small allocation in MethodBase.ToString()","State":"open","Body":"Don't call `base.ToString()` and `Substring` if the type is void (the most popular return type I guess).\r\n\r\n```csharp\r\nMethodInfo method = typeof(Program).GetMethod(\"Main\");\r\nlong a = GC.GetAllocatedBytesForCurrentThread();\r\n\r\nstring str = method.ToString(); // \"Void Main(System.String[])\"\r\n\r\nlong b = GC.GetAllocatedBytesForCurrentThread();\r\nConsole.WriteLine((b - a) + \" bytes\");\r\n```\r\nBefore: `3792 bytes`\r\nAfter: `3592 bytes`\r\n\r\nI know the ToString() for methods is cached so this optimization affects only first calls of methodBase.ToString().\r\n","Url":"https://github.com/dotnet/coreclr/pull/25631","RelatedDescription":"Open PR \"Remove a small allocation in MethodBase.ToString()\" (#25631)"},{"Id":"466431025","IsPullRequest":false,"CreatedAt":"2019-07-10T17:29:16","Actor":"RealDotNetDave","Number":"25630","RawContent":null,"Title":"Trapping Exceptions Performance in .NET Core 3","State":"open","Body":"Below are the benchmark results, using BenchmarkDotnet, I've done with Exception handling that shows that it's slower in .NET Core.\r\n\r\n![image](https://user-images.githubusercontent.com/15676130/60989978-31a70b00-a2fc-11e9-8f34-550d8506a67d.png)\r\n\r\nBelow is the benchmark code:\r\n\r\n  ```\r\n        [Benchmark(Description = \"EXCEPTION TRAPPING: Using Try/Catch.\")]\r\n        public string TestException01()\r\n        {\r\n            try\r\n            {\r\n                ThrowException();\r\n            }\r\n            catch (ArgumentNullException anex)\r\n            {\r\n                return anex.Message;\r\n            }\r\n            catch (ArgumentOutOfRangeException aoorex)\r\n            {\r\n                return aoorex.Message;\r\n            }\r\n\r\n            return InvalidResultMessage;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Tests the exception when clause.\r\n        /// </summary>\r\n        /// <returns>System.String.</returns>\r\n        /// <exception cref=\"ArgumentOutOfRangeException\">Test #2 for trapping exceptions.</exception>\r\n        [Benchmark(Description = \"EXCEPTION TRAPPING: Using When() clause.\")]\r\n        public string TestException02()\r\n        {\r\n            try\r\n            {\r\n                ThrowException();\r\n            }\r\n            catch (Exception ex) when (ex is ArgumentNullException || ex is ArgumentOutOfRangeException)\r\n            {\r\n                return ex.Message;\r\n            }\r\n\r\n            return InvalidResultMessage;\r\n        }\r\n\r\n        private static void ThrowException()\r\n        {\r\n            throw new ArgumentOutOfRangeException(TestTrappingExMessage);\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/25630","RelatedDescription":"Open issue \"Trapping Exceptions Performance in .NET Core 3\" (#25630)"},{"Id":"466417661","IsPullRequest":false,"CreatedAt":"2019-07-10T16:56:04","Actor":"mattleibow","Number":"25629","RawContent":null,"Title":"Native runtime crashes on linux/mac in native delegate","State":"open","Body":"Exceptions in managed code running from a native delegate causes the app to crash - even if the original method is in a try/catch block. It runs fine on Windows with both .NET Core and .NET Framework and macOS/Linux with mono.\r\n\r\n```csharp\r\n// the managed call\r\nstatic void Main() {\r\n    add(a, b, AddImplementation);\r\n}\r\n\r\n// interop code\r\npublic delegate int adder_proc(int a, int b);\r\n\r\n[DllImport(\"libnativelibrary\")]\r\npublic static extern int add(int a, int b, adder_proc adder);\r\n\r\n// the managed callback\r\npublic static int AddImplementation(int a, int b) {\r\n    throw new Exception(\"You asked for an exception, here it is.\");\r\n}\r\n```\r\n\r\nI have created a sample app here: https://github.com/mattleibow/NetCoreExceptionsTest\r\nThe code file is here: https://github.com/mattleibow/NetCoreExceptionsTest/blob/master/source/Program.cs\r\nDevOps CI here: https://dev.azure.com/mattleibow/OpenSource/_build/results?buildId=149\r\n\r\nExpected output:\r\n```\r\n2 + 4 = 6\r\n2 + 4 = You asked for an exception, here it is.\r\n2 + 4 = 6\r\n```\r\n\r\nActual output:\r\n\r\n```\r\n2 + 4 = 6\r\n\r\nUnhandled Exception: System.Exception: You asked for an exception, here it is.\r\n   at managedapp.Program.AddImplementation(Int32 a, Int32 b) in /home/vsts/work/1/s/source/Program.cs:line 48\r\n   at managedapp.Program.add(Int32 a, Int32 b, adder_proc adder)\r\n   at managedapp.Program.Main(String[] args) in /home/vsts/work/1/s/source/Program.cs:line 24\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25629","RelatedDescription":"Open issue \"Native runtime crashes on linux/mac in native delegate\" (#25629)"},{"Id":"466394294","IsPullRequest":true,"CreatedAt":"2019-07-10T16:03:20","Actor":"janvorli","Number":"25628","RawContent":null,"Title":"Fix GS cookie check on ARM in functions with stackalloc","State":"open","Body":"The GS cookie check was failing during GC stack walking on ARM for frames\r\nof functions using stackalloc and pinvoke. The InlinedCallFrame stores\r\nonly the SP after the stackalloc adjustment and unwinder needs R9\r\nthat contains SP before the stackalloc to be able to unwind the frame\r\nto get caller SP. The caller SP is used as a base for getting the GS\r\ncookie address. We were incorrectly setting the R9 in the CONTEXT\r\nto the same value as SP and so the unwinding was getting an incorrect\r\ncaller SP.\r\n\r\nThe fix is to store R9 in the InlinedCallFrame for ARM.\r\n\r\nClose #25483","Url":"https://github.com/dotnet/coreclr/pull/25628","RelatedDescription":"Open PR \"Fix GS cookie check on ARM in functions with stackalloc\" (#25628)"},{"Id":"466340963","IsPullRequest":true,"CreatedAt":"2019-07-10T14:24:57","Actor":"janvorli","Number":"25627","RawContent":null,"Title":"Fix handling of NullReferenceException in VSD on ARM","State":"open","Body":"There was a problem with handling NullReferenceExceptionHandling stemming\r\nfrom virtual dispatch stub on ARM Linux. While the primary exception was\r\nhandled correctly, if the exception was rethrown or another exception\r\nwas thrown from the catch handler, it was reported as unhandled even\r\nthough there was a proper handler.\r\nThe issue was caused by exception unwinding that was unable to unwind past\r\nthe frame of the virtual dispatch stub in this case. Such stub is generated\r\nat runtime and there is no unwind info for it.\r\n\r\nThe fix is to explicitly check for the stub frame and skip it during first\r\nand second pass of exception handling.\r\n\r\nClose #25123","Url":"https://github.com/dotnet/coreclr/pull/25627","RelatedDescription":"Open PR \"Fix handling of NullReferenceException in VSD on ARM\" (#25627)"},{"Id":"466206759","IsPullRequest":true,"CreatedAt":"2019-07-10T09:38:34","Actor":"MichalStrehovsky","Number":"25626","RawContent":null,"Title":"R2RDump: Add support for partially interruptible regions","State":"open","Body":"We were basically missing this block:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/030a3ea9b8dbeae89c90d34441d4d9a1cf4a7de6/src/vm/gcinfodecoder.cpp#L726-L810","Url":"https://github.com/dotnet/coreclr/pull/25626","RelatedDescription":"Open PR \"R2RDump: Add support for partially interruptible regions\" (#25626)"},{"Id":"466108324","IsPullRequest":false,"CreatedAt":"2019-07-10T05:33:59","Actor":"wsq003","Number":"25625","RawContent":null,"Title":"Need a simple tool to get stacktrace of all threads, like jstack in java world","State":"open","Body":"It's painful (even impossible) to get callstack of all threads, which is very useful for diagnosing performance issue.\r\n\r\nWe need a simple tool equivalent to jstack.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/25625","RelatedDescription":"Open issue \"Need a simple tool to get stacktrace of all threads, like jstack in java world\" (#25625)"},{"Id":"466092280","IsPullRequest":true,"CreatedAt":"2019-07-10T04:27:08","Actor":"franksinankaya","Number":"25624","RawContent":null,"Title":"Frkaya/gccfix07102019","State":"open","Body":"@am11  @jkotas @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/25624","RelatedDescription":"Open PR \"Frkaya/gccfix07102019\" (#25624)"},{"Id":"465926948","IsPullRequest":true,"CreatedAt":"2019-07-10T00:18:12","Actor":"stephentoub","Number":"25617","RawContent":null,"Title":"Fix Timer argument exception parameter names","State":"closed","Body":"Noticed this while adding additional code coverage in corefx.\r\ncc: @kouvel, @jkotas","Url":"https://github.com/dotnet/coreclr/pull/25617","RelatedDescription":"Closed or merged PR \"Fix Timer argument exception parameter names\" (#25617)"},{"Id":"466013135","IsPullRequest":false,"CreatedAt":"2019-07-09T23:30:43","Actor":"manor","Number":"25619","RawContent":null,"Title":"Incorrect System.Environment.MachineName on macosx","State":"closed","Body":"The following code:\r\n\r\n```\r\nnamespace WrongName\r\n{\r\n    using System;\r\n    internal static class Program {\r\n        private static void Main(string[] args) {\r\n            Console.WriteLine(\"Computer: \" + System.Environment.MachineName);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith the following csproj:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nreturns:\r\n\r\n```\r\nComputer: JennifersiPhone\r\n```\r\n\r\non a macbook pro that is (obviously) not called \"JennifersiPhone\"...\r\n","Url":"https://github.com/dotnet/coreclr/issues/25619","RelatedDescription":"Closed issue \"Incorrect System.Environment.MachineName on macosx\" (#25619)"},{"Id":"465916296","IsPullRequest":true,"CreatedAt":"2019-07-09T22:41:51","Actor":"wtgodbe","Number":"25616","RawContent":null,"Title":"Update branding to 2.2.7","State":"closed","Body":"CC @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/pull/25616","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.7\" (#25616)"},{"Id":"466013275","IsPullRequest":true,"CreatedAt":"2019-07-09T22:31:28","Actor":"dotnet-maestro-bot","Number":"25620","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/25620","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#25620)"},{"Id":"465916235","IsPullRequest":true,"CreatedAt":"2019-07-09T22:27:40","Actor":"wtgodbe","Number":"25615","RawContent":null,"Title":"Update branding to 2.1.13","State":"closed","Body":"CC @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/pull/25615","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.13\" (#25615)"},{"Id":"465999227","IsPullRequest":true,"CreatedAt":"2019-07-09T21:46:10","Actor":"dotnet-maestro-bot","Number":"25618","RawContent":null,"Title":"Update CoreClr, CoreFx to servicing-27817-01, servicing-27818-01, respectively (release/2.1)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/25618","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to servicing-27817-01, servicing-27818-01, respectively (release/2.1)\" (#25618)"},{"Id":"465759941","IsPullRequest":true,"CreatedAt":"2019-07-09T12:44:39","Actor":"dotnet-maestro[bot]","Number":"25614","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 11:04 AM\r\n- **Commit**: 48c2004e63d2c6e65e8b4694cb3162159fb0c699\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190710.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190710.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25614","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25614)"},{"Id":"465754939","IsPullRequest":true,"CreatedAt":"2019-07-09T12:33:30","Actor":"dotnet-maestro[bot]","Number":"25613","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.01\r\n- **Date Produced**: 7/10/2019 10:14 AM\r\n- **Commit**: 5cd0245860335e0b307f6a46b99c6f9244887318\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-01\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25613","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#25613)"},{"Id":"465752871","IsPullRequest":true,"CreatedAt":"2019-07-09T12:28:48","Actor":"dotnet-maestro[bot]","Number":"25612","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 11:55 AM\r\n- **Commit**: dcf1c8f51bcdbd79e08cc672e327d50612690a25\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19360.1\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview8.19360.1\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25612","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#25612)"},{"Id":"465749500","IsPullRequest":true,"CreatedAt":"2019-07-09T12:21:18","Actor":"dotnet-maestro[bot]","Number":"25611","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19359.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25611","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#25611)"},{"Id":"465730728","IsPullRequest":false,"CreatedAt":"2019-07-09T11:37:45","Actor":"viewizard","Number":"25610","RawContent":null,"Title":"[RyuJIT/ARM32] low performance compared to amd64 investigation (System.Tests.Perf_Char.Char_ToUpper test).","State":"open","Body":"Initial thread was started by @alpencolt https://github.com/dotnet/coreclr/issues/23520\r\nInitial performance test results generated by @alpencolt\r\nhttps://gist.github.com/alpencolt/0580af0be86e49bb9d89508dabcd8615\r\n\r\nI investigate \"System.Tests.Perf_Char.Char_ToUpper\" test performance drop for arm32, compared to amd64. First 3 tests looks fine, but on fourth we have huge performance drop.\r\n```\r\nyield return new object[] { 'A', new CultureInfo(\"en-US\") }; // ASCII upper case\r\nyield return new object[] { 'a', new CultureInfo(\"en-US\") }; // ASCII lower case\r\nyield return new object[] { '\\u0130', new CultureInfo(\"en-US\") }; // non-ASCII, English\r\nyield return new object[] { '\\u4F60', new CultureInfo(\"zh-Hans\") }; // non-ASCII, Chinese\r\n```\r\n```\r\n| Slower                                                                           | diff/base | Base Median (ns) | Diff Median (ns) | Modality  |\r\n| -------------------------------------------------------------------------------- | --------- | ----------------:| ----------------:| ---------- |\r\n| System.Tests.Perf_Char.Char_ToUpper(c: '你', cultureName: zh-Hans)                | 133.18    |            33.79 |          4500.00 |           |\r\n| System.Tests.Perf_Char.Char_ToUpper(c: 'İ', cultureName: en-US)                  | 2.28      |            29.59 |            67.55 |           |\r\n| System.Tests.Perf_Char.Char_ToUpper(c: 'A', cultureName: en-US)                  | 1.86      |             6.46 |            12.00 |           |\r\n| System.Tests.Perf_Char.Char_ToUpper(c: 'a', cultureName: en-US)                  | 1.26      |             6.04 |             7.60 |           |\r\n```\r\nI logged disassembly for both, amd64 and arm32 ([Char_ToUpper_amd.txt](https://github.com/dotnet/coreclr/files/3372196/Char_ToUpper_amd.txt)\r\n[Char_ToUpper_arm.txt](https://github.com/dotnet/coreclr/files/3372197/Char_ToUpper_arm.txt)), but didn't find any issues in asm, that may drop performance so much.\r\n\r\nI find out, that the drop by somehow connected to CultureInfo:\r\n1. If I change CultureInfo in test to \"zh-Hans\"/\"zh\" or even to \"zh-CN\" (zn_CN.UTF8 locale generated in system), test show me performance drop on all (ASCII and non-ASCII) symbols.\r\n2. If I change CultureInfo in test to not existent, say, \"tv-TV\",  all is ok (at least performance drop no so huge, only in 2.2-2.5 times).\r\n3. If I change CultureInfo in test to any non \"zh*\", all is ok (at least performance drop no so huge, only in 2.2-2.5 times).\r\n\r\nOn both (amd64 and arm32) systems installed Ubuntu 16.04 with same libICU version:\r\n```\r\n$ apt-cache policy libicu55\r\nlibicu55:\r\n  Installed: 55.1-7ubuntu0.4\r\n  Candidate: 55.1-7ubuntu0.4\r\n```\r\n\r\nI see, libICU usage in test, but I don't see any CultureInfo-libICU connection in this test related code, all what I see is u_toupper() calls without any initialization during test execution.\r\n\r\nLooks like I am stuck. Could someone route me, please?\r\n","Url":"https://github.com/dotnet/coreclr/issues/25610","RelatedDescription":"Open issue \"[RyuJIT/ARM32] low performance compared to amd64 investigation (System.Tests.Perf_Char.Char_ToUpper test).\" (#25610)"},{"Id":"466049991","IsPullRequest":false,"CreatedAt":"2019-06-28T14:27:31","Actor":"sirjeppe","Number":"25623","RawContent":null,"Title":"Not possible to get the executable path for self-contained executable","State":"open","Body":"When calling Assembly.Get*Assembly().CodeBase for a self-contained .NET Core 3 project, it reports a temporary directory rather than the folder where the executable actually is located.\r\n\r\n```\r\nusing System;\r\nusing System.Reflection;\r\n\r\nnamespace AssemblyReflectionIssue\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            foreach (var file in Assembly.GetEntryAssembly().GetFiles())\r\n            {\r\n                Console.WriteLine(file.Name);\r\n            }\r\n            Console.WriteLine(Assembly.GetCallingAssembly().CodeBase);\r\n            Console.WriteLine(Assembly.GetEntryAssembly().CodeBase);\r\n            Console.WriteLine(Assembly.GetExecutingAssembly().CodeBase);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPut the code above in a project with these settings:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>8.0</LangVersion>\r\n    <Platforms>x64</Platforms>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThen publish the app to e.g. C:\\AssemblyReflectionIssue and launch it. Something like this will be printed:\r\n\r\nC:\\Users\\user\\AppData\\Local\\Temp\\.net\\AssemblyReflectionIssue\\2bn5yvkd.pjb\\AssemblyReflection.dll\r\nfile:///C:/Users/user/AppData/Local/Temp/.net/AssemblyReflectionIssue/2bn5yvkd.pjb/AssemblyReflection.dll\r\nfile:///C:/Users/user/AppData/Local/Temp/.net/AssemblyReflectionIssue/2bn5yvkd.pjb/AssemblyReflection.dll\r\nfile:///C:/Users/user/AppData/Local/Temp/.net/AssemblyReflectionIssue/2bn5yvkd.pjb/AssemblyReflection.dll\r\n\r\nI would expect at least one of the calls to return the actual path (C:\\AssemblyReflectionIssue)?","Url":"https://github.com/dotnet/coreclr/issues/25623","RelatedDescription":"Open issue \"Not possible to get the executable path for self-contained executable\" (#25623)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"466654648","IsPullRequest":true,"CreatedAt":"2019-07-11T05:08:00","Actor":"dotnet-maestro[bot]","Number":"11829","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.11\r\n- **Date Produced**: 7/11/2019 4:22 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11829","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11829)"},{"Id":"466618963","IsPullRequest":true,"CreatedAt":"2019-07-11T04:19:31","Actor":"dotnet-maestro[bot]","Number":"11828","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 3:48 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11828","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11828)"},{"Id":"466416833","IsPullRequest":true,"CreatedAt":"2019-07-11T00:22:45","Actor":"dotnet-maestro[bot]","Number":"11815","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.07\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: f072f68e17667211c07ffe3247ac529cd720d77f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11815","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11815)"},{"Id":"466547752","IsPullRequest":false,"CreatedAt":"2019-07-10T22:10:39","Actor":"dseefeld","Number":"11827","RawContent":null,"Title":"Condition out NETStandard.Library.NETFramework for source-build","State":"open","Body":"NETStandard.Library.NETFramework is identified as a prebuilt in source-build.  This package is needed for building apps for net4x which use a netstandard libaray.  These should not be included in source-build and an error should be produced if this condition occurs.\r\n\r\nChanges to make:\r\n\r\n1.\tStop restoring the package during source builds\r\n2.\tIf the targets hit a case where these would be used, but they are not present, emit a clear error.\r\n","Url":"https://github.com/dotnet/cli/issues/11827","RelatedDescription":"Open issue \"Condition out NETStandard.Library.NETFramework for source-build\" (#11827)"},{"Id":"466536790","IsPullRequest":true,"CreatedAt":"2019-07-10T21:42:39","Actor":"jcagme","Number":"11826","RawContent":null,"Title":"Copy sources from Versions.props to NuGet.config","State":"open","Body":"**TL;DR**\r\n\r\nWe need that all restore sources are located in `NuGet.config` since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/cli/pull/11826","RelatedDescription":"Open PR \"Copy sources from Versions.props to NuGet.config\" (#11826)"},{"Id":"466444927","IsPullRequest":true,"CreatedAt":"2019-07-10T20:55:16","Actor":"peterhuene","Number":"11820","RawContent":null,"Title":"Update branding to 2.2.302.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11820","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.302.\" (#11820)"},{"Id":"466444403","IsPullRequest":true,"CreatedAt":"2019-07-10T20:55:01","Actor":"peterhuene","Number":"11819","RawContent":null,"Title":"Update branding to 2.2.206.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11819","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.206.\" (#11819)"},{"Id":"466443881","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:50","Actor":"peterhuene","Number":"11818","RawContent":null,"Title":"Update branding to 2.2.109.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11818","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.109.\" (#11818)"},{"Id":"466508130","IsPullRequest":true,"CreatedAt":"2019-07-10T20:38:04","Actor":"dotnet-bot","Number":"11825","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11825","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11825)"},{"Id":"466508071","IsPullRequest":true,"CreatedAt":"2019-07-10T20:37:53","Actor":"dotnet-bot","Number":"11824","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11824","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11824)"},{"Id":"466504690","IsPullRequest":true,"CreatedAt":"2019-07-10T20:30:34","Actor":"dotnet-maestro[bot]","Number":"11823","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190710.2\r\n- **Date Produced**: 7/10/2019 8:30 PM\r\n- **Commit**: f9ca0ffd7103380625ce473d0c599c57ca985e19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19360.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11823","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11823)"},{"Id":"466489999","IsPullRequest":false,"CreatedAt":"2019-07-10T19:56:46","Actor":"genifycom","Number":"11822","RawContent":null,"Title":"dotnet publish gets access denied in only in release mode","State":"open","Body":"## Steps to reproduce\r\ndotnet publish works for -c Debug but gets ACCESS DENIED generating DLL for -c Release\r\n\r\n## Expected  behavior\r\nBuild would work for either configuration\r\n\r\n## Actual behavior\r\n-c Debug works but -c Release does not\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nPublish with -c Release fails with:\r\n... publish: C:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(4194,5): error MSB3021: Unable to copy file \"obj\\Release\\netcoreapp2.1\\Test.dll\" to \"bin\\Release\\netcoreapp2.1\\Test.dll\". Access to the path 'C:\\Dev\\Test\\bin\\Release\\netcoreapp2.1\\Test.dll' is denied. [C:\\Dev\\Test\\Test.csproj]\r\n\r\nTracing with Process Monitor shows the the same PID for dotnet.exe opens the output DLL and then opens it again and gets ACCESS DENIED\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11822","RelatedDescription":"Open issue \"dotnet publish gets access denied in only in release mode\" (#11822)"},{"Id":"466447813","IsPullRequest":true,"CreatedAt":"2019-07-10T19:01:46","Actor":"dotnet-maestro[bot]","Number":"11821","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 6:10 PM\r\n- **Commit**: d061d0d95b10aa4e6b5511e8e85cb0bbe5c06fd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19360.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11821","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11821)"},{"Id":"466438626","IsPullRequest":true,"CreatedAt":"2019-07-10T19:00:19","Actor":"peterhuene","Number":"11817","RawContent":null,"Title":"Merge release/2.2.3xx to release/2.2.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11817","RelatedDescription":"Closed or merged PR \"Merge release/2.2.3xx to release/2.2.4xx\" (#11817)"},{"Id":"466422739","IsPullRequest":true,"CreatedAt":"2019-07-10T17:43:57","Actor":"dotnet-maestro[bot]","Number":"11816","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11816","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11816)"},{"Id":"466046806","IsPullRequest":true,"CreatedAt":"2019-07-10T17:42:31","Actor":"peterhuene","Number":"11806","RawContent":null,"Title":"Update branding to 2.1.702.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11806","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.702.\" (#11806)"},{"Id":"466036076","IsPullRequest":true,"CreatedAt":"2019-07-10T17:42:11","Actor":"peterhuene","Number":"11804","RawContent":null,"Title":"Update branding to 2.1.606.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11804","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.606.\" (#11804)"},{"Id":"466035725","IsPullRequest":true,"CreatedAt":"2019-07-10T17:40:51","Actor":"peterhuene","Number":"11803","RawContent":null,"Title":"Update branding to 2.1.509.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11803","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.509.\" (#11803)"},{"Id":"466076843","IsPullRequest":true,"CreatedAt":"2019-07-10T17:20:58","Actor":"dotnet-maestro-bot","Number":"11808","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.2xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11808","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.2xx)\" (#11808)"},{"Id":"466224277","IsPullRequest":true,"CreatedAt":"2019-07-10T16:53:37","Actor":"dotnet-maestro[bot]","Number":"11813","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.03\r\n- **Date Produced**: 7/10/2019 4:10 PM\r\n- **Commit**: 7a43bc15505447fcbd79e544e41fd212dd447bcf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-03\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11813","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11813)"},{"Id":"466076846","IsPullRequest":true,"CreatedAt":"2019-07-10T16:35:45","Actor":"dotnet-maestro-bot","Number":"11810","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11810","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#11810)"},{"Id":"466076845","IsPullRequest":true,"CreatedAt":"2019-07-10T16:35:29","Actor":"dotnet-maestro-bot","Number":"11809","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.3xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11809","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.3xx)\" (#11809)"},{"Id":"466221899","IsPullRequest":false,"CreatedAt":"2019-07-10T10:10:16","Actor":"vnwonah","Number":"11812","RawContent":null,"Title":"build.cmd fails on windows when space is in directory path","State":"open","Body":"## Steps to reproduce\r\nclone the cli repo\r\nrun `build.cmd` from commandline\r\n\r\n## Expected  behavior\r\nbuild starts\r\n\r\n## Actual behavior\r\nbuild fails with error:\r\n\r\n    The term C:\\Users\\<FirstPartofUserName> is not recognized as the name of a cmdlet, \r\n    function...\r\n    verify that the path is correct and try again.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n> .NET Core SDK (reflecting any global.json):\r\n>  Version:   3.0.100-preview6-011681\r\n>  Commit:    2f5626d019\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.18362\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011681\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 3.0.0-preview6-27629-07\r\n>   Commit:  a3967b6096\r\n> \r\n> .NET Core SDKs installed:\r\n>   2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n>   3.0.100-preview6-011681 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 3.0.0-preview6-19230-05 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 3.0.0-preview6-27629-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.WindowsDesktop.App 3.0.0-preview6-27629-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n> \r\n> To install additional .NET Core runtimes or SDKs:\r\n>   https://aka.ms/dotnet-download\r\n\r\n## Investigation\r\n\r\n    $RepoRoot = \"$PSScriptRoot\"\r\n    Invoke-Expression \"$RepoRoot\\eng\\common\\build.ps1 -restore -build $ConfigurationParam \r\n    $ArchitectureParam $ExtraParameters\"\r\n\r\nAbove line uses `$RepoRoot`  which is set from `$PSScriptRoot` containing space from username\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11812","RelatedDescription":"Open issue \"build.cmd fails on windows when space is in directory path\" (#11812)"},{"Id":"466091072","IsPullRequest":true,"CreatedAt":"2019-07-10T07:03:25","Actor":"dotnet-maestro[bot]","Number":"11811","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190709.11\r\n- **Date Produced**: 7/10/2019 6:25 AM\r\n- **Commit**: 552dba193c0f21a03687d2f14861c7a4dcf8dd0f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27909-11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27909-11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27909-11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11811","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11811)"},{"Id":"466057655","IsPullRequest":true,"CreatedAt":"2019-07-10T03:52:40","Actor":"dotnet-maestro[bot]","Number":"11807","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190709.08\r\n- **Date Produced**: 7/10/2019 3:19 AM\r\n- **Commit**: 2d32b0e5e29045adc0ee6941faa12abcaff55122\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27909-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27909-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27909-08\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11807","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11807)"},{"Id":"466046276","IsPullRequest":true,"CreatedAt":"2019-07-10T02:12:18","Actor":"peterhuene","Number":"11805","RawContent":null,"Title":"Merge release/2.1.7xx to release/2.1.8xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11805","RelatedDescription":"Closed or merged PR \"Merge release/2.1.7xx to release/2.1.8xx\" (#11805)"},{"Id":"466035012","IsPullRequest":true,"CreatedAt":"2019-07-10T00:55:40","Actor":"peterhuene","Number":"11802","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.1.7xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11802","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.1.7xx\" (#11802)"},{"Id":"466024475","IsPullRequest":true,"CreatedAt":"2019-07-09T23:55:24","Actor":"peterhuene","Number":"11801","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11801","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11801)"},{"Id":"465997085","IsPullRequest":true,"CreatedAt":"2019-07-09T23:11:20","Actor":"dotnet-maestro-bot","Number":"11799","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.7xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11799","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.7xx)\" (#11799)"},{"Id":"465997154","IsPullRequest":true,"CreatedAt":"2019-07-09T22:40:21","Actor":"dotnet-maestro-bot","Number":"11800","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11800","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)\" (#11800)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"466524102","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:52","Actor":"riarenas","Number":"1327","RawContent":null,"Title":"Add feeds from Versions.props to NuGet.config","State":"closed","Body":"We need all restore sources to be located in NuGet.config since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/standard/pull/1327","RelatedDescription":"Closed or merged PR \"Add feeds from Versions.props to NuGet.config\" (#1327)"},{"Id":"466572937","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:43","Actor":"wtgodbe","Number":"1328","RawContent":null,"Title":" Remove myget dotnet-core feed from restore sources in Versions.props","State":"closed","Body":"It isn't needed as we can restore everything from dotnetfeed.\r\n\r\nCC @ericstj @riarenas ","Url":"https://github.com/dotnet/standard/pull/1328","RelatedDescription":"Closed or merged PR \" Remove myget dotnet-core feed from restore sources in Versions.props\" (#1328)"},{"Id":"466629123","IsPullRequest":false,"CreatedAt":"2019-07-11T02:46:25","Actor":"terrajobst","Number":"1330","RawContent":null,"Title":"Clarify .NET Standard 2.1 platform support","State":"open","Body":"The current .NET Standard 2.1 platform support [is listed](https://github.com/dotnet/standard/blob/master/docs/versions.md) as follows:\r\n\r\n\r\n|<div align=\"left\">.NET Standard</div>|             2.1 |\r\n|:-------------------------------------|------------------:|\r\n|.NET Core                             | **3.0**           |\r\n|.NET Framework                        | *N/A<sup>2</sup>* |\r\n|Mono                                  | **6.2**           |\r\n|Xamarin.iOS                           | **12.12**         |\r\n|Xamarin.Mac                           | **5.12**          |\r\n|Xamarin.Android                       | **9.3**           |\r\n|Unity                                 | *TBD*             |\r\n|Universal Windows Platform            | *TBD*             |\r\n\r\n@akoeplinger Are these the correct versions for Mono/Xamarin?\r\n\r\n@joshpeterson Do you already know the version of Unity that will support .NET Standard 2.1?\r\n\r\n/cc @dotnet/nsboard @rowanmiller ","Url":"https://github.com/dotnet/standard/issues/1330","RelatedDescription":"Open issue \"Clarify .NET Standard 2.1 platform support\" (#1330)"},{"Id":"466574515","IsPullRequest":true,"CreatedAt":"2019-07-10T23:30:06","Actor":"wtgodbe","Number":"1329","RawContent":null,"Title":"Add RefEmit nullability annotations to baseline","State":"open","Body":"CC @terrajobst @safern \r\n\r\nThese pop up when building locally, due to the added annotations in the ref: https://github.com/dotnet/corefx/commit/d688b187115d70ecd6df79a9cb9a04e46b1b00e1#diff-b17852d6d680ddb1418099b32839155c","Url":"https://github.com/dotnet/standard/pull/1329","RelatedDescription":"Open PR \"Add RefEmit nullability annotations to baseline\" (#1329)"},{"Id":"466519567","IsPullRequest":true,"CreatedAt":"2019-07-10T21:03:21","Actor":"terrajobst","Number":"1326","RawContent":null,"Title":"Expose AesCcm and AesGcm","State":"open","Body":"Fixes #1295.\r\n\r\n/cc @alecgn","Url":"https://github.com/dotnet/standard/pull/1326","RelatedDescription":"Open PR \"Expose AesCcm and AesGcm\" (#1326)"},{"Id":"463893429","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:58","Actor":"terrajobst","Number":"1308","RawContent":null,"Title":"Expose new event counters","State":"closed","Body":"As requested offline:\r\n\r\n> While the EventCounter API is a part of .NET Standard 2.1 (and was present in .NET Standard 2.0), the new variants of the EventCounter class (PollingCounter, IncrementingEventCounter, and IncrementingPollingCounter) that were introduced in https://github.com/dotnet/corefx/issues/36129 are all not a part of .NET Standard 2.1.\r\n\r\nThis PR closes that gap.\r\n\r\n/cc @JamesNK @tommcdon @noahfalk @sywhang @shirhatti @JunTaoLuo","Url":"https://github.com/dotnet/standard/pull/1308","RelatedDescription":"Closed or merged PR \"Expose new event counters\" (#1308)"},{"Id":"465994202","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:41","Actor":"akeeton","Number":"1323","RawContent":null,"Title":"Fix \"compat shim\" link in FAQ","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1323","RelatedDescription":"Closed or merged PR \"Fix \"compat shim\" link in FAQ\" (#1323)"},{"Id":"466292622","IsPullRequest":true,"CreatedAt":"2019-07-10T13:04:35","Actor":"dotnet-maestro[bot]","Number":"1325","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 11:55 AM\r\n- **Commit**: dcf1c8f51bcdbd79e08cc672e327d50612690a25\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1325","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1325)"},{"Id":"466269735","IsPullRequest":true,"CreatedAt":"2019-07-10T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1324","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1324","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1324)"},{"Id":"465762776","IsPullRequest":true,"CreatedAt":"2019-07-09T13:00:52","Actor":"dotnet-maestro[bot]","Number":"1322","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190708.6\r\n- **Date Produced**: 7/9/2019 4:54 AM\r\n- **Commit**: bfa7b12fb8a3424e4bc5c6e553d9999bb605d397\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19358.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19358.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19358.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1322","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1322)"},{"Id":"465741988","IsPullRequest":true,"CreatedAt":"2019-07-09T12:14:15","Actor":"dotnet-maestro[bot]","Number":"1321","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.1\r\n- **Date Produced**: 7/9/2019 7:41 AM\r\n- **Commit**: ef3834feb8615429a58808cdcf9ad9284d767654\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19359.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1321","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1321)"},{"Id":"465242195","IsPullRequest":true,"CreatedAt":"2019-07-08T13:05:38","Actor":"dotnet-maestro[bot]","Number":"1320","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190707.5\r\n- **Date Produced**: 7/8/2019 4:45 AM\r\n- **Commit**: 3b426f78a3aab1a45f797ac22e70fd203165d810\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19357.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19357.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19357.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1320","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1320)"},{"Id":"465219152","IsPullRequest":true,"CreatedAt":"2019-07-08T12:14:22","Actor":"dotnet-maestro[bot]","Number":"1319","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190708.1\r\n- **Date Produced**: 7/8/2019 7:34 AM\r\n- **Commit**: 4953cdf6c956adf69a0050c4df503048aed6b271\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19358.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1319","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1319)"},{"Id":"464949613","IsPullRequest":true,"CreatedAt":"2019-07-07T13:01:58","Actor":"dotnet-maestro[bot]","Number":"1318","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190706.5\r\n- **Date Produced**: 7/7/2019 1:21 AM\r\n- **Commit**: 15abdfc3816352c64098735b79a98dd97524ee36\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19356.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19356.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19356.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1318","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1318)"},{"Id":"464945513","IsPullRequest":true,"CreatedAt":"2019-07-07T12:14:11","Actor":"dotnet-maestro[bot]","Number":"1317","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190706.1\r\n- **Date Produced**: 7/6/2019 12:53 PM\r\n- **Commit**: a65d0966dc28861394ce78cfdcb9d5dff370957c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19356.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1317","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1317)"},{"Id":"464852128","IsPullRequest":true,"CreatedAt":"2019-07-06T13:13:54","Actor":"dotnet-maestro[bot]","Number":"1316","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190705.7\r\n- **Date Produced**: 7/6/2019 4:27 AM\r\n- **Commit**: 6c6d68558aaccbd16de6e84cf7e59c0fb32b8273\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19355.7\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19355.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19355.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1316","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1316)"},{"Id":"464847928","IsPullRequest":true,"CreatedAt":"2019-07-06T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1315","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190705.2\r\n- **Date Produced**: 7/5/2019 11:56 PM\r\n- **Commit**: 3e0cbbc6fd6c6d45d7083ee0deb71cec7ea2d91f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19355.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1315","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1315)"},{"Id":"464628179","IsPullRequest":true,"CreatedAt":"2019-07-05T13:04:38","Actor":"dotnet-maestro[bot]","Number":"1314","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190704.4\r\n- **Date Produced**: 7/4/2019 7:32 PM\r\n- **Commit**: 477abf147d8860fae35f975fddafb2711ee42bd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19354.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19354.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19354.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1314","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1314)"},{"Id":"464608260","IsPullRequest":true,"CreatedAt":"2019-07-05T12:10:56","Actor":"dotnet-maestro[bot]","Number":"1313","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190704.2\r\n- **Date Produced**: 7/4/2019 10:42 PM\r\n- **Commit**: 30553c0de34454fb8da5229962501af65eb1233f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19354.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1313","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1313)"},{"Id":"464366313","IsPullRequest":false,"CreatedAt":"2019-07-04T18:29:29","Actor":"PKYADAV","Number":"1311","RawContent":null,"Title":"DataAnnotation Validation in Xamarin.Forms","State":"open","Body":"Hi Team, \r\n\r\nI have class library in .net Standard 2.0 with EntityFrameworkCore. I have created class with Custom DataAnnotation as below:\r\n\r\n**Model Definition**\r\n\r\n```C#\r\n    public class UserLogin : NotificationObject\r\n    {\r\n        [DbRequired]\r\n        [Display(Name = \"USER NAME\", Prompt = \"ENTER USER NAME\")]\r\n        public string User_Name\r\n        {\r\n            get { return GetValue(() => User_Name); }\r\n            set { SetValue(() => User_Name, value); }\r\n        }\r\n\r\n        [Display(Name = \"PASSWORD\", Prompt = \"ENTER PASSWORD\")]\r\n        [DataType(DataType.Password)]\r\n        [DbRequired]\r\n        public string User_Password\r\n        {\r\n            get { return GetValue(() => User_Password); }\r\n            set { SetValue(() => User_Password, value); }\r\n        }\r\n    }\r\n```\r\n\r\n**But this data annotation validation is working in Asp.Net Core and WPF. But we want to use the same in Xamarin.Forms for Android & iOS and UWP. Is it possible or any workaround? As I heard that in .net Standard you need write once and can be reuse in all other environment**","Url":"https://github.com/dotnet/standard/issues/1311","RelatedDescription":"Open issue \"DataAnnotation Validation in Xamarin.Forms\" (#1311)"},{"Id":"464253942","IsPullRequest":true,"CreatedAt":"2019-07-04T13:09:50","Actor":"dotnet-maestro[bot]","Number":"1310","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1310","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1310)"},{"Id":"464230062","IsPullRequest":true,"CreatedAt":"2019-07-04T12:14:16","Actor":"dotnet-maestro[bot]","Number":"1309","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1309","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1309)"},{"Id":"463741391","IsPullRequest":true,"CreatedAt":"2019-07-03T13:14:16","Actor":"dotnet-maestro[bot]","Number":"1307","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.11\r\n- **Date Produced**: 7/3/2019 7:27 AM\r\n- **Commit**: 1162dfc1b5da79dc29f3d28935b4c96c9d38a743\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1307","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1307)"},{"Id":"463713258","IsPullRequest":true,"CreatedAt":"2019-07-03T12:14:13","Actor":"dotnet-maestro[bot]","Number":"1306","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1306","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1306)"},{"Id":"463393350","IsPullRequest":true,"CreatedAt":"2019-07-02T19:23:52","Actor":"wtgodbe","Number":"1305","RawContent":null,"Title":"Remove cancellation token from System.Data CloseAsync() methods","State":"closed","Body":"Cherry-pick of https://github.com/dotnet/standard/pull/1304 for preview7\r\n\r\nCC @roji @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1305","RelatedDescription":"Closed or merged PR \"Remove cancellation token from System.Data CloseAsync() methods\" (#1305)"},{"Id":"463388556","IsPullRequest":true,"CreatedAt":"2019-07-02T19:14:09","Actor":"roji","Number":"1304","RawContent":null,"Title":"Remove cancellation token from System.Data CloseAsync() methods","State":"closed","Body":"Leftover from #1283, mirrors https://github.com/dotnet/corefx/pull/39070","Url":"https://github.com/dotnet/standard/pull/1304","RelatedDescription":"Closed or merged PR \"Remove cancellation token from System.Data CloseAsync() methods\" (#1304)"},{"Id":"463385096","IsPullRequest":true,"CreatedAt":"2019-07-02T19:04:44","Actor":"wtgodbe","Number":"1303","RawContent":null,"Title":"Cherry pick changes to Standard for preview7","State":"closed","Body":"Cherry picks https://github.com/dotnet/standard/pull/1283, https://github.com/dotnet/standard/pull/1300, and https://github.com/dotnet/standard/pull/1290 for preview7. CC @terrajobst @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1303","RelatedDescription":"Closed or merged PR \"Cherry pick changes to Standard for preview7\" (#1303)"},{"Id":"462968084","IsPullRequest":true,"CreatedAt":"2019-07-02T18:34:57","Actor":"terrajobst","Number":"1300","RawContent":null,"Title":"Reduces System.Reflection.Emit to match CoreFX","State":"closed","Body":"For .NET Standard 2.1 we planned to extend Reflection Emit match the .NET Framework API surface but we never got around adding those APIs in .NET Core 3.0. Given that these APIs are rarely used, the proposal is to remove them from the .NET Standard 2.1. Please note that this isn't a breaking change from .NET Standard 2.0 but it is a breaking change from earlier preview versions of .NET Standard 2.1.\r\n\r\nSee issue dotnet/corefx#36716 for details.","Url":"https://github.com/dotnet/standard/pull/1300","RelatedDescription":"Closed or merged PR \"Reduces System.Reflection.Emit to match CoreFX\" (#1300)"},{"Id":"463216905","IsPullRequest":true,"CreatedAt":"2019-07-02T13:07:43","Actor":"dotnet-maestro[bot]","Number":"1302","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.1\r\n- **Date Produced**: 7/2/2019 10:08 AM\r\n- **Commit**: ec138afba514ce9b53d931d66129e02e8be147a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1302","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1302)"},{"Id":"463189880","IsPullRequest":true,"CreatedAt":"2019-07-02T12:29:13","Actor":"dotnet-maestro[bot]","Number":"1301","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190701.4\r\n- **Date Produced**: 7/1/2019 9:33 PM\r\n- **Commit**: 1fb1e240c889cd7f6e10cb1eacd129efa3ddb4b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19351.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1301","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1301)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"466638950","IsPullRequest":true,"CreatedAt":"2019-07-11T03:55:23","Actor":"stephentoub","Number":"39375","RawContent":null,"Title":"Disable GCNotificationTests test","State":"closed","Body":"https://github.com/dotnet/corefx/issues/39374","Url":"https://github.com/dotnet/corefx/pull/39375","RelatedDescription":"Closed or merged PR \"Disable GCNotificationTests test\" (#39375)"},{"Id":"466647913","IsPullRequest":true,"CreatedAt":"2019-07-11T03:53:41","Actor":"stephentoub","Number":"39376","RawContent":null,"Title":"Remove stale nullable !s and pragmas","State":"open","Body":"Also update TODO-NULLABLE comments to be more specific where appropriate.\r\n\r\ncc: @dotnet/nullablefc ","Url":"https://github.com/dotnet/corefx/pull/39376","RelatedDescription":"Open PR \"Remove stale nullable !s and pragmas\" (#39376)"},{"Id":"466046120","IsPullRequest":true,"CreatedAt":"2019-07-11T03:31:31","Actor":"stephentoub","Number":"39352","RawContent":null,"Title":"Exclude built-in HttpContent types from duplex with SocketsHttpHandler's HTTP/2","State":"closed","Body":"For 3.0:\r\n- Adds an internal virtual AllowDuplex to HttpContent that defaults to true\r\n- Override that on all of our HttpContent-derived types to return false\r\n- SocketsHttpHandler's HTTP/2 implementation checks that, and if it returns false, awaits the sending of the request body as part of SendAsync.\r\n\r\nPost-3.0, we'll revisit, likely with public surface area.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/38559 (\"fixes\" it for 3.0)\r\ncc: @geoffkizer, @dotnet/ncl ","Url":"https://github.com/dotnet/corefx/pull/39352","RelatedDescription":"Closed or merged PR \"Exclude built-in HttpContent types from duplex with SocketsHttpHandler's HTTP/2\" (#39352)"},{"Id":"466638438","IsPullRequest":false,"CreatedAt":"2019-07-11T03:20:31","Actor":"stephentoub","Number":"39374","RawContent":null,"Title":"GCNotificationTests outerloop tests consistently failing on all platforms","State":"open","Body":"\r\n![image](https://user-images.githubusercontent.com/2642209/61019724-2f2eca80-a369-11e9-9da3-6c3b429567ca.png)\r\n\r\ne.g.\r\n```\r\nUnhandled Exception of Type Microsoft.DotNet.RemoteExecutor.RemoteExecutionException\r\nMessage :\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\nStack Trace :\r\n\r\nChild exception:\r\n  Xunit.Sdk.TrueException: (False, -1) Error - WaitForFullGCApproach result not Cancelled\r\nExpected: True\r\nActual:   False\r\n   at System.Tests.GCExtendedTests.TestWait(Boolean approach, Int32 timeout) in /_/src/System.Runtime/tests/System/GCTests.cs:line 781\r\n   at System.Tests.GCExtendedTests.<>c.<GCNotificationTests>b__4_0(String approachString, String timeoutString) in /_/src/System.Runtime/tests/System/GCTests.cs:line 506\r\n\r\nChild process:\r\n  System.Runtime.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.Tests.GCExtendedTests+<>c Int32 <GCNotificationTests>b__4_0(System.String, System.String)\r\n\r\nChild arguments:\r\n  False, -1\r\n```\r\nhttps://github.com/dotnet/corefx/blob/b8a7f34e1b64e5c594f591aa8683f34506eb9736/src/System.Runtime/tests/System/GCTests.cs#L500\r\n\r\ncc: @Maoni0, @andy-ms ","Url":"https://github.com/dotnet/corefx/issues/39374","RelatedDescription":"Open issue \"GCNotificationTests outerloop tests consistently failing on all platforms\" (#39374)"},{"Id":"466520852","IsPullRequest":false,"CreatedAt":"2019-07-11T02:50:56","Actor":"tlmii","Number":"39366","RawContent":null,"Title":"How to detect linux distribution name/version when in WSL?","State":"closed","Body":"Over at https://github.com/aspnet/HttpRepl, there's [some code](https://github.com/aspnet/HttpRepl/blob/13bd26c3c91407dc835a463bea496fc160d42fb9/src/Microsoft.Repl/Input/InputManager.cs#L122) that does detection of linux distro in order to decide if some STTY settings need to be changed. \r\n\r\nThis works fine on normal installs of Ubuntu, but in Ubuntu 18.04 on WSL2, the call to `RuntimeInformation.OSDescription` returns the following:\r\n\r\n> \"Linux 4.19.43-microsoft-standard #1 SMP Mon May 20 19:35:22 UTC 2019\"\r\n\r\nIs there a way to get the distribution name/version from .NET Core in this scenario? Or should we resort to something like piping the output of `lsb_release -a`?","Url":"https://github.com/dotnet/corefx/issues/39366","RelatedDescription":"Closed issue \"How to detect linux distribution name/version when in WSL?\" (#39366)"},{"Id":"466612051","IsPullRequest":false,"CreatedAt":"2019-07-11T01:43:20","Actor":"realdevhl","Number":"39373","RawContent":null,"Title":"System.Text.Json Deserialize Not Ignoring Property","State":"open","Body":"Take the following class:\r\n\r\n```\r\npublic class MyObject\r\n{\r\n    [JsonIgnore]\r\n    public List<object> MyAttribute { get; set; }\r\n\r\n    [JsonPropertyName(\"MyAttribute\")]\r\n    public int MyAttributeCount { get; set; }\r\n}\r\n```\r\n\r\nAnd then try to parse some JSON\r\n\r\n```\r\njson = $\"{{\\\"MyAttribute\\\": 0}}\";\r\n\r\nMyObject myObject = JsonSerializer.Parse<MyObject>(json);\r\n```\r\n\r\nResults in the following error.\r\n\r\n'The JSON property name for 'MyObject.AnotherObjectCount' collides with another property.'\r\n\r\nIf I remove the property decorated with JSONIgnore then it works.\r\n\r\nI am using System.Text.Json v4.6.0-preview6.19303.8","Url":"https://github.com/dotnet/corefx/issues/39373","RelatedDescription":"Open issue \"System.Text.Json Deserialize Not Ignoring Property\" (#39373)"},{"Id":"466570095","IsPullRequest":true,"CreatedAt":"2019-07-11T01:27:24","Actor":"Dotnet-GitSync-Bot","Number":"39369","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/39369","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#39369)"},{"Id":"466318605","IsPullRequest":true,"CreatedAt":"2019-07-11T01:23:33","Actor":"MihaZupan","Number":"39361","RawContent":null,"Title":"Fix VB string tests for non-english cultures","State":"closed","Body":"`Strings.Format` tests are failing on some machines, because `CurrentUICulture` can be en-US even if the `CurrentCulture` used for number formatting is not.\r\n\r\nIn my case\r\n`CurrentCulture`: en-SI\r\n`CurrentUICulture`: en-US\r\n`Strings.Format(1.2, \"\")` => `1,2` instead of `1.2`","Url":"https://github.com/dotnet/corefx/pull/39361","RelatedDescription":"Closed or merged PR \"Fix VB string tests for non-english cultures\" (#39361)"},{"Id":"466591649","IsPullRequest":false,"CreatedAt":"2019-07-11T00:27:25","Actor":"geoffkizer","Number":"39372","RawContent":null,"Title":"Assertion in certificate validation code when talking to HTTP2 remote server on Linux","State":"open","Body":"The way we have been running HTTP2 tests against remote servers has meant that certificate validation is always disabled. I am making test changes in #39343 that re-enable this, and now we're seeing an assert in the cert validation code on every Linux distro except for RedHat.\r\n\r\n```\r\nProcess terminated. Assertion failed.\r\nUnrecognized X509VerifyStatusCode:44\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.MapVerifyErrorToChainStatus(X509VerifyStatusCode code) in /_/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/OpenSslX509ChainProcessor.cs:line 819\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.AddElementStatus(X509VerifyStatusCode errorCode, List`1 elementStatus, List`1 overallStatus) in /_/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/OpenSslX509ChainProcessor.cs:line 703\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.AddElementStatus(ErrorCollection errorCodes, List`1 elementStatus, List`1 overallStatus) in /_/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/OpenSslX509ChainProcessor.cs:line 694\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.BuildChainElements(WorkingChain workingChain, List`1& overallStatus) in /_/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/OpenSslX509ChainProcessor.cs:line 599\r\n   at Internal.Cryptography.Pal.OpenSslX509ChainProcessor.Finish(OidCollection applicationPolicy, OidCollection certificatePolicy) in /_/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/OpenSslX509ChainProcessor.cs:line 393\r\n   at Internal.Cryptography.Pal.ChainPal.BuildChain(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan timeout) in /_/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/ChainPal.cs:line 99\r\n   at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate, Boolean throwOnException) in /_/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Chain.cs:line 118\r\n   at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate) in /_/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Chain.cs:line 105\r\n   at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, String hostName) in /_/src/Common/src/System/Net/Security/CertificateValidation.Unix.cs:line 18\r\n   at System.Net.CertificateValidationPal.VerifyCertificateProperties(SafeDeleteContext securityContext, X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, Boolean isServer, String hostName) in /_/src/System.Net.Security/src/System/Net/CertificateValidationPal.Unix.cs:line 22\r\n   at System.Net.Security.SecureChannel.VerifyRemoteCertificate(RemoteCertValidationCallback remoteCertValidationCallback, ProtocolToken& alertToken) in /_/src/System.Net.Security/src/System/Net/Security/SecureChannel.cs:line 1010\r\n   at System.Net.Security.SslStream.CompleteHandshake(ProtocolToken& alertToken) in /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 754\r\n```\r\n\r\nAdditional details in #39343 \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/39372","RelatedDescription":"Open issue \"Assertion in certificate validation code when talking to HTTP2 remote server on Linux\" (#39372)"},{"Id":"466577455","IsPullRequest":true,"CreatedAt":"2019-07-10T23:39:56","Actor":"scalablecory","Number":"39371","RawContent":null,"Title":"Read WinHTTP's proxy format correctly","State":"open","Body":"Resolves #39244. Fixes an exception when PAC is used and the PAC script returns multiple proxies for a URI.\r\n\r\nInstead of parsing the WinHTTP proxy list as a URI, we parse it as a proper proxy list, a semicolon- or whitespace-delimited list of the format:\r\n\r\n> ([&lt;scheme&gt;=][&lt;scheme&gt;\"://\"]&lt;server&gt;[\":\"&lt;port&gt;])\r\n\r\nAs a band-aid, this currently only uses the first eligible proxy in the list. Per [Mozilla](https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunnelinrg/Proxy_Auto-Configuration_(PAC)_file) and [Netscape](https://web.archive.org/web/20040810122331/http://developer.netscape.com/docs/manuals/proxy/adminux/autoconf.htm), expected behavior is actually to cycle through the proxies when the current one fails. Opened issue #39370 to address this.","Url":"https://github.com/dotnet/corefx/pull/39371","RelatedDescription":"Open PR \"Read WinHTTP's proxy format correctly\" (#39371)"},{"Id":"466574523","IsPullRequest":false,"CreatedAt":"2019-07-10T23:30:07","Actor":"scalablecory","Number":"39370","RawContent":null,"Title":"Cycle through proxies when unable to connect and PAC returns multiple proxies.","State":"open","Body":"When a PAC script returns multiple eligible proxies for a URL, `SocketsHttpHandler` is only using the first proxy in the list.\r\n\r\nPer [Mozilla](https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_(PAC)_file) and [Netscape](https://web.archive.org/web/20040810122331/http://developer.netscape.com/docs/manuals/proxy/adminux/autoconf.htm), expected behavior is to cycle through them when one fails.","Url":"https://github.com/dotnet/corefx/issues/39370","RelatedDescription":"Open issue \"Cycle through proxies when unable to connect and PAC returns multiple proxies.\" (#39370)"},{"Id":"466128471","IsPullRequest":false,"CreatedAt":"2019-07-10T23:17:31","Actor":"ghord","Number":"39354","RawContent":null,"Title":"Add ReadOnlySpan<byte> api to JsonElement.EnumerateObject()","State":"closed","Body":"Currently it is not possible to enumerate property names from `JsonElement` as raw spans.\r\n\r\nThere are api's that let you get property once you know the name such as `JsonElement.TryGetProperty(ReadOnlySpan<byte>, out JsonElement)`, but the result of object enumeration - `JsonProperty` has only one `string` property `Name`.\r\n\r\nUsing `JsonProperty.Name` converts utf8 data and allocates in getter. It should be possible to get property name as a raw `ReadOnlySpan<byte>`.","Url":"https://github.com/dotnet/corefx/issues/39354","RelatedDescription":"Closed issue \"Add ReadOnlySpan<byte> api to JsonElement.EnumerateObject()\" (#39354)"},{"Id":"466556914","IsPullRequest":true,"CreatedAt":"2019-07-10T22:37:16","Actor":"eiriktsarpalis","Number":"39368","RawContent":null,"Title":"HttpStress: Use randomized content lengths","State":"open","Body":"Adds pseudo-random content payloads in the http stress test harness.\r\n\r\nAssociates each worker with a `Random` instance used to determine random content lengths. Random instances are seeded from a single value that is optionally specifiable at the cli. \r\n\r\nRunning the test harness for a brief period in my laptop resulted in no new issues other than the ones already documented in #38911.","Url":"https://github.com/dotnet/corefx/pull/39368","RelatedDescription":"Open PR \"HttpStress: Use randomized content lengths\" (#39368)"},{"Id":"466495444","IsPullRequest":true,"CreatedAt":"2019-07-10T22:16:50","Actor":"Anipik","Number":"39365","RawContent":null,"Title":"Making test as outerloop","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/39216","Url":"https://github.com/dotnet/corefx/pull/39365","RelatedDescription":"Closed or merged PR \"Making test as outerloop\" (#39365)"},{"Id":"466327334","IsPullRequest":false,"CreatedAt":"2019-07-10T21:31:53","Actor":"rymeskar","Number":"39362","RawContent":null,"Title":"System.Buffers dll specifically targetting .NetFramework instead of reusing the .NetStandard one","State":"closed","Body":"Based on conversation with @ericstj in the following [thread](https://github.com/dotnet/corefx/issues/36754), we would like if System.Buffers specifically targeted .NETFramework so that we can depend on it without requiring our consumers to bring in all of the .NETStandard support dlls. \r\nReason: the known incompatibilities between .NetStandard 2.0 and framework >=4.6.1 && <4.7.2.","Url":"https://github.com/dotnet/corefx/issues/39362","RelatedDescription":"Closed issue \"System.Buffers dll specifically targetting .NetFramework instead of reusing the .NetStandard one\" (#39362)"},{"Id":"466526475","IsPullRequest":true,"CreatedAt":"2019-07-10T21:18:48","Actor":"sasivishnu","Number":"39367","RawContent":null,"Title":"Add WriteTo API on JsonDocument and JsonProperty","State":"open","Body":"Fixes #39037 \r\n\r\nChanges:\r\n\r\n1. `WriteProperty` API in `JsonElement` is removed.\r\n2. `WriteValue` API in `JsonElement` is renamed as `WriteTo`.\r\n3. `WriteTo` API is added in `JsonDocument` and `JsonProperty`.\r\n\r\nFor unit tests, I referred previously available unit test methods for `JsonDocument` and `JsonProperty` new API `WriteTo`.\r\n\r\nThanks for all the help @bartonjs and @ahsonkhan . I have done as we discussed. Let me know if I missed anything.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39367","RelatedDescription":"Open PR \"Add WriteTo API on JsonDocument and JsonProperty\" (#39367)"},{"Id":"466034041","IsPullRequest":true,"CreatedAt":"2019-07-10T19:58:24","Actor":"Anipik","Number":"39349","RawContent":null,"Title":"Marking the test with outerloop attribute","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/39216\r\n\r\nThe test fails sometimes on non English locales. The bug seems to be in windows side and has been sent to os team.","Url":"https://github.com/dotnet/corefx/pull/39349","RelatedDescription":"Closed or merged PR \"Marking the test with outerloop attribute\" (#39349)"},{"Id":"466285528","IsPullRequest":true,"CreatedAt":"2019-07-10T19:57:43","Actor":"dotnet-maestro[bot]","Number":"39359","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190709.2\r\n- **Date Produced**: 7/10/2019 12:50 AM\r\n- **Commit**: 48ff0937552e540f21835391b693daf47ffabece\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19359.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19359.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19359.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39359","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#39359)"},{"Id":"466421666","IsPullRequest":false,"CreatedAt":"2019-07-10T17:06:02","Actor":"rjmholt","Number":"39364","RawContent":null,"Title":"How to get current process invocation name (argv[0]/$0)? (login shell on *nix)","State":"open","Body":"I'm working to enable PowerShell as a login shell on *nix in https://github.com/PowerShell/PowerShell/pull/10050.\r\n\r\nWhen `-Login` or `-l` is passed, this works fine (we exec /bin/sh and then exec pwsh again).\r\n\r\nBut the convention in many *nix environments for login shells is to prepend a `-` onto the process name when it is exec'd (e.g. `bash` sees its own process name as `-bash` and then deduces it must run login shell logic).\r\n\r\nWith PowerShell as a .NET Core 3.0 application, I don't know how to access this information.\r\n\r\nI've tried the `args` in `public static int Main(string[] args)`, `Environment.GetCommandLineArgs()` and `Process.GetCurrentProcess()`:\r\n\r\n```csharp\r\npublic static int Main(string[] args)\r\n{\r\n            Console.WriteLine(\"ARGS\");\r\n            foreach (string arg in args)\r\n            {\r\n                Console.WriteLine(arg);\r\n            }\r\n            Console.WriteLine(\"ENVIRONMENT ARGS\");\r\n            foreach (string arg in Environment.GetCommandLineArgs())\r\n            {\r\n                Console.WriteLine(arg);\r\n            }\r\n            Console.WriteLine($\"PROCESS NAME: {System.Diagnostics.Process.GetCurrentProcess().ProcessName}\");\r\n...\r\n}\r\n```\r\n\r\nWhich from PowerShell prints when started as the default login shell on macOS:\r\n\r\n```\r\nARGS\r\nENVIRONMENT ARGS\r\n/Users/rjmholt/Documents/Dev/Microsoft/PowerShell/src/powershell-unix/bin/Debug/netcoreapp3.0/osx-x64/publish/pwsh.dll\r\nPROCESS NAME: pwsh\r\n```\r\n\r\nWriting a small C program to show the same (compiled with `cc ex.c`):\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main(int argc, char **argv)\r\n{\r\n    for (int i = 0; i < argc; i++)\r\n    {\r\n\tprintf(\"%d: %s\\n\", i, argv[i]);\r\n    }\r\n}\r\n```\r\n\r\nWhen started as a login shell, prints:\r\n\r\n```\r\n0: -a.out\r\n```\r\n\r\nThe mechanism for this seems to be the [`login` util](http://man7.org/linux/man-pages/man1/login.1.html), [which prepends the `-` before exec-ing the given executable](https://github.com/karelzak/util-linux/blob/master/login-utils/login.c#L1356-L1379).\r\n\r\nMy question is: is there a way to detect the name with which a process has been started? Ideally we could do this performantly, since it's a startup time thing and we just want to detect it as fast as possible so we can exec another process.","Url":"https://github.com/dotnet/corefx/issues/39364","RelatedDescription":"Open issue \"How to get current process invocation name (argv[0]/$0)? (login shell on *nix)\" (#39364)"},{"Id":"466361771","IsPullRequest":false,"CreatedAt":"2019-07-10T15:02:08","Actor":"mjrousos","Number":"39363","RawContent":null,"Title":"DelimitedListTraceListener delimiter cannot be set via attributes","State":"open","Body":"In .NET Framework, a `DelimitedListTraceListener`'s `Delimiter` property can be set by adding an attribute to the object with a key of \"delimiter\" and a value of the delimiter's desired value. This no longer works in .NET Core.\r\n\r\nRepro:\r\n\r\n```CSharp\r\nstatic void Main(string[] args)\r\n{\r\n    var listener = new DelimitedListTraceListener(\"out.txt\");\r\n    listener.Attributes.Add(\"delimiter\", \"||\");\r\n    Console.WriteLine($\"Listener delimiter: {listener.Delimiter}\");\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nD:\\scratch\\repro\\DelimitedListTraceListenerRepro\r\nλ dotnet run -f net47\r\nListener delimiter: ||\r\n\r\nD:\\scratch\\repro\\DelimitedListTraceListenerRepro\r\nλ dotnet run -f netcoreapp30\r\nListener delimiter: ;\r\n```","Url":"https://github.com/dotnet/corefx/issues/39363","RelatedDescription":"Open issue \"DelimitedListTraceListener delimiter cannot be set via attributes\" (#39363)"},{"Id":"466312496","IsPullRequest":false,"CreatedAt":"2019-07-10T14:01:40","Actor":"EgorBo","Number":"39360","RawContent":null,"Title":"DynamicMethodToString inconsistency","State":"closed","Body":"See https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Emit.Lightweight/tests/DynamicMethodToString.cs#L12-L14\r\n\r\nI am trying to understand the logic behind it.\r\ne.g. It expects `System.String MethodName(System.String, Int32)`  why Int32 is without namespace unlike the first argument.\r\nAnother case expects \"Void\" instead of `void` or `System.Void`\r\nSo in some cases it prints Type.FullName, in other Type.Name.","Url":"https://github.com/dotnet/corefx/issues/39360","RelatedDescription":"Closed issue \"DynamicMethodToString inconsistency\" (#39360)"},{"Id":"466029600","IsPullRequest":true,"CreatedAt":"2019-07-10T13:41:54","Actor":"jkotas","Number":"39347","RawContent":null,"Title":"Delete deadcode identified by the ILLinker update","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/39347","RelatedDescription":"Closed or merged PR \"Delete deadcode identified by the ILLinker update\" (#39347)"},{"Id":"466282335","IsPullRequest":true,"CreatedAt":"2019-07-10T12:32:38","Actor":"ViktorHofer","Number":"39358","RawContent":null,"Title":"Add script to support VS Test Explorer","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/34314\r\n\r\nThis option enables VS Test Explorer support in corefx.","Url":"https://github.com/dotnet/corefx/pull/39358","RelatedDescription":"Open PR \"Add script to support VS Test Explorer\" (#39358)"},{"Id":"466240678","IsPullRequest":true,"CreatedAt":"2019-07-10T10:53:17","Actor":"filipnavara","Number":"39357","RawContent":null,"Title":"S.S.C.Pkcs: Make static field initialization order deterministic","State":"open","Body":"Fixes issue on Mono runtime (https://github.com/mono/mono/issues/15238).\r\n\r\nThe reduce test case for the issue is the following:\r\n```csharp\r\nusing System;\r\n\r\nclass Test\r\n{\r\n\tinternal abstract partial class PkcsPal\r\n\t{\r\n\t\tpublic static PkcsPal Instance => s_instance;\r\n\t\tprivate static readonly PkcsPal s_instance = ManagedPkcsPal.Instance;\r\n\t}\r\n\r\n\tinternal sealed partial class ManagedPkcsPal : PkcsPal\r\n\t{\r\n\t\tinternal new static readonly ManagedPkcsPal Instance = new ManagedPkcsPal();\r\n\t}\r\n\r\n\tpublic static void Main()\r\n\t{\r\n\t\tConsole.WriteLine(ManagedPkcsPal.Instance == null); // should be False\r\n\t\tConsole.WriteLine(PkcsPal.Instance == null); // should be False, it is True\r\n\t}\r\n}\r\n```\r\n\r\nAccording to the ECMA specification the Mono `BeforeFieldInit` behavior is correct, as explained in https://github.com/mono/mono/issues/15238#issuecomment-504502193. The CoreCLR runtime is stricter and implements it as \"right before static field access\" (https://github.com/mono/mono/issues/15238#issuecomment-504510904).\r\n\r\nThe Mono runtime issue tracks progress for any potential fix for the underlying behavior difference. It was suggested that the static initialization cycle should also be broken in the CoreFX code (https://github.com/mono/mono/issues/15238#issuecomment-504512481) which is what this PR tries to do.\r\n\r\n/cc @bartonjs @jkotas ","Url":"https://github.com/dotnet/corefx/pull/39357","RelatedDescription":"Open PR \"S.S.C.Pkcs: Make static field initialization order deterministic\" (#39357)"},{"Id":"466078202","IsPullRequest":true,"CreatedAt":"2019-07-10T09:55:12","Actor":"dotnet-maestro-bot","Number":"39353","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-27817-03, servicing-27818-02, stable, respectively (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39353","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to servicing-27817-03, servicing-27818-02, stable, respectively (release/2.2)\" (#39353)"},{"Id":"466170311","IsPullRequest":true,"CreatedAt":"2019-07-10T08:23:33","Actor":"timandy","Number":"39356","RawContent":null,"Title":"Improve Enumerable.Reverse() performance","State":"open","Body":"- In sequence reverse, if the sequence is IList, we can enumerate the sequence backwards to improve performance and reduce memory allocation.\r\n\r\n- In IEnumerable.Reverse().Reverse() case, we can return the source sequence direct to improve performance.\r\n\r\nHere is the performance test case.\r\n``` C#\r\n    [MemoryDiagnoser]\r\n    public class ReversePerfTest\r\n    {\r\n        private int[] data;\r\n\r\n        [Params(0, 10, 100, 1000)]\r\n        public int COUNT;\r\n\r\n\r\n        [GlobalSetup]\r\n        public void Setup()\r\n        {\r\n            data = new int[COUNT];\r\n            for (int i = 0; i < COUNT; i++)\r\n            {\r\n                data[i] = i;\r\n            }\r\n        }\r\n\r\n        [Benchmark]\r\n        public int[] ReversePerf()\r\n        {\r\n            return data.ReversePerf().Skip(5).Take(10).ToArray();\r\n        }\r\n\r\n        [Benchmark(Baseline = true)]\r\n        public int[] Reverse()\r\n        {\r\n            return data.Reverse().Skip(5).Take(10).ToArray();\r\n        }\r\n    }\r\n```\r\n\r\nHere is the result.\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.765 (1803/April2018Update/Redstone4)\r\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\r\nFrequency=2835938 Hz, Resolution=352.6170 ns, Timer=TSC\r\n  [Host]     : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0\r\n  DefaultJob : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0\r\n\r\n\r\n```\r\n|      Method | COUNT |      Mean |      Error |     StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------ |------ |----------:|-----------:|-----------:|------:|-------:|------:|------:|----------:|\r\n| **ReversePerf** |     **0** |  **68.00 ns** |  **0.9577 ns** |  **0.8489 ns** |  **0.45** | **0.0151** |     **-** |     **-** |      **32 B** |\r\n|     Reverse |     0 | 150.68 ns |  2.9447 ns |  2.7544 ns |  1.00 | 0.0474 |     - |     - |     100 B |\r\n|             |       |           |            |            |       |        |       |       |           |\r\n| **ReversePerf** |    **10** | **107.81 ns** |  **1.8778 ns** |  **1.5680 ns** |  **0.28** | **0.0457** |     **-** |     **-** |      **96 B** |\r\n|     Reverse |    10 | 390.91 ns |  7.5755 ns |  7.0861 ns |  1.00 | 0.1216 |     - |     - |     256 B |\r\n|             |       |           |            |            |       |        |       |       |           |\r\n| **ReversePerf** |   **100** | **130.14 ns** |  **2.9506 ns** |  **4.4163 ns** |  **0.26** | **0.0703** |     **-** |     **-** |     **148 B** |\r\n|     Reverse |   100 | 508.18 ns | 10.0186 ns | 13.7136 ns |  1.00 | 0.3233 |     - |     - |     680 B |\r\n|             |       |           |            |            |       |        |       |       |           |\r\n| **ReversePerf** |  **1000** | **131.47 ns** |  **2.5980 ns** |  **2.5516 ns** |  **0.17** | **0.0703** |     **-** |     **-** |     **148 B** |\r\n|     Reverse |  1000 | 768.03 ns | 15.0081 ns | 20.5433 ns |  1.00 | 2.0399 |     - |     - |    4280 B |\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39356","RelatedDescription":"Open PR \"Improve Enumerable.Reverse() performance\" (#39356)"},{"Id":"466160545","IsPullRequest":false,"CreatedAt":"2019-07-10T08:02:07","Actor":"Turnerj","Number":"39355","RawContent":null,"Title":"System.Drawing.Color equality is comparing more than the color","State":"open","Body":"I figure this was done as originally designed and probably has a whole lot of legacy code tied to it to be this particular way but it doesn't really make sense to me.\r\n\r\nLong story short:\r\n```csharp\r\nColor.Red == Color.FromArgb(255, 255, 0, 0); //False\r\nColor.Red.ToArgb() == Color.FromArgb(255, 255, 0, 0).ToArgb(); //True\r\n```\r\n\r\nSo while `Color.Red` is made up of Alpha 255, Red 255, Green 0 and Blue 0, it isn't the same as creating the color via `FromArgb` due to the equality check actually checking whether it is a known color and checking the name of the color.\r\n\r\nhttps://github.com/dotnet/corefx/blob/aef8ed681c53f0e04733878e240c072036dd6679/src/System.Drawing.Primitives/src/System/Drawing/Color.cs#L563-L567\r\n\r\nWhat I am thinking is `FromArgb` to actually look up the corresponding known color and name information and set it. As best as I can tell, all the information needed to do it exists in the `KnownColorTable` but the lookup is reversed.\r\n\r\nThoughts? Is this just a dumb idea and I should use the value of `ToArgb` to compare colours?","Url":"https://github.com/dotnet/corefx/issues/39355","RelatedDescription":"Open issue \"System.Drawing.Color equality is comparing more than the color\" (#39355)"},{"Id":"466036807","IsPullRequest":true,"CreatedAt":"2019-07-10T00:58:50","Actor":"dotnet-maestro-bot","Number":"39350","RawContent":null,"Title":"Update CoreClr to servicing-27730-05 (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39350","RelatedDescription":"Closed or merged PR \"Update CoreClr to servicing-27730-05 (release/2.2)\" (#39350)"},{"Id":"466039050","IsPullRequest":true,"CreatedAt":"2019-07-10T00:22:41","Actor":"Dotnet-GitSync-Bot","Number":"39351","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/39351","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#39351)"},{"Id":"466031266","IsPullRequest":false,"CreatedAt":"2019-07-09T23:45:15","Actor":"scalablecory","Number":"39348","RawContent":null,"Title":"Add async proxy resolution on Windows 8","State":"open","Body":"We currently use `WinHttpGetProxyForUrl` to resolve proxies when PAC is needed.\r\n\r\nStarting with Windows 8, we can use `WinHttpGetProxyForUrlEx` to perform this action asynchronously.","Url":"https://github.com/dotnet/corefx/issues/39348","RelatedDescription":"Open issue \"Add async proxy resolution on Windows 8\" (#39348)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"466646541","IsPullRequest":true,"CreatedAt":"2019-07-11T03:48:33","Actor":"CyrusNajmabadi","Number":"37140","RawContent":null,"Title":"Less SymbolKey allocations.","State":"open","Body":"SymbolKey was written ages ago.  Long before we adopted policies of not heavily using linq, and before we were good about pooling temporary collections. \r\n\r\nThis PR brings SymbolKey up to more modern standards by moving to:\r\n\r\n1. allocation-free enumeration of types like SymbolKeyResolution.\r\n2. No use of `yield`\r\n3. No linq.\r\n4. Intermediary collectoins pooled whenever possible.\r\n\r\nWith this approach, it should be possible to reach near allocation-free resolutoin of SymbolKeys.  Some things will still require allocations though.  For example, we often have to embed strings into the key we build.  As we are building one large string, and because the compiler APIs have no ways to use Spans, we have to allocate strings as we break the key apart. ","Url":"https://github.com/dotnet/roslyn/pull/37140","RelatedDescription":"Open PR \"Less SymbolKey allocations.\" (#37140)"},{"Id":"466631873","IsPullRequest":true,"CreatedAt":"2019-07-11T02:56:20","Actor":"agocke","Number":"37139","RawContent":null,"Title":"Add error for multiple null suppressions","State":"open","Body":"Fixes #37111","Url":"https://github.com/dotnet/roslyn/pull/37139","RelatedDescription":"Open PR \"Add error for multiple null suppressions\" (#37139)"},{"Id":"466631137","IsPullRequest":false,"CreatedAt":"2019-07-11T02:53:47","Actor":"stephentoub","Number":"37138","RawContent":null,"Title":"Unexpected uninitialized warning on [AllowNull] field","State":"open","Body":"**Version Used**: \r\n3.3.0-beta1-19354-02+c82dbc6503182784647003a4fce50ef56d680037\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\n\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n}\r\n\r\nclass C<T>\r\n{\r\n    [AllowNull] public T Value;\r\n\r\n    public C() { }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warning.\r\n\r\n**Actual Behavior**:\r\nProduces a warning \"Non-nullable field 'Value' is uninitialized\".  But adding `= default` on `Value` suppresses that warning.  These are semantically equivalent, so it's odd that there's a warning without the `= default`.","Url":"https://github.com/dotnet/roslyn/issues/37138","RelatedDescription":"Open issue \"Unexpected uninitialized warning on [AllowNull] field\" (#37138)"},{"Id":"466609272","IsPullRequest":false,"CreatedAt":"2019-07-11T01:32:43","Actor":"tmat","Number":"37137","RawContent":null,"Title":"EnC tests failing on Linux","State":"open","Body":"A couple tests are failing on Linux due to PDB issues.","Url":"https://github.com/dotnet/roslyn/issues/37137","RelatedDescription":"Open issue \"EnC tests failing on Linux\" (#37137)"},{"Id":"466584198","IsPullRequest":true,"CreatedAt":"2019-07-11T01:30:16","Actor":"dotnet-bot","Number":"37130","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37130","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#37130)"},{"Id":"466584289","IsPullRequest":true,"CreatedAt":"2019-07-11T01:30:05","Actor":"dotnet-bot","Number":"37131","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37131","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#37131)"},{"Id":"466607268","IsPullRequest":false,"CreatedAt":"2019-07-11T01:24:48","Actor":"TessenR","Number":"37136","RawContent":null,"Title":"Roslyn should lear nullability from switches over tuples just as it does from tuple variables","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (21 Jun 2019)\r\nLatest commit 898bed by Heejae Chang:\r\nadded NFW to get some data on incremental parsing bug where source si� (#36620)\r\n\r\n* added NFW to get some data on incremental parsing bug where source size and tree size is different\r\n\r\n* more comments\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n    void M(string? s1, string? s2)\r\n    {\r\n        var t = (s1, s2);\r\n        // this works: t.Item1 becomes non-nullable within the switch section\r\n        switch (t)\r\n        {\r\n            case (\"\", \"\"):\r\n                t.Item1.ToString(); // no warnings\r\n                break;\r\n        }\r\n\r\n        // this doesn't\r\n        switch (s1, s2) // switch ((s1, s2)) doesn't work either\r\n        {\r\n            case (\"\", \"\"):\r\n                s1.ToString(); // warning CS8602: Dereference of a possibly null reference.\r\n                break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings. The switch checks that both variables are not null in its single section.\r\n\r\n**Actual Behavior**:\r\n`warning CS8602: Dereference of a possibly null reference.` is reported for `s1.ToString()`","Url":"https://github.com/dotnet/roslyn/issues/37136","RelatedDescription":"Open issue \"Roslyn should lear nullability from switches over tuples just as it does from tuple variables\" (#37136)"},{"Id":"466601386","IsPullRequest":true,"CreatedAt":"2019-07-11T01:03:03","Actor":"jcouv","Number":"37135","RawContent":null,"Title":"Apply Maybe/NotNull when getting default value of fields and properties","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/36830","Url":"https://github.com/dotnet/roslyn/pull/37135","RelatedDescription":"Open PR \"Apply Maybe/NotNull when getting default value of fields and properties\" (#37135)"},{"Id":"466599813","IsPullRequest":false,"CreatedAt":"2019-07-11T00:57:22","Actor":"gafter","Number":"37134","RawContent":null,"Title":"Encompassing Implicit Conversions misaligned with the C# specification","State":"open","Body":"According to the C# language specification, an *encompassing implicit conversion* is something that may exist from one type to another type.  However, in the Roslyn compiler it is defined based on conversions from expression.  This is a misalignment with the specification.  Either one or the other is confused and should be corrected.\r\n","Url":"https://github.com/dotnet/roslyn/issues/37134","RelatedDescription":"Open issue \"Encompassing Implicit Conversions misaligned with the C# specification\" (#37134)"},{"Id":"466598868","IsPullRequest":true,"CreatedAt":"2019-07-11T00:55:19","Actor":"RikkiGibson","Number":"37133","RawContent":null,"Title":"Try task.logissue to get error message to show in build summary","State":"closed","Body":"/cc @JoeRobich ","Url":"https://github.com/dotnet/roslyn/pull/37133","RelatedDescription":"Closed or merged PR \"Try task.logissue to get error message to show in build summary\" (#37133)"},{"Id":"466595851","IsPullRequest":false,"CreatedAt":"2019-07-11T00:42:36","Actor":"kendrahavens","Number":"37132","RawContent":null,"Title":"Static class icon different from normal class in intellisense","State":"open","Body":"[Original developer community feedback](https://developercommunity.visualstudio.com/content/idea/632164/static-class-icon-difference-normal-class-in-intel.html)\r\n\r\nPlease change the static class icon to something different than the normal class icon in the intellisense menu.","Url":"https://github.com/dotnet/roslyn/issues/37132","RelatedDescription":"Open issue \"Static class icon different from normal class in intellisense\" (#37132)"},{"Id":"466582642","IsPullRequest":false,"CreatedAt":"2019-07-10T23:56:51","Actor":"kendrahavens","Number":"37129","RawContent":null,"Title":"Code Cleanup Fixer -- Whitespace Normalization","State":"open","Body":"[Original feedback on developer community](https://developercommunity.visualstudio.com/content/idea/545492/code-cleanup-fixer-whitespace-normalization.html)\r\n\r\nThe new Code Cleanup Fixers are extremely useful, and replace the need for most of the functionality in the popular extension Code Maid.  But one Fixer that is noticeably absent is whitespace normalization namely:\r\n\r\n* Remove consecutive blank lines\r\n* Normalize blank lines (e.g. every function has a single blank line after, braces don’t start or end in blank lines, etc)\r\n* Trim spaces from the end of lines\r\n\r\nAnd so on. You can already CTRL-K + D, but that doesn’t deal with a lot of whitespace problems.","Url":"https://github.com/dotnet/roslyn/issues/37129","RelatedDescription":"Open issue \"Code Cleanup Fixer -- Whitespace Normalization\" (#37129)"},{"Id":"466582035","IsPullRequest":false,"CreatedAt":"2019-07-10T23:54:50","Actor":"tmat","Number":"37128","RawContent":null,"Title":"DIM EnC: Adding a non-virtual member to an interface fails at runtime","State":"open","Body":"Need to investigate where exactly it fails - likely in Core CLR. \r\n\r\nTried to add a static field or a method.\r\nAdding a nested type works.","Url":"https://github.com/dotnet/roslyn/issues/37128","RelatedDescription":"Open issue \"DIM EnC: Adding a non-virtual member to an interface fails at runtime\" (#37128)"},{"Id":"466580787","IsPullRequest":false,"CreatedAt":"2019-07-10T23:50:49","Actor":"kendrahavens","Number":"37127","RawContent":null,"Title":"C# Interface Icon","State":"open","Body":"[Original developer community feedback](https://developercommunity.visualstudio.com/idea/461373/visual-c-interface-icon.html)\r\n\r\nC# class and C# interface share the same icon.\r\n\r\nSuggestion: if a class file contains only an interface(s) and nothing more, make its icon use \"interface-like\" picture","Url":"https://github.com/dotnet/roslyn/issues/37127","RelatedDescription":"Open issue \"C# Interface Icon\" (#37127)"},{"Id":"466580586","IsPullRequest":false,"CreatedAt":"2019-07-10T23:50:13","Actor":"tmat","Number":"37126","RawContent":null,"Title":"DIM: inconsistent default accessibility between operators and methods","State":"open","Body":"```C#\r\npublic interface I\r\n{\r\n    static int F() => 1;\r\n    static int operator +(I a, I b) => 1;\r\n}\r\n```\r\n\r\nThe compiler reports error:\r\n```\r\nCS0558: User-defined operator 'I.operator +(I, I)' must be declared static and public\r\n```\r\n\r\nMethod `F()` is implicitly public, so should be the operator.","Url":"https://github.com/dotnet/roslyn/issues/37126","RelatedDescription":"Open issue \"DIM: inconsistent default accessibility between operators and methods\" (#37126)"},{"Id":"466576048","IsPullRequest":false,"CreatedAt":"2019-07-10T23:35:22","Actor":"jasonmalinowski","Number":"37125","RawContent":null,"Title":"Solution.WithDocumentFilePath doesn't take a non-null path even though documents can have null paths","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/37125","RelatedDescription":"Open issue \"Solution.WithDocumentFilePath doesn't take a non-null path even though documents can have null paths\" (#37125)"},{"Id":"466575221","IsPullRequest":false,"CreatedAt":"2019-07-10T23:32:34","Actor":"jasonmalinowski","Number":"37124","RawContent":null,"Title":"Solution.WithProjectName doesn't correctly handle null being given as a name","State":"open","Body":"If you give it a null, it just does nothing. We don't support projects without names, do we want this to throw?","Url":"https://github.com/dotnet/roslyn/issues/37124","RelatedDescription":"Open issue \"Solution.WithProjectName doesn't correctly handle null being given as a name\" (#37124)"},{"Id":"466525974","IsPullRequest":true,"CreatedAt":"2019-07-10T23:15:35","Actor":"mavasani","Number":"37117","RawContent":null,"Title":"Remove reflection based workaround for IRecursivePatternOperation","State":"closed","Body":"The API was made public in #36709, so we don't need a reflection based workaround\r\n\r\nFixes #36866\r\n\r\nNOTE: We already have unit tests verifying the affected code path.","Url":"https://github.com/dotnet/roslyn/pull/37117","RelatedDescription":"Closed or merged PR \"Remove reflection based workaround for IRecursivePatternOperation\" (#37117)"},{"Id":"466557082","IsPullRequest":true,"CreatedAt":"2019-07-10T22:37:45","Actor":"jcagme","Number":"37123","RawContent":null,"Title":"Copy sources from Versions.props to NuGet.config","State":"open","Body":"**TL;DR**\r\n\r\nWe need that all restore sources are located in `NuGet.config` since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/roslyn/pull/37123","RelatedDescription":"Open PR \"Copy sources from Versions.props to NuGet.config\" (#37123)"},{"Id":"466552735","IsPullRequest":false,"CreatedAt":"2019-07-10T22:24:54","Actor":"mazhou-msft","Number":"37122","RawContent":null,"Title":"Attributes applied to async entrypoint method does not have effect","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 d16.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Assume I am creating an app for COM interop that requires STA Thread. Create a netcoreapp3.0 Console and reference WinRT contract package\r\n2. Write the code like this\r\n```c#\r\n[STAThread]\r\nstatic async Task Main() {\r\n    Console.WriteLine(Thread.CurrentThread.GetApartmentState());\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nExpected to output \"STA\"\r\n\r\n**Actual Behavior**:\r\nOutputs \"MTA\" (C# language default)\r\n\r\nIf I change the Main method back from `async` to `void`, it outputs the correct thread state \"STA\".\r\n\r\nI guess it is an issue where the attributes applied to the entrypoint method in code does not bring to the real entrypoint the compiler is generated.","Url":"https://github.com/dotnet/roslyn/issues/37122","RelatedDescription":"Open issue \"Attributes applied to async entrypoint method does not have effect\" (#37122)"},{"Id":"466552715","IsPullRequest":false,"CreatedAt":"2019-07-10T22:24:50","Actor":"gafter","Number":"37121","RawContent":null,"Title":"Duplicate diagnostic in test `TestBadConstraintOnTuple`","State":"open","Body":"This test appears to produce a duplicate diagnostic:\r\n\r\n``` cs\r\n        [Fact]\r\n        public void TestBadConstraintOnTuple()\r\n        {\r\n            var source = @\"\r\nref struct S\r\n{\r\n    void M(S s1, S s2)\r\n    {\r\n        System.Console.Write((\"\"\"\", s1) == (null, s2));\r\n    }\r\n}\";\r\n            var comp = CreateCompilation(source);\r\n            comp.VerifyDiagnostics(\r\n                // (6,35): error CS0306: The type 'S' may not be used as a type argument\r\n                //         System.Console.Write((\"\", s1) == (null, s2));\r\n                Diagnostic(ErrorCode.ERR_BadTypeArgument, \"s1\").WithArguments(\"S\").WithLocation(6, 35),\r\n                // (6,30): error CS0019: Operator '==' cannot be applied to operands of type 'S' and 'S'\r\n                //         System.Console.Write((\"\", s1) == (null, s2));\r\n                Diagnostic(ErrorCode.ERR_BadBinaryOps, @\"(\"\"\"\", s1) == (null, s2)\").WithArguments(\"==\", \"S\", \"S\").WithLocation(6, 30),\r\n                // (6,35): error CS0306: The type 'S' may not be used as a type argument\r\n                //         System.Console.Write((\"\", s1) == (null, s2));\r\n                Diagnostic(ErrorCode.ERR_BadTypeArgument, \"s1\").WithArguments(\"S\").WithLocation(6, 35),\r\n                // (6,49): error CS0306: The type 'S' may not be used as a type argument\r\n                //         System.Console.Write((\"\", s1) == (null, s2));\r\n                Diagnostic(ErrorCode.ERR_BadTypeArgument, \"s2\").WithArguments(\"S\").WithLocation(6, 49)\r\n                );\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/37121","RelatedDescription":"Open issue \"Duplicate diagnostic in test `TestBadConstraintOnTuple`\" (#37121)"},{"Id":"466548375","IsPullRequest":false,"CreatedAt":"2019-07-10T22:12:27","Actor":"gafter","Number":"37120","RawContent":null,"Title":"Add support for method group in LocalRewriter.CanChangeValueBetweenReads","State":"open","Body":"A method group cannot change value between reads if its receiver cannot change value between reads.  Since the method `LocalRewriter.CanChangeValueBetweenReads` is now used where that optimization would be visible, we should consider adding support for method groups.","Url":"https://github.com/dotnet/roslyn/issues/37120","RelatedDescription":"Open issue \"Add support for method group in LocalRewriter.CanChangeValueBetweenReads\" (#37120)"},{"Id":"466507150","IsPullRequest":true,"CreatedAt":"2019-07-10T22:00:17","Actor":"dotnet-bot","Number":"37113","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37113","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#37113)"},{"Id":"466507328","IsPullRequest":true,"CreatedAt":"2019-07-10T22:00:06","Actor":"dotnet-bot","Number":"37114","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37114","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#37114)"},{"Id":"466538642","IsPullRequest":false,"CreatedAt":"2019-07-10T21:47:08","Actor":"gafter","Number":"37119","RawContent":null,"Title":"Conversions missing in method arguments","State":"open","Body":"Nontrivial conversions are missing from arguments to a method call.  For example, if the parameter is of type `Dictionary<object, (int a, int b)>` and the argument is of type `Dictionary<dynamic, (int x, int y)>`, there is no identity conversion appearing in the bound nodes or in the IOperation tree.","Url":"https://github.com/dotnet/roslyn/issues/37119","RelatedDescription":"Open issue \"Conversions missing in method arguments\" (#37119)"},{"Id":"466532403","IsPullRequest":true,"CreatedAt":"2019-07-10T21:32:03","Actor":"TChatzigiannakis","Number":"37118","RawContent":null,"Title":"Fix for #37051 and add test.","State":"open","Body":"This PR provides a possible fix for #37051 where the C# compiler crashes when it meets an `override` method with a generic pointer (`T*`) return type.\r\n\r\nThe crash is caused by an `NullReferenceException` when trying to locate the override's parent method. The crash happens because a `TypeWithAnnotations.Type` property is `null` but assumed not to be. I believe the reason it's `null` is because this code path is triggered when a higher level method tries to resolve the return type or the generic constraints in the first place (and the overridden properties for overrides take control and they make the assumption that everything is already resolved).\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/37118","RelatedDescription":"Open PR \"Fix for #37051 and add test.\" (#37118)"},{"Id":"466524671","IsPullRequest":true,"CreatedAt":"2019-07-10T21:14:48","Actor":"jasonmalinowski","Number":"37116","RawContent":null,"Title":"Enable .editorconfig discovery by default","State":"open","Body":"Time to turn this on!","Url":"https://github.com/dotnet/roslyn/pull/37116","RelatedDescription":"Open PR \"Enable .editorconfig discovery by default\" (#37116)"},{"Id":"466508775","IsPullRequest":true,"CreatedAt":"2019-07-10T20:39:30","Actor":"tmat","Number":"37115","RawContent":null,"Title":"EnC support for DIM","State":"open","Body":"Allow editing existing interface member bodies.\r\n\r\nDisallow adding new ones - virtual and abstract ones are not supported in general in abstract types, non-virtual should in theory work but don't (https://github.com/dotnet/roslyn/issues/37128).\r\n\r\nAdding a nested types is supported.\r\n\r\nDisallow declaring a new local function in a body of an interface method. We synthesize the IL method directly to the containing interface, which does not work. Lambdas, async, and iterators are supported since they synthesize a nested type.\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/37115","RelatedDescription":"Open PR \"EnC support for DIM\" (#37115)"},{"Id":"466505042","IsPullRequest":true,"CreatedAt":"2019-07-10T20:31:44","Actor":"RikkiGibson","Number":"37112","RawContent":null,"Title":"Tweak error message for publish failure","State":"closed","Body":"/cc @JoeRobich ","Url":"https://github.com/dotnet/roslyn/pull/37112","RelatedDescription":"Closed or merged PR \"Tweak error message for publish failure\" (#37112)"},{"Id":"466494796","IsPullRequest":false,"CreatedAt":"2019-07-10T20:08:33","Actor":"jcouv","Number":"37111","RawContent":null,"Title":"Block `expr!!` (double suppression)","State":"open","Body":"We may want to make `!!` a token in the parameter null-checking checking some time after C# 8.","Url":"https://github.com/dotnet/roslyn/issues/37111","RelatedDescription":"Open issue \"Block `expr!!` (double suppression)\" (#37111)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"465922181","IsPullRequest":true,"CreatedAt":"2019-07-10T19:10:17","Actor":"trylek","Number":"7604","RawContent":null,"Title":"Add CPAOT - Crossgen executable size comparison to SuperIlc","State":"closed","Body":"During investigation of the remaining bug buckets I noticed a test\r\napp that was about 3 times longer when compiled with CPAOT than\r\nwith Crossgen (on top of the fact that it was malfunctioning).\r\nI am working on a separate change to fix the size regression;\r\nin this change I'm adding monitoring of executable size comparisons\r\nto SuperIlc to help me monitor size comparisons on a regular basis.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7604","RelatedDescription":"Closed or merged PR \"Add CPAOT - Crossgen executable size comparison to SuperIlc\" (#7604)"},{"Id":"464568921","IsPullRequest":true,"CreatedAt":"2019-07-10T06:41:35","Actor":"trylek","Number":"7590","RawContent":null,"Title":"Miscellaneous CPAOT fixes for several Pri# bug buckets","State":"closed","Body":"1) We were missing support for structs with explicit layout. I have\r\nadded the appropriate logic.\r\n\r\n2) Nullable is not blittable (however it is managed sequential if\r\nits instantiation type is managed sequential).\r\n\r\n3) Structs with explicit layout aren't managed sequential.\r\n\r\n4) We were putting the cctor trigger helper into the wrong import\r\ntable - DispatchImports emits GC ref map and cctor trigger doesn't\r\nneed one because it's not a method call helper. This was crashing\r\nR2RDump when trying to disassemble some R2R executables.\r\n\r\n5) I have added two unit tests to the R2R unit test suite by\r\nadapting two CoreCLR tests that were crashing in interesting ways\r\nwhen manipulating explicit layouts and nullables.\r\n\r\n6) Instantiated type signature encoding was incorrect in large\r\nversion bubble case. As JanV described earlier, the context for\r\nencoding of the instantiation type parameters is the outer context,\r\nnot the generic type context.\r\n\r\n7) Always emit all import tables even when they are empty, otherwise\r\nthe fixup encoding gets out of sync as it refers to import table\r\nindices.\r\n\r\n8) When SuperIlc calls R2RDump in the large version bubble mode, it\r\nneeds to pass CORE_ROOT as the \"reference path\" parameter so that\r\nR2RDump can resolve framework assembly references.\r\n\r\n9) Field encoding was doing an unnecessarily strong check - replaced\r\nContainsType with VersionsWithType.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7590","RelatedDescription":"Closed or merged PR \"Miscellaneous CPAOT fixes for several Pri# bug buckets\" (#7590)"},{"Id":"466031346","IsPullRequest":true,"CreatedAt":"2019-07-09T23:45:37","Actor":"Dotnet-GitSync-Bot","Number":"7606","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7606","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7606)"},{"Id":"465498463","IsPullRequest":true,"CreatedAt":"2019-07-09T23:42:42","Actor":"Dotnet-GitSync-Bot","Number":"7602","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @andy-ms","Url":"https://github.com/dotnet/corert/pull/7602","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7602)"},{"Id":"465992478","IsPullRequest":false,"CreatedAt":"2019-07-09T21:26:26","Actor":"OshoNot","Number":"7605","RawContent":null,"Title":"Build failing when Adding Npgsql","State":"open","Body":"Hello,\r\n\r\nI keep getting the same problem when running the HelloWorld Sample with Npgsql.\r\n\r\nRunning `dotnet publish -r linux-x64 -c Release -v d`\r\n\r\nI get this error during the \"Exec\" task of the publish command: \r\n`Task \"Exec\"\r\n         \"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\r\n         Killed\r\n   1:7>/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/build/Microsoft.NETCore.Native.targets(248,5): error MSB3073: The command \"\"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\" exited with code 137. [/DbPrototype/DbPrototype.fsproj]\r\n       Done executing task \"Exec\" -- FAILED.\r\n   1:7>Done building target \"IlcCompile\" in project \"DbPrototype.fsproj\" -- FAILED.\r\n   1:7>Done Building Project \"/DbPrototype/DbPrototype.fsproj\" (Publish target(s)) -- FAILED.`\r\n\r\n\r\nOS: Ubuntu 18.04 (All pre requisites installed based on [Helloworld sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld))\r\n","Url":"https://github.com/dotnet/corert/issues/7605","RelatedDescription":"Open issue \"Build failing when Adding Npgsql\" (#7605)"},{"Id":"465449956","IsPullRequest":true,"CreatedAt":"2019-07-09T18:55:39","Actor":"trylek","Number":"7599","RawContent":null,"Title":"ArgIterator hardening to gracefully handle indeterminate return types","State":"closed","Body":"When analyzing the remaining CPAOT error buckets, I noticed several\r\ntests that were still crashing CPAOT due to indeterminate types\r\nin the ArgIterator. I found out that I had previously only fixed\r\nthe argument types but I overlooked the need to fix the return value\r\nin a similar manner. I have also applied a tiny cleanup that Michal\r\nsuggested earlier - using InstanceFieldSize instead of GetElementSize.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I double-checked the other few callers of TypeHandle.GetSize\r\nand I believe this is the last remaining place that is not protected\r\nby an upfront indeterminate type check and graceful bail-out.","Url":"https://github.com/dotnet/corert/pull/7599","RelatedDescription":"Closed or merged PR \"ArgIterator hardening to gracefully handle indeterminate return types\" (#7599)"},{"Id":"465474015","IsPullRequest":true,"CreatedAt":"2019-07-09T08:51:20","Actor":"MichalStrehovsky","Number":"7601","RawContent":null,"Title":"Expose invariant globalization mode","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7601","RelatedDescription":"Closed or merged PR \"Expose invariant globalization mode\" (#7601)"},{"Id":"465473002","IsPullRequest":true,"CreatedAt":"2019-07-09T08:51:02","Actor":"MichalStrehovsky","Number":"7600","RawContent":null,"Title":"Make Enum.ToString work with reflection disabled","State":"closed","Body":"This will just use the numerical value.","Url":"https://github.com/dotnet/corert/pull/7600","RelatedDescription":"Closed or merged PR \"Make Enum.ToString work with reflection disabled\" (#7600)"},{"Id":"465653320","IsPullRequest":false,"CreatedAt":"2019-07-09T08:50:15","Actor":"MichalStrehovsky","Number":"7603","RawContent":null,"Title":"Intermittent failure in GC\\Scenarios\\StringCreator\\stringcreator","State":"open","Body":"Seen in #7601 on Windows x64 Debug.\r\n\r\n```\r\nF:\\workspace\\_work\\1\\s\\tests_downloaded\\CoreCLR\\GC\\Scenarios\\StringCreator\\stringcreator\\\\*.dll \r\n                0 file(s) copied.\r\n        Test should return with ExitCode 100 ...\r\n        Creating Strings..\r\n        Created Strings: 0 : 580328\r\n        Created Strings: 100 : 604904\r\n        Created Strings: 200 : 678632\r\n        Created Strings: 300 : 817896\r\n        Created Strings: 400 : 1014504\r\n        Created Strings: 500 : 1268456\r\n        Created Strings: 600 : 1579752\r\n        Created Strings: 700 : 1956584\r\n        Created Strings: 800 : 2390760\r\n        Created Strings: 900 : 2890472\r\n        Created Strings: 1000 : 3447528\r\n        Created Strings: 1100 : 4070120\r\n        Created Strings: 1200 : 4774632\r\n        Created Strings: 1300 : 5561184\r\n        Created Strings: 1400 : 6432976\r\n        Created Strings: 1500 : 7376576\r\n        Created Strings: 1600 : 8408368\r\n        Created Strings: 1700 : 9511968\r\n        Created Strings: 1800 : 10695568\r\n        Created Strings: 1900 : 11967360\r\n        Creating More Strings..\r\n        Created Strings: 0 : 13392616\r\n        Created Strings: 100 : 13531880\r\n        Created Strings: 200 : 13916904\r\n        Created Strings: 300 : 14457576\r\n        Created Strings: 400 : 15159200\r\n        \r\n  slicer = 1\r\n        Creating Strings..\r\n        Created Strings: 0 : 16121000\r\n        Created Strings: 100 : 16145576\r\n        Created Strings: 200 : 16218856\r\n        Created Strings: 300 : 16358120\r\n        Created Strings: 400 : 16554728\r\n        Created Strings: 500 : 16808680\r\n        Created Strings: 600 : 17119976\r\n        Created Strings: 700 : 17496808\r\n        Created Strings: 800 : 17930984\r\n        Created Strings: 900 : 18430696\r\n        Created Strings: 1000 : 18987752\r\n        Created Strings: 1100 : 19610344\r\n        Created Strings: 1200 : 20314856\r\n        Created Strings: 1300 : 21101408\r\n        Created Strings: 1400 : 21973200\r\n        Created Strings: 1500 : 22916800\r\n        Created Strings: 1600 : 23948592\r\n        Created Strings: 1700 : 25052192\r\n        Created Strings: 1800 : 26235792\r\n        Created Strings: 1900 : 1389096\r\n        Creating More Strings..\r\n        Created Strings: 0 : 2765464\r\n        Created Strings: 100 : 2912920\r\n        Created Strings: 200 : 3289752\r\n        Created Strings: 300 : 3830424\r\n        Created Strings: 400 : 4540240\r\n        \r\n  slicer = 1\r\n        Expected: 100\r\n        Actual: -1073741819\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/corert/issues/7603","RelatedDescription":"Open issue \"Intermittent failure in GC\\Scenarios\\StringCreator\\stringcreator\" (#7603)"},{"Id":"464981240","IsPullRequest":true,"CreatedAt":"2019-07-09T06:35:00","Actor":"MichalStrehovsky","Number":"7597","RawContent":null,"Title":"Drop size of Hello World to 1.16 MB","State":"closed","Body":"Set of commits that allow us to drop the size of a fully self-contained native C# Hello World to 1.16 MB (with all the [documented](http://aka.ms/OptimizeCoreRT) size optimization switches enabled, that is).\r\n\r\nSee individual commits for descriptions.","Url":"https://github.com/dotnet/corert/pull/7597","RelatedDescription":"Closed or merged PR \"Drop size of Hello World to 1.16 MB\" (#7597)"},{"Id":"465081965","IsPullRequest":true,"CreatedAt":"2019-07-08T23:16:45","Actor":"Suchiman","Number":"7598","RawContent":null,"Title":"Port many core perf fixes","State":"closed","Body":"Ports dotnet/coreclr#25350","Url":"https://github.com/dotnet/corert/pull/7598","RelatedDescription":"Closed or merged PR \"Port many core perf fixes\" (#7598)"},{"Id":"464946822","IsPullRequest":true,"CreatedAt":"2019-07-08T04:03:23","Actor":"Suchiman","Number":"7596","RawContent":null,"Title":"Use the GC provided environments instead of the PAL ones","State":"closed","Body":"This fixes 3/6 from #7339","Url":"https://github.com/dotnet/corert/pull/7596","RelatedDescription":"Closed or merged PR \"Use the GC provided environments instead of the PAL ones\" (#7596)"},{"Id":"464870626","IsPullRequest":true,"CreatedAt":"2019-07-07T21:12:25","Actor":"MichalStrehovsky","Number":"7593","RawContent":null,"Title":"Change how we root all application libraries","State":"closed","Body":"When `rootallapplicationassemblies` is specified, we currently go over all assemblies passed to ILC as input or reference, find out which ones are not framework assemblies, and root all types in them so that they're available for arbitrary reflection at runtime.\r\n\r\nThe problem is that NuGet packages or SDKs can have many assemblies in them, but only some of them are actually used by user code. Good example is the Microsoft.WindowsDesktop.App SDK that has both WinForms and WPF in it.\r\n\r\nWith this change, we'll only root assemblies where we actually saw the app using something in them. This way a WinForms app will not include all of WPF.\r\n\r\nWith this, we could possibly regress apps that do `Assembly.Load` on an assembly that is otherwise unused. Those apps will have to use RD.XML. We could also add a simple data flow analysis for the simplest cases to avoid RD.XML if really needed.\r\n\r\nASP.NET still works without RD.XML for this.\r\n\r\nMost of this commit is just mechanically moving stuff around.","Url":"https://github.com/dotnet/corert/pull/7593","RelatedDescription":"Closed or merged PR \"Change how we root all application libraries\" (#7593)"},{"Id":"464932259","IsPullRequest":true,"CreatedAt":"2019-07-07T14:24:35","Actor":"MichalStrehovsky","Number":"7595","RawContent":null,"Title":"Add bodies for a couple more missing methods","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7595","RelatedDescription":"Closed or merged PR \"Add bodies for a couple more missing methods\" (#7595)"},{"Id":"464870932","IsPullRequest":true,"CreatedAt":"2019-07-06T22:35:40","Actor":"MichalStrehovsky","Number":"7594","RawContent":null,"Title":"Change error message for unsupported marshallers","State":"closed","Body":"We now support many marshallers that I would consider non-trivial. The error should just say the marshaller is not implemented...","Url":"https://github.com/dotnet/corert/pull/7594","RelatedDescription":"Closed or merged PR \"Change error message for unsupported marshallers\" (#7594)"},{"Id":"464587884","IsPullRequest":true,"CreatedAt":"2019-07-05T18:30:19","Actor":"mjsabby","Number":"7591","RawContent":null,"Title":"Harmonize ContainsPointers flags between CoreRT & CoreCLR","State":"closed","Body":"If there's no reason for these flags to be different between coreclr and corert, I'd like to have the same value across them.\r\n\r\nThis allows the frozen segment deserializer code to not have to be forked across the runtimes.","Url":"https://github.com/dotnet/corert/pull/7591","RelatedDescription":"Closed or merged PR \"Harmonize ContainsPointers flags between CoreRT & CoreCLR\" (#7591)"},{"Id":"464646387","IsPullRequest":true,"CreatedAt":"2019-07-05T15:40:24","Actor":"yowl","Number":"7592","RawContent":null,"Title":"WASM: Enable GCStaticsNode instead of llvm globals","State":"closed","Body":"In order to progress #7248 , this change enables GCStatics by uncommenting some code that was already present but commented due to the earlier problem of `InitializeModules` not being called at startup.  `InitializeModules` is now called for wasm at startup (I added a printf to be sure) and the commented GCStatics code worked as it was.  I added a test for static field access and it produces this snippet of llvm:\r\n\r\n```\r\n%LoadAddressOfSymbolNode4 = load i32*, i32** @__Str_first_string_31DAE213E988224C1F7CFBECD99A0DA573F5FDAB1922570E42F281A9DCFFC1E9___SYMBOL, !dbg !7923\r\n  %LoadAddressOfSymbolNode5 = load i32*, i32** @__GCStaticBase_HelloWasm_FieldStatics___SYMBOL, !dbg !7923\r\n  %castBasePtrPtr = bitcast i32* %LoadAddressOfSymbolNode5 to i8***, !dbg !7923\r\n  %basePtr = load i8**, i8*** %castBasePtrPtr, !dbg !7923\r\n  %base = load i8*, i8** %basePtr, !dbg !7923\r\n  %S1_addr = getelementptr i8, i8* %base, i32 4, !dbg !7923\r\n  %CastPtrstring = bitcast i8* %S1_addr to i8**, !dbg !7923\r\n  %CastPtr = bitcast i32* %LoadAddressOfSymbolNode4 to i8*, !dbg !7923\r\n  store i8* %CastPtr, i8** %CastPtrstring, !dbg !7923\r\n  %LoadAddressOfSymbolNode6 = load i32*, i32** @__Str_a_different_string_1B09B108E59054EEE2BADD80C449F869A0EEBD1B5472EF5FC727ED498E6D54C8___SYMBOL, !dbg !7924\r\n  %LoadAddressOfSymbolNode7 = load i32*, i32** @__GCStaticBase_HelloWasm_FieldStatics___SYMBOL, !dbg !7924\r\n  %castBasePtrPtr8 = bitcast i32* %LoadAddressOfSymbolNode7 to i8***, !dbg !7924\r\n  %basePtr9 = load i8**, i8*** %castBasePtrPtr8, !dbg !7924\r\n  %base10 = load i8*, i8** %basePtr9, !dbg !7924\r\n  %S2_addr = getelementptr i8, i8* %base10, i32 8, !dbg !7924\r\n```\r\n\r\nWhere we can see that it is going to the GCStaticBase for the class and has 2 different offsets in the `getelementptr` statements, 4 and 8, so looks fine to me.\r\n\r\n","Url":"https://github.com/dotnet/corert/pull/7592","RelatedDescription":"Closed or merged PR \"WASM: Enable GCStaticsNode instead of llvm globals\" (#7592)"},{"Id":"464418814","IsPullRequest":true,"CreatedAt":"2019-07-05T06:18:31","Actor":"mjsabby","Number":"7589","RawContent":null,"Title":"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment","State":"closed","Body":"Brings https://github.com/dotnet/coreclr/pull/22776 into CoreRT.","Url":"https://github.com/dotnet/corert/pull/7589","RelatedDescription":"Closed or merged PR \"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment\" (#7589)"},{"Id":"464379081","IsPullRequest":true,"CreatedAt":"2019-07-04T19:57:45","Actor":"Suchiman","Number":"7588","RawContent":null,"Title":"Make CLRServices::GarbageCollect behave like CoreCLR's","State":"closed","Body":"fixes #7475","Url":"https://github.com/dotnet/corert/pull/7588","RelatedDescription":"Closed or merged PR \"Make CLRServices::GarbageCollect behave like CoreCLR's\" (#7588)"},{"Id":"463949789","IsPullRequest":true,"CreatedAt":"2019-07-04T19:50:37","Actor":"Suchiman","Number":"7587","RawContent":null,"Title":"Make fields readonly properties to avoid confusion, fixes #4811","State":"closed","Body":"fixes #4811","Url":"https://github.com/dotnet/corert/pull/7587","RelatedDescription":"Closed or merged PR \"Make fields readonly properties to avoid confusion, fixes #4811\" (#7587)"},{"Id":"463452177","IsPullRequest":true,"CreatedAt":"2019-07-04T01:11:15","Actor":"nattress","Number":"7581","RawContent":null,"Title":"SuperIlc support for compiling from Crossgen .rsps","State":"closed","Body":"Adds `compile-crossgen-rsp` command to SuperIlc which takes a response file (or a folder full of them) from a Crossgen command and transposes the arguments so that SuperIlc can re-run Crossgen / CPAOT. If the response file came from another machine (build lab, partner), the --rewrite-old-path and --rewrite-new-path parameters allow switching out the beginnings of directory names.\r\n\r\nThe intent of this command is to allow compiling more complex workloads where dependencies are not conveniently in a single folder, and each response file may have different arguments it passes to crossgen. The set of crossgen parameters we parse is not complete and was enough for the scenario I needed this tool for.\r\n\r\nRefactored the `Command` classes into a folder. Also I was seeing frequent unhandled exceptions since TaskCanceledExceptions from tasks are wrapped in AggregateException objects. Fortunately filters make it easy to tell the difference and just eat the `TaskCanceledException`.","Url":"https://github.com/dotnet/corert/pull/7581","RelatedDescription":"Closed or merged PR \"SuperIlc support for compiling from Crossgen .rsps\" (#7581)"},{"Id":"463835483","IsPullRequest":true,"CreatedAt":"2019-07-03T20:22:39","Actor":"MichalStrehovsky","Number":"7585","RawContent":null,"Title":"Run CoreCLR tests in multimodule mode","State":"closed","Body":"This leg is currently taking 80 minutes to complete and that's quite a long time.","Url":"https://github.com/dotnet/corert/pull/7585","RelatedDescription":"Closed or merged PR \"Run CoreCLR tests in multimodule mode\" (#7585)"},{"Id":"463835743","IsPullRequest":true,"CreatedAt":"2019-07-03T18:15:57","Actor":"Dotnet-GitSync-Bot","Number":"7586","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7586","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7586)"},{"Id":"463792357","IsPullRequest":true,"CreatedAt":"2019-07-03T17:37:35","Actor":"MichalStrehovsky","Number":"7584","RawContent":null,"Title":"Prevent loading byref-like types with invalid layout","State":"closed","Body":"Port of dotnet/coreclr#25200.","Url":"https://github.com/dotnet/corert/pull/7584","RelatedDescription":"Closed or merged PR \"Prevent loading byref-like types with invalid layout\" (#7584)"},{"Id":"463792056","IsPullRequest":true,"CreatedAt":"2019-07-03T16:03:38","Actor":"MichalStrehovsky","Number":"7583","RawContent":null,"Title":"Allow CORINFO_BOX_THIS for primitives and enums","State":"closed","Body":"Port dotnet/coreclr#24644.","Url":"https://github.com/dotnet/corert/pull/7583","RelatedDescription":"Closed or merged PR \"Allow CORINFO_BOX_THIS for primitives and enums\" (#7583)"},{"Id":"463593271","IsPullRequest":true,"CreatedAt":"2019-07-03T13:39:58","Actor":"Dotnet-GitSync-Bot","Number":"7582","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7582","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7582)"},{"Id":"463227946","IsPullRequest":true,"CreatedAt":"2019-07-02T19:46:55","Actor":"jkotas","Number":"7578","RawContent":null,"Title":"Port https://github.com/dotnet/coreclr/pull/25531","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7578","RelatedDescription":"Closed or merged PR \"Port https://github.com/dotnet/coreclr/pull/25531\" (#7578)"},{"Id":"463249832","IsPullRequest":true,"CreatedAt":"2019-07-02T16:14:11","Actor":"jkotas","Number":"7580","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7580","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7580)"},{"Id":"463234533","IsPullRequest":true,"CreatedAt":"2019-07-02T14:57:56","Actor":"Dotnet-GitSync-Bot","Number":"7579","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7579","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7579)"},{"Id":"463136077","IsPullRequest":false,"CreatedAt":"2019-07-02T09:59:29","Actor":"MichalStrehovsky","Number":"7577","RawContent":null,"Title":"VectorArrayInit test fails intermittently","State":"open","Body":"```\r\n       F:\\workspace\\_work\\1\\s\\tests_downloaded\\CoreCLR\\JIT\\SIMD\\VectorArrayInit_r\\\\*.dll \r\n                0 file(s) copied.\r\n        Expected: 100\r\n        Actual: -1073741819\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```\r\n\r\nSeen in #7574 and in one of the iterations of #7549 (I think).\r\n\r\nI tried to get a local repro, but wasn't successful so far.","Url":"https://github.com/dotnet/corert/issues/7577","RelatedDescription":"Open issue \"VectorArrayInit test fails intermittently\" (#7577)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"462787366","IsPullRequest":false,"CreatedAt":"2019-07-10T20:02:08","Actor":"DualBrain","Number":"3379","RawContent":null,"Title":"VB.NET 'End' not available and odd error message.","State":"closed","Body":"Start with a .NET Core 3.0 Console app and simply modify Sub Main.\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n     End '<--- I added this.\r\n  End Sub\r\nEnd Module\r\n\r\nBy all appearance, Visual Studio thinks things are just fine (no squiggles).  When I build, the build fails with the following error:\r\n\r\n\"BC37234: Unstructured exception handling is not supported in current project type.\"\r\n\r\nHuh?  How is 'End' part of unstructured exception handling?  Also, why wouldn't 'End' be supported for a console application on .NET Core?\r\n\r\nThanks.\r\n\r\nCC: @KathleenDollard, @cston ","Url":"https://github.com/dotnet/sdk/issues/3379","RelatedDescription":"Closed issue \"VB.NET 'End' not available and odd error message.\" (#3379)"},{"Id":"466269901","IsPullRequest":true,"CreatedAt":"2019-07-10T18:42:26","Actor":"dotnet-maestro[bot]","Number":"3407","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3407","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3407)"},{"Id":"465287305","IsPullRequest":false,"CreatedAt":"2019-07-10T17:29:38","Actor":"vitek-karas","Number":"3405","RawContent":null,"Title":"Add a way to customize the path imprinted into apphost.exe","State":"closed","Body":"Currently there's no supported public way to customize the path to the app which is imprinted into the apphost.exe (to get the native executable). For normal apps it's always the name of the main application dll.\r\n\r\nThere are scenarios where it would be handy to be able to customize the path by redirecting it to a subfolder relative the native exe. See for example https://github.com/dotnet/core-setup/issues/5120 and https://github.com/dotnet/cli/issues/11713. It would not provide a full solution to the issue described there, but it would make it significantly easier to implement a custom solution.","Url":"https://github.com/dotnet/sdk/issues/3405","RelatedDescription":"Closed issue \"Add a way to customize the path imprinted into apphost.exe\" (#3405)"},{"Id":"465219313","IsPullRequest":true,"CreatedAt":"2019-07-10T12:04:12","Actor":"dotnet-maestro[bot]","Number":"3404","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.1\r\n- **Date Produced**: 7/9/2019 7:41 AM\r\n- **Commit**: ef3834feb8615429a58808cdcf9ad9284d767654\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19359.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3404","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3404)"},{"Id":"463478792","IsPullRequest":true,"CreatedAt":"2019-07-09T21:24:23","Actor":"dsplaisted","Number":"3389","RawContent":null,"Title":"Fix NullReferenceException in ResolvePackageFileConflicts","State":"closed","Body":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/941481","Url":"https://github.com/dotnet/sdk/pull/3389","RelatedDescription":"Closed or merged PR \"Fix NullReferenceException in ResolvePackageFileConflicts\" (#3389)"},{"Id":"464463291","IsPullRequest":true,"CreatedAt":"2019-07-09T08:40:53","Actor":"drewnoakes","Number":"3399","RawContent":null,"Title":"Continue design time builds if resolving package assets fails","State":"closed","Body":"(This is an alternative implementation of #3398.)\r\n\r\nDesign time builds are stopping if `ResolvePackageAssets` hits an error (dotnet/project-system#4992).\r\n\r\nThis PR uses the fact that design-time builds set the `ContinueOnError` property to `ErrorAndContinue`.\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3399","RelatedDescription":"Closed or merged PR \"Continue design time builds if resolving package assets fails\" (#3399)"},{"Id":"464024281","IsPullRequest":true,"CreatedAt":"2019-07-09T00:46:38","Actor":"MSLukeWest","Number":"3394","RawContent":null,"Title":"Updating PublishItemsOutputGroup to resolve runtime assets during design time builds","State":"closed","Body":"Since this output group is meant to be used by installer projects which deal exclusively with design time builds we need ResolveRuntimePackAssets to always run when building it.\r\n\r\nAlso updating tests for this output group to set DesignTimeBuild=true to more accurately simulate this scenario.","Url":"https://github.com/dotnet/sdk/pull/3394","RelatedDescription":"Closed or merged PR \"Updating PublishItemsOutputGroup to resolve runtime assets during design time builds\" (#3394)"},{"Id":"465465681","IsPullRequest":true,"CreatedAt":"2019-07-08T21:22:17","Actor":"dsplaisted","Number":"3406","RawContent":null,"Title":"Supply rid graph to NuGet","State":"open","Body":"Fix #3325","Url":"https://github.com/dotnet/sdk/pull/3406","RelatedDescription":"Open PR \"Supply rid graph to NuGet\" (#3406)"},{"Id":"464945545","IsPullRequest":true,"CreatedAt":"2019-07-07T13:55:07","Actor":"dotnet-maestro[bot]","Number":"3403","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190706.1\r\n- **Date Produced**: 7/6/2019 12:53 PM\r\n- **Commit**: a65d0966dc28861394ce78cfdcb9d5dff370957c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19356.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3403","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3403)"},{"Id":"464847952","IsPullRequest":true,"CreatedAt":"2019-07-06T14:20:21","Actor":"dotnet-maestro[bot]","Number":"3402","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190705.2\r\n- **Date Produced**: 7/5/2019 11:56 PM\r\n- **Commit**: 3e0cbbc6fd6c6d45d7083ee0deb71cec7ea2d91f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19355.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3402","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3402)"},{"Id":"464230214","IsPullRequest":true,"CreatedAt":"2019-07-06T12:04:13","Actor":"dotnet-maestro[bot]","Number":"3396","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190704.2\r\n- **Date Produced**: 7/4/2019 10:42 PM\r\n- **Commit**: 30553c0de34454fb8da5229962501af65eb1233f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19354.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3396","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3396)"},{"Id":"464827099","IsPullRequest":false,"CreatedAt":"2019-07-06T07:19:22","Actor":"vitek-karas","Number":"3401","RawContent":null,"Title":"Publishing for win fails with unhelpful error message","State":"open","Body":"Trying to publish an app for `win` RID like this:\r\n```\r\ndotnet publish -r win\r\n```\r\n\r\nFails with error like this:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(99,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'win'. [E:\\AppModel\\repro\\ca5\\ca5.csproj]\r\n```\r\n\r\nWhile technically correct, the error doesn't help the user to figure out the solution. Ideally we would check that the specified RID exists and that it's not a leaf in the RID graph. In which case we could report an error with guidance that a more specific RID is required. Or even better list all the available apphost RIDs which are a more specific version of the specified RID. That way we could state that there's win-x86 and win-x64 and the user should pick one.","Url":"https://github.com/dotnet/sdk/issues/3401","RelatedDescription":"Open issue \"Publishing for win fails with unhelpful error message\" (#3401)"},{"Id":"464619133","IsPullRequest":false,"CreatedAt":"2019-07-05T12:30:18","Actor":"appel1","Number":"3400","RawContent":null,"Title":"MSBuild task restore target sometimes fails if multiple projects share a project reference","State":"open","Body":"As part of our build script for CI we do something like this to prepare our projects, about 1500 csproj projects using the 2017 format. They all share a project reference to a common project. \r\n\r\n```xml\r\n<ItemGroup>\r\n  <TargetProjects Include=\"src\\**\\*.csproj\"/>\r\n</ItemGroup>\r\n<MSBuild Projects=\"@(TargetProjects)\" Targets=\"Restore\" BuildInParallel=\"True\"/>\r\n```\r\n\r\nWhen we do this we sometimes, like every other build or so, one or more of the following errors. \r\n\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(121,5): error : The process cannot access the file 'CommonProject\\obj\\CommonProject.csproj.nuget.dgspec.json' because it is being used by another process. [src\\proj1\\proj1.csproj]\r\n\r\nA workaround is to set BuildInParallel to False but that reduces performance quite a bit. \r\n\r\nIs BuildInParallel not supported or is this some other kind of configuration error?","Url":"https://github.com/dotnet/sdk/issues/3400","RelatedDescription":"Open issue \"MSBuild task restore target sometimes fails if multiple projects share a project reference\" (#3400)"},{"Id":"464416897","IsPullRequest":true,"CreatedAt":"2019-07-05T02:31:06","Actor":"dotnet-bot","Number":"3397","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3397","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3397)"},{"Id":"464419999","IsPullRequest":true,"CreatedAt":"2019-07-05T00:32:36","Actor":"drewnoakes","Number":"3398","RawContent":null,"Title":"Continue design time builds if resolving package assets fails","State":"open","Body":"Design time builds are stopping if `ResolvePackageAssets` hits an error (https://github.com/dotnet/project-system/issues/4992). This PR sets `ContinueOnError` on `ResolvePackageAssets` to `ErrorAndContinue` for design time builds only.\r\n\r\nWould the property be better defined in `Microsoft.NET.Sdk.props` with a more general name for broader use?\r\n\r\nAlternatively, should this logic piggyback off the `DesignTimeBuild` property of the task itself?\r\n\r\nhttps://github.com/dotnet/sdk/blob/adf76a594158a742e2c22b49b0fb4942cb53317d/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L153","Url":"https://github.com/dotnet/sdk/pull/3398","RelatedDescription":"Open PR \"Continue design time builds if resolving package assets fails\" (#3398)"},{"Id":"464066841","IsPullRequest":true,"CreatedAt":"2019-07-05T00:08:59","Actor":"drewnoakes","Number":"3395","RawContent":null,"Title":"Remove double computation of settings hash","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3395","RelatedDescription":"Closed or merged PR \"Remove double computation of settings hash\" (#3395)"},{"Id":"463915913","IsPullRequest":true,"CreatedAt":"2019-07-04T15:16:20","Actor":"dsplaisted","Number":"3392","RawContent":null,"Title":"Don't write the same framework multiple times to RuntimeConfig.json","State":"closed","Body":"Fix dotnet/cli#11709","Url":"https://github.com/dotnet/sdk/pull/3392","RelatedDescription":"Closed or merged PR \"Don't write the same framework multiple times to RuntimeConfig.json\" (#3392)"},{"Id":"464018687","IsPullRequest":true,"CreatedAt":"2019-07-04T01:35:13","Actor":"peterhuene","Number":"3393","RawContent":null,"Title":"Fix unhandled exception when RuntimeList.xml contains duplicates.","State":"open","Body":"This PR fixes an unhandled exception that results when RuntimeList.xml\r\ncontains entries that have the same destination subpath when resolving the\r\nruntime pack assets.  An error is now emitted instead of the unhandled\r\nexception.\r\n\r\nAdditionally, this fixes an unhandled exception that occurs when the\r\nRuntimeList.xml file is not present in the runtime pack that is caused by\r\nthe exception message not having a NETSDK prefix.\r\n\r\nAlso removed an unnecessary override of the `Execute` method for\r\n`GenerateDepsFile` task.  This override should have been removed with a\r\nprevious cleanup PR, but was overlooked.\r\n\r\nFixes dotnet/cli#11705.","Url":"https://github.com/dotnet/sdk/pull/3393","RelatedDescription":"Open PR \"Fix unhandled exception when RuntimeList.xml contains duplicates.\" (#3393)"},{"Id":"463190002","IsPullRequest":true,"CreatedAt":"2019-07-03T22:23:54","Actor":"dotnet-maestro[bot]","Number":"3385","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3385","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3385)"},{"Id":"462854507","IsPullRequest":false,"CreatedAt":"2019-07-03T20:55:59","Actor":"AlexanderTaeschner","Number":"3380","RawContent":null,"Title":"Duplicated frameworks in runtimeconfig.json","State":"closed","Body":"Using .NET core version 3.0.100-preview7-012741 some generated ProjectName.runtimeconfig.json files contain duplicated entries for the frameworks, which lead to a direct crash at application start:\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27826-20\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27826-20\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27826-20\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\nwhich seems to be linked to the following entry in the build log:\r\n```\r\n5>      Task \"GenerateRuntimeConfigurationFiles\"\r\n5>        Task Parameter:AssetsFilePath=[...]\\obj\\project.assets.json\r\n5>        Task Parameter:TargetFrameworkMoniker=.NETCoreApp,Version=v3.0\r\n5>        Task Parameter:TargetFramework=netcoreapp3.0\r\n5>        Task Parameter:RuntimeConfigPath=[...].runtimeconfig.json\r\n5>        Task Parameter:RuntimeConfigDevPath=[...].runtimeconfig.dev.json\r\n5>        Task Parameter:\r\n5>            RuntimeFrameworks=\r\n5>                Microsoft.NETCore.App\r\n5>                        FrameworkName=Microsoft.NETCore.App\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>                Microsoft.WindowsDesktop.App\r\n5>                        FrameworkName=Microsoft.WindowsDesktop.App\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>                Microsoft.WindowsDesktop.App\r\n5>                        FrameworkName=Microsoft.WindowsDesktop.App.WPF\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>                Microsoft.WindowsDesktop.App\r\n5>                        FrameworkName=Microsoft.WindowsDesktop.App.WindowsForms\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>        Task Parameter:UserRuntimeConfig=[...]/runtimeconfig.template.json\r\n5>        Task Parameter:AdditionalProbingPaths=[...]\\.dotnet\\store\\|arch|\\|tfm|\r\n5>        Task Parameter:IsSelfContained=False\r\n5>      Done executing task \"GenerateRuntimeConfigurationFiles\".\r\n```\r\nwhere three RuntimeFrameworks with the same name, but different FrameworkName are listed.\r\nWith preview 5 this problem did not appear.","Url":"https://github.com/dotnet/sdk/issues/3380","RelatedDescription":"Closed issue \"Duplicated frameworks in runtimeconfig.json\" (#3380)"},{"Id":"463386800","IsPullRequest":false,"CreatedAt":"2019-07-03T20:55:29","Actor":"crmann1","Number":"3388","RawContent":null,"Title":"ResolvePackageFileConflicts task throw null reference exception when duplicate references are passed in (and conflicts exist)","State":"closed","Body":"During a build of a project that has duplicate references where the duplicate reference is also a conflict the ResolvePackageFileConflicts task crashes with a null reference exception . \r\n\r\n\r\nC:\\Program   Files\\dotnet\\sdk\\3.0.100-preview7-012601\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets\r\n\r\nThe \"ResolvePackageFileConflicts\" task failed unexpectedly.System.NullReferenceException: Object reference not set to an instance of an object.   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.<>c.<ExecuteCore>b__44_0(ITaskItem r) in /_/src/Tasks/Common/ConflictResolution/ResolvePackageFileConflicts.cs:line 160   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()   at System.Collections.Generic.HashSet`1.UnionWith(IEnumerable`1 other)   at System.Collections.Generic.HashSet`1..ctor(IEnumerable`1 collection, IEqualityComparer`1 comparer)   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore() in /_/src/Tasks/Common/ConflictResolution/ResolvePackageFileConflicts.cs:line 160   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 47   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\nThe reason is that in ResolvePackageFileConflicts.cs\r\n      var result = new ITaskItem[original.Length - conflicts.Count]; \r\n\r\nThe assumption is that the length of the result array is just the original list minus the conflict list. But if the original list has duplicates then the result array will be too large and will have null entries in it. \r\n\r\nFurther down that array is processed and fails \r\n\r\nvar referenceItemSpecs = new HashSet<string>(ReferencesWithoutConflicts?.Select(r => r.ItemSpec) ?? Enumerable.Empty<string>(),\r\n                                                                     StringComparer.OrdinalIgnoreCase);\r\n\r\nr=> r.ItemSpec fails because r is null due to the ReferenceWithoutConflicts enumeration containing a null item  due to the problem above.\r\n\r\nRepro for example is to have a file with the following reference items in it\r\n\r\n```\r\n <ItemGroup>\r\n    <Reference Include=\"System.Runtime\" />\r\n    <Reference Include=\"System.Runtime\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3388","RelatedDescription":"Closed issue \"ResolvePackageFileConflicts task throw null reference exception when duplicate references are passed in (and conflicts exist)\" (#3388)"},{"Id":"463798216","IsPullRequest":true,"CreatedAt":"2019-07-03T14:50:59","Actor":"rynowak","Number":"3391","RawContent":null,"Title":"Add build perf test for server-side Blazor template","State":"open","Body":"Adds performance coverage for Blazor, which interacts with the compiler\r\nand SDK differently from other ASP.NET Core templates.\r\n\r\nThis is currently a draft waiting for https://github.com/aspnet/AspNetCore/pull/11550/files to be merged and inserted - that PR renames the template. ","Url":"https://github.com/dotnet/sdk/pull/3391","RelatedDescription":"Open PR \"Add build perf test for server-side Blazor template\" (#3391)"},{"Id":"463496606","IsPullRequest":true,"CreatedAt":"2019-07-03T01:03:09","Actor":"dsplaisted","Number":"3390","RawContent":null,"Title":"Support automatic Link metadata for Page and Resource items","State":"open","Body":"Fix #2697 \r\n","Url":"https://github.com/dotnet/sdk/pull/3390","RelatedDescription":"Open PR \"Support automatic Link metadata for Page and Resource items\" (#3390)"},{"Id":"463190351","IsPullRequest":true,"CreatedAt":"2019-07-02T14:31:35","Actor":"dotnet-bot","Number":"3386","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3386","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3386)"},{"Id":"462963954","IsPullRequest":true,"CreatedAt":"2019-07-02T03:30:51","Actor":"johnbeisner","Number":"3384","RawContent":null,"Title":"Branding update to \"preview8\"; SDK","State":"closed","Body":"Branding update to \"preview8\"; SDK","Url":"https://github.com/dotnet/sdk/pull/3384","RelatedDescription":"Closed or merged PR \"Branding update to \"preview8\"; SDK\" (#3384)"},{"Id":"462957863","IsPullRequest":true,"CreatedAt":"2019-07-02T03:30:22","Actor":"johnbeisner","Number":"3382","RawContent":null,"Title":"Merge master into release 3.0.1xx for preview7 - SDK","State":"closed","Body":"Merge master to release/3.0.1xx for preview7\r\nCommonly referred to as the 'snap'","Url":"https://github.com/dotnet/sdk/pull/3382","RelatedDescription":"Closed or merged PR \"Merge master into release 3.0.1xx for preview7 - SDK\" (#3382)"},{"Id":"462962755","IsPullRequest":false,"CreatedAt":"2019-07-02T00:12:33","Actor":"bergbria","Number":"3383","RawContent":null,"Title":"'dotnet publish --no-restore --runtime X' fails when multiple RuntimeIdentifers are listed in the project file","State":"open","Body":"## Repro\r\n1. Create a .csproj with multiple ````<RuntimeIdentifiers>```` (e.g.  ````<RuntimeIdentifiers>osx-x64;win-x64</RuntimeIdentifiers>````)\r\n2. `dotnet restore`\r\n3. `dotnet publish --no-restore  --runtime win-x64`\r\n\r\nThis will fail with \r\n>error NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file. \r\n\r\n## Automated repro\r\nDownload/unzip \r\n[publish_multi_rid.zip](https://github.com/dotnet/sdk/files/3347730/publish_multi_rid.zip) and run repro.bat\r\n\r\n## Additional context\r\n* Omitting  `--no-restore` will cause different package versions to be used than would be produced the by original `dotnet restore`. While being icky in general, this also causes breaks when NuGet lock files are used (e.g. https://github.com/NuGet/Home/issues/8287)\r\n* This seems vaguely related to #2682 ","Url":"https://github.com/dotnet/sdk/issues/3383","RelatedDescription":"Open issue \"'dotnet publish --no-restore --runtime X' fails when multiple RuntimeIdentifers are listed in the project file\" (#3383)"},{"Id":"462905459","IsPullRequest":true,"CreatedAt":"2019-07-01T23:23:02","Actor":"swaroop-sridhar","Number":"3381","RawContent":null,"Title":"SingleFile: Update a test with ni-pdbs","State":"closed","Body":"The test GivenThatWeWantToPublishASingleFileApp.It_excludes_ni_pdbs_from_single_file\r\nchecks for the fact that ni.pdb files are not bundled into the single-file by default.\r\n\r\nThis test was expecting only the `<app>.ni.pdb` file to exist in the publish directory.\r\nHowever, in recent versions of the build, mscorlib.ni.pdb is also found.\r\n\r\nThis commit changes the test to accomodate additional files in the publish directory.","Url":"https://github.com/dotnet/sdk/pull/3381","RelatedDescription":"Closed or merged PR \"SingleFile: Update a test with ni-pdbs\" (#3381)"},{"Id":"462676233","IsPullRequest":true,"CreatedAt":"2019-07-01T13:50:12","Actor":"dotnet-maestro[bot]","Number":"3378","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190630.1\r\n- **Date Produced**: 6/30/2019 12:52 PM\r\n- **Commit**: 89fab80685c91024c8f9e21f1c37f62580f648f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19330.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3378","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3378)"},{"Id":"463343691","IsPullRequest":false,"CreatedAt":"2019-05-30T19:40:42","Actor":"DualBrain","Number":"3387","RawContent":null,"Title":"VB.NET \"My\" not working as expected?","State":"open","Body":"@cston and @KathleenDollard,\r\n\r\nHere is an isolated example running on the most recent bits as far as I can tell (at least with regards to the Microsoft.VisualBasic side of things).\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n    Console.WriteLine(My.Computer.Name)\r\n    Console.WriteLine((New Microsoft.VisualBasic.Devices.ServerComputer).Name)\r\n    Console.WriteLine(System.Environment.MachineName)\r\n  End Sub\r\nEnd Module\r\n\r\nThe first line doesn’t work in .NET Core 3.0; however, the second and third lines do.  Playing with the same code in the full .NET Framework, all three lines work and when you jump to the reference for My.Computer.Name, it goes to Microsoft.VisualBasic.Devices.ServerComputer.Name.  I then jumped back over to the .NET Core source tree and that property simply returns System.Environment.MachineName.  One thing I find interesting about this is it’s not a 1:1 map… how does My.Computer.Name map to a property inside of an instantiated instance of Microsoft.VisualBasic.Devices.ServerComputer?  Some “magic” black-box stuff there?\r\n\r\nSo am I just missing something as far as how to \"light up\" the My side of things when working with a .NET Core 3.0 console project?  Or is there some additional work that still has to be done beyond the work that has taken place within the Microsoft.VisualBasic namespace?\r\n\r\n(BTW, @cston great work thus far!)\r\n\r\nThanks.\r\n\r\nCory Smith","Url":"https://github.com/dotnet/sdk/issues/3387","RelatedDescription":"Open issue \"VB.NET \"My\" not working as expected?\" (#3387)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1148794653312868355","CreatedAt":"2019-07-10T03:22:43+00:00","UserScreenname":"dotnet","Text":"New .NET libraries for Azure. Check it out. The @AzureSdk team is looking for feedback. https://t.co/B6lEi9GIuA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"1148301725071216640","CreatedAt":"2019-07-08T18:44:00+00:00","UserScreenname":"dotnet","Text":"Check out this episode of #OnDotNet 🚀🚀\n\n \"Understanding how to use Task and ValueTask\"\n https://t.co/hV7oFV3zdI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":17,"RawContent":null},{"Id":"1146463009100853249","CreatedAt":"2019-07-03T16:57:36+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":4,"RawContent":null},{"Id":"1146188625828147200","CreatedAt":"2019-07-02T22:47:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":2,"RawContent":null},{"Id":"1144288349022085120","CreatedAt":"2019-06-27T16:56:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":1,"RawContent":null},{"Id":"1143896700047646727","CreatedAt":"2019-06-26T15:00:00+00:00","UserScreenname":"dotnet","Text":"Run samples and tutorials using Try .NET global tool \nhttps://t.co/xxmNIK7SVd https://t.co/yhtPGPTKds","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":31,"RawContent":null}]}},"RunOn":"2019-07-11T05:30:41.8912283Z","RunDurationInMilliseconds":16992}