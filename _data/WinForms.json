{"Data":{"GitHub":{"Issues":[{"Id":"387591410","IsPullRequest":true,"CreatedAt":"2018-12-05T04:45:45","Actor":"carlowahlstedt","Number":"155","RawContent":null,"Title":"Removed any comment that had any form of \"To be supplied\"","State":"open","Body":"Fixes #50.\r\n\r\nSimply removed all of the comments that had any form of \"To be supplied\" in them.","Url":"https://github.com/dotnet/winforms/pull/155","RelatedDescription":"Open PR \"Removed any comment that had any form of \"To be supplied\"\" (#155)"},{"Id":"387420500","IsPullRequest":false,"CreatedAt":"2018-12-05T02:34:12","Actor":"zsd4yr","Number":"139","RawContent":null,"Title":"Replace \"magic\" strings in Cursors.cs with const strings declared at top of file","State":"closed","Body":"actual:\r\n\r\n```c#\r\npublic static Cursor HSplit {\r\n            get {\r\n                if (hSplit == null)\r\n                    hSplit      = new Cursor(\"hsplit.cur\", 0);\r\n                return hSplit;\r\n            }\r\n        }\r\n\r\n```\r\n\r\nexpected:\r\n\r\n```c#\r\ninternal const string HSPLIT_CUR = \"hsplit.cur\" \r\n\r\n// ...\r\n\r\npublic static Cursor HSplit {\r\n            get {\r\n                if (hSplit == null)\r\n                    hSplit      = new Cursor(HSPLIT_CUR , 0);\r\n                return hSplit;\r\n            }\r\n        }\r\n\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/139","RelatedDescription":"Closed issue \"Replace \"magic\" strings in Cursors.cs with const strings declared at top of file\" (#139)"},{"Id":"387538641","IsPullRequest":true,"CreatedAt":"2018-12-05T00:22:26","Actor":"JeremyKuhne","Number":"154","RawContent":null,"Title":"Clean out Windows 9x code","State":"open","Body":"As much as I fondly remember Windows 95/98 I don't think we need the code to support it any more. :)\r\n\r\nThis removes a large chunk of 9x specific code as well as some other dead/unused code in interop.\r\n\r\nI have some other interop correctness and performance fixes that I'll follow this with.","Url":"https://github.com/dotnet/winforms/pull/154","RelatedDescription":"Open PR \"Clean out Windows 9x code\" (#154)"},{"Id":"387520502","IsPullRequest":true,"CreatedAt":"2018-12-04T23:08:30","Actor":"zsd4yr","Number":"153","RawContent":null,"Title":"pkg consumes facades and other binaries","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/153","RelatedDescription":"Open PR \"pkg consumes facades and other binaries\" (#153)"},{"Id":"387503937","IsPullRequest":true,"CreatedAt":"2018-12-04T22:26:43","Actor":"JuditRose","Number":"152","RawContent":null,"Title":"Fixed developer guide link","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/152","RelatedDescription":"Closed or merged PR \"Fixed developer guide link\" (#152)"},{"Id":"387490236","IsPullRequest":true,"CreatedAt":"2018-12-04T21:36:33","Actor":"raffaeler","Number":"151","RawContent":null,"Title":"Using NameOf when throwing exceptions","State":"open","Body":"Created a new pull request as [requested here](https://github.com/dotnet/winforms/pull/115#issuecomment-444223408)\r\n\r\nThis pull request is a refactoring on all the argument exceptions specifying the name of the argument as hardcoded strings. All of them have been replaced with nameof(argumentname).\r\nSome argument name were wrong, now they are fixed.","Url":"https://github.com/dotnet/winforms/pull/151","RelatedDescription":"Open PR \"Using NameOf when throwing exceptions\" (#151)"},{"Id":"387487066","IsPullRequest":true,"CreatedAt":"2018-12-04T21:28:01","Actor":"zsd4yr","Number":"150","RawContent":null,"Title":"Update .gitignore to ignore vscode","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/150","RelatedDescription":"Open PR \"Update .gitignore to ignore vscode\" (#150)"},{"Id":"387471833","IsPullRequest":true,"CreatedAt":"2018-12-04T20:44:28","Actor":"zsd4yr","Number":"149","RawContent":null,"Title":"Update README.md to link to designer support issue","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/149","RelatedDescription":"Open PR \"Update README.md to link to designer support issue\" (#149)"},{"Id":"387447158","IsPullRequest":true,"CreatedAt":"2018-12-04T20:41:53","Actor":"psupina","Number":"145","RawContent":null,"Title":"Corrected the link to the Porting guide","State":"closed","Body":"The link \"Porting guide\" is leading to a non-existent file. This PR includes the fix to the link.","Url":"https://github.com/dotnet/winforms/pull/145","RelatedDescription":"Closed or merged PR \"Corrected the link to the Porting guide\" (#145)"},{"Id":"387469421","IsPullRequest":true,"CreatedAt":"2018-12-04T20:37:24","Actor":"raffaeler","Number":"148","RawContent":null,"Title":"Enhance code to use Span<byte>","State":"open","Body":"Reopening [by request](https://github.com/dotnet/winforms/pull/114). It has been closed accidentally and could not been reopened.\r\n\r\nThis pull request includes a couple of overloads taking Span in addition to byte[], and a couple of optimizations to avoid copying memory (thanks to Span).","Url":"https://github.com/dotnet/winforms/pull/148","RelatedDescription":"Open PR \"Enhance code to use Span<byte>\" (#148)"},{"Id":"387465079","IsPullRequest":false,"CreatedAt":"2018-12-04T20:25:16","Actor":"bobasaurus","Number":"147","RawContent":null,"Title":"WinForms Designer Support","State":"open","Body":"In Visual Studio 2019 Preview 1, there is no project template for generating .NET Core 3 WinForms projects.  If I instead run on the command line:\r\n\r\n`dotnet new winforms -o winforms_core_test`\r\n\r\na project is created successfully.  I can then open the generated .csproj file in VS2019.  But the WinForms designer doesn't seem to be available.  Typically the right-click context menu shows \"view designer\", but it is missing, and shift+f7 after opening the code doesn't work either:\r\n\r\n![missing designer](https://i.imgur.com/wDsfmAS.jpg)\r\n\r\nOn a standard WinForms project, the Designer.cs file is typically shown as a child of the form source code, and the designer is available on the context menu:\r\n\r\n![what it should look like](https://i.imgur.com/WT7jlJV.jpg)\r\n\r\nIs there any way to use the designer with .NET Core 3, or is it planned in the future?  \r\n","Url":"https://github.com/dotnet/winforms/issues/147","RelatedDescription":"Open issue \"WinForms Designer Support\" (#147)"},{"Id":"387444805","IsPullRequest":false,"CreatedAt":"2018-12-04T19:54:21","Actor":"zsd4yr","Number":"143","RawContent":null,"Title":"Remove the word hack from repo comments","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/issues/143","RelatedDescription":"Closed issue \"Remove the word hack from repo comments\" (#143)"},{"Id":"387445266","IsPullRequest":true,"CreatedAt":"2018-12-04T19:49:27","Actor":"zsd4yr","Number":"144","RawContent":null,"Title":"remove the word hack","State":"closed","Body":"Fixes #143","Url":"https://github.com/dotnet/winforms/pull/144","RelatedDescription":"Closed or merged PR \"remove the word hack\" (#144)"},{"Id":"387449844","IsPullRequest":false,"CreatedAt":"2018-12-04T19:43:58","Actor":"kpreisser","Number":"146","RawContent":null,"Title":"Windows Task Dialog","State":"open","Body":"Hi,\r\n\r\nOn Windows Vista and higher, the [Task Dialog](https://docs.microsoft.com/en-us/windows/desktop/Controls/task-dialogs-overview) is available that provides many more features than a Message Box. While you can show a [Message Box](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.messagebox?view=netframework-4.7.2) in WinForms and WPF, there is no \"official\" implementation of the Task Dialog yet in .NET WinForms/WPF (there was an implementation in the Windows API Code Pack 1.1, but it is no longer available/updated, and did not implement all features).\r\n\r\nI recently added a [Task Dialog implementation for .NET](https://github.com/kpreisser/TaskDialog) (wrapper around the Windows API) in order to have all the features that are available in the native API (including navigation).\r\n\r\nFor example, you can update the Task Dialog's contents while it is opened, and can also programatically close it. We currently the Task Dialog in a (commercial) WPF application to show a marquee progress bar while an operation (like database backup) is running, and then navigate it to one showing a green header to indicate the operation is finished.\r\n\r\nVisual Studio is also using a Task Dialog:\r\n![taskdialog-vs](https://user-images.githubusercontent.com/13289184/49468906-69018680-f806-11e8-9964-68db26da5cae.png)\r\n\r\n\r\nDo you think a Task Dialog could also be added directly to WinForms/WPF?\r\n\r\nThanks!","Url":"https://github.com/dotnet/winforms/issues/146","RelatedDescription":"Open issue \"Windows Task Dialog\" (#146)"},{"Id":"387437065","IsPullRequest":true,"CreatedAt":"2018-12-04T19:21:52","Actor":"zsd4yr","Number":"141","RawContent":null,"Title":"Update debugging.md","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/141","RelatedDescription":"Closed or merged PR \"Update debugging.md\" (#141)"},{"Id":"387424701","IsPullRequest":false,"CreatedAt":"2018-12-04T18:37:34","Actor":"sylveon","Number":"140","RawContent":null,"Title":"Use system cursors in System.Windows.Forms.Cursors","State":"open","Body":"Currently, System.Windows.Forms.Cursors has a few embedded cursors that where added for backwards compatibility with old operating systems that are not supported anymore. They should be replaced to use system cursors.\r\n\r\nThe following cursors are embedded:\r\n - [ ] HSplit\r\n - [ ] VSplit\r\n - [ ] NoMove2D\r\n - [ ] NoMoveHoriz\r\n - [ ] NoMoveVert\r\n - [ ] PanEast\r\n - [ ] PanNE\r\n - [ ] PanNorth\r\n - [ ] PanNW\r\n - [ ] PanSE\r\n - [ ] PanSouth\r\n - [ ] PanSW\r\n - [ ] PanWest\r\n - [ ] Hand (PR opened in #138)\r\n\r\nUnit tests for the changes are required.","Url":"https://github.com/dotnet/winforms/issues/140","RelatedDescription":"Open issue \"Use system cursors in System.Windows.Forms.Cursors\" (#140)"},{"Id":"387411176","IsPullRequest":true,"CreatedAt":"2018-12-04T18:01:15","Actor":"sylveon","Number":"138","RawContent":null,"Title":"Use system hand cursor","State":"open","Body":"Winforms had a hardcoded hand cursor because it originally supported Win98, which doesn't haves a system one. This change now uses the system cursor, because Windows 98 is obviously out of support.","Url":"https://github.com/dotnet/winforms/pull/138","RelatedDescription":"Open PR \"Use system hand cursor\" (#138)"},{"Id":"387396999","IsPullRequest":true,"CreatedAt":"2018-12-04T17:26:23","Actor":"dotMorten","Number":"137","RawContent":null,"Title":"Remove attribute not being used","State":"open","Body":"The `DefaultProperty` was pointing to a property that doesn't exist, and the attribute can be removed in this case. This class is not visible in the designer. Addresses #102","Url":"https://github.com/dotnet/winforms/pull/137","RelatedDescription":"Open PR \"Remove attribute not being used\" (#137)"},{"Id":"387275408","IsPullRequest":true,"CreatedAt":"2018-12-04T14:03:05","Actor":"dotnet-maestro[bot]","Number":"136","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18603.7\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/136","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#136)"},{"Id":"387264271","IsPullRequest":false,"CreatedAt":"2018-12-04T12:32:11","Actor":"KlausLoeffelmann","Number":"135","RawContent":null,"Title":"Setting/Getting HighDpiMode in WinForms Core Apps","State":"open","Body":"## Rationale\r\n\r\nDevelopers in WinForms Core currently have no way to **set the HighDPI mode** in their WinForms App. In a future version of .NET Core 3.0, this will again be possible via App.Manifest; however, a change in the settings requires then their app to be rebuilt. The previous option in the classic framework to control this setting via App.Config has been completely dropped in .NET Core. Currently, the only way to set the HighDPIMode is via P/Invoke. The `Application.SetHighDpiMode` method and `Application.HighDpiMode` property are an **easy to apply** and **to discover** alternative.\r\n\r\n## Description\r\n\r\nFollowing `EnableVisualStyles()`/`RenderWithVisualStyles` of the `Application` class, we propose the method `SetHighDpiMode` which switches to the corresponding HighDPI mode, if that HighDPIMode setting a) has not been set before by other means (App.Manifest, P/Invoke before `Application.Run` – in this case the value to be set is ignored), and b) that `HighDPIMode` setting was set via `SetHighDpiMode` before calling `Application.Run` (or the first UI Element has been rendered).\r\n\r\nPossible settings values are provided by the `HighDpiMode` Enum:\r\n\r\n* `DpiUnaware`\r\n* `SystemAware`\r\n* `PerMonitor`\r\n* `PerMonitorV2`\r\n\r\nIf a setting is attempted to be set which is not supported by the underlying OS, `SetHighDpiMode` automatically assumes the next possible setting on that OS; SetHighDpiMode never directly triggers an exception, but gives feedback as to whether the setting could be successfully set (`true`) or not (`false`).\r\n\r\nIn addition developers can query the actual setting of the current HighDpiMode at any time using the `Application.HighDpiMode` property, which returns one of the available `HighDpiMode` Enum values.\r\n\r\nIn the current implementation, we should limit the method/property to the process DpiAwareness rather than a Window DpiAwareness, and should probably think about extending this to a static method/property of the Control class to the windows DpiAwareness (@Tanya-Solyanik, thoughts?).\r\n","Url":"https://github.com/dotnet/winforms/issues/135","RelatedDescription":"Open issue \"Setting/Getting HighDpiMode in WinForms Core Apps\" (#135)"},{"Id":"387175554","IsPullRequest":false,"CreatedAt":"2018-12-04T08:42:14","Actor":"stefanov-stefan","Number":"134","RawContent":null,"Title":"PlaceholderText API addition to TextBox control","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\nWith the following PR (https://github.com/dotnet/winforms/pull/96) we have proposed addition of new property to the TextBox control called PlaceholderText. The property accepts string which will be drawn when the control has no text it in and is not on focus. Quite useful to indicate what is the expected input.\r\n\r\nLet me know if you need more information for the API Approval process. ","Url":"https://github.com/dotnet/winforms/issues/134","RelatedDescription":"Open issue \"PlaceholderText API addition to TextBox control\" (#134)"},{"Id":"387129379","IsPullRequest":true,"CreatedAt":"2018-12-04T08:04:00","Actor":"richlander","Number":"133","RawContent":null,"Title":"Simplify content for repo","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/133","RelatedDescription":"Closed or merged PR \"Simplify content for repo\" (#133)"},{"Id":"387061729","IsPullRequest":true,"CreatedAt":"2018-12-04T00:10:47","Actor":"AdamYoblick","Number":"132","RawContent":null,"Title":"added helix token env vars for later use","State":"open","Body":"Fixes #108","Url":"https://github.com/dotnet/winforms/pull/132","RelatedDescription":"Open PR \"added helix token env vars for later use\" (#132)"},{"Id":"387053573","IsPullRequest":true,"CreatedAt":"2018-12-03T23:57:42","Actor":"zsd4yr","Number":"129","RawContent":null,"Title":"Update contributing-guide.md","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/129","RelatedDescription":"Closed or merged PR \"Update contributing-guide.md\" (#129)"},{"Id":"387046075","IsPullRequest":true,"CreatedAt":"2018-12-03T23:57:35","Actor":"Shyam-Gupta","Number":"126","RawContent":null,"Title":"Fix for bug 116: VisualStyles fails to activate with current setup to build System.Windows.Forms.dll","State":"closed","Body":"Bug: https://github.com/dotnet/winforms/issues/116\r\n\r\nFix: Added XPThemes to manifest\r\n\r\nTesting:\r\n- Added debug assertion\r\n- Added unit test\r\n- Tested manually","Url":"https://github.com/dotnet/winforms/pull/126","RelatedDescription":"Closed or merged PR \"Fix for bug 116: VisualStyles fails to activate with current setup to build System.Windows.Forms.dll\" (#126)"},{"Id":"387056628","IsPullRequest":true,"CreatedAt":"2018-12-03T23:48:40","Actor":"AdamYoblick","Number":"131","RawContent":null,"Title":"fixed ci badge link","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/131","RelatedDescription":"Closed or merged PR \"fixed ci badge link\" (#131)"},{"Id":"387055574","IsPullRequest":true,"CreatedAt":"2018-12-03T23:44:14","Actor":"AdamYoblick","Number":"130","RawContent":null,"Title":"fixed CI badge","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/130","RelatedDescription":"Closed or merged PR \"fixed CI badge\" (#130)"},{"Id":"387046198","IsPullRequest":true,"CreatedAt":"2018-12-03T23:18:01","Actor":"zsd4yr","Number":"127","RawContent":null,"Title":"corefx links need to be winforms links (oops)","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/127","RelatedDescription":"Closed or merged PR \"corefx links need to be winforms links (oops)\" (#127)"},{"Id":"387048501","IsPullRequest":true,"CreatedAt":"2018-12-03T23:17:04","Actor":"AdamYoblick","Number":"128","RawContent":null,"Title":"Updated building and testing docs","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/128","RelatedDescription":"Closed or merged PR \"Updated building and testing docs\" (#128)"},{"Id":"387041344","IsPullRequest":true,"CreatedAt":"2018-12-03T22:54:10","Actor":"zsd4yr","Number":"125","RawContent":null,"Title":"Oxford comma in README","State":"closed","Body":"also reference to numbered tasks should be numbered","Url":"https://github.com/dotnet/winforms/pull/125","RelatedDescription":"Closed or merged PR \"Oxford comma in README\" (#125)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-05T05:31:15.4485616Z","RunDurationInMilliseconds":988}