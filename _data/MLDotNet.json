{"Data":{"GitHub":{"Issues":[{"Id":"535000982","IsPullRequest":false,"CreatedAt":"2019-12-15T16:45:27","Actor":"KiransHub","Number":"4555","RawContent":null,"Title":"AutoML Nuget Package won't train against TSV","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Win10 64bit\r\n- **.NET Version (eg., dotnet --info)**: \r\ndotnet core 3.0\r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nInstalled AutoML nuget package. Setup sentiment analysis training. Selected correct labels and features columns. \r\n\r\nWent to train and... \r\n\r\n- **What happened?**\r\n\r\nI got a message almost immediately \"Failed. See more in Output pane\". \r\n\r\nThe output pane for \"Machine Learning\" is completely empty! \r\n\r\n- **What did you expect?**\r\nAt least an error... \r\n\r\nscreenshot:\r\n\r\n![image](https://user-images.githubusercontent.com/4026553/70447947-814e5600-1a97-11ea-8515-6c53bd2c77c7.png)\r\n\r\nHere's the input data pane: \r\n\r\n![image](https://user-images.githubusercontent.com/4026553/70448245-fe79cb00-1a97-11ea-8040-79b9deeccb83.png)\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4555","RelatedDescription":"Closed issue \"AutoML Nuget Package won't train against TSV\" (#4555)"},{"Id":"537934897","IsPullRequest":false,"CreatedAt":"2019-12-14T16:31:43","Actor":"priyankagupta639","Number":"4578","RawContent":null,"Title":"YOLOv3 shows ArgumentOutOfRangeException","State":"open","Body":"Hello\r\nI'm working on the latest version of Visual Studio 2019 on Windows 10\r\nI have tried to work on object detection using yolov3 model. The yolov3.onnx file has been downloaded from [https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov3](url)\r\n\r\nBelow is the snippet of the error shown on the console screen.\r\n![consoleError](https://user-images.githubusercontent.com/33253391/70851172-f9fa4b80-1eb7-11ea-857b-0c27402650f7.PNG)\r\n\r\nThis is the image of the output.\r\n![output error](https://user-images.githubusercontent.com/33253391/70851408-9d4c6000-1eba-11ea-8723-6861c5ef5755.PNG)\r\n\r\n\r\nThe code is similar as used for object detection using tiny-yolov2. Following are the changes made in the code.\r\n\r\n1.) ImageNetPrediction.cs file\r\npublic class ImageNetPrediction\r\n    {\r\n        [ColumnName(\"yolonms_layer_1/ExpandDims_3:0\")]\r\n        public float[] PredictedLabels;\r\n    }\r\n\r\n2.) YoloOutputParser.cs\r\npublic const int ROW_COUNT = 13;\r\npublic const int COL_COUNT = 13;\r\npublic const int CHANNEL_COUNT = 125;\r\npublic const int BOXES_PER_CELL = 5;\r\npublic const int BOX_INFO_FEATURE_COUNT = 5;\r\npublic const int CLASS_COUNT = 80;\r\npublic const float CELL_WIDTH = 32;\r\npublic const float CELL_HEIGHT = 32;\r\n.\r\n.\r\n.\r\nprivate string[] labels = new string[]\r\n        {\r\n            \"person\", \"bicycle\", \"car\", \"motorbike\", \"aeroplane\", \"bus\", \"train\", \"truck\", \"boat\", \"traffic light\", \"fire hydrant\", \"stop sign\", \"parking meter\", \"bench\", \"bird\", \"cat\", \"dog\",\r\n            \"horse\", \"sheep\", \"cow\", \"elephant\", \"bear\", \"zebra\", \"giraffe\", \"backpack\", \"umbrella\", \"handbag\", \"tie\", \"suitcase\", \"frisbee\", \"skis\", \"snowboard\", \"sports ball\", \"kite\",\r\n            \"baseball bat\", \"baseball glove\", \"skateboard\", \"surfboard\", \"tennis racket\", \"bottle\", \"wine glass\", \"cup\", \"fork\", \"knife\", \"spoon\", \"bowl\", \"banana\", \"apple\", \"sandwich\", \"orange\",\r\n            \"broccoli\", \"carrot\", \"hot dog\", \"pizza\", \"donut\", \"cake\", \"chair\", \"sofa\", \"pottedplant\", \"bed\", \"diningtable\", \"toilet\", \"tvmonitor\", \"laptop\", \"mouse\", \"remote\", \"keyboard\",\r\n            \"cell phone\", \"microwave\", \"oven\", \"toaster\", \"sink\", \"refrigerator\", \"book\", \"clock\", \"vase\", \"scissors\", \"teddy bear\", \"hair drier\", \"toothbrush\"\r\n        };\r\n\r\n3.) OnnxModelScorer.cs\r\npublic struct TinyYoloModelSettings\r\n        {\r\n            public const string ModelInput = \"input_1\";\r\n            public const string ModelOutput = \"yolonms_layer_1/ExpandDims_3:0\";\r\n        }\r\n.\r\n.\r\n.\r\nvar pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"image\", imageFolder: \"\", inputColumnName: nameof(ImageNetData.ImagePath))\r\n                            .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"image\", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: \"input_1\"))\r\n                            .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"image\"))\r\n                            .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modelLocation, outputColumnNames: new[] { TinyYoloModelSettings.ModelOutput }, inputColumnNames: new[] { TinyYoloModelSettings.ModelInput }));\r\n.\r\n.\r\n.\r\npublic static void Main()\r\n        {\r\n            var assetsRelativePath = @\"../../../assets\";\r\n            string assetsPath = GetAbsolutePath(assetsRelativePath);\r\n            var modelFilePath = Path.Combine(assetsPath, \"Model\", \"yolov3.onnx\");\r\n            var imagesFolder = Path.Combine(assetsPath, \"images\");\r\n            var outputFolder = Path.Combine(assetsPath, \"images\", \"output\");\r\n\r\n\r\n\r\nAlso, how should I carry out the Preprocessing and Postprocessing steps?","Url":"https://github.com/dotnet/machinelearning/issues/4578","RelatedDescription":"Open issue \"YOLOv3 shows ArgumentOutOfRangeException\" (#4578)"},{"Id":"535073567","IsPullRequest":true,"CreatedAt":"2019-12-14T01:40:25","Actor":"sharwell","Number":"4557","RawContent":null,"Title":"Add a test handler for AppDomain.UnhandledException","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4557","RelatedDescription":"Closed or merged PR \"Add a test handler for AppDomain.UnhandledException\" (#4557)"},{"Id":"537833474","IsPullRequest":true,"CreatedAt":"2019-12-14T00:16:41","Actor":"Lynx1820","Number":"4577","RawContent":null,"Title":"Added onnx export support for VectorWhitening","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4577","RelatedDescription":"Open PR \"Added onnx export support for VectorWhitening\" (#4577)"},{"Id":"537270139","IsPullRequest":true,"CreatedAt":"2019-12-13T23:19:00","Actor":"frank-dong-ms","Number":"4570","RawContent":null,"Title":"fix issue 4528, use thread safe ConcurrentDictionary instead of Dictionary","State":"closed","Body":"fix issue #4528 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4570","RelatedDescription":"Closed or merged PR \"fix issue 4528, use thread safe ConcurrentDictionary instead of Dictionary\" (#4570)"},{"Id":"537772250","IsPullRequest":true,"CreatedAt":"2019-12-13T20:51:00","Actor":"antoniovs1029","Number":"4576","RawContent":null,"Title":"Fixes #4571. About memory leak when using FeaturizeText.","State":"open","Body":"In this PR I include 2 proposals to solve issue #4571:\r\n1. Modifying NormStr constructor\r\n- OR -\r\n2. Modifying TextNormalizer\r\n- OR -\r\n3. Modifying NormStr.Pool Get Method\r\n\r\n(the proposals are mutually exclusive, in that we are supposed to choose one of those, but I've included the three in this PR so that we can discuss about them, since @harishsk and I are unsure about the overall impact of each one, please let us know your opinion, and if there's anything else I should test)\r\n\r\nFor reference: Offline, @daholste provided me with a dataset which I can't share in here because of privacy reasons. It had 100k rows and 2.5k columns. When featurizing 22 of those columns, he got 22 NormStr Pools which, together, had an inclusive size of 2.25 GB, because many entire rows where held in memory, mainly because of the reason I described in [this comment](https://github.com/dotnet/machinelearning/issues/4571). The text that follows assume experiments based on that dataset, finding n-grams of size 1.\r\n\r\nWhen using Proposal 1 the inclusive size of the NormStr Pools went down from 2.25GB to 22MB. When using Proposal 2 it went down to 30MB. With Proposal 3 it went down to 22MB. With any of the proposals, or without them, the time for fitting was around 40 seconds on my machine.\r\n\r\nAll of the proposals are based in the idea of creating a `ReadOnlyMemory<char>` that doesn't have an `_object` member holding a reference to the string of the whole row.\r\n\r\n### Proposal 1 - Modifying NormStr constructor\r\n[Link to proposal](https://github.com/dotnet/machinelearning/pull/4576#discussion_r357827889)\r\n- Each NormStr has _object that only contains the text that NormStr is representing, and it's saved as a char[]\r\n- With @daholste's dataset 260k NormStrs are created, and each one of those holds a reference to the corresponding char[]\r\n- When fitting with this proposal, this was the Process Memory, notice the oscillations:\r\n![image](https://user-images.githubusercontent.com/38739674/70831324-1a86b080-1da7-11ea-957a-4a4c0675c83d.png)\r\n\r\n@harishsk  and I think the oscillations in memory usage are caused by the strings that are created with this implementation, but that are then garbage collected every once in a while, because no actual reference to them is kept.\r\n- All the references to entire rows were gone\r\n\r\n### Proposal 2 - Modifying Text Normalizer\r\n[Link to proposal](https://github.com/dotnet/machinelearning/pull/4576#discussion_r357827979)\r\n- _In general_, each NormStr has a _object of type string, which holds the content of the entire column where the NormStr was found.\r\n- With the dataset, 260k NormStrs are created, and less than 120k strings are held in memory.\r\n- When fitting with this proposal, this was the Process Memory graph, notice no oscillations:\r\n![image](https://user-images.githubusercontent.com/38739674/70831302-0d69c180-1da7-11ea-8e62-828b482188e9.png)\r\n\r\n- ~~Some references to entire rows were still there (I am still figuring out why). But there were only a few of them, compared to when there was no fix; as it is shown in the decrease in size of the NormStr pools I mentioned (from 2.2GB to 30MB), this proposal is still useful, at least for @daholste case.~~ All the references to strings containing entire rows are gone.\r\n\r\n### Proposal 3 - Modifying NormStr.Pool Get Method\r\n[Link to proposal](https://github.com/dotnet/machinelearning/pull/4576#discussion_r357871260)\r\n- Each NormStr has _object that only contains the text of the string that NormStr is representing\r\n- With the dataset, 260k NormStr were created, each one holding a reference to their corresponding string.\r\n- When fitting with this proposal, this was the Process Memory, notice the oscillations:\r\n![image](https://user-images.githubusercontent.com/38739674/70838311-7a3b8680-1dbc-11ea-91b5-29509bf4f100.png)\r\n- All the references to entire rows were gone","Url":"https://github.com/dotnet/machinelearning/pull/4576","RelatedDescription":"Open PR \"Fixes #4571. About memory leak when using FeaturizeText.\" (#4576)"},{"Id":"537388411","IsPullRequest":false,"CreatedAt":"2019-12-13T07:16:56","Actor":"jigarhshah17","Number":"4575","RawContent":null,"Title":"how to build DataViewSchema with Annotations?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nwindows 7\r\n- **.NET Version (eg., dotnet --info)**: \r\n4.6.1\r\n### Issue\r\nhow to build DataViewSchema with Annotations?\r\n- **What did you do?**\r\nhow to build DataViewSchema with Annotations?\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4575","RelatedDescription":"Open issue \"how to build DataViewSchema with Annotations?\" (#4575)"},{"Id":"537387635","IsPullRequest":false,"CreatedAt":"2019-12-13T07:14:45","Actor":"jigarhshah17","Number":"4574","RawContent":null,"Title":"I am able to dynamically train and create my regression model just fine from a string[] of column names. However, when I try to pass in a dynamic object with the same Parameter names as Dictionary Key Pair properties it throw the error:  System.ArgumentOutOfRangeException: 'Could not find input column '<MyColumn>'' Where <MyColumn> is the first parameter that the model is looking for.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nwindows 7\r\n- **.NET Version (eg., dotnet --info)**: \r\n4.6.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am able to dynamically train and create my regression model just fine from a string[] of column names. However, when I try to pass in a dynamic object with the same Parameter names as for create CreatePredictionEngine\r\n- **What happened?**\r\nIt throw the error:\r\n\r\nSystem.ArgumentOutOfRangeException: 'Could not find input column '<MyColumn>\r\n\r\nSystem.ArgumentOutOfRangeException: Could not find input column 'Pressure'\r\nParameter name: inputSchema\r\n   at Microsoft.ML.Data.OneToOneTransformerBase.CheckInput(DataViewSchema inputSchema, Int32 col, Int32& srcCol)\r\n   at Microsoft.ML.Data.OneToOneTransformerBase.OneToOneMapperBase..ctor(IHost host, OneToOneTransformerBase parent, DataViewSchema inputSchema)\r\n   at Microsoft.ML.Transforms.ColumnCopyingTransformer.Mapper..ctor(ColumnCopyingTransformer parent, DataViewSchema inputSchema, ValueTuple`2[] columns)\r\n   at Microsoft.ML.Transforms.ColumnCopyingTransformer.MakeRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.RowToRowTransformerBase.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n\r\n- **What did you expect?**\r\nMLContextRef.Model.CreatePredictionEngine use dynamic created class or any other way i want to achive requirement.\r\n\r\n### Source code / logs\r\n\r\npredictionEngine = MLContextRef.Model.CreatePredictionEngine(dynamic created class obj, result)(loadedModel)\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4574","RelatedDescription":"Open issue \"I am able to dynamically train and create my regression model just fine from a string[] of column names. However, when I try to pass in a dynamic object with the same Parameter names as Dictionary Key Pair properties it throw the error:  System.ArgumentOutOfRangeException: 'Could not find input column '<MyColumn>'' Where <MyColumn> is the first parameter that the model is looking for.\" (#4574)"},{"Id":"537302319","IsPullRequest":true,"CreatedAt":"2019-12-13T01:39:22","Actor":"najeeb-kazmi","Number":"4573","RawContent":null,"Title":"Fix FastTree regression samples","State":"open","Body":"Fix #4572 ","Url":"https://github.com/dotnet/machinelearning/pull/4573","RelatedDescription":"Open PR \"Fix FastTree regression samples\" (#4573)"},{"Id":"537302116","IsPullRequest":false,"CreatedAt":"2019-12-13T01:38:26","Actor":"najeeb-kazmi","Number":"4572","RawContent":null,"Title":"FastTree regression samples use FastForest instead","State":"open","Body":"I noticed some FastTree samples using FastForest, namely:\r\nhttps://github.com/dotnet/machinelearning/blob/fa62c8196e345de82918469b56c2c6c3b16321c1/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/FastTree.cs#L30-L32\r\nand\r\nhttps://github.com/dotnet/machinelearning/blob/fa62c8196e345de82918469b56c2c6c3b16321c1/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/FastTreeTweedie.cs#L30-L32\r\nAppears to be a mistake introduced in PR #3948.","Url":"https://github.com/dotnet/machinelearning/issues/4572","RelatedDescription":"Open issue \"FastTree regression samples use FastForest instead\" (#4572)"},{"Id":"536745718","IsPullRequest":false,"CreatedAt":"2019-12-13T00:13:40","Actor":"saltywu","Number":"4566","RawContent":null,"Title":"cache elapsedSeconds error","State":"closed","Body":"Method：Samples.Dynamic.Cache.TimeToScanIDataView\r\nLine81：return (lines, columnAverage, elapsed.Seconds);\r\n\r\nRecommend to:return (lines, columnAverage, elapsed.TotalMilliseconds);","Url":"https://github.com/dotnet/machinelearning/issues/4566","RelatedDescription":"Closed issue \"cache elapsedSeconds error\" (#4566)"},{"Id":"537273936","IsPullRequest":false,"CreatedAt":"2019-12-12T23:48:47","Actor":"daholste","Number":"4571","RawContent":null,"Title":"Memory leak when featurizing text with the default settings","State":"open","Body":"When featurizing text with the default settings, references to the entire dataset rows are kept around","Url":"https://github.com/dotnet/machinelearning/issues/4571","RelatedDescription":"Open issue \"Memory leak when featurizing text with the default settings\" (#4571)"},{"Id":"537197840","IsPullRequest":true,"CreatedAt":"2019-12-12T20:31:04","Actor":"sharwell","Number":"4569","RawContent":null,"Title":"Enable Conditional Numerical Reproducibility for tests","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4569","RelatedDescription":"Open PR \"Enable Conditional Numerical Reproducibility for tests\" (#4569)"},{"Id":"536088250","IsPullRequest":true,"CreatedAt":"2019-12-12T19:44:02","Actor":"frank-dong-ms","Number":"4563","RawContent":null,"Title":"add document for method ChnageModelThreshold","State":"closed","Body":"Fixes issue #4527 , add documentation for public method ChnageModelThreshold.\r\n\r\nThis method is introduced in #2969\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4563","RelatedDescription":"Closed or merged PR \"add document for method ChnageModelThreshold\" (#4563)"},{"Id":"537154606","IsPullRequest":false,"CreatedAt":"2019-12-12T18:55:25","Actor":"BillMcCrary","Number":"4568","RawContent":null,"Title":"Tensorflow.RuntimeError: 'Current graph is not default graph. Default Graph Key","State":"open","Body":"We would like to be able to load multiple models from disk on startup, then infer against them without having to reload from disk each pass.\r\n\r\nIf I try to keep 2 models in memory at the same time, I get an error if not calling against the last one initialized from disk.\r\n\r\ni.e. this works - only including code needed to generate the error:\r\n```\r\n            MLContext context = new MLContext();\r\n\r\n            TensorFlowModel model1 = context.Model.LoadTensorFlowModel(\"Model1\");\r\n\r\n            TensorFlowEstimator estimator1 = model1.ScoreTensorFlowModel(\"serving_default_input_1\", \"StatefulPartitionedCall\");\r\n\r\n            TensorFlowModel model2 = context.Model.LoadTensorFlowModel(\"Model2\");\r\n\r\n            TensorFlowEstimator estimator2 = model2.ScoreTensorFlowModel(\"serving_default_input_1\", \"StatefulPartitionedCall\");\r\n```\r\n\r\n\r\nbut this throws an error like \"Tensorflow.RuntimeError: 'Current graph is not default graph\":\r\n```\r\n            MLContext context = new MLContext();\r\n\r\n            TensorFlowModel model1 = context.Model.LoadTensorFlowModel(\"Model1\");\r\n\r\n            TensorFlowModel model2 = context.Model.LoadTensorFlowModel(\"Model2\");\r\n            \r\n            TensorFlowEstimator estimator1 = model1.ScoreTensorFlowModel(\"serving_default_input_1\", \"StatefulPartitionedCall\");\r\n\r\n            TensorFlowEstimator estimator2 = model2.ScoreTensorFlowModel(\"serving_default_input_1\", \"StatefulPartitionedCall\");\r\n```\r\n\r\n\r\nI guess we could roll our own process to load from disk to stream 1x, then call context.Model.Load() but that still smells wrong - we're still initializing the model over and over just avoiding disk calls.  Is this a bug or are we doing something wrong?","Url":"https://github.com/dotnet/machinelearning/issues/4568","RelatedDescription":"Open issue \"Tensorflow.RuntimeError: 'Current graph is not default graph. Default Graph Key\" (#4568)"},{"Id":"537109238","IsPullRequest":false,"CreatedAt":"2019-12-12T17:14:37","Actor":"natke","Number":"4567","RawContent":null,"Title":"Incorrect transformer for TypeConvertingEstimator in summary description","State":"open","Body":"Should be TypeConvertingTransformer\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 275f68f3-e68d-effc-a50d-f885902b3d70\n* Version Independent ID: 68b69288-3e30-9de2-e987-ccff3cd3f08b\n* Content: [TypeConvertingEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.typeconvertingestimator?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/TypeConvertingEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/TypeConvertingEstimator.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @natke\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4567","RelatedDescription":"Open issue \"Incorrect transformer for TypeConvertingEstimator in summary description\" (#4567)"},{"Id":"536713828","IsPullRequest":true,"CreatedAt":"2019-12-12T02:04:36","Actor":"sharwell","Number":"4565","RawContent":null,"Title":"Updated baselines","State":"open","Body":"* Update CheckEqualityFromPathsCore for clearer output on failure\r\n* Update test outputs now that validation is enabled","Url":"https://github.com/dotnet/machinelearning/pull/4565","RelatedDescription":"Open PR \"Updated baselines\" (#4565)"},{"Id":"534582582","IsPullRequest":true,"CreatedAt":"2019-12-11T23:00:04","Actor":"sharwell","Number":"4550","RawContent":null,"Title":"Add tests for ParameterSet equality","State":"closed","Body":"📝 Builds on #4549\r\n\r\nThis change stabilizes test coverage in `ParameterSet.Equals` and `ParameterSet.ContainsParamValue`.","Url":"https://github.com/dotnet/machinelearning/pull/4550","RelatedDescription":"Closed or merged PR \"Add tests for ParameterSet equality\" (#4550)"},{"Id":"535419919","IsPullRequest":false,"CreatedAt":"2019-12-11T16:28:14","Actor":"mveeris","Number":"4558","RawContent":null,"Title":"ImageClassification training stops","State":"closed","Body":"### System information\r\n\r\n- **.NET Version .NET Core 3.0**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTrying to train MulticlassClassification with dataset of 2096 images and 8 classes\r\n- **What happened?**\r\nTraining just stops at one point in the Fit() method. It never exits the method.\r\nNo exeptions as well.\r\nWhen I reduce the number images for example to 1100, then training successfuly ends.\r\nAnd it doesn't seem to make any difference witch images I remove.\r\n\r\n### Source code / logs\r\nThis is the last log in the output window. After that CPU activity remains high for few seconds and \r\nthen drops to 0.\r\n\r\nPhase: Bottleneck Computation, Dataset used: Validation, Image Index: 405\r\nPhase: Bottleneck Computation, Dataset used: Validation, Image Index: 406\r\nPhase: Bottleneck Computation, Dataset used: Validation, Image Index: 407\r\n[Source=RowToRowMapperTransform; Cursor, Kind=Trace] Channel finished. Elapsed 00:00:11.0930351.\r\n[Source=RowToRowMapperTransform; Cursor, Kind=Trace] Channel disposed\r\n[Source=GenerateNumber; Cursor, Kind=Trace] Channel finished. Elapsed 00:00:11.0635798.\r\n[Source=GenerateNumber; Cursor, Kind=Trace] Channel disposed\r\n[Source=RangeFilter; Cursor, Kind=Trace] Channel finished. Elapsed 00:00:11.0637819.\r\n[Source=RangeFilter; Cursor, Kind=Trace] Channel disposed\r\n[Source=TextLoader; Binding, Kind=Trace] Channel started\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel started\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel finished. Elapsed 00:00:00.0109063.\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel disposed\r\n[Source=TextLoader; Binding, Kind=Trace] Channel finished. Elapsed 00:00:00.0332705.\r\n[Source=TextLoader; Binding, Kind=Trace] Channel disposed\r\n[Source=TextLoader; Binding, Kind=Trace] Channel started\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel started\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel finished. Elapsed 00:00:00.0050095.\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel disposed\r\n[Source=TextLoader; Binding, Kind=Trace] Channel finished. Elapsed 00:00:00.0168461.\r\n[Source=TextLoader; Binding, Kind=Trace] Channel disposed\r\n'ImageClassificationNetCore.exe' (CoreCLR: clrhost): Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\System.Runtime.CompilerServices.Unsafe.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\r\n'ImageClassificationNetCore.exe' (CoreCLR: clrhost): Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\System.Text.RegularExpressions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\r\nThe thread 0x11e8 has exited with code 0 (0x0).\r\n[Source=TextLoader; ParseStats, Kind=Trace] Channel started\r\n[Source=TextLoader; Cursor, Kind=Trace] Channel started\r\n[Source=Shuffle; Cursor, Kind=Trace] Channel started\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4558","RelatedDescription":"Closed issue \"ImageClassification training stops\" (#4558)"},{"Id":"536090016","IsPullRequest":true,"CreatedAt":"2019-12-11T01:37:25","Actor":"harshithapv","Number":"4564","RawContent":null,"Title":"Adding Cyclic LR scheduling for Image Classification API ","State":"open","Body":"This PR implements Cyclic Learning rate scheduler. The following paper has more information.\r\nhttps://arxiv.org/abs/1506.01186\r\n\r\nAlso added unit test and integration test for the same.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4564","RelatedDescription":"Open PR \"Adding Cyclic LR scheduling for Image Classification API \" (#4564)"},{"Id":"536053200","IsPullRequest":true,"CreatedAt":"2019-12-10T23:28:55","Actor":"harishsk","Number":"4562","RawContent":null,"Title":"Added onnx export support for SlotsDroppingTransformer","State":"open","Body":"This work required the use of ConstantOfShape operator from onnx which has an attribute of type Tensor. Most operators have attributes that are of primitive types (int, float, etc). ML.NET Onnx converter coded didnt have support to add attributes of tensor types. \r\nTherefore this PR includes the support for adding tensor type attributes along with the necessary code and tests for SlotsDroppingTransformer. ","Url":"https://github.com/dotnet/machinelearning/pull/4562","RelatedDescription":"Open PR \"Added onnx export support for SlotsDroppingTransformer\" (#4562)"},{"Id":"535921255","IsPullRequest":true,"CreatedAt":"2019-12-10T22:04:45","Actor":"sharwell","Number":"4561","RawContent":null,"Title":"Add IterationDataAttribute","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4561","RelatedDescription":"Closed or merged PR \"Add IterationDataAttribute\" (#4561)"},{"Id":"535892862","IsPullRequest":true,"CreatedAt":"2019-12-10T17:59:21","Actor":"sharwell","Number":"4560","RawContent":null,"Title":"Add netcoreapp3.0 output for SsaForecast test","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4560","RelatedDescription":"Open PR \"Add netcoreapp3.0 output for SsaForecast test\" (#4560)"},{"Id":"534800323","IsPullRequest":false,"CreatedAt":"2019-12-10T00:53:47","Actor":"rauhs","Number":"4553","RawContent":null,"Title":"Expose EvaluateWithPRCurve in BinaryClassificationCatalog","State":"closed","Body":"Version: 1.4.0\r\n\r\nThis was once available: 122c31952829338e9cfa91ca72246af6e572a618\r\n\r\nBut now there is no way to access `EvaluateWithPRCurve`.","Url":"https://github.com/dotnet/machinelearning/issues/4553","RelatedDescription":"Closed issue \"Expose EvaluateWithPRCurve in BinaryClassificationCatalog\" (#4553)"},{"Id":"534813076","IsPullRequest":false,"CreatedAt":"2019-12-10T00:52:32","Actor":"rauhs","Number":"4554","RawContent":null,"Title":"BinaryClassification.Evaluate completely ignores the predicted labels","State":"closed","Body":"Version: 1.4.0\r\n\r\nI'm training a Binary LightGBM classifier and want to change the threshold of the model. This will change my predictions accordingly. Though, `BinaryClassification.Evaluate` will always return me the same precision/recall.\r\n\r\n```C#\r\n        var newModel = ctx.BinaryClassification.ChangeModelThreshold(model, -100_000);\r\n        var dataView = newModel.Transform(dv);\r\n        var labels = dataView.GetColumn<bool>(\"PredictedLabel\").ToArray();\r\n\r\n        var numTrue = labels.Count(x => x == true); // All are true.\r\n        var numFalse = labels.Count(x => x == false); // 0\r\n\r\n        testPerformance = ctx.BinaryClassification.Evaluate(dataView);\r\n```\r\n\r\nWith the above threshold the labels are all `true`. ","Url":"https://github.com/dotnet/machinelearning/issues/4554","RelatedDescription":"Closed issue \"BinaryClassification.Evaluate completely ignores the predicted labels\" (#4554)"},{"Id":"535423004","IsPullRequest":false,"CreatedAt":"2019-12-10T00:48:01","Actor":"jigarhshah17","Number":"4559","RawContent":null,"Title":"How to use and pass runtime created class in .Model.CreatePredictionEngine(Of TRow, TDst)(loadedModel)","State":"closed","Body":"i have created class and its field with assign value at run time and want to pass it in (of TRow)\r\nModel.CreatePredictionEngine(Of TRow, TDst)(loadedModel)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4559","RelatedDescription":"Closed issue \"How to use and pass runtime created class in .Model.CreatePredictionEngine(Of TRow, TDst)(loadedModel)\" (#4559)"},{"Id":"535023372","IsPullRequest":true,"CreatedAt":"2019-12-09T15:56:49","Actor":"sharwell","Number":"4556","RawContent":null,"Title":"SsaForecast iterations experiment","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4556","RelatedDescription":"Open PR \"SsaForecast iterations experiment\" (#4556)"},{"Id":"534580881","IsPullRequest":true,"CreatedAt":"2019-12-09T06:32:37","Actor":"sharwell","Number":"4549","RawContent":null,"Title":"Add tests for IParameterValue implementations","State":"closed","Body":"This change provides deterministic coverage for the implementation of `LongParameterValue`, `FloatParameterValue`, and `StringParameterValue`.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4549","RelatedDescription":"Closed or merged PR \"Add tests for IParameterValue implementations\" (#4549)"},{"Id":"534598675","IsPullRequest":true,"CreatedAt":"2019-12-09T03:06:42","Actor":"sharwell","Number":"4551","RawContent":null,"Title":"Use std::unique_ptr for samplers_ and likelihood_in_iter_","State":"closed","Body":"Fixes an access violation in native code if `LdaEngine` is deleted before `samplers_` is initialized.","Url":"https://github.com/dotnet/machinelearning/pull/4551","RelatedDescription":"Closed or merged PR \"Use std::unique_ptr for samplers_ and likelihood_in_iter_\" (#4551)"},{"Id":"534605298","IsPullRequest":true,"CreatedAt":"2019-12-08T21:31:56","Actor":"sharwell","Number":"4552","RawContent":null,"Title":"WIP Log exceptions thrown within finalizers","State":"open","Body":"Exceptions thrown from a finalizer will terminate the process.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4552","RelatedDescription":"Open PR \"WIP Log exceptions thrown within finalizers\" (#4552)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-16T05:30:41.7436354Z","RunDurationInMilliseconds":532}