{"Data":{"GitHubIssues":{"Issues":[{"Id":"372781058","IsPullRequest":true,"CreatedAt":"2018-10-23T02:38:21","Actor":"Gaulomatic","Number":"1599","RawContent":null,"Title":"Fix NullReferenceException when href is null","State":"open","Body":"Fix `NavLink` when the given href is null (or an empty string in the markup).","Url":"https://github.com/aspnet/Blazor/pull/1599","RelatedDescription":"Open PR \"Fix NullReferenceException when href is null\" (#1599)"},{"Id":"372597859","IsPullRequest":false,"CreatedAt":"2018-10-22T16:36:09","Actor":"demigor","Number":"1598","RawContent":null,"Title":"Blazor Components: Remove ParameterAttribute and allow fields.","State":"open","Body":"Hi,\r\n\r\nStarted to port some React components to play with Blazor. \r\nFirst thing is stumbled upon is Parameter attribute.\r\n\r\nHere is a current snippet from my code:\r\n\r\n@functions {\r\n[Parameter]\r\ndouble? left { get; set; }\r\n\r\n[Parameter]\r\ndouble? top { get; set; }\r\n\r\n[Parameter]\r\ndouble? right { get; set; }\r\n\r\n[Parameter]\r\ndouble? bottom { get; set; }\r\n\r\n[Parameter]\r\ndouble? width { get; set; }\r\n\r\n[Parameter]\r\ndouble? height { get; set; }\r\n\r\n[Parameter]\r\ndouble? star { get; set; }\r\n\r\n[Parameter]\r\ndouble? basis { get; set; }\r\n\r\n[Parameter]\r\nbool auto { get; set; }\r\n\r\n[Parameter]\r\nbool column { get; set; }\r\n\r\n[Parameter]\r\nbool absolute { get; set; }\r\n\r\n[Parameter]\r\nbool absoluteLeft { get; set; }\r\n\r\n[Parameter]\r\nbool absoluteRight { get; set; }\r\n\r\n[Parameter]\r\nbool relative { get; set; }\r\n\r\n[Parameter]\r\nbool @static { get; set; }\r\n\r\n[Parameter]\r\nbool @fixed { get; set; }\r\n\r\n[Parameter]\r\nbool fixedLeft { get; set; }\r\n\r\n[Parameter]\r\nbool fixedRight { get; set; }\r\n\r\n[Parameter]\r\nbool hidden { get; set; }\r\n\r\n[Parameter]\r\nbool wrap { get; set; }\r\n\r\n[Parameter]\r\nbool autoScroll { get; set; }\r\n\r\n[Parameter]\r\nbool crop { get; set; }\r\n\r\n[Parameter]\r\nRenderFragment ChildContent { get; set; }\r\n}\r\n\r\nI imagine that ParameterAttribute indicates properties (and only properties) which could be specified from outside. Exactly for the same reason C# has **public** property and field modifiers.\r\nSo why couldn't we for the sake of simplicity indicate parameters with public properties and fields? Each public property and field should be a parameter by default.\r\n\r\nSo the code above could look much simpler and take less time to type:\r\n\r\n@functions {\r\npublic double? left, top, right, bottom, width, height, star, basis;\r\npublic bool auto, column, absolute, absoluteLeft, absoluteRight, relative, @static, @fixed, fixedLeft, fixedRight, hidden, wrap, autoScroll, crop;\r\npublic RenderFragment ChildContent;\r\n}\r\n\r\nIf we want internal fields for state, just use private or protected members like we normally do.","Url":"https://github.com/aspnet/Blazor/issues/1598","RelatedDescription":"Open issue \"Blazor Components: Remove ParameterAttribute and allow fields.\" (#1598)"},{"Id":"372503871","IsPullRequest":false,"CreatedAt":"2018-10-22T12:40:05","Actor":"SteveSandersonMS","Number":"1597","RawContent":null,"Title":"Markup blocks don't run tryApplySpecialProperty logic","State":"open","Body":"In the Blazor.Browser.JS code, after it inserts a markup block, should run the same logic that it would if it had constructed the DOM attribute-by-attribute. But it doesn't, which means that things like:\r\n\r\n```\r\n<select value=@someValue>\r\n    <option value=\"a\">Item 1</option>\r\n    <option value=\"b\">Item 2</option>\r\n</select>\r\n```\r\n\r\n... don't pre-populate the dropdown with the correct initial selection if (for example) `someValue` equals `\"a\"`.\r\n\r\nTo fix this, we need to run a pass through the inserted subtree to apply the captured values.","Url":"https://github.com/aspnet/Blazor/issues/1597","RelatedDescription":"Open issue \"Markup blocks don't run tryApplySpecialProperty logic\" (#1597)"},{"Id":"372364246","IsPullRequest":false,"CreatedAt":"2018-10-21T22:34:16","Actor":"teeboy75","Number":"1596","RawContent":null,"Title":"Server Side Blazor + Kestrel + Windows Auth = Crash","State":"open","Body":"I am trying to setup windows Auth using kesterel on blazor server side.I have the progam setup like this:\r\n\r\nBlazor.Web.server\r\n\r\nProgram.cs\r\n\r\n     `  public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();            \r\n        }\r\n        public static IWebHost BuildWebHost(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n            .UseHttpSys(\r\n                                        options =>\r\n                                        {\r\n                                            options.Authentication.Schemes =\r\n                                               AuthenticationSchemes.Negotiate | AuthenticationSchemes.NTLM; \r\n                                            options.Authentication.AllowAnonymous = false;                                          \r\n                                        })\r\n                .UseConfiguration(new ConfigurationBuilder()\r\n                    .AddCommandLine(args)\r\n                    .Build())\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n    }\r\n`\r\n\r\nStartup.cs\r\n\r\n     `   public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // Adds the Server-Side Blazor services, and those registered by the app project's startup.\r\n            services.AddServerSideBlazor<App.Startup>();\r\n            services.AddHttpContextAccessor();\r\n            services.AddTransient<App.HttpContextAccessor>();\r\n            services.AddResponseCompression(options =>\r\n            {\r\n                options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\r\n                {\r\n                    MediaTypeNames.Application.Octet,\r\n                    WasmMediaTypeNames.Application.Wasm,\r\n                });\r\n            });\r\n        }\r\n\r\n`\r\n\r\nBlazor.Web.App\r\n\r\nStartup.cs\r\n\r\n `public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // Since Blazor is running on the server, we can use an application service\r\n            // to read the forecast data.\r\n            services.AddSingleton<WeatherForecastService>();                        \r\n        }\r\n        public void Configure(IBlazorApplicationBuilder app)\r\n        {\r\n            app.AddComponent<App>(\"app\");            \r\n        }\r\n    }\r\n\r\n`\r\n   \r\nProgram.cs\r\n\r\n\r\n`public class Program\r\n    {        public static void Main(string[] args)\r\n        {\r\n            CreateHostBuilder(args).Build().Run();            \r\n        }\r\n\r\n        public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) =>\r\n            BlazorWebAssemblyHost.CreateDefaultBuilder()\r\n                .UseBlazorStartup<Startup>();\r\n    }\r\n\r\n    public class HttpContextAccessor\r\n    {\r\n        private readonly IHttpContextAccessor _httpContextAccessor;\r\n\r\n        public HttpContextAccessor(IHttpContextAccessor httpContextAccessor)\r\n        {\r\n            _httpContextAccessor = httpContextAccessor;\r\n        }\r\n\r\n        public HttpContext Context => _httpContextAccessor.HttpContext;\r\n    }\r\n`\r\n   \r\n    \r\nAuth.cshtml\r\n\r\n  `  @using System.Net.Http\r\n     @inject Blazor.Web.App.HttpContextAccessor HttpContext\r\n     @page \"/two-way-data-binding\"\r\n\r\nLogged in User: @HttpContext.Context.User.Identity.Name <br /> \r\n`\r\n\r\nIt errors when I navigate to Auth.cshtml with this exception.\r\nError:\r\nSystem.ObjectDisposedException\r\n  HResult=0x80131622\r\n  Message=Safe handle has been closed\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Interop.Advapi32.GetTokenInformation(SafeAccessTokenHandle TokenHandle, UInt32 TokenInformationClass, SafeLocalAllocHandle TokenInformation, UInt32 TokenInformationLength, UInt32& ReturnLength)\r\n   at System.Security.Principal.WindowsIdentity.GetTokenInformation(SafeAccessTokenHandle tokenHandle, TokenInformationClass tokenInformationClass, Boolean nullOnInvalidParam)\r\n   at System.Security.Principal.WindowsIdentity.get_User()\r\n   at System.Security.Principal.WindowsIdentity.<GetName>b__46_0()\r\n   at System.Security.Principal.WindowsIdentity.<>c__DisplayClass62_0.<RunImpersonatedInternal>b__0(Object <p0>)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonatedInternal(SafeAccessTokenHandle token, Action action)\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)\r\n   at System.Security.Principal.WindowsIdentity.GetName()\r\n   at System.Security.Principal.WindowsIdentity.get_Name()\r\n   at Cloud.WebUI.App.Pages.TwoWayDataBinding.BuildRenderTree(RenderTreeBuilder builder)\r\n   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment)\r\n   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch(RenderQueueEntry renderQueueEntry)\r\n   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue()\r\n   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue(Int32 componentId, RenderFragment renderFragment)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1596","RelatedDescription":"Open issue \"Server Side Blazor + Kestrel + Windows Auth = Crash\" (#1596)"},{"Id":"372269083","IsPullRequest":true,"CreatedAt":"2018-10-21T01:29:48","Actor":"csnewman","Number":"1595","RawContent":null,"Title":"Add routing enhancements","State":"open","Body":"Attempts to add some functionality from #293 plus some other features/bug fixes.\r\n\r\n- Makes router extensible (Many aspects are now virtual methods)\r\n- Adds 404 handling via virtual method, defaults to a fallback route parameter\r\n- Adds error handling via virtual method, defaults to a error route parameter\r\n- Cache components per assembly\r\n- Allow adding and removing of assemblies from router\r\n- Makes route tables \"routes\" get only\r\n- Enables route inheritance (from component base classes)\r\n- Fixes component assembly searching (Now checks to see whether blazor is indirectly referenced)\r\n- Step closer to nested routers (BaseURI is now a parameter, and you have a lot more control over which assemblies are loaded)\r\n- Step closer to late/lazy loaded modules (You can add and remove assemblies from routers at runtime)\r\n\r\nOne important change was that RouteTables cannot be cached per assembly, as the order of the routes inside the table specifies the matching order, meaning instead the routes must be cached (route collection) and then merged and ordered. \r\n\r\nAt the moment the unit tests etc have not been updated, only the core logic just to see what you think.\r\n\r\nIn the future if an error occurs elsewhere inside the application, it might be an idea to hook into the \"handleerror\" method to route to an error page. For now it just handles routing errors.","Url":"https://github.com/aspnet/Blazor/pull/1595","RelatedDescription":"Open PR \"Add routing enhancements\" (#1595)"},{"Id":"372227142","IsPullRequest":false,"CreatedAt":"2018-10-20T16:16:22","Actor":"enetstudio","Number":"1594","RawContent":null,"Title":"Bound property not updating upon change","State":"open","Body":"In my Blazor app, I have the following input field in a view:\r\n\r\n<input bind=\"@amount.Display\" type=\"text\" />\r\nThis is bound to a property defined with the following accessors:\r\n\r\nget\r\n{\r\n    return _display;\r\n}\r\nset\r\n{\r\n    var parsed = Decimal.Parse(value);\r\n    _display = parsed.ToString(\"F2\");\r\n}\r\nThe real accessor logic is more complicated than this, but I've simplified it above to the extent that I can while still retaining the behavior that's confusing me.\r\n\r\nBasically, when the user enters \"2\", then tabs or clicks out of the input field, I'd like this to automatically be converted to \"2.00\". What's strange is that this conversion only seems to happen if the user enters a string representing a number that is different than the one already in place. For example, if the input field currently has a value of \"1.00\" and I enter \"2\", I correctly end up with \"2.00.\" But if the input field has a value of \"2.00\" and I enter \"2\", it just remains \"2\". It's as though the set accessor is not being called in this latter case, and I can't imagine why.","Url":"https://github.com/aspnet/Blazor/issues/1594","RelatedDescription":"Open issue \"Bound property not updating upon change\" (#1594)"},{"Id":"372222262","IsPullRequest":true,"CreatedAt":"2018-10-20T15:26:36","Actor":"rolshevsky","Number":"1593","RawContent":null,"Title":"Fix unreachable code in GenericComponentPass.cs","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1593","RelatedDescription":"Open PR \"Fix unreachable code in GenericComponentPass.cs\" (#1593)"},{"Id":"372195102","IsPullRequest":false,"CreatedAt":"2018-10-20T09:58:33","Actor":"roboriaan","Number":"1592","RawContent":null,"Title":"Switching from client-side to server-side. CookieAuthentication behaviour","State":"open","Body":"Hi,\r\n\r\nI'm using CookieAuthentication with a client-side blazor app. Works great.\r\n\r\nWhen I switch the app to server-side \"`services.AddServerSideBlazor`\" everything works fine except the Authentication cookie  doesn't get created on the browser. Which I assume is expected behaviour? \r\n\r\nWhat seems strange is that the user at that point can still access the protected api until the browser is refreshed (manual F5). So it does live somewhere. I might be wrong but I reckon it's something to do when the signalR connection terminates and reconnects and that the cookie is created on another process?\r\n\r\nAny ideas how I would go about getting the same behaviour on server-side?\r\nI hope it makes sense. I'll try and explain better or submit a git sample if it doesn't make sense. \r\n\r\nTIA\r\n ","Url":"https://github.com/aspnet/Blazor/issues/1592","RelatedDescription":"Open issue \"Switching from client-side to server-side. CookieAuthentication behaviour\" (#1592)"},{"Id":"372149913","IsPullRequest":true,"CreatedAt":"2018-10-19T23:53:06","Actor":"eeevans","Number":"1591","RawContent":null,"Title":"Add webpack to prereqs on readme page for the less initiated.","State":"open","Body":"Was looking to contribute and ran into missing prerequisite webpack.  That was the only other thing needed for building.","Url":"https://github.com/aspnet/Blazor/pull/1591","RelatedDescription":"Open PR \"Add webpack to prereqs on readme page for the less initiated.\" (#1591)"},{"Id":"371985321","IsPullRequest":true,"CreatedAt":"2018-10-19T17:23:06","Actor":"rolshevsky","Number":"1589","RawContent":null,"Title":"Fix compiler error with mixed content in onclick attribute, fixes #1530","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1589","RelatedDescription":"Closed or merged PR \"Fix compiler error with mixed content in onclick attribute, fixes #1530\" (#1589)"},{"Id":"372045401","IsPullRequest":true,"CreatedAt":"2018-10-19T17:21:00","Actor":"BickelLukas","Number":"1590","RawContent":null,"Title":"Fix razor compilation error for mixed event handler content (#1530)","State":"open","Body":"If a event Handler contained a mixture of c# and html content the compilation failed. Now it compiles down to a c# template string. \r\n\r\n`<button onclick=\"alert(@(a)b)\">...</button>`\r\nturns into \r\n`$\"alert({a}b)\"`\r\n\r\nI also renamed the other test I created in my last PR for consistency.\r\n\r\nfixes #1530 ","Url":"https://github.com/aspnet/Blazor/pull/1590","RelatedDescription":"Open PR \"Fix razor compilation error for mixed event handler content (#1530)\" (#1590)"},{"Id":"371960636","IsPullRequest":false,"CreatedAt":"2018-10-19T13:35:39","Actor":"mblataric","Number":"1588","RawContent":null,"Title":"Server-side Blazor does not provide HttpClient for injection","State":"open","Body":"Hi, \r\n\r\nI am trying a scenario where I would use server-side blazor with WebApi. \r\nFor that, I created project from self-hosted template and modified Startup method to match the one created in server-side template and I also changed script include in index.html. \r\n\r\nBut I get an error in razor page when I try to inject HttpClient:\r\n`Unhandled Promise Rejection: Error: System.InvalidOperationException: Cannot provide a value for property 'Http' on type 'CarFleet4.Client.Pages.FetchData'. There is no registered service of type 'System.Net.Http.HttpClient'.`\r\n\r\nI can probably manually provide HttpClient for injection, but I was wondering if this is intended or not?\r\n\r\nThanks, \r\nMario","Url":"https://github.com/aspnet/Blazor/issues/1588","RelatedDescription":"Open issue \"Server-side Blazor does not provide HttpClient for injection\" (#1588)"},{"Id":"371938777","IsPullRequest":false,"CreatedAt":"2018-10-19T12:51:35","Actor":"zwcloud","Number":"1587","RawContent":null,"Title":"Build warning: WARNING: dotnet found on the system PATH","State":"closed","Body":"> Using KoreBuild 2.2.0-preview1-20181001.1\r\n> WARNING: dotnet found on the system PATH is 'C:\\Program Files\\dotnet\\dotnet.exe' but KoreBuild will use 'C:\\Users\\cloud\\.dotnet\\x64\\dotnet.exe'.\r\n> WARNING: Adding 'C:\\Users\\cloud\\.dotnet\\x64' to system PATH permanently may be required for applications like Visual Studio or VS Code to work correctly.\r\n\r\n<del>Won't this have improper side-effect on Visual Studio or VS Code?</del>\r\n\r\n> Adding 'C:\\Users\\cloud\\.dotnet\\x64' to system PATH permanently may be required for applications like Visual Studio or VS Code to work correctly.\r\n\r\n<del>Are you sure? I think it will made Visual Studio or VS Code to work __incorrectly__ because of the ambiguity between 'C:\\Users\\cloud\\.dotnet\\x64' and 'C:\\Program Files\\dotnet\\dotnet.exe'!</del>\r\n\r\nSo, according to [the wiki](https://github.com/aspnet/AspNetCore/wiki/Building-from-source), the originally installed dotnet SDK ('C:\\Program Files\\dotnet\\dotnet.exe') should be removed completely and the one installed by _build.cmd_ ('C:\\Users\\cloud\\.dotnet\\x64') should be used instead. I hope this could be handled more properly.\r\n\r\nEnvironment: Win10","Url":"https://github.com/aspnet/Blazor/issues/1587","RelatedDescription":"Closed issue \"Build warning: WARNING: dotnet found on the system PATH\" (#1587)"},{"Id":"371826725","IsPullRequest":false,"CreatedAt":"2018-10-19T08:35:43","Actor":"AliSuleymanli","Number":"1586","RawContent":null,"Title":"Connection disconnected with error 'Error: Websocket closed with status code: 1006 ()","State":"closed","Body":"when i run the asp.net core blazor server side framework, it works, but after 1 munite it gives a websocket error:\r\n\r\nConnection disconnected with error 'Error: Websocket closed with status code: 1006 ();\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1586","RelatedDescription":"Closed issue \"Connection disconnected with error 'Error: Websocket closed with status code: 1006 ()\" (#1586)"},{"Id":"371701587","IsPullRequest":false,"CreatedAt":"2018-10-18T20:34:53","Actor":"CosDevelopment","Number":"1585","RawContent":null,"Title":"Is there a way to make blazor pages without a server?","State":"open","Body":"Hi, I am trying to create standalone blazor pages that can be served without a server. Is there an easy way to do this? I want to make a framework that can make a crossplatform gui with just c# and c++ dll's that way you don't have to talk through a localhost or https. The only issue I can see with this is not being able to pass parameters for the blazor pages through url, but I am sure there is probably a work around for that too. \r\n\r\nAlso I am aware this is not an issue with blazor, but I am looking for blazor information.","Url":"https://github.com/aspnet/Blazor/issues/1585","RelatedDescription":"Open issue \"Is there a way to make blazor pages without a server?\" (#1585)"},{"Id":"371609612","IsPullRequest":true,"CreatedAt":"2018-10-18T16:21:14","Actor":"hutchcodes","Number":"1584","RawContent":null,"Title":"Return completed task rather than null for empty virtual async methods.","State":"open","Body":"Also changed the OnAfterRenderAsync task to only ContinueWith if the task has not RunToCompletion so that it won't run on the completed task. OnInitAsync and OnParameterSetAsync were already handling this.","Url":"https://github.com/aspnet/Blazor/pull/1584","RelatedDescription":"Open PR \"Return completed task rather than null for empty virtual async methods.\" (#1584)"},{"Id":"371595811","IsPullRequest":true,"CreatedAt":"2018-10-18T15:48:05","Actor":"L0G1C","Number":"1583","RawContent":null,"Title":"Changes for wrong data type in UIKeyboardEventArgs.Location declaration","State":"open","Body":"Hey, Just looking to get involved with this project and noticed the effort on this particular issue had gotten a little stale. I went ahead and forked the repo and made the changes described by @Niladri24dutta  in #1483","Url":"https://github.com/aspnet/Blazor/pull/1583","RelatedDescription":"Open PR \"Changes for wrong data type in UIKeyboardEventArgs.Location declaration\" (#1583)"},{"Id":"371512395","IsPullRequest":false,"CreatedAt":"2018-10-18T12:45:14","Actor":"lalibi","Number":"1582","RawContent":null,"Title":"Use Server-side Blazor, but be able to offload some work to the client, using Client-side Blazor too.","State":"open","Body":"Is it a scenario that:\r\n\r\n1. is possible at the moment?\r\n1. you think has any merit?\r\n1. you have given any thought to or plan to implement?\r\n\r\nI'd like to build a Pokah site (\"Pokah\" is a Greek variation of Poker) using the Server-side flavor of Blazor. At some point, I'd like to give the users the ability to see an estimate of their chance to win the round (Monte Carlo algorithm), based on their cards and the community ones.\r\n\r\nSince this can be taxing for the server, I was thinking that if a user wants to know their odds to win, let their browser calculate that.\r\n\r\nI hope the scenario makes sense, I guess using Client-side Blazor+WebAPI is one way to go, but I really like to go the Server-side route.","Url":"https://github.com/aspnet/Blazor/issues/1582","RelatedDescription":"Open issue \"Use Server-side Blazor, but be able to offload some work to the client, using Client-side Blazor too.\" (#1582)"},{"Id":"371442667","IsPullRequest":true,"CreatedAt":"2018-10-18T09:35:56","Actor":"adrian109","Number":"1581","RawContent":null,"Title":"Fixed typos","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1581","RelatedDescription":"Open PR \"Fixed typos\" (#1581)"},{"Id":"370599693","IsPullRequest":false,"CreatedAt":"2018-10-18T08:51:41","Actor":"jmezach","Number":"1570","RawContent":null,"Title":"Define routeable components in a library","State":"closed","Body":"So I'm not even sure if this is supposed to work, but I was expecting it would. I have created a new Blazor application hosted in an ASP.NET Core application. I then added a Blazor library project to my solution and added a reference to that library from the Client project. Now I've defined a component with an @page attribute and was expecting to be able to route to that component, but that does not seem to work.\r\n\r\nI can see that the library is being loaded over the network, but when I try to navigate to the route of the component I get an error in the console stating that no component could be found at that route. So I'm guessing it's not finding the component with the @page attribute. Is this by design?","Url":"https://github.com/aspnet/Blazor/issues/1570","RelatedDescription":"Closed issue \"Define routeable components in a library\" (#1570)"},{"Id":"371314218","IsPullRequest":false,"CreatedAt":"2018-10-18T00:17:33","Actor":"vertonghenb","Number":"1580","RawContent":null,"Title":"Visual Studio - Remove compilation errors in .g.cs files ","State":"open","Body":"When a component fails to compile, the error list shows the {componentname}.g.cs files, which are not clickable in VS. Is it possible to hide these files?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1580","RelatedDescription":"Open issue \"Visual Studio - Remove compilation errors in .g.cs files \" (#1580)"},{"Id":"371289135","IsPullRequest":true,"CreatedAt":"2018-10-17T22:19:10","Actor":"RemiBou","Number":"1579","RawContent":null,"Title":"Remove useless call to StateHasChanged","State":"open","Body":"This removes an unecessary call to StateHasChanged if task is not finished when we reach the \"if\" line 172\r\n\r\nor we could remove StateHasChanged from ContinueAfterLifecycleTask as it's already called line 178 and 212\r\n\r\n","Url":"https://github.com/aspnet/Blazor/pull/1579","RelatedDescription":"Open PR \"Remove useless call to StateHasChanged\" (#1579)"},{"Id":"371234194","IsPullRequest":true,"CreatedAt":"2018-10-17T21:18:23","Actor":"BickelLukas","Number":"1577","RawContent":null,"Title":"escape quotes in event handler attribute content","State":"closed","Body":"Fix broken codegen due to double quotes not escaped inside single quoted event handlers.\r\nfixes #1527 ","Url":"https://github.com/aspnet/Blazor/pull/1577","RelatedDescription":"Closed or merged PR \"escape quotes in event handler attribute content\" (#1577)"},{"Id":"371259599","IsPullRequest":false,"CreatedAt":"2018-10-17T20:54:59","Actor":"gulbanana","Number":"1578","RawContent":null,"Title":"erroneous BL9986 - \"Component attributes do not support complex content\", but it isn't a component attribute","State":"closed","Body":"This bug is basically #784 resurrected because it's still happening to me - I can't use razor templating inside an attribute of a builtin html element, as in `<button class=\"foo @bar\">`.\r\n\r\nReproducing it was kind of weird - putting the same component in an empty project *doesn't* produce the error, so I had to take an existing solution and minimise it. I'm not sure what subtle difference remains between the two.\r\n\r\nHere's the repro: https://github.com/gulbanana/bl9986. Just clone and `dotnet build`.","Url":"https://github.com/aspnet/Blazor/issues/1578","RelatedDescription":"Closed issue \"erroneous BL9986 - \"Component attributes do not support complex content\", but it isn't a component attribute\" (#1578)"},{"Id":"370990582","IsPullRequest":false,"CreatedAt":"2018-10-17T15:36:36","Actor":"ch0mik","Number":"1575","RawContent":null,"Title":"problem with event on input - blazor binding event to global (Blazor 0.6.0)","State":"closed","Body":"cshtml : \r\n\r\n`    <input name=\"ArtefactName\" bind=\"@currentArtefactName\" onkeydown=\"@(async () => await Search2())\" />\r\n`\r\n\r\ngenerated javascript : \r\n\r\n```\r\n  e.prototype.onGlobalEvent = function(e) {\r\n            if (e.target instanceof Element)\r\n                for (var t = e.target, n = null, r = i.hasOwnProperty(e.type); t; ) {\r\n                    if (t.hasOwnProperty(this.eventsCollectionKey)) {\r\n                        var s = t[this.eventsCollectionKey];\r\n                        if (s.hasOwnProperty(e.type)) {\r\n                            n || (n = o.EventForDotNet.fromDOMEvent(e));\r\n                            var a = s[e.type];\r\n                            this.onEvent(e, a.componentId, a.eventHandlerId, n)\r\n                        }\r\n                    }\r\n                    t = r ? null : t.parentElement\r\n                }\r\n        }\r\n        ,\r\n        e.nextEventDelegatorId = 0,\r\n        e\r\n    }();\r\n\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1575","RelatedDescription":"Closed issue \"problem with event on input - blazor binding event to global (Blazor 0.6.0)\" (#1575)"},{"Id":"371045968","IsPullRequest":false,"CreatedAt":"2018-10-17T15:34:28","Actor":"hutchcodes","Number":"1576","RawContent":null,"Title":"async BlazorComponent Lifecycle methods return null","State":"closed","Body":"The async lifecycle events return null instead of a completed task. This means that when you override one of those methods and Visual Studio automatically adds a `base.OnInitAsync()` you get a null reference exception, but without any real hint about where it's coming from (I only figured it out with help from someone on gitter).\r\n\r\nThe answer in this case is to not call `base.OnInitAsync()` because the method is defined as\r\n```\r\nprotected virtual Task OnInitAsync()\r\n    => null\r\n```\r\n\r\nI think it would be better to return a completed task\r\n```\r\nprotected virtual Task OnInitAsync()\r\n    => Task.CompletedTask;\r\n```\r\n\r\nAnd I would be willing to sift through the solution looking for places where we're returning null and should be returning a completed Task, but don't want to submit a PR if there is some reason I don't understand that returning null there makes more sense despite the confusion it caused me.","Url":"https://github.com/aspnet/Blazor/issues/1576","RelatedDescription":"Closed issue \"async BlazorComponent Lifecycle methods return null\" (#1576)"},{"Id":"370810476","IsPullRequest":true,"CreatedAt":"2018-10-16T22:57:41","Actor":"SteveSandersonMS","Number":"1574","RawContent":null,"Title":"When tracing dependencies *without* linking, don't fail the build if there are unresolved dependencies","State":"closed","Body":"There are legitimate use cases for referencing BCL assemblies that *aren't* in the Mono WebAssembly BCL, particularly for Blazor-on-the-server which runs on CoreCLR (and hence supports a broader BCL) anyway.\r\n\r\nDevelopers can already do this themselves if they are using the linker (by passing `--skip-unresolved true` to the linker). But before this PR there was no way to get around the problem if you're not using the linker, which you typically aren't for server-side Blazor.","Url":"https://github.com/aspnet/Blazor/pull/1574","RelatedDescription":"Closed or merged PR \"When tracing dependencies *without* linking, don't fail the build if there are unresolved dependencies\" (#1574)"},{"Id":"370763061","IsPullRequest":false,"CreatedAt":"2018-10-16T22:20:58","Actor":"Nathan187","Number":"1572","RawContent":null,"Title":"visual studio for mac / mojave upgrade / visual studio upgrade","State":"closed","Body":"thank you for reading in advance for reading\r\n\r\nwe have an application that was written using visual studio for mac.  it was working well and it ironically was one of the more stable applications we have.\r\n\r\nrecently, our macs and versions of visual studio where upgraded for macOS (mojave).\r\n\r\n\r\na minor edit to the app had to be done.  however the app no longer runs.  the simplest request calls no longer work.  they time out.  i run the same request in fiddler (pc) and charles (mac) and it works fine.  the data (json) is coming back.  however, for some reason, our app fails for the most basic get requests.    please help.\r\n\r\ni know the immediate answer will be \"upgrade\"....but i'm hoping there is some other solution.\r\n\r\nmacOS version:  10.14\r\nvisual studio for mac:  7.6.9 (build 22)\r\nrestsharp dll version:  105.2.3.0\r\n\r\n```csharp\r\nvar request = new RestRequest(@\"checklist/listbyid?Id=\" + someId, Method.GET);\r\nrequest.RequestFormat = DataFormat.Json;\r\nvar response = ExecuteTaskAsync(request);\r\nreturn response.Result.Content;\r\n\r\n\r\nprotected Task<IRestResponse> ExecuteTaskAsync(RestRequest request)\r\n{\r\n\t\r\nSetRequestHeaders (request);\r\n\r\nvar tcs = new TaskCompletionSource<IRestResponse>();\r\nthis.ExecuteAsync(request, (response) =>\r\n\t{\r\n\t\tif (response.ErrorException != null)\r\n\t\t{\r\n\t\t\t//tcs.TrySetException(response.ErrorException);\r\n\t\t    tcs.TrySetResult(response);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// handle user token's expiration when making service request\r\n\t\tif (response.StatusCode == HttpStatusCode.Unauthorized)\r\n\t\t\t{\r\n\t\t\t\tvar messenger = Mvx.Resolve<IMvxMessenger>();\r\n\t\t\t\tif (messenger == null) return;\r\n\t\t\t\tmessenger.Publish(new TokenExpireMessage(response));\r\n\t\t\t}\r\n\r\n\t\t\ttcs.TrySetResult(response);\r\n\t\t}\r\n});\r\nreturn tcs.Task;\r\n}\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1572","RelatedDescription":"Closed issue \"visual studio for mac / mojave upgrade / visual studio upgrade\" (#1572)"},{"Id":"370810275","IsPullRequest":false,"CreatedAt":"2018-10-16T21:36:47","Actor":"Knudel","Number":"1573","RawContent":null,"Title":"Blazor Server side, child component not always updates view","State":"open","Body":"I notices that a child component that used async entityframework not always got updated. So I tried to simulate the situation without Entity framework. \r\n\r\nI created a child component with this code:\r\n\r\n```\r\n@if(list == null)\r\n{\r\n    <div>\r\n        Loading....\r\n    </div>\r\n}\r\nelse\r\n{\r\n    foreach(var i in list)\r\n    {\r\n        <div>\r\n            @i\r\n        </div>\r\n    }\r\n}\r\n\r\n@functions\r\n{\r\n    protected List<string> list = null;\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        await Task.Run(async () =>\r\n        {\r\n            await Task.Delay(3000);\r\n\r\n            list = new List<string>();\r\n          \r\n            list.Add(\"Some item 1\");\r\n            list.Add(\"Some item 2\");\r\n            list.Add(\"Some item 3\");\r\n            list.Add(\"Some item 4\");\r\n        });\r\n\r\n        this.StateHasChanged();\r\n    }\r\n}\r\n```\r\n\r\nIn de main page: index.cshtml insert A few child components like:\r\n\r\n```\r\n<Child></Child>\r\n<Child></Child>\r\n<Child></Child>\r\n<Child></Child>\r\n```\r\n\r\nOpen debugging with f5.\r\nWhen the page has been loaded in chrome, reload with f5.\r\n\r\nAfter a few time, a few components won't show but keep saying: loading....\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1573","RelatedDescription":"Open issue \"Blazor Server side, child component not always updates view\" (#1573)"},{"Id":"370655307","IsPullRequest":false,"CreatedAt":"2018-10-16T14:57:12","Actor":"mdegroot71","Number":"1571","RawContent":null,"Title":"SVG not rendering properly with Blazor","State":"open","Body":"_Originally posted by @mdegroot71 in https://github.com/aspnet/Blazor/issue_comments#issuecomment-430270522_\r\n\r\nI am having the same issues.  I've taken all of the same CSS, Javascript and produced HTML from Blazor, popped it into a static HTML page and ran it.  The SVG scales as it should without any workarounds.  I'm using Chrome.  When I run it with Blazor, the SVG behaves in a weird way.  This isn't a CSS issue.  This is definitely a rendering issue b/c no matter how I inject the SVG, it still does not behave as if Blazor was not present.","Url":"https://github.com/aspnet/Blazor/issues/1571","RelatedDescription":"Open issue \"SVG not rendering properly with Blazor\" (#1571)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-23T05:30:03.3700486Z","RunDurationInMilliseconds":1490}