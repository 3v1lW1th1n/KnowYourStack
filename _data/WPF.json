{"Data":{"GitHub":{"Issues":[{"Id":"430085559","IsPullRequest":true,"CreatedAt":"2019-04-06T23:08:34","Actor":"stevenbrix","Number":"518","RawContent":null,"Title":"Dev/stevenbrix/enable analyzers for pbt","State":"closed","Body":"Enabling analyzers and running some code-fixers for PBT. Completing this PR is dependent on #517 completing first. I split up the changes here since the System.Xaml changes had already been reviewed, whereas these changes are newer.","Url":"https://github.com/dotnet/wpf/pull/518","RelatedDescription":"Closed or merged PR \"Dev/stevenbrix/enable analyzers for pbt\" (#518)"},{"Id":"430084155","IsPullRequest":true,"CreatedAt":"2019-04-06T22:43:11","Actor":"stevenbrix","Number":"517","RawContent":null,"Title":"Dev/stevenki/port analyzers and system xaml","State":"open","Body":"This PR fixes enabling roslyn analyzers and ports the changes made to System.Xaml that we had made in our internal repo out here into the public.\r\n\r\nHere is the thought process on how we should handle suppressing rules:\r\n1. Any rules we want suppressed across all projects, get suppressed in WpfCodeAnaysis.ruleset by setting Action to \"None\"\r\n2. Any rules that are enabled but require certain suppressions on a project level bases, should be suppressed in that projects GlobalSuppressions.cs file.\r\n3. Any suppressions that we want to fix, but won't for the 3.0 release due to compat concerns, should be suppressed inline.","Url":"https://github.com/dotnet/wpf/pull/517","RelatedDescription":"Open PR \"Dev/stevenki/port analyzers and system xaml\" (#517)"},{"Id":"430075134","IsPullRequest":true,"CreatedAt":"2019-04-06T22:19:32","Actor":"ryalanms","Number":"515","RawContent":null,"Title":"Public key tokens of .NET core WPF assemblies and .NET Framework WPF assemblies need to match","State":"closed","Body":"This is the public half of a two part change. The original fix (adding StrongNameKeyId=Ecma to WPF assembly projects) was insufficient. After help from @nguerrera and more investigation of which PKTs were contained in which NETFX assemblies, @vatsan-madhavan provided a much more comprehensive fix that also fixed other regressions introduced during Arcade onboarding. @vatsan-madhavan's complete fix is included here. \r\n\r\n- WPF assemblies are incompatible with each other in 3.0.0-alpha-27128-4 #208 (fixes issue #208)\r\n\r\n- Could not find assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' #508 (fixes issue #508)\r\n\r\nThis internal half of this change will be committed after the darc update containing this change reaches dotnet-wpf-int.  Thanks. \r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/515","RelatedDescription":"Closed or merged PR \"Public key tokens of .NET core WPF assemblies and .NET Framework WPF assemblies need to match\" (#515)"},{"Id":"430081695","IsPullRequest":true,"CreatedAt":"2019-04-06T22:18:25","Actor":"stevenbrix","Number":"516","RawContent":null,"Title":"Reverting PR #509","State":"closed","Body":"Reverting #509. While the PR was large, most of the files were already reviewed internally. When I send out again I'll break this PR up into two, one for System.XAML and one for the new changes to PresentationBuildTasks and make sure there is enough time for everyone to review.","Url":"https://github.com/dotnet/wpf/pull/516","RelatedDescription":"Closed or merged PR \"Reverting PR #509\" (#516)"},{"Id":"429977072","IsPullRequest":true,"CreatedAt":"2019-04-06T21:32:34","Actor":"stevenbrix","Number":"509","RawContent":null,"Title":"Dev/stevenbrix/enable analyzers and code cleanup","State":"closed","Body":"Fixes #506 \r\n\r\nWhen I had moved the WpfCodeAnalysis.ruleset file into the WpfArcadeSdk, putting it into a .props file was the wrong thing to do. Moving it into a .targets file allows projects to properly set the `EnableAnalyzers` project flag to begin seeing the issues show up. Most of these changes to System.Xaml had been made in our internal repo while we were working on the SDK, and now I'm moving them out here.  I've also onboarded the analyzers for PresentationBuildTasks.\r\n\r\nBelow is the logic behind how we should suppress rules:\r\n\r\n1. Any rules we want suppressed globally, get suppressed in WpfCodeAnaysis.ruleset by setting Action to \"None\"\r\n2. Any rules that are enabled but require certain suppressions, should be suppressed in GlobalSuppressions.cs\r\n3. Any suppressions that we want to fix, but won't for the 3.0 release due to compat concerns, should be suppressed inline.","Url":"https://github.com/dotnet/wpf/pull/509","RelatedDescription":"Closed or merged PR \"Dev/stevenbrix/enable analyzers and code cleanup\" (#509)"},{"Id":"429941186","IsPullRequest":false,"CreatedAt":"2019-04-06T21:32:34","Actor":"stevenbrix","Number":"506","RawContent":null,"Title":"Setting EnableAnalyzers to true in .csproj doesn't pick up correct ruleset","State":"closed","Body":"This was broken when the ruleset was moved to the Wpf Arcade SDK. Also, the changes to System.Xaml that were made were lost as well.","Url":"https://github.com/dotnet/wpf/issues/506","RelatedDescription":"Closed issue \"Setting EnableAnalyzers to true in .csproj doesn't pick up correct ruleset\" (#506)"},{"Id":"430046168","IsPullRequest":true,"CreatedAt":"2019-04-06T15:46:27","Actor":"dotnet-maestro[bot]","Number":"514","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190406.2\r\n- **Date Produced**: 4/6/2019 3:41 PM\r\n- **Commit**: 1cba37dd1138040f40165e65998e5e4c2eac5eb5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Windows.Extensions** -> 4.6.0-preview4.19206.2\r\n  - **System.CodeDom** -> 4.6.0-preview4.19206.2\r\n  - **Microsoft.Win32.Registry** -> 4.6.0-preview4.19206.2\r\n  - **System.Reflection.TypeExtensions** -> 4.6.0-preview4.19206.2\r\n  - **System.Security.AccessControl** -> 4.6.0-preview4.19206.2\r\n  - **System.Security.Cryptography.Xml** -> 4.6.0-preview4.19206.2\r\n  - **System.Security.Permissions** -> 4.6.0-preview4.19206.2\r\n  - **System.Security.Principal.Windows** -> 4.6.0-preview4.19206.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview4.19206.2\r\n  - **System.Configuration.ConfigurationManager** -> 4.6.0-preview4.19206.2\r\n  - **System.Diagnostics.EventLog** -> 4.6.0-preview4.19206.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/514","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#514)"},{"Id":"430030913","IsPullRequest":true,"CreatedAt":"2019-04-06T12:58:00","Actor":"dotnet-maestro[bot]","Number":"513","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190406.01\r\n- **Date Produced**: 4/6/2019 10:21 AM\r\n- **Commit**: ccdc90de5f757c56e13bf5c095ee5d2aa8ca1aa4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27606-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19205.9 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/513","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#513)"},{"Id":"430027276","IsPullRequest":true,"CreatedAt":"2019-04-06T12:05:01","Actor":"dotnet-maestro[bot]","Number":"512","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/512","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#512)"},{"Id":"430026947","IsPullRequest":false,"CreatedAt":"2019-04-06T12:00:50","Actor":"KodamaSakuno","Number":"511","RawContent":null,"Title":"Is it possible to manipulate DP value inheritance parents of Content descendants?","State":"open","Body":"Take a simple demo first. Create a ContentControl named \"Example\" and apply the following style:\r\n```xaml\r\n<Style TargetType=\"local:Example\">\r\n    <Setter Property=\"Foreground\" Value=\"Black\" />\r\n\r\n    <Setter Property=\"Template\">\r\n        <Setter.Value>\r\n            <ControlTemplate TargetType=\"local:Example\">\r\n                <ContentPresenter TextElement.Foreground=\"Red\" />\r\n            </ControlTemplate>\r\n        </Setter.Value>\r\n    </Setter>\r\n</Style>\r\n```\r\nAnd then, add the following code to the view:\r\n```xaml\r\n<local:Example>\r\n    <TextBlock Text=\"Am I RED?\" FontSize=\"48\" />\r\n</local:Example>\r\n```\r\n\r\nRun the program, and you'll see **a big BLACK text**, NOT RED.\r\n\r\nI debugged the program and stepped into the place where DependencyProperty.GetValue works. Finally I found that the InheritanceParent property of that TextBlock is its logical parent \"Example\" not its visual parent.\r\n\r\nIt would be a problem to some controls with multiple contents like the following example:\r\n![19040601](https://user-images.githubusercontent.com/4654507/55669006-9ccbe600-58a4-11e9-8ec5-49eab1820f60.png)\r\nI have to solve this problem by wrapping a border with a foreground set to every content element. How dull!\r\n\r\nAt the end. What I expect is that I can manipulate the descendants of ContentPresenter to make them inherit DP value from their visual ancestors.","Url":"https://github.com/dotnet/wpf/issues/511","RelatedDescription":"Open issue \"Is it possible to manipulate DP value inheritance parents of Content descendants?\" (#511)"},{"Id":"429994959","IsPullRequest":false,"CreatedAt":"2019-04-06T04:05:24","Actor":"Berrysoft","Number":"510","RawContent":null,"Title":"Auto generates many temp AssemblyInfo code files","State":"open","Body":"* .NET Core Version: 3.0 Preview3\r\n* Windows version: 10.0.18362\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Not sure, but no in .Net 4.7.2\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nEach time I build the project, a `AssemblyInfo` code file and a `AssemblyInfoInputs.cache` are generated.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n![image](https://user-images.githubusercontent.com/37586447/55664642-bf89da80-5863-11e9-9b33-c6fcd06bd233.png)\r\n![image](https://user-images.githubusercontent.com/37586447/55664644-d5979b00-5863-11e9-9016-ac6ff2e79fdc.png)\r\n(The C# project is named `temp`)\r\n \r\n **Expected behavior:**\r\nNo these files.\r\n \r\n **Minimal repro:**\r\n ```\r\ndotnet new wpf\r\ndotnet run\r\ndotnet run\r\ndotnet run\r\n```\r\nCheck the `obj\\Debug\\netcoreapp3.0` folder.","Url":"https://github.com/dotnet/wpf/issues/510","RelatedDescription":"Open issue \"Auto generates many temp AssemblyInfo code files\" (#510)"},{"Id":"429954915","IsPullRequest":true,"CreatedAt":"2019-04-06T00:56:53","Actor":"mmitche","Number":"507","RawContent":null,"Title":"Fix coherency attributes","State":"closed","Body":"CoherentParentDependency attributes should only be applied to child dependencies of a repo.  This was blocking updates","Url":"https://github.com/dotnet/wpf/pull/507","RelatedDescription":"Closed or merged PR \"Fix coherency attributes\" (#507)"},{"Id":"429964067","IsPullRequest":false,"CreatedAt":"2019-04-05T23:01:40","Actor":"fadimounir","Number":"508","RawContent":null,"Title":"Could not find assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`17763.379`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: I haven't tried\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nUsing the latest core-sdk version, the WPF app from the https://github.com/ridomin/msix-catalog repo no longer builds.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions --> \r\n`Microsoft.WinFX.targets(243,9): error MC1000: Unknown build error, 'Could not find assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.'  [D:\\GIT\\msix-catalog-master\\msix.catalog.app\\msix.catalog.app.core.csproj]`\r\n\r\n **Expected behavior:**\r\nCompilation should work.\r\n \r\n **Minimal repro:**\r\n1) Download https://github.com/ridomin/msix-catalog\r\n2) cd msix-catalog-master\\msix.catalog.app\r\n3) dotnet publish -r win-x64 msix.catalog.app.core.csproj\r\n\r\n\r\nNOTE:\r\nI'm observing that we're now setting _PresentationBuildTaskTfm to netcoreapp2.1 in Microsoft.WinFX.targets:\r\n`<_PresentationBuildTasksTfm Condition=\"'$(MSBuildRuntimeType)' == 'Core'\">netcoreapp2.1</_PresentationBuildTasksTfm>`\r\nIt used to be netcoreapp3.0. Is this intentional?\r\n","Url":"https://github.com/dotnet/wpf/issues/508","RelatedDescription":"Open issue \"Could not find assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\" (#508)"},{"Id":"429387741","IsPullRequest":false,"CreatedAt":"2019-04-05T19:43:55","Actor":"TonyValenti","Number":"496","RawContent":null,"Title":"Open Source?  Where's the source?","State":"closed","Body":"Where's the source for WPF?   According to this article:\r\nhttps://www.hanselman.com/blog/AnnouncingWPFWinFormsAndWinUIAreGoingOpenSource.aspx\r\n\r\nWPF is going open soruce but I can't seem to find the code anywhere.","Url":"https://github.com/dotnet/wpf/issues/496","RelatedDescription":"Closed issue \"Open Source?  Where's the source?\" (#496)"},{"Id":"429906948","IsPullRequest":false,"CreatedAt":"2019-04-05T19:41:59","Actor":"stevenbrix","Number":"505","RawContent":null,"Title":"re-examine internal use of ZLib","State":"open","Body":"right now we copy code from corefx to enable use of clrcompression.dll. this isn't sustainable, as any changes there cause us to break, and then we need to make the changes here.\r\n\r\nWe either need to expose a new API from S.IO.Compression or remove our dependency entirely","Url":"https://github.com/dotnet/wpf/issues/505","RelatedDescription":"Open issue \"re-examine internal use of ZLib\" (#505)"},{"Id":"429901465","IsPullRequest":true,"CreatedAt":"2019-04-05T19:35:00","Actor":"ryalanms","Number":"504","RawContent":null,"Title":"[netcore3] Open source PresentationBuildTasks","State":"closed","Body":"Onboard PresentationBuildTasks and Microsoft.NET.SDK.WindowsDesktop. ","Url":"https://github.com/dotnet/wpf/pull/504","RelatedDescription":"Closed or merged PR \"[netcore3] Open source PresentationBuildTasks\" (#504)"},{"Id":"429092063","IsPullRequest":false,"CreatedAt":"2019-04-05T17:17:02","Actor":"vatsan-madhavan","Number":"493","RawContent":null,"Title":"Update WPF Project Template for .NET Core to be identical to the one used by .NET Framework","State":"closed","Body":"This is a request to change the .NET Core WPF project template (which is used by both `dotnet new wpf` and Visual Studio 2019's _Create New Project_ dialog) to use and identical template as one in use by .NET Framework. \r\n\r\nThis request is coming from the Visual Studio team (@chabiss). \r\n\r\nThe current C# project template for .NET Core shows a UI like this, with a message, _\"Hello .NET Core\"_\r\n\r\n![image](https://user-images.githubusercontent.com/20246435/55531643-fb545280-565f-11e9-9ad3-02655888f414.png)\r\n\r\nThe corresponding XAML and C# code look like this today, respectively: \r\n\r\n```XAML\r\n<Window x:Class=\"wpf.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:wpf\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height=\"9*\"/>\r\n            <RowDefinition Height=\"1*\"/>\r\n        </Grid.RowDefinitions>\r\n        <Label Content=\"Hello .NET Core!\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"\r\n               FontSize=\"40\"/>\r\n        <Button Content=\"Exit\" Grid.Row=\"1\" FontSize=\"20\" Click=\"ButtonExit_Click\"/>\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\nnamespace wpf\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for MainWindow.xaml\r\n    /// </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        private void ButtonExit_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            Application.Current.Shutdown();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<hr/>\r\nThe project template in use in .NET Framework, OTOH, is a no-frills template which just shows a blank window. \r\n\r\n![image](https://user-images.githubusercontent.com/20246435/55531755-42dade80-5660-11e9-9ede-32f7c24ebd67.png)\r\n\r\nThe corresponding XAML and code-behind look like this, respectively: \r\n\r\n```XAML\r\n<Window x:Class=\"WpfApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:WpfApp\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        \r\n    </Grid>\r\n</Window>\r\n```\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\nnamespace WpfApp\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for MainWindow.xaml\r\n    /// </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n/cc @grubioe, @zsd4yr, @merriemcgaw \r\n","Url":"https://github.com/dotnet/wpf/issues/493","RelatedDescription":"Closed issue \"Update WPF Project Template for .NET Core to be identical to the one used by .NET Framework\" (#493)"},{"Id":"429422180","IsPullRequest":true,"CreatedAt":"2019-04-05T17:15:46","Actor":"vatsan-madhavan","Number":"497","RawContent":null,"Title":"Make C# Project template for WPF identical to the .NET Framework version of the corresponding template","State":"closed","Body":"This PR addresses https://github.com/dotnet/wpf/issues/493\r\n\r\n/cc @chabiss","Url":"https://github.com/dotnet/wpf/pull/497","RelatedDescription":"Closed or merged PR \"Make C# Project template for WPF identical to the .NET Framework version of the corresponding template\" (#497)"},{"Id":"429741688","IsPullRequest":true,"CreatedAt":"2019-04-05T13:01:23","Actor":"dotnet-maestro[bot]","Number":"503","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190404.13\r\n- **Date Produced**: 4/5/2019 5:46 AM\r\n- **Commit**: 209213958004859a79ca586e7b278b5c7fe1f4b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview4-27604-13\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Private.Winforms** -> 4.8.0-preview4.19203.4 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview4.19204.5 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#503)"},{"Id":"429721555","IsPullRequest":true,"CreatedAt":"2019-04-05T12:08:41","Actor":"dotnet-maestro[bot]","Number":"502","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/502","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#502)"},{"Id":"429691275","IsPullRequest":true,"CreatedAt":"2019-04-05T10:38:30","Actor":"v-zbsail","Number":"501","RawContent":null,"Title":"LOC CHECKIN | dotnet/wpf master | 20190405","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/501","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/wpf master | 20190405\" (#501)"},{"Id":"429571229","IsPullRequest":false,"CreatedAt":"2019-04-05T03:47:12","Actor":"Berrysoft","Number":"500","RawContent":null,"Title":"Xaml compiler bug for VB project","State":"open","Body":"* .NET Core Version: 3.0 Preview3\r\n* Windows version: 10.0.18362\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Not verified, but no for .Net 4.7.2\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nThe auto-generated code file for `Application.xaml`(`Application.g.vb`) forgets a `Implements System.Windows.Markup.IComponentConnector.InitializeComponent` for `Public Sub InitializeComponent()`. (Also, the code file doesn't contains a `Sub Main()`, but I don't know if it is a feature.)\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nSee above. \r\n\r\n **Expected behavior:**\r\nNo these bugs.\r\n \r\n **Minimal repro:**\r\n Here's a minimal vbproj file sample:\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <RootNamespace>WPFSample</RootNamespace>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/issues/500","RelatedDescription":"Open issue \"Xaml compiler bug for VB project\" (#500)"},{"Id":"429507676","IsPullRequest":false,"CreatedAt":"2019-04-04T22:20:51","Actor":"TrabacchinLuigi","Number":"499","RawContent":null,"Title":"Make Future WPF IoC Friendly","State":"open","Body":"Something that i really miss on WPF is the ability to avoid using service locators and control how nested controls and pages are created, i'd really like to have some object injected in the UserControl constructors, and a way to tell WPF how to construct them (and maybe provide some mocks for the IDE), instead of the empty constructor.\r\nMaybe since a lot is being rewritten to be core it is a good time to support IoC.\r\nI'm aware that we can achieve something similar with MVVM but... it's not the same... ","Url":"https://github.com/dotnet/wpf/issues/499","RelatedDescription":"Open issue \"Make Future WPF IoC Friendly\" (#499)"},{"Id":"429472388","IsPullRequest":false,"CreatedAt":"2019-04-04T20:37:56","Actor":"mairaw","Number":"498","RawContent":null,"Title":"Publish LocBaml source","State":"open","Body":"The .NET documentation contains links to the LocBaml sample which is no longer available since the old samples site was decommissioned: https://go.microsoft.com/fwlink/?LinkID=160016 \r\n\r\nIt would be great if we could restore those links and have the source available for customers to download again.\r\n\r\nIf you look at our tracking docs issue, you'll see we already closed quite a few duplicate issues of that same request, so there's definitively a demand:\r\nhttps://github.com/dotnet/docs/issues/3623","Url":"https://github.com/dotnet/wpf/issues/498","RelatedDescription":"Open issue \"Publish LocBaml source\" (#498)"},{"Id":"429268049","IsPullRequest":true,"CreatedAt":"2019-04-04T13:10:40","Actor":"dotnet-maestro[bot]","Number":"495","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190403.11\r\n- **Date Produced**: 4/4/2019 8:25 AM\r\n- **Commit**: 80622592a4e993200cb5b495b802abc1ee2fe96d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview4-27603-11\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Private.Winforms** -> 4.8.0-preview4.19202.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview4.19203.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/495","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#495)"},{"Id":"429241318","IsPullRequest":true,"CreatedAt":"2019-04-04T12:11:06","Actor":"dotnet-maestro[bot]","Number":"494","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/494","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#494)"},{"Id":"428924788","IsPullRequest":true,"CreatedAt":"2019-04-04T04:49:43","Actor":"vatsan-madhavan","Number":"489","RawContent":null,"Title":"Project template for WPF","State":"closed","Body":"This is the Project Template for WPF used by `dotnet new wpf` and _Create New Project_ -> _WPF App (.NET Core)_ in Visual Studio. \r\n\r\nMoving it from our internal repo build and ship from GitHub. We will make modifications to this in a future PR (likely to get this to match the template for .NET Framework).  \r\n\r\n/cc @chabiss, @grubioe, @zsd4yr, @ericstj \r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/489","RelatedDescription":"Closed or merged PR \"Project template for WPF\" (#489)"},{"Id":"428998208","IsPullRequest":true,"CreatedAt":"2019-04-03T22:19:35","Actor":"dotnet-maestro[bot]","Number":"492","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.2\r\n- **Date Produced**: 4/3/2019 12:51 PM\r\n- **Commit**: f324bd668aa12d9859935093ed310e72a1b0bfed\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#492)"},{"Id":"428968056","IsPullRequest":false,"CreatedAt":"2019-04-03T21:35:20","Actor":"merriemcgaw","Number":"491","RawContent":null,"Title":"PrintDialog in multithreaded window throws System.InvalidOperationException","State":"closed","Body":"@MohanramAnbukkarasu commented on [Wed Apr 03 2019](https://github.com/dotnet/winforms/issues/675)\n\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nI am using a secondary UI thread for opening the MainWindow of my WPF application as shown in thefollowing code snippet.\r\n\r\n```\r\npublic partial class App : Application\r\n{\r\n    protected override void OnStartup(StartupEventArgs e)\r\n    {\r\n        base.OnStartup(e);\r\n\r\n        Thread thread = new Thread(() =>\r\n        {\r\n            MainWindow mainWindow = new MainWindow();\r\n            mainWindow.Show();\r\n\r\n\r\n            System.Windows.Threading.Dispatcher.Run();\r\n        });\r\n\r\n        thread.IsBackground = false;\r\n        thread.SetApartmentState(ApartmentState.STA);\r\n        thread.Start();\r\n    }\r\n}\r\n```\r\n\r\nIn a button click I try to open show a PrintDialog using the following code snippet.\r\n\r\n`PrintDialog printDialog = new PrintDialog();\r\nprintDialog.ShowDialog();`\r\n\r\n\r\n**Actual behavior:** \r\n\r\nWhen this button is clicked, the app crashes with the following exception: The calling thread cannot access this object because a different thread owns it.\r\n\r\nPlease find the stack trace for the exception below.\r\n\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=The calling thread cannot access this object because a different thread owns it.\r\n  Source=WindowsBase\r\n  StackTrace:\r\n   at System.Windows.Threading.Dispatcher.VerifyAccess()\r\n   at MS.Internal.Printing.Win32PrintDialog.ShowDialog()\r\n   at System.Windows.Controls.PrintDialog.ShowDialog()\r\n   at PrintDialogDemo.MainWindow.Button_Click(Object sender, RoutedEventArgs e) in E:\\DevelopersCommunity\\PrintDialog\\Sample\\PrintDialogDemo\\PrintDialogDemo\\MainWindow.xaml.cs:line 31\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs e)\r\n   at System.Windows.Controls.Primitives.ButtonBase.OnClick()\r\n   at System.Windows.Controls.Button.OnClick()\r\n   at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)\r\n   at System.Windows.UIElement.OnMouseLeftButtonUpThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent)\r\n   at System.Windows.UIElement.OnMouseUpThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at PrintDialogDemo.App.<>c.<OnStartup>b__0_0() in E:\\DevelopersCommunity\\PrintDialog\\Sample\\PrintDialogDemo\\PrintDialogDemo\\App.xaml.cs:line 27\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n\r\n\r\n**Expected behavior:**\r\nPrintDialog should be opened without any exception.\r\n**Minimal repro:**\r\nI have attached a sample here to replicate this scenario.\r\n\r\n[PrintDialogDemo.zip](https://github.com/dotnet/winforms/files/3037795/PrintDialogDemo.zip)\r\n\n\n","Url":"https://github.com/dotnet/wpf/issues/491","RelatedDescription":"Closed issue \"PrintDialog in multithreaded window throws System.InvalidOperationException\" (#491)"},{"Id":"428936514","IsPullRequest":true,"CreatedAt":"2019-04-03T19:33:32","Actor":"ryalanms","Number":"490","RawContent":null,"Title":"Default NetCore references for internal markup compilation should include System and TypeConverter","State":"closed","Body":"Required for the internal change that reduces PresentationBuildTasks reflection-only probing targets during build time to the reference list. Duplicate NetCoreReferences are benign.","Url":"https://github.com/dotnet/wpf/pull/490","RelatedDescription":"Closed or merged PR \"Default NetCore references for internal markup compilation should include System and TypeConverter\" (#490)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-04-07T05:30:41.6476553Z","RunDurationInMilliseconds":529}