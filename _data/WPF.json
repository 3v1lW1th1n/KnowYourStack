{"Data":{"GitHub":{"Issues":[{"Id":"445729748","IsPullRequest":false,"CreatedAt":"2019-05-18T16:06:11","Actor":"PeterOscarsson","Number":"708","RawContent":null,"Title":"Define Double as Static Resource - (xmlns:system=\"clr-namespace:System;assembly=mscorlib\" hack)","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 3.0 preview 5\r\n* Windows version: (`winver`) 1809\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n  \r\n **Problem description:**\r\n\r\nxmlns:system=\"clr-namespace:System;assembly=mscorlib\"\r\nnot allowed in XAML\r\n\r\n\r\n **Actual behavior:** \r\n Compiler error\r\n\r\n **Expected behavior:**\r\n\r\n Be able to define\r\n        <system:Double x:Key = \"XLargeWidth\">200</system:Double>\r\n            <system:Double x:Key = \"StartingPointY\">-20</system:Double>\r\n\r\nfor use in styles.\r\n\r\nSetter Property=\"Width\" Value=\"{StaticResource XLargeWidth}\" \r\n\r\n **Minimal repro:**\r\n Trivial\r\n\r\nI guess (hope) I am missing something trivial.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/708","RelatedDescription":"Open issue \"Define Double as Static Resource - (xmlns:system=\"clr-namespace:System;assembly=mscorlib\" hack)\" (#708)"},{"Id":"445723511","IsPullRequest":false,"CreatedAt":"2019-05-18T14:56:22","Actor":"jorisvergeer","Number":"707","RawContent":null,"Title":"Button renders wrong after mouse leave","State":"open","Body":"* .NET Core Version: 3.0 preview 5\r\n* Windows version: 1803 build 17134.765\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: I don't know. It works fine on 4.6/4.7\r\n\r\n **Problem description:**\r\nWith this XAML:\r\n```\r\n<Window x:Class=\"RetailEntertainment.Zorgstand.SignIn.Desktop.Views.AddNewConnectionWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:RetailEntertainment.Zorgstand.SignIn.Desktop.Views\"\r\n        xmlns:vms=\"clr-namespace:RetailEntertainment.Zorgstand.SignIn.Desktop.ViewModels\"\r\n        mc:Ignorable=\"d\"\r\n        d:DataContext=\"{d:DesignInstance vms:AddNewRegistrationDialogViewModel}\"\r\n        Title=\"New registration\" Width=\"400\" Height=\"100\">\r\n    <StackPanel>\r\n        <TextBlock Text=\"Entert the connection string received from the portal:\" />\r\n        <TextBox Text=\"{Binding ConnectionString}\" />\r\n        <StackPanel Orientation=\"Horizontal\" HorizontalAlignment=\"Right\">\r\n            <Button Content=\"Cancel\" Margin=\"4\" Padding=\"2\" Command=\"{Binding CloseDialogCommand}\"/>\r\n            <Button Content=\"Save\" Margin=\"4\" Padding=\"2\" Command=\"{Binding TestAndAddRegistrationCommand}\"/>\r\n        </StackPanel>\r\n    </StackPanel>\r\n</Window>\r\n```\r\nThe buttons render wrong after mouse leaves.\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/1906639/57971363-4e266700-798d-11e9-8fb7-61618ae0e269.png)\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/1906639/57971367-567ea200-798d-11e9-890f-3980dcac4fc0.png)\r\n \r\n **Actual behavior:** \r\nIt looks like the button renders as if it has its parent size. \r\nAfter resizing the window, it renders normally again.\r\n \r\n **Expected behavior:**\r\nNo weird rendering\r\n \r\n **Minimal repro:**\r\n Code is above\r\n","Url":"https://github.com/dotnet/wpf/issues/707","RelatedDescription":"Open issue \"Button renders wrong after mouse leave\" (#707)"},{"Id":"445712089","IsPullRequest":true,"CreatedAt":"2019-05-18T12:50:01","Actor":"dotnet-maestro[bot]","Number":"706","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190517.14\r\n- **Date Produced**: 5/18/2019 7:38 AM\r\n- **Commit**: 5fe287f34ad0bf403b75ce17d8c7b19f21c744de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27717-14\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19267.12 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/706","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#706)"},{"Id":"445709531","IsPullRequest":true,"CreatedAt":"2019-05-18T12:16:10","Actor":"dotnet-maestro[bot]","Number":"705","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19267.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/705","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#705)"},{"Id":"445636258","IsPullRequest":true,"CreatedAt":"2019-05-17T22:22:14","Actor":"dotnet-maestro[bot]","Number":"704","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.2\r\n- **Date Produced**: 5/17/2019 5:29 PM\r\n- **Commit**: 9b98b1e5c5aa94967dc222826f07df6c48e927b7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19267.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/704","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#704)"},{"Id":"445578886","IsPullRequest":false,"CreatedAt":"2019-05-17T20:05:41","Actor":"vatsan-madhavan","Number":"702","RawContent":null,"Title":"WPF's Transport packages place RID specific assemblies under incorrect folder","State":"closed","Body":"WPF's internal transport packages (`Microsoft.DotNet.Wpf.DncEng`) currently place RID specific binaries under `lib\\<RID>` folder. \r\n\r\nThey should be place under `runtimes\\<RID>native\\` folder, per spec at [Supporting Multiple .NET Versions](https://docs.microsoft.com/en-us/nuget/create-packages/supporting-multiple-target-frameworks). \r\n\r\nWhen referencing one of these packages from a test, we notice that the native assemblies are not getting included in `deps.json`, which lead to the identification of this problem. Placing the binaries under the correct location remedies the `deps.json` creation errors. ","Url":"https://github.com/dotnet/wpf/issues/702","RelatedDescription":"Closed issue \"WPF's Transport packages place RID specific assemblies under incorrect folder\" (#702)"},{"Id":"445579278","IsPullRequest":true,"CreatedAt":"2019-05-17T20:05:07","Actor":"vatsan-madhavan","Number":"703","RawContent":null,"Title":"Fix packaging to place RID specific binaries under runtimes\\<rid>\\native","State":"closed","Body":"WPF's internal transport packages currently place RID specific binaries under lib\\<RID> folder. \r\n\r\nThis change moves them under runtimes\\<RID>native\\ folder, per spec at [Supporting Multiple .NET Versions](https://docs.microsoft.com/en-us/nuget/create-packages/supporting-multiple-target-frameworks). \r\n\r\nWhen referencing one of these packages from a test, we noticed that the native assemblies were not getting included in `deps.json`, which lead to the identification of this problem. Placing the binaries under the correct location remedies the `deps.json` creation errors. ","Url":"https://github.com/dotnet/wpf/pull/703","RelatedDescription":"Closed or merged PR \"Fix packaging to place RID specific binaries under runtimes\\<rid>\\native\" (#703)"},{"Id":"445421790","IsPullRequest":true,"CreatedAt":"2019-05-17T12:48:47","Actor":"dotnet-maestro[bot]","Number":"701","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190516.11\r\n- **Date Produced**: 5/17/2019 8:21 AM\r\n- **Commit**: 5cf9beae08ee36fb97669ea2f5248b19e10292bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27716-11\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19266.11 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/701","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#701)"},{"Id":"445409825","IsPullRequest":true,"CreatedAt":"2019-05-17T12:16:34","Actor":"dotnet-maestro[bot]","Number":"700","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/700","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#700)"},{"Id":"445198421","IsPullRequest":false,"CreatedAt":"2019-05-16T23:19:21","Actor":"koljaka","Number":"699","RawContent":null,"Title":"Change default HorizontalAlignment and VerticalAlignment for set of Controls to Left/Top accordingly","State":"open","Body":"Currently all controls have default HorizontalAlignment and VerticalAlignment set to Stretch. For some controls like Grid or Canvas it makes sense, but for Buttons or ComboBoxes it does not.\r\nHere is a list of suggested controls which should have default HorizontalAlignment =\"Left\" and VerticalAlignment =\"Top\":\r\n* Button\r\n* Calendar\r\n* CheckBox\r\n* ComboBox\r\n* DatePicker\r\n* Expander\r\n* Label\r\n* Menu - Only Vertical (Top)\r\n* PasswordBox\r\n* ProgressBar\r\n* RadioButton\r\n* Slider\r\n* StatusBar - Only Vertical (Bottom)\r\n* TextBlock\r\n* TextBox\r\n* ToolBar -  Only Vertical (Top)","Url":"https://github.com/dotnet/wpf/issues/699","RelatedDescription":"Open issue \"Change default HorizontalAlignment and VerticalAlignment for set of Controls to Left/Top accordingly\" (#699)"},{"Id":"444931987","IsPullRequest":true,"CreatedAt":"2019-05-16T12:49:10","Actor":"dotnet-maestro[bot]","Number":"698","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190515.11\r\n- **Date Produced**: 5/16/2019 7:07 AM\r\n- **Commit**: d2d36e7b1e0081effa2bb220fb88238392fdc389\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27715-11\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19265.4 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/698","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#698)"},{"Id":"444917653","IsPullRequest":true,"CreatedAt":"2019-05-16T12:21:54","Actor":"dotnet-maestro[bot]","Number":"697","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/697","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#697)"},{"Id":"444895737","IsPullRequest":false,"CreatedAt":"2019-05-16T11:12:26","Actor":"lindexi","Number":"696","RawContent":null,"Title":"Full temporary folder will crash cursor initialization","State":"open","Body":"* .NET Core Version: 3.0 Preview5\r\n* Windows version: windows 10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nThe cursor will crash at initialization when the temporary folder full.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nI set a cursor from a resource and use this code.\r\n\r\n```\r\nvar uri = new Uri(\"pack://application:,,,/Foo.cur\");\r\nvar resource = Application.GetResourceStream(uri);\r\nCursor = new Cursor(resource.Stream); \r\n```\r\n\r\nI can find the cursor will crash at initialization when the temporary folder full.\r\n\r\n    System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n    System.IO.Directory.InternalCreateDirectory(String fullPath, String path, Object dirSecurityObj, Boolean checkHost)\r\n    System.IO.Directory.InternalCreateDirectoryHelper(String path, Boolean checkHost)\r\n    System.IO.Directory.CreateDirectory(String path)\r\n    System.IO.FileHelper.CreateAndOpenTemporaryFile(String& filePath, FileAccess fileAccess, FileOptions fileOptions, String extension, String subFolder)\r\n    System.Windows.Input.Cursor.LoadFromStream(Stream cursorStream)\r\n    System.Windows.Input.Cursor..ctor(Stream cursorStream, Boolean scaleWithDpi)\r\n    System.Windows.Input.Cursor..ctor(Stream cursorStream)\r\n    FawlalnejajerelaWhallgemcurkear.MainWindow..ctor()\r\n\r\n **Expected behavior:**\r\n \r\nThe cursor can be set.\r\n\r\n **Minimal repro:**\r\n \r\nRun this code when the temporary folder full.\r\n\r\n            var uri = new Uri(\"pack://application:,,,/Text.cur\");\r\n            var resource = Application.GetResourceStream(uri);\r\n            Cursor = new Cursor(resource.Stream);\r\n\r\nAnd the other way is set a can not visit folder as the temp folder. And you can see the code in https://github.com/lindexi/lindexi_gd/tree/8e346e750fe2075e1366a2a098d63af3b50db177/FawlalnejajerelaWhallgemcurkear that I set a folder name as `D:\\lindexi\\不存在文件` that is an unauthorized access folder.\r\n\r\n**Reason**\r\n\r\nThe Cursor.LegacyLoadFromStream will generate a temporary file based on the memory stream. But the [Path.GetTempFileName Method](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.gettempfilename?wt.mc_id=MVP ) limit the number of the files is 65535 and it will throw IOException when overcount.\r\n\r\nThe LoadFromStream code in https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/Input/Cursor.cs,090cb505b6310a4e\r\n\r\nThe LegacyLoadFromStream code in https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/Input/Cursor.cs,935d59bd1efe76e4,references\r\n\r\nActual LoadFromStream may ignore LegacyLoadFromStream. But FileHelper.CreateAndOpenTemporaryFile will generate the file in WPF folder by default and use Path.GetRandomFileName to create a file without check access. And it also crashes when the temp folder can not write.\r\n\r\n**solution**\r\n\r\n1. Set the Environment Variable to the own folder that can read or write. \r\n            ```\r\n            Environment.SetEnvironmentVariable(\"TEMP\", newTempFolder);\r\n            Environment.SetEnvironmentVariable(\"TMP\", newTempFolder);\r\n            ```\r\n  Why set the environment variable is safe? Because all the process can call the `Path.GetTempFileName` that will throw IOException when the other process uses it to create and do not delete. \r\n1. Use the `public Cursor(string cursorFile)` replace `public Cursor(Stream cursorStream)` that the first will call LoadFromFile and the LoadFromFile will load the file and do not need to copy to temp folder.\r\n\r\n\r\nReference\r\n\r\n[WPF 光标初始化的时候 temp 文件夹满了无法创建](https://blog.lindexi.com/post/wpf-%E5%85%89%E6%A0%87%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E6%97%B6%E5%80%99-temp-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%BB%A1%E4%BA%86%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA )","Url":"https://github.com/dotnet/wpf/issues/696","RelatedDescription":"Open issue \"Full temporary folder will crash cursor initialization\" (#696)"},{"Id":"444760727","IsPullRequest":false,"CreatedAt":"2019-05-16T05:28:11","Actor":"pocki","Number":"695","RawContent":null,"Title":"Binding to ExpandoObject Properties throws Binding Exception","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568, Commit: b487ff10aa\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n* Windows version: Windows 10 Version 1703 (Build: 15063.1746)\r\n* Visual Studio version: 16.1.0 Preview 3\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No, Binding works as expected\r\n \r\n **Problem description:**\r\nBinding an ExpandoObject in WPF Control (ex. Textbox.Text) throws BindingExpression Error in .NET Core WPF, but Binding works in .NET Framework (4.8 and 4.7.2)\r\n \r\n **Actual behavior:**\r\nThrowing BindingExpression Error\r\nSystem.Windows.Data Error: 40\r\nBindingExpression path error: 'Test' property not found on 'object' ''ExpandoObject' (HashCode=58204539)'. BindingExpression:Path=TestProperty.Test; DataItem='MainViewModel' (HashCode=16745860); target element is 'TextBlock' (Name=''); target property is 'Text' (type 'String')\r\n\r\n **Expected behavior:**\r\n Binding Property as in .NET Framework\r\n\r\n **Minimal repro:**\r\n```csharp\r\nusing System.ComponentModel;\r\nusing System.Dynamic;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace WpfApp1.ViewModels\r\n{\r\n\tpublic class MainViewModel : INotifyPropertyChanged\r\n\t{\r\n\t\tpublic MainViewModel()\r\n\t\t{\r\n\t\t\tTestProperty = new ExpandoObject();\r\n\t\t\tTestProperty.Test = \"abc\";\r\n\t\t\tTestProperty.ABC = \"xyz\";\r\n\t\t}\r\n\r\n\t\tprivate dynamic TestPropertyValue = default;\r\n\t\tpublic dynamic TestProperty { get { return TestPropertyValue; } set { TestPropertyValue = value; NotifyPropertyChanged(nameof(TestProperty)); } }\r\n\r\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\r\n\t\tprivate void NotifyPropertyChanged([CallerMemberName] string propertyName = \"\")\r\n\t\t{\r\n\t\t\tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n```xaml\r\n<Window x:Class=\"WpfApp1.MainWindow\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\txmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\txmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n\t\t\t\txmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:viewmodels=\"clr-namespace:WpfApp1.ViewModels\" \tmc:Ignorable=\"d\" DataContext=\"{DynamicResource ResourceKey=MainVM}\">\r\n\t<Window.Resources>\r\n\t\t<viewmodels:MainViewModel x:Key=\"MainVM\" />\r\n\t</Window.Resources>\r\n\t<StackPanel Orientation=\"Vertical\">\r\n\t\t<TextBlock Text=\"{Binding Path=TestProperty.Test}\"/>\r\n\t\t<TextBlock Text=\"{Binding Path=TestProperty.ABC}\"/>\r\n\t</StackPanel>\r\n</Window>\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/695","RelatedDescription":"Open issue \"Binding to ExpandoObject Properties throws Binding Exception\" (#695)"},{"Id":"444732263","IsPullRequest":true,"CreatedAt":"2019-05-16T04:57:28","Actor":"rladuca","Number":"694","RawContent":null,"Title":"Fix DebugType in Release builds","State":"closed","Body":"We were using DebugType=Full for all build configurations.  This can place undo burden on the JIT for Release builds.  In Release, we still want to emit a PDB, but we want as much optimization as possible so we should use pdbonly.\r\n\r\nfixes #693 ","Url":"https://github.com/dotnet/wpf/pull/694","RelatedDescription":"Closed or merged PR \"Fix DebugType in Release builds\" (#694)"},{"Id":"444732061","IsPullRequest":false,"CreatedAt":"2019-05-16T04:57:28","Actor":"rladuca","Number":"693","RawContent":null,"Title":"Incorrect DebugType in Release builds","State":"closed","Body":"We should be setting DebugType to pdbonly in release builds.  Setting it to Full can incur penalties to JIT.","Url":"https://github.com/dotnet/wpf/issues/693","RelatedDescription":"Closed issue \"Incorrect DebugType in Release builds\" (#693)"},{"Id":"444543410","IsPullRequest":false,"CreatedAt":"2019-05-15T16:52:42","Actor":"XianghanWang","Number":"692","RawContent":null,"Title":"Disable lower version of target framework in wpf netcore project property page.","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: RS5\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011555\r\n Commit:    50184f3f6c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x86\r\n Base Path:   D:\\VS\\src\\Tools\\dotnet\\sdk\\3.0.100-preview5-011555\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27623-11\r\n  Commit:  0090de2841\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011555 [D:\\VS\\src\\Tools\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19223-06 [D:\\VS\\src\\Tools\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27623-11 [D:\\VS\\src\\Tools\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27623-11 [D:\\VS\\src\\Tools\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\nSteps to repro:\r\n1. Create new WPF netcore project\r\n2. Open project property page, make sure the Target framework is .net core 3.0\r\n3. Open the drop down \r\n\r\nActual: it includes all the target frameworks, from 1.0 to 3.0\r\nExpected: we should disable all lower versions as they don't support WPF net core project.\r\n\r\nIf you switch to lower version like 2.1, build will fail.\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0234\tThe type or namespace name 'Controls' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t7\tActive​\r\nError\tCS0234\tThe type or namespace name 'Data' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t8\tActive​\r\nError\tCS0234\tThe type or namespace name 'Documents' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t9\tActive​\r\nError\tCS0234\tThe type or namespace name 'Media' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t11\tActive​\r\nError\tCS0234\tThe type or namespace name 'Media' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t12\tActive​\r\nError\tCS0234\tThe type or namespace name 'Navigation' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t13\tActive​\r\nError\tCS0234\tThe type or namespace name 'Shapes' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t14\tActive​\r\nError\tCS0246\tThe type or namespace name 'Window' could not be found (are you missing a using directive or an assembly reference?)\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t21\tActive​\r\nError\tCS0103\tThe name 'InitializeComponent' does not exist in the current context\tWpfApp4\tC:\\Users\\xiwa\\source\\repos\\WpfApp4\\WpfApp4\\MainWindow.xaml.cs\t25\tActive​\r\nWarning\tMC6000\tProject file must include the .NET Framework assembly 'PresentationCore, PresentationFramework' in the reference list.\tWpfApp4\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\targets\\Microsoft.WinFX.targets\t243\t​\r\nError\tNETSDK1073\tThe FrameworkReference 'Microsoft.WindowsDesktop.App' was not recognized\tWpfApp4\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets\t173\t​\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/692","RelatedDescription":"Open issue \"Disable lower version of target framework in wpf netcore project property page.\" (#692)"},{"Id":"444542390","IsPullRequest":false,"CreatedAt":"2019-05-15T16:50:11","Actor":"XianghanWang","Number":"691","RawContent":null,"Title":"\"Install other frameworks\" open new file explorer window","State":"open","Body":"Steps:\r\n Create new wpf netcore project\r\n Open project property page\r\n In Target framework dropdown, choose install other frameworks...\r\n\r\nI expect something to direct us to the framework install files or download location, but actually got a new file explorer window pointing to Documents","Url":"https://github.com/dotnet/wpf/issues/691","RelatedDescription":"Open issue \"\"Install other frameworks\" open new file explorer window\" (#691)"},{"Id":"444416196","IsPullRequest":true,"CreatedAt":"2019-05-15T12:52:17","Actor":"dotnet-maestro[bot]","Number":"690","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190514.15\r\n- **Date Produced**: 5/15/2019 7:32 AM\r\n- **Commit**: 73226d6f119c757813f47b0dc021e8700d525f71\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27714-15\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19264.9 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/690","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#690)"},{"Id":"444401195","IsPullRequest":true,"CreatedAt":"2019-05-15T12:17:18","Actor":"dotnet-maestro[bot]","Number":"689","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19264.13\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/689","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#689)"},{"Id":"444307035","IsPullRequest":false,"CreatedAt":"2019-05-15T08:36:38","Actor":"daviddenis-stx","Number":"688","RawContent":null,"Title":"Enable WPF projects build from Unix","State":"open","Body":"It would be quite useful and practical (for example in CI/CD setup with Linux docker images) to be able to cross compile WPF code using `dotnet build` from any of the supported platforms (not only Windows). Currently `dotnet build` on such projects will fail with error, unless executed on Windows.\r\n\r\nWith this very simple patch (on preview5), compilation goes through (Tested on ubuntu 18.04 LTS)\r\n\r\nhttps://github.com/systemathics/wpf/commit/a9b28ed2998f13ee3c9bce37f405ff820cf43b08 \r\n\r\nOn our code base, the WPF assemblies produced by building from Linux seem to be almost identical to their counterparts built on Windows. The only difference being in BAML embedded resources, they are not binary identical but when decompiled with ILSPY, their XAML content are.\r\n\r\nThis issue is there to perhaps consider adding cross compilation of WPF projects and/or referencing unforeseen problems that may happen if we do \r\n\r\nNote: It could also apply to WinForms projects, we managed to build ours correctly with the above patch, but they fail to execute because of unrelated https://github.com/microsoft/msbuild/issues/2221 (Failure occurs also if built from Windows)","Url":"https://github.com/dotnet/wpf/issues/688","RelatedDescription":"Open issue \"Enable WPF projects build from Unix\" (#688)"},{"Id":"443889710","IsPullRequest":true,"CreatedAt":"2019-05-14T12:45:10","Actor":"dotnet-maestro[bot]","Number":"687","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190513.13\r\n- **Date Produced**: 5/14/2019 8:02 AM\r\n- **Commit**: 91a4df0883082c784b0826874874d65b3fcf79ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27713-13\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19263.8 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/687","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#687)"},{"Id":"443877332","IsPullRequest":true,"CreatedAt":"2019-05-14T12:16:41","Actor":"dotnet-maestro[bot]","Number":"686","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/686","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#686)"},{"Id":"443659779","IsPullRequest":false,"CreatedAt":"2019-05-14T00:40:14","Actor":"heaths","Number":"685","RawContent":null,"Title":"Add Page automatically, remove from None automatically","State":"open","Body":"When the SDK is \"Microsoft.NET.Sdk.WindowsDesktop\", it would be nice not to have to add `<UseWPF>true</UseWPF>`. Especially when migrating projects from old-style .csproj files, this is easy to forget and seems otherwise unnecessary since I already claimed what project type I'm going to build. And wouldn't this be true of both WPF and UWP projects anyway - to include *.xaml files as `<Page>` items?\r\n\r\nAlso, why must the IDE - or, when using VSCode, we (manually) - add `<None Remove=\"...\"/>` when the targets could do this for any `<Page>` items. Could this also be done automatically in the targets for \"Microsoft.NET.Sdk.WindowsDesktop\"?\r\n\r\nThis could make WPF SDK-style .csproj files as slim as non-WPF SDK-style .csproj files.","Url":"https://github.com/dotnet/wpf/issues/685","RelatedDescription":"Open issue \"Add Page automatically, remove from None automatically\" (#685)"},{"Id":"443580648","IsPullRequest":false,"CreatedAt":"2019-05-13T20:14:26","Actor":"Lakritzator","Number":"684","RawContent":null,"Title":"Using a German UI Culture crashes WPF application","State":"open","Body":"* .NET Core Version: 3.0.100-preview6-011805 and 3.0.100-preview6-011865\r\n* Windows version: Windows 7 and Windows 10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n_As a Dutch guy I always wanted to say there is a problem with the German culture, I finally manage to do so without offending someone._\r\n\r\nWhen showing a WPF window with the UI culture set to German, the application crashes.\r\n \r\n **Actual behavior:**\r\n```\r\n System.Windows.Markup.XamlParseException\r\n  HResult=0x80131501\r\n  Message=Zeilennummer \"10\" und Zeilenposition \"10\" von \"Durch den Aufruf des Konstruktors für Typ \"System.Windows.Controls.TextBox\", der den angegebenen Bindungseinschränkungen entspricht, wurde eine Ausnahme ausgelöst.\".\r\n  Source=PresentationFramework\r\n  StackTrace:\r\n   at System.Windows.Markup.XamlReader.RewrapException(Exception e, IXamlLineInfo lineInfo, Uri baseUri)\r\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\r\n   at System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\r\n   at System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream)\r\n   at System.Windows.Application.LoadComponent(Object component, Uri resourceLocator)\r\n   at Test.MainWindow.InitializeComponent() in C:\\Projects\\Microsoft\\Test\\WpfCultureBug\\MainWindow.xaml:line 1\r\n\r\nInner Exception 1:\r\nArgumentException: Requested value 'EINFG' was not found.\r\n```\r\n\"EINFG\" is short for einfügen, which means insert.\r\n\r\n **Expected behavior:**\r\n No exception.\r\n\r\n **Minimal repro:**\r\nhttps://github.com/Lakritzator/WpfCultureBug\r\n\r\nIn general just calling:\r\n```\r\nCultureInfo.CurrentUICulture = CultureInfo.GetCultureInfo(\"de-DE\");\r\n```\r\nBefore showing a text-box crashes the application.\r\n","Url":"https://github.com/dotnet/wpf/issues/684","RelatedDescription":"Open issue \"Using a German UI Culture crashes WPF application\" (#684)"},{"Id":"443373759","IsPullRequest":true,"CreatedAt":"2019-05-13T12:44:42","Actor":"dotnet-maestro[bot]","Number":"683","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190512.03\r\n- **Date Produced**: 5/12/2019 4:01 PM\r\n- **Commit**: 1085b414679a72791b4de59c09bf4c53144bf5ab\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27712-03\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/683","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#683)"},{"Id":"443362305","IsPullRequest":true,"CreatedAt":"2019-05-13T12:17:11","Actor":"dotnet-maestro[bot]","Number":"682","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/682","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#682)"},{"Id":"443278737","IsPullRequest":false,"CreatedAt":"2019-05-13T08:51:48","Actor":"BackDoorManUC","Number":"681","RawContent":null,"Title":"Binding with StringFormat doesn't work for tooltips","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: 1803 (17763.437)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nProbably an old bug: https://stackoverflow.com/questions/197095/wpf-binding-with-stringformat-doesnt-work-on-tooltips\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\nStringFormat is ignored\r\n\r\n```xaml\r\n<Button Content=\"Today\" ToolTip=\"{Binding Source={x:Static sys:DateTime.Now}, StringFormat=YYYY}\" />\r\n```\r\n\r\n **Expected behavior:**\r\n\r\nIt should work.\r\n","Url":"https://github.com/dotnet/wpf/issues/681","RelatedDescription":"Open issue \"Binding with StringFormat doesn't work for tooltips\" (#681)"},{"Id":"443257120","IsPullRequest":true,"CreatedAt":"2019-05-13T07:59:16","Actor":"KodamaSakuno","Number":"680","RawContent":null,"Title":"Fix bug where x:Static argument is treated as member of 'SystemParameters' by mistake","State":"open","Body":"Fixes #679\r\n\r\nThe issue is that the original code forgets to check `memberInfo`'s declaring type. When there's a property which shares a same member name of `SystemParameters` or `SystemResourceKeyID`, it'll be treated as member of `SystemParameters`.\r\n\r\nThe following content is a part of compiled baml of issue demo. Generated by dnSpy.\r\n\r\nBefore:\r\n```\r\nElementStart [TypeId=0xff02, Flags=0x00]\r\n    ContentProperty [AttributeId=0xff2b]\r\n    LineNumberAndPosition [LineNumber=0x0000000f, LinePosition=0x0000000a]\r\n    ElementStart [TypeId=0xffc9, Flags=0x00]\r\n        PropertyWithExtension [AttributeId=0xfff2, Flags=0x025a, ValueId=0xfe52]\r\n        LinePosition [LinePosition=0x00000011]\r\n    ElementEnd\r\nElementEnd\r\n```\r\nAfter:\r\n```\r\nElementStart [TypeId=0xff02, Flags=0x00]\r\n    ContentProperty [AttributeId=0xff2b]\r\n    LineNumberAndPosition [LineNumber=0x0000000f, LinePosition=0x0000000a]\r\n    ElementStart [TypeId=0xffc9, Flags=0x00]\r\n        TypeInfo [TypeId=0x0001, AssemblyId=0x0000, TypeFullName=\"XamlBugs.StaticProperties.FooClass\"]\r\n        AttributeInfo [AttributeId=0x0001, OwnerTypeId=0x0001, AttributeUsage=0x00, Name=\"Border\"]\r\n        PropertyWithExtension [AttributeId=0xfff2, Flags=0x025a, ValueId=0x0001]\r\n        LinePosition [LinePosition=0x00000011]\r\n    ElementEnd\r\nElementEnd\r\n```","Url":"https://github.com/dotnet/wpf/pull/680","RelatedDescription":"Open PR \"Fix bug where x:Static argument is treated as member of 'SystemParameters' by mistake\" (#680)"},{"Id":"443199371","IsPullRequest":false,"CreatedAt":"2019-05-13T04:23:49","Actor":"walterlv","Number":"679","RawContent":null,"Title":"XAML {x:Static FooClass.Border} will be compiled unexpectedly to {x:Static SystemParameters.Border}","State":"open","Body":"* .NET Core Version: 3.0 Preview5\r\n* Windows version: 10.0.18895.1000\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nWhen assigning a WPF dependency property using `x:Static` markup extension and pass a CLR property named `Border` into it, the XAML compiler will compile this static property to `SystemParameters.Border` which is not expected.\r\n\r\n **Actual behavior:**\r\n\r\nThis first one will be compiled to the second.\r\n\r\n```xml\r\n<!-- The original code -->\r\n<Button Content=\"{x:Static local:FooClass.Border}\" />\r\n```\r\n\r\n```xml\r\n<!-- The compiled code -->\r\n<Button Content=\"{x:Static SystemParameters.Border}\" />\r\n```\r\n\r\n **Expected behavior:**\r\n\r\nXAML compiler should not change the original property assigning of `x:Static` markup extension.\r\n \r\n **Minimal repro:**\r\n \r\n1. Create a WPF (.NET Core / .NET Framework) project;\r\n1. Write a class with a static property named `Border`;\r\n1. Write a `x:Static` usage in a XAML file.\r\n\r\nYou can view the minimal reproduction on my GitHub project here:\r\n\r\n- [walterlv/XamlBugs.StaticProperties](https://github.com/walterlv/XamlBugs.StaticProperties)\r\n\r\nThe key codes are here:\r\n\r\n```csharp\r\n// This namespace can be changed to any other and the bug still reproduces.\r\nnamespace XamlBugs.StaticProperties\r\n{\r\n    /// <summary>\r\n    /// The class that provide a `Border` property.\r\n    /// You can change this class name to any other and the bug still reproduces.\r\n    /// </summary>\r\n    public static class FooClass\r\n    {\r\n        /// <summary>\r\n        /// The correct value for this property is `string.Empty`, but you'll see `1` in actual.\r\n        /// </summary>\r\n        public static string Border => \"\";\r\n    }\r\n}\r\n```\r\n\r\n```xml\r\n<Window x:Class=\"XamlBugs.StaticProperties.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:XamlBugs.StaticProperties\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n\r\n        <!-- When you run this application, and you'll see an incorrect content value of this `Button`.\r\n             If you try to decompile this assembly and view the mainwindow.baml file,\r\n             you'll find that the static value has been changed to `SystemParameters.Border` -->\r\n        <!-- The XAML namespace prefix can be changed to any other and the bug still reproduces. -->\r\n        <Button Content=\"{x:Static local:FooClass.Border}\" />\r\n\r\n        <!-- Don't uncomment this line, because it will cause a runtime error.\r\n             The `FooClass.Border` property is a string,\r\n             but it will be compiled to `SystemParameters.Border` which is not a string. -->\r\n        <!--<TextBlock Text=\"{x:Static local:FooClass.Border}\" />-->\r\n        \r\n    </Grid>\r\n</Window>\r\n```","Url":"https://github.com/dotnet/wpf/issues/679","RelatedDescription":"Open issue \"XAML {x:Static FooClass.Border} will be compiled unexpectedly to {x:Static SystemParameters.Border}\" (#679)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-19T05:30:48.119951Z","RunDurationInMilliseconds":603}