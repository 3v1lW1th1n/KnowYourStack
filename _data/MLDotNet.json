{"Data":{"GitHub":{"Issues":[{"Id":"363812714","IsPullRequest":true,"CreatedAt":"2018-09-26T00:18:34","Actor":"Ivanidzo4ka","Number":"1033","RawContent":null,"Title":"Convert categorical hash to estimator","State":"open","Body":"Convert Cathash to estimator","Url":"https://github.com/dotnet/machinelearning/pull/1033","RelatedDescription":"Open PR \"Convert categorical hash to estimator\" (#1033)"},{"Id":"363678306","IsPullRequest":true,"CreatedAt":"2018-09-25T23:33:54","Actor":"eerhardt","Number":"1022","RawContent":null,"Title":"Merge ModuleCatalog into ComponentCatalog.","State":"closed","Body":"This completes the ComponentCatalog refactoring work for `v0.6`.  It merges the `ModuleCatalog` and `ComponentCatalog` types into a single type.\r\n\r\nFollow up for #208.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1022","RelatedDescription":"Closed or merged PR \"Merge ModuleCatalog into ComponentCatalog.\" (#1022)"},{"Id":"363351758","IsPullRequest":true,"CreatedAt":"2018-09-25T22:45:53","Actor":"sfilipi","Number":"1009","RawContent":null,"Title":"Adding the extension methods for FastTree classification and regression","State":"closed","Body":"OnGoing work to address #754. \r\n\r\nAdded the extensions to the Binary and Regression context for the respective FastTree trainers. \r\nRanking coming on a separate PR, since it needs a bit more work with the context and elevator changes. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1009","RelatedDescription":"Closed or merged PR \"Adding the extension methods for FastTree classification and regression\" (#1009)"},{"Id":"363361545","IsPullRequest":true,"CreatedAt":"2018-09-25T22:41:23","Actor":"artidoro","Number":"1012","RawContent":null,"Title":"Conversion of Parallel Stochastic Gradient Descent (SymSGD) to estimator","State":"closed","Body":"Ongoing work on converting the trainers to estimators. This PR converts the Parallel Stochastic Gradient Descent classification trainer (SymSGD).","Url":"https://github.com/dotnet/machinelearning/pull/1012","RelatedDescription":"Closed or merged PR \"Conversion of Parallel Stochastic Gradient Descent (SymSGD) to estimator\" (#1012)"},{"Id":"363782669","IsPullRequest":true,"CreatedAt":"2018-09-25T21:59:03","Actor":"eerhardt","Number":"1032","RawContent":null,"Title":"Add instructions for building for .NET Core 3.0, and make them work.","State":"open","Body":"Fix #1011 \r\n\r\nThere are a couple manual steps necessary to build for .NET Core 3.0. Adding instructions on how to do it, and changing the build infrastructure so the build actually works.","Url":"https://github.com/dotnet/machinelearning/pull/1032","RelatedDescription":"Open PR \"Add instructions for building for .NET Core 3.0, and make them work.\" (#1032)"},{"Id":"363779757","IsPullRequest":false,"CreatedAt":"2018-09-25T21:48:56","Actor":"Zruty0","Number":"1031","RawContent":null,"Title":"Need to be able to hash most column types","State":"open","Body":"Previously, we relied on HashJoin transform to hash all kinds of column types, and this was our story for 'stratification column' functionality: any stratification column is first hashed, then it's a legal input to `RangeFilter`.\r\n\r\nI feel that we shouldn't have *two* hashing operations, but instead we should have *one*, call it 'hashing', and make it capable of computing a hash of\r\n- any primitive type\r\n- any key type (that's currently the case)\r\n- any vector of the above.","Url":"https://github.com/dotnet/machinelearning/issues/1031","RelatedDescription":"Open issue \"Need to be able to hash most column types\" (#1031)"},{"Id":"363777482","IsPullRequest":true,"CreatedAt":"2018-09-25T21:41:23","Actor":"eerhardt","Number":"1030","RawContent":null,"Title":"Update our Windows CI leg to use the non-Hosted Windows queue","State":"open","Body":"We are getting a random test hang using the hosted Windows queue. Changing to a non-hosted queue so we will be able to debug it if it happens again.\r\n\r\n/cc @shauheen ","Url":"https://github.com/dotnet/machinelearning/pull/1030","RelatedDescription":"Open PR \"Update our Windows CI leg to use the non-Hosted Windows queue\" (#1030)"},{"Id":"363775056","IsPullRequest":true,"CreatedAt":"2018-09-25T21:33:28","Actor":"yaeldekel","Number":"1029","RawContent":null,"Title":"Remove DnnAnalyzer from the Microsoft.ML.TensorFlow nuget","State":"open","Body":"Fixes #1027 .","Url":"https://github.com/dotnet/machinelearning/pull/1029","RelatedDescription":"Open PR \"Remove DnnAnalyzer from the Microsoft.ML.TensorFlow nuget\" (#1029)"},{"Id":"363767206","IsPullRequest":true,"CreatedAt":"2018-09-25T21:08:47","Actor":"Anipik","Number":"1028","RawContent":null,"Title":"[WIP]Remove AlignedArray and Aligned Matrix from src and tests","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/1018\r\n\r\ncc @danmosemsft @eerhardt @TomFinley @yaeldekel @shauheen \r\n\r\nAdding wip tag until we have benchmark results","Url":"https://github.com/dotnet/machinelearning/pull/1028","RelatedDescription":"Open PR \"[WIP]Remove AlignedArray and Aligned Matrix from src and tests\" (#1028)"},{"Id":"363709674","IsPullRequest":true,"CreatedAt":"2018-09-25T20:36:49","Actor":"abgoswam","Number":"1025","RawContent":null,"Title":"Use  TextLoader.Create in unit test TensorFlowTransformCifarSavedModel","State":"closed","Body":"Fixes a build break in master cause by  two commits #853 and #970  that went in almost at the same time \r\n\r\n(the two commits work fine by themselves, but there is a dependency between them which caused master to fail)\r\n\r\nThe fix is to use TextLoader.Create instead of env.CreateLoader(\"Text...\")\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1025","RelatedDescription":"Closed or merged PR \"Use  TextLoader.Create in unit test TensorFlowTransformCifarSavedModel\" (#1025)"},{"Id":"363742275","IsPullRequest":false,"CreatedAt":"2018-09-25T19:58:18","Actor":"eerhardt","Number":"1027","RawContent":null,"Title":"Microsoft.ML.TensorFlow is currently broken","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: all\r\n- **.NET Version (eg., dotnet --info)**:  any\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCreate a .NET Core console project that references the latest version of `Microsoft.ML.TensorFlow`.\r\n- **What happened?**\r\nI don't get a reference to the `Microsoft.ML.TensorFlow.dll`. I only get a reference to `DnnAnalyzer.dll`\r\n![image](https://user-images.githubusercontent.com/8291187/46039356-1f444380-c0d3-11e8-8e69-3e1ade0a9dc8.png)\r\n\r\n- **What did you expect?**\r\nI expected to get a reference to `Microsoft.ML.TensorFlow.dll` so I could call methods in it.\r\n\r\n### Notes\r\n\r\nThe reason this happens is because we are including the `DnnAnalyzer.dll` in the `lib\\netcoreapp2.0` directory of the `Microsoft.ML.TensorFlow` nuget package:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/46039442-5dd9fe00-c0d3-11e8-965d-da3080f91a41.png)\r\n\r\n\r\nNuGet only picks assets from 1 of these folders. And since my app is .NET Core, it only picks the assemblies from the `lib\\netcoreapp2.0` directory.\r\n\r\n/cc @ericstj @yaeldekel @abgoswam \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1027","RelatedDescription":"Open issue \"Microsoft.ML.TensorFlow is currently broken\" (#1027)"},{"Id":"363714030","IsPullRequest":false,"CreatedAt":"2018-09-25T18:39:03","Actor":"justinormont","Number":"1026","RawContent":null,"Title":"Rolling Cross-validation for Time-series","State":"open","Body":"To properly handle time-series (and time-dependent data in general), we should implement a Rolling Cross-validation to add to our existing CV & TrainTest modes.\r\n\r\nWe are currently merging various time-series functionality from the internal repo to this repo via https://github.com/dotnet/machinelearning/pull/977 _\"Port Time Series\"_. This PR does not include a rolling cross-validation, used heavily in time-series tasks.\r\n\r\nRolling CV is better for time dependent datasets by always testing on data which is _newer_ than the training data. Standard CV leaks future data in to the training set. Other names of Rolling CV include { walk-forward / roll-forward / rolling origin / window } CV.\r\n\r\nBackground on method:\r\nhttp://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html\r\nhttps://otexts.org/fpp2/accuracy.html#time-series-cross-validation\r\nhttps://stats.stackexchange.com/questions/14099/using-k-fold-cross-validation-for-time-series-model-selection\r\nhttps://robjhyndman.com/hyndsight/tscv/\r\nhttps://www.kaggle.com/c/recruit-restaurant-visitor-forecasting/discussion/46602\r\nhttps://towardsdatascience.com/time-series-nested-cross-validation-76adba623eb9\r\n\r\n\r\nTo further investigate missing time-series components, the [Azure ML Forecasting Toolkit](https://docs.microsoft.com/en-us/python/api/azuremlftk/) is a good package listing components needed for this task:  \r\n* Metrics: [MAPE, MASE_single_grain, SMAPE](https://docs.microsoft.com/en-us/python/api/azuremlftk/ftk.metrics.metrics?view=azure-forecasting-py)\r\n* Models: [ARIMA, etc](https://docs.microsoft.com/en-us/python/api/azuremlftk/ftk.models?view=azure-forecasting-py)\r\n* etc\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1026","RelatedDescription":"Open issue \"Rolling Cross-validation for Time-series\" (#1026)"},{"Id":"363704997","IsPullRequest":true,"CreatedAt":"2018-09-25T18:12:52","Actor":"artidoro","Number":"1024","RawContent":null,"Title":"WIP: Updated the building instructions to specify minimum supported VS version","State":"open","Body":"Fixes #894.\r\n\r\nWith an old version of VS (15.8.1) there are build errors. We should specify the minimum VS version that we support. \r\n\r\nI specified that the minimum VS version to build our project is 18.5.4 in the building instructions for windows. I tested that with version 15.8.4 there are no build errors. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1024","RelatedDescription":"Open PR \"WIP: Updated the building instructions to specify minimum supported VS version\" (#1024)"},{"Id":"363699164","IsPullRequest":false,"CreatedAt":"2018-09-25T17:56:09","Actor":"singlis","Number":"1023","RawContent":null,"Title":"TrainUtils.Train does not have consistent API usage for the calibrator argument","State":"open","Body":"### Issue\r\nTrainUtils.Train has two different API signatures, in one case the calibrator is an IComponentFactory<ICablibratorTrainer> where in the other case it is an ICalibratorTrainerFactory. \r\n\r\nThis should be consistent with the ICalibratorTrainerFactory becoming IComponentFactory<ICalibratorTrainer>.\r\n\r\n\r\n### Source code / logs\r\n        public static IPredictor Train(IHostEnvironment env, IChannel ch, RoleMappedData data, ITrainer trainer, RoleMappedData validData,\r\n            IComponentFactory<ICalibratorTrainer> calibrator, int maxCalibrationExamples, bool? cacheData, IPredictor inputPredictor = null)\r\n\r\n        public static IPredictor Train(IHostEnvironment env, IChannel ch, RoleMappedData data, ITrainer trainer,\r\n            ICalibratorTrainerFactory calibrator, int maxCalibrationExamples)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1023","RelatedDescription":"Open issue \"TrainUtils.Train does not have consistent API usage for the calibrator argument\" (#1023)"},{"Id":"363623527","IsPullRequest":true,"CreatedAt":"2018-09-25T14:59:54","Actor":"jwood803","Number":"1021","RawContent":null,"Title":"WIP: Update input arguments in CpuMath files","State":"open","Body":"Fix for #824 \r\n\r\nMarked as WIP since this may have more updates to come.\r\n\r\n@briancylui @eerhardt @tannergooding Feel free to let me know if anything already done should be changed.","Url":"https://github.com/dotnet/machinelearning/pull/1021","RelatedDescription":"Open PR \"WIP: Update input arguments in CpuMath files\" (#1021)"},{"Id":"363452419","IsPullRequest":true,"CreatedAt":"2018-09-25T07:52:03","Actor":"sfilipi","Number":"1020","RawContent":null,"Title":"LightGbm pigstensions","State":"open","Body":"Ongoing work to address #754 \r\nThose are the LightGbm binary and regression extension methods. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1020","RelatedDescription":"Open PR \"LightGbm pigstensions\" (#1020)"},{"Id":"363406101","IsPullRequest":false,"CreatedAt":"2018-09-25T04:31:35","Actor":"justinormont","Number":"1019","RawContent":null,"Title":"Backslash encoded in filenames for model zip","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: OSX 10.12\r\n\r\nWhen storing the created models in a zip file, we are adding slashes to the filename instead of actual folders. This leads to the **cross-platform oddity** where on OSX (and likely linux) the folder structure isn't created when unzipping a model.\r\n\r\nOn OSX, the entire model unzips to a single monolithic folder: _(note slashes in the actual filename)_\r\n![unzipped_model_on_osx](https://user-images.githubusercontent.com/4080826/45992299-e312d380-c03d-11e8-999d-fb0b87f6f0f4.png)\r\n\r\nUnder Win10, the model unzips to a folder structure: _(see left side of image)_\r\n> ![win10_model_unzip](https://user-images.githubusercontent.com/4080826/45992550-523cf780-c03f-11e8-869c-181fa8e80f03.png)\r\n\r\nModel shown is from: https://github.com/dotnet/machinelearning/blob/a22c4e63cf269eccd19dbb97492346ca3da34db3/test/data/sentiment_model.zip\r\n\r\nFrom quick searching, it looks like the slash is added here:\r\nhttps://github.com/dotnet/machinelearning/blob/5e08fa1ea7bfb54f28ed0815cb6413e0068e6dd1/src/Microsoft.ML.Data/Model/Repository.cs#L223-L229\r\n\r\nWe should look if this is actually necessary, as this is the first I've run into encoding slashes directly in to a filename in a zip file.","Url":"https://github.com/dotnet/machinelearning/issues/1019","RelatedDescription":"Open issue \"Backslash encoded in filenames for model zip\" (#1019)"},{"Id":"363399388","IsPullRequest":false,"CreatedAt":"2018-09-25T03:47:23","Actor":"Anipik","Number":"1018","RawContent":null,"Title":"substitute AlignedArray with a regular array","State":"open","Body":"This issue tracks the progress with removing the aligned array.\r\n\r\nThe aligned array wont make much difference here as we do a lot of move operation.\r\n\r\n\r\nMore Discussion https://github.com/dotnet/machinelearning/pull/383\r\n\r\nRough Implementation :- https://github.com/Anipik/machinelearning/tree/temp\r\n\r\n\r\nThis branch removes all the aligned array code from src as well as implementation. All the tests are passing\r\nWill update the issue with performance numbers soon\r\n\r\ncc @danmosemsft @tannergooding @TomFinley @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1018","RelatedDescription":"Open issue \"substitute AlignedArray with a regular array\" (#1018)"},{"Id":"363330592","IsPullRequest":true,"CreatedAt":"2018-09-25T03:19:57","Actor":"TomFinley","Number":"1007","RawContent":null,"Title":"Rename the static pipeline namespace.","State":"closed","Body":"* Microsoft.ML.Data.StaticPipe to Microsoft.ML.StaticPipe.\r\n* Columns now in StaticPipe as opposed to StaticPipe.Runtime.\r\n\r\nThis should fix some of the more obnoxious issues with intellisense involving pipeline columns, just so long as they actually use `Microsoft.ML.StaticPipe` namespace.\r\n\r\nRefinement and iteration of #778.","Url":"https://github.com/dotnet/machinelearning/pull/1007","RelatedDescription":"Closed or merged PR \"Rename the static pipeline namespace.\" (#1007)"},{"Id":"363375439","IsPullRequest":true,"CreatedAt":"2018-09-25T01:18:57","Actor":"zeahmed","Number":"1017","RawContent":null,"Title":"Converted PcaTransform into Transformer using TransformerWrapper.","State":"open","Body":"This PR implements a work item related to #754.","Url":"https://github.com/dotnet/machinelearning/pull/1017","RelatedDescription":"Open PR \"Converted PcaTransform into Transformer using TransformerWrapper.\" (#1017)"},{"Id":"363370340","IsPullRequest":true,"CreatedAt":"2018-09-25T00:46:11","Actor":"mairaw","Number":"1016","RawContent":null,"Title":"replace e.g. with for example","State":"open","Body":"I've noticed in some of the API docs for ML.NET that I was browsing that there is a heavy use of e.g. which is against our style guide rules (https://docs.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/e/eg). So replaced it across the board on the repo. \r\n\r\nOnce this is merged, I can create a separate PR for i.e. which also shouldn't be used.","Url":"https://github.com/dotnet/machinelearning/pull/1016","RelatedDescription":"Open PR \"replace e.g. with for example\" (#1016)"},{"Id":"363365800","IsPullRequest":false,"CreatedAt":"2018-09-25T00:17:52","Actor":"klausmh","Number":"1015","RawContent":null,"Title":"Cannot get parameters for transforms?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10 / ML.NET 0.5.0\r\n- **.NET Version (eg., dotnet --info)**: 4.6.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nCreated an affine transform, e.g.,\r\n```\r\nNormalizeTransform.Create(environment, new NormalizeTransform.MeanVarArguments { Column = normalizeTransformColumns.ToArray(), UseCdf = true }, data);\r\n```\r\n\r\n- **What happened?**\r\n\r\nThe scale and offset of the actual transform created cannot be retrieved (or can only be retrieved via reflection).\r\n\r\n- **What did you expect?**\r\n\r\nA way to retrieve parameters of transforms.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1015","RelatedDescription":"Open issue \"Cannot get parameters for transforms?\" (#1015)"},{"Id":"363364750","IsPullRequest":true,"CreatedAt":"2018-09-25T00:11:41","Actor":"najeeb-kazmi","Number":"1014","RawContent":null,"Title":"Add Benchmark test for PredictionEngine","State":"open","Body":"Adds a benchmark test to measure performance of doing many single predictions with PredictionEngine.\r\n\r\nCloses #1013 ","Url":"https://github.com/dotnet/machinelearning/pull/1014","RelatedDescription":"Open PR \"Add Benchmark test for PredictionEngine\" (#1014)"},{"Id":"363362558","IsPullRequest":false,"CreatedAt":"2018-09-24T23:59:32","Actor":"najeeb-kazmi","Number":"1013","RawContent":null,"Title":"PredictionEngine benchmark test","State":"open","Body":"Add benchmark test to measure performance of single predictions made by PredictionEngine.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1013","RelatedDescription":"Open issue \"PredictionEngine benchmark test\" (#1013)"},{"Id":"363354830","IsPullRequest":false,"CreatedAt":"2018-09-24T23:19:35","Actor":"danmosemsft","Number":"1011","RawContent":null,"Title":"How to build for netcoreapp3.0","State":"open","Body":"We should document how to build to run on .NET Core 3.0 (so as to use the .NET hardware intrinsics)\r\n\r\nI tried various ideas such as `build -- /p:targetframework=netcoreapp3.0` but didn't succeed yet.\r\n\r\n@eerhardt  ? ","Url":"https://github.com/dotnet/machinelearning/issues/1011","RelatedDescription":"Open issue \"How to build for netcoreapp3.0\" (#1011)"},{"Id":"363351849","IsPullRequest":false,"CreatedAt":"2018-09-24T23:04:42","Actor":"wschin","Number":"1010","RawContent":null,"Title":"Another Update in KeyToVector's ONNX exporter","State":"open","Body":"The key range should starts with zero. The following change fixes this bug with the latest runtime.\r\n-`node.AddAttribute(\"cats_int64s\", Enumerable.Range(1, info.TypeSrc.ItemType.KeyCount).Select(x => (long)x));`\r\n+`node.AddAttribute(\"cats_int64s\", Enumerable.Range(0, info.TypeSrc.ItemType.KeyCount).Select(x => (long)x));`","Url":"https://github.com/dotnet/machinelearning/issues/1010","RelatedDescription":"Open issue \"Another Update in KeyToVector's ONNX exporter\" (#1010)"},{"Id":"363342491","IsPullRequest":true,"CreatedAt":"2018-09-24T22:23:34","Actor":"tannergooding","Number":"1008","RawContent":null,"Title":"Move towards being able to build for x86","State":"open","Body":"This is work towards https://github.com/dotnet/machinelearning/issues/97\r\n\r\nIt allows you to build using `build.cmd -buildArch=x86` and, if you manually set the correct testhost, it allows the tests to pass.","Url":"https://github.com/dotnet/machinelearning/pull/1008","RelatedDescription":"Open PR \"Move towards being able to build for x86\" (#1008)"},{"Id":"363330400","IsPullRequest":false,"CreatedAt":"2018-09-24T21:38:14","Actor":"klausmh","Number":"1006","RawContent":null,"Title":"LinearPredictor.Statistics is always null","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10 / ML.NET 0.5.0\r\n- **.NET Version (eg., dotnet --info)**: 4.6.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI train a model using logistic regression:\r\n```\r\nvar trainer = new LogisticRegression(\r\n                        environment,\r\n                        new LogisticRegression.Arguments() { ShowTrainingStats = true });\r\nvar trainRoles = ...\r\nvar predictor.Train(trainRoles)\r\n```\r\n\r\n- **What happened?**\r\n`predictor.Statistics` is null\r\n\r\n- **What did you expect?**\r\nTo be able to retrieve model statistics\r\n\r\n\r\n### Source code / logs\r\n\r\n`LogisticRegression.CreatePredictor` does not pass its `_stats` `LinearModelingStatistics` field when it creates a `LinearBinaryPredictor`: https://github.com/dotnet/machinelearning/blob/1e7b8be855210f2bd8adbd532396a1840a20541d/src/Microsoft.ML.StandardLearners/Standard/LogisticRegression/LogisticRegression.cs#L327.\r\n\r\nIf I do change that, then `predictor.Statistics.GetCoefficientStatistics` still returns null. It appears that you calculate the inverted Hessian, but then do not use it to calculate standard errors (and pass these in the constructor of `LinearModelStatistics'): https://github.com/dotnet/machinelearning/blob/1e7b8be855210f2bd8adbd532396a1840a20541d/src/Microsoft.ML.StandardLearners/Standard/LogisticRegression/LogisticRegression.cs#L189.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1006","RelatedDescription":"Open issue \"LinearPredictor.Statistics is always null\" (#1006)"},{"Id":"363322105","IsPullRequest":true,"CreatedAt":"2018-09-24T21:10:43","Actor":"Zruty0","Number":"1005","RawContent":null,"Title":"TrainTestSplit function","State":"open","Body":"Part of #754\r\nAdded TrainTestSplit function to training contexts.","Url":"https://github.com/dotnet/machinelearning/pull/1005","RelatedDescription":"Open PR \"TrainTestSplit function\" (#1005)"},{"Id":"363316124","IsPullRequest":false,"CreatedAt":"2018-09-24T20:52:58","Actor":"zeahmed","Number":"1004","RawContent":null,"Title":"Consistency issue with LdaTransform","State":"open","Body":"Despite setting the `seed` in the ML.Net environment, LdaTransform does not produce consistent result which is a hurdle to writing a end-to-end functional test.\r\n\r\nResults are consistent when setting `ResetRandomGenerator=true` in LdaTransform on single box. However, on build server test is failing.\r\n\r\nPlease see the following test for more detail.\r\nhttps://github.com/dotnet/machinelearning/blob/5874e16fd652d93630e0622a756f1b913ca8ea55/test/Microsoft.ML.Tests/Transformers/TextFeaturizerTests.cs#L239\r\n ","Url":"https://github.com/dotnet/machinelearning/issues/1004","RelatedDescription":"Open issue \"Consistency issue with LdaTransform\" (#1004)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-26T05:30:36.693253Z","RunDurationInMilliseconds":1029}