{"Data":{"GitHub":{"Issues":[{"Id":"368248193","IsPullRequest":true,"CreatedAt":"2018-10-10T03:19:21","Actor":"eerhardt","Number":"1193","RawContent":null,"Title":" Enable a QuantileRegression Test & Fix Duplicated Baseline Files","State":"closed","Body":"Enable CommandTrainScoreEvaluateQuantileRegression, add the dataset and the necessary baselines.\r\n\r\nThe only baseline changes were of the form that were caused by dotnet/corefx#31847.\r\n\r\nAllow BaseTestBaseline to check Common first.\r\n\r\nA lot of baseline tests have duplicated baselines between debug and release. Allow BaseTestBaseline to check the Common baseline directory for a baseline file first.\r\n\r\nAlso, I cleaned a bunch of dead code from BaseTestBaseline.\r\n\r\nFix #410","Url":"https://github.com/dotnet/machinelearning/pull/1193","RelatedDescription":"Closed or merged PR \" Enable a QuantileRegression Test & Fix Duplicated Baseline Files\" (#1193)"},{"Id":"368446866","IsPullRequest":true,"CreatedAt":"2018-10-10T00:18:06","Actor":"zeahmed","Number":"1208","RawContent":null,"Title":"Removed shuffling from TensorFlowTransform.","State":"open","Body":"Removed the shuffling of data that was being done internally in TensorFlowTransform (was commented out due to #1106). The idea is to give user more control over the shuffling by allowing them to use the ShuffleTransform in their pipeline explicit.\r\n\r\nThis also reduces the number of parameters in TensorFlowTransform.Argument class. Please see the modified tests for use-cases. Tests with shuffling are currently disabled due to #1106.","Url":"https://github.com/dotnet/machinelearning/pull/1208","RelatedDescription":"Open PR \"Removed shuffling from TensorFlowTransform.\" (#1208)"},{"Id":"368445821","IsPullRequest":false,"CreatedAt":"2018-10-10T00:12:33","Actor":"zeahmed","Number":"1207","RawContent":null,"Title":"FastTreeBinaryClassificationCategoricalSplitTest taking very long to execute...","State":"open","Body":"The following test is taking 15-25mins (depending on system) alone to execute.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/8ca1c9386587aa4ef77c56f605f8244debefce93/test/Microsoft.ML.Predictor.Tests/TestPredictors.cs#L711\r\n\r\nIs there any policy for test execution time in ML.Net build system?","Url":"https://github.com/dotnet/machinelearning/issues/1207","RelatedDescription":"Open issue \"FastTreeBinaryClassificationCategoricalSplitTest taking very long to execute...\" (#1207)"},{"Id":"368420526","IsPullRequest":true,"CreatedAt":"2018-10-09T22:17:31","Actor":"sfilipi","Number":"1206","RawContent":null,"Title":"Enabling FFM tests","State":"open","Body":"Addresses part of #404 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1206","RelatedDescription":"Open PR \"Enabling FFM tests\" (#1206)"},{"Id":"368004165","IsPullRequest":true,"CreatedAt":"2018-10-09T21:55:54","Actor":"zeahmed","Number":"1191","RawContent":null,"Title":"Exposed TensorFLow session as TensorFlowModelInfo class","State":"closed","Body":"This PR fixes #1157 where loaded `TFSession` is wrapped into `TensorFlowModelInfo` class.\r\nIn addition to that, the `TensorFlowModelInfo` provides following methods to query schema\r\n\r\n- GetModelSchema(): Get all the information in the model as `ISchema` object.\r\n- GetInputSchema(): Get only input related information from the model as `ISchema` object. It is useful for the case when the graph is very large and user cannot locate inputs in such a large graphs.\r\n\r\nPlease see the modified test for more insights.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1191","RelatedDescription":"Closed or merged PR \"Exposed TensorFLow session as TensorFlowModelInfo class\" (#1191)"},{"Id":"368403656","IsPullRequest":false,"CreatedAt":"2018-10-09T21:22:25","Actor":"yaeldekel","Number":"1205","RawContent":null,"Title":"Logistic Regression doesn't work with training stats","State":"open","Body":"Stats that are being computed at training time aren't passed to the predictor.","Url":"https://github.com/dotnet/machinelearning/issues/1205","RelatedDescription":"Open issue \"Logistic Regression doesn't work with training stats\" (#1205)"},{"Id":"368390657","IsPullRequest":false,"CreatedAt":"2018-10-09T20:47:42","Actor":"CESARDELATORRE","Number":"1204","RawContent":null,"Title":"Classification stratificationColumn not supported for boolean column","State":"open","Body":"For not balanced datasets, with stratified splitting, the data is divided in such a way that a percentage of each target column value is put in both training and test dataset.\r\n\r\nHowever, the following line of code throws an error if the column 'Label' is Boolean, which is very common for binary classification.\r\n\r\n`(trainData, testData) = classification.TrainTestSplit(data, testFraction: 0.2, stratificationColumn: \"Label\");`\r\n\r\nIt would work if the Label column would be float or other types.\r\n\r\nI might be missing something, but why is Boolean not supported for the `stratificationColumn`?\r\nCan we support it since it can be a common scenario for binary classifications?","Url":"https://github.com/dotnet/machinelearning/issues/1204","RelatedDescription":"Open issue \"Classification stratificationColumn not supported for boolean column\" (#1204)"},{"Id":"368367808","IsPullRequest":false,"CreatedAt":"2018-10-09T19:46:38","Actor":"Zruty0","Number":"1203","RawContent":null,"Title":"ML.NET command line tool","State":"open","Body":"I think we should consider making ML.NET command-line tool an actual first-class citizen.\r\n\r\nA bit of insider knowledge: we currently already have a commandline tool, that is a port of `maml.exe`. You can launch it as follows (this shows the 'help' command, or the `?` command).\r\n```\r\ndotnet .\\bin\\AnyCPU.Debug\\Microsoft.ML.Console\\netcoreapp2.1\\MML.dll ?\r\n```\r\n\r\nGenerally, the syntax is `dotnet MML.dll <command> <arguments>`, and the current list of commands include things like `train`, `CV`, `showdata` etc. (full list is available via `dotnet MML.dll ? kind=command`).\r\n\r\nThis command-line tool is actually very powerful (although the language is clunky). \r\n\r\nWe could easily expand the command-line tool to handle common programming sub-tasks, like:\r\n- Generate prediction code from model (actually, we already have `codegen`, but it needs some retouch to work with the new API);\r\n- Inspect the contents of the model (which transformers are there and how they are set up);\r\n- Introspect into the TensorFlow or other external model format (`Microsoft.ML.Tensorflow` could have a commandline interface to list the nodes of the graph;\r\n- etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1203","RelatedDescription":"Open issue \"ML.NET command line tool\" (#1203)"},{"Id":"368363826","IsPullRequest":false,"CreatedAt":"2018-10-09T19:35:30","Actor":"Zruty0","Number":"1202","RawContent":null,"Title":"Consider having a 'config file' for ML.NET","State":"open","Body":"In case an ML.NET model is already trained and persisted, we can still control to some degree the behavior of the model at prediction time. For example, we could:\r\n- limit the model to only one thread or let it run multi-threaded\r\n- use GPU or CPU for math\r\n- specify a location for temporary / transient resources.\r\n\r\netc. \r\nWe could consider having a ML.NET dedicated session in `app.config` for the application to control these, or we could use system environment variables, or we could have a 'ML.NET config' text file that the `MLContext` will initialize with.\r\n\r\nThis came up in the process of the API discussion, so creating the issue for future consideration.","Url":"https://github.com/dotnet/machinelearning/issues/1202","RelatedDescription":"Open issue \"Consider having a 'config file' for ML.NET\" (#1202)"},{"Id":"368362325","IsPullRequest":false,"CreatedAt":"2018-10-09T19:31:14","Actor":"Zruty0","Number":"1201","RawContent":null,"Title":"Is Estimator a good enough name?","State":"open","Body":"As @CESARDELATORRE pointed out, the term `Estimator` means two different things in Spark and in sklearn. \r\n\r\nOur terminology is in line with Spark one: the `Estimator` is a 'factory for a `Transformer`', or 'a components that trains a `Transformer` based on the data.\r\n\r\nHowever, it would be even better if we avoided the naming clash with sklearn. So far, the other alternative names for `Estimator` have been taken from generic .NET architecture: `TransformerBuilder`, `TransformerFactory` etc.\r\n\r\nI am personally not a big fan of either of the above, but they do have the benefit of mapping the behavior to other known .NET concepts. \r\n\r\nIn any case, let's see if there are better suggestions, or if there is strong preference to the existing names.","Url":"https://github.com/dotnet/machinelearning/issues/1201","RelatedDescription":"Open issue \"Is Estimator a good enough name?\" (#1201)"},{"Id":"368357896","IsPullRequest":true,"CreatedAt":"2018-10-09T19:18:33","Actor":"helloguo","Number":"1200","RawContent":null,"Title":"Update Load8 with GatherVector256 instruction for .NET Core 3","State":"open","Body":"Update Load8 with GatherVector256 instruction for .NET Core 3. Fix https://github.com/dotnet/machinelearning/issues/1195\r\n\r\nBefore the change:\r\n![before](https://user-images.githubusercontent.com/18431130/46692878-3435d200-cbbd-11e8-9123-86fa62cfc6ab.PNG)\r\n\r\nAfter the change:\r\n![after](https://user-images.githubusercontent.com/18431130/46692901-40ba2a80-cbbd-11e8-9037-c561745bdb3e.PNG)\r\n\r\ncc\\ @adamsitnik @eerhardt\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1200","RelatedDescription":"Open PR \"Update Load8 with GatherVector256 instruction for .NET Core 3\" (#1200)"},{"Id":"368345583","IsPullRequest":false,"CreatedAt":"2018-10-09T18:46:11","Actor":"Anipik","Number":"1199","RawContent":null,"Title":"Regex Number Parsing Errors for netcoreapp 3.0","State":"open","Body":"There are two issue that we face while matching the baseline files while running tests for netcoreapp3.0\r\n\r\n- The regex treats -0 and 0 differently. We may need to modify the regex for filtering the numbers to treat -0 and 0 same.\r\n- Some numbers are in written in the baseline file in the form of exponentials eg ```5.011722E-35``` They are not  picked up by the regex. so while matching these numbers we do an exact match rather than a floating number comparison with some buffer which fails for netcoreapp3.0\r\n\r\n\r\ncc @danmosemsft @tannergooding @eerhardt @shauheen @codemzs \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1199","RelatedDescription":"Open issue \"Regex Number Parsing Errors for netcoreapp 3.0\" (#1199)"},{"Id":"367881882","IsPullRequest":true,"CreatedAt":"2018-10-09T17:44:29","Actor":"sfilipi","Number":"1184","RawContent":null,"Title":"sweeping the space of link formats","State":"closed","Body":"Trying to correct the link format for the sample referenced from the documentation. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1184","RelatedDescription":"Closed or merged PR \"sweeping the space of link formats\" (#1184)"},{"Id":"368313620","IsPullRequest":false,"CreatedAt":"2018-10-09T17:18:54","Actor":"justinormont","Number":"1198","RawContent":null,"Title":"Mapping U4 datatype to Int64 in ONNX","State":"open","Body":"Currently, for ONNX, we are mapping a `U4` datatype (an unsigned 32-bit integer) to an `Int64`.\r\n\r\nShould we be instead mapping the `U4` datatype to `Uint32` in ONNX? Or is there no support for a `Uint32`, and we're storing in an `Int64`?\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/ff85a5cd0757fedf20572d3a542d7e6ca78c9851/src/Microsoft.ML.Onnx/OnnxUtils.cs#L314-L316\r\n\r\n@wschin noted we have been mapping `U4` to `Int64` for the last two releases of WinML: https://github.com/dotnet/machinelearning/pull/947#discussion_r223443413 ","Url":"https://github.com/dotnet/machinelearning/issues/1198","RelatedDescription":"Open issue \"Mapping U4 datatype to Int64 in ONNX\" (#1198)"},{"Id":"368311945","IsPullRequest":false,"CreatedAt":"2018-10-09T17:14:02","Actor":"ganik","Number":"1197","RawContent":null,"Title":"Fix duplicate params in entrypoints","State":"open","Body":"Following entrypoints have duplicate param names:\r\nData.DataViewReference \r\nModels.CrossValidator\r\nModels.CrossValidationResultsCombiner\r\nModels.PipelineSweeper\r\nModels.PipelineSweeper\r\nModels.SweepResultExtractor\r\nModels.TrainTestEvaluator\r\nTransforms.TwoHeterogeneousModelCombiner\r\nTransforms.ManyHeterogeneousModelCombiner\r\n\r\nThis is not a bug per se. This is about how to make entrypoint API easy to use by 3rd parties/clients. Since I have been implementing such a client, I can share my experience. We have viewed \"entrypoint\" as a function, sort of RPC that you can call. All the parameters for \"entrypoint\" are parameters of such a function. \r\nOn example of TensorFlowScorer (fixed by #1169 ) : even though Model is set as \"Output\" param, its actually required to set this param to a filepath so ML.NET can output zipped model there. Therefore entrypoint needs 2 model params: one to specify filepath for input model, another one to specify path for output model. I am not sure if I know any programming language where function can accept parameters with the same name.\r\nOf course its possible to view \"entrypoint\" not as a method but some sort of class, or break up params into separate Input and Output structs and populate separately, but in the end, on a highest level, what is going to surface to user is a function with params to specify input and output model paths. It would be easier to avoid intermediates and being able to have that high level function built right on top of manifest.json specs.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1197","RelatedDescription":"Open issue \"Fix duplicate params in entrypoints\" (#1197)"},{"Id":"367859715","IsPullRequest":false,"CreatedAt":"2018-10-09T17:13:01","Actor":"Rammohan91","Number":"1181","RawContent":null,"Title":"Unable to Install Microsoft.ML on target framework .NET Framework 4.6.1","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 7\r\n- **.NET Version (eg., dotnet --info)**:  4.6.1\r\n- **Studio Version**: Visual Studio 2015\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nAttempt to install Microsoft.ML v0.6.0.\r\n\r\n- **What happened?**\r\nError message was thrown as: Could not install package 'Microsoft.ML 0.6.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\r\n\r\n- **What did you expect?**\r\nPackage should have been installed successfully.\r\n\r\nNote: I have already installed Latest NuGet VSIX for VS 2015 & NET Standard Build Support.\r\n\r\n###Error\t\tCould not install package 'Microsoft.ML 0.6.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\t\t\t0\t\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1181","RelatedDescription":"Closed issue \"Unable to Install Microsoft.ML on target framework .NET Framework 4.6.1\" (#1181)"},{"Id":"368266865","IsPullRequest":false,"CreatedAt":"2018-10-09T15:23:37","Actor":"adamsitnik","Number":"1196","RawContent":null,"Title":"Improve `AvxIntrinsics.DotSU` performance","State":"open","Body":"Our profiles show that DotSU which should be faster with AVX is actually slower and takes more time. This can be confirmed running our CpuMathBenchmarks:\r\n\r\n`..\\..\\Tools\\dotnetcli\\dotnet.exe run -c Release-Intrinsics -f netcoreapp3.0 -- -f *.DotSU --join`\r\n\r\n|                   Type | Method |     Mean |     Error |    StdDev | Extra Metric |\r\n|----------------------- |------- |---------:|----------:|----------:|-------------:|\r\n|    AvxPerformanceTests |  DotSU | 2.545 ms | 0.0590 ms | 0.0580 ms |            - |\r\n| NativePerformanceTests |  DotSU | 2.463 ms | 0.0612 ms | 0.0704 ms |            - |\r\n|    SsePerformanceTests |  DotSU | 2.494 ms | 0.0480 ms | 0.0449 ms |            - |\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1196","RelatedDescription":"Open issue \"Improve `AvxIntrinsics.DotSU` performance\" (#1196)"},{"Id":"368263066","IsPullRequest":false,"CreatedAt":"2018-10-09T15:15:31","Actor":"adamsitnik","Number":"1195","RawContent":null,"Title":"Remove the `AddScaleSU` performance regression for AVX","State":"open","Body":"Our profiles show that `AddScaleSU` which should be faster with AVX is actually slower and takes more time. This can be confirmed running our CpuMathBenchmarks:\r\n\r\n`..\\..\\Tools\\dotnetcli\\dotnet.exe run -c Release-Intrinsics -- -f *.AddScaleSU --join`\r\n\r\n|                   Type |     Method |     Mean |\r\n|----------------------- |----------- |---------:|\r\n|    AvxPerformanceTests | AddScaleSU | 4.012 ms |\r\n| NativePerformanceTests | AddScaleSU | 2.966 ms |\r\n|    SsePerformanceTests | AddScaleSU | 2.916 ms |\r\n\r\nThis issue has been spotted by @eerhardt in August https://github.com/dotnet/machinelearning/pull/691#issuecomment-414364378\r\n\r\n@helloguo suggested https://github.com/dotnet/machinelearning/pull/691#issuecomment-414375034 that `GatherVector256` intrinsic should be used","Url":"https://github.com/dotnet/machinelearning/issues/1195","RelatedDescription":"Open issue \"Remove the `AddScaleSU` performance regression for AVX\" (#1195)"},{"Id":"368255541","IsPullRequest":false,"CreatedAt":"2018-10-09T14:59:46","Actor":"adamsitnik","Number":"1194","RawContent":null,"Title":"Benchmark results analysis for .NET Core 2.1 vs 3.0","State":"open","Body":"I took all of our benchmarks and run them for:\r\n\r\n1.  .NET Core 2.1 using **native** `CpuMathNative` which uses **SSE**\r\n2. .NET Core 3.0 using new **managed** Hardware Intrinsics API which uses **AVX** with Tiered compilation **enabled**\r\n3. .NET Core 3.0 using new **managed** Hardware Intrinsics API which uses **AVX** with Tiered compilation **disabled**\r\n\r\nI will add a separate comment for every benchmark in this issue with some analysis.\r\n\r\nEnvironment info:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.1.784-nightly, OS=Windows 10.0.17134.285 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\nFrequency=3507500 Hz, Resolution=285.1033 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-alpha1-009622\r\n  [Host]             : .NET Core 3.0.0-preview1-26924-01 (CoreCLR 4.6.26921.06, CoreFX 4.6.26921.03), 64bit RyuJIT\r\n  Core 2.1           : .NET Core 2.1.4 (CoreCLR 4.6.26814.03, CoreFX 4.6.26814.02), 64bit RyuJIT\r\n  Core 3.0 NonTiered : .NET Core 3.0.0-preview1-26924-01 (CoreCLR 4.6.26921.06, CoreFX 4.6.26921.03), 64bit RyuJIT\r\n  Core 3.0 Tiered    : .NET Core 3.0.0-preview1-26924-01 (CoreCLR 4.6.26921.06, CoreFX 4.6.26921.03), 64bit RyuJIT\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1194","RelatedDescription":"Open issue \"Benchmark results analysis for .NET Core 2.1 vs 3.0\" (#1194)"},{"Id":"368054407","IsPullRequest":true,"CreatedAt":"2018-10-09T06:10:31","Actor":"sfilipi","Number":"1192","RawContent":null,"Title":"Snapping average perceptron and OGD to the other constructors.","State":"open","Body":"Addresses part of #910. \r\nWon't close #910 as part of this PR, to deal with the calibration in AP separately. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1192","RelatedDescription":"Open PR \"Snapping average perceptron and OGD to the other constructors.\" (#1192)"},{"Id":"367578236","IsPullRequest":true,"CreatedAt":"2018-10-09T02:22:10","Actor":"ThePiranha","Number":"1179","RawContent":null,"Title":"General grammar fix","State":"closed","Body":"General grammar fix and added the missing word\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1179","RelatedDescription":"Closed or merged PR \"General grammar fix\" (#1179)"},{"Id":"367989943","IsPullRequest":false,"CreatedAt":"2018-10-08T23:43:04","Actor":"Ivanidzo4ka","Number":"1190","RawContent":null,"Title":"What should be our strategy to handle failure in transformer","State":"open","Body":"So pretty much every transformer has a GetGetter delegate which looks on source column, get value from that column and handles it.\r\n```cs\r\n var getSrc = input.GetGetter<TSrc>(colIndex);\r\nValueGetter<TDst> retVal =\r\n     (ref TDst dst) =>\r\n     {\r\n      getSrc(ref src);\r\n      DoMagic(ref src, ref dst);\r\n    };\r\n```\r\nIn ideal world, that DoMagic procedure would always give us proper results, but unfortunately in real world some cases can't be handled and if we rely on code written by 3rd party we can't even fix it.\r\n\r\nMy question is following, what should be our strategy for that cases?\r\nI see few options:\r\n\r\n1.   Just throw exception if you can't handle it. This is quite straightforward, but in same time I think it not user friendly, especially during scoring for huge file.\r\n\r\n2. Force each transform to handle src ==null case and just set dst to null as well (i'm talking mostly about src is VBuffer<T> class) and in learner/ scorer ignore such rows. I would also add threshold to learner/ scorer to throw in case if percentage/absolute values of such rows exceed it. For me this feels like more user friendly approach. \r\n\r\nAny one willing to discuss? @Zruty0 @TomFinley @markusweimer @shauheen @eerhardt @CESARDELATORRE  @GalOshri @justinormont ","Url":"https://github.com/dotnet/machinelearning/issues/1190","RelatedDescription":"Open issue \"What should be our strategy to handle failure in transformer\" (#1190)"},{"Id":"367980880","IsPullRequest":true,"CreatedAt":"2018-10-08T22:56:42","Actor":"sfilipi","Number":"1189","RawContent":null,"Title":"Adding a sample for Vector<T> ConcatWith<T>(this Scalar<T> me, params ScalarOrVector<T>[] others)","State":"open","Body":"Adding a sample to use in the documentation\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1189","RelatedDescription":"Open PR \"Adding a sample for Vector<T> ConcatWith<T>(this Scalar<T> me, params ScalarOrVector<T>[] others)\" (#1189)"},{"Id":"367972357","IsPullRequest":false,"CreatedAt":"2018-10-08T22:18:13","Actor":"yaeldekel","Number":"1188","RawContent":null,"Title":"Sweeper: ConfigRunner runs ResultProcessor without loading any assemblies into ComponentCatalog","State":"open","Body":"ExeConfigRunner uses ResultProcessor to summarize the metrics of the different runs, however, ResultProcessor needs to find components in the ComponentCatalog, so they should be loaded before calling it.","Url":"https://github.com/dotnet/machinelearning/issues/1188","RelatedDescription":"Open issue \"Sweeper: ConfigRunner runs ResultProcessor without loading any assemblies into ComponentCatalog\" (#1188)"},{"Id":"367969120","IsPullRequest":false,"CreatedAt":"2018-10-08T22:05:26","Actor":"yaeldekel","Number":"1187","RawContent":null,"Title":"Conversion: TryParseKey() throws an exception","State":"open","Body":"The method checks that IsStdMissing() returns false, but it is called without doing that check.\r\nWe should remove this check and return false if IsStdMissing().","Url":"https://github.com/dotnet/machinelearning/issues/1187","RelatedDescription":"Open issue \"Conversion: TryParseKey() throws an exception\" (#1187)"},{"Id":"367967990","IsPullRequest":false,"CreatedAt":"2018-10-08T22:01:04","Actor":"yaeldekel","Number":"1186","RawContent":null,"Title":"ResultProcessor.cs: code under \"#if TLCFULLBUILD\" doesn't build","State":"open","Body":"Old code had result.Trainer.Kind, new syntax is result.TrainerKind.","Url":"https://github.com/dotnet/machinelearning/issues/1186","RelatedDescription":"Open issue \"ResultProcessor.cs: code under \"#if TLCFULLBUILD\" doesn't build\" (#1186)"},{"Id":"367874202","IsPullRequest":true,"CreatedAt":"2018-10-08T21:08:02","Actor":"sfilipi","Number":"1182","RawContent":null,"Title":"adding the functions used to build MlNetMklDeps for 0.0.0.6","State":"closed","Body":"Added the functions used, the nuspec, and the versions of mkl where the custom binaries got built from. \r\nThis complement #1103 by adding the info about how those packages get built. \r\n\r\nAfter checking this in, will follow with the info about 0.0.0.7","Url":"https://github.com/dotnet/machinelearning/pull/1182","RelatedDescription":"Closed or merged PR \"adding the functions used to build MlNetMklDeps for 0.0.0.6\" (#1182)"},{"Id":"367931007","IsPullRequest":true,"CreatedAt":"2018-10-08T19:55:57","Actor":"sfilipi","Number":"1185","RawContent":null,"Title":"skipping the MulticlassTreeFeaturizedLRTest on osx debug","State":"open","Body":"This is the main checking hurtle.. I'll log an issue about dealing with it separately. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1185","RelatedDescription":"Open PR \"skipping the MulticlassTreeFeaturizedLRTest on osx debug\" (#1185)"},{"Id":"367879957","IsPullRequest":false,"CreatedAt":"2018-10-08T17:11:27","Actor":"sfilipi","Number":"1183","RawContent":null,"Title":"The link of the sdca examples is not being populated in the documentation. ","State":"open","Body":"The Sdca regression extension is referencing the code snippet from Microsoft.ML.Samples/Trainers.cs for the example in the documentation, but the documentation website doesn't pull the code.  The format of the link needs to be fixed. \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1183","RelatedDescription":"Open issue \"The link of the sdca examples is not being populated in the documentation. \" (#1183)"},{"Id":"367839462","IsPullRequest":false,"CreatedAt":"2018-10-08T15:19:34","Actor":"ixtreon","Number":"1180","RawContent":null,"Title":"Static Pipeline throws `IndexOutOfRangeException` with multiple column mappings","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro v1803, build 17134.285\r\n- **.NET Version (eg., dotnet --info)**: 2.1.402 @ commit 3599f217f4\r\n\r\n### Issue\r\n\r\n- **What did you do?** Translated an existing pipeline for text classification from the \"legacy\" pipeline builder to the new static API. Starting off with 2 text fields, we'd tokenize them and feed the results into a classifier. The classifier we are using is the FAFM which allows variable number of float vectors to be passed as the input.\r\n\r\n- **What happened?** Code throws a `System.IndexOutOfRangeException` exception during training. Removing the second column from the tokenization **and** from the classifier fixes the issue.\r\n- **What did you expect?** Applying the same operation twice and passing 2 `Vector<float>` inputs to the FAFM classifier should train a model using both of these, not crash.\r\n\r\n### Source code / logs\r\n\r\n```\r\nSystem.IndexOutOfRangeException: 'Index was outside the bounds of the array.'\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetDependencies(Func`2 predicate)\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetRow(IRow input, Func`2 active, Action& disposer)\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetRow(IRow input, Func`2 active, Action& disposer)\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetRow(IRow input, Func`2 active, Action& disposer)\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetRow(IRow input, Func`2 active, Action& disposer)\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetRow(IRow input, Func`2 active, Action& disposer)\r\n   at Microsoft.ML.Runtime.Data.CompositeRowToRowMapper.GetRow(IRow input, Func`2 active, Action& disposer)\r\n   at Microsoft.ML.Runtime.Api.PredictionEngine`2..ctor(IHostEnvironment env, Func`2 makeMapper, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Api.ComponentCreation.CreatePredictionEngine[TSrc,TDst](IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Data.PredictionFunction`2..ctor(IHostEnvironment env, ITransformer transformer)\r\n   at Microsoft.ML.Runtime.Data.PredictionFunctionExtensions.MakePredictionFunction[TSrc,TDst](ITransformer transformer, IHostEnvironment env)\r\n   at OpenRent.ML.Spam2.SpamTrainer.Foo(IList`1 source)\r\n   at OpenRent.Utils.Scripts.Spam.SpamEvaluator.Run() in C:\\OpenRent\\OpenRent\\OpenRent.Utils\\Scripts\\Spam\\SpamEvaluator.cs:line 99\r\n   at OpenRent.Utils.Program.runScript() in C:\\OpenRent\\OpenRent\\OpenRent.Utils\\Program.cs:line 66\r\n   at OpenRent.Utils.Program.Main() in C:\\OpenRent\\OpenRent\\OpenRent.Utils\\Program.cs:line 39\r\n```\r\n\r\n### Proposed Fix\r\n - There is what looks like a typo on L39, in the `CompositeRowToRowMapper.cs` file, in the `Microsoft.ML.Data` project. \r\n - The line reads: `for (int i = _innerMappers.Length - 1; i <= 0; --i)`\r\n - In order to loop through all `_innerMappers` the `<=` comparison should be changed to a `>=` . \r\n - After changing the sign the code compiles, tests pass and training completes as expected.","Url":"https://github.com/dotnet/machinelearning/issues/1180","RelatedDescription":"Open issue \"Static Pipeline throws `IndexOutOfRangeException` with multiple column mappings\" (#1180)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-10T05:30:34.7544103Z","RunDurationInMilliseconds":1111}